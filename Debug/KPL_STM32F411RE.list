
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b34  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006cd4  08006cd4  00007cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e04  08006e04  000080ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006e04  08006e04  00007e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e0c  08006e0c  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e0c  08006e0c  00007e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e10  08006e10  00007e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08006e14  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  200000ac  08006ec0  000080ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d2c  08006ec0  00008d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f91  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  0001f06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00023ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938d  00000000  00000000  00024c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001731e  00000000  00000000  0003dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009873a  00000000  00000000  000552e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eda1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000eda60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f3398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006cbc 	.word	0x08006cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08006cbc 	.word	0x08006cbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ScanColumns>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 80c0 	bhi.w	8000712 <ScanColumns+0x192>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ScanColumns+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	08000605 	.word	0x08000605
 80005a0:	0800065f 	.word	0x0800065f
 80005a4:	080006b9 	.word	0x080006b9
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80005a8:	2101      	movs	r1, #1
 80005aa:	4861      	ldr	r0, [pc, #388]	@ (8000730 <ScanColumns+0x1b0>)
 80005ac:	f001 feba 	bl	8002324 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <ScanColumns+0x3a>
 80005b6:	2343      	movs	r3, #67	@ 0x43
 80005b8:	e0b5      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 80005ba:	2102      	movs	r1, #2
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <ScanColumns+0x1b0>)
 80005be:	f001 feb1 	bl	8002324 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <ScanColumns+0x4c>
 80005c8:	2337      	movs	r3, #55	@ 0x37
 80005ca:	e0ac      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 80005cc:	2104      	movs	r1, #4
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <ScanColumns+0x1b0>)
 80005d0:	f001 fea8 	bl	8002324 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ScanColumns+0x5e>
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	e0a3      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 80005de:	2108      	movs	r1, #8
 80005e0:	4853      	ldr	r0, [pc, #332]	@ (8000730 <ScanColumns+0x1b0>)
 80005e2:	f001 fe9f 	bl	8002324 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <ScanColumns+0x70>
 80005ec:	2331      	movs	r3, #49	@ 0x31
 80005ee:	e09a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 80005f0:	2110      	movs	r1, #16
 80005f2:	484f      	ldr	r0, [pc, #316]	@ (8000730 <ScanColumns+0x1b0>)
 80005f4:	f001 fe96 	bl	8002324 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 808b 	bne.w	8000716 <ScanColumns+0x196>
 8000600:	2341      	movs	r3, #65	@ 0x41
 8000602:	e090      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000604:	2101      	movs	r1, #1
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <ScanColumns+0x1b0>)
 8000608:	f001 fe8c 	bl	8002324 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ScanColumns+0x96>
 8000612:	2330      	movs	r3, #48	@ 0x30
 8000614:	e087      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000616:	2102      	movs	r1, #2
 8000618:	4845      	ldr	r0, [pc, #276]	@ (8000730 <ScanColumns+0x1b0>)
 800061a:	f001 fe83 	bl	8002324 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ScanColumns+0xa8>
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	e07e      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000628:	2104      	movs	r1, #4
 800062a:	4841      	ldr	r0, [pc, #260]	@ (8000730 <ScanColumns+0x1b0>)
 800062c:	f001 fe7a 	bl	8002324 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <ScanColumns+0xba>
 8000636:	2335      	movs	r3, #53	@ 0x35
 8000638:	e075      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800063a:	2108      	movs	r1, #8
 800063c:	483c      	ldr	r0, [pc, #240]	@ (8000730 <ScanColumns+0x1b0>)
 800063e:	f001 fe71 	bl	8002324 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <ScanColumns+0xcc>
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	e06c      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800064c:	2110      	movs	r1, #16
 800064e:	4838      	ldr	r0, [pc, #224]	@ (8000730 <ScanColumns+0x1b0>)
 8000650:	f001 fe68 	bl	8002324 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d15f      	bne.n	800071a <ScanColumns+0x19a>
 800065a:	2342      	movs	r3, #66	@ 0x42
 800065c:	e063      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 800065e:	2101      	movs	r1, #1
 8000660:	4833      	ldr	r0, [pc, #204]	@ (8000730 <ScanColumns+0x1b0>)
 8000662:	f001 fe5f 	bl	8002324 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <ScanColumns+0xf0>
 800066c:	2345      	movs	r3, #69	@ 0x45
 800066e:	e05a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000670:	2102      	movs	r1, #2
 8000672:	482f      	ldr	r0, [pc, #188]	@ (8000730 <ScanColumns+0x1b0>)
 8000674:	f001 fe56 	bl	8002324 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <ScanColumns+0x102>
 800067e:	2339      	movs	r3, #57	@ 0x39
 8000680:	e051      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000682:	2104      	movs	r1, #4
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <ScanColumns+0x1b0>)
 8000686:	f001 fe4d 	bl	8002324 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <ScanColumns+0x114>
 8000690:	2336      	movs	r3, #54	@ 0x36
 8000692:	e048      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000694:	2108      	movs	r1, #8
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <ScanColumns+0x1b0>)
 8000698:	f001 fe44 	bl	8002324 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <ScanColumns+0x126>
 80006a2:	2333      	movs	r3, #51	@ 0x33
 80006a4:	e03f      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80006a6:	2110      	movs	r1, #16
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <ScanColumns+0x1b0>)
 80006aa:	f001 fe3b 	bl	8002324 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d134      	bne.n	800071e <ScanColumns+0x19e>
 80006b4:	2344      	movs	r3, #68	@ 0x44
 80006b6:	e036      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 80006b8:	2101      	movs	r1, #1
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <ScanColumns+0x1b0>)
 80006bc:	f001 fe32 	bl	8002324 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <ScanColumns+0x14a>
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	e02d      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 80006ca:	2102      	movs	r1, #2
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <ScanColumns+0x1b0>)
 80006ce:	f001 fe29 	bl	8002324 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <ScanColumns+0x15c>
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	e024      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 80006dc:	2104      	movs	r1, #4
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <ScanColumns+0x1b0>)
 80006e0:	f001 fe20 	bl	8002324 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <ScanColumns+0x16e>
 80006ea:	2324      	movs	r3, #36	@ 0x24
 80006ec:	e01b      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 80006ee:	2108      	movs	r1, #8
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <ScanColumns+0x1b0>)
 80006f2:	f001 fe17 	bl	8002324 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <ScanColumns+0x180>
 80006fc:	234c      	movs	r3, #76	@ 0x4c
 80006fe:	e012      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <ScanColumns+0x1b0>)
 8000704:	f001 fe0e 	bl	8002324 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <ScanColumns+0x1a2>
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	e009      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000712:	23ff      	movs	r3, #255	@ 0xff
 8000714:	e007      	b.n	8000726 <ScanColumns+0x1a6>
            break;
 8000716:	bf00      	nop
 8000718:	e004      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071a:	bf00      	nop
 800071c:	e002      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 8000722:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000724:	23ff      	movs	r3, #255	@ 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400

08000734 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000740:	f001 fe08 	bl	8002354 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800074c:	f001 fe02 	bl	8002354 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff15 	bl	8000580 <ScanColumns>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d001      	beq.n	8000764 <KeyPad_Scan+0x30>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	e041      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800076a:	f001 fdf3 	bl	8002354 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000774:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000776:	f001 fded 	bl	8002354 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff00 	bl	8000580 <ScanColumns>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d001      	beq.n	800078e <KeyPad_Scan+0x5a>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	e02c      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000796:	f001 fddd 	bl	8002354 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007a2:	f001 fdd7 	bl	8002354 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff feea 	bl	8000580 <ScanColumns>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <KeyPad_Scan+0x86>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	e016      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007c2:	f001 fdc7 	bl	8002354 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007ce:	f001 fdc1 	bl	8002354 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fed4 	bl	8000580 <ScanColumns>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <KeyPad_Scan+0xb2>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	e000      	b.n	80007e8 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80007e6:	23ff      	movs	r3, #255	@ 0xff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020400 	.word	0x40020400

080007f4 <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <formatTotalLiters+0x80>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d815      	bhi.n	8000834 <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <formatTotalLiters+0x84>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <formatTotalLiters+0x84>)
 800081a:	fba3 1302 	umull	r1, r3, r3, r2
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	4916      	ldr	r1, [pc, #88]	@ (800087c <formatTotalLiters+0x88>)
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <formatTotalLiters+0x8c>)
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000832:	e018      	b.n	8000866 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <formatTotalLiters+0x90>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0e5a      	lsrs	r2, r3, #25
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <formatTotalLiters+0x90>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0e5b      	lsrs	r3, r3, #25
 800084c:	490e      	ldr	r1, [pc, #56]	@ (8000888 <formatTotalLiters+0x94>)
 800084e:	fb01 f303 	mul.w	r3, r1, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <formatTotalLiters+0x98>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	095a      	lsrs	r2, r3, #5
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <formatTotalLiters+0x8c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	05f5e0ff 	.word	0x05f5e0ff
 8000878:	431bde83 	.word	0x431bde83
 800087c:	000f4240 	.word	0x000f4240
 8000880:	20000048 	.word	0x20000048
 8000884:	55e63b89 	.word	0x55e63b89
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	51eb851f 	.word	0x51eb851f

08000890 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <formatTotalLitersShift+0x60>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d815      	bhi.n	80008d0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9a      	lsrs	r2, r3, #18
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	490e      	ldr	r1, [pc, #56]	@ (80008f8 <formatTotalLitersShift+0x68>)
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80008ce:	e009      	b.n	80008e4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008de:	f04f 32ff 	mov.w	r2, #4294967295
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	3b9ac9ff 	.word	0x3b9ac9ff
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	20000048 	.word	0x20000048

08000900 <KeyLogic>:


void KeyLogic() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8000906:	f004 f90d 	bl	8004b24 <xTaskGetTickCount>
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800090c:	f7ff ff12 	bl	8000734 <KeyPad_Scan>
 8000910:	4603      	mov	r3, r0
 8000912:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000914:	4bb0      	ldr	r3, [pc, #704]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d85a      	bhi.n	80009d2 <KeyLogic+0xd2>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <KeyLogic+0x24>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	0800094f 	.word	0x0800094f
 800092c:	0800097b 	.word	0x0800097b
 8000930:	080009ab 	.word	0x080009ab
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d044      	beq.n	80009c4 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800093a:	4aa8      	ldr	r2, [pc, #672]	@ (8000bdc <KeyLogic+0x2dc>)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000940:	4aa7      	ldr	r2, [pc, #668]	@ (8000be0 <KeyLogic+0x2e0>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8000946:	4ba4      	ldr	r3, [pc, #656]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800094c:	e03a      	b.n	80009c4 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800094e:	4ba4      	ldr	r3, [pc, #656]	@ (8000be0 <KeyLogic+0x2e0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b31      	cmp	r3, #49	@ 0x31
 8000958:	d936      	bls.n	80009c8 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800095a:	4ba0      	ldr	r3, [pc, #640]	@ (8000bdc <KeyLogic+0x2dc>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d106      	bne.n	8000972 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8000964:	4b9c      	ldr	r3, [pc, #624]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800096a:	4a9e      	ldr	r2, [pc, #632]	@ (8000be4 <KeyLogic+0x2e4>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8000970:	e02a      	b.n	80009c8 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8000972:	4b99      	ldr	r3, [pc, #612]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
            break;
 8000978:	e026      	b.n	80009c8 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800097a:	4b98      	ldr	r3, [pc, #608]	@ (8000bdc <KeyLogic+0x2dc>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10a      	bne.n	800099a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8000984:	4b97      	ldr	r3, [pc, #604]	@ (8000be4 <KeyLogic+0x2e4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000990:	d31c      	bcc.n	80009cc <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000992:	4b91      	ldr	r3, [pc, #580]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000994:	2203      	movs	r2, #3
 8000996:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000998:	e018      	b.n	80009cc <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800099a:	4b90      	ldr	r3, [pc, #576]	@ (8000bdc <KeyLogic+0x2dc>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b92      	ldr	r3, [pc, #584]	@ (8000be8 <KeyLogic+0x2e8>)
 80009a0:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009a2:	4b8d      	ldr	r3, [pc, #564]	@ (8000bd8 <KeyLogic+0x2d8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
            break;
 80009a8:	e010      	b.n	80009cc <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80009aa:	4b8c      	ldr	r3, [pc, #560]	@ (8000bdc <KeyLogic+0x2dc>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d00d      	beq.n	80009d0 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80009b4:	4b89      	ldr	r3, [pc, #548]	@ (8000bdc <KeyLogic+0x2dc>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b8b      	ldr	r3, [pc, #556]	@ (8000be8 <KeyLogic+0x2e8>)
 80009ba:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009bc:	4b86      	ldr	r3, [pc, #536]	@ (8000bd8 <KeyLogic+0x2d8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80009c2:	e005      	b.n	80009d0 <KeyLogic+0xd0>
            break;
 80009c4:	bf00      	nop
 80009c6:	e004      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009d0:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 80009d2:	4b85      	ldr	r3, [pc, #532]	@ (8000be8 <KeyLogic+0x2e8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2bff      	cmp	r3, #255	@ 0xff
 80009d8:	f000 81ec 	beq.w	8000db4 <KeyLogic+0x4b4>
		switch (keyPressed) {
 80009dc:	4b82      	ldr	r3, [pc, #520]	@ (8000be8 <KeyLogic+0x2e8>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3b24      	subs	r3, #36	@ 0x24
 80009e2:	2b30      	cmp	r3, #48	@ 0x30
 80009e4:	f200 8188 	bhi.w	8000cf8 <KeyLogic+0x3f8>
 80009e8:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <KeyLogic+0xf0>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000c5d 	.word	0x08000c5d
 80009f4:	08000cf9 	.word	0x08000cf9
 80009f8:	08000cf9 	.word	0x08000cf9
 80009fc:	08000cf9 	.word	0x08000cf9
 8000a00:	08000cf9 	.word	0x08000cf9
 8000a04:	08000cf9 	.word	0x08000cf9
 8000a08:	08000cf9 	.word	0x08000cf9
 8000a0c:	08000cf9 	.word	0x08000cf9
 8000a10:	08000cf9 	.word	0x08000cf9
 8000a14:	08000cf9 	.word	0x08000cf9
 8000a18:	08000cf9 	.word	0x08000cf9
 8000a1c:	08000cf9 	.word	0x08000cf9
 8000a20:	08000cf9 	.word	0x08000cf9
 8000a24:	08000cf9 	.word	0x08000cf9
 8000a28:	08000cf9 	.word	0x08000cf9
 8000a2c:	08000cf9 	.word	0x08000cf9
 8000a30:	08000cf9 	.word	0x08000cf9
 8000a34:	08000cf9 	.word	0x08000cf9
 8000a38:	08000cf9 	.word	0x08000cf9
 8000a3c:	08000cf9 	.word	0x08000cf9
 8000a40:	08000cf9 	.word	0x08000cf9
 8000a44:	08000cf9 	.word	0x08000cf9
 8000a48:	08000cf9 	.word	0x08000cf9
 8000a4c:	08000cf9 	.word	0x08000cf9
 8000a50:	08000cf9 	.word	0x08000cf9
 8000a54:	08000cf9 	.word	0x08000cf9
 8000a58:	08000cf9 	.word	0x08000cf9
 8000a5c:	08000cf9 	.word	0x08000cf9
 8000a60:	08000cf9 	.word	0x08000cf9
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000add 	.word	0x08000add
 8000a6c:	08000b03 	.word	0x08000b03
 8000a70:	08000ca5 	.word	0x08000ca5
 8000a74:	08000b29 	.word	0x08000b29
 8000a78:	08000cd5 	.word	0x08000cd5
 8000a7c:	08000cf9 	.word	0x08000cf9
 8000a80:	08000cf9 	.word	0x08000cf9
 8000a84:	08000cf9 	.word	0x08000cf9
 8000a88:	08000cf9 	.word	0x08000cf9
 8000a8c:	08000cf9 	.word	0x08000cf9
 8000a90:	08000c81 	.word	0x08000c81
 8000a94:	08000cf9 	.word	0x08000cf9
 8000a98:	08000cf9 	.word	0x08000cf9
 8000a9c:	08000cf9 	.word	0x08000cf9
 8000aa0:	08000c15 	.word	0x08000c15
 8000aa4:	08000cf9 	.word	0x08000cf9
 8000aa8:	08000cf9 	.word	0x08000cf9
 8000aac:	08000cf9 	.word	0x08000cf9
 8000ab0:	08000c39 	.word	0x08000c39
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4a4d      	ldr	r2, [pc, #308]	@ (8000bec <KeyLogic+0x2ec>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	484d      	ldr	r0, [pc, #308]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000abc:	f005 fbf4 	bl	80062a8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 8000ac0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ac4:	4a49      	ldr	r2, [pc, #292]	@ (8000bec <KeyLogic+0x2ec>)
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	484a      	ldr	r0, [pc, #296]	@ (8000bf4 <KeyLogic+0x2f4>)
 8000aca:	f005 fbed 	bl	80062a8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	4a46      	ldr	r2, [pc, #280]	@ (8000bec <KeyLogic+0x2ec>)
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	4848      	ldr	r0, [pc, #288]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000ad6:	f005 fbe7 	bl	80062a8 <sniprintf>
				break;
 8000ada:	e16b      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000adc:	2300      	movs	r3, #0
 8000ade:	4a43      	ldr	r2, [pc, #268]	@ (8000bec <KeyLogic+0x2ec>)
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	4843      	ldr	r0, [pc, #268]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000ae4:	f005 fbe0 	bl	80062a8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000ae8:	4b44      	ldr	r3, [pc, #272]	@ (8000bfc <KeyLogic+0x2fc>)
 8000aea:	4a40      	ldr	r2, [pc, #256]	@ (8000bec <KeyLogic+0x2ec>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	4841      	ldr	r0, [pc, #260]	@ (8000bf4 <KeyLogic+0x2f4>)
 8000af0:	f005 fbda 	bl	80062a8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000af4:	2300      	movs	r3, #0
 8000af6:	4a3d      	ldr	r2, [pc, #244]	@ (8000bec <KeyLogic+0x2ec>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	483f      	ldr	r0, [pc, #252]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000afc:	f005 fbd4 	bl	80062a8 <sniprintf>
				break;
 8000b00:	e158      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000b02:	2300      	movs	r3, #0
 8000b04:	4a39      	ldr	r2, [pc, #228]	@ (8000bec <KeyLogic+0x2ec>)
 8000b06:	2107      	movs	r1, #7
 8000b08:	4839      	ldr	r0, [pc, #228]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000b0a:	f005 fbcd 	bl	80062a8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4a36      	ldr	r2, [pc, #216]	@ (8000bec <KeyLogic+0x2ec>)
 8000b12:	2107      	movs	r1, #7
 8000b14:	4837      	ldr	r0, [pc, #220]	@ (8000bf4 <KeyLogic+0x2f4>)
 8000b16:	f005 fbc7 	bl	80062a8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4a33      	ldr	r2, [pc, #204]	@ (8000bec <KeyLogic+0x2ec>)
 8000b1e:	2107      	movs	r1, #7
 8000b20:	4835      	ldr	r0, [pc, #212]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b22:	f005 fbc1 	bl	80062a8 <sniprintf>
				break;
 8000b26:	e145      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if (seqState == SEQ_PRESSED_P_NUM&&
 8000b28:	4b35      	ldr	r3, [pc, #212]	@ (8000c00 <KeyLogic+0x300>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d10f      	bne.n	8000b50 <KeyLogic+0x250>
					accumulatedNumber==password) {
 8000b30:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <KeyLogic+0x304>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b34      	ldr	r3, [pc, #208]	@ (8000c08 <KeyLogic+0x308>)
 8000b36:	681b      	ldr	r3, [r3, #0]
				if (seqState == SEQ_PRESSED_P_NUM&&
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d109      	bne.n	8000b50 <KeyLogic+0x250>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <KeyLogic+0x300>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b42:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <KeyLogic+0x30c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b48:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <KeyLogic+0x304>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e041      	b.n	8000bd4 <KeyLogic+0x2d4>
				}
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 8000b50:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <KeyLogic+0x300>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b07      	cmp	r3, #7
 8000b56:	d10d      	bne.n	8000b74 <KeyLogic+0x274>
					currPrice = accumulatedNumber;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <KeyLogic+0x304>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c10 <KeyLogic+0x310>)
 8000b5e:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000b60:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <KeyLogic+0x300>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b66:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <KeyLogic+0x30c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b6c:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <KeyLogic+0x304>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000b72:	e11f      	b.n	8000db4 <KeyLogic+0x4b4>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&accumulatedNumber == password){
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <KeyLogic+0x300>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d10f      	bne.n	8000b9c <KeyLogic+0x29c>
 8000b7c:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <KeyLogic+0x304>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <KeyLogic+0x308>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d109      	bne.n	8000b9c <KeyLogic+0x29c>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <KeyLogic+0x300>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <KeyLogic+0x30c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <KeyLogic+0x304>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e01b      	b.n	8000bd4 <KeyLogic+0x2d4>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <KeyLogic+0x300>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d10d      	bne.n	8000bc0 <KeyLogic+0x2c0>
					password = accumulatedNumber;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <KeyLogic+0x304>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a17      	ldr	r2, [pc, #92]	@ (8000c08 <KeyLogic+0x308>)
 8000baa:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <KeyLogic+0x300>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <KeyLogic+0x30c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <KeyLogic+0x304>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
				break;
 8000bbe:	e0f9      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <KeyLogic+0x300>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <KeyLogic+0x30c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <KeyLogic+0x304>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
				break;
 8000bd2:	e0ef      	b.n	8000db4 <KeyLogic+0x4b4>
 8000bd4:	e0ee      	b.n	8000db4 <KeyLogic+0x4b4>
 8000bd6:	bf00      	nop
 8000bd8:	200000e0 	.word	0x200000e0
 8000bdc:	20000001 	.word	0x20000001
 8000be0:	200000c8 	.word	0x200000c8
 8000be4:	200000cc 	.word	0x200000cc
 8000be8:	20000000 	.word	0x20000000
 8000bec:	08006cd4 	.word	0x08006cd4
 8000bf0:	20000020 	.word	0x20000020
 8000bf4:	20000027 	.word	0x20000027
 8000bf8:	2000002e 	.word	0x2000002e
 8000bfc:	000186a0 	.word	0x000186a0
 8000c00:	200000e1 	.word	0x200000e1
 8000c04:	200000d0 	.word	0x200000d0
 8000c08:	20000038 	.word	0x20000038
 8000c0c:	200000d4 	.word	0x200000d4
 8000c10:	20000044 	.word	0x20000044
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8000c14:	4b6b      	ldr	r3, [pc, #428]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d103      	bne.n	8000c24 <KeyLogic+0x324>
					seqState = SEQ_PRESSED_P;
 8000c1c:	4b69      	ldr	r3, [pc, #420]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c1e:	2205      	movs	r2, #5
 8000c20:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c22:	e0c7      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000c24:	4b67      	ldr	r3, [pc, #412]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c2a:	4b67      	ldr	r3, [pc, #412]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c30:	4b66      	ldr	r3, [pc, #408]	@ (8000dcc <KeyLogic+0x4cc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
				break;
 8000c36:	e0bd      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000c38:	4b62      	ldr	r3, [pc, #392]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d103      	bne.n	8000c48 <KeyLogic+0x348>
					seqState = SEQ_PRESSED_T;
 8000c40:	4b60      	ldr	r3, [pc, #384]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c42:	2208      	movs	r2, #8
 8000c44:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c46:	e0b5      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000c48:	4b5e      	ldr	r3, [pc, #376]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c4e:	4b5e      	ldr	r3, [pc, #376]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c54:	4b5d      	ldr	r3, [pc, #372]	@ (8000dcc <KeyLogic+0x4cc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
				break;
 8000c5a:	e0ab      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 8000c5c:	4b59      	ldr	r3, [pc, #356]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d103      	bne.n	8000c6c <KeyLogic+0x36c>
					seqState = SEQ_PRESSED_T_$;
 8000c64:	4b57      	ldr	r3, [pc, #348]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c66:	220a      	movs	r2, #10
 8000c68:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c6a:	e0a3      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000c6c:	4b55      	ldr	r3, [pc, #340]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c72:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c78:	4b54      	ldr	r3, [pc, #336]	@ (8000dcc <KeyLogic+0x4cc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
				break;
 8000c7e:	e099      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 8000c80:	4b50      	ldr	r3, [pc, #320]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d103      	bne.n	8000c90 <KeyLogic+0x390>
					seqState = SEQ_PRESSED_T_L;
 8000c88:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c8a:	2209      	movs	r2, #9
 8000c8c:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c8e:	e091      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000c90:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c96:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000dcc <KeyLogic+0x4cc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
				break;
 8000ca2:	e087      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 8000ca4:	4b47      	ldr	r3, [pc, #284]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d109      	bne.n	8000cc0 <KeyLogic+0x3c0>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8000cac:	4b45      	ldr	r3, [pc, #276]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cb2:	4b45      	ldr	r3, [pc, #276]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cb8:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <KeyLogic+0x4cc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000cbe:	e079      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000cc0:	4b40      	ldr	r3, [pc, #256]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dcc <KeyLogic+0x4cc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
				break;
 8000cd2:	e06f      	b.n	8000db4 <KeyLogic+0x4b4>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d103      	bne.n	8000ce4 <KeyLogic+0x3e4>
					seqState = SEQ_PRESSED_T_F4;
 8000cdc:	4b39      	ldr	r3, [pc, #228]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000ce2:	e067      	b.n	8000db4 <KeyLogic+0x4b4>
					seqState = SEQ_IDLE;
 8000ce4:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cea:	4b37      	ldr	r3, [pc, #220]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cf0:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <KeyLogic+0x4cc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
				break;
 8000cf6:	e05d      	b.n	8000db4 <KeyLogic+0x4b4>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8000cf8:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cfe:	d94e      	bls.n	8000d9e <KeyLogic+0x49e>
 8000d00:	4b33      	ldr	r3, [pc, #204]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b39      	cmp	r3, #57	@ 0x39
 8000d06:	d84a      	bhi.n	8000d9e <KeyLogic+0x49e>
					if(seqState==SEQ_PRESSED_P){
 8000d08:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	d10c      	bne.n	8000d2a <KeyLogic+0x42a>
						seqState=SEQ_PRESSED_P_NUM;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d12:	2206      	movs	r2, #6
 8000d14:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3b30      	subs	r3, #48	@ 0x30
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d20:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000d22:	4b29      	ldr	r3, [pc, #164]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000d28:	e043      	b.n	8000db2 <KeyLogic+0x4b2>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000d2a:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d00f      	beq.n	8000d52 <KeyLogic+0x452>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000d32:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000d36:	2b07      	cmp	r3, #7
 8000d38:	d00b      	beq.n	8000d52 <KeyLogic+0x452>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000d3a:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d007      	beq.n	8000d52 <KeyLogic+0x452>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d003      	beq.n	8000d52 <KeyLogic+0x452>
							seqState == SEQ_NUMBER
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d117      	bne.n	8000d82 <KeyLogic+0x482>
							) {
						if (numberOfDigits < 6) {
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b05      	cmp	r3, #5
 8000d58:	d820      	bhi.n	8000d9c <KeyLogic+0x49c>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b30      	subs	r3, #48	@ 0x30
 8000d70:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d72:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000d7e:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8000d80:	e00c      	b.n	8000d9c <KeyLogic+0x49c>
						}

					}
					else{
						seqState = SEQ_NUMBER;
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3b30      	subs	r3, #48	@ 0x30
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d92:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000d9a:	e00a      	b.n	8000db2 <KeyLogic+0x4b2>
 8000d9c:	e009      	b.n	8000db2 <KeyLogic+0x4b2>
					}
				}else{
					seqState = SEQ_IDLE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <KeyLogic+0x4cc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
				}
				break;
 8000db0:	e7ff      	b.n	8000db2 <KeyLogic+0x4b2>
 8000db2:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000db6:	22ff      	movs	r2, #255	@ 0xff
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000e1 	.word	0x200000e1
 8000dc8:	200000d4 	.word	0x200000d4
 8000dcc:	200000d0 	.word	0x200000d0
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <KeyLogic_Action>:


void KeyLogic_Action() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 8000dda:	4bab      	ldr	r3, [pc, #684]	@ (8001088 <KeyLogic_Action+0x2b4>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	f200 81e0 	bhi.w	80011a4 <KeyLogic_Action+0x3d0>
 8000de4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <KeyLogic_Action+0x18>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e21 	.word	0x08000e21
 8000df0:	08000e47 	.word	0x08000e47
 8000df4:	08000e6d 	.word	0x08000e6d
 8000df8:	08000eab 	.word	0x08000eab
 8000dfc:	08001165 	.word	0x08001165
 8000e00:	08000ee9 	.word	0x08000ee9
 8000e04:	08000f0f 	.word	0x08000f0f
 8000e08:	08000f35 	.word	0x08000f35
 8000e0c:	08000f5b 	.word	0x08000f5b
 8000e10:	0800101f 	.word	0x0800101f
 8000e14:	08000f81 	.word	0x08000f81
 8000e18:	08001119 	.word	0x08001119
 8000e1c:	0800113f 	.word	0x0800113f
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000e20:	2300      	movs	r3, #0
 8000e22:	4a9a      	ldr	r2, [pc, #616]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000e24:	2107      	movs	r1, #7
 8000e26:	489a      	ldr	r0, [pc, #616]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000e28:	f005 fa3e 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4a97      	ldr	r2, [pc, #604]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	4898      	ldr	r0, [pc, #608]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000e34:	f005 fa38 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4a94      	ldr	r2, [pc, #592]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	4896      	ldr	r0, [pc, #600]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000e40:	f005 fa32 	bl	80062a8 <sniprintf>
            break;
 8000e44:	e1c1      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8000e46:	4a95      	ldr	r2, [pc, #596]	@ (800109c <KeyLogic_Action+0x2c8>)
 8000e48:	2107      	movs	r1, #7
 8000e4a:	4891      	ldr	r0, [pc, #580]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000e4c:	f005 fa2c 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", currPrice);
 8000e50:	4b93      	ldr	r3, [pc, #588]	@ (80010a0 <KeyLogic_Action+0x2cc>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a93      	ldr	r2, [pc, #588]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000e56:	2107      	movs	r1, #7
 8000e58:	488e      	ldr	r0, [pc, #568]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000e5a:	f005 fa25 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	4a8a      	ldr	r2, [pc, #552]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	488c      	ldr	r0, [pc, #560]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000e66:	f005 fa1f 	bl	80062a8 <sniprintf>
			break;
 8000e6a:	e1ae      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80010a8 <KeyLogic_Action+0x2d4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f107 0020 	add.w	r0, r7, #32
 8000e74:	4a8b      	ldr	r2, [pc, #556]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000e76:	2107      	movs	r1, #7
 8000e78:	f005 fa16 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4a8a      	ldr	r2, [pc, #552]	@ (80010ac <KeyLogic_Action+0x2d8>)
 8000e82:	2107      	movs	r1, #7
 8000e84:	4882      	ldr	r0, [pc, #520]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000e86:	f005 fa0f 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8000e8a:	4a89      	ldr	r2, [pc, #548]	@ (80010b0 <KeyLogic_Action+0x2dc>)
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	4881      	ldr	r0, [pc, #516]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000e90:	f005 fa0a 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e94:	2300      	movs	r3, #0
 8000e96:	4a7d      	ldr	r2, [pc, #500]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000e98:	2107      	movs	r1, #7
 8000e9a:	487f      	ldr	r0, [pc, #508]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000e9c:	f005 fa04 	bl	80062a8 <sniprintf>
            LEDPointFlag = -1;
 8000ea0:	4b84      	ldr	r3, [pc, #528]	@ (80010b4 <KeyLogic_Action+0x2e0>)
 8000ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea6:	601a      	str	r2, [r3, #0]
            break;
 8000ea8:	e18f      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80010a8 <KeyLogic_Action+0x2d4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f107 0020 	add.w	r0, r7, #32
 8000eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000eb4:	2107      	movs	r1, #7
 8000eb6:	f005 f9f7 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	4a7b      	ldr	r2, [pc, #492]	@ (80010ac <KeyLogic_Action+0x2d8>)
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	4873      	ldr	r0, [pc, #460]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000ec4:	f005 f9f0 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4a70      	ldr	r2, [pc, #448]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000ecc:	2107      	movs	r1, #7
 8000ece:	4871      	ldr	r0, [pc, #452]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000ed0:	f005 f9ea 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8000ed4:	4a78      	ldr	r2, [pc, #480]	@ (80010b8 <KeyLogic_Action+0x2e4>)
 8000ed6:	2107      	movs	r1, #7
 8000ed8:	486f      	ldr	r0, [pc, #444]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000eda:	f005 f9e5 	bl	80062a8 <sniprintf>
            LEDPointFlag = -1;
 8000ede:	4b75      	ldr	r3, [pc, #468]	@ (80010b4 <KeyLogic_Action+0x2e0>)
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	601a      	str	r2, [r3, #0]
            break;
 8000ee6:	e170      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80010a8 <KeyLogic_Action+0x2d4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a6d      	ldr	r2, [pc, #436]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000eee:	2107      	movs	r1, #7
 8000ef0:	4867      	ldr	r0, [pc, #412]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000ef2:	f005 f9d9 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	4a64      	ldr	r2, [pc, #400]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000efa:	2107      	movs	r1, #7
 8000efc:	4865      	ldr	r0, [pc, #404]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000efe:	f005 f9d3 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8000f02:	4a6e      	ldr	r2, [pc, #440]	@ (80010bc <KeyLogic_Action+0x2e8>)
 8000f04:	2107      	movs	r1, #7
 8000f06:	4864      	ldr	r0, [pc, #400]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000f08:	f005 f9ce 	bl	80062a8 <sniprintf>
			break;
 8000f0c:	e15d      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000f0e:	4b66      	ldr	r3, [pc, #408]	@ (80010a8 <KeyLogic_Action+0x2d4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a64      	ldr	r2, [pc, #400]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000f14:	2107      	movs	r1, #7
 8000f16:	485e      	ldr	r0, [pc, #376]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000f18:	f005 f9c6 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000f20:	2107      	movs	r1, #7
 8000f22:	485c      	ldr	r0, [pc, #368]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000f24:	f005 f9c0 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8000f28:	4a65      	ldr	r2, [pc, #404]	@ (80010c0 <KeyLogic_Action+0x2ec>)
 8000f2a:	2107      	movs	r1, #7
 8000f2c:	485a      	ldr	r0, [pc, #360]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000f2e:	f005 f9bb 	bl	80062a8 <sniprintf>
            break;
 8000f32:	e14a      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000f34:	4b5c      	ldr	r3, [pc, #368]	@ (80010a8 <KeyLogic_Action+0x2d4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a5a      	ldr	r2, [pc, #360]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	4854      	ldr	r0, [pc, #336]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000f3e:	f005 f9b3 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f42:	2300      	movs	r3, #0
 8000f44:	4a51      	ldr	r2, [pc, #324]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000f46:	2107      	movs	r1, #7
 8000f48:	4852      	ldr	r0, [pc, #328]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000f4a:	f005 f9ad 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8000f4e:	4a53      	ldr	r2, [pc, #332]	@ (800109c <KeyLogic_Action+0x2c8>)
 8000f50:	2107      	movs	r1, #7
 8000f52:	4851      	ldr	r0, [pc, #324]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000f54:	f005 f9a8 	bl	80062a8 <sniprintf>
            break;
 8000f58:	e137      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000f5e:	2107      	movs	r1, #7
 8000f60:	484b      	ldr	r0, [pc, #300]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000f62:	f005 f9a1 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f66:	2300      	movs	r3, #0
 8000f68:	4a48      	ldr	r2, [pc, #288]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000f6a:	2107      	movs	r1, #7
 8000f6c:	4849      	ldr	r0, [pc, #292]	@ (8001094 <KeyLogic_Action+0x2c0>)
 8000f6e:	f005 f99b 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000f72:	4b54      	ldr	r3, [pc, #336]	@ (80010c4 <KeyLogic_Action+0x2f0>)
 8000f74:	4a45      	ldr	r2, [pc, #276]	@ (800108c <KeyLogic_Action+0x2b8>)
 8000f76:	2107      	movs	r1, #7
 8000f78:	4847      	ldr	r0, [pc, #284]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8000f7a:	f005 f995 	bl	80062a8 <sniprintf>
            break;
 8000f7e:	e124      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8000f80:	4b51      	ldr	r3, [pc, #324]	@ (80010c8 <KeyLogic_Action+0x2f4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a51      	ldr	r2, [pc, #324]	@ (80010cc <KeyLogic_Action+0x2f8>)
 8000f86:	4952      	ldr	r1, [pc, #328]	@ (80010d0 <KeyLogic_Action+0x2fc>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fc81 	bl	8000890 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8000f8e:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <KeyLogic_Action+0x2fc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f107 0018 	add.w	r0, r7, #24
 8000f96:	4a43      	ldr	r2, [pc, #268]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8000f98:	2107      	movs	r1, #7
 8000f9a:	f005 f985 	bl	80062a8 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80010d0 <KeyLogic_Action+0x2fc>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <KeyLogic_Action+0x300>)
 8000fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa8:	0b5b      	lsrs	r3, r3, #13
 8000faa:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	f107 0010 	add.w	r0, r7, #16
 8000fb8:	4a47      	ldr	r2, [pc, #284]	@ (80010d8 <KeyLogic_Action+0x304>)
 8000fba:	2108      	movs	r1, #8
 8000fbc:	f005 f974 	bl	80062a8 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fc4:	e01b      	b.n	8000ffe <KeyLogic_Action+0x22a>
				if (i < strlen(combinedStrShift)) {
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff f908 	bl	80001e0 <strlen>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d90a      	bls.n	8000fee <KeyLogic_Action+0x21a>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000fd8:	f107 0210 	add.w	r2, r7, #16
 8000fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fde:	4413      	add	r3, r2
 8000fe0:	7819      	ldrb	r1, [r3, #0]
 8000fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe6:	4413      	add	r3, r2
 8000fe8:	460a      	mov	r2, r1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e004      	b.n	8000ff8 <KeyLogic_Action+0x224>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000fee:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <KeyLogic_Action+0x2bc>)
 8000ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff2:	4413      	add	r3, r2
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8000ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001000:	2b05      	cmp	r3, #5
 8001002:	dde0      	ble.n	8000fc6 <KeyLogic_Action+0x1f2>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <KeyLogic_Action+0x2f8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a26      	ldr	r2, [pc, #152]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 800100a:	2107      	movs	r1, #7
 800100c:	4821      	ldr	r0, [pc, #132]	@ (8001094 <KeyLogic_Action+0x2c0>)
 800100e:	f005 f94b 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8001012:	4a32      	ldr	r2, [pc, #200]	@ (80010dc <KeyLogic_Action+0x308>)
 8001014:	2107      	movs	r1, #7
 8001016:	4820      	ldr	r0, [pc, #128]	@ (8001098 <KeyLogic_Action+0x2c4>)
 8001018:	f005 f946 	bl	80062a8 <sniprintf>

            break;
 800101c:	e0d5      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <KeyLogic_Action+0x30c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <KeyLogic_Action+0x2f8>)
 8001024:	492a      	ldr	r1, [pc, #168]	@ (80010d0 <KeyLogic_Action+0x2fc>)
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fbe4 	bl	80007f4 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <KeyLogic_Action+0x2fc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f107 0008 	add.w	r0, r7, #8
 8001034:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <KeyLogic_Action+0x2d0>)
 8001036:	2107      	movs	r1, #7
 8001038:	f005 f936 	bl	80062a8 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <KeyLogic_Action+0x2fc>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <KeyLogic_Action+0x300>)
 8001042:	fba3 1302 	umull	r1, r3, r3, r2
 8001046:	0b5b      	lsrs	r3, r3, #13
 8001048:	f242 7110 	movw	r1, #10000	@ 0x2710
 800104c:	fb01 f303 	mul.w	r3, r1, r3
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4638      	mov	r0, r7
 8001054:	4a23      	ldr	r2, [pc, #140]	@ (80010e4 <KeyLogic_Action+0x310>)
 8001056:	2108      	movs	r1, #8
 8001058:	f005 f926 	bl	80062a8 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001060:	e04a      	b.n	80010f8 <KeyLogic_Action+0x324>
                if (i < strlen(combinedStr)) {
 8001062:	463b      	mov	r3, r7
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8bb 	bl	80001e0 <strlen>
 800106a:	4602      	mov	r2, r0
 800106c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106e:	429a      	cmp	r2, r3
 8001070:	d93a      	bls.n	80010e8 <KeyLogic_Action+0x314>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8001072:	463a      	mov	r2, r7
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	4413      	add	r3, r2
 8001078:	7819      	ldrb	r1, [r3, #0]
 800107a:	4a05      	ldr	r2, [pc, #20]	@ (8001090 <KeyLogic_Action+0x2bc>)
 800107c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107e:	4413      	add	r3, r2
 8001080:	460a      	mov	r2, r1
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e035      	b.n	80010f2 <KeyLogic_Action+0x31e>
 8001086:	bf00      	nop
 8001088:	200000e1 	.word	0x200000e1
 800108c:	08006cd4 	.word	0x08006cd4
 8001090:	20000020 	.word	0x20000020
 8001094:	20000027 	.word	0x20000027
 8001098:	2000002e 	.word	0x2000002e
 800109c:	08006cdc 	.word	0x08006cdc
 80010a0:	20000044 	.word	0x20000044
 80010a4:	08006ce4 	.word	0x08006ce4
 80010a8:	200000d0 	.word	0x200000d0
 80010ac:	08006cec 	.word	0x08006cec
 80010b0:	08006cf0 	.word	0x08006cf0
 80010b4:	20000048 	.word	0x20000048
 80010b8:	08006cf8 	.word	0x08006cf8
 80010bc:	08006d00 	.word	0x08006d00
 80010c0:	08006d08 	.word	0x08006d08
 80010c4:	000f423f 	.word	0x000f423f
 80010c8:	20000040 	.word	0x20000040
 80010cc:	200000dc 	.word	0x200000dc
 80010d0:	200000d8 	.word	0x200000d8
 80010d4:	d1b71759 	.word	0xd1b71759
 80010d8:	08006d10 	.word	0x08006d10
 80010dc:	08006d1c 	.word	0x08006d1c
 80010e0:	2000003c 	.word	0x2000003c
 80010e4:	08006d24 	.word	0x08006d24
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80010e8:	4a3a      	ldr	r2, [pc, #232]	@ (80011d4 <KeyLogic_Action+0x400>)
 80010ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ec:	4413      	add	r3, r2
 80010ee:	2220      	movs	r2, #32
 80010f0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	3301      	adds	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	ddb1      	ble.n	8001062 <KeyLogic_Action+0x28e>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80010fe:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <KeyLogic_Action+0x404>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a36      	ldr	r2, [pc, #216]	@ (80011dc <KeyLogic_Action+0x408>)
 8001104:	2107      	movs	r1, #7
 8001106:	4836      	ldr	r0, [pc, #216]	@ (80011e0 <KeyLogic_Action+0x40c>)
 8001108:	f005 f8ce 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 800110c:	4a35      	ldr	r2, [pc, #212]	@ (80011e4 <KeyLogic_Action+0x410>)
 800110e:	2107      	movs	r1, #7
 8001110:	4835      	ldr	r0, [pc, #212]	@ (80011e8 <KeyLogic_Action+0x414>)
 8001112:	f005 f8c9 	bl	80062a8 <sniprintf>



            break;
 8001116:	e058      	b.n	80011ca <KeyLogic_Action+0x3f6>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8001118:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <KeyLogic_Action+0x418>)
 800111a:	4a35      	ldr	r2, [pc, #212]	@ (80011f0 <KeyLogic_Action+0x41c>)
 800111c:	2107      	movs	r1, #7
 800111e:	482d      	ldr	r0, [pc, #180]	@ (80011d4 <KeyLogic_Action+0x400>)
 8001120:	f005 f8c2 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001124:	2300      	movs	r3, #0
 8001126:	4a32      	ldr	r2, [pc, #200]	@ (80011f0 <KeyLogic_Action+0x41c>)
 8001128:	2107      	movs	r1, #7
 800112a:	482d      	ldr	r0, [pc, #180]	@ (80011e0 <KeyLogic_Action+0x40c>)
 800112c:	f005 f8bc 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001130:	2300      	movs	r3, #0
 8001132:	4a2f      	ldr	r2, [pc, #188]	@ (80011f0 <KeyLogic_Action+0x41c>)
 8001134:	2107      	movs	r1, #7
 8001136:	482c      	ldr	r0, [pc, #176]	@ (80011e8 <KeyLogic_Action+0x414>)
 8001138:	f005 f8b6 	bl	80062a8 <sniprintf>
            break;
 800113c:	e045      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <KeyLogic_Action+0x420>)
 8001140:	4a2b      	ldr	r2, [pc, #172]	@ (80011f0 <KeyLogic_Action+0x41c>)
 8001142:	2107      	movs	r1, #7
 8001144:	4823      	ldr	r0, [pc, #140]	@ (80011d4 <KeyLogic_Action+0x400>)
 8001146:	f005 f8af 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800114a:	2300      	movs	r3, #0
 800114c:	4a28      	ldr	r2, [pc, #160]	@ (80011f0 <KeyLogic_Action+0x41c>)
 800114e:	2107      	movs	r1, #7
 8001150:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <KeyLogic_Action+0x40c>)
 8001152:	f005 f8a9 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001156:	2300      	movs	r3, #0
 8001158:	4a25      	ldr	r2, [pc, #148]	@ (80011f0 <KeyLogic_Action+0x41c>)
 800115a:	2107      	movs	r1, #7
 800115c:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <KeyLogic_Action+0x414>)
 800115e:	f005 f8a3 	bl	80062a8 <sniprintf>
            break;
 8001162:	e032      	b.n	80011ca <KeyLogic_Action+0x3f6>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001164:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <KeyLogic_Action+0x424>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f107 0020 	add.w	r0, r7, #32
 800116c:	4a1b      	ldr	r2, [pc, #108]	@ (80011dc <KeyLogic_Action+0x408>)
 800116e:	2107      	movs	r1, #7
 8001170:	f005 f89a 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <KeyLogic_Action+0x428>)
 800117a:	2107      	movs	r1, #7
 800117c:	4815      	ldr	r0, [pc, #84]	@ (80011d4 <KeyLogic_Action+0x400>)
 800117e:	f005 f893 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001182:	2300      	movs	r3, #0
 8001184:	4a1a      	ldr	r2, [pc, #104]	@ (80011f0 <KeyLogic_Action+0x41c>)
 8001186:	2107      	movs	r1, #7
 8001188:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <KeyLogic_Action+0x40c>)
 800118a:	f005 f88d 	bl	80062a8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800118e:	2300      	movs	r3, #0
 8001190:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <KeyLogic_Action+0x41c>)
 8001192:	2107      	movs	r1, #7
 8001194:	4814      	ldr	r0, [pc, #80]	@ (80011e8 <KeyLogic_Action+0x414>)
 8001196:	f005 f887 	bl	80062a8 <sniprintf>
			LEDPointFlag = -1;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <KeyLogic_Action+0x42c>)
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	601a      	str	r2, [r3, #0]
			break;
 80011a2:	e012      	b.n	80011ca <KeyLogic_Action+0x3f6>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80011a4:	2300      	movs	r3, #0
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <KeyLogic_Action+0x41c>)
 80011a8:	2107      	movs	r1, #7
 80011aa:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <KeyLogic_Action+0x400>)
 80011ac:	f005 f87c 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80011b0:	2300      	movs	r3, #0
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <KeyLogic_Action+0x41c>)
 80011b4:	2107      	movs	r1, #7
 80011b6:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <KeyLogic_Action+0x40c>)
 80011b8:	f005 f876 	bl	80062a8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80011bc:	2300      	movs	r3, #0
 80011be:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <KeyLogic_Action+0x41c>)
 80011c0:	2107      	movs	r1, #7
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <KeyLogic_Action+0x414>)
 80011c4:	f005 f870 	bl	80062a8 <sniprintf>
            break;
 80011c8:	bf00      	nop
    }
}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	@ 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000020 	.word	0x20000020
 80011d8:	200000dc 	.word	0x200000dc
 80011dc:	08006ce4 	.word	0x08006ce4
 80011e0:	20000027 	.word	0x20000027
 80011e4:	08006d2c 	.word	0x08006d2c
 80011e8:	2000002e 	.word	0x2000002e
 80011ec:	00051615 	.word	0x00051615
 80011f0:	08006cd4 	.word	0x08006cd4
 80011f4:	0006c81c 	.word	0x0006c81c
 80011f8:	200000d0 	.word	0x200000d0
 80011fc:	08006cec 	.word	0x08006cec
 8001200:	20000048 	.word	0x20000048

08001204 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b2f      	cmp	r3, #47	@ 0x2f
 8001212:	d907      	bls.n	8001224 <CharToSegment+0x20>
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b39      	cmp	r3, #57	@ 0x39
 8001218:	d804      	bhi.n	8001224 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3b30      	subs	r3, #48	@ 0x30
 800121e:	4a32      	ldr	r2, [pc, #200]	@ (80012e8 <CharToSegment+0xe4>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	e05a      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'L') {
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b4c      	cmp	r3, #76	@ 0x4c
 8001228:	d102      	bne.n	8001230 <CharToSegment+0x2c>
        return specialCharMap[0];
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <CharToSegment+0xe8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	e054      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == '.') {
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b2e      	cmp	r3, #46	@ 0x2e
 8001234:	d102      	bne.n	800123c <CharToSegment+0x38>
        return specialCharMap[1];
 8001236:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <CharToSegment+0xe8>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	e04e      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'T') {
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b54      	cmp	r3, #84	@ 0x54
 8001240:	d102      	bne.n	8001248 <CharToSegment+0x44>
        return specialCharMap[2];
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <CharToSegment+0xe8>)
 8001244:	789b      	ldrb	r3, [r3, #2]
 8001246:	e048      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'O') {
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b4f      	cmp	r3, #79	@ 0x4f
 800124c:	d102      	bne.n	8001254 <CharToSegment+0x50>
        return specialCharMap[3];
 800124e:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <CharToSegment+0xe8>)
 8001250:	78db      	ldrb	r3, [r3, #3]
 8001252:	e042      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'A') {
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b41      	cmp	r3, #65	@ 0x41
 8001258:	d102      	bne.n	8001260 <CharToSegment+0x5c>
        return specialCharMap[4];
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <CharToSegment+0xe8>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	e03c      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'S') {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b53      	cmp	r3, #83	@ 0x53
 8001264:	d102      	bne.n	800126c <CharToSegment+0x68>
        return specialCharMap[5];
 8001266:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <CharToSegment+0xe8>)
 8001268:	795b      	ldrb	r3, [r3, #5]
 800126a:	e036      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'H') {
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b48      	cmp	r3, #72	@ 0x48
 8001270:	d102      	bne.n	8001278 <CharToSegment+0x74>
        return specialCharMap[6];
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <CharToSegment+0xe8>)
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	e030      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'I') {
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b49      	cmp	r3, #73	@ 0x49
 800127c:	d102      	bne.n	8001284 <CharToSegment+0x80>
        return specialCharMap[7];
 800127e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <CharToSegment+0xe8>)
 8001280:	79db      	ldrb	r3, [r3, #7]
 8001282:	e02a      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'F') {
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b46      	cmp	r3, #70	@ 0x46
 8001288:	d102      	bne.n	8001290 <CharToSegment+0x8c>
        return specialCharMap[8];
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <CharToSegment+0xe8>)
 800128c:	7a1b      	ldrb	r3, [r3, #8]
 800128e:	e024      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'G') {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b47      	cmp	r3, #71	@ 0x47
 8001294:	d102      	bne.n	800129c <CharToSegment+0x98>
        return specialCharMap[9];
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <CharToSegment+0xe8>)
 8001298:	7a5b      	ldrb	r3, [r3, #9]
 800129a:	e01e      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'P') {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b50      	cmp	r3, #80	@ 0x50
 80012a0:	d102      	bne.n	80012a8 <CharToSegment+0xa4>
        return specialCharMap[10];
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <CharToSegment+0xe8>)
 80012a4:	7a9b      	ldrb	r3, [r3, #10]
 80012a6:	e018      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'C') {
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b43      	cmp	r3, #67	@ 0x43
 80012ac:	d102      	bne.n	80012b4 <CharToSegment+0xb0>
        return specialCharMap[11];
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <CharToSegment+0xe8>)
 80012b0:	7adb      	ldrb	r3, [r3, #11]
 80012b2:	e012      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'E') {
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b45      	cmp	r3, #69	@ 0x45
 80012b8:	d102      	bne.n	80012c0 <CharToSegment+0xbc>
        return specialCharMap[12];
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <CharToSegment+0xe8>)
 80012bc:	7b1b      	ldrb	r3, [r3, #12]
 80012be:	e00c      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'U') {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b55      	cmp	r3, #85	@ 0x55
 80012c4:	d102      	bne.n	80012cc <CharToSegment+0xc8>
        return specialCharMap[13];
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <CharToSegment+0xe8>)
 80012c8:	7b5b      	ldrb	r3, [r3, #13]
 80012ca:	e006      	b.n	80012da <CharToSegment+0xd6>
    } else if (c == 'N') {
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80012d0:	d102      	bne.n	80012d8 <CharToSegment+0xd4>
        return specialCharMap[14];
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <CharToSegment+0xe8>)
 80012d4:	7b9b      	ldrb	r3, [r3, #14]
 80012d6:	e000      	b.n	80012da <CharToSegment+0xd6>
    } else {
        return 0b11111111; // Blank
 80012d8:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000004 	.word	0x20000004
 80012ec:	20000010 	.word	0x20000010

080012f0 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e035      	b.n	800136e <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff66 	bl	80001e0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b05      	cmp	r3, #5
 800131c:	d81f      	bhi.n	800135e <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	429a      	cmp	r2, r3
 8001324:	dd15      	ble.n	8001352 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4613      	mov	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	441a      	add	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1e59      	subs	r1, r3, #1
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	1acb      	subs	r3, r1, r3
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff61 	bl	8001204 <CharToSegment>
 8001342:	4603      	mov	r3, r0
 8001344:	4619      	mov	r1, r3
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <SevenSegLEDsHandler+0x90>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	460a      	mov	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e00a      	b.n	8001368 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8001352:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <SevenSegLEDsHandler+0x90>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	22ff      	movs	r2, #255	@ 0xff
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e004      	b.n	8001368 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <SevenSegLEDsHandler+0x90>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	22ff      	movs	r2, #255	@ 0xff
 8001366:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b02      	cmp	r3, #2
 8001372:	ddc6      	ble.n	8001302 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8001374:	4b02      	ldr	r3, [pc, #8]	@ (8001380 <SevenSegLEDsHandler+0x90>)
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000f0 	.word	0x200000f0

08001384 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
 8001390:	4613      	mov	r3, r2
 8001392:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffa9 	bl	80012f0 <SevenSegLEDsHandler>
 800139e:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d820      	bhi.n	80013e8 <UpdateDisplayBuffer+0x64>
 80013a6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ac <UpdateDisplayBuffer+0x28>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013c5 	.word	0x080013c5
 80013b0:	080013cb 	.word	0x080013cb
 80013b4:	080013d1 	.word	0x080013d1
 80013b8:	080013d7 	.word	0x080013d7
 80013bc:	080013dd 	.word	0x080013dd
 80013c0:	080013e3 	.word	0x080013e3
        case 0:
            curr_scan = 0b11111110;
 80013c4:	23fe      	movs	r3, #254	@ 0xfe
 80013c6:	73fb      	strb	r3, [r7, #15]
            break;
 80013c8:	e011      	b.n	80013ee <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 80013ca:	23fd      	movs	r3, #253	@ 0xfd
 80013cc:	73fb      	strb	r3, [r7, #15]
            break;
 80013ce:	e00e      	b.n	80013ee <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 80013d0:	23fb      	movs	r3, #251	@ 0xfb
 80013d2:	73fb      	strb	r3, [r7, #15]
            break;
 80013d4:	e00b      	b.n	80013ee <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 80013d6:	23f7      	movs	r3, #247	@ 0xf7
 80013d8:	73fb      	strb	r3, [r7, #15]
            break;
 80013da:	e008      	b.n	80013ee <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 80013dc:	23ef      	movs	r3, #239	@ 0xef
 80013de:	73fb      	strb	r3, [r7, #15]
            break;
 80013e0:	e005      	b.n	80013ee <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 80013e2:	23df      	movs	r3, #223	@ 0xdf
 80013e4:	73fb      	strb	r3, [r7, #15]
            break;
 80013e6:	e002      	b.n	80013ee <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 80013e8:	23ff      	movs	r3, #255	@ 0xff
 80013ea:	73fb      	strb	r3, [r7, #15]
            break;
 80013ec:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <UpdateDisplayBuffer+0x1c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db72      	blt.n	80014dc <UpdateDisplayBuffer+0x158>
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <UpdateDisplayBuffer+0x1c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	dc6e      	bgt.n	80014dc <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	4b52      	ldr	r3, [pc, #328]	@ (800154c <UpdateDisplayBuffer+0x1c8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d136      	bne.n	8001476 <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001408:	78ba      	ldrb	r2, [r7, #2]
 800140a:	4951      	ldr	r1, [pc, #324]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	440b      	add	r3, r1
 8001414:	22ff      	movs	r2, #255	@ 0xff
 8001416:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001418:	78ba      	ldrb	r2, [r7, #2]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	7898      	ldrb	r0, [r3, #2]
 800141e:	494c      	ldr	r1, [pc, #304]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	440b      	add	r3, r1
 8001428:	3301      	adds	r3, #1
 800142a:	4602      	mov	r2, r0
 800142c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 800142e:	78ba      	ldrb	r2, [r7, #2]
 8001430:	4947      	ldr	r1, [pc, #284]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	440b      	add	r3, r1
 800143a:	3302      	adds	r3, #2
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3301      	adds	r3, #1
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	78ba      	ldrb	r2, [r7, #2]
 8001448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	4940      	ldr	r1, [pc, #256]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	440b      	add	r3, r1
 8001458:	3303      	adds	r3, #3
 800145a:	4602      	mov	r2, r0
 800145c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 800145e:	78ba      	ldrb	r2, [r7, #2]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	7818      	ldrb	r0, [r3, #0]
 8001464:	493a      	ldr	r1, [pc, #232]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	4602      	mov	r2, r0
 8001472:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 8001474:	e065      	b.n	8001542 <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001476:	78ba      	ldrb	r2, [r7, #2]
 8001478:	4935      	ldr	r1, [pc, #212]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	440b      	add	r3, r1
 8001482:	22ff      	movs	r2, #255	@ 0xff
 8001484:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001486:	78ba      	ldrb	r2, [r7, #2]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	7898      	ldrb	r0, [r3, #2]
 800148c:	4930      	ldr	r1, [pc, #192]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	440b      	add	r3, r1
 8001496:	3301      	adds	r3, #1
 8001498:	4602      	mov	r2, r0
 800149a:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 800149c:	78ba      	ldrb	r2, [r7, #2]
 800149e:	492c      	ldr	r1, [pc, #176]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	3302      	adds	r3, #2
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 80014ae:	78ba      	ldrb	r2, [r7, #2]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	7858      	ldrb	r0, [r3, #1]
 80014b4:	4926      	ldr	r1, [pc, #152]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	440b      	add	r3, r1
 80014be:	3303      	adds	r3, #3
 80014c0:	4602      	mov	r2, r0
 80014c2:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	7818      	ldrb	r0, [r3, #0]
 80014ca:	4921      	ldr	r1, [pc, #132]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	3304      	adds	r3, #4
 80014d6:	4602      	mov	r2, r0
 80014d8:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80014da:	e032      	b.n	8001542 <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80014dc:	78ba      	ldrb	r2, [r7, #2]
 80014de:	491c      	ldr	r1, [pc, #112]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	22ff      	movs	r2, #255	@ 0xff
 80014ea:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 80014ec:	78ba      	ldrb	r2, [r7, #2]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	7898      	ldrb	r0, [r3, #2]
 80014f2:	4917      	ldr	r1, [pc, #92]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	3301      	adds	r3, #1
 80014fe:	4602      	mov	r2, r0
 8001500:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 8001502:	78ba      	ldrb	r2, [r7, #2]
 8001504:	4912      	ldr	r1, [pc, #72]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	440b      	add	r3, r1
 800150e:	3302      	adds	r3, #2
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 8001514:	78ba      	ldrb	r2, [r7, #2]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	7858      	ldrb	r0, [r3, #1]
 800151a:	490d      	ldr	r1, [pc, #52]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	440b      	add	r3, r1
 8001524:	3303      	adds	r3, #3
 8001526:	4602      	mov	r2, r0
 8001528:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 800152a:	78ba      	ldrb	r2, [r7, #2]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	7818      	ldrb	r0, [r3, #0]
 8001530:	4907      	ldr	r1, [pc, #28]	@ (8001550 <UpdateDisplayBuffer+0x1cc>)
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	440b      	add	r3, r1
 800153a:	3304      	adds	r3, #4
 800153c:	4602      	mov	r2, r0
 800153e:	701a      	strb	r2, [r3, #0]
    }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000048 	.word	0x20000048
 8001550:	200000e4 	.word	0x200000e4

08001554 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800155a:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <SevenSegLEDsScan+0x7c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3301      	adds	r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	bfb8      	it	lt
 800156a:	425b      	neglt	r3, r3
 800156c:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <SevenSegLEDsScan+0x80>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	4619      	mov	r1, r3
 8001578:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <SevenSegLEDsScan+0x84>)
 800157a:	f7ff ff03 	bl	8001384 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157e:	b672      	cpsid	i
}
 8001580:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <SevenSegLEDsScan+0x7c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <SevenSegLEDsScan+0x88>)
 8001592:	4413      	add	r3, r2
 8001594:	2105      	movs	r1, #5
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f824 	bl	80015e4 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 800159c:	4a0c      	ldr	r2, [pc, #48]	@ (80015d0 <SevenSegLEDsScan+0x7c>)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015a2:	b662      	cpsie	i
}
 80015a4:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <SevenSegLEDsScan+0x80>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <SevenSegLEDsScan+0x8c>)
 80015b0:	fb83 3102 	smull	r3, r1, r3, r2
 80015b4:	17d3      	asrs	r3, r2, #31
 80015b6:	1ac9      	subs	r1, r1, r3
 80015b8:	460b      	mov	r3, r1
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	440b      	add	r3, r1
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	1ad1      	subs	r1, r2, r3
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <SevenSegLEDsScan+0x80>)
 80015c6:	701a      	strb	r2, [r3, #0]
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200000ee 	.word	0x200000ee
 80015d4:	200000e2 	.word	0x200000e2
 80015d8:	20000020 	.word	0x20000020
 80015dc:	200000e4 	.word	0x200000e4
 80015e0:	2aaaaaab 	.word	0x2aaaaaab

080015e4 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015f4:	4823      	ldr	r0, [pc, #140]	@ (8001684 <ShiftOut_SPI+0xa0>)
 80015f6:	f000 fead 	bl	8002354 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2180      	movs	r1, #128	@ 0x80
 80015fe:	4822      	ldr	r0, [pc, #136]	@ (8001688 <ShiftOut_SPI+0xa4>)
 8001600:	f000 fea8 	bl	8002354 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e003      	b.n	8001612 <ShiftOut_SPI+0x2e>
 800160a:	bf00      	nop
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001618:	dbf7      	blt.n	800160a <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800161a:	bf00      	nop
 800161c:	481b      	ldr	r0, [pc, #108]	@ (800168c <ShiftOut_SPI+0xa8>)
 800161e:	f001 fcf5 	bl	800300c <HAL_SPI_GetState>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d1f9      	bne.n	800161c <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4816      	ldr	r0, [pc, #88]	@ (800168c <ShiftOut_SPI+0xa8>)
 8001634:	f001 fba7 	bl	8002d86 <HAL_SPI_Transmit>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 800163e:	f000 f9e5 	bl	8001a0c <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	e003      	b.n	8001650 <ShiftOut_SPI+0x6c>
 8001648:	bf00      	nop
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3301      	adds	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001656:	dbf7      	blt.n	8001648 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001658:	bf00      	nop
 800165a:	480c      	ldr	r0, [pc, #48]	@ (800168c <ShiftOut_SPI+0xa8>)
 800165c:	f001 fcd6 	bl	800300c <HAL_SPI_GetState>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d1f9      	bne.n	800165a <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <ShiftOut_SPI+0xa0>)
 800166e:	f000 fe71 	bl	8002354 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2180      	movs	r1, #128	@ 0x80
 8001676:	4804      	ldr	r0, [pc, #16]	@ (8001688 <ShiftOut_SPI+0xa4>)
 8001678:	f000 fe6c 	bl	8002354 <HAL_GPIO_WritePin>

}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	200000f4 	.word	0x200000f4

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f000 fb9e 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f828 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f000 f8fa 	bl	8001894 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016a0:	f000 f88c 	bl	80017bc <MX_SPI1_Init>
  MX_SPI2_Init();
 80016a4:	f000 f8c0 	bl	8001828 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016a8:	f002 f852 	bl	8003750 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80016ac:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <main+0x44>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <main+0x48>)
 80016b2:	f002 f897 	bl	80037e4 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <main+0x4c>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80016bc:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <main+0x50>)
 80016be:	2100      	movs	r1, #0
 80016c0:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <main+0x54>)
 80016c2:	f002 f88f 	bl	80037e4 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <main+0x58>)
 80016ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016cc:	f002 f864 	bl	8003798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <main+0x40>
 80016d4:	08006d70 	.word	0x08006d70
 80016d8:	08001999 	.word	0x08001999
 80016dc:	200001a4 	.word	0x200001a4
 80016e0:	08006d94 	.word	0x08006d94
 80016e4:	080019d5 	.word	0x080019d5
 80016e8:	200001a8 	.word	0x200001a8

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	@ 0x50
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	2230      	movs	r2, #48	@ 0x30
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fe08 	bl	8006310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <SystemClock_Config+0xc8>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <SystemClock_Config+0xc8>)
 800171a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemClock_Config+0xc8>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <SystemClock_Config+0xcc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a20      	ldr	r2, [pc, #128]	@ (80017b8 <SystemClock_Config+0xcc>)
 8001736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b1e      	ldr	r3, [pc, #120]	@ (80017b8 <SystemClock_Config+0xcc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174c:	2301      	movs	r3, #1
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001750:	2310      	movs	r3, #16
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001754:	2302      	movs	r3, #2
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001758:	2300      	movs	r3, #0
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800175c:	2308      	movs	r3, #8
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001760:	2364      	movs	r3, #100	@ 0x64
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001768:	2304      	movs	r3, #4
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fe09 	bl	8002388 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800177c:	f000 f946 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001784:	2302      	movs	r3, #2
 8001786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800178c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2103      	movs	r1, #3
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f86b 	bl	8002878 <HAL_RCC_ClockConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017a8:	f000 f930 	bl	8001a0c <Error_Handler>
  }
}
 80017ac:	bf00      	nop
 80017ae:	3750      	adds	r7, #80	@ 0x50
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000

080017bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	@ (8001824 <MX_SPI1_Init+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017f0:	2220      	movs	r2, #32
 80017f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_SPI1_Init+0x64>)
 8001808:	220a      	movs	r2, #10
 800180a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <MX_SPI1_Init+0x64>)
 800180e:	f001 fa31 	bl	8002c74 <HAL_SPI_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001818:	f000 f8f8 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200000f4 	.word	0x200000f4
 8001824:	40013000 	.word	0x40013000

08001828 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800182c:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_SPI2_Init+0x64>)
 800182e:	4a18      	ldr	r2, [pc, #96]	@ (8001890 <MX_SPI2_Init+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <MX_SPI2_Init+0x64>)
 8001834:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_SPI2_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_SPI2_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_SPI2_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_SPI2_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_SPI2_Init+0x64>)
 8001854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_SPI2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <MX_SPI2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_SPI2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <MX_SPI2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_SPI2_Init+0x64>)
 8001874:	220a      	movs	r2, #10
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_SPI2_Init+0x64>)
 800187a:	f001 f9fb 	bl	8002c74 <HAL_SPI_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001884:	f000 f8c2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000014c 	.word	0x2000014c
 8001890:	40003800 	.word	0x40003800

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b37      	ldr	r3, [pc, #220]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a36      	ldr	r2, [pc, #216]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b34      	ldr	r3, [pc, #208]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b30      	ldr	r3, [pc, #192]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a2f      	ldr	r2, [pc, #188]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b29      	ldr	r3, [pc, #164]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a28      	ldr	r2, [pc, #160]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <MX_GPIO_Init+0xf8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b22      	ldr	r3, [pc, #136]	@ (800198c <MX_GPIO_Init+0xf8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a21      	ldr	r2, [pc, #132]	@ (800198c <MX_GPIO_Init+0xf8>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <MX_GPIO_Init+0xf8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800191a:	2200      	movs	r2, #0
 800191c:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8001920:	481b      	ldr	r0, [pc, #108]	@ (8001990 <MX_GPIO_Init+0xfc>)
 8001922:	f000 fd17 	bl	8002354 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	481a      	ldr	r0, [pc, #104]	@ (8001994 <MX_GPIO_Init+0x100>)
 800192c:	f000 fd12 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001930:	231f      	movs	r3, #31
 8001932:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001938:	2301      	movs	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4813      	ldr	r0, [pc, #76]	@ (8001990 <MX_GPIO_Init+0xfc>)
 8001944:	f000 fb6a 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001948:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 800194c:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	480b      	ldr	r0, [pc, #44]	@ (8001990 <MX_GPIO_Init+0xfc>)
 8001962:	f000 fb5b 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_GPIO_Init+0x100>)
 800197e:	f000 fb4d 	bl	800201c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	@ 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800

08001998 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 80019a0:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <Led3x6Run+0x38>)
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019aa:	6018      	str	r0, [r3, #0]
 80019ac:	3304      	adds	r3, #4
 80019ae:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 80019b0:	f7ff fdd0 	bl	8001554 <SevenSegLEDsScan>
	  osDelay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f001 ffa7 	bl	8003908 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2105      	movs	r1, #5
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe0f 	bl	80015e4 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f001 ff9e 	bl	8003908 <osDelay>
	  SevenSegLEDsScan();
 80019cc:	bf00      	nop
 80019ce:	e7ef      	b.n	80019b0 <Led3x6Run+0x18>
 80019d0:	08006d50 	.word	0x08006d50

080019d4 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 80019dc:	f7fe ff90 	bl	8000900 <KeyLogic>
	 KeyLogic_Action();
 80019e0:	f7ff f9f8 	bl	8000dd4 <KeyLogic_Action>
	 osDelay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f001 ff8f 	bl	8003908 <osDelay>
	 KeyLogic();
 80019ea:	bf00      	nop
 80019ec:	e7f6      	b.n	80019dc <KeyPad4x5Run+0x8>

080019ee <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fe:	d101      	bne.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a00:	f000 fa0a 	bl	8001e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_MspInit+0x54>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_MspInit+0x54>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x54>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_MspInit+0x54>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_MspInit+0x54>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_MspInit+0x54>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	210f      	movs	r1, #15
 8001a5a:	f06f 0001 	mvn.w	r0, #1
 8001a5e:	f000 fab3 	bl	8001fc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a41      	ldr	r2, [pc, #260]	@ (8001b94 <HAL_SPI_MspInit+0x124>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d12c      	bne.n	8001aec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4b40      	ldr	r3, [pc, #256]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001a9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a38      	ldr	r2, [pc, #224]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aca:	23a0      	movs	r3, #160	@ 0xa0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	482d      	ldr	r0, [pc, #180]	@ (8001b9c <HAL_SPI_MspInit+0x12c>)
 8001ae6:	f000 fa99 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001aea:	e04f      	b.n	8001b8c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba0 <HAL_SPI_MspInit+0x130>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d14a      	bne.n	8001b8c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a26      	ldr	r2, [pc, #152]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <HAL_SPI_MspInit+0x128>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	@ (8001ba4 <HAL_SPI_MspInit+0x134>)
 8001b66:	f000 fa59 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	4619      	mov	r1, r3
 8001b86:	4808      	ldr	r0, [pc, #32]	@ (8001ba8 <HAL_SPI_MspInit+0x138>)
 8001b88:	f000 fa48 	bl	800201c <HAL_GPIO_Init>
}
 8001b8c:	bf00      	nop
 8001b8e:	3730      	adds	r7, #48	@ 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40013000 	.word	0x40013000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020000 	.word	0x40020000
 8001ba0:	40003800 	.word	0x40003800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020400 	.word	0x40020400

08001bac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	@ 0x38
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <HAL_InitTick+0xe8>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	4a33      	ldr	r2, [pc, #204]	@ (8001c94 <HAL_InitTick+0xe8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_InitTick+0xe8>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bd8:	f107 0210 	add.w	r2, r7, #16
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 f814 	bl	8002c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bf2:	f000 fff9 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8001bf6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001bf8:	e004      	b.n	8001c04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bfa:	f000 fff5 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c06:	4a24      	ldr	r2, [pc, #144]	@ (8001c98 <HAL_InitTick+0xec>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c22:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c26:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c3a:	4818      	ldr	r0, [pc, #96]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c3c:	f001 fad0 	bl	80031e0 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d11b      	bne.n	8001c86 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001c4e:	4813      	ldr	r0, [pc, #76]	@ (8001c9c <HAL_InitTick+0xf0>)
 8001c50:	f001 fb20 	bl	8003294 <HAL_TIM_Base_Start_IT>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d111      	bne.n	8001c86 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c62:	201c      	movs	r0, #28
 8001c64:	f000 f9cc 	bl	8002000 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	d808      	bhi.n	8001c80 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	201c      	movs	r0, #28
 8001c74:	f000 f9a8 	bl	8001fc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c78:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <HAL_InitTick+0xf4>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e002      	b.n	8001c86 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3738      	adds	r7, #56	@ 0x38
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	200001ac 	.word	0x200001ac
 8001ca0:	20000050 	.word	0x20000050

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <NMI_Handler+0x4>

08001cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ce0:	4802      	ldr	r0, [pc, #8]	@ (8001cec <TIM2_IRQHandler+0x10>)
 8001ce2:	f001 fb39 	bl	8003358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200001ac 	.word	0x200001ac

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f004 fb54 	bl	80063cc <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20020000 	.word	0x20020000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	200001f4 	.word	0x200001f4
 8001d58:	20004d30 	.word	0x20004d30

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d84:	f7ff ffea 	bl	8001d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	@ (8001dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f004 fb13 	bl	80063d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db2:	f7ff fc6d 	bl	8001690 <main>
  bx  lr    
 8001db6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001dc4:	08006e14 	.word	0x08006e14
  ldr r2, =_sbss
 8001dc8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001dcc:	20004d2c 	.word	0x20004d2c

08001dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <HAL_Init+0x40>)
 8001dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <HAL_Init+0x40>)
 8001dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <HAL_Init+0x40>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 f8d8 	bl	8001fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e02:	200f      	movs	r0, #15
 8001e04:	f7ff fed2 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e08:	f7ff fe06 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023c00 	.word	0x40023c00

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000054 	.word	0x20000054
 8001e3c:	200001f8 	.word	0x200001f8

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200001f8 	.word	0x200001f8

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	@ (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	@ (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	@ (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ff4c 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fda:	f7ff ff61 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8001fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	6978      	ldr	r0, [r7, #20]
 8001fe6:	f7ff ffb1 	bl	8001f4c <NVIC_EncodePriority>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff80 	bl	8001ef8 <__NVIC_SetPriority>
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff54 	bl	8001ebc <__NVIC_EnableIRQ>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e159      	b.n	80022ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8148 	bne.w	80022e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d005      	beq.n	800206e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	2b02      	cmp	r3, #2
 800206c:	d130      	bne.n	80020d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0201 	and.w	r2, r3, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d017      	beq.n	800210c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d123      	bne.n	8002160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a2 	beq.w	80022e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b54      	ldr	r3, [pc, #336]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021be:	4a52      	ldr	r2, [pc, #328]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a49      	ldr	r2, [pc, #292]	@ (800230c <HAL_GPIO_Init+0x2f0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x202>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a48      	ldr	r2, [pc, #288]	@ (8002310 <HAL_GPIO_Init+0x2f4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x1fe>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a47      	ldr	r2, [pc, #284]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x1fa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <HAL_GPIO_Init+0x2fc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a45      	ldr	r2, [pc, #276]	@ (800231c <HAL_GPIO_Init+0x300>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x1f2>
 800220a:	2304      	movs	r3, #4
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800220e:	2307      	movs	r3, #7
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x204>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x204>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a2f      	ldr	r2, [pc, #188]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f aea2 	bls.w	8002038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002370:	e003      	b.n	800237a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e267      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d075      	beq.n	8002492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a6:	4b88      	ldr	r3, [pc, #544]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d00c      	beq.n	80023cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b2:	4b85      	ldr	r3, [pc, #532]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d112      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023be:	4b82      	ldr	r3, [pc, #520]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4b7e      	ldr	r3, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05b      	beq.n	8002490 <HAL_RCC_OscConfig+0x108>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d157      	bne.n	8002490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e242      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x74>
 80023ee:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a75      	ldr	r2, [pc, #468]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e01d      	b.n	8002438 <HAL_RCC_OscConfig+0xb0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x98>
 8002406:	4b70      	ldr	r3, [pc, #448]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6f      	ldr	r2, [pc, #444]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b6d      	ldr	r3, [pc, #436]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6c      	ldr	r2, [pc, #432]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0xb0>
 8002420:	4b69      	ldr	r3, [pc, #420]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a68      	ldr	r2, [pc, #416]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b66      	ldr	r3, [pc, #408]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a65      	ldr	r2, [pc, #404]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff fcfe 	bl	8001e40 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff fcfa 	bl	8001e40 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e207      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b5b      	ldr	r3, [pc, #364]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0xc0>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fcea 	bl	8001e40 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fce6 	bl	8001e40 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e1f3      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	4b51      	ldr	r3, [pc, #324]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0xe8>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249e:	4b4a      	ldr	r3, [pc, #296]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b6:	4b44      	ldr	r3, [pc, #272]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x152>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e1c7      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4937      	ldr	r1, [pc, #220]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b34      	ldr	r3, [pc, #208]	@ (80025cc <HAL_RCC_OscConfig+0x244>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7ff fc9f 	bl	8001e40 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002506:	f7ff fc9b 	bl	8001e40 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1a8      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4925      	ldr	r1, [pc, #148]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b24      	ldr	r3, [pc, #144]	@ (80025cc <HAL_RCC_OscConfig+0x244>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff fc7e 	bl	8001e40 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002548:	f7ff fc7a 	bl	8001e40 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e187      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d036      	beq.n	80025e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <HAL_RCC_OscConfig+0x248>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7ff fc5e 	bl	8001e40 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff fc5a 	bl	8001e40 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e167      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_RCC_OscConfig+0x240>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x200>
 80025a6:	e01b      	b.n	80025e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a8:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_OscConfig+0x248>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7ff fc47 	bl	8001e40 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	e00e      	b.n	80025d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b6:	f7ff fc43 	bl	8001e40 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d907      	bls.n	80025d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e150      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	42470000 	.word	0x42470000
 80025d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b88      	ldr	r3, [pc, #544]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ea      	bne.n	80025b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8097 	beq.w	800271c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b81      	ldr	r3, [pc, #516]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b7d      	ldr	r3, [pc, #500]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	4a7c      	ldr	r2, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	@ 0x40
 800260e:	4b7a      	ldr	r3, [pc, #488]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b77      	ldr	r3, [pc, #476]	@ (80027fc <HAL_RCC_OscConfig+0x474>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	4b74      	ldr	r3, [pc, #464]	@ (80027fc <HAL_RCC_OscConfig+0x474>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a73      	ldr	r2, [pc, #460]	@ (80027fc <HAL_RCC_OscConfig+0x474>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7ff fc03 	bl	8001e40 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7ff fbff 	bl	8001e40 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e10c      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <HAL_RCC_OscConfig+0x474>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x2ea>
 8002664:	4b64      	ldr	r3, [pc, #400]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002668:	4a63      	ldr	r2, [pc, #396]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002670:	e01c      	b.n	80026ac <HAL_RCC_OscConfig+0x324>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x30c>
 800267a:	4b5f      	ldr	r3, [pc, #380]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267e:	4a5e      	ldr	r2, [pc, #376]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	@ 0x70
 8002686:	4b5c      	ldr	r3, [pc, #368]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	4a5b      	ldr	r2, [pc, #364]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	@ 0x70
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0x324>
 8002694:	4b58      	ldr	r3, [pc, #352]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002698:	4a57      	ldr	r2, [pc, #348]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a0:	4b55      	ldr	r3, [pc, #340]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	4a54      	ldr	r2, [pc, #336]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff fbc4 	bl	8001e40 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7ff fbc0 	bl	8001e40 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0cb      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	4b49      	ldr	r3, [pc, #292]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCC_OscConfig+0x334>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7ff fbae 	bl	8001e40 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7ff fbaa 	bl	8001e40 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0b5      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	4b3e      	ldr	r3, [pc, #248]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ee      	bne.n	80026e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002710:	4b39      	ldr	r3, [pc, #228]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	4a38      	ldr	r2, [pc, #224]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a1 	beq.w	8002868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002726:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d05c      	beq.n	80027ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d141      	bne.n	80027be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b31      	ldr	r3, [pc, #196]	@ (8002800 <HAL_RCC_OscConfig+0x478>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff fb7e 	bl	8001e40 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7ff fb7a 	bl	8001e40 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e087      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	491b      	ldr	r1, [pc, #108]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <HAL_RCC_OscConfig+0x478>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff fb53 	bl	8001e40 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279e:	f7ff fb4f 	bl	8001e40 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e05c      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x416>
 80027bc:	e054      	b.n	8002868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <HAL_RCC_OscConfig+0x478>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff fb3c 	bl	8001e40 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027cc:	f7ff fb38 	bl	8001e40 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e045      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x444>
 80027ea:	e03d      	b.n	8002868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e038      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000
 8002800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HAL_RCC_OscConfig+0x4ec>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d028      	beq.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d121      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d11a      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800283a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283c:	4293      	cmp	r3, r2
 800283e:	d111      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0cc      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b68      	ldr	r3, [pc, #416]	@ (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d90c      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b65      	ldr	r3, [pc, #404]	@ (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b63      	ldr	r3, [pc, #396]	@ (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b8      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d020      	beq.n	8002902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028cc:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a58      	ldr	r2, [pc, #352]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e4:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a52      	ldr	r2, [pc, #328]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b50      	ldr	r3, [pc, #320]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	494d      	ldr	r1, [pc, #308]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d044      	beq.n	8002998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d119      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d003      	beq.n	8002936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002932:	2b03      	cmp	r3, #3
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b3f      	ldr	r3, [pc, #252]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b3b      	ldr	r3, [pc, #236]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e067      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002956:	4b37      	ldr	r3, [pc, #220]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4934      	ldr	r1, [pc, #208]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002968:	f7ff fa6a 	bl	8001e40 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7ff fa66 	bl	8001e40 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e04f      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 020c 	and.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d1eb      	bne.n	8002970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d20c      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e032      	b.n	8002a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4916      	ldr	r1, [pc, #88]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ea:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490e      	ldr	r1, [pc, #56]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029fe:	f000 f821 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490a      	ldr	r1, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1a:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f8c4 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023c00 	.word	0x40023c00
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08006db8 	.word	0x08006db8
 8002a3c:	2000004c 	.word	0x2000004c
 8002a40:	20000050 	.word	0x20000050

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a48:	b090      	sub	sp, #64	@ 0x40
 8002a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a54:	2300      	movs	r3, #0
 8002a56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a5c:	4b59      	ldr	r3, [pc, #356]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d00d      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x40>
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	f200 80a1 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a76:	e09b      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b53      	ldr	r3, [pc, #332]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002a7c:	e09b      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7e:	4b53      	ldr	r3, [pc, #332]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002a80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a82:	e098      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a84:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d028      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002aac:	2100      	movs	r1, #0
 8002aae:	4b47      	ldr	r3, [pc, #284]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab0:	fb03 f201 	mul.w	r2, r3, r1
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	4a43      	ldr	r2, [pc, #268]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002abe:	fba0 1202 	umull	r1, r2, r0, r2
 8002ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aca:	4413      	add	r3, r2
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ada:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ade:	f7fd fbd7 	bl	8000290 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aea:	e053      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aec:	4b35      	ldr	r3, [pc, #212]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	2200      	movs	r2, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	617a      	str	r2, [r7, #20]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002afe:	f04f 0b00 	mov.w	fp, #0
 8002b02:	4652      	mov	r2, sl
 8002b04:	465b      	mov	r3, fp
 8002b06:	f04f 0000 	mov.w	r0, #0
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	0159      	lsls	r1, r3, #5
 8002b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b14:	0150      	lsls	r0, r2, #5
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b1e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b36:	ebb2 0408 	subs.w	r4, r2, r8
 8002b3a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	00eb      	lsls	r3, r5, #3
 8002b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4c:	00e2      	lsls	r2, r4, #3
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	eb14 030a 	adds.w	r3, r4, sl
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	eb45 030b 	adc.w	r3, r5, fp
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	028b      	lsls	r3, r1, #10
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b74:	4621      	mov	r1, r4
 8002b76:	028a      	lsls	r2, r1, #10
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	60fa      	str	r2, [r7, #12]
 8002b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b88:	f7fd fb82 	bl	8000290 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ba4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3740      	adds	r7, #64	@ 0x40
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	017d7840 	.word	0x017d7840

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	@ (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000004c 	.word	0x2000004c

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	@ (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08006dc8 	.word	0x08006dc8

08002c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c20:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <HAL_RCC_GetClockConfig+0x60>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0207 	and.w	r2, r3, #7
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	601a      	str	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07b      	b.n	8002d7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c96:	d009      	beq.n	8002cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fed2 	bl	8001a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	f003 0104 	and.w	r1, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	f003 0210 	and.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b088      	sub	sp, #32
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_SPI_Transmit+0x22>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e12d      	b.n	8003004 <HAL_SPI_Transmit+0x27e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db0:	f7ff f846 	bl	8001e40 <HAL_GetTick>
 8002db4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d002      	beq.n	8002dcc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dca:	e116      	b.n	8002ffa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_Transmit+0x52>
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ddc:	e10d      	b.n	8002ffa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2203      	movs	r2, #3
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	88fa      	ldrh	r2, [r7, #6]
 8002df6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e24:	d10f      	bne.n	8002e46 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d007      	beq.n	8002e64 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e6c:	d14f      	bne.n	8002f0e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Transmit+0xf6>
 8002e76:	8afb      	ldrh	r3, [r7, #22]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d142      	bne.n	8002f02 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ea0:	e02f      	b.n	8002f02 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d112      	bne.n	8002ed6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	881a      	ldrh	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	1c9a      	adds	r2, r3, #2
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ed4:	e015      	b.n	8002f02 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed6:	f7fe ffb3 	bl	8001e40 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d803      	bhi.n	8002eee <HAL_SPI_Transmit+0x168>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d102      	bne.n	8002ef4 <HAL_SPI_Transmit+0x16e>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d106      	bne.n	8002f02 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002f00:	e07b      	b.n	8002ffa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ca      	bne.n	8002ea2 <HAL_SPI_Transmit+0x11c>
 8002f0c:	e050      	b.n	8002fb0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Transmit+0x196>
 8002f16:	8afb      	ldrh	r3, [r7, #22]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d144      	bne.n	8002fa6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f42:	e030      	b.n	8002fa6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d113      	bne.n	8002f7a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f78:	e015      	b.n	8002fa6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7a:	f7fe ff61 	bl	8001e40 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_Transmit+0x20c>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_Transmit+0x212>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002fa4:	e029      	b.n	8002ffa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1c9      	bne.n	8002f44 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	6839      	ldr	r1, [r7, #0]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8bf 	bl	8003138 <SPI_EndRxTxTransaction>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e003      	b.n	8002ffa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003002:	7ffb      	ldrb	r3, [r7, #31]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800301a:	b2db      	uxtb	r3, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003038:	f7fe ff02 	bl	8001e40 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4413      	add	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003048:	f7fe fefa 	bl	8001e40 <HAL_GetTick>
 800304c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800304e:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	0d1b      	lsrs	r3, r3, #20
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305e:	e054      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d050      	beq.n	800310a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003068:	f7fe feea 	bl	8001e40 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d902      	bls.n	800307e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d13d      	bne.n	80030fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800308c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003096:	d111      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a0:	d004      	beq.n	80030ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030aa:	d107      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030c4:	d10f      	bne.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e017      	b.n	800312a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3b01      	subs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	429a      	cmp	r2, r3
 8003126:	d19b      	bne.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000004c 	.word	0x2000004c

08003138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2201      	movs	r2, #1
 800314c:	2102      	movs	r1, #2
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff ff6a 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e032      	b.n	80031d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800316a:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <SPI_EndRxTxTransaction+0xa0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	@ (80031dc <SPI_EndRxTxTransaction+0xa4>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0d5b      	lsrs	r3, r3, #21
 8003176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003188:	d112      	bne.n	80031b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2200      	movs	r2, #0
 8003192:	2180      	movs	r1, #128	@ 0x80
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff ff47 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e00f      	b.n	80031d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d0f2      	beq.n	80031b0 <SPI_EndRxTxTransaction+0x78>
 80031ca:	e000      	b.n	80031ce <SPI_EndRxTxTransaction+0x96>
        break;
 80031cc:	bf00      	nop
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000004c 	.word	0x2000004c
 80031dc:	165e9f81 	.word	0x165e9f81

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e041      	b.n	8003276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f839 	bl	800327e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 f9b2 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d001      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e044      	b.n	8003336 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <HAL_TIM_Base_Start_IT+0xb0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d018      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d6:	d013      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003348 <HAL_TIM_Base_Start_IT+0xb4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a19      	ldr	r2, [pc, #100]	@ (800334c <HAL_TIM_Base_Start_IT+0xb8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d009      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a17      	ldr	r2, [pc, #92]	@ (8003350 <HAL_TIM_Base_Start_IT+0xbc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x6c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <HAL_TIM_Base_Start_IT+0xc0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d010      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	e007      	b.n	8003334 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40014000 	.word	0x40014000

08003358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0202 	mvn.w	r2, #2
 800338c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8d2 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8c4 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8d5 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01b      	beq.n	8003408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0204 	mvn.w	r2, #4
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8ac 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f89e 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8af 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d020      	beq.n	8003454 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f886 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f878 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f889 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f860 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f852 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f863 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0201 	mvn.w	r2, #1
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe fa95 	bl	80019ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8e6 	bl	80036b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f834 	bl	8003574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0220 	mvn.w	r2, #32
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8b8 	bl	80036a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3a      	ldr	r2, [pc, #232]	@ (8003684 <TIM_Base_SetConfig+0xfc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x38>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x38>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a37      	ldr	r2, [pc, #220]	@ (8003688 <TIM_Base_SetConfig+0x100>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x38>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a36      	ldr	r2, [pc, #216]	@ (800368c <TIM_Base_SetConfig+0x104>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x38>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a35      	ldr	r2, [pc, #212]	@ (8003690 <TIM_Base_SetConfig+0x108>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <TIM_Base_SetConfig+0xfc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a28      	ldr	r2, [pc, #160]	@ (8003688 <TIM_Base_SetConfig+0x100>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a27      	ldr	r2, [pc, #156]	@ (800368c <TIM_Base_SetConfig+0x104>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a26      	ldr	r2, [pc, #152]	@ (8003690 <TIM_Base_SetConfig+0x108>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a25      	ldr	r2, [pc, #148]	@ (8003694 <TIM_Base_SetConfig+0x10c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a24      	ldr	r2, [pc, #144]	@ (8003698 <TIM_Base_SetConfig+0x110>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a23      	ldr	r2, [pc, #140]	@ (800369c <TIM_Base_SetConfig+0x114>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0e      	ldr	r2, [pc, #56]	@ (8003684 <TIM_Base_SetConfig+0xfc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]
  }
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800

080036a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <__NVIC_SetPriority>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	6039      	str	r1, [r7, #0]
 80036d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db0a      	blt.n	80036f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	490c      	ldr	r1, [pc, #48]	@ (8003714 <__NVIC_SetPriority+0x4c>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036f0:	e00a      	b.n	8003708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4908      	ldr	r1, [pc, #32]	@ (8003718 <__NVIC_SetPriority+0x50>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	3b04      	subs	r3, #4
 8003700:	0112      	lsls	r2, r2, #4
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	440b      	add	r3, r1
 8003706:	761a      	strb	r2, [r3, #24]
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <SysTick_Handler+0x1c>)
 8003722:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003724:	f001 fd46 	bl	80051b4 <xTaskGetSchedulerState>
 8003728:	4603      	mov	r3, r0
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800372e:	f002 fb3b 	bl	8005da8 <xPortSysTickHandler>
  }
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e010 	.word	0xe000e010

0800373c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003740:	2100      	movs	r1, #0
 8003742:	f06f 0004 	mvn.w	r0, #4
 8003746:	f7ff ffbf 	bl	80036c8 <__NVIC_SetPriority>
#endif
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003756:	f3ef 8305 	mrs	r3, IPSR
 800375a:	603b      	str	r3, [r7, #0]
  return(result);
 800375c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003762:	f06f 0305 	mvn.w	r3, #5
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	e00c      	b.n	8003784 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800376a:	4b0a      	ldr	r3, [pc, #40]	@ (8003794 <osKernelInitialize+0x44>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003772:	4b08      	ldr	r3, [pc, #32]	@ (8003794 <osKernelInitialize+0x44>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003778:	2300      	movs	r3, #0
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	e002      	b.n	8003784 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003784:	687b      	ldr	r3, [r7, #4]
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	200001fc 	.word	0x200001fc

08003798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800379e:	f3ef 8305 	mrs	r3, IPSR
 80037a2:	603b      	str	r3, [r7, #0]
  return(result);
 80037a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037aa:	f06f 0305 	mvn.w	r3, #5
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	e010      	b.n	80037d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <osKernelStart+0x48>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d109      	bne.n	80037ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ba:	f7ff ffbf 	bl	800373c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037be:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <osKernelStart+0x48>)
 80037c0:	2202      	movs	r2, #2
 80037c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037c4:	f001 f892 	bl	80048ec <vTaskStartScheduler>
      stat = osOK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	e002      	b.n	80037d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037d4:	687b      	ldr	r3, [r7, #4]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200001fc 	.word	0x200001fc

080037e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	@ 0x38
 80037e8:	af04      	add	r7, sp, #16
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037f4:	f3ef 8305 	mrs	r3, IPSR
 80037f8:	617b      	str	r3, [r7, #20]
  return(result);
 80037fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d17e      	bne.n	80038fe <osThreadNew+0x11a>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d07b      	beq.n	80038fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800380a:	2318      	movs	r3, #24
 800380c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d045      	beq.n	80038aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <osThreadNew+0x48>
        name = attr->name;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <osThreadNew+0x6e>
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b38      	cmp	r3, #56	@ 0x38
 8003844:	d805      	bhi.n	8003852 <osThreadNew+0x6e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <osThreadNew+0x72>
        return (NULL);
 8003852:	2300      	movs	r3, #0
 8003854:	e054      	b.n	8003900 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <osThreadNew+0xa8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2ba7      	cmp	r3, #167	@ 0xa7
 8003874:	d90a      	bls.n	800388c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <osThreadNew+0xa8>
        mem = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e010      	b.n	80038ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10c      	bne.n	80038ae <osThreadNew+0xca>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <osThreadNew+0xca>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <osThreadNew+0xca>
          mem = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e001      	b.n	80038ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d110      	bne.n	80038d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038bc:	9202      	str	r2, [sp, #8]
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6a3a      	ldr	r2, [r7, #32]
 80038c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fe1a 	bl	8004504 <xTaskCreateStatic>
 80038d0:	4603      	mov	r3, r0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e013      	b.n	80038fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d110      	bne.n	80038fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fe68 	bl	80045c4 <xTaskCreate>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d001      	beq.n	80038fe <osThreadNew+0x11a>
            hTask = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038fe:	693b      	ldr	r3, [r7, #16]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	@ 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003910:	f3ef 8305 	mrs	r3, IPSR
 8003914:	60bb      	str	r3, [r7, #8]
  return(result);
 8003916:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <osDelay+0x1c>
    stat = osErrorISR;
 800391c:	f06f 0305 	mvn.w	r3, #5
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e007      	b.n	8003934 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <osDelay+0x2c>
      vTaskDelay(ticks);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 ffa6 	bl	8004880 <vTaskDelay>
    }
  }

  return (stat);
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4a07      	ldr	r2, [pc, #28]	@ (800396c <vApplicationGetIdleTaskMemory+0x2c>)
 8003950:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4a06      	ldr	r2, [pc, #24]	@ (8003970 <vApplicationGetIdleTaskMemory+0x30>)
 8003956:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	@ 0x80
 800395c:	601a      	str	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000200 	.word	0x20000200
 8003970:	200002a8 	.word	0x200002a8

08003974 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a07      	ldr	r2, [pc, #28]	@ (80039a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003984:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4a06      	ldr	r2, [pc, #24]	@ (80039a4 <vApplicationGetTimerTaskMemory+0x30>)
 800398a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003992:	601a      	str	r2, [r3, #0]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	200004a8 	.word	0x200004a8
 80039a4:	20000550 	.word	0x20000550

080039a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f103 0208 	add.w	r2, r3, #8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f103 0208 	add.w	r2, r3, #8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f103 0208 	add.w	r2, r3, #8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d103      	bne.n	8003a6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e00c      	b.n	8003a84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e002      	b.n	8003a78 <vListInsert+0x2e>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d2f6      	bcs.n	8003a72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	601a      	str	r2, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6892      	ldr	r2, [r2, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6852      	ldr	r2, [r2, #4]
 8003adc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d103      	bne.n	8003af0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b3c:	f002 f8a4 	bl	8005c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	68f9      	ldr	r1, [r7, #12]
 8003b4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	441a      	add	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	441a      	add	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	22ff      	movs	r2, #255	@ 0xff
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	22ff      	movs	r2, #255	@ 0xff
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d114      	bne.n	8003bbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01a      	beq.n	8003bd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 f942 	bl	8004e28 <xTaskRemoveFromEventList>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d012      	beq.n	8003bd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <xQueueGenericReset+0xd0>)
 8003bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	e009      	b.n	8003bd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3310      	adds	r3, #16
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fef1 	bl	80039a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3324      	adds	r3, #36	@ 0x24
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff feec 	bl	80039a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bd0:	f002 f88c 	bl	8005cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bd4:	2301      	movs	r3, #1
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08e      	sub	sp, #56	@ 0x38
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10b      	bne.n	8003c2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	e7fd      	b.n	8003c2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <xQueueGenericCreateStatic+0x56>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <xQueueGenericCreateStatic+0x5a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <xQueueGenericCreateStatic+0x5c>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	623b      	str	r3, [r7, #32]
}
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <xQueueGenericCreateStatic+0x84>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <xQueueGenericCreateStatic+0x88>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <xQueueGenericCreateStatic+0x8a>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	61fb      	str	r3, [r7, #28]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c8a:	2350      	movs	r3, #80	@ 0x50
 8003c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b50      	cmp	r3, #80	@ 0x50
 8003c92:	d00b      	beq.n	8003cac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003cc0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f805 	bl	8003cde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3730      	adds	r7, #48	@ 0x30
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e002      	b.n	8003d00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	69b8      	ldr	r0, [r7, #24]
 8003d10:	f7ff fefe 	bl	8003b10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	@ 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <xQueueGenericSend+0x34>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <xQueueGenericSend+0x42>
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <xQueueGenericSend+0x46>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <xQueueGenericSend+0x48>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <xQueueGenericSend+0x64>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d103      	bne.n	8003d96 <xQueueGenericSend+0x72>
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <xQueueGenericSend+0x76>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <xQueueGenericSend+0x78>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <xQueueGenericSend+0x94>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	623b      	str	r3, [r7, #32]
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db8:	f001 f9fc 	bl	80051b4 <xTaskGetSchedulerState>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <xQueueGenericSend+0xa4>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <xQueueGenericSend+0xa8>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <xQueueGenericSend+0xaa>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <xQueueGenericSend+0xc6>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	61fb      	str	r3, [r7, #28]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dea:	f001 ff4d 	bl	8005c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d302      	bcc.n	8003e00 <xQueueGenericSend+0xdc>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d129      	bne.n	8003e54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e06:	f000 fa0f 	bl	8004228 <prvCopyDataToQueue>
 8003e0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	3324      	adds	r3, #36	@ 0x24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 f805 	bl	8004e28 <xTaskRemoveFromEventList>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e24:	4b3f      	ldr	r3, [pc, #252]	@ (8003f24 <xQueueGenericSend+0x200>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	e00a      	b.n	8003e4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <xQueueGenericSend+0x200>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e4c:	f001 ff4e 	bl	8005cec <vPortExitCritical>
				return pdPASS;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e063      	b.n	8003f1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e5a:	f001 ff47 	bl	8005cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e05c      	b.n	8003f1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 f83f 	bl	8004ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e72:	2301      	movs	r3, #1
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e76:	f001 ff39 	bl	8005cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e7a:	f000 fda7 	bl	80049cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e7e:	f001 ff03 	bl	8005c88 <vPortEnterCritical>
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d103      	bne.n	8003e98 <xQueueGenericSend+0x174>
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d103      	bne.n	8003eae <xQueueGenericSend+0x18a>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eae:	f001 ff1d 	bl	8005cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eb2:	1d3a      	adds	r2, r7, #4
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f82e 	bl	8004f1c <xTaskCheckForTimeOut>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d124      	bne.n	8003f10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ec6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ec8:	f000 faa6 	bl	8004418 <prvIsQueueFull>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	3310      	adds	r3, #16
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 ff52 	bl	8004d84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ee2:	f000 fa31 	bl	8004348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ee6:	f000 fd7f 	bl	80049e8 <xTaskResumeAll>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f47f af7c 	bne.w	8003dea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <xQueueGenericSend+0x200>)
 8003ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	e772      	b.n	8003dea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f06:	f000 fa1f 	bl	8004348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f0a:	f000 fd6d 	bl	80049e8 <xTaskResumeAll>
 8003f0e:	e76c      	b.n	8003dea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f12:	f000 fa19 	bl	8004348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f16:	f000 fd67 	bl	80049e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3738      	adds	r7, #56	@ 0x38
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b090      	sub	sp, #64	@ 0x40
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSendFromISR+0x3e>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <xQueueGenericSendFromISR+0x42>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xQueueGenericSendFromISR+0x44>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d103      	bne.n	8003f96 <xQueueGenericSendFromISR+0x6e>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <xQueueGenericSendFromISR+0x72>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <xQueueGenericSendFromISR+0x74>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	623b      	str	r3, [r7, #32]
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fb8:	f001 ff46 	bl	8005e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fbc:	f3ef 8211 	mrs	r2, BASEPRI
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	61fa      	str	r2, [r7, #28]
 8003fd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <xQueueGenericSendFromISR+0xc2>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d12f      	bne.n	800404a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ff0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004000:	f000 f912 	bl	8004228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004004:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d112      	bne.n	8004034 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	3324      	adds	r3, #36	@ 0x24
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ff04 	bl	8004e28 <xTaskRemoveFromEventList>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e007      	b.n	8004044 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004034:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004038:	3301      	adds	r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	b25a      	sxtb	r2, r3
 800403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004044:	2301      	movs	r3, #1
 8004046:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004048:	e001      	b.n	800404e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800404a:	2300      	movs	r3, #0
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800405a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800405c:	4618      	mov	r0, r3
 800405e:	3740      	adds	r7, #64	@ 0x40
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	@ 0x30
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <xQueueReceive+0x32>
	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	623b      	str	r3, [r7, #32]
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d103      	bne.n	80040a4 <xQueueReceive+0x40>
 800409c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <xQueueReceive+0x44>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <xQueueReceive+0x46>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <xQueueReceive+0x62>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	61fb      	str	r3, [r7, #28]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040c6:	f001 f875 	bl	80051b4 <xTaskGetSchedulerState>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <xQueueReceive+0x72>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <xQueueReceive+0x76>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueReceive+0x78>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <xQueueReceive+0x94>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	61bb      	str	r3, [r7, #24]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040f8:	f001 fdc6 	bl	8005c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01f      	beq.n	8004148 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800410c:	f000 f8f6 	bl	80042fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00f      	beq.n	8004140 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	3310      	adds	r3, #16
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fe7f 	bl	8004e28 <xTaskRemoveFromEventList>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004130:	4b3c      	ldr	r3, [pc, #240]	@ (8004224 <xQueueReceive+0x1c0>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004140:	f001 fdd4 	bl	8005cec <vPortExitCritical>
				return pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	e069      	b.n	800421c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800414e:	f001 fdcd 	bl	8005cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004152:	2300      	movs	r3, #0
 8004154:	e062      	b.n	800421c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800415c:	f107 0310 	add.w	r3, r7, #16
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fec5 	bl	8004ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004166:	2301      	movs	r3, #1
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800416a:	f001 fdbf 	bl	8005cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800416e:	f000 fc2d 	bl	80049cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004172:	f001 fd89 	bl	8005c88 <vPortEnterCritical>
 8004176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800417c:	b25b      	sxtb	r3, r3
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d103      	bne.n	800418c <xQueueReceive+0x128>
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800418c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004192:	b25b      	sxtb	r3, r3
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d103      	bne.n	80041a2 <xQueueReceive+0x13e>
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a2:	f001 fda3 	bl	8005cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041a6:	1d3a      	adds	r2, r7, #4
 80041a8:	f107 0310 	add.w	r3, r7, #16
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 feb4 	bl	8004f1c <xTaskCheckForTimeOut>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d123      	bne.n	8004202 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041bc:	f000 f916 	bl	80043ec <prvIsQueueEmpty>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	3324      	adds	r3, #36	@ 0x24
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fdd8 	bl	8004d84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041d6:	f000 f8b7 	bl	8004348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041da:	f000 fc05 	bl	80049e8 <xTaskResumeAll>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d189      	bne.n	80040f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80041e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <xQueueReceive+0x1c0>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	e780      	b.n	80040f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041f8:	f000 f8a6 	bl	8004348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041fc:	f000 fbf4 	bl	80049e8 <xTaskResumeAll>
 8004200:	e77a      	b.n	80040f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004204:	f000 f8a0 	bl	8004348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004208:	f000 fbee 	bl	80049e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800420c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800420e:	f000 f8ed 	bl	80043ec <prvIsQueueEmpty>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	f43f af6f 	beq.w	80040f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800421a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800421c:	4618      	mov	r0, r3
 800421e:	3730      	adds	r7, #48	@ 0x30
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d14d      	bne.n	80042ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ffcc 	bl	80051f0 <xTaskPriorityDisinherit>
 8004258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	e043      	b.n	80042ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d119      	bne.n	800429c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6858      	ldr	r0, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	461a      	mov	r2, r3
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	f002 f8d6 	bl	8006424 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	441a      	add	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d32b      	bcc.n	80042ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e026      	b.n	80042ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68d8      	ldr	r0, [r3, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	461a      	mov	r2, r3
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	f002 f8bc 	bl	8006424 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	425b      	negs	r3, r3
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d207      	bcs.n	80042d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	425b      	negs	r3, r3
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d105      	bne.n	80042ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80042f2:	697b      	ldr	r3, [r7, #20]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d018      	beq.n	8004340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	441a      	add	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	429a      	cmp	r2, r3
 8004326:	d303      	bcc.n	8004330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68d9      	ldr	r1, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	461a      	mov	r2, r3
 800433a:	6838      	ldr	r0, [r7, #0]
 800433c:	f002 f872 	bl	8006424 <memcpy>
	}
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004350:	f001 fc9a 	bl	8005c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800435a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800435c:	e011      	b.n	8004382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d012      	beq.n	800438c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3324      	adds	r3, #36	@ 0x24
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fd5c 	bl	8004e28 <xTaskRemoveFromEventList>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004376:	f000 fe35 	bl	8004fe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3b01      	subs	r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	dce9      	bgt.n	800435e <prvUnlockQueue+0x16>
 800438a:	e000      	b.n	800438e <prvUnlockQueue+0x46>
					break;
 800438c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	22ff      	movs	r2, #255	@ 0xff
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004396:	f001 fca9 	bl	8005cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800439a:	f001 fc75 	bl	8005c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043a6:	e011      	b.n	80043cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3310      	adds	r3, #16
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fd37 	bl	8004e28 <xTaskRemoveFromEventList>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043c0:	f000 fe10 	bl	8004fe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043c4:	7bbb      	ldrb	r3, [r7, #14]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dce9      	bgt.n	80043a8 <prvUnlockQueue+0x60>
 80043d4:	e000      	b.n	80043d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	22ff      	movs	r2, #255	@ 0xff
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80043e0:	f001 fc84 	bl	8005cec <vPortExitCritical>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043f4:	f001 fc48 	bl	8005c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e001      	b.n	800440a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800440a:	f001 fc6f 	bl	8005cec <vPortExitCritical>

	return xReturn;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004420:	f001 fc32 	bl	8005c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	429a      	cmp	r2, r3
 800442e:	d102      	bne.n	8004436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e001      	b.n	800443a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800443a:	f001 fc57 	bl	8005cec <vPortExitCritical>

	return xReturn;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e014      	b.n	8004482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004458:	4a0f      	ldr	r2, [pc, #60]	@ (8004498 <vQueueAddToRegistry+0x50>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004464:	490c      	ldr	r1, [pc, #48]	@ (8004498 <vQueueAddToRegistry+0x50>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800446e:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <vQueueAddToRegistry+0x50>)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800447a:	e006      	b.n	800448a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b07      	cmp	r3, #7
 8004486:	d9e7      	bls.n	8004458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000950 	.word	0x20000950

0800449c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044ac:	f001 fbec 	bl	8005c88 <vPortEnterCritical>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d103      	bne.n	80044c6 <vQueueWaitForMessageRestricted+0x2a>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044cc:	b25b      	sxtb	r3, r3
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d103      	bne.n	80044dc <vQueueWaitForMessageRestricted+0x40>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044dc:	f001 fc06 	bl	8005cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d106      	bne.n	80044f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3324      	adds	r3, #36	@ 0x24
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fc6d 	bl	8004dd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044f6:	6978      	ldr	r0, [r7, #20]
 80044f8:	f7ff ff26 	bl	8004348 <prvUnlockQueue>
	}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08e      	sub	sp, #56	@ 0x38
 8004508:	af04      	add	r7, sp, #16
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	623b      	str	r3, [r7, #32]
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	61fb      	str	r3, [r7, #28]
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	e7fd      	b.n	800454a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800454e:	23a8      	movs	r3, #168	@ 0xa8
 8004550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2ba8      	cmp	r3, #168	@ 0xa8
 8004556:	d00b      	beq.n	8004570 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	61bb      	str	r3, [r7, #24]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004570:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01e      	beq.n	80045b6 <xTaskCreateStatic+0xb2>
 8004578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01b      	beq.n	80045b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	2202      	movs	r2, #2
 800458c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004590:	2300      	movs	r3, #0
 8004592:	9303      	str	r3, [sp, #12]
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	9301      	str	r3, [sp, #4]
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f851 	bl	8004650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045b0:	f000 f8f6 	bl	80047a0 <prvAddNewTaskToReadyList>
 80045b4:	e001      	b.n	80045ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045ba:	697b      	ldr	r3, [r7, #20]
	}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	@ 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	@ 0x30
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 fc77 	bl	8005ecc <pvPortMalloc>
 80045de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045e6:	20a8      	movs	r0, #168	@ 0xa8
 80045e8:	f001 fc70 	bl	8005ecc <pvPortMalloc>
 80045ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80045fa:	e005      	b.n	8004608 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f001 fd33 	bl	8006068 <vPortFree>
 8004602:	e001      	b.n	8004608 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d017      	beq.n	800463e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	2300      	movs	r3, #0
 800461a:	9303      	str	r3, [sp, #12]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	9302      	str	r3, [sp, #8]
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f80f 	bl	8004650 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004632:	69f8      	ldr	r0, [r7, #28]
 8004634:	f000 f8b4 	bl	80047a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004638:	2301      	movs	r3, #1
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e002      	b.n	8004644 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004644:	69bb      	ldr	r3, [r7, #24]
	}
 8004646:	4618      	mov	r0, r3
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	461a      	mov	r2, r3
 8004668:	21a5      	movs	r1, #165	@ 0xa5
 800466a:	f001 fe51 	bl	8006310 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004678:	3b01      	subs	r3, #1
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	617b      	str	r3, [r7, #20]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01f      	beq.n	80046f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	e012      	b.n	80046dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	7819      	ldrb	r1, [r3, #0]
 80046be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	4413      	add	r3, r2
 80046c4:	3334      	adds	r3, #52	@ 0x34
 80046c6:	460a      	mov	r2, r1
 80046c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3301      	adds	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d9e9      	bls.n	80046b6 <prvInitialiseNewTask+0x66>
 80046e2:	e000      	b.n	80046e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80046e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ee:	e003      	b.n	80046f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	2b37      	cmp	r3, #55	@ 0x37
 80046fc:	d901      	bls.n	8004702 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046fe:	2337      	movs	r3, #55	@ 0x37
 8004700:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800470c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	2200      	movs	r2, #0
 8004712:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	3304      	adds	r3, #4
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff f965 	bl	80039e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	3318      	adds	r3, #24
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff f960 	bl	80039e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800472c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004730:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004736:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	2200      	movs	r2, #0
 8004742:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	3354      	adds	r3, #84	@ 0x54
 8004752:	224c      	movs	r2, #76	@ 0x4c
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f001 fdda 	bl	8006310 <memset>
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	4a0d      	ldr	r2, [pc, #52]	@ (8004794 <prvInitialiseNewTask+0x144>)
 8004760:	659a      	str	r2, [r3, #88]	@ 0x58
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	4a0c      	ldr	r2, [pc, #48]	@ (8004798 <prvInitialiseNewTask+0x148>)
 8004766:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	4a0c      	ldr	r2, [pc, #48]	@ (800479c <prvInitialiseNewTask+0x14c>)
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	69b8      	ldr	r0, [r7, #24]
 8004774:	f001 f95a 	bl	8005a2c <pxPortInitialiseStack>
 8004778:	4602      	mov	r2, r0
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800477e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800478a:	bf00      	nop
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20004be4 	.word	0x20004be4
 8004798:	20004c4c 	.word	0x20004c4c
 800479c:	20004cb4 	.word	0x20004cb4

080047a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047a8:	f001 fa6e 	bl	8005c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <prvAddNewTaskToReadyList+0xc4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <prvAddNewTaskToReadyList+0xc4>)
 80047b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004868 <prvAddNewTaskToReadyList+0xc8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047be:	4a2a      	ldr	r2, [pc, #168]	@ (8004868 <prvAddNewTaskToReadyList+0xc8>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047c4:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <prvAddNewTaskToReadyList+0xc4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d110      	bne.n	80047ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047cc:	f000 fc2e 	bl	800502c <prvInitialiseTaskLists>
 80047d0:	e00d      	b.n	80047ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047d2:	4b26      	ldr	r3, [pc, #152]	@ (800486c <prvAddNewTaskToReadyList+0xcc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047da:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <prvAddNewTaskToReadyList+0xc8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d802      	bhi.n	80047ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004868 <prvAddNewTaskToReadyList+0xc8>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ee:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <prvAddNewTaskToReadyList+0xd0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004870 <prvAddNewTaskToReadyList+0xd0>)
 80047f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <prvAddNewTaskToReadyList+0xd0>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004804:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <prvAddNewTaskToReadyList+0xd4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d903      	bls.n	8004814 <prvAddNewTaskToReadyList+0x74>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004810:	4a18      	ldr	r2, [pc, #96]	@ (8004874 <prvAddNewTaskToReadyList+0xd4>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a15      	ldr	r2, [pc, #84]	@ (8004878 <prvAddNewTaskToReadyList+0xd8>)
 8004822:	441a      	add	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7ff f8e9 	bl	8003a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004830:	f001 fa5c 	bl	8005cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004834:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <prvAddNewTaskToReadyList+0xcc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <prvAddNewTaskToReadyList+0xc8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	429a      	cmp	r2, r3
 8004848:	d207      	bcs.n	800485a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800484a:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <prvAddNewTaskToReadyList+0xdc>)
 800484c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000e64 	.word	0x20000e64
 8004868:	20000990 	.word	0x20000990
 800486c:	20000e70 	.word	0x20000e70
 8004870:	20000e80 	.word	0x20000e80
 8004874:	20000e6c 	.word	0x20000e6c
 8004878:	20000994 	.word	0x20000994
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d018      	beq.n	80048c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004892:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <vTaskDelay+0x64>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <vTaskDelay+0x32>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60bb      	str	r3, [r7, #8]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048b2:	f000 f88b 	bl	80049cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048b6:	2100      	movs	r1, #0
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fd09 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048be:	f000 f893 	bl	80049e8 <xTaskResumeAll>
 80048c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80048ca:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <vTaskDelay+0x68>)
 80048cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000e8c 	.word	0x20000e8c
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	@ 0x28
 80048f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048fa:	463a      	mov	r2, r7
 80048fc:	1d39      	adds	r1, r7, #4
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	4618      	mov	r0, r3
 8004904:	f7ff f81c 	bl	8003940 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	9202      	str	r2, [sp, #8]
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	460a      	mov	r2, r1
 800491a:	4924      	ldr	r1, [pc, #144]	@ (80049ac <vTaskStartScheduler+0xc0>)
 800491c:	4824      	ldr	r0, [pc, #144]	@ (80049b0 <vTaskStartScheduler+0xc4>)
 800491e:	f7ff fdf1 	bl	8004504 <xTaskCreateStatic>
 8004922:	4603      	mov	r3, r0
 8004924:	4a23      	ldr	r2, [pc, #140]	@ (80049b4 <vTaskStartScheduler+0xc8>)
 8004926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004928:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <vTaskStartScheduler+0xc8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e001      	b.n	800493a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d102      	bne.n	8004946 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004940:	f000 fd1a 	bl	8005378 <xTimerCreateTimerTask>
 8004944:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d11b      	bne.n	8004984 <vTaskStartScheduler+0x98>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	613b      	str	r3, [r7, #16]
}
 800495e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004960:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <vTaskStartScheduler+0xcc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3354      	adds	r3, #84	@ 0x54
 8004966:	4a15      	ldr	r2, [pc, #84]	@ (80049bc <vTaskStartScheduler+0xd0>)
 8004968:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <vTaskStartScheduler+0xd4>)
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004972:	4b14      	ldr	r3, [pc, #80]	@ (80049c4 <vTaskStartScheduler+0xd8>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004978:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <vTaskStartScheduler+0xdc>)
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800497e:	f001 f8df 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004982:	e00f      	b.n	80049a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d10b      	bne.n	80049a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60fb      	str	r3, [r7, #12]
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	e7fd      	b.n	80049a0 <vTaskStartScheduler+0xb4>
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	08006d58 	.word	0x08006d58
 80049b0:	08004ffd 	.word	0x08004ffd
 80049b4:	20000e88 	.word	0x20000e88
 80049b8:	20000990 	.word	0x20000990
 80049bc:	2000005c 	.word	0x2000005c
 80049c0:	20000e84 	.word	0x20000e84
 80049c4:	20000e70 	.word	0x20000e70
 80049c8:	20000e68 	.word	0x20000e68

080049cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <vTaskSuspendAll+0x18>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	4a03      	ldr	r2, [pc, #12]	@ (80049e4 <vTaskSuspendAll+0x18>)
 80049d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	20000e8c 	.word	0x20000e8c

080049e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049f6:	4b42      	ldr	r3, [pc, #264]	@ (8004b00 <xTaskResumeAll+0x118>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <xTaskResumeAll+0x2e>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	603b      	str	r3, [r7, #0]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a16:	f001 f937 	bl	8005c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a1a:	4b39      	ldr	r3, [pc, #228]	@ (8004b00 <xTaskResumeAll+0x118>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	4a37      	ldr	r2, [pc, #220]	@ (8004b00 <xTaskResumeAll+0x118>)
 8004a22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a24:	4b36      	ldr	r3, [pc, #216]	@ (8004b00 <xTaskResumeAll+0x118>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d162      	bne.n	8004af2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a2c:	4b35      	ldr	r3, [pc, #212]	@ (8004b04 <xTaskResumeAll+0x11c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05e      	beq.n	8004af2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a34:	e02f      	b.n	8004a96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a36:	4b34      	ldr	r3, [pc, #208]	@ (8004b08 <xTaskResumeAll+0x120>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3318      	adds	r3, #24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff f83a 	bl	8003abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff f835 	bl	8003abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a56:	4b2d      	ldr	r3, [pc, #180]	@ (8004b0c <xTaskResumeAll+0x124>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d903      	bls.n	8004a66 <xTaskResumeAll+0x7e>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4a2a      	ldr	r2, [pc, #168]	@ (8004b0c <xTaskResumeAll+0x124>)
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a27      	ldr	r2, [pc, #156]	@ (8004b10 <xTaskResumeAll+0x128>)
 8004a74:	441a      	add	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7fe ffc0 	bl	8003a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <xTaskResumeAll+0x12c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004a90:	4b21      	ldr	r3, [pc, #132]	@ (8004b18 <xTaskResumeAll+0x130>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a96:	4b1c      	ldr	r3, [pc, #112]	@ (8004b08 <xTaskResumeAll+0x120>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1cb      	bne.n	8004a36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004aa4:	f000 fb66 	bl	8005174 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b1c <xTaskResumeAll+0x134>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ab4:	f000 f846 	bl	8004b44 <xTaskIncrementTick>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004abe:	4b16      	ldr	r3, [pc, #88]	@ (8004b18 <xTaskResumeAll+0x130>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f1      	bne.n	8004ab4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004ad0:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <xTaskResumeAll+0x134>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ad6:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <xTaskResumeAll+0x130>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <xTaskResumeAll+0x138>)
 8004ae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004af2:	f001 f8fb 	bl	8005cec <vPortExitCritical>

	return xAlreadyYielded;
 8004af6:	68bb      	ldr	r3, [r7, #8]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000e8c 	.word	0x20000e8c
 8004b04:	20000e64 	.word	0x20000e64
 8004b08:	20000e24 	.word	0x20000e24
 8004b0c:	20000e6c 	.word	0x20000e6c
 8004b10:	20000994 	.word	0x20000994
 8004b14:	20000990 	.word	0x20000990
 8004b18:	20000e78 	.word	0x20000e78
 8004b1c:	20000e74 	.word	0x20000e74
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b2a:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <xTaskGetTickCount+0x1c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b30:	687b      	ldr	r3, [r7, #4]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000e68 	.word	0x20000e68

08004b44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c8c <xTaskIncrementTick+0x148>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f040 8090 	bne.w	8004c78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b58:	4b4d      	ldr	r3, [pc, #308]	@ (8004c90 <xTaskIncrementTick+0x14c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b60:	4a4b      	ldr	r2, [pc, #300]	@ (8004c90 <xTaskIncrementTick+0x14c>)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d121      	bne.n	8004bb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b6c:	4b49      	ldr	r3, [pc, #292]	@ (8004c94 <xTaskIncrementTick+0x150>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	603b      	str	r3, [r7, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xTaskIncrementTick+0x46>
 8004b8e:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <xTaskIncrementTick+0x150>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	4b40      	ldr	r3, [pc, #256]	@ (8004c98 <xTaskIncrementTick+0x154>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3e      	ldr	r2, [pc, #248]	@ (8004c94 <xTaskIncrementTick+0x150>)
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c98 <xTaskIncrementTick+0x154>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8004c9c <xTaskIncrementTick+0x158>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8004c9c <xTaskIncrementTick+0x158>)
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	f000 fae2 	bl	8005174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <xTaskIncrementTick+0x15c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d349      	bcc.n	8004c4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bba:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <xTaskIncrementTick+0x150>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc4:	4b36      	ldr	r3, [pc, #216]	@ (8004ca0 <xTaskIncrementTick+0x15c>)
 8004bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bca:	601a      	str	r2, [r3, #0]
					break;
 8004bcc:	e03f      	b.n	8004c4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bce:	4b31      	ldr	r3, [pc, #196]	@ (8004c94 <xTaskIncrementTick+0x150>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d203      	bcs.n	8004bee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004be6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca0 <xTaskIncrementTick+0x15c>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bec:	e02f      	b.n	8004c4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe ff62 	bl	8003abc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	3318      	adds	r3, #24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe ff59 	bl	8003abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0e:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <xTaskIncrementTick+0x160>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d903      	bls.n	8004c1e <xTaskIncrementTick+0xda>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ca4 <xTaskIncrementTick+0x160>)
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <xTaskIncrementTick+0x164>)
 8004c2c:	441a      	add	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fe fee4 	bl	8003a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cac <xTaskIncrementTick+0x168>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d3b8      	bcc.n	8004bba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c4c:	e7b5      	b.n	8004bba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c4e:	4b17      	ldr	r3, [pc, #92]	@ (8004cac <xTaskIncrementTick+0x168>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c54:	4914      	ldr	r1, [pc, #80]	@ (8004ca8 <xTaskIncrementTick+0x164>)
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d901      	bls.n	8004c6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c6a:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <xTaskIncrementTick+0x16c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e004      	b.n	8004c82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c78:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <xTaskIncrementTick+0x170>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb4 <xTaskIncrementTick+0x170>)
 8004c80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c82:	697b      	ldr	r3, [r7, #20]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000e8c 	.word	0x20000e8c
 8004c90:	20000e68 	.word	0x20000e68
 8004c94:	20000e1c 	.word	0x20000e1c
 8004c98:	20000e20 	.word	0x20000e20
 8004c9c:	20000e7c 	.word	0x20000e7c
 8004ca0:	20000e84 	.word	0x20000e84
 8004ca4:	20000e6c 	.word	0x20000e6c
 8004ca8:	20000994 	.word	0x20000994
 8004cac:	20000990 	.word	0x20000990
 8004cb0:	20000e78 	.word	0x20000e78
 8004cb4:	20000e74 	.word	0x20000e74

08004cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8004d6c <vTaskSwitchContext+0xb4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d70 <vTaskSwitchContext+0xb8>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ccc:	e047      	b.n	8004d5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004cce:	4b28      	ldr	r3, [pc, #160]	@ (8004d70 <vTaskSwitchContext+0xb8>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd4:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <vTaskSwitchContext+0xbc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e011      	b.n	8004d00 <vTaskSwitchContext+0x48>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <vTaskSwitchContext+0x42>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <vTaskSwitchContext+0x3e>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	491d      	ldr	r1, [pc, #116]	@ (8004d78 <vTaskSwitchContext+0xc0>)
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0e3      	beq.n	8004cdc <vTaskSwitchContext+0x24>
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4a16      	ldr	r2, [pc, #88]	@ (8004d78 <vTaskSwitchContext+0xc0>)
 8004d20:	4413      	add	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3308      	adds	r3, #8
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d104      	bne.n	8004d44 <vTaskSwitchContext+0x8c>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <vTaskSwitchContext+0xc4>)
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <vTaskSwitchContext+0xbc>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d54:	4b09      	ldr	r3, [pc, #36]	@ (8004d7c <vTaskSwitchContext+0xc4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3354      	adds	r3, #84	@ 0x54
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <vTaskSwitchContext+0xc8>)
 8004d5c:	6013      	str	r3, [r2, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000e8c 	.word	0x20000e8c
 8004d70:	20000e78 	.word	0x20000e78
 8004d74:	20000e6c 	.word	0x20000e6c
 8004d78:	20000994 	.word	0x20000994
 8004d7c:	20000990 	.word	0x20000990
 8004d80:	2000005c 	.word	0x2000005c

08004d84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60fb      	str	r3, [r7, #12]
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <vTaskPlaceOnEventList+0x48>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3318      	adds	r3, #24
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fe fe48 	bl	8003a4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dba:	2101      	movs	r1, #1
 8004dbc:	6838      	ldr	r0, [r7, #0]
 8004dbe:	f000 fa87 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000990 	.word	0x20000990

08004dd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	617b      	str	r3, [r7, #20]
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <vTaskPlaceOnEventListRestricted+0x54>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3318      	adds	r3, #24
 8004e00:	4619      	mov	r1, r3
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7fe fdfd 	bl	8003a02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	68b8      	ldr	r0, [r7, #8]
 8004e18:	f000 fa5a 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
	}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000990 	.word	0x20000990

08004e28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60fb      	str	r3, [r7, #12]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3318      	adds	r3, #24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fe2e 	bl	8003abc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e60:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <xTaskRemoveFromEventList+0xb0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fe25 	bl	8003abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e76:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <xTaskRemoveFromEventList+0xb4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d903      	bls.n	8004e86 <xTaskRemoveFromEventList+0x5e>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <xTaskRemoveFromEventList+0xb4>)
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4a13      	ldr	r2, [pc, #76]	@ (8004ee0 <xTaskRemoveFromEventList+0xb8>)
 8004e94:	441a      	add	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7fe fdb0 	bl	8003a02 <vListInsertEnd>
 8004ea2:	e005      	b.n	8004eb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	3318      	adds	r3, #24
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	480e      	ldr	r0, [pc, #56]	@ (8004ee4 <xTaskRemoveFromEventList+0xbc>)
 8004eac:	f7fe fda9 	bl	8003a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <xTaskRemoveFromEventList+0xc0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d905      	bls.n	8004eca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <xTaskRemoveFromEventList+0xc4>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e001      	b.n	8004ece <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ece:	697b      	ldr	r3, [r7, #20]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000e8c 	.word	0x20000e8c
 8004edc:	20000e6c 	.word	0x20000e6c
 8004ee0:	20000994 	.word	0x20000994
 8004ee4:	20000e24 	.word	0x20000e24
 8004ee8:	20000990 	.word	0x20000990
 8004eec:	20000e78 	.word	0x20000e78

08004ef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <vTaskInternalSetTimeOutState+0x24>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f00:	4b05      	ldr	r3, [pc, #20]	@ (8004f18 <vTaskInternalSetTimeOutState+0x28>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	605a      	str	r2, [r3, #4]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20000e7c 	.word	0x20000e7c
 8004f18:	20000e68 	.word	0x20000e68

08004f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	613b      	str	r3, [r7, #16]
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	e7fd      	b.n	8004f40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60fb      	str	r3, [r7, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004f62:	f000 fe91 	bl	8005c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f66:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <xTaskCheckForTimeOut+0xc0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d102      	bne.n	8004f86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e023      	b.n	8004fce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <xTaskCheckForTimeOut+0xc4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d007      	beq.n	8004fa2 <xTaskCheckForTimeOut+0x86>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	e015      	b.n	8004fce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d20b      	bcs.n	8004fc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff99 	bl	8004ef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e004      	b.n	8004fce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fce:	f000 fe8d 	bl	8005cec <vPortExitCritical>

	return xReturn;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000e68 	.word	0x20000e68
 8004fe0:	20000e7c 	.word	0x20000e7c

08004fe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <vTaskMissedYield+0x14>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000e78 	.word	0x20000e78

08004ffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005004:	f000 f852 	bl	80050ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <prvIdleTask+0x28>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d9f9      	bls.n	8005004 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005010:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <prvIdleTask+0x2c>)
 8005012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005020:	e7f0      	b.n	8005004 <prvIdleTask+0x8>
 8005022:	bf00      	nop
 8005024:	20000994 	.word	0x20000994
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005032:	2300      	movs	r3, #0
 8005034:	607b      	str	r3, [r7, #4]
 8005036:	e00c      	b.n	8005052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4a12      	ldr	r2, [pc, #72]	@ (800508c <prvInitialiseTaskLists+0x60>)
 8005044:	4413      	add	r3, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fcae 	bl	80039a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3301      	adds	r3, #1
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b37      	cmp	r3, #55	@ 0x37
 8005056:	d9ef      	bls.n	8005038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005058:	480d      	ldr	r0, [pc, #52]	@ (8005090 <prvInitialiseTaskLists+0x64>)
 800505a:	f7fe fca5 	bl	80039a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800505e:	480d      	ldr	r0, [pc, #52]	@ (8005094 <prvInitialiseTaskLists+0x68>)
 8005060:	f7fe fca2 	bl	80039a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005064:	480c      	ldr	r0, [pc, #48]	@ (8005098 <prvInitialiseTaskLists+0x6c>)
 8005066:	f7fe fc9f 	bl	80039a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800506a:	480c      	ldr	r0, [pc, #48]	@ (800509c <prvInitialiseTaskLists+0x70>)
 800506c:	f7fe fc9c 	bl	80039a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005070:	480b      	ldr	r0, [pc, #44]	@ (80050a0 <prvInitialiseTaskLists+0x74>)
 8005072:	f7fe fc99 	bl	80039a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <prvInitialiseTaskLists+0x78>)
 8005078:	4a05      	ldr	r2, [pc, #20]	@ (8005090 <prvInitialiseTaskLists+0x64>)
 800507a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800507c:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <prvInitialiseTaskLists+0x7c>)
 800507e:	4a05      	ldr	r2, [pc, #20]	@ (8005094 <prvInitialiseTaskLists+0x68>)
 8005080:	601a      	str	r2, [r3, #0]
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000994 	.word	0x20000994
 8005090:	20000df4 	.word	0x20000df4
 8005094:	20000e08 	.word	0x20000e08
 8005098:	20000e24 	.word	0x20000e24
 800509c:	20000e38 	.word	0x20000e38
 80050a0:	20000e50 	.word	0x20000e50
 80050a4:	20000e1c 	.word	0x20000e1c
 80050a8:	20000e20 	.word	0x20000e20

080050ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050b2:	e019      	b.n	80050e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050b4:	f000 fde8 	bl	8005c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b8:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <prvCheckTasksWaitingTermination+0x50>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe fcf9 	bl	8003abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005100 <prvCheckTasksWaitingTermination+0x54>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005100 <prvCheckTasksWaitingTermination+0x54>)
 80050d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <prvCheckTasksWaitingTermination+0x58>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3b01      	subs	r3, #1
 80050da:	4a0a      	ldr	r2, [pc, #40]	@ (8005104 <prvCheckTasksWaitingTermination+0x58>)
 80050dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050de:	f000 fe05 	bl	8005cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f810 	bl	8005108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <prvCheckTasksWaitingTermination+0x58>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e1      	bne.n	80050b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000e38 	.word	0x20000e38
 8005100:	20000e64 	.word	0x20000e64
 8005104:	20000e4c 	.word	0x20000e4c

08005108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3354      	adds	r3, #84	@ 0x54
 8005114:	4618      	mov	r0, r3
 8005116:	f001 f903 	bl	8006320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005120:	2b00      	cmp	r3, #0
 8005122:	d108      	bne.n	8005136 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	4618      	mov	r0, r3
 800512a:	f000 ff9d 	bl	8006068 <vPortFree>
				vPortFree( pxTCB );
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 ff9a 	bl	8006068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005134:	e019      	b.n	800516a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800513c:	2b01      	cmp	r3, #1
 800513e:	d103      	bne.n	8005148 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 ff91 	bl	8006068 <vPortFree>
	}
 8005146:	e010      	b.n	800516a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800514e:	2b02      	cmp	r3, #2
 8005150:	d00b      	beq.n	800516a <prvDeleteTCB+0x62>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <prvDeleteTCB+0x5e>
	}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800517a:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <prvResetNextTaskUnblockTime+0x38>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005186:	f04f 32ff 	mov.w	r2, #4294967295
 800518a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800518c:	e008      	b.n	80051a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518e:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <prvResetNextTaskUnblockTime+0x38>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a04      	ldr	r2, [pc, #16]	@ (80051b0 <prvResetNextTaskUnblockTime+0x3c>)
 800519e:	6013      	str	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	20000e1c 	.word	0x20000e1c
 80051b0:	20000e84 	.word	0x20000e84

080051b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051ba:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <xTaskGetSchedulerState+0x34>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051c2:	2301      	movs	r3, #1
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	e008      	b.n	80051da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c8:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <xTaskGetSchedulerState+0x38>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051d0:	2302      	movs	r3, #2
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	e001      	b.n	80051da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051da:	687b      	ldr	r3, [r7, #4]
	}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000e70 	.word	0x20000e70
 80051ec:	20000e8c 	.word	0x20000e8c

080051f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d058      	beq.n	80052b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005206:	4b2f      	ldr	r3, [pc, #188]	@ (80052c4 <xTaskPriorityDisinherit+0xd4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	d00b      	beq.n	8005228 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60fb      	str	r3, [r7, #12]
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60bb      	str	r3, [r7, #8]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525a:	429a      	cmp	r2, r3
 800525c:	d02c      	beq.n	80052b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d128      	bne.n	80052b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fc26 	bl	8003abc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005288:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <xTaskPriorityDisinherit+0xd8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d903      	bls.n	8005298 <xTaskPriorityDisinherit+0xa8>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	4a0c      	ldr	r2, [pc, #48]	@ (80052c8 <xTaskPriorityDisinherit+0xd8>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4a09      	ldr	r2, [pc, #36]	@ (80052cc <xTaskPriorityDisinherit+0xdc>)
 80052a6:	441a      	add	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7fe fba7 	bl	8003a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052b8:	697b      	ldr	r3, [r7, #20]
	}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000990 	.word	0x20000990
 80052c8:	20000e6c 	.word	0x20000e6c
 80052cc:	20000994 	.word	0x20000994

080052d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052da:	4b21      	ldr	r3, [pc, #132]	@ (8005360 <prvAddCurrentTaskToDelayedList+0x90>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052e0:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fbe8 	bl	8003abc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d10a      	bne.n	800530a <prvAddCurrentTaskToDelayedList+0x3a>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4819      	ldr	r0, [pc, #100]	@ (8005368 <prvAddCurrentTaskToDelayedList+0x98>)
 8005304:	f7fe fb7d 	bl	8003a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005308:	e026      	b.n	8005358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005312:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	d209      	bcs.n	8005336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005322:	4b12      	ldr	r3, [pc, #72]	@ (800536c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fe fb8b 	bl	8003a4a <vListInsert>
}
 8005334:	e010      	b.n	8005358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005336:	4b0e      	ldr	r3, [pc, #56]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe fb81 	bl	8003a4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005348:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	d202      	bcs.n	8005358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005352:	4a08      	ldr	r2, [pc, #32]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000e68 	.word	0x20000e68
 8005364:	20000990 	.word	0x20000990
 8005368:	20000e50 	.word	0x20000e50
 800536c:	20000e20 	.word	0x20000e20
 8005370:	20000e1c 	.word	0x20000e1c
 8005374:	20000e84 	.word	0x20000e84

08005378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	@ 0x28
 800537c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005382:	f000 fb13 	bl	80059ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005386:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <xTimerCreateTimerTask+0x84>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d021      	beq.n	80053d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005396:	1d3a      	adds	r2, r7, #4
 8005398:	f107 0108 	add.w	r1, r7, #8
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe fae7 	bl	8003974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	9202      	str	r2, [sp, #8]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	2302      	movs	r3, #2
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	460a      	mov	r2, r1
 80053b8:	4911      	ldr	r1, [pc, #68]	@ (8005400 <xTimerCreateTimerTask+0x88>)
 80053ba:	4812      	ldr	r0, [pc, #72]	@ (8005404 <xTimerCreateTimerTask+0x8c>)
 80053bc:	f7ff f8a2 	bl	8004504 <xTaskCreateStatic>
 80053c0:	4603      	mov	r3, r0
 80053c2:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <xTimerCreateTimerTask+0x90>)
 80053c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053c6:	4b10      	ldr	r3, [pc, #64]	@ (8005408 <xTimerCreateTimerTask+0x90>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053f0:	697b      	ldr	r3, [r7, #20]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000ec0 	.word	0x20000ec0
 8005400:	08006d60 	.word	0x08006d60
 8005404:	08005545 	.word	0x08005545
 8005408:	20000ec4 	.word	0x20000ec4

0800540c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	@ 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xTimerGenericCommand+0x30>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	623b      	str	r3, [r7, #32]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800543c:	4b19      	ldr	r3, [pc, #100]	@ (80054a4 <xTimerGenericCommand+0x98>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02a      	beq.n	800549a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b05      	cmp	r3, #5
 8005454:	dc18      	bgt.n	8005488 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005456:	f7ff fead 	bl	80051b4 <xTaskGetSchedulerState>
 800545a:	4603      	mov	r3, r0
 800545c:	2b02      	cmp	r3, #2
 800545e:	d109      	bne.n	8005474 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005460:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <xTimerGenericCommand+0x98>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	f107 0110 	add.w	r1, r7, #16
 8005468:	2300      	movs	r3, #0
 800546a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800546c:	f7fe fc5a 	bl	8003d24 <xQueueGenericSend>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24
 8005472:	e012      	b.n	800549a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005474:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <xTimerGenericCommand+0x98>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	f107 0110 	add.w	r1, r7, #16
 800547c:	2300      	movs	r3, #0
 800547e:	2200      	movs	r2, #0
 8005480:	f7fe fc50 	bl	8003d24 <xQueueGenericSend>
 8005484:	6278      	str	r0, [r7, #36]	@ 0x24
 8005486:	e008      	b.n	800549a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005488:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <xTimerGenericCommand+0x98>)
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	f107 0110 	add.w	r1, r7, #16
 8005490:	2300      	movs	r3, #0
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	f7fe fd48 	bl	8003f28 <xQueueGenericSendFromISR>
 8005498:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800549c:	4618      	mov	r0, r3
 800549e:	3728      	adds	r7, #40	@ 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000ec0 	.word	0x20000ec0

080054a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b2:	4b23      	ldr	r3, [pc, #140]	@ (8005540 <prvProcessExpiredTimer+0x98>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	3304      	adds	r3, #4
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fafb 	bl	8003abc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d023      	beq.n	800551c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	18d1      	adds	r1, r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f000 f8d5 	bl	8005690 <prvInsertTimerInActiveList>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d020      	beq.n	800552e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054ec:	2300      	movs	r3, #0
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	2100      	movs	r1, #0
 80054f6:	6978      	ldr	r0, [r7, #20]
 80054f8:	f7ff ff88 	bl	800540c <xTimerGenericCommand>
 80054fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d114      	bne.n	800552e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	60fb      	str	r3, [r7, #12]
}
 8005516:	bf00      	nop
 8005518:	bf00      	nop
 800551a:	e7fd      	b.n	8005518 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	4798      	blx	r3
}
 8005536:	bf00      	nop
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000eb8 	.word	0x20000eb8

08005544 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f859 	bl	8005608 <prvGetNextExpireTime>
 8005556:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4619      	mov	r1, r3
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f805 	bl	800556c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005562:	f000 f8d7 	bl	8005714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005566:	bf00      	nop
 8005568:	e7f0      	b.n	800554c <prvTimerTask+0x8>
	...

0800556c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005576:	f7ff fa29 	bl	80049cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f866 	bl	8005650 <prvSampleTimeNow>
 8005584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d130      	bne.n	80055ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <prvProcessTimerOrBlockTask+0x3c>
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	429a      	cmp	r2, r3
 8005598:	d806      	bhi.n	80055a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800559a:	f7ff fa25 	bl	80049e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff81 	bl	80054a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055a6:	e024      	b.n	80055f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ae:	4b13      	ldr	r3, [pc, #76]	@ (80055fc <prvProcessTimerOrBlockTask+0x90>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <prvProcessTimerOrBlockTask+0x50>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <prvProcessTimerOrBlockTask+0x52>
 80055bc:	2300      	movs	r3, #0
 80055be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <prvProcessTimerOrBlockTask+0x94>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fe ff65 	bl	800449c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055d2:	f7ff fa09 	bl	80049e8 <xTaskResumeAll>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055dc:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <prvProcessTimerOrBlockTask+0x98>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
}
 80055ec:	e001      	b.n	80055f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055ee:	f7ff f9fb 	bl	80049e8 <xTaskResumeAll>
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000ebc 	.word	0x20000ebc
 8005600:	20000ec0 	.word	0x20000ec0
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005610:	4b0e      	ldr	r3, [pc, #56]	@ (800564c <prvGetNextExpireTime+0x44>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <prvGetNextExpireTime+0x16>
 800561a:	2201      	movs	r2, #1
 800561c:	e000      	b.n	8005620 <prvGetNextExpireTime+0x18>
 800561e:	2200      	movs	r2, #0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d105      	bne.n	8005638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562c:	4b07      	ldr	r3, [pc, #28]	@ (800564c <prvGetNextExpireTime+0x44>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e001      	b.n	800563c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800563c:	68fb      	ldr	r3, [r7, #12]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000eb8 	.word	0x20000eb8

08005650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005658:	f7ff fa64 	bl	8004b24 <xTaskGetTickCount>
 800565c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <prvSampleTimeNow+0x3c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d205      	bcs.n	8005674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005668:	f000 f93a 	bl	80058e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e002      	b.n	800567a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800567a:	4a04      	ldr	r2, [pc, #16]	@ (800568c <prvSampleTimeNow+0x3c>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000ec8 	.word	0x20000ec8

08005690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d812      	bhi.n	80056dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e01b      	b.n	8005702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056ca:	4b10      	ldr	r3, [pc, #64]	@ (800570c <prvInsertTimerInActiveList+0x7c>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fe f9b8 	bl	8003a4a <vListInsert>
 80056da:	e012      	b.n	8005702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d206      	bcs.n	80056f2 <prvInsertTimerInActiveList+0x62>
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e007      	b.n	8005702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056f2:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <prvInsertTimerInActiveList+0x80>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe f9a4 	bl	8003a4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000ebc 	.word	0x20000ebc
 8005710:	20000eb8 	.word	0x20000eb8

08005714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08e      	sub	sp, #56	@ 0x38
 8005718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800571a:	e0ce      	b.n	80058ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	da19      	bge.n	8005756 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	3304      	adds	r3, #4
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	61fb      	str	r3, [r7, #28]
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	e7fd      	b.n	8005742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574c:	6850      	ldr	r0, [r2, #4]
 800574e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005750:	6892      	ldr	r2, [r2, #8]
 8005752:	4611      	mov	r1, r2
 8005754:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f2c0 80ae 	blt.w	80058ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe f9a4 	bl	8003abc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005774:	463b      	mov	r3, r7
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff6a 	bl	8005650 <prvSampleTimeNow>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b09      	cmp	r3, #9
 8005782:	f200 8097 	bhi.w	80058b4 <prvProcessReceivedCommands+0x1a0>
 8005786:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <prvProcessReceivedCommands+0x78>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057b5 	.word	0x080057b5
 8005798:	0800582b 	.word	0x0800582b
 800579c:	0800583f 	.word	0x0800583f
 80057a0:	0800588b 	.word	0x0800588b
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057b5 	.word	0x080057b5
 80057ac:	0800582b 	.word	0x0800582b
 80057b0:	0800583f 	.word	0x0800583f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	18d1      	adds	r1, r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057d4:	f7ff ff5c 	bl	8005690 <prvInsertTimerInActiveList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d06c      	beq.n	80058b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d061      	beq.n	80058b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	441a      	add	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	2300      	movs	r3, #0
 8005802:	2100      	movs	r1, #0
 8005804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005806:	f7ff fe01 	bl	800540c <xTimerGenericCommand>
 800580a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d152      	bne.n	80058b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	61bb      	str	r3, [r7, #24]
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	e7fd      	b.n	8005826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	b2da      	uxtb	r2, r3
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800583c:	e03d      	b.n	80058ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	617b      	str	r3, [r7, #20]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	18d1      	adds	r1, r2, r3
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005884:	f7ff ff04 	bl	8005690 <prvInsertTimerInActiveList>
					break;
 8005888:	e017      	b.n	80058ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800589a:	f000 fbe5 	bl	8006068 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800589e:	e00c      	b.n	80058ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058b2:	e002      	b.n	80058ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80058b4:	bf00      	nop
 80058b6:	e000      	b.n	80058ba <prvProcessReceivedCommands+0x1a6>
					break;
 80058b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ba:	4b08      	ldr	r3, [pc, #32]	@ (80058dc <prvProcessReceivedCommands+0x1c8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	1d39      	adds	r1, r7, #4
 80058c0:	2200      	movs	r2, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fbce 	bl	8004064 <xQueueReceive>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f47f af26 	bne.w	800571c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	3730      	adds	r7, #48	@ 0x30
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000ec0 	.word	0x20000ec0

080058e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058e6:	e049      	b.n	800597c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e8:	4b2e      	ldr	r3, [pc, #184]	@ (80059a4 <prvSwitchTimerLists+0xc4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f2:	4b2c      	ldr	r3, [pc, #176]	@ (80059a4 <prvSwitchTimerLists+0xc4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3304      	adds	r3, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe f8db 	bl	8003abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02f      	beq.n	800597c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4413      	add	r3, r2
 8005924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90e      	bls.n	800594c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800593a:	4b1a      	ldr	r3, [pc, #104]	@ (80059a4 <prvSwitchTimerLists+0xc4>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7fe f880 	bl	8003a4a <vListInsert>
 800594a:	e017      	b.n	800597c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800594c:	2300      	movs	r3, #0
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2300      	movs	r3, #0
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	2100      	movs	r1, #0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff fd58 	bl	800540c <xTimerGenericCommand>
 800595c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	603b      	str	r3, [r7, #0]
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800597c:	4b09      	ldr	r3, [pc, #36]	@ (80059a4 <prvSwitchTimerLists+0xc4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1b0      	bne.n	80058e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005986:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <prvSwitchTimerLists+0xc4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <prvSwitchTimerLists+0xc8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a04      	ldr	r2, [pc, #16]	@ (80059a4 <prvSwitchTimerLists+0xc4>)
 8005992:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005994:	4a04      	ldr	r2, [pc, #16]	@ (80059a8 <prvSwitchTimerLists+0xc8>)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	6013      	str	r3, [r2, #0]
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000eb8 	.word	0x20000eb8
 80059a8:	20000ebc 	.word	0x20000ebc

080059ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059b2:	f000 f969 	bl	8005c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059b6:	4b15      	ldr	r3, [pc, #84]	@ (8005a0c <prvCheckForValidListAndQueue+0x60>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d120      	bne.n	8005a00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059be:	4814      	ldr	r0, [pc, #80]	@ (8005a10 <prvCheckForValidListAndQueue+0x64>)
 80059c0:	f7fd fff2 	bl	80039a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059c4:	4813      	ldr	r0, [pc, #76]	@ (8005a14 <prvCheckForValidListAndQueue+0x68>)
 80059c6:	f7fd ffef 	bl	80039a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059ca:	4b13      	ldr	r3, [pc, #76]	@ (8005a18 <prvCheckForValidListAndQueue+0x6c>)
 80059cc:	4a10      	ldr	r2, [pc, #64]	@ (8005a10 <prvCheckForValidListAndQueue+0x64>)
 80059ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059d0:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <prvCheckForValidListAndQueue+0x70>)
 80059d2:	4a10      	ldr	r2, [pc, #64]	@ (8005a14 <prvCheckForValidListAndQueue+0x68>)
 80059d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059d6:	2300      	movs	r3, #0
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4b11      	ldr	r3, [pc, #68]	@ (8005a20 <prvCheckForValidListAndQueue+0x74>)
 80059dc:	4a11      	ldr	r2, [pc, #68]	@ (8005a24 <prvCheckForValidListAndQueue+0x78>)
 80059de:	2110      	movs	r1, #16
 80059e0:	200a      	movs	r0, #10
 80059e2:	f7fe f8ff 	bl	8003be4 <xQueueGenericCreateStatic>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4a08      	ldr	r2, [pc, #32]	@ (8005a0c <prvCheckForValidListAndQueue+0x60>)
 80059ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059ec:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <prvCheckForValidListAndQueue+0x60>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059f4:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <prvCheckForValidListAndQueue+0x60>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	490b      	ldr	r1, [pc, #44]	@ (8005a28 <prvCheckForValidListAndQueue+0x7c>)
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fd24 	bl	8004448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a00:	f000 f974 	bl	8005cec <vPortExitCritical>
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000ec0 	.word	0x20000ec0
 8005a10:	20000e90 	.word	0x20000e90
 8005a14:	20000ea4 	.word	0x20000ea4
 8005a18:	20000eb8 	.word	0x20000eb8
 8005a1c:	20000ebc 	.word	0x20000ebc
 8005a20:	20000f6c 	.word	0x20000f6c
 8005a24:	20000ecc 	.word	0x20000ecc
 8005a28:	08006d68 	.word	0x08006d68

08005a2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b04      	subs	r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a90 <pxPortInitialiseStack+0x64>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3b14      	subs	r3, #20
 8005a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b04      	subs	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f06f 0202 	mvn.w	r2, #2
 8005a7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3b20      	subs	r3, #32
 8005a80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	08005a95 	.word	0x08005a95

08005a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9e:	4b13      	ldr	r3, [pc, #76]	@ (8005aec <prvTaskExitError+0x58>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d00b      	beq.n	8005ac0 <prvTaskExitError+0x2c>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <prvTaskExitError+0x28>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60bb      	str	r3, [r7, #8]
}
 8005ad2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ad4:	bf00      	nop
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0fc      	beq.n	8005ad6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000058 	.word	0x20000058

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	@ (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	@ (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b47      	ldr	r3, [pc, #284]	@ (8005c64 <xPortStartScheduler+0x124>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a47      	ldr	r2, [pc, #284]	@ (8005c68 <xPortStartScheduler+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10b      	bne.n	8005b68 <xPortStartScheduler+0x28>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b68:	4b3e      	ldr	r3, [pc, #248]	@ (8005c64 <xPortStartScheduler+0x124>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c6c <xPortStartScheduler+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10b      	bne.n	8005b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b8a:	4b39      	ldr	r3, [pc, #228]	@ (8005c70 <xPortStartScheduler+0x130>)
 8005b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	22ff      	movs	r2, #255	@ 0xff
 8005b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	4b31      	ldr	r3, [pc, #196]	@ (8005c74 <xPortStartScheduler+0x134>)
 8005bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bb2:	4b31      	ldr	r3, [pc, #196]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb8:	e009      	b.n	8005bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005bba:	4b2f      	ldr	r3, [pc, #188]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd6:	2b80      	cmp	r3, #128	@ 0x80
 8005bd8:	d0ef      	beq.n	8005bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bda:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1c3 0307 	rsb	r3, r3, #7
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d00b      	beq.n	8005bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c08:	4b1b      	ldr	r3, [pc, #108]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c10:	4a19      	ldr	r2, [pc, #100]	@ (8005c78 <xPortStartScheduler+0x138>)
 8005c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c1c:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c28:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a13      	ldr	r2, [pc, #76]	@ (8005c7c <xPortStartScheduler+0x13c>)
 8005c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c34:	f000 f8da 	bl	8005dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c38:	4b11      	ldr	r3, [pc, #68]	@ (8005c80 <xPortStartScheduler+0x140>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c3e:	f000 f8f9 	bl	8005e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c42:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <xPortStartScheduler+0x144>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a0f      	ldr	r2, [pc, #60]	@ (8005c84 <xPortStartScheduler+0x144>)
 8005c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c4e:	f7ff ff63 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c52:	f7ff f831 	bl	8004cb8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c56:	f7ff ff1d 	bl	8005a94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	e000ed00 	.word	0xe000ed00
 8005c68:	410fc271 	.word	0x410fc271
 8005c6c:	410fc270 	.word	0x410fc270
 8005c70:	e000e400 	.word	0xe000e400
 8005c74:	20000fbc 	.word	0x20000fbc
 8005c78:	20000fc0 	.word	0x20000fc0
 8005c7c:	e000ed20 	.word	0xe000ed20
 8005c80:	20000058 	.word	0x20000058
 8005c84:	e000ef34 	.word	0xe000ef34

08005c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <vPortEnterCritical+0x5c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ce4 <vPortEnterCritical+0x5c>)
 8005caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <vPortEnterCritical+0x5c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d110      	bne.n	8005cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <vPortEnterCritical+0x60>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	603b      	str	r3, [r7, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	e7fd      	b.n	8005cd2 <vPortEnterCritical+0x4a>
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	20000058 	.word	0x20000058
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cf2:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <vPortExitCritical+0x26>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	607b      	str	r3, [r7, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d12:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d1c:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <vPortExitCritical+0x44>
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f383 8811 	msr	BASEPRI, r3
}
 8005d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000058 	.word	0x20000058

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f01e 0f10 	tst.w	lr, #16
 8005d50:	bf08      	it	eq
 8005d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6010      	str	r0, [r2, #0]
 8005d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d64:	f380 8811 	msr	BASEPRI, r0
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f7fe ffa2 	bl	8004cb8 <vTaskSwitchContext>
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f380 8811 	msr	BASEPRI, r0
 8005d7c:	bc09      	pop	{r0, r3}
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d86:	f01e 0f10 	tst.w	lr, #16
 8005d8a:	bf08      	it	eq
 8005d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d90:	f380 8809 	msr	PSP, r0
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst>:
 8005da0:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc2:	f7fe febf 	bl	8004b44 <xTaskIncrementTick>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <xPortSysTickHandler+0x40>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e24 <vPortSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <vPortSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <vPortSetupTimerInterrupt+0x40>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	4a09      	ldr	r2, [pc, #36]	@ (8005e30 <vPortSetupTimerInterrupt+0x44>)
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e0e:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <vPortSetupTimerInterrupt+0x34>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	2000004c 	.word	0x2000004c
 8005e2c:	10624dd3 	.word	0x10624dd3
 8005e30:	e000e014 	.word	0xe000e014

08005e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e44 <vPortEnableVFP+0x10>
 8005e38:	6801      	ldr	r1, [r0, #0]
 8005e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e3e:	6001      	str	r1, [r0, #0]
 8005e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e42:	bf00      	nop
 8005e44:	e000ed88 	.word	0xe000ed88

08005e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
 8005e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d915      	bls.n	8005e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <vPortValidateInterruptPriority+0x74>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e64:	4b16      	ldr	r3, [pc, #88]	@ (8005ec0 <vPortValidateInterruptPriority+0x78>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	7afa      	ldrb	r2, [r7, #11]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d20b      	bcs.n	8005e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	607b      	str	r3, [r7, #4]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <vPortValidateInterruptPriority+0x7c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <vPortValidateInterruptPriority+0x80>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d90b      	bls.n	8005eae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	603b      	str	r3, [r7, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	e7fd      	b.n	8005eaa <vPortValidateInterruptPriority+0x62>
	}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000e3f0 	.word	0xe000e3f0
 8005ec0:	20000fbc 	.word	0x20000fbc
 8005ec4:	e000ed0c 	.word	0xe000ed0c
 8005ec8:	20000fc0 	.word	0x20000fc0

08005ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ed8:	f7fe fd78 	bl	80049cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005edc:	4b5c      	ldr	r3, [pc, #368]	@ (8006050 <pvPortMalloc+0x184>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ee4:	f000 f924 	bl	8006130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8006054 <pvPortMalloc+0x188>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f040 8095 	bne.w	8006020 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01e      	beq.n	8005f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005efc:	2208      	movs	r2, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d015      	beq.n	8005f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f023 0307 	bic.w	r3, r3, #7
 8005f14:	3308      	adds	r3, #8
 8005f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <pvPortMalloc+0x6e>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	617b      	str	r3, [r7, #20]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d06f      	beq.n	8006020 <pvPortMalloc+0x154>
 8005f40:	4b45      	ldr	r3, [pc, #276]	@ (8006058 <pvPortMalloc+0x18c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d86a      	bhi.n	8006020 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f4a:	4b44      	ldr	r3, [pc, #272]	@ (800605c <pvPortMalloc+0x190>)
 8005f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f4e:	4b43      	ldr	r3, [pc, #268]	@ (800605c <pvPortMalloc+0x190>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f54:	e004      	b.n	8005f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d903      	bls.n	8005f72 <pvPortMalloc+0xa6>
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f1      	bne.n	8005f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f72:	4b37      	ldr	r3, [pc, #220]	@ (8006050 <pvPortMalloc+0x184>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d051      	beq.n	8006020 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2208      	movs	r2, #8
 8005f82:	4413      	add	r3, r2
 8005f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	1ad2      	subs	r2, r2, r3
 8005f96:	2308      	movs	r3, #8
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d920      	bls.n	8005fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <pvPortMalloc+0xfc>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	613b      	str	r3, [r7, #16]
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fda:	69b8      	ldr	r0, [r7, #24]
 8005fdc:	f000 f90a 	bl	80061f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8006058 <pvPortMalloc+0x18c>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	4a1b      	ldr	r2, [pc, #108]	@ (8006058 <pvPortMalloc+0x18c>)
 8005fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fee:	4b1a      	ldr	r3, [pc, #104]	@ (8006058 <pvPortMalloc+0x18c>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8006060 <pvPortMalloc+0x194>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d203      	bcs.n	8006002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ffa:	4b17      	ldr	r3, [pc, #92]	@ (8006058 <pvPortMalloc+0x18c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <pvPortMalloc+0x194>)
 8006000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <pvPortMalloc+0x188>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	431a      	orrs	r2, r3
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006016:	4b13      	ldr	r3, [pc, #76]	@ (8006064 <pvPortMalloc+0x198>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	4a11      	ldr	r2, [pc, #68]	@ (8006064 <pvPortMalloc+0x198>)
 800601e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006020:	f7fe fce2 	bl	80049e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <pvPortMalloc+0x17a>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <pvPortMalloc+0x176>
	return pvReturn;
 8006046:	69fb      	ldr	r3, [r7, #28]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3728      	adds	r7, #40	@ 0x28
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20004bcc 	.word	0x20004bcc
 8006054:	20004be0 	.word	0x20004be0
 8006058:	20004bd0 	.word	0x20004bd0
 800605c:	20004bc4 	.word	0x20004bc4
 8006060:	20004bd4 	.word	0x20004bd4
 8006064:	20004bd8 	.word	0x20004bd8

08006068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04f      	beq.n	800611a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800607a:	2308      	movs	r3, #8
 800607c:	425b      	negs	r3, r3
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <vPortFree+0xbc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <vPortFree+0x46>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60fb      	str	r3, [r7, #12]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <vPortFree+0x66>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <vPortFree+0xbc>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01e      	beq.n	800611a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d11a      	bne.n	800611a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <vPortFree+0xbc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	401a      	ands	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060f4:	f7fe fc6a 	bl	80049cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <vPortFree+0xc0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4413      	add	r3, r2
 8006102:	4a09      	ldr	r2, [pc, #36]	@ (8006128 <vPortFree+0xc0>)
 8006104:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006106:	6938      	ldr	r0, [r7, #16]
 8006108:	f000 f874 	bl	80061f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800610c:	4b07      	ldr	r3, [pc, #28]	@ (800612c <vPortFree+0xc4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a06      	ldr	r2, [pc, #24]	@ (800612c <vPortFree+0xc4>)
 8006114:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006116:	f7fe fc67 	bl	80049e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20004be0 	.word	0x20004be0
 8006128:	20004bd0 	.word	0x20004bd0
 800612c:	20004bdc 	.word	0x20004bdc

08006130 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006136:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800613a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800613c:	4b27      	ldr	r3, [pc, #156]	@ (80061dc <prvHeapInit+0xac>)
 800613e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3307      	adds	r3, #7
 800614e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0307 	bic.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	4a1f      	ldr	r2, [pc, #124]	@ (80061dc <prvHeapInit+0xac>)
 8006160:	4413      	add	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006168:	4a1d      	ldr	r2, [pc, #116]	@ (80061e0 <prvHeapInit+0xb0>)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800616e:	4b1c      	ldr	r3, [pc, #112]	@ (80061e0 <prvHeapInit+0xb0>)
 8006170:	2200      	movs	r2, #0
 8006172:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4413      	add	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800617c:	2208      	movs	r2, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0307 	bic.w	r3, r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <prvHeapInit+0xb4>)
 8006190:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006192:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <prvHeapInit+0xb4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <prvHeapInit+0xb4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061b0:	4b0c      	ldr	r3, [pc, #48]	@ (80061e4 <prvHeapInit+0xb4>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4a0a      	ldr	r2, [pc, #40]	@ (80061e8 <prvHeapInit+0xb8>)
 80061be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4a09      	ldr	r2, [pc, #36]	@ (80061ec <prvHeapInit+0xbc>)
 80061c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061c8:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <prvHeapInit+0xc0>)
 80061ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061ce:	601a      	str	r2, [r3, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	20000fc4 	.word	0x20000fc4
 80061e0:	20004bc4 	.word	0x20004bc4
 80061e4:	20004bcc 	.word	0x20004bcc
 80061e8:	20004bd4 	.word	0x20004bd4
 80061ec:	20004bd0 	.word	0x20004bd0
 80061f0:	20004be0 	.word	0x20004be0

080061f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061fc:	4b28      	ldr	r3, [pc, #160]	@ (80062a0 <prvInsertBlockIntoFreeList+0xac>)
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e002      	b.n	8006208 <prvInsertBlockIntoFreeList+0x14>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d8f7      	bhi.n	8006202 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d108      	bne.n	8006236 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d118      	bne.n	800627c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b15      	ldr	r3, [pc, #84]	@ (80062a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d00d      	beq.n	8006272 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e008      	b.n	8006284 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006272:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e003      	b.n	8006284 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d002      	beq.n	8006292 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20004bc4 	.word	0x20004bc4
 80062a4:	20004bcc 	.word	0x20004bcc

080062a8 <sniprintf>:
 80062a8:	b40c      	push	{r2, r3}
 80062aa:	b530      	push	{r4, r5, lr}
 80062ac:	4b17      	ldr	r3, [pc, #92]	@ (800630c <sniprintf+0x64>)
 80062ae:	1e0c      	subs	r4, r1, #0
 80062b0:	681d      	ldr	r5, [r3, #0]
 80062b2:	b09d      	sub	sp, #116	@ 0x74
 80062b4:	da08      	bge.n	80062c8 <sniprintf+0x20>
 80062b6:	238b      	movs	r3, #139	@ 0x8b
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	f04f 30ff 	mov.w	r0, #4294967295
 80062be:	b01d      	add	sp, #116	@ 0x74
 80062c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062c4:	b002      	add	sp, #8
 80062c6:	4770      	bx	lr
 80062c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80062cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062d0:	bf14      	ite	ne
 80062d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062d6:	4623      	moveq	r3, r4
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	9307      	str	r3, [sp, #28]
 80062dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062e0:	9002      	str	r0, [sp, #8]
 80062e2:	9006      	str	r0, [sp, #24]
 80062e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062ea:	ab21      	add	r3, sp, #132	@ 0x84
 80062ec:	a902      	add	r1, sp, #8
 80062ee:	4628      	mov	r0, r5
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	f000 f9f9 	bl	80066e8 <_svfiprintf_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	bfbc      	itt	lt
 80062fa:	238b      	movlt	r3, #139	@ 0x8b
 80062fc:	602b      	strlt	r3, [r5, #0]
 80062fe:	2c00      	cmp	r4, #0
 8006300:	d0dd      	beq.n	80062be <sniprintf+0x16>
 8006302:	9b02      	ldr	r3, [sp, #8]
 8006304:	2200      	movs	r2, #0
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	e7d9      	b.n	80062be <sniprintf+0x16>
 800630a:	bf00      	nop
 800630c:	2000005c 	.word	0x2000005c

08006310 <memset>:
 8006310:	4402      	add	r2, r0
 8006312:	4603      	mov	r3, r0
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	f803 1b01 	strb.w	r1, [r3], #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <_reclaim_reent>:
 8006320:	4b29      	ldr	r3, [pc, #164]	@ (80063c8 <_reclaim_reent+0xa8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4283      	cmp	r3, r0
 8006326:	b570      	push	{r4, r5, r6, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	d04b      	beq.n	80063c4 <_reclaim_reent+0xa4>
 800632c:	69c3      	ldr	r3, [r0, #28]
 800632e:	b1ab      	cbz	r3, 800635c <_reclaim_reent+0x3c>
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	b16b      	cbz	r3, 8006350 <_reclaim_reent+0x30>
 8006334:	2500      	movs	r5, #0
 8006336:	69e3      	ldr	r3, [r4, #28]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	5959      	ldr	r1, [r3, r5]
 800633c:	2900      	cmp	r1, #0
 800633e:	d13b      	bne.n	80063b8 <_reclaim_reent+0x98>
 8006340:	3504      	adds	r5, #4
 8006342:	2d80      	cmp	r5, #128	@ 0x80
 8006344:	d1f7      	bne.n	8006336 <_reclaim_reent+0x16>
 8006346:	69e3      	ldr	r3, [r4, #28]
 8006348:	4620      	mov	r0, r4
 800634a:	68d9      	ldr	r1, [r3, #12]
 800634c:	f000 f878 	bl	8006440 <_free_r>
 8006350:	69e3      	ldr	r3, [r4, #28]
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	b111      	cbz	r1, 800635c <_reclaim_reent+0x3c>
 8006356:	4620      	mov	r0, r4
 8006358:	f000 f872 	bl	8006440 <_free_r>
 800635c:	6961      	ldr	r1, [r4, #20]
 800635e:	b111      	cbz	r1, 8006366 <_reclaim_reent+0x46>
 8006360:	4620      	mov	r0, r4
 8006362:	f000 f86d 	bl	8006440 <_free_r>
 8006366:	69e1      	ldr	r1, [r4, #28]
 8006368:	b111      	cbz	r1, 8006370 <_reclaim_reent+0x50>
 800636a:	4620      	mov	r0, r4
 800636c:	f000 f868 	bl	8006440 <_free_r>
 8006370:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006372:	b111      	cbz	r1, 800637a <_reclaim_reent+0x5a>
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f863 	bl	8006440 <_free_r>
 800637a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800637c:	b111      	cbz	r1, 8006384 <_reclaim_reent+0x64>
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f85e 	bl	8006440 <_free_r>
 8006384:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006386:	b111      	cbz	r1, 800638e <_reclaim_reent+0x6e>
 8006388:	4620      	mov	r0, r4
 800638a:	f000 f859 	bl	8006440 <_free_r>
 800638e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006390:	b111      	cbz	r1, 8006398 <_reclaim_reent+0x78>
 8006392:	4620      	mov	r0, r4
 8006394:	f000 f854 	bl	8006440 <_free_r>
 8006398:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800639a:	b111      	cbz	r1, 80063a2 <_reclaim_reent+0x82>
 800639c:	4620      	mov	r0, r4
 800639e:	f000 f84f 	bl	8006440 <_free_r>
 80063a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80063a4:	b111      	cbz	r1, 80063ac <_reclaim_reent+0x8c>
 80063a6:	4620      	mov	r0, r4
 80063a8:	f000 f84a 	bl	8006440 <_free_r>
 80063ac:	6a23      	ldr	r3, [r4, #32]
 80063ae:	b14b      	cbz	r3, 80063c4 <_reclaim_reent+0xa4>
 80063b0:	4620      	mov	r0, r4
 80063b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063b6:	4718      	bx	r3
 80063b8:	680e      	ldr	r6, [r1, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 f840 	bl	8006440 <_free_r>
 80063c0:	4631      	mov	r1, r6
 80063c2:	e7bb      	b.n	800633c <_reclaim_reent+0x1c>
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	bf00      	nop
 80063c8:	2000005c 	.word	0x2000005c

080063cc <__errno>:
 80063cc:	4b01      	ldr	r3, [pc, #4]	@ (80063d4 <__errno+0x8>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000005c 	.word	0x2000005c

080063d8 <__libc_init_array>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4d0d      	ldr	r5, [pc, #52]	@ (8006410 <__libc_init_array+0x38>)
 80063dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006414 <__libc_init_array+0x3c>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	2600      	movs	r6, #0
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d109      	bne.n	80063fc <__libc_init_array+0x24>
 80063e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006418 <__libc_init_array+0x40>)
 80063ea:	4c0c      	ldr	r4, [pc, #48]	@ (800641c <__libc_init_array+0x44>)
 80063ec:	f000 fc66 	bl	8006cbc <_init>
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	2600      	movs	r6, #0
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	d105      	bne.n	8006406 <__libc_init_array+0x2e>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006400:	4798      	blx	r3
 8006402:	3601      	adds	r6, #1
 8006404:	e7ee      	b.n	80063e4 <__libc_init_array+0xc>
 8006406:	f855 3b04 	ldr.w	r3, [r5], #4
 800640a:	4798      	blx	r3
 800640c:	3601      	adds	r6, #1
 800640e:	e7f2      	b.n	80063f6 <__libc_init_array+0x1e>
 8006410:	08006e0c 	.word	0x08006e0c
 8006414:	08006e0c 	.word	0x08006e0c
 8006418:	08006e0c 	.word	0x08006e0c
 800641c:	08006e10 	.word	0x08006e10

08006420 <__retarget_lock_acquire_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_release_recursive>:
 8006422:	4770      	bx	lr

08006424 <memcpy>:
 8006424:	440a      	add	r2, r1
 8006426:	4291      	cmp	r1, r2
 8006428:	f100 33ff 	add.w	r3, r0, #4294967295
 800642c:	d100      	bne.n	8006430 <memcpy+0xc>
 800642e:	4770      	bx	lr
 8006430:	b510      	push	{r4, lr}
 8006432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800643a:	4291      	cmp	r1, r2
 800643c:	d1f9      	bne.n	8006432 <memcpy+0xe>
 800643e:	bd10      	pop	{r4, pc}

08006440 <_free_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4605      	mov	r5, r0
 8006444:	2900      	cmp	r1, #0
 8006446:	d041      	beq.n	80064cc <_free_r+0x8c>
 8006448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644c:	1f0c      	subs	r4, r1, #4
 800644e:	2b00      	cmp	r3, #0
 8006450:	bfb8      	it	lt
 8006452:	18e4      	addlt	r4, r4, r3
 8006454:	f000 f8e0 	bl	8006618 <__malloc_lock>
 8006458:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <_free_r+0x90>)
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	b933      	cbnz	r3, 800646c <_free_r+0x2c>
 800645e:	6063      	str	r3, [r4, #4]
 8006460:	6014      	str	r4, [r2, #0]
 8006462:	4628      	mov	r0, r5
 8006464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006468:	f000 b8dc 	b.w	8006624 <__malloc_unlock>
 800646c:	42a3      	cmp	r3, r4
 800646e:	d908      	bls.n	8006482 <_free_r+0x42>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	1821      	adds	r1, r4, r0
 8006474:	428b      	cmp	r3, r1
 8006476:	bf01      	itttt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	1809      	addeq	r1, r1, r0
 800647e:	6021      	streq	r1, [r4, #0]
 8006480:	e7ed      	b.n	800645e <_free_r+0x1e>
 8006482:	461a      	mov	r2, r3
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	b10b      	cbz	r3, 800648c <_free_r+0x4c>
 8006488:	42a3      	cmp	r3, r4
 800648a:	d9fa      	bls.n	8006482 <_free_r+0x42>
 800648c:	6811      	ldr	r1, [r2, #0]
 800648e:	1850      	adds	r0, r2, r1
 8006490:	42a0      	cmp	r0, r4
 8006492:	d10b      	bne.n	80064ac <_free_r+0x6c>
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	4401      	add	r1, r0
 8006498:	1850      	adds	r0, r2, r1
 800649a:	4283      	cmp	r3, r0
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	d1e0      	bne.n	8006462 <_free_r+0x22>
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	6053      	str	r3, [r2, #4]
 80064a6:	4408      	add	r0, r1
 80064a8:	6010      	str	r0, [r2, #0]
 80064aa:	e7da      	b.n	8006462 <_free_r+0x22>
 80064ac:	d902      	bls.n	80064b4 <_free_r+0x74>
 80064ae:	230c      	movs	r3, #12
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	e7d6      	b.n	8006462 <_free_r+0x22>
 80064b4:	6820      	ldr	r0, [r4, #0]
 80064b6:	1821      	adds	r1, r4, r0
 80064b8:	428b      	cmp	r3, r1
 80064ba:	bf04      	itt	eq
 80064bc:	6819      	ldreq	r1, [r3, #0]
 80064be:	685b      	ldreq	r3, [r3, #4]
 80064c0:	6063      	str	r3, [r4, #4]
 80064c2:	bf04      	itt	eq
 80064c4:	1809      	addeq	r1, r1, r0
 80064c6:	6021      	streq	r1, [r4, #0]
 80064c8:	6054      	str	r4, [r2, #4]
 80064ca:	e7ca      	b.n	8006462 <_free_r+0x22>
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	20004d28 	.word	0x20004d28

080064d4 <sbrk_aligned>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006514 <sbrk_aligned+0x40>)
 80064d8:	460c      	mov	r4, r1
 80064da:	6831      	ldr	r1, [r6, #0]
 80064dc:	4605      	mov	r5, r0
 80064de:	b911      	cbnz	r1, 80064e6 <sbrk_aligned+0x12>
 80064e0:	f000 fba6 	bl	8006c30 <_sbrk_r>
 80064e4:	6030      	str	r0, [r6, #0]
 80064e6:	4621      	mov	r1, r4
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 fba1 	bl	8006c30 <_sbrk_r>
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	d103      	bne.n	80064fa <sbrk_aligned+0x26>
 80064f2:	f04f 34ff 	mov.w	r4, #4294967295
 80064f6:	4620      	mov	r0, r4
 80064f8:	bd70      	pop	{r4, r5, r6, pc}
 80064fa:	1cc4      	adds	r4, r0, #3
 80064fc:	f024 0403 	bic.w	r4, r4, #3
 8006500:	42a0      	cmp	r0, r4
 8006502:	d0f8      	beq.n	80064f6 <sbrk_aligned+0x22>
 8006504:	1a21      	subs	r1, r4, r0
 8006506:	4628      	mov	r0, r5
 8006508:	f000 fb92 	bl	8006c30 <_sbrk_r>
 800650c:	3001      	adds	r0, #1
 800650e:	d1f2      	bne.n	80064f6 <sbrk_aligned+0x22>
 8006510:	e7ef      	b.n	80064f2 <sbrk_aligned+0x1e>
 8006512:	bf00      	nop
 8006514:	20004d24 	.word	0x20004d24

08006518 <_malloc_r>:
 8006518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800651c:	1ccd      	adds	r5, r1, #3
 800651e:	f025 0503 	bic.w	r5, r5, #3
 8006522:	3508      	adds	r5, #8
 8006524:	2d0c      	cmp	r5, #12
 8006526:	bf38      	it	cc
 8006528:	250c      	movcc	r5, #12
 800652a:	2d00      	cmp	r5, #0
 800652c:	4606      	mov	r6, r0
 800652e:	db01      	blt.n	8006534 <_malloc_r+0x1c>
 8006530:	42a9      	cmp	r1, r5
 8006532:	d904      	bls.n	800653e <_malloc_r+0x26>
 8006534:	230c      	movs	r3, #12
 8006536:	6033      	str	r3, [r6, #0]
 8006538:	2000      	movs	r0, #0
 800653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006614 <_malloc_r+0xfc>
 8006542:	f000 f869 	bl	8006618 <__malloc_lock>
 8006546:	f8d8 3000 	ldr.w	r3, [r8]
 800654a:	461c      	mov	r4, r3
 800654c:	bb44      	cbnz	r4, 80065a0 <_malloc_r+0x88>
 800654e:	4629      	mov	r1, r5
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff ffbf 	bl	80064d4 <sbrk_aligned>
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	4604      	mov	r4, r0
 800655a:	d158      	bne.n	800660e <_malloc_r+0xf6>
 800655c:	f8d8 4000 	ldr.w	r4, [r8]
 8006560:	4627      	mov	r7, r4
 8006562:	2f00      	cmp	r7, #0
 8006564:	d143      	bne.n	80065ee <_malloc_r+0xd6>
 8006566:	2c00      	cmp	r4, #0
 8006568:	d04b      	beq.n	8006602 <_malloc_r+0xea>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	4639      	mov	r1, r7
 800656e:	4630      	mov	r0, r6
 8006570:	eb04 0903 	add.w	r9, r4, r3
 8006574:	f000 fb5c 	bl	8006c30 <_sbrk_r>
 8006578:	4581      	cmp	r9, r0
 800657a:	d142      	bne.n	8006602 <_malloc_r+0xea>
 800657c:	6821      	ldr	r1, [r4, #0]
 800657e:	1a6d      	subs	r5, r5, r1
 8006580:	4629      	mov	r1, r5
 8006582:	4630      	mov	r0, r6
 8006584:	f7ff ffa6 	bl	80064d4 <sbrk_aligned>
 8006588:	3001      	adds	r0, #1
 800658a:	d03a      	beq.n	8006602 <_malloc_r+0xea>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	442b      	add	r3, r5
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	f8d8 3000 	ldr.w	r3, [r8]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	bb62      	cbnz	r2, 80065f4 <_malloc_r+0xdc>
 800659a:	f8c8 7000 	str.w	r7, [r8]
 800659e:	e00f      	b.n	80065c0 <_malloc_r+0xa8>
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	1b52      	subs	r2, r2, r5
 80065a4:	d420      	bmi.n	80065e8 <_malloc_r+0xd0>
 80065a6:	2a0b      	cmp	r2, #11
 80065a8:	d917      	bls.n	80065da <_malloc_r+0xc2>
 80065aa:	1961      	adds	r1, r4, r5
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	6025      	str	r5, [r4, #0]
 80065b0:	bf18      	it	ne
 80065b2:	6059      	strne	r1, [r3, #4]
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	bf08      	it	eq
 80065b8:	f8c8 1000 	streq.w	r1, [r8]
 80065bc:	5162      	str	r2, [r4, r5]
 80065be:	604b      	str	r3, [r1, #4]
 80065c0:	4630      	mov	r0, r6
 80065c2:	f000 f82f 	bl	8006624 <__malloc_unlock>
 80065c6:	f104 000b 	add.w	r0, r4, #11
 80065ca:	1d23      	adds	r3, r4, #4
 80065cc:	f020 0007 	bic.w	r0, r0, #7
 80065d0:	1ac2      	subs	r2, r0, r3
 80065d2:	bf1c      	itt	ne
 80065d4:	1a1b      	subne	r3, r3, r0
 80065d6:	50a3      	strne	r3, [r4, r2]
 80065d8:	e7af      	b.n	800653a <_malloc_r+0x22>
 80065da:	6862      	ldr	r2, [r4, #4]
 80065dc:	42a3      	cmp	r3, r4
 80065de:	bf0c      	ite	eq
 80065e0:	f8c8 2000 	streq.w	r2, [r8]
 80065e4:	605a      	strne	r2, [r3, #4]
 80065e6:	e7eb      	b.n	80065c0 <_malloc_r+0xa8>
 80065e8:	4623      	mov	r3, r4
 80065ea:	6864      	ldr	r4, [r4, #4]
 80065ec:	e7ae      	b.n	800654c <_malloc_r+0x34>
 80065ee:	463c      	mov	r4, r7
 80065f0:	687f      	ldr	r7, [r7, #4]
 80065f2:	e7b6      	b.n	8006562 <_malloc_r+0x4a>
 80065f4:	461a      	mov	r2, r3
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d1fb      	bne.n	80065f4 <_malloc_r+0xdc>
 80065fc:	2300      	movs	r3, #0
 80065fe:	6053      	str	r3, [r2, #4]
 8006600:	e7de      	b.n	80065c0 <_malloc_r+0xa8>
 8006602:	230c      	movs	r3, #12
 8006604:	6033      	str	r3, [r6, #0]
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f80c 	bl	8006624 <__malloc_unlock>
 800660c:	e794      	b.n	8006538 <_malloc_r+0x20>
 800660e:	6005      	str	r5, [r0, #0]
 8006610:	e7d6      	b.n	80065c0 <_malloc_r+0xa8>
 8006612:	bf00      	nop
 8006614:	20004d28 	.word	0x20004d28

08006618 <__malloc_lock>:
 8006618:	4801      	ldr	r0, [pc, #4]	@ (8006620 <__malloc_lock+0x8>)
 800661a:	f7ff bf01 	b.w	8006420 <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	20004d20 	.word	0x20004d20

08006624 <__malloc_unlock>:
 8006624:	4801      	ldr	r0, [pc, #4]	@ (800662c <__malloc_unlock+0x8>)
 8006626:	f7ff befc 	b.w	8006422 <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	20004d20 	.word	0x20004d20

08006630 <__ssputs_r>:
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	688e      	ldr	r6, [r1, #8]
 8006636:	461f      	mov	r7, r3
 8006638:	42be      	cmp	r6, r7
 800663a:	680b      	ldr	r3, [r1, #0]
 800663c:	4682      	mov	sl, r0
 800663e:	460c      	mov	r4, r1
 8006640:	4690      	mov	r8, r2
 8006642:	d82d      	bhi.n	80066a0 <__ssputs_r+0x70>
 8006644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800664c:	d026      	beq.n	800669c <__ssputs_r+0x6c>
 800664e:	6965      	ldr	r5, [r4, #20]
 8006650:	6909      	ldr	r1, [r1, #16]
 8006652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006656:	eba3 0901 	sub.w	r9, r3, r1
 800665a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800665e:	1c7b      	adds	r3, r7, #1
 8006660:	444b      	add	r3, r9
 8006662:	106d      	asrs	r5, r5, #1
 8006664:	429d      	cmp	r5, r3
 8006666:	bf38      	it	cc
 8006668:	461d      	movcc	r5, r3
 800666a:	0553      	lsls	r3, r2, #21
 800666c:	d527      	bpl.n	80066be <__ssputs_r+0x8e>
 800666e:	4629      	mov	r1, r5
 8006670:	f7ff ff52 	bl	8006518 <_malloc_r>
 8006674:	4606      	mov	r6, r0
 8006676:	b360      	cbz	r0, 80066d2 <__ssputs_r+0xa2>
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	464a      	mov	r2, r9
 800667c:	f7ff fed2 	bl	8006424 <memcpy>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	6165      	str	r5, [r4, #20]
 8006690:	444e      	add	r6, r9
 8006692:	eba5 0509 	sub.w	r5, r5, r9
 8006696:	6026      	str	r6, [r4, #0]
 8006698:	60a5      	str	r5, [r4, #8]
 800669a:	463e      	mov	r6, r7
 800669c:	42be      	cmp	r6, r7
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x72>
 80066a0:	463e      	mov	r6, r7
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	4632      	mov	r2, r6
 80066a6:	4641      	mov	r1, r8
 80066a8:	f000 faa8 	bl	8006bfc <memmove>
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	1b9b      	subs	r3, r3, r6
 80066b0:	60a3      	str	r3, [r4, #8]
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	4433      	add	r3, r6
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	2000      	movs	r0, #0
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	462a      	mov	r2, r5
 80066c0:	f000 fac6 	bl	8006c50 <_realloc_r>
 80066c4:	4606      	mov	r6, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d1e0      	bne.n	800668c <__ssputs_r+0x5c>
 80066ca:	6921      	ldr	r1, [r4, #16]
 80066cc:	4650      	mov	r0, sl
 80066ce:	f7ff feb7 	bl	8006440 <_free_r>
 80066d2:	230c      	movs	r3, #12
 80066d4:	f8ca 3000 	str.w	r3, [sl]
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	e7e9      	b.n	80066ba <__ssputs_r+0x8a>
	...

080066e8 <_svfiprintf_r>:
 80066e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	4698      	mov	r8, r3
 80066ee:	898b      	ldrh	r3, [r1, #12]
 80066f0:	061b      	lsls	r3, r3, #24
 80066f2:	b09d      	sub	sp, #116	@ 0x74
 80066f4:	4607      	mov	r7, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	d510      	bpl.n	800671e <_svfiprintf_r+0x36>
 80066fc:	690b      	ldr	r3, [r1, #16]
 80066fe:	b973      	cbnz	r3, 800671e <_svfiprintf_r+0x36>
 8006700:	2140      	movs	r1, #64	@ 0x40
 8006702:	f7ff ff09 	bl	8006518 <_malloc_r>
 8006706:	6028      	str	r0, [r5, #0]
 8006708:	6128      	str	r0, [r5, #16]
 800670a:	b930      	cbnz	r0, 800671a <_svfiprintf_r+0x32>
 800670c:	230c      	movs	r3, #12
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	b01d      	add	sp, #116	@ 0x74
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	2340      	movs	r3, #64	@ 0x40
 800671c:	616b      	str	r3, [r5, #20]
 800671e:	2300      	movs	r3, #0
 8006720:	9309      	str	r3, [sp, #36]	@ 0x24
 8006722:	2320      	movs	r3, #32
 8006724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006728:	f8cd 800c 	str.w	r8, [sp, #12]
 800672c:	2330      	movs	r3, #48	@ 0x30
 800672e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80068cc <_svfiprintf_r+0x1e4>
 8006732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006736:	f04f 0901 	mov.w	r9, #1
 800673a:	4623      	mov	r3, r4
 800673c:	469a      	mov	sl, r3
 800673e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006742:	b10a      	cbz	r2, 8006748 <_svfiprintf_r+0x60>
 8006744:	2a25      	cmp	r2, #37	@ 0x25
 8006746:	d1f9      	bne.n	800673c <_svfiprintf_r+0x54>
 8006748:	ebba 0b04 	subs.w	fp, sl, r4
 800674c:	d00b      	beq.n	8006766 <_svfiprintf_r+0x7e>
 800674e:	465b      	mov	r3, fp
 8006750:	4622      	mov	r2, r4
 8006752:	4629      	mov	r1, r5
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff ff6b 	bl	8006630 <__ssputs_r>
 800675a:	3001      	adds	r0, #1
 800675c:	f000 80a7 	beq.w	80068ae <_svfiprintf_r+0x1c6>
 8006760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006762:	445a      	add	r2, fp
 8006764:	9209      	str	r2, [sp, #36]	@ 0x24
 8006766:	f89a 3000 	ldrb.w	r3, [sl]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 809f 	beq.w	80068ae <_svfiprintf_r+0x1c6>
 8006770:	2300      	movs	r3, #0
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800677a:	f10a 0a01 	add.w	sl, sl, #1
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006786:	931a      	str	r3, [sp, #104]	@ 0x68
 8006788:	4654      	mov	r4, sl
 800678a:	2205      	movs	r2, #5
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	484e      	ldr	r0, [pc, #312]	@ (80068cc <_svfiprintf_r+0x1e4>)
 8006792:	f7f9 fd2d 	bl	80001f0 <memchr>
 8006796:	9a04      	ldr	r2, [sp, #16]
 8006798:	b9d8      	cbnz	r0, 80067d2 <_svfiprintf_r+0xea>
 800679a:	06d0      	lsls	r0, r2, #27
 800679c:	bf44      	itt	mi
 800679e:	2320      	movmi	r3, #32
 80067a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067a4:	0711      	lsls	r1, r2, #28
 80067a6:	bf44      	itt	mi
 80067a8:	232b      	movmi	r3, #43	@ 0x2b
 80067aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ae:	f89a 3000 	ldrb.w	r3, [sl]
 80067b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b4:	d015      	beq.n	80067e2 <_svfiprintf_r+0xfa>
 80067b6:	9a07      	ldr	r2, [sp, #28]
 80067b8:	4654      	mov	r4, sl
 80067ba:	2000      	movs	r0, #0
 80067bc:	f04f 0c0a 	mov.w	ip, #10
 80067c0:	4621      	mov	r1, r4
 80067c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067c6:	3b30      	subs	r3, #48	@ 0x30
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d94b      	bls.n	8006864 <_svfiprintf_r+0x17c>
 80067cc:	b1b0      	cbz	r0, 80067fc <_svfiprintf_r+0x114>
 80067ce:	9207      	str	r2, [sp, #28]
 80067d0:	e014      	b.n	80067fc <_svfiprintf_r+0x114>
 80067d2:	eba0 0308 	sub.w	r3, r0, r8
 80067d6:	fa09 f303 	lsl.w	r3, r9, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	9304      	str	r3, [sp, #16]
 80067de:	46a2      	mov	sl, r4
 80067e0:	e7d2      	b.n	8006788 <_svfiprintf_r+0xa0>
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	9103      	str	r1, [sp, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bfbb      	ittet	lt
 80067ee:	425b      	neglt	r3, r3
 80067f0:	f042 0202 	orrlt.w	r2, r2, #2
 80067f4:	9307      	strge	r3, [sp, #28]
 80067f6:	9307      	strlt	r3, [sp, #28]
 80067f8:	bfb8      	it	lt
 80067fa:	9204      	strlt	r2, [sp, #16]
 80067fc:	7823      	ldrb	r3, [r4, #0]
 80067fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006800:	d10a      	bne.n	8006818 <_svfiprintf_r+0x130>
 8006802:	7863      	ldrb	r3, [r4, #1]
 8006804:	2b2a      	cmp	r3, #42	@ 0x2a
 8006806:	d132      	bne.n	800686e <_svfiprintf_r+0x186>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	9203      	str	r2, [sp, #12]
 8006810:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006814:	3402      	adds	r4, #2
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80068dc <_svfiprintf_r+0x1f4>
 800681c:	7821      	ldrb	r1, [r4, #0]
 800681e:	2203      	movs	r2, #3
 8006820:	4650      	mov	r0, sl
 8006822:	f7f9 fce5 	bl	80001f0 <memchr>
 8006826:	b138      	cbz	r0, 8006838 <_svfiprintf_r+0x150>
 8006828:	9b04      	ldr	r3, [sp, #16]
 800682a:	eba0 000a 	sub.w	r0, r0, sl
 800682e:	2240      	movs	r2, #64	@ 0x40
 8006830:	4082      	lsls	r2, r0
 8006832:	4313      	orrs	r3, r2
 8006834:	3401      	adds	r4, #1
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800683c:	4824      	ldr	r0, [pc, #144]	@ (80068d0 <_svfiprintf_r+0x1e8>)
 800683e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006842:	2206      	movs	r2, #6
 8006844:	f7f9 fcd4 	bl	80001f0 <memchr>
 8006848:	2800      	cmp	r0, #0
 800684a:	d036      	beq.n	80068ba <_svfiprintf_r+0x1d2>
 800684c:	4b21      	ldr	r3, [pc, #132]	@ (80068d4 <_svfiprintf_r+0x1ec>)
 800684e:	bb1b      	cbnz	r3, 8006898 <_svfiprintf_r+0x1b0>
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	3307      	adds	r3, #7
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	3308      	adds	r3, #8
 800685a:	9303      	str	r3, [sp, #12]
 800685c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685e:	4433      	add	r3, r6
 8006860:	9309      	str	r3, [sp, #36]	@ 0x24
 8006862:	e76a      	b.n	800673a <_svfiprintf_r+0x52>
 8006864:	fb0c 3202 	mla	r2, ip, r2, r3
 8006868:	460c      	mov	r4, r1
 800686a:	2001      	movs	r0, #1
 800686c:	e7a8      	b.n	80067c0 <_svfiprintf_r+0xd8>
 800686e:	2300      	movs	r3, #0
 8006870:	3401      	adds	r4, #1
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	4619      	mov	r1, r3
 8006876:	f04f 0c0a 	mov.w	ip, #10
 800687a:	4620      	mov	r0, r4
 800687c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006880:	3a30      	subs	r2, #48	@ 0x30
 8006882:	2a09      	cmp	r2, #9
 8006884:	d903      	bls.n	800688e <_svfiprintf_r+0x1a6>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0c6      	beq.n	8006818 <_svfiprintf_r+0x130>
 800688a:	9105      	str	r1, [sp, #20]
 800688c:	e7c4      	b.n	8006818 <_svfiprintf_r+0x130>
 800688e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006892:	4604      	mov	r4, r0
 8006894:	2301      	movs	r3, #1
 8006896:	e7f0      	b.n	800687a <_svfiprintf_r+0x192>
 8006898:	ab03      	add	r3, sp, #12
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	462a      	mov	r2, r5
 800689e:	4b0e      	ldr	r3, [pc, #56]	@ (80068d8 <_svfiprintf_r+0x1f0>)
 80068a0:	a904      	add	r1, sp, #16
 80068a2:	4638      	mov	r0, r7
 80068a4:	f3af 8000 	nop.w
 80068a8:	1c42      	adds	r2, r0, #1
 80068aa:	4606      	mov	r6, r0
 80068ac:	d1d6      	bne.n	800685c <_svfiprintf_r+0x174>
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	065b      	lsls	r3, r3, #25
 80068b2:	f53f af2d 	bmi.w	8006710 <_svfiprintf_r+0x28>
 80068b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068b8:	e72c      	b.n	8006714 <_svfiprintf_r+0x2c>
 80068ba:	ab03      	add	r3, sp, #12
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	462a      	mov	r2, r5
 80068c0:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <_svfiprintf_r+0x1f0>)
 80068c2:	a904      	add	r1, sp, #16
 80068c4:	4638      	mov	r0, r7
 80068c6:	f000 f879 	bl	80069bc <_printf_i>
 80068ca:	e7ed      	b.n	80068a8 <_svfiprintf_r+0x1c0>
 80068cc:	08006dd0 	.word	0x08006dd0
 80068d0:	08006dda 	.word	0x08006dda
 80068d4:	00000000 	.word	0x00000000
 80068d8:	08006631 	.word	0x08006631
 80068dc:	08006dd6 	.word	0x08006dd6

080068e0 <_printf_common>:
 80068e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	4616      	mov	r6, r2
 80068e6:	4698      	mov	r8, r3
 80068e8:	688a      	ldr	r2, [r1, #8]
 80068ea:	690b      	ldr	r3, [r1, #16]
 80068ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	bfb8      	it	lt
 80068f4:	4613      	movlt	r3, r2
 80068f6:	6033      	str	r3, [r6, #0]
 80068f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068fc:	4607      	mov	r7, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	b10a      	cbz	r2, 8006906 <_printf_common+0x26>
 8006902:	3301      	adds	r3, #1
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	0699      	lsls	r1, r3, #26
 800690a:	bf42      	ittt	mi
 800690c:	6833      	ldrmi	r3, [r6, #0]
 800690e:	3302      	addmi	r3, #2
 8006910:	6033      	strmi	r3, [r6, #0]
 8006912:	6825      	ldr	r5, [r4, #0]
 8006914:	f015 0506 	ands.w	r5, r5, #6
 8006918:	d106      	bne.n	8006928 <_printf_common+0x48>
 800691a:	f104 0a19 	add.w	sl, r4, #25
 800691e:	68e3      	ldr	r3, [r4, #12]
 8006920:	6832      	ldr	r2, [r6, #0]
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	42ab      	cmp	r3, r5
 8006926:	dc26      	bgt.n	8006976 <_printf_common+0x96>
 8006928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	3b00      	subs	r3, #0
 8006930:	bf18      	it	ne
 8006932:	2301      	movne	r3, #1
 8006934:	0692      	lsls	r2, r2, #26
 8006936:	d42b      	bmi.n	8006990 <_printf_common+0xb0>
 8006938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800693c:	4641      	mov	r1, r8
 800693e:	4638      	mov	r0, r7
 8006940:	47c8      	blx	r9
 8006942:	3001      	adds	r0, #1
 8006944:	d01e      	beq.n	8006984 <_printf_common+0xa4>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	f003 0306 	and.w	r3, r3, #6
 800694e:	2b04      	cmp	r3, #4
 8006950:	bf02      	ittt	eq
 8006952:	68e5      	ldreq	r5, [r4, #12]
 8006954:	6833      	ldreq	r3, [r6, #0]
 8006956:	1aed      	subeq	r5, r5, r3
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	bf0c      	ite	eq
 800695c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006960:	2500      	movne	r5, #0
 8006962:	4293      	cmp	r3, r2
 8006964:	bfc4      	itt	gt
 8006966:	1a9b      	subgt	r3, r3, r2
 8006968:	18ed      	addgt	r5, r5, r3
 800696a:	2600      	movs	r6, #0
 800696c:	341a      	adds	r4, #26
 800696e:	42b5      	cmp	r5, r6
 8006970:	d11a      	bne.n	80069a8 <_printf_common+0xc8>
 8006972:	2000      	movs	r0, #0
 8006974:	e008      	b.n	8006988 <_printf_common+0xa8>
 8006976:	2301      	movs	r3, #1
 8006978:	4652      	mov	r2, sl
 800697a:	4641      	mov	r1, r8
 800697c:	4638      	mov	r0, r7
 800697e:	47c8      	blx	r9
 8006980:	3001      	adds	r0, #1
 8006982:	d103      	bne.n	800698c <_printf_common+0xac>
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698c:	3501      	adds	r5, #1
 800698e:	e7c6      	b.n	800691e <_printf_common+0x3e>
 8006990:	18e1      	adds	r1, r4, r3
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	2030      	movs	r0, #48	@ 0x30
 8006996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800699a:	4422      	add	r2, r4
 800699c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069a4:	3302      	adds	r3, #2
 80069a6:	e7c7      	b.n	8006938 <_printf_common+0x58>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4622      	mov	r2, r4
 80069ac:	4641      	mov	r1, r8
 80069ae:	4638      	mov	r0, r7
 80069b0:	47c8      	blx	r9
 80069b2:	3001      	adds	r0, #1
 80069b4:	d0e6      	beq.n	8006984 <_printf_common+0xa4>
 80069b6:	3601      	adds	r6, #1
 80069b8:	e7d9      	b.n	800696e <_printf_common+0x8e>
	...

080069bc <_printf_i>:
 80069bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	7e0f      	ldrb	r7, [r1, #24]
 80069c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069c4:	2f78      	cmp	r7, #120	@ 0x78
 80069c6:	4691      	mov	r9, r2
 80069c8:	4680      	mov	r8, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	469a      	mov	sl, r3
 80069ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069d2:	d807      	bhi.n	80069e4 <_printf_i+0x28>
 80069d4:	2f62      	cmp	r7, #98	@ 0x62
 80069d6:	d80a      	bhi.n	80069ee <_printf_i+0x32>
 80069d8:	2f00      	cmp	r7, #0
 80069da:	f000 80d2 	beq.w	8006b82 <_printf_i+0x1c6>
 80069de:	2f58      	cmp	r7, #88	@ 0x58
 80069e0:	f000 80b9 	beq.w	8006b56 <_printf_i+0x19a>
 80069e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069ec:	e03a      	b.n	8006a64 <_printf_i+0xa8>
 80069ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069f2:	2b15      	cmp	r3, #21
 80069f4:	d8f6      	bhi.n	80069e4 <_printf_i+0x28>
 80069f6:	a101      	add	r1, pc, #4	@ (adr r1, 80069fc <_printf_i+0x40>)
 80069f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069fc:	08006a55 	.word	0x08006a55
 8006a00:	08006a69 	.word	0x08006a69
 8006a04:	080069e5 	.word	0x080069e5
 8006a08:	080069e5 	.word	0x080069e5
 8006a0c:	080069e5 	.word	0x080069e5
 8006a10:	080069e5 	.word	0x080069e5
 8006a14:	08006a69 	.word	0x08006a69
 8006a18:	080069e5 	.word	0x080069e5
 8006a1c:	080069e5 	.word	0x080069e5
 8006a20:	080069e5 	.word	0x080069e5
 8006a24:	080069e5 	.word	0x080069e5
 8006a28:	08006b69 	.word	0x08006b69
 8006a2c:	08006a93 	.word	0x08006a93
 8006a30:	08006b23 	.word	0x08006b23
 8006a34:	080069e5 	.word	0x080069e5
 8006a38:	080069e5 	.word	0x080069e5
 8006a3c:	08006b8b 	.word	0x08006b8b
 8006a40:	080069e5 	.word	0x080069e5
 8006a44:	08006a93 	.word	0x08006a93
 8006a48:	080069e5 	.word	0x080069e5
 8006a4c:	080069e5 	.word	0x080069e5
 8006a50:	08006b2b 	.word	0x08006b2b
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	1d1a      	adds	r2, r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6032      	str	r2, [r6, #0]
 8006a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a64:	2301      	movs	r3, #1
 8006a66:	e09d      	b.n	8006ba4 <_printf_i+0x1e8>
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	1d19      	adds	r1, r3, #4
 8006a6e:	6031      	str	r1, [r6, #0]
 8006a70:	0606      	lsls	r6, r0, #24
 8006a72:	d501      	bpl.n	8006a78 <_printf_i+0xbc>
 8006a74:	681d      	ldr	r5, [r3, #0]
 8006a76:	e003      	b.n	8006a80 <_printf_i+0xc4>
 8006a78:	0645      	lsls	r5, r0, #25
 8006a7a:	d5fb      	bpl.n	8006a74 <_printf_i+0xb8>
 8006a7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	da03      	bge.n	8006a8c <_printf_i+0xd0>
 8006a84:	232d      	movs	r3, #45	@ 0x2d
 8006a86:	426d      	negs	r5, r5
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a8c:	4859      	ldr	r0, [pc, #356]	@ (8006bf4 <_printf_i+0x238>)
 8006a8e:	230a      	movs	r3, #10
 8006a90:	e011      	b.n	8006ab6 <_printf_i+0xfa>
 8006a92:	6821      	ldr	r1, [r4, #0]
 8006a94:	6833      	ldr	r3, [r6, #0]
 8006a96:	0608      	lsls	r0, r1, #24
 8006a98:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a9c:	d402      	bmi.n	8006aa4 <_printf_i+0xe8>
 8006a9e:	0649      	lsls	r1, r1, #25
 8006aa0:	bf48      	it	mi
 8006aa2:	b2ad      	uxthmi	r5, r5
 8006aa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006aa6:	4853      	ldr	r0, [pc, #332]	@ (8006bf4 <_printf_i+0x238>)
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	bf14      	ite	ne
 8006aac:	230a      	movne	r3, #10
 8006aae:	2308      	moveq	r3, #8
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ab6:	6866      	ldr	r6, [r4, #4]
 8006ab8:	60a6      	str	r6, [r4, #8]
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	bfa2      	ittt	ge
 8006abe:	6821      	ldrge	r1, [r4, #0]
 8006ac0:	f021 0104 	bicge.w	r1, r1, #4
 8006ac4:	6021      	strge	r1, [r4, #0]
 8006ac6:	b90d      	cbnz	r5, 8006acc <_printf_i+0x110>
 8006ac8:	2e00      	cmp	r6, #0
 8006aca:	d04b      	beq.n	8006b64 <_printf_i+0x1a8>
 8006acc:	4616      	mov	r6, r2
 8006ace:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ad2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ad6:	5dc7      	ldrb	r7, [r0, r7]
 8006ad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006adc:	462f      	mov	r7, r5
 8006ade:	42bb      	cmp	r3, r7
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	d9f4      	bls.n	8006ace <_printf_i+0x112>
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d10b      	bne.n	8006b00 <_printf_i+0x144>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	07df      	lsls	r7, r3, #31
 8006aec:	d508      	bpl.n	8006b00 <_printf_i+0x144>
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	6861      	ldr	r1, [r4, #4]
 8006af2:	4299      	cmp	r1, r3
 8006af4:	bfde      	ittt	le
 8006af6:	2330      	movle	r3, #48	@ 0x30
 8006af8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006afc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b00:	1b92      	subs	r2, r2, r6
 8006b02:	6122      	str	r2, [r4, #16]
 8006b04:	f8cd a000 	str.w	sl, [sp]
 8006b08:	464b      	mov	r3, r9
 8006b0a:	aa03      	add	r2, sp, #12
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4640      	mov	r0, r8
 8006b10:	f7ff fee6 	bl	80068e0 <_printf_common>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d14a      	bne.n	8006bae <_printf_i+0x1f2>
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	b004      	add	sp, #16
 8006b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	f043 0320 	orr.w	r3, r3, #32
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	4833      	ldr	r0, [pc, #204]	@ (8006bf8 <_printf_i+0x23c>)
 8006b2c:	2778      	movs	r7, #120	@ 0x78
 8006b2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	6831      	ldr	r1, [r6, #0]
 8006b36:	061f      	lsls	r7, r3, #24
 8006b38:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b3c:	d402      	bmi.n	8006b44 <_printf_i+0x188>
 8006b3e:	065f      	lsls	r7, r3, #25
 8006b40:	bf48      	it	mi
 8006b42:	b2ad      	uxthmi	r5, r5
 8006b44:	6031      	str	r1, [r6, #0]
 8006b46:	07d9      	lsls	r1, r3, #31
 8006b48:	bf44      	itt	mi
 8006b4a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b4e:	6023      	strmi	r3, [r4, #0]
 8006b50:	b11d      	cbz	r5, 8006b5a <_printf_i+0x19e>
 8006b52:	2310      	movs	r3, #16
 8006b54:	e7ac      	b.n	8006ab0 <_printf_i+0xf4>
 8006b56:	4827      	ldr	r0, [pc, #156]	@ (8006bf4 <_printf_i+0x238>)
 8006b58:	e7e9      	b.n	8006b2e <_printf_i+0x172>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f023 0320 	bic.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	e7f6      	b.n	8006b52 <_printf_i+0x196>
 8006b64:	4616      	mov	r6, r2
 8006b66:	e7bd      	b.n	8006ae4 <_printf_i+0x128>
 8006b68:	6833      	ldr	r3, [r6, #0]
 8006b6a:	6825      	ldr	r5, [r4, #0]
 8006b6c:	6961      	ldr	r1, [r4, #20]
 8006b6e:	1d18      	adds	r0, r3, #4
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	062e      	lsls	r6, r5, #24
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	d501      	bpl.n	8006b7c <_printf_i+0x1c0>
 8006b78:	6019      	str	r1, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <_printf_i+0x1c6>
 8006b7c:	0668      	lsls	r0, r5, #25
 8006b7e:	d5fb      	bpl.n	8006b78 <_printf_i+0x1bc>
 8006b80:	8019      	strh	r1, [r3, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	4616      	mov	r6, r2
 8006b88:	e7bc      	b.n	8006b04 <_printf_i+0x148>
 8006b8a:	6833      	ldr	r3, [r6, #0]
 8006b8c:	1d1a      	adds	r2, r3, #4
 8006b8e:	6032      	str	r2, [r6, #0]
 8006b90:	681e      	ldr	r6, [r3, #0]
 8006b92:	6862      	ldr	r2, [r4, #4]
 8006b94:	2100      	movs	r1, #0
 8006b96:	4630      	mov	r0, r6
 8006b98:	f7f9 fb2a 	bl	80001f0 <memchr>
 8006b9c:	b108      	cbz	r0, 8006ba2 <_printf_i+0x1e6>
 8006b9e:	1b80      	subs	r0, r0, r6
 8006ba0:	6060      	str	r0, [r4, #4]
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bac:	e7aa      	b.n	8006b04 <_printf_i+0x148>
 8006bae:	6923      	ldr	r3, [r4, #16]
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	47d0      	blx	sl
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d0ad      	beq.n	8006b18 <_printf_i+0x15c>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	079b      	lsls	r3, r3, #30
 8006bc0:	d413      	bmi.n	8006bea <_printf_i+0x22e>
 8006bc2:	68e0      	ldr	r0, [r4, #12]
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	4298      	cmp	r0, r3
 8006bc8:	bfb8      	it	lt
 8006bca:	4618      	movlt	r0, r3
 8006bcc:	e7a6      	b.n	8006b1c <_printf_i+0x160>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	47d0      	blx	sl
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d09d      	beq.n	8006b18 <_printf_i+0x15c>
 8006bdc:	3501      	adds	r5, #1
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	9903      	ldr	r1, [sp, #12]
 8006be2:	1a5b      	subs	r3, r3, r1
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dcf2      	bgt.n	8006bce <_printf_i+0x212>
 8006be8:	e7eb      	b.n	8006bc2 <_printf_i+0x206>
 8006bea:	2500      	movs	r5, #0
 8006bec:	f104 0619 	add.w	r6, r4, #25
 8006bf0:	e7f5      	b.n	8006bde <_printf_i+0x222>
 8006bf2:	bf00      	nop
 8006bf4:	08006de1 	.word	0x08006de1
 8006bf8:	08006df2 	.word	0x08006df2

08006bfc <memmove>:
 8006bfc:	4288      	cmp	r0, r1
 8006bfe:	b510      	push	{r4, lr}
 8006c00:	eb01 0402 	add.w	r4, r1, r2
 8006c04:	d902      	bls.n	8006c0c <memmove+0x10>
 8006c06:	4284      	cmp	r4, r0
 8006c08:	4623      	mov	r3, r4
 8006c0a:	d807      	bhi.n	8006c1c <memmove+0x20>
 8006c0c:	1e43      	subs	r3, r0, #1
 8006c0e:	42a1      	cmp	r1, r4
 8006c10:	d008      	beq.n	8006c24 <memmove+0x28>
 8006c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c1a:	e7f8      	b.n	8006c0e <memmove+0x12>
 8006c1c:	4402      	add	r2, r0
 8006c1e:	4601      	mov	r1, r0
 8006c20:	428a      	cmp	r2, r1
 8006c22:	d100      	bne.n	8006c26 <memmove+0x2a>
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c2e:	e7f7      	b.n	8006c20 <memmove+0x24>

08006c30 <_sbrk_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d06      	ldr	r5, [pc, #24]	@ (8006c4c <_sbrk_r+0x1c>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	602b      	str	r3, [r5, #0]
 8006c3c:	f7fb f858 	bl	8001cf0 <_sbrk>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_sbrk_r+0x1a>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_sbrk_r+0x1a>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20004d1c 	.word	0x20004d1c

08006c50 <_realloc_r>:
 8006c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	4680      	mov	r8, r0
 8006c56:	4615      	mov	r5, r2
 8006c58:	460c      	mov	r4, r1
 8006c5a:	b921      	cbnz	r1, 8006c66 <_realloc_r+0x16>
 8006c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	4611      	mov	r1, r2
 8006c62:	f7ff bc59 	b.w	8006518 <_malloc_r>
 8006c66:	b92a      	cbnz	r2, 8006c74 <_realloc_r+0x24>
 8006c68:	f7ff fbea 	bl	8006440 <_free_r>
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	f000 f81a 	bl	8006cac <_malloc_usable_size_r>
 8006c78:	4285      	cmp	r5, r0
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	d802      	bhi.n	8006c84 <_realloc_r+0x34>
 8006c7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c82:	d8f4      	bhi.n	8006c6e <_realloc_r+0x1e>
 8006c84:	4629      	mov	r1, r5
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fc46 	bl	8006518 <_malloc_r>
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d0ec      	beq.n	8006c6c <_realloc_r+0x1c>
 8006c92:	42b5      	cmp	r5, r6
 8006c94:	462a      	mov	r2, r5
 8006c96:	4621      	mov	r1, r4
 8006c98:	bf28      	it	cs
 8006c9a:	4632      	movcs	r2, r6
 8006c9c:	f7ff fbc2 	bl	8006424 <memcpy>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7ff fbcc 	bl	8006440 <_free_r>
 8006ca8:	463c      	mov	r4, r7
 8006caa:	e7e0      	b.n	8006c6e <_realloc_r+0x1e>

08006cac <_malloc_usable_size_r>:
 8006cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cb0:	1f18      	subs	r0, r3, #4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfbc      	itt	lt
 8006cb6:	580b      	ldrlt	r3, [r1, r0]
 8006cb8:	18c0      	addlt	r0, r0, r3
 8006cba:	4770      	bx	lr

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr
