
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eec  08005eec  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  08005eec  08005eec  00006eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ef4  08005ef4  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ef8  08005ef8  00006ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005efc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c68  2000007c  08005f78  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ce4  08005f78  00007ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b16  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003652  00000000  00000000  0001dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00021218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f67  00000000  00000000  00022618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fdb  00000000  00000000  0002357f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b6e  00000000  00000000  0003c55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098293  00000000  00000000  000530c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb35b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  000eb3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f09ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e38 	.word	0x08005e38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005e38 	.word	0x08005e38

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ScanColumns>:
SequenceState seqState = SEQ_IDLE;

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}
uint8_t ScanColumns(uint8_t row) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	f200 80c0 	bhi.w	8000662 <ScanColumns+0x192>
 80004e2:	a201      	add	r2, pc, #4	@ (adr r2, 80004e8 <ScanColumns+0x18>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000555 	.word	0x08000555
 80004f0:	080005af 	.word	0x080005af
 80004f4:	08000609 	.word	0x08000609
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80004f8:	2101      	movs	r1, #1
 80004fa:	4861      	ldr	r0, [pc, #388]	@ (8000680 <ScanColumns+0x1b0>)
 80004fc:	f001 fbf0 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d101      	bne.n	800050a <ScanColumns+0x3a>
 8000506:	2343      	movs	r3, #67	@ 0x43
 8000508:	e0b5      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 800050a:	2102      	movs	r1, #2
 800050c:	485c      	ldr	r0, [pc, #368]	@ (8000680 <ScanColumns+0x1b0>)
 800050e:	f001 fbe7 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d101      	bne.n	800051c <ScanColumns+0x4c>
 8000518:	2337      	movs	r3, #55	@ 0x37
 800051a:	e0ac      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 800051c:	2104      	movs	r1, #4
 800051e:	4858      	ldr	r0, [pc, #352]	@ (8000680 <ScanColumns+0x1b0>)
 8000520:	f001 fbde 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <ScanColumns+0x5e>
 800052a:	2334      	movs	r3, #52	@ 0x34
 800052c:	e0a3      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 800052e:	2108      	movs	r1, #8
 8000530:	4853      	ldr	r0, [pc, #332]	@ (8000680 <ScanColumns+0x1b0>)
 8000532:	f001 fbd5 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <ScanColumns+0x70>
 800053c:	2331      	movs	r3, #49	@ 0x31
 800053e:	e09a      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 8000540:	2110      	movs	r1, #16
 8000542:	484f      	ldr	r0, [pc, #316]	@ (8000680 <ScanColumns+0x1b0>)
 8000544:	f001 fbcc 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	f040 808b 	bne.w	8000666 <ScanColumns+0x196>
 8000550:	2341      	movs	r3, #65	@ 0x41
 8000552:	e090      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000554:	2101      	movs	r1, #1
 8000556:	484a      	ldr	r0, [pc, #296]	@ (8000680 <ScanColumns+0x1b0>)
 8000558:	f001 fbc2 	bl	8001ce0 <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <ScanColumns+0x96>
 8000562:	2330      	movs	r3, #48	@ 0x30
 8000564:	e087      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000566:	2102      	movs	r1, #2
 8000568:	4845      	ldr	r0, [pc, #276]	@ (8000680 <ScanColumns+0x1b0>)
 800056a:	f001 fbb9 	bl	8001ce0 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <ScanColumns+0xa8>
 8000574:	2338      	movs	r3, #56	@ 0x38
 8000576:	e07e      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000578:	2104      	movs	r1, #4
 800057a:	4841      	ldr	r0, [pc, #260]	@ (8000680 <ScanColumns+0x1b0>)
 800057c:	f001 fbb0 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <ScanColumns+0xba>
 8000586:	2335      	movs	r3, #53	@ 0x35
 8000588:	e075      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800058a:	2108      	movs	r1, #8
 800058c:	483c      	ldr	r0, [pc, #240]	@ (8000680 <ScanColumns+0x1b0>)
 800058e:	f001 fba7 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <ScanColumns+0xcc>
 8000598:	2332      	movs	r3, #50	@ 0x32
 800059a:	e06c      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800059c:	2110      	movs	r1, #16
 800059e:	4838      	ldr	r0, [pc, #224]	@ (8000680 <ScanColumns+0x1b0>)
 80005a0:	f001 fb9e 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d15f      	bne.n	800066a <ScanColumns+0x19a>
 80005aa:	2342      	movs	r3, #66	@ 0x42
 80005ac:	e063      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 80005ae:	2101      	movs	r1, #1
 80005b0:	4833      	ldr	r0, [pc, #204]	@ (8000680 <ScanColumns+0x1b0>)
 80005b2:	f001 fb95 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d101      	bne.n	80005c0 <ScanColumns+0xf0>
 80005bc:	2345      	movs	r3, #69	@ 0x45
 80005be:	e05a      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 80005c0:	2102      	movs	r1, #2
 80005c2:	482f      	ldr	r0, [pc, #188]	@ (8000680 <ScanColumns+0x1b0>)
 80005c4:	f001 fb8c 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <ScanColumns+0x102>
 80005ce:	2339      	movs	r3, #57	@ 0x39
 80005d0:	e051      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 80005d2:	2104      	movs	r1, #4
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <ScanColumns+0x1b0>)
 80005d6:	f001 fb83 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <ScanColumns+0x114>
 80005e0:	2336      	movs	r3, #54	@ 0x36
 80005e2:	e048      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 80005e4:	2108      	movs	r1, #8
 80005e6:	4826      	ldr	r0, [pc, #152]	@ (8000680 <ScanColumns+0x1b0>)
 80005e8:	f001 fb7a 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <ScanColumns+0x126>
 80005f2:	2333      	movs	r3, #51	@ 0x33
 80005f4:	e03f      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80005f6:	2110      	movs	r1, #16
 80005f8:	4821      	ldr	r0, [pc, #132]	@ (8000680 <ScanColumns+0x1b0>)
 80005fa:	f001 fb71 	bl	8001ce0 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d134      	bne.n	800066e <ScanColumns+0x19e>
 8000604:	2344      	movs	r3, #68	@ 0x44
 8000606:	e036      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 8000608:	2101      	movs	r1, #1
 800060a:	481d      	ldr	r0, [pc, #116]	@ (8000680 <ScanColumns+0x1b0>)
 800060c:	f001 fb68 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <ScanColumns+0x14a>
 8000616:	2354      	movs	r3, #84	@ 0x54
 8000618:	e02d      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 800061a:	2102      	movs	r1, #2
 800061c:	4818      	ldr	r0, [pc, #96]	@ (8000680 <ScanColumns+0x1b0>)
 800061e:	f001 fb5f 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <ScanColumns+0x15c>
 8000628:	2350      	movs	r3, #80	@ 0x50
 800062a:	e024      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 800062c:	2104      	movs	r1, #4
 800062e:	4814      	ldr	r0, [pc, #80]	@ (8000680 <ScanColumns+0x1b0>)
 8000630:	f001 fb56 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <ScanColumns+0x16e>
 800063a:	2324      	movs	r3, #36	@ 0x24
 800063c:	e01b      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 800063e:	2108      	movs	r1, #8
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <ScanColumns+0x1b0>)
 8000642:	f001 fb4d 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <ScanColumns+0x180>
 800064c:	234c      	movs	r3, #76	@ 0x4c
 800064e:	e012      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000650:	2110      	movs	r1, #16
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <ScanColumns+0x1b0>)
 8000654:	f001 fb44 	bl	8001ce0 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d109      	bne.n	8000672 <ScanColumns+0x1a2>
 800065e:	2346      	movs	r3, #70	@ 0x46
 8000660:	e009      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000662:	23ff      	movs	r3, #255	@ 0xff
 8000664:	e007      	b.n	8000676 <ScanColumns+0x1a6>
            break;
 8000666:	bf00      	nop
 8000668:	e004      	b.n	8000674 <ScanColumns+0x1a4>
            break;
 800066a:	bf00      	nop
 800066c:	e002      	b.n	8000674 <ScanColumns+0x1a4>
            break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <ScanColumns+0x1a4>
            break;
 8000672:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000674:	23ff      	movs	r3, #255	@ 0xff
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400

08000684 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	@ 0x40
 800068e:	482c      	ldr	r0, [pc, #176]	@ (8000740 <KeyPad_Scan+0xbc>)
 8000690:	f001 fb3e 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800069a:	4829      	ldr	r0, [pc, #164]	@ (8000740 <KeyPad_Scan+0xbc>)
 800069c:	f001 fb38 	bl	8001d10 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff15 	bl	80004d0 <ScanColumns>
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2bff      	cmp	r3, #255	@ 0xff
 80006ae:	d001      	beq.n	80006b4 <KeyPad_Scan+0x30>
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	e041      	b.n	8000738 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	@ 0x80
 80006b8:	4821      	ldr	r0, [pc, #132]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006ba:	f001 fb29 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80006c4:	481e      	ldr	r0, [pc, #120]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006c6:	f001 fb23 	bl	8001d10 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ff00 	bl	80004d0 <ScanColumns>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2bff      	cmp	r3, #255	@ 0xff
 80006d8:	d001      	beq.n	80006de <KeyPad_Scan+0x5a>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	e02c      	b.n	8000738 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006e6:	f001 fb13 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80006f0:	4813      	ldr	r0, [pc, #76]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006f2:	f001 fb0d 	bl	8001d10 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff feea 	bl	80004d0 <ScanColumns>
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2bff      	cmp	r3, #255	@ 0xff
 8000704:	d001      	beq.n	800070a <KeyPad_Scan+0x86>
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	e016      	b.n	8000738 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000710:	480b      	ldr	r0, [pc, #44]	@ (8000740 <KeyPad_Scan+0xbc>)
 8000712:	f001 fafd 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <KeyPad_Scan+0xbc>)
 800071e:	f001 faf7 	bl	8001d10 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff fed4 	bl	80004d0 <ScanColumns>
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2bff      	cmp	r3, #255	@ 0xff
 8000730:	d001      	beq.n	8000736 <KeyPad_Scan+0xb2>
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	e000      	b.n	8000738 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 8000736:	23ff      	movs	r3, #255	@ 0xff
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40020400 	.word	0x40020400

08000744 <KeyLogic>:




void KeyLogic() {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 800074a:	f003 fec9 	bl	80044e0 <xTaskGetTickCount>
 800074e:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 8000750:	f7ff ff98 	bl	8000684 <KeyPad_Scan>
 8000754:	4603      	mov	r3, r0
 8000756:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000758:	4bab      	ldr	r3, [pc, #684]	@ (8000a08 <KeyLogic+0x2c4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b03      	cmp	r3, #3
 800075e:	d85a      	bhi.n	8000816 <KeyLogic+0xd2>
 8000760:	a201      	add	r2, pc, #4	@ (adr r2, 8000768 <KeyLogic+0x24>)
 8000762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000766:	bf00      	nop
 8000768:	08000779 	.word	0x08000779
 800076c:	08000793 	.word	0x08000793
 8000770:	080007bf 	.word	0x080007bf
 8000774:	080007ef 	.word	0x080007ef
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2bff      	cmp	r3, #255	@ 0xff
 800077c:	d044      	beq.n	8000808 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800077e:	4aa3      	ldr	r2, [pc, #652]	@ (8000a0c <KeyLogic+0x2c8>)
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000784:	4aa2      	ldr	r2, [pc, #648]	@ (8000a10 <KeyLogic+0x2cc>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 800078a:	4b9f      	ldr	r3, [pc, #636]	@ (8000a08 <KeyLogic+0x2c4>)
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000790:	e03a      	b.n	8000808 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 8000792:	4b9f      	ldr	r3, [pc, #636]	@ (8000a10 <KeyLogic+0x2cc>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2b31      	cmp	r3, #49	@ 0x31
 800079c:	d936      	bls.n	800080c <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800079e:	4b9b      	ldr	r3, [pc, #620]	@ (8000a0c <KeyLogic+0x2c8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	78fa      	ldrb	r2, [r7, #3]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d106      	bne.n	80007b6 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 80007a8:	4b97      	ldr	r3, [pc, #604]	@ (8000a08 <KeyLogic+0x2c4>)
 80007aa:	2202      	movs	r2, #2
 80007ac:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 80007ae:	4a99      	ldr	r2, [pc, #612]	@ (8000a14 <KeyLogic+0x2d0>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 80007b4:	e02a      	b.n	800080c <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 80007b6:	4b94      	ldr	r3, [pc, #592]	@ (8000a08 <KeyLogic+0x2c4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
            break;
 80007bc:	e026      	b.n	800080c <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 80007be:	4b93      	ldr	r3, [pc, #588]	@ (8000a0c <KeyLogic+0x2c8>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	78fa      	ldrb	r2, [r7, #3]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d10a      	bne.n	80007de <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 80007c8:	4b92      	ldr	r3, [pc, #584]	@ (8000a14 <KeyLogic+0x2d0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007d4:	d31c      	bcc.n	8000810 <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 80007d6:	4b8c      	ldr	r3, [pc, #560]	@ (8000a08 <KeyLogic+0x2c4>)
 80007d8:	2203      	movs	r2, #3
 80007da:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 80007dc:	e018      	b.n	8000810 <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 80007de:	4b8b      	ldr	r3, [pc, #556]	@ (8000a0c <KeyLogic+0x2c8>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	4b8d      	ldr	r3, [pc, #564]	@ (8000a18 <KeyLogic+0x2d4>)
 80007e4:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80007e6:	4b88      	ldr	r3, [pc, #544]	@ (8000a08 <KeyLogic+0x2c4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
            break;
 80007ec:	e010      	b.n	8000810 <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80007ee:	4b87      	ldr	r3, [pc, #540]	@ (8000a0c <KeyLogic+0x2c8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	78fa      	ldrb	r2, [r7, #3]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d00d      	beq.n	8000814 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80007f8:	4b84      	ldr	r3, [pc, #528]	@ (8000a0c <KeyLogic+0x2c8>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b86      	ldr	r3, [pc, #536]	@ (8000a18 <KeyLogic+0x2d4>)
 80007fe:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 8000800:	4b81      	ldr	r3, [pc, #516]	@ (8000a08 <KeyLogic+0x2c4>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000806:	e005      	b.n	8000814 <KeyLogic+0xd0>
            break;
 8000808:	bf00      	nop
 800080a:	e004      	b.n	8000816 <KeyLogic+0xd2>
            break;
 800080c:	bf00      	nop
 800080e:	e002      	b.n	8000816 <KeyLogic+0xd2>
            break;
 8000810:	bf00      	nop
 8000812:	e000      	b.n	8000816 <KeyLogic+0xd2>
            break;
 8000814:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 8000816:	4b80      	ldr	r3, [pc, #512]	@ (8000a18 <KeyLogic+0x2d4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2bff      	cmp	r3, #255	@ 0xff
 800081c:	f000 8130 	beq.w	8000a80 <KeyLogic+0x33c>
		if (seqState == SEQ_NUMBER) {
 8000820:	4b7e      	ldr	r3, [pc, #504]	@ (8000a1c <KeyLogic+0x2d8>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b06      	cmp	r3, #6
 8000826:	d12a      	bne.n	800087e <KeyLogic+0x13a>
			if (keyPressed >= '0' && keyPressed <= '9') {
 8000828:	4b7b      	ldr	r3, [pc, #492]	@ (8000a18 <KeyLogic+0x2d4>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b2f      	cmp	r3, #47	@ 0x2f
 800082e:	d91c      	bls.n	800086a <KeyLogic+0x126>
 8000830:	4b79      	ldr	r3, [pc, #484]	@ (8000a18 <KeyLogic+0x2d4>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b39      	cmp	r3, #57	@ 0x39
 8000836:	d818      	bhi.n	800086a <KeyLogic+0x126>
				if (numberOfDigits < 6) {
 8000838:	4b79      	ldr	r3, [pc, #484]	@ (8000a20 <KeyLogic+0x2dc>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b05      	cmp	r3, #5
 800083e:	f200 811c 	bhi.w	8000a7a <KeyLogic+0x336>
					accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000842:	4b78      	ldr	r3, [pc, #480]	@ (8000a24 <KeyLogic+0x2e0>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	461a      	mov	r2, r3
 8000850:	4b71      	ldr	r3, [pc, #452]	@ (8000a18 <KeyLogic+0x2d4>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4413      	add	r3, r2
 8000856:	3b30      	subs	r3, #48	@ 0x30
 8000858:	4a72      	ldr	r2, [pc, #456]	@ (8000a24 <KeyLogic+0x2e0>)
 800085a:	6013      	str	r3, [r2, #0]
					numberOfDigits++;
 800085c:	4b70      	ldr	r3, [pc, #448]	@ (8000a20 <KeyLogic+0x2dc>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b6e      	ldr	r3, [pc, #440]	@ (8000a20 <KeyLogic+0x2dc>)
 8000866:	701a      	strb	r2, [r3, #0]
				if (numberOfDigits < 6) {
 8000868:	e107      	b.n	8000a7a <KeyLogic+0x336>
				}
			} else {
				seqState = SEQ_IDLE;
 800086a:	4b6c      	ldr	r3, [pc, #432]	@ (8000a1c <KeyLogic+0x2d8>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
				numberOfDigits = 0;
 8000870:	4b6b      	ldr	r3, [pc, #428]	@ (8000a20 <KeyLogic+0x2dc>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
				accumulatedNumber = 0;
 8000876:	4b6b      	ldr	r3, [pc, #428]	@ (8000a24 <KeyLogic+0x2e0>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e0fd      	b.n	8000a7a <KeyLogic+0x336>
			}
		} else {
		switch (keyPressed) {
 800087e:	4b66      	ldr	r3, [pc, #408]	@ (8000a18 <KeyLogic+0x2d4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	3b24      	subs	r3, #36	@ 0x24
 8000884:	2b30      	cmp	r3, #48	@ 0x30
 8000886:	f200 80df 	bhi.w	8000a48 <KeyLogic+0x304>
 800088a:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <KeyLogic+0x14c>)
 800088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000890:	080009bf 	.word	0x080009bf
 8000894:	08000a49 	.word	0x08000a49
 8000898:	08000a49 	.word	0x08000a49
 800089c:	08000a49 	.word	0x08000a49
 80008a0:	08000a49 	.word	0x08000a49
 80008a4:	08000a49 	.word	0x08000a49
 80008a8:	08000a49 	.word	0x08000a49
 80008ac:	08000a49 	.word	0x08000a49
 80008b0:	08000a49 	.word	0x08000a49
 80008b4:	08000a49 	.word	0x08000a49
 80008b8:	08000a49 	.word	0x08000a49
 80008bc:	08000a49 	.word	0x08000a49
 80008c0:	08000a49 	.word	0x08000a49
 80008c4:	08000a49 	.word	0x08000a49
 80008c8:	08000a49 	.word	0x08000a49
 80008cc:	08000a49 	.word	0x08000a49
 80008d0:	08000a49 	.word	0x08000a49
 80008d4:	08000a49 	.word	0x08000a49
 80008d8:	08000a49 	.word	0x08000a49
 80008dc:	08000a49 	.word	0x08000a49
 80008e0:	08000a49 	.word	0x08000a49
 80008e4:	08000a49 	.word	0x08000a49
 80008e8:	08000a49 	.word	0x08000a49
 80008ec:	08000a49 	.word	0x08000a49
 80008f0:	08000a49 	.word	0x08000a49
 80008f4:	08000a49 	.word	0x08000a49
 80008f8:	08000a49 	.word	0x08000a49
 80008fc:	08000a49 	.word	0x08000a49
 8000900:	08000a49 	.word	0x08000a49
 8000904:	08000955 	.word	0x08000955
 8000908:	0800096b 	.word	0x0800096b
 800090c:	0800097f 	.word	0x0800097f
 8000910:	080009ef 	.word	0x080009ef
 8000914:	08000993 	.word	0x08000993
 8000918:	08000a31 	.word	0x08000a31
 800091c:	08000a49 	.word	0x08000a49
 8000920:	08000a49 	.word	0x08000a49
 8000924:	08000a49 	.word	0x08000a49
 8000928:	08000a49 	.word	0x08000a49
 800092c:	08000a49 	.word	0x08000a49
 8000930:	080009d7 	.word	0x080009d7
 8000934:	08000a49 	.word	0x08000a49
 8000938:	08000a49 	.word	0x08000a49
 800093c:	08000a49 	.word	0x08000a49
 8000940:	08000a49 	.word	0x08000a49
 8000944:	08000a49 	.word	0x08000a49
 8000948:	08000a49 	.word	0x08000a49
 800094c:	08000a49 	.word	0x08000a49
 8000950:	080009a7 	.word	0x080009a7
			case 'A':
				SevenSegBuffer[0] = 0;
 8000954:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <KeyLogic+0x2e4>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 10000;
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <KeyLogic+0x2e4>)
 800095c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000960:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 0;
 8000962:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <KeyLogic+0x2e4>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
				break;
 8000968:	e087      	b.n	8000a7a <KeyLogic+0x336>
			case 'B':
				SevenSegBuffer[0] = 0;
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <KeyLogic+0x2e4>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 100000;
 8000970:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <KeyLogic+0x2e4>)
 8000972:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <KeyLogic+0x2e8>)
 8000974:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 0;
 8000976:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <KeyLogic+0x2e4>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
				break;
 800097c:	e07d      	b.n	8000a7a <KeyLogic+0x336>
			case 'C':
				SevenSegBuffer[0] = 0;
 800097e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <KeyLogic+0x2e4>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 0;
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <KeyLogic+0x2e4>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 1;
 800098a:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <KeyLogic+0x2e4>)
 800098c:	2201      	movs	r2, #1
 800098e:	609a      	str	r2, [r3, #8]
				break;
 8000990:	e073      	b.n	8000a7a <KeyLogic+0x336>
			case 'E':
				SevenSegBuffer[0] = 0;
 8000992:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <KeyLogic+0x2e4>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 0;
 8000998:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <KeyLogic+0x2e4>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 100;
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <KeyLogic+0x2e4>)
 80009a0:	2264      	movs	r2, #100	@ 0x64
 80009a2:	609a      	str	r2, [r3, #8]
				break;
 80009a4:	e069      	b.n	8000a7a <KeyLogic+0x336>
			case 'T':
				if (seqState == SEQ_IDLE) {
 80009a6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <KeyLogic+0x2d8>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <KeyLogic+0x272>
					seqState = SEQ_PRESSED_T;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <KeyLogic+0x2d8>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 80009b4:	e061      	b.n	8000a7a <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <KeyLogic+0x2d8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
				break;
 80009bc:	e05d      	b.n	8000a7a <KeyLogic+0x336>
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <KeyLogic+0x2d8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d103      	bne.n	80009ce <KeyLogic+0x28a>
					seqState = SEQ_PRESSED_T_$;
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <KeyLogic+0x2d8>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 80009cc:	e055      	b.n	8000a7a <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <KeyLogic+0x2d8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
				break;
 80009d4:	e051      	b.n	8000a7a <KeyLogic+0x336>
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <KeyLogic+0x2d8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d103      	bne.n	80009e6 <KeyLogic+0x2a2>
					seqState = SEQ_PRESSED_T_L;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <KeyLogic+0x2d8>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 80009e4:	e049      	b.n	8000a7a <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <KeyLogic+0x2d8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
				break;
 80009ec:	e045      	b.n	8000a7a <KeyLogic+0x336>
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <KeyLogic+0x2d8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d103      	bne.n	80009fe <KeyLogic+0x2ba>
					seqState = SEQ_PRESSED_T_F3;
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <KeyLogic+0x2d8>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 80009fc:	e03d      	b.n	8000a7a <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <KeyLogic+0x2d8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
				break;
 8000a04:	e039      	b.n	8000a7a <KeyLogic+0x336>
 8000a06:	bf00      	nop
 8000a08:	200000a5 	.word	0x200000a5
 8000a0c:	20000001 	.word	0x20000001
 8000a10:	20000098 	.word	0x20000098
 8000a14:	2000009c 	.word	0x2000009c
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	200000a6 	.word	0x200000a6
 8000a20:	200000a4 	.word	0x200000a4
 8000a24:	200000a0 	.word	0x200000a0
 8000a28:	20000010 	.word	0x20000010
 8000a2c:	000186a0 	.word	0x000186a0
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <KeyLogic+0x344>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d103      	bne.n	8000a40 <KeyLogic+0x2fc>
					seqState = SEQ_PRESSED_T_F4;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <KeyLogic+0x344>)
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000a3e:	e01c      	b.n	8000a7a <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <KeyLogic+0x344>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
				break;
 8000a46:	e018      	b.n	8000a7a <KeyLogic+0x336>
			default:
				if (keyPressed >= '0' && keyPressed <= '9') {
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <KeyLogic+0x348>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a4e:	d910      	bls.n	8000a72 <KeyLogic+0x32e>
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <KeyLogic+0x348>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b39      	cmp	r3, #57	@ 0x39
 8000a56:	d80c      	bhi.n	8000a72 <KeyLogic+0x32e>
					seqState = SEQ_NUMBER;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <KeyLogic+0x344>)
 8000a5a:	2206      	movs	r2, #6
 8000a5c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = keyPressed - '0';
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <KeyLogic+0x348>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3b30      	subs	r3, #48	@ 0x30
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <KeyLogic+0x34c>)
 8000a68:	601a      	str	r2, [r3, #0]
					numberOfDigits = 1;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <KeyLogic+0x350>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000a70:	e002      	b.n	8000a78 <KeyLogic+0x334>
					seqState = SEQ_IDLE;
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <KeyLogic+0x344>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
				break;
 8000a78:	bf00      	nop
			}
		}
	keyPressed = 0xFF;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <KeyLogic+0x348>)
 8000a7c:	22ff      	movs	r2, #255	@ 0xff
 8000a7e:	701a      	strb	r2, [r3, #0]
    }
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000a6 	.word	0x200000a6
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	200000a0 	.word	0x200000a0
 8000a94:	200000a4 	.word	0x200000a4

08000a98 <KeyLogic_Action>:
void KeyLogic_Action() {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
    switch (seqState) {
 8000a9c:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <KeyLogic_Action+0xdc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d858      	bhi.n	8000b56 <KeyLogic_Action+0xbe>
 8000aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8000aac <KeyLogic_Action+0x14>)
 8000aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aaa:	bf00      	nop
 8000aac:	08000ac9 	.word	0x08000ac9
 8000ab0:	08000add 	.word	0x08000add
 8000ab4:	08000b05 	.word	0x08000b05
 8000ab8:	08000af1 	.word	0x08000af1
 8000abc:	08000b19 	.word	0x08000b19
 8000ac0:	08000b2d 	.word	0x08000b2d
 8000ac4:	08000b41 	.word	0x08000b41
        case SEQ_IDLE:
            SevenSegBuffer[0] = 0;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
            break;
 8000ada:	e046      	b.n	8000b6a <KeyLogic_Action+0xd2>
        case SEQ_PRESSED_T:
            SevenSegBuffer[0] = 0;
 8000adc:	4b26      	ldr	r3, [pc, #152]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 999999;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000aea:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <KeyLogic_Action+0xe4>)
 8000aec:	609a      	str	r2, [r3, #8]
            break;
 8000aee:	e03c      	b.n	8000b6a <KeyLogic_Action+0xd2>
        case SEQ_PRESSED_T_$:
            SevenSegBuffer[0] = 0;
 8000af0:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 111111;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	@ (8000b80 <KeyLogic_Action+0xe8>)
 8000b00:	609a      	str	r2, [r3, #8]
            break;
 8000b02:	e032      	b.n	8000b6a <KeyLogic_Action+0xd2>
        case SEQ_PRESSED_T_L:
            SevenSegBuffer[0] = 0;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 123456;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <KeyLogic_Action+0xec>)
 8000b0e:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
            break;
 8000b16:	e028      	b.n	8000b6a <KeyLogic_Action+0xd2>
        case SEQ_PRESSED_T_F3:
            SevenSegBuffer[0] = 333333;
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <KeyLogic_Action+0xf0>)
 8000b1c:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
            break;
 8000b2a:	e01e      	b.n	8000b6a <KeyLogic_Action+0xd2>
        case SEQ_PRESSED_T_F4:
            SevenSegBuffer[0] = 444444;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b2e:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <KeyLogic_Action+0xf4>)
 8000b30:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
            break;
 8000b3e:	e014      	b.n	8000b6a <KeyLogic_Action+0xd2>
        case SEQ_NUMBER:
			SevenSegBuffer[0] = accumulatedNumber;
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <KeyLogic_Action+0xf8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b46:	6013      	str	r3, [r2, #0]
			SevenSegBuffer[1] = 0;
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
			SevenSegBuffer[2] = 0;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
			break;
 8000b54:	e009      	b.n	8000b6a <KeyLogic_Action+0xd2>
        default:
            SevenSegBuffer[0] = 0;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000b62:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <KeyLogic_Action+0xe0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
            break;
 8000b68:	bf00      	nop
    }
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	200000a6 	.word	0x200000a6
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	000f423f 	.word	0x000f423f
 8000b80:	0001b207 	.word	0x0001b207
 8000b84:	0001e240 	.word	0x0001e240
 8000b88:	00051615 	.word	0x00051615
 8000b8c:	0006c81c 	.word	0x0006c81c
 8000b90:	200000a0 	.word	0x200000a0

08000b94 <SevenSegLEDsHandler>:
volatile uint8_t SevenSegScanState = 0;
uint32_t SevenSegBuffer[3] = {123456, 654321, 987654};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	f200 815d 	bhi.w	8000e62 <SevenSegLEDsHandler+0x2ce>
 8000ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <SevenSegLEDsHandler+0x1c>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc9 	.word	0x08000bc9
 8000bb4:	08000c23 	.word	0x08000c23
 8000bb8:	08000c95 	.word	0x08000c95
 8000bbc:	08000d07 	.word	0x08000d07
 8000bc0:	08000d79 	.word	0x08000d79
 8000bc4:	08000deb 	.word	0x08000deb
        case 0:
            output[0] = buffer[0] % 10;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6819      	ldr	r1, [r3, #0]
 8000bcc:	4ba8      	ldr	r3, [pc, #672]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000bce:	fba3 2301 	umull	r2, r3, r3, r1
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	1aca      	subs	r2, r1, r3
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	4ba4      	ldr	r3, [pc, #656]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000be2:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3304      	adds	r3, #4
 8000be8:	6819      	ldr	r1, [r3, #0]
 8000bea:	4ba1      	ldr	r3, [pc, #644]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000bec:	fba3 2301 	umull	r2, r3, r3, r1
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	1aca      	subs	r2, r1, r3
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	4b9d      	ldr	r3, [pc, #628]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000c00:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3308      	adds	r3, #8
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	4b99      	ldr	r3, [pc, #612]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1aca      	subs	r2, r1, r3
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	4b95      	ldr	r3, [pc, #596]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000c1e:	709a      	strb	r2, [r3, #2]
            break;
 8000c20:	e11f      	b.n	8000e62 <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a92      	ldr	r2, [pc, #584]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	08d9      	lsrs	r1, r3, #3
 8000c2e:	4b90      	ldr	r3, [pc, #576]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c30:	fba3 2301 	umull	r2, r3, r3, r1
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1aca      	subs	r2, r1, r3
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	4b8c      	ldr	r3, [pc, #560]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000c44:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a88      	ldr	r2, [pc, #544]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	08d9      	lsrs	r1, r3, #3
 8000c54:	4b86      	ldr	r3, [pc, #536]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c56:	fba3 2301 	umull	r2, r3, r3, r1
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	1aca      	subs	r2, r1, r3
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	4b82      	ldr	r3, [pc, #520]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000c6a:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7f      	ldr	r2, [pc, #508]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	08d9      	lsrs	r1, r3, #3
 8000c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000c7c:	fba3 2301 	umull	r2, r3, r3, r1
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	1aca      	subs	r2, r1, r3
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	4b79      	ldr	r3, [pc, #484]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000c90:	709a      	strb	r2, [r3, #2]
            break;
 8000c92:	e0e6      	b.n	8000e62 <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a77      	ldr	r2, [pc, #476]	@ (8000e78 <SevenSegLEDsHandler+0x2e4>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0959      	lsrs	r1, r3, #5
 8000ca0:	4b73      	ldr	r3, [pc, #460]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	1aca      	subs	r2, r1, r3
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000cb6:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a6e      	ldr	r2, [pc, #440]	@ (8000e78 <SevenSegLEDsHandler+0x2e4>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	0959      	lsrs	r1, r3, #5
 8000cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000cc8:	fba3 2301 	umull	r2, r3, r3, r1
 8000ccc:	08da      	lsrs	r2, r3, #3
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	1aca      	subs	r2, r1, r3
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	4b66      	ldr	r3, [pc, #408]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000cdc:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3308      	adds	r3, #8
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a64      	ldr	r2, [pc, #400]	@ (8000e78 <SevenSegLEDsHandler+0x2e4>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0959      	lsrs	r1, r3, #5
 8000cec:	4b60      	ldr	r3, [pc, #384]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000cee:	fba3 2301 	umull	r2, r3, r3, r1
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1aca      	subs	r2, r1, r3
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	4b5c      	ldr	r3, [pc, #368]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000d02:	709a      	strb	r2, [r3, #2]
            break;
 8000d04:	e0ad      	b.n	8000e62 <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000e7c <SevenSegLEDsHandler+0x2e8>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0999      	lsrs	r1, r3, #6
 8000d12:	4b57      	ldr	r3, [pc, #348]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000d14:	fba3 2301 	umull	r2, r3, r3, r1
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	1aca      	subs	r2, r1, r3
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000d28:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a52      	ldr	r2, [pc, #328]	@ (8000e7c <SevenSegLEDsHandler+0x2e8>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0999      	lsrs	r1, r3, #6
 8000d38:	4b4d      	ldr	r3, [pc, #308]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	1aca      	subs	r2, r1, r3
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	4b49      	ldr	r3, [pc, #292]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000d4e:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3308      	adds	r3, #8
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a49      	ldr	r2, [pc, #292]	@ (8000e7c <SevenSegLEDsHandler+0x2e8>)
 8000d58:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5c:	0999      	lsrs	r1, r3, #6
 8000d5e:	4b44      	ldr	r3, [pc, #272]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000d60:	fba3 2301 	umull	r2, r3, r3, r1
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	1aca      	subs	r2, r1, r3
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	4b40      	ldr	r3, [pc, #256]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000d74:	709a      	strb	r2, [r3, #2]
            break;
 8000d76:	e074      	b.n	8000e62 <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a40      	ldr	r2, [pc, #256]	@ (8000e80 <SevenSegLEDsHandler+0x2ec>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	0b59      	lsrs	r1, r3, #13
 8000d84:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000d86:	fba3 2301 	umull	r2, r3, r3, r1
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	1aca      	subs	r2, r1, r3
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000d9a:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a37      	ldr	r2, [pc, #220]	@ (8000e80 <SevenSegLEDsHandler+0x2ec>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0b59      	lsrs	r1, r3, #13
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000dac:	fba3 2301 	umull	r2, r3, r3, r1
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	1aca      	subs	r2, r1, r3
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000dc0:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8000e80 <SevenSegLEDsHandler+0x2ec>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	0b59      	lsrs	r1, r3, #13
 8000dd0:	4b27      	ldr	r3, [pc, #156]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	1aca      	subs	r2, r1, r3
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000de6:	709a      	strb	r2, [r3, #2]
            break;
 8000de8:	e03b      	b.n	8000e62 <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	4a24      	ldr	r2, [pc, #144]	@ (8000e84 <SevenSegLEDsHandler+0x2f0>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	09d9      	lsrs	r1, r3, #7
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	1aca      	subs	r2, r1, r3
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000e0e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <SevenSegLEDsHandler+0x2f0>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	09d9      	lsrs	r1, r3, #7
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000e22:	fba3 2301 	umull	r2, r3, r3, r1
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1aca      	subs	r2, r1, r3
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000e36:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	4a10      	ldr	r2, [pc, #64]	@ (8000e84 <SevenSegLEDsHandler+0x2f0>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	09d9      	lsrs	r1, r3, #7
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <SevenSegLEDsHandler+0x2dc>)
 8000e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1aca      	subs	r2, r1, r3
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
 8000e5e:	709a      	strb	r2, [r3, #2]
            break;
 8000e60:	bf00      	nop
    }
    return output;
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <SevenSegLEDsHandler+0x2e0>)
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	200000b4 	.word	0x200000b4
 8000e78:	51eb851f 	.word	0x51eb851f
 8000e7c:	10624dd3 	.word	0x10624dd3
 8000e80:	d1b71759 	.word	0xd1b71759
 8000e84:	0a7c5ac5 	.word	0x0a7c5ac5

08000e88 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
 8000e94:	4613      	mov	r3, r2
 8000e96:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fe79 	bl	8000b94 <SevenSegLEDsHandler>
 8000ea2:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d820      	bhi.n	8000eec <UpdateDisplayBuffer+0x64>
 8000eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <UpdateDisplayBuffer+0x28>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000ec9 	.word	0x08000ec9
 8000eb4:	08000ecf 	.word	0x08000ecf
 8000eb8:	08000ed5 	.word	0x08000ed5
 8000ebc:	08000edb 	.word	0x08000edb
 8000ec0:	08000ee1 	.word	0x08000ee1
 8000ec4:	08000ee7 	.word	0x08000ee7
        case 0:
            curr_scan = 0b11111110;
 8000ec8:	23fe      	movs	r3, #254	@ 0xfe
 8000eca:	73fb      	strb	r3, [r7, #15]
            break;
 8000ecc:	e011      	b.n	8000ef2 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 8000ece:	23fd      	movs	r3, #253	@ 0xfd
 8000ed0:	73fb      	strb	r3, [r7, #15]
            break;
 8000ed2:	e00e      	b.n	8000ef2 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8000ed4:	23fb      	movs	r3, #251	@ 0xfb
 8000ed6:	73fb      	strb	r3, [r7, #15]
            break;
 8000ed8:	e00b      	b.n	8000ef2 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 8000eda:	23f7      	movs	r3, #247	@ 0xf7
 8000edc:	73fb      	strb	r3, [r7, #15]
            break;
 8000ede:	e008      	b.n	8000ef2 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000ee0:	23ef      	movs	r3, #239	@ 0xef
 8000ee2:	73fb      	strb	r3, [r7, #15]
            break;
 8000ee4:	e005      	b.n	8000ef2 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8000ee6:	23df      	movs	r3, #223	@ 0xdf
 8000ee8:	73fb      	strb	r3, [r7, #15]
            break;
 8000eea:	e002      	b.n	8000ef2 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8000eec:	23ff      	movs	r3, #255	@ 0xff
 8000eee:	73fb      	strb	r3, [r7, #15]
            break;
 8000ef0:	bf00      	nop
    }
    displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 8000ef2:	78ba      	ldrb	r2, [r7, #2]
 8000ef4:	491f      	ldr	r1, [pc, #124]	@ (8000f74 <UpdateDisplayBuffer+0xec>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	22ff      	movs	r2, #255	@ 0xff
 8000f00:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][1] = digitMapWithDP[curr_digit[2]];
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3302      	adds	r3, #2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	78ba      	ldrb	r2, [r7, #2]
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <UpdateDisplayBuffer+0xf0>)
 8000f0e:	5c58      	ldrb	r0, [r3, r1]
 8000f10:	4918      	ldr	r1, [pc, #96]	@ (8000f74 <UpdateDisplayBuffer+0xec>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][2] = curr_scan;
 8000f20:	78ba      	ldrb	r2, [r7, #2]
 8000f22:	4914      	ldr	r1, [pc, #80]	@ (8000f74 <UpdateDisplayBuffer+0xec>)
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[1]];
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	3301      	adds	r3, #1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	78ba      	ldrb	r2, [r7, #2]
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <UpdateDisplayBuffer+0xf0>)
 8000f3e:	5c58      	ldrb	r0, [r3, r1]
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <UpdateDisplayBuffer+0xec>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][4] = digitMapWithDP[curr_digit[0]];
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	78ba      	ldrb	r2, [r7, #2]
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <UpdateDisplayBuffer+0xf0>)
 8000f5a:	5c58      	ldrb	r0, [r3, r1]
 8000f5c:	4905      	ldr	r1, [pc, #20]	@ (8000f74 <UpdateDisplayBuffer+0xec>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	3304      	adds	r3, #4
 8000f68:	4602      	mov	r2, r0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000a8 	.word	0x200000a8
 8000f78:	20000004 	.word	0x20000004

08000f7c <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <SevenSegLEDsScan+0x7c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	bfb8      	it	lt
 8000f92:	425b      	neglt	r3, r3
 8000f94:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <SevenSegLEDsScan+0x80>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4817      	ldr	r0, [pc, #92]	@ (8001000 <SevenSegLEDsScan+0x84>)
 8000fa2:	f7ff ff71 	bl	8000e88 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa6:	b672      	cpsid	i
}
 8000fa8:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <SevenSegLEDsScan+0x7c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <SevenSegLEDsScan+0x88>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f824 	bl	800100c <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8000fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <SevenSegLEDsScan+0x7c>)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fca:	b662      	cpsie	i
}
 8000fcc:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <SevenSegLEDsScan+0x80>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <SevenSegLEDsScan+0x8c>)
 8000fd8:	fb83 3102 	smull	r3, r1, r3, r2
 8000fdc:	17d3      	asrs	r3, r2, #31
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	440b      	add	r3, r1
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	1ad1      	subs	r1, r2, r3
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <SevenSegLEDsScan+0x80>)
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000b2 	.word	0x200000b2
 8000ffc:	200000a7 	.word	0x200000a7
 8001000:	20000010 	.word	0x20000010
 8001004:	200000a8 	.word	0x200000a8
 8001008:	2aaaaaab 	.word	0x2aaaaaab

0800100c <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800101c:	4823      	ldr	r0, [pc, #140]	@ (80010ac <ShiftOut_SPI+0xa0>)
 800101e:	f000 fe77 	bl	8001d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	4822      	ldr	r0, [pc, #136]	@ (80010b0 <ShiftOut_SPI+0xa4>)
 8001028:	f000 fe72 	bl	8001d10 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e003      	b.n	800103a <ShiftOut_SPI+0x2e>
 8001032:	bf00      	nop
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001040:	dbf7      	blt.n	8001032 <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001042:	bf00      	nop
 8001044:	481b      	ldr	r0, [pc, #108]	@ (80010b4 <ShiftOut_SPI+0xa8>)
 8001046:	f001 fcbf 	bl	80029c8 <HAL_SPI_GetState>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d1f9      	bne.n	8001044 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b29a      	uxth	r2, r3
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4816      	ldr	r0, [pc, #88]	@ (80010b4 <ShiftOut_SPI+0xa8>)
 800105c:	f001 fb71 	bl	8002742 <HAL_SPI_Transmit>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 8001066:	f000 f9e5 	bl	8001434 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	e003      	b.n	8001078 <ShiftOut_SPI+0x6c>
 8001070:	bf00      	nop
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3301      	adds	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107e:	dbf7      	blt.n	8001070 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001080:	bf00      	nop
 8001082:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <ShiftOut_SPI+0xa8>)
 8001084:	f001 fca0 	bl	80029c8 <HAL_SPI_GetState>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d1f9      	bne.n	8001082 <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <ShiftOut_SPI+0xa0>)
 8001096:	f000 fe3b 	bl	8001d10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2180      	movs	r1, #128	@ 0x80
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <ShiftOut_SPI+0xa4>)
 80010a0:	f000 fe36 	bl	8001d10 <HAL_GPIO_WritePin>

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	200000b8 	.word	0x200000b8

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010bc:	f000 fb68 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c0:	f000 f828 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c4:	f000 f8fa 	bl	80012bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80010c8:	f000 f88c 	bl	80011e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80010cc:	f000 f8c0 	bl	8001250 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010d0:	f002 f81c 	bl	800310c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80010d4:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <main+0x44>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4809      	ldr	r0, [pc, #36]	@ (8001100 <main+0x48>)
 80010da:	f002 f861 	bl	80031a0 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <main+0x4c>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80010e4:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <main+0x50>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4808      	ldr	r0, [pc, #32]	@ (800110c <main+0x54>)
 80010ea:	f002 f859 	bl	80031a0 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a07      	ldr	r2, [pc, #28]	@ (8001110 <main+0x58>)
 80010f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f4:	f002 f82e 	bl	8003154 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <main+0x40>
 80010fc:	08005e8c 	.word	0x08005e8c
 8001100:	080013c1 	.word	0x080013c1
 8001104:	20000168 	.word	0x20000168
 8001108:	08005eb0 	.word	0x08005eb0
 800110c:	080013fd 	.word	0x080013fd
 8001110:	2000016c 	.word	0x2000016c

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	@ 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2230      	movs	r2, #48	@ 0x30
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fda0 	bl	8005c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <SystemClock_Config+0xc8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a26      	ldr	r2, [pc, #152]	@ (80011dc <SystemClock_Config+0xc8>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <SystemClock_Config+0xc8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a20      	ldr	r2, [pc, #128]	@ (80011e0 <SystemClock_Config+0xcc>)
 800115e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <SystemClock_Config+0xcc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001184:	2308      	movs	r3, #8
 8001186:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001188:	2364      	movs	r3, #100	@ 0x64
 800118a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fdd3 	bl	8001d44 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011a4:	f000 f946 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2103      	movs	r1, #3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 f835 	bl	8002234 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011d0:	f000 f930 	bl	8001434 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	@ 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_SPI1_Init+0x64>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <MX_SPI1_Init+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_SPI1_Init+0x64>)
 80011f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_SPI1_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <MX_SPI1_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_SPI1_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_SPI1_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_SPI1_Init+0x64>)
 8001210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_SPI1_Init+0x64>)
 8001218:	2220      	movs	r2, #32
 800121a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_SPI1_Init+0x64>)
 8001230:	220a      	movs	r2, #10
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_SPI1_Init+0x64>)
 8001236:	f001 f9fb 	bl	8002630 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001240:	f000 f8f8 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000b8 	.word	0x200000b8
 800124c:	40013000 	.word	0x40013000

08001250 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001256:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <MX_SPI2_Init+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800125c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001260:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800127c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001280:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800129c:	220a      	movs	r2, #10
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <MX_SPI2_Init+0x64>)
 80012a2:	f001 f9c5 	bl	8002630 <HAL_SPI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012ac:	f000 f8c2 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000110 	.word	0x20000110
 80012b8:	40003800 	.word	0x40003800

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a36      	ldr	r2, [pc, #216]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a2f      	ldr	r2, [pc, #188]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a28      	ldr	r2, [pc, #160]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_GPIO_Init+0xf8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001342:	2200      	movs	r2, #0
 8001344:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8001348:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <MX_GPIO_Init+0xfc>)
 800134a:	f000 fce1 	bl	8001d10 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2180      	movs	r1, #128	@ 0x80
 8001352:	481a      	ldr	r0, [pc, #104]	@ (80013bc <MX_GPIO_Init+0x100>)
 8001354:	f000 fcdc 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001358:	231f      	movs	r3, #31
 800135a:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <MX_GPIO_Init+0xfc>)
 800136c:	f000 fb34 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001370:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8001374:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	@ (80013b8 <MX_GPIO_Init+0xfc>)
 800138a:	f000 fb25 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <MX_GPIO_Init+0x100>)
 80013a6:	f000 fb17 	bl	80019d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800

080013c0 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <Led3x6Run+0x38>)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d2:	6018      	str	r0, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 80013d8:	f7ff fdd0 	bl	8000f7c <SevenSegLEDsScan>
	  osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f001 ff71 	bl	80032c4 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2105      	movs	r1, #5
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe0f 	bl	800100c <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f001 ff68 	bl	80032c4 <osDelay>
	  SevenSegLEDsScan();
 80013f4:	bf00      	nop
 80013f6:	e7ef      	b.n	80013d8 <Led3x6Run+0x18>
 80013f8:	08005e6c 	.word	0x08005e6c

080013fc <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 8001404:	f7ff f99e 	bl	8000744 <KeyLogic>
	 KeyLogic_Action();
 8001408:	f7ff fb46 	bl	8000a98 <KeyLogic_Action>
	 osDelay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f001 ff59 	bl	80032c4 <osDelay>
	 KeyLogic();
 8001412:	bf00      	nop
 8001414:	e7f6      	b.n	8001404 <KeyPad4x5Run+0x8>

08001416 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001426:	d101      	bne.n	800142c <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001428:	f000 f9d4 	bl	80017d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_MspInit+0x54>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <HAL_MspInit+0x54>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_MspInit+0x54>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_MspInit+0x54>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_MspInit+0x54>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_MspInit+0x54>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	210f      	movs	r1, #15
 8001482:	f06f 0001 	mvn.w	r0, #1
 8001486:	f000 fa7d 	bl	8001984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	@ 0x30
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a41      	ldr	r2, [pc, #260]	@ (80015bc <HAL_SPI_MspInit+0x124>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12c      	bne.n	8001514 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	4b40      	ldr	r3, [pc, #256]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	4a3f      	ldr	r2, [pc, #252]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 80014c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ca:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a38      	ldr	r2, [pc, #224]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014f2:	23a0      	movs	r3, #160	@ 0xa0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001502:	2305      	movs	r3, #5
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	482d      	ldr	r0, [pc, #180]	@ (80015c4 <HAL_SPI_MspInit+0x12c>)
 800150e:	f000 fa63 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001512:	e04f      	b.n	80015b4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2b      	ldr	r2, [pc, #172]	@ (80015c8 <HAL_SPI_MspInit+0x130>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d14a      	bne.n	80015b4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a26      	ldr	r2, [pc, #152]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_SPI_MspInit+0x128>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001572:	2308      	movs	r3, #8
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001582:	2305      	movs	r3, #5
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	480f      	ldr	r0, [pc, #60]	@ (80015cc <HAL_SPI_MspInit+0x134>)
 800158e:	f000 fa23 	bl	80019d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a4:	2305      	movs	r3, #5
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4808      	ldr	r0, [pc, #32]	@ (80015d0 <HAL_SPI_MspInit+0x138>)
 80015b0:	f000 fa12 	bl	80019d8 <HAL_GPIO_Init>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	@ 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40013000 	.word	0x40013000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40003800 	.word	0x40003800
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020400 	.word	0x40020400

080015d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	@ 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_InitTick+0xe8>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a33      	ldr	r2, [pc, #204]	@ (80016bc <HAL_InitTick+0xe8>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f4:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_InitTick+0xe8>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001600:	f107 0210 	add.w	r2, r7, #16
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f000 ffde 	bl	80025cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800161a:	f000 ffc3 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 800161e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001620:	e004      	b.n	800162c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001622:	f000 ffbf 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8001626:	4603      	mov	r3, r0
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800162c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162e:	4a24      	ldr	r2, [pc, #144]	@ (80016c0 <HAL_InitTick+0xec>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3b01      	subs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800163a:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <HAL_InitTick+0xf0>)
 800163c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001640:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <HAL_InitTick+0xf0>)
 8001644:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001648:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800164a:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <HAL_InitTick+0xf0>)
 800164c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_InitTick+0xf0>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_InitTick+0xf0>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_InitTick+0xf0>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001662:	4818      	ldr	r0, [pc, #96]	@ (80016c4 <HAL_InitTick+0xf0>)
 8001664:	f001 fa9a 	bl	8002b9c <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800166e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001672:	2b00      	cmp	r3, #0
 8001674:	d11b      	bne.n	80016ae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001676:	4813      	ldr	r0, [pc, #76]	@ (80016c4 <HAL_InitTick+0xf0>)
 8001678:	f001 faea 	bl	8002c50 <HAL_TIM_Base_Start_IT>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001682:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001686:	2b00      	cmp	r3, #0
 8001688:	d111      	bne.n	80016ae <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800168a:	201c      	movs	r0, #28
 800168c:	f000 f996 	bl	80019bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	d808      	bhi.n	80016a8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001696:	2200      	movs	r2, #0
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	201c      	movs	r0, #28
 800169c:	f000 f972 	bl	8001984 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a0:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_InitTick+0xf4>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e002      	b.n	80016ae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3738      	adds	r7, #56	@ 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	20000170 	.word	0x20000170
 80016c8:	20000020 	.word	0x20000020

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <NMI_Handler+0x4>

080016d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM2_IRQHandler+0x10>)
 800170a:	f001 fb03 	bl	8002d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000170 	.word	0x20000170

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	@ (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001774 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001740:	f7ff ffea 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	@ (800177c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	@ (8001788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f004 fadb 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7ff fca3 	bl	80010b8 <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001780:	08005efc 	.word	0x08005efc
  ldr r2, =_sbss
 8001784:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001788:	20004ce4 	.word	0x20004ce4

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <HAL_Init+0x40>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800179e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <HAL_Init+0x40>)
 80017a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_Init+0x40>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f8d8 	bl	800196e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	200f      	movs	r0, #15
 80017c0:	f7ff ff08 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fe3c 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000024 	.word	0x20000024
 80017f8:	200001b8 	.word	0x200001b8

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200001b8 	.word	0x200001b8

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	@ (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff4c 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001996:	f7ff ff61 	bl	800185c <__NVIC_GetPriorityGrouping>
 800199a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	6978      	ldr	r0, [r7, #20]
 80019a2:	f7ff ffb1 	bl	8001908 <NVIC_EncodePriority>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff80 	bl	80018b4 <__NVIC_SetPriority>
}
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff54 	bl	8001878 <__NVIC_EnableIRQ>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e159      	b.n	8001ca8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8148 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a2 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b57      	ldr	r3, [pc, #348]	@ (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a56      	ldr	r2, [pc, #344]	@ (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b54      	ldr	r3, [pc, #336]	@ (8001cc0 <HAL_GPIO_Init+0x2e8>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	@ (8001cc8 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x202>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a48      	ldr	r2, [pc, #288]	@ (8001ccc <HAL_GPIO_Init+0x2f4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fe>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a47      	ldr	r2, [pc, #284]	@ (8001cd0 <HAL_GPIO_Init+0x2f8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x1fa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x1f6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a45      	ldr	r2, [pc, #276]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x1f2>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x204>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	@ (8001cc4 <HAL_GPIO_Init+0x2ec>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a24      	ldr	r2, [pc, #144]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1a      	ldr	r2, [pc, #104]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f aea2 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	@ 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e001      	b.n	8001d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e267      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d075      	beq.n	8001e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d62:	4b88      	ldr	r3, [pc, #544]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d00c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6e:	4b85      	ldr	r3, [pc, #532]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d112      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d7a:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4b7e      	ldr	r3, [pc, #504]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d05b      	beq.n	8001e4c <HAL_RCC_OscConfig+0x108>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d157      	bne.n	8001e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e242      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x74>
 8001daa:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a75      	ldr	r2, [pc, #468]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0xb0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x98>
 8001dc2:	4b70      	ldr	r3, [pc, #448]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b6d      	ldr	r3, [pc, #436]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xb0>
 8001ddc:	4b69      	ldr	r3, [pc, #420]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a68      	ldr	r2, [pc, #416]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b66      	ldr	r3, [pc, #408]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fcfe 	bl	80017fc <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fcfa 	bl	80017fc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	@ 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e207      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b5b      	ldr	r3, [pc, #364]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xc0>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fcea 	bl	80017fc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fce6 	bl	80017fc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1f3      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	4b51      	ldr	r3, [pc, #324]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0xe8>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b44      	ldr	r3, [pc, #272]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x152>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1c7      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4937      	ldr	r1, [pc, #220]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e03a      	b.n	8001f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_RCC_OscConfig+0x244>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff fc9f 	bl	80017fc <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fc9b 	bl	80017fc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1a8      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4925      	ldr	r1, [pc, #148]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_RCC_OscConfig+0x244>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff fc7e 	bl	80017fc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff fc7a 	bl	80017fc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e187      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d036      	beq.n	8001f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_RCC_OscConfig+0x248>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fc5e 	bl	80017fc <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fc5a 	bl	80017fc <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e167      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_RCC_OscConfig+0x240>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x200>
 8001f62:	e01b      	b.n	8001f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_RCC_OscConfig+0x248>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fc47 	bl	80017fc <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	e00e      	b.n	8001f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fc43 	bl	80017fc <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d907      	bls.n	8001f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e150      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b88      	ldr	r3, [pc, #544]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ea      	bne.n	8001f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8097 	beq.w	80020d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b81      	ldr	r3, [pc, #516]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b7a      	ldr	r3, [pc, #488]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b77      	ldr	r3, [pc, #476]	@ (80021b8 <HAL_RCC_OscConfig+0x474>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b74      	ldr	r3, [pc, #464]	@ (80021b8 <HAL_RCC_OscConfig+0x474>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a73      	ldr	r2, [pc, #460]	@ (80021b8 <HAL_RCC_OscConfig+0x474>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fc03 	bl	80017fc <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7ff fbff 	bl	80017fc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e10c      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b6a      	ldr	r3, [pc, #424]	@ (80021b8 <HAL_RCC_OscConfig+0x474>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x2ea>
 8002020:	4b64      	ldr	r3, [pc, #400]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a63      	ldr	r2, [pc, #396]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x324>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x30c>
 8002036:	4b5f      	ldr	r3, [pc, #380]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	4a5e      	ldr	r2, [pc, #376]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6713      	str	r3, [r2, #112]	@ 0x70
 8002042:	4b5c      	ldr	r3, [pc, #368]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a5b      	ldr	r2, [pc, #364]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0x324>
 8002050:	4b58      	ldr	r3, [pc, #352]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a57      	ldr	r2, [pc, #348]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
 800205c:	4b55      	ldr	r3, [pc, #340]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4a54      	ldr	r2, [pc, #336]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff fbc4 	bl	80017fc <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff fbc0 	bl	80017fc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0cb      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	4b49      	ldr	r3, [pc, #292]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ee      	beq.n	8002078 <HAL_RCC_OscConfig+0x334>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7ff fbae 	bl	80017fc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff fbaa 	bl	80017fc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0b5      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ba:	4b3e      	ldr	r3, [pc, #248]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b39      	ldr	r3, [pc, #228]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	4a38      	ldr	r2, [pc, #224]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a1 	beq.w	8002224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e2:	4b34      	ldr	r3, [pc, #208]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d05c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d141      	bne.n	800217a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <HAL_RCC_OscConfig+0x478>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fb7e 	bl	80017fc <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff fb7a 	bl	80017fc <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e087      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b27      	ldr	r3, [pc, #156]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	491b      	ldr	r1, [pc, #108]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_RCC_OscConfig+0x478>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fb53 	bl	80017fc <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff fb4f 	bl	80017fc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e05c      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x416>
 8002178:	e054      	b.n	8002224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <HAL_RCC_OscConfig+0x478>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fb3c 	bl	80017fc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fb38 	bl	80017fc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e045      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_RCC_OscConfig+0x470>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x444>
 80021a6:	e03d      	b.n	8002224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e038      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40007000 	.word	0x40007000
 80021bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <HAL_RCC_OscConfig+0x4ec>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d028      	beq.n	8002220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d121      	bne.n	8002220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d11a      	bne.n	8002220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d111      	bne.n	8002220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	3b01      	subs	r3, #1
 800220a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d107      	bne.n	8002220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0cc      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d90c      	bls.n	8002270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b65      	ldr	r3, [pc, #404]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b63      	ldr	r3, [pc, #396]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0b8      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a58      	ldr	r2, [pc, #352]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4a52      	ldr	r2, [pc, #328]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ac:	4b50      	ldr	r3, [pc, #320]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	494d      	ldr	r1, [pc, #308]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d044      	beq.n	8002354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d119      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e07f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b3f      	ldr	r3, [pc, #252]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e06f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e067      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 0203 	bic.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4934      	ldr	r1, [pc, #208]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	4313      	orrs	r3, r2
 8002322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002324:	f7ff fa6a 	bl	80017fc <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7ff fa66 	bl	80017fc <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e04f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	4b2b      	ldr	r3, [pc, #172]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 020c 	and.w	r2, r3, #12
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	429a      	cmp	r2, r3
 8002352:	d1eb      	bne.n	800232c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002354:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d20c      	bcs.n	800237c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e032      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4916      	ldr	r1, [pc, #88]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	490e      	ldr	r1, [pc, #56]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ba:	f000 f821 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	490a      	ldr	r1, [pc, #40]	@ (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	4a09      	ldr	r2, [pc, #36]	@ (80023f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_RCC_ClockConfig+0x1c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f8fa 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00
 80023f0:	40023800 	.word	0x40023800
 80023f4:	08005ed4 	.word	0x08005ed4
 80023f8:	2000001c 	.word	0x2000001c
 80023fc:	20000020 	.word	0x20000020

08002400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002404:	b090      	sub	sp, #64	@ 0x40
 8002406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
 800240c:	2300      	movs	r3, #0
 800240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002418:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x180>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	2b08      	cmp	r3, #8
 8002422:	d00d      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x40>
 8002424:	2b08      	cmp	r3, #8
 8002426:	f200 80a1 	bhi.w	800256c <HAL_RCC_GetSysClockFreq+0x16c>
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x34>
 800242e:	2b04      	cmp	r3, #4
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x3a>
 8002432:	e09b      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x184>)
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002438:	e09b      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800243a:	4b53      	ldr	r3, [pc, #332]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x188>)
 800243c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800243e:	e098      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002440:	4b4f      	ldr	r3, [pc, #316]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x180>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244a:	4b4d      	ldr	r3, [pc, #308]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x180>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d028      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x180>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	2200      	movs	r2, #0
 800245e:	623b      	str	r3, [r7, #32]
 8002460:	627a      	str	r2, [r7, #36]	@ 0x24
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002468:	2100      	movs	r1, #0
 800246a:	4b47      	ldr	r3, [pc, #284]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x188>)
 800246c:	fb03 f201 	mul.w	r2, r3, r1
 8002470:	2300      	movs	r3, #0
 8002472:	fb00 f303 	mul.w	r3, r0, r3
 8002476:	4413      	add	r3, r2
 8002478:	4a43      	ldr	r2, [pc, #268]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x188>)
 800247a:	fba0 1202 	umull	r1, r2, r0, r2
 800247e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002480:	460a      	mov	r2, r1
 8002482:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002486:	4413      	add	r3, r2
 8002488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248c:	2200      	movs	r2, #0
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	61fa      	str	r2, [r7, #28]
 8002492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002496:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800249a:	f7fd fea1 	bl	80001e0 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4613      	mov	r3, r2
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a6:	e053      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	4b35      	ldr	r3, [pc, #212]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x180>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	2200      	movs	r2, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	617a      	str	r2, [r7, #20]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ba:	f04f 0b00 	mov.w	fp, #0
 80024be:	4652      	mov	r2, sl
 80024c0:	465b      	mov	r3, fp
 80024c2:	f04f 0000 	mov.w	r0, #0
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	0159      	lsls	r1, r3, #5
 80024cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d0:	0150      	lsls	r0, r2, #5
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	ebb2 080a 	subs.w	r8, r2, sl
 80024da:	eb63 090b 	sbc.w	r9, r3, fp
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024f2:	ebb2 0408 	subs.w	r4, r2, r8
 80024f6:	eb63 0509 	sbc.w	r5, r3, r9
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	00eb      	lsls	r3, r5, #3
 8002504:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002508:	00e2      	lsls	r2, r4, #3
 800250a:	4614      	mov	r4, r2
 800250c:	461d      	mov	r5, r3
 800250e:	eb14 030a 	adds.w	r3, r4, sl
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	eb45 030b 	adc.w	r3, r5, fp
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253a:	2200      	movs	r2, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	60fa      	str	r2, [r7, #12]
 8002540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002544:	f7fd fe4c 	bl	80001e0 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x180>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002560:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x184>)
 800256e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002574:	4618      	mov	r0, r3
 8002576:	3740      	adds	r7, #64	@ 0x40
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	00f42400 	.word	0x00f42400
 8002588:	017d7840 	.word	0x017d7840

0800258c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000001c 	.word	0x2000001c

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff0 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	@ (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08005ee4 	.word	0x08005ee4

080025cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	220f      	movs	r2, #15
 80025da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025dc:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800260e:	4b07      	ldr	r3, [pc, #28]	@ (800262c <HAL_RCC_GetClockConfig+0x60>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0207 	and.w	r2, r3, #7
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	40023c00 	.word	0x40023c00

08002630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07b      	b.n	800273a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002652:	d009      	beq.n	8002668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
 800265a:	e005      	b.n	8002668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe ff08 	bl	8001498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	f003 0104 	and.w	r1, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	f003 0210 	and.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b088      	sub	sp, #32
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_SPI_Transmit+0x22>
 8002760:	2302      	movs	r3, #2
 8002762:	e12d      	b.n	80029c0 <HAL_SPI_Transmit+0x27e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800276c:	f7ff f846 	bl	80017fc <HAL_GetTick>
 8002770:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002782:	2302      	movs	r3, #2
 8002784:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002786:	e116      	b.n	80029b6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_SPI_Transmit+0x52>
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002798:	e10d      	b.n	80029b6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2203      	movs	r2, #3
 800279e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027e0:	d10f      	bne.n	8002802 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002800:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b40      	cmp	r3, #64	@ 0x40
 800280e:	d007      	beq.n	8002820 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800281e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002828:	d14f      	bne.n	80028ca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_SPI_Transmit+0xf6>
 8002832:	8afb      	ldrh	r3, [r7, #22]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d142      	bne.n	80028be <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	1c9a      	adds	r2, r3, #2
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800285c:	e02f      	b.n	80028be <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d112      	bne.n	8002892 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	881a      	ldrh	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	1c9a      	adds	r2, r3, #2
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002890:	e015      	b.n	80028be <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002892:	f7fe ffb3 	bl	80017fc <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d803      	bhi.n	80028aa <HAL_SPI_Transmit+0x168>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d102      	bne.n	80028b0 <HAL_SPI_Transmit+0x16e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80028bc:	e07b      	b.n	80029b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ca      	bne.n	800285e <HAL_SPI_Transmit+0x11c>
 80028c8:	e050      	b.n	800296c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_Transmit+0x196>
 80028d2:	8afb      	ldrh	r3, [r7, #22]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d144      	bne.n	8002962 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	330c      	adds	r3, #12
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028fe:	e030      	b.n	8002962 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d113      	bne.n	8002936 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002934:	e015      	b.n	8002962 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002936:	f7fe ff61 	bl	80017fc <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d803      	bhi.n	800294e <HAL_SPI_Transmit+0x20c>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d102      	bne.n	8002954 <HAL_SPI_Transmit+0x212>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002960:	e029      	b.n	80029b6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1c9      	bne.n	8002900 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f8bf 	bl	8002af4 <SPI_EndRxTxTransaction>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	e003      	b.n	80029b6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029be:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029d6:	b2db      	uxtb	r3, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029f4:	f7fe ff02 	bl	80017fc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	4413      	add	r3, r2
 8002a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a04:	f7fe fefa 	bl	80017fc <HAL_GetTick>
 8002a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a0a:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	0d1b      	lsrs	r3, r3, #20
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1a:	e054      	b.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d050      	beq.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a24:	f7fe feea 	bl	80017fc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d902      	bls.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d13d      	bne.n	8002ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a52:	d111      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a5c:	d004      	beq.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a66:	d107      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a80:	d10f      	bne.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e017      	b.n	8002ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d19b      	bne.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000001c 	.word	0x2000001c

08002af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2201      	movs	r2, #1
 8002b08:	2102      	movs	r1, #2
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff ff6a 	bl	80029e4 <SPI_WaitFlagStateUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e032      	b.n	8002b8c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b26:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <SPI_EndRxTxTransaction+0xa0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <SPI_EndRxTxTransaction+0xa4>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0d5b      	lsrs	r3, r3, #21
 8002b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b44:	d112      	bne.n	8002b6c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff ff47 	bl	80029e4 <SPI_WaitFlagStateUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e00f      	b.n	8002b8c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	2b80      	cmp	r3, #128	@ 0x80
 8002b84:	d0f2      	beq.n	8002b6c <SPI_EndRxTxTransaction+0x78>
 8002b86:	e000      	b.n	8002b8a <SPI_EndRxTxTransaction+0x96>
        break;
 8002b88:	bf00      	nop
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000001c 	.word	0x2000001c
 8002b98:	165e9f81 	.word	0x165e9f81

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e041      	b.n	8002c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f839 	bl	8002c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 f9b2 	bl	8002f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d001      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e044      	b.n	8002cf2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x6c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c92:	d013      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x6c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1a      	ldr	r2, [pc, #104]	@ (8002d04 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x6c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a19      	ldr	r2, [pc, #100]	@ (8002d08 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x6c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a17      	ldr	r2, [pc, #92]	@ (8002d0c <HAL_TIM_Base_Start_IT+0xbc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x6c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a16      	ldr	r2, [pc, #88]	@ (8002d10 <HAL_TIM_Base_Start_IT+0xc0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d010      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	e007      	b.n	8002cf0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40014000 	.word	0x40014000

08002d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8d2 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8c4 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8d5 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0204 	mvn.w	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8ac 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f89e 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8af 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f886 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f878 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f889 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d020      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0210 	mvn.w	r2, #16
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2208      	movs	r2, #8
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f860 	bl	8002f08 <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f852 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f863 	bl	8002f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe facb 	bl	8001416 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8e6 	bl	8003070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f834 	bl	8002f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0220 	mvn.w	r2, #32
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8b8 	bl	800305c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <TIM_Base_SetConfig+0xfc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00f      	beq.n	8002f7c <TIM_Base_SetConfig+0x38>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f62:	d00b      	beq.n	8002f7c <TIM_Base_SetConfig+0x38>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a37      	ldr	r2, [pc, #220]	@ (8003044 <TIM_Base_SetConfig+0x100>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d007      	beq.n	8002f7c <TIM_Base_SetConfig+0x38>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a36      	ldr	r2, [pc, #216]	@ (8003048 <TIM_Base_SetConfig+0x104>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d003      	beq.n	8002f7c <TIM_Base_SetConfig+0x38>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a35      	ldr	r2, [pc, #212]	@ (800304c <TIM_Base_SetConfig+0x108>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d108      	bne.n	8002f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2b      	ldr	r2, [pc, #172]	@ (8003040 <TIM_Base_SetConfig+0xfc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01b      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9c:	d017      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a28      	ldr	r2, [pc, #160]	@ (8003044 <TIM_Base_SetConfig+0x100>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a27      	ldr	r2, [pc, #156]	@ (8003048 <TIM_Base_SetConfig+0x104>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00f      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a26      	ldr	r2, [pc, #152]	@ (800304c <TIM_Base_SetConfig+0x108>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a25      	ldr	r2, [pc, #148]	@ (8003050 <TIM_Base_SetConfig+0x10c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a24      	ldr	r2, [pc, #144]	@ (8003054 <TIM_Base_SetConfig+0x110>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_Base_SetConfig+0x8a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <TIM_Base_SetConfig+0x114>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0e      	ldr	r2, [pc, #56]	@ (8003040 <TIM_Base_SetConfig+0xfc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d103      	bne.n	8003014 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]
  }
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40014000 	.word	0x40014000
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800

0800305c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <__NVIC_SetPriority>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <SysTick_Handler+0x1c>)
 80030de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80030e0:	f001 fd46 	bl	8004b70 <xTaskGetSchedulerState>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80030ea:	f002 fb3d 	bl	8005768 <xPortSysTickHandler>
  }
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000e010 	.word	0xe000e010

080030f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80030fc:	2100      	movs	r1, #0
 80030fe:	f06f 0004 	mvn.w	r0, #4
 8003102:	f7ff ffbf 	bl	8003084 <__NVIC_SetPriority>
#endif
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003112:	f3ef 8305 	mrs	r3, IPSR
 8003116:	603b      	str	r3, [r7, #0]
  return(result);
 8003118:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800311e:	f06f 0305 	mvn.w	r3, #5
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	e00c      	b.n	8003140 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <osKernelInitialize+0x44>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <osKernelInitialize+0x44>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003134:	2300      	movs	r3, #0
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	e002      	b.n	8003140 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003140:	687b      	ldr	r3, [r7, #4]
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200001bc 	.word	0x200001bc

08003154 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800315a:	f3ef 8305 	mrs	r3, IPSR
 800315e:	603b      	str	r3, [r7, #0]
  return(result);
 8003160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003166:	f06f 0305 	mvn.w	r3, #5
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	e010      	b.n	8003190 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800316e:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <osKernelStart+0x48>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d109      	bne.n	800318a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003176:	f7ff ffbf 	bl	80030f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800317a:	4b08      	ldr	r3, [pc, #32]	@ (800319c <osKernelStart+0x48>)
 800317c:	2202      	movs	r2, #2
 800317e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003180:	f001 f892 	bl	80042a8 <vTaskStartScheduler>
      stat = osOK;
 8003184:	2300      	movs	r3, #0
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	e002      	b.n	8003190 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
 800318e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200001bc 	.word	0x200001bc

080031a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08e      	sub	sp, #56	@ 0x38
 80031a4:	af04      	add	r7, sp, #16
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b0:	f3ef 8305 	mrs	r3, IPSR
 80031b4:	617b      	str	r3, [r7, #20]
  return(result);
 80031b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d17e      	bne.n	80032ba <osThreadNew+0x11a>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d07b      	beq.n	80032ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80031c6:	2318      	movs	r3, #24
 80031c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d045      	beq.n	8003266 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <osThreadNew+0x48>
        name = attr->name;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <osThreadNew+0x6e>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b38      	cmp	r3, #56	@ 0x38
 8003200:	d805      	bhi.n	800320e <osThreadNew+0x6e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <osThreadNew+0x72>
        return (NULL);
 800320e:	2300      	movs	r3, #0
 8003210:	e054      	b.n	80032bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <osThreadNew+0xa8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003230:	d90a      	bls.n	8003248 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <osThreadNew+0xa8>
        mem = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e010      	b.n	800326a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10c      	bne.n	800326a <osThreadNew+0xca>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <osThreadNew+0xca>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <osThreadNew+0xca>
          mem = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e001      	b.n	800326a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d110      	bne.n	8003292 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fe1a 	bl	8003ec0 <xTaskCreateStatic>
 800328c:	4603      	mov	r3, r0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e013      	b.n	80032ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d110      	bne.n	80032ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	b29a      	uxth	r2, r3
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fe68 	bl	8003f80 <xTaskCreate>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <osThreadNew+0x11a>
            hTask = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032ba:	693b      	ldr	r3, [r7, #16]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032cc:	f3ef 8305 	mrs	r3, IPSR
 80032d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <osDelay+0x1c>
    stat = osErrorISR;
 80032d8:	f06f 0305 	mvn.w	r3, #5
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e007      	b.n	80032f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 ffa6 	bl	800423c <vTaskDelay>
    }
  }

  return (stat);
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <vApplicationGetIdleTaskMemory+0x2c>)
 800330c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a06      	ldr	r2, [pc, #24]	@ (800332c <vApplicationGetIdleTaskMemory+0x30>)
 8003312:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	200001c0 	.word	0x200001c0
 800332c:	20000268 	.word	0x20000268

08003330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a07      	ldr	r2, [pc, #28]	@ (800335c <vApplicationGetTimerTaskMemory+0x2c>)
 8003340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4a06      	ldr	r2, [pc, #24]	@ (8003360 <vApplicationGetTimerTaskMemory+0x30>)
 8003346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800334e:	601a      	str	r2, [r3, #0]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000468 	.word	0x20000468
 8003360:	20000510 	.word	0x20000510

08003364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f103 0208 	add.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f103 0208 	add.w	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f103 0208 	add.w	r2, r3, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d103      	bne.n	8003426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e00c      	b.n	8003440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3308      	adds	r3, #8
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e002      	b.n	8003434 <vListInsert+0x2e>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d2f6      	bcs.n	800342e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6852      	ldr	r2, [r2, #4]
 8003498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d103      	bne.n	80034ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034f8:	f002 f8a6 	bl	8005648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003504:	68f9      	ldr	r1, [r7, #12]
 8003506:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	441a      	add	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003528:	3b01      	subs	r3, #1
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	441a      	add	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	22ff      	movs	r2, #255	@ 0xff
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	22ff      	movs	r2, #255	@ 0xff
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d114      	bne.n	8003578 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01a      	beq.n	800358c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3310      	adds	r3, #16
 800355a:	4618      	mov	r0, r3
 800355c:	f001 f942 	bl	80047e4 <xTaskRemoveFromEventList>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d012      	beq.n	800358c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <xQueueGenericReset+0xd0>)
 8003568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	e009      	b.n	800358c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3310      	adds	r3, #16
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fef1 	bl	8003364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3324      	adds	r3, #36	@ 0x24
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff feec 	bl	8003364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800358c:	f002 f88e 	bl	80056ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003590:	2301      	movs	r3, #1
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08e      	sub	sp, #56	@ 0x38
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <xQueueGenericCreateStatic+0x56>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <xQueueGenericCreateStatic+0x5a>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <xQueueGenericCreateStatic+0x5c>
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	623b      	str	r3, [r7, #32]
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	e7fd      	b.n	8003614 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <xQueueGenericCreateStatic+0x84>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <xQueueGenericCreateStatic+0x88>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <xQueueGenericCreateStatic+0x8a>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	61fb      	str	r3, [r7, #28]
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	e7fd      	b.n	8003642 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003646:	2350      	movs	r3, #80	@ 0x50
 8003648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b50      	cmp	r3, #80	@ 0x50
 800364e:	d00b      	beq.n	8003668 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	61bb      	str	r3, [r7, #24]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003668:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800366e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800367c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f805 	bl	800369a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003692:	4618      	mov	r0, r3
 8003694:	3730      	adds	r7, #48	@ 0x30
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e002      	b.n	80036bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036c8:	2101      	movs	r1, #1
 80036ca:	69b8      	ldr	r0, [r7, #24]
 80036cc:	f7ff fefe 	bl	80034cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	@ 0x38
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036ee:	2300      	movs	r3, #0
 80036f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <xQueueGenericSend+0x34>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <xQueueGenericSend+0x42>
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <xQueueGenericSend+0x46>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <xQueueGenericSend+0x48>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <xQueueGenericSend+0x64>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d103      	bne.n	8003752 <xQueueGenericSend+0x72>
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <xQueueGenericSend+0x76>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <xQueueGenericSend+0x78>
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <xQueueGenericSend+0x94>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	623b      	str	r3, [r7, #32]
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003774:	f001 f9fc 	bl	8004b70 <xTaskGetSchedulerState>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <xQueueGenericSend+0xa4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <xQueueGenericSend+0xa8>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <xQueueGenericSend+0xaa>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	61fb      	str	r3, [r7, #28]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037a6:	f001 ff4f 	bl	8005648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <xQueueGenericSend+0xdc>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d129      	bne.n	8003810 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037c2:	f000 fa0f 	bl	8003be4 <prvCopyDataToQueue>
 80037c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d010      	beq.n	80037f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	3324      	adds	r3, #36	@ 0x24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f805 	bl	80047e4 <xTaskRemoveFromEventList>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037e0:	4b3f      	ldr	r3, [pc, #252]	@ (80038e0 <xQueueGenericSend+0x200>)
 80037e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	e00a      	b.n	8003808 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037f8:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <xQueueGenericSend+0x200>)
 80037fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003808:	f001 ff50 	bl	80056ac <vPortExitCritical>
				return pdPASS;
 800380c:	2301      	movs	r3, #1
 800380e:	e063      	b.n	80038d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003816:	f001 ff49 	bl	80056ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800381a:	2300      	movs	r3, #0
 800381c:	e05c      	b.n	80038d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800381e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	4618      	mov	r0, r3
 800382a:	f001 f83f 	bl	80048ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800382e:	2301      	movs	r3, #1
 8003830:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003832:	f001 ff3b 	bl	80056ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003836:	f000 fda7 	bl	8004388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800383a:	f001 ff05 	bl	8005648 <vPortEnterCritical>
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003844:	b25b      	sxtb	r3, r3
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d103      	bne.n	8003854 <xQueueGenericSend+0x174>
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800385a:	b25b      	sxtb	r3, r3
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d103      	bne.n	800386a <xQueueGenericSend+0x18a>
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800386a:	f001 ff1f 	bl	80056ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800386e:	1d3a      	adds	r2, r7, #4
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f001 f82e 	bl	80048d8 <xTaskCheckForTimeOut>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d124      	bne.n	80038cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003882:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003884:	f000 faa6 	bl	8003dd4 <prvIsQueueFull>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800388e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003890:	3310      	adds	r3, #16
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 ff52 	bl	8004740 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800389c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800389e:	f000 fa31 	bl	8003d04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038a2:	f000 fd7f 	bl	80043a4 <xTaskResumeAll>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f47f af7c 	bne.w	80037a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <xQueueGenericSend+0x200>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	e772      	b.n	80037a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038c2:	f000 fa1f 	bl	8003d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038c6:	f000 fd6d 	bl	80043a4 <xTaskResumeAll>
 80038ca:	e76c      	b.n	80037a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038ce:	f000 fa19 	bl	8003d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038d2:	f000 fd67 	bl	80043a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3738      	adds	r7, #56	@ 0x38
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b090      	sub	sp, #64	@ 0x40
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <xQueueGenericSendFromISR+0x3e>
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <xQueueGenericSendFromISR+0x42>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <xQueueGenericSendFromISR+0x44>
 8003926:	2300      	movs	r3, #0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d103      	bne.n	8003952 <xQueueGenericSendFromISR+0x6e>
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <xQueueGenericSendFromISR+0x72>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <xQueueGenericSendFromISR+0x74>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	623b      	str	r3, [r7, #32]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003974:	f001 ff48 	bl	8005808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003978:	f3ef 8211 	mrs	r2, BASEPRI
 800397c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003990:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003992:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <xQueueGenericSendFromISR+0xc2>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d12f      	bne.n	8003a06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80039bc:	f000 f912 	bl	8003be4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d112      	bne.n	80039f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	3324      	adds	r3, #36	@ 0x24
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 ff04 	bl	80047e4 <xTaskRemoveFromEventList>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e007      	b.n	8003a00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039f4:	3301      	adds	r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	b25a      	sxtb	r2, r3
 80039fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003a00:	2301      	movs	r3, #1
 8003a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003a04:	e001      	b.n	8003a0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3740      	adds	r7, #64	@ 0x40
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	@ 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <xQueueReceive+0x32>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	623b      	str	r3, [r7, #32]
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	e7fd      	b.n	8003a4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <xQueueReceive+0x40>
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <xQueueReceive+0x44>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <xQueueReceive+0x46>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10b      	bne.n	8003a82 <xQueueReceive+0x62>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	61fb      	str	r3, [r7, #28]
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	e7fd      	b.n	8003a7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a82:	f001 f875 	bl	8004b70 <xTaskGetSchedulerState>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <xQueueReceive+0x72>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <xQueueReceive+0x76>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <xQueueReceive+0x78>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <xQueueReceive+0x94>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	61bb      	str	r3, [r7, #24]
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab4:	f001 fdc8 	bl	8005648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01f      	beq.n	8003b04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ac8:	f000 f8f6 	bl	8003cb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	1e5a      	subs	r2, r3, #1
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00f      	beq.n	8003afc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	3310      	adds	r3, #16
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fe7f 	bl	80047e4 <xTaskRemoveFromEventList>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aec:	4b3c      	ldr	r3, [pc, #240]	@ (8003be0 <xQueueReceive+0x1c0>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003afc:	f001 fdd6 	bl	80056ac <vPortExitCritical>
				return pdPASS;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e069      	b.n	8003bd8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b0a:	f001 fdcf 	bl	80056ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e062      	b.n	8003bd8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fec5 	bl	80048ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b26:	f001 fdc1 	bl	80056ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2a:	f000 fc2d 	bl	8004388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2e:	f001 fd8b 	bl	8005648 <vPortEnterCritical>
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d103      	bne.n	8003b48 <xQueueReceive+0x128>
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d103      	bne.n	8003b5e <xQueueReceive+0x13e>
 8003b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b5e:	f001 fda5 	bl	80056ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b62:	1d3a      	adds	r2, r7, #4
 8003b64:	f107 0310 	add.w	r3, r7, #16
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 feb4 	bl	80048d8 <xTaskCheckForTimeOut>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d123      	bne.n	8003bbe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b78:	f000 f916 	bl	8003da8 <prvIsQueueEmpty>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d017      	beq.n	8003bb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	3324      	adds	r3, #36	@ 0x24
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fdd8 	bl	8004740 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b92:	f000 f8b7 	bl	8003d04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b96:	f000 fc05 	bl	80043a4 <xTaskResumeAll>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d189      	bne.n	8003ab4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8003be0 <xQueueReceive+0x1c0>)
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	e780      	b.n	8003ab4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bb4:	f000 f8a6 	bl	8003d04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb8:	f000 fbf4 	bl	80043a4 <xTaskResumeAll>
 8003bbc:	e77a      	b.n	8003ab4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bc0:	f000 f8a0 	bl	8003d04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc4:	f000 fbee 	bl	80043a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bca:	f000 f8ed 	bl	8003da8 <prvIsQueueEmpty>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f43f af6f 	beq.w	8003ab4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3730      	adds	r7, #48	@ 0x30
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d14d      	bne.n	8003ca6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ffcc 	bl	8004bac <xTaskPriorityDisinherit>
 8003c14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	e043      	b.n	8003ca6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d119      	bne.n	8003c58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6858      	ldr	r0, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	f002 f89e 	bl	8005d70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d32b      	bcc.n	8003ca6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	e026      	b.n	8003ca6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	68d8      	ldr	r0, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	461a      	mov	r2, r3
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	f002 f884 	bl	8005d70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	425b      	negs	r3, r3
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d207      	bcs.n	8003c94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	425b      	negs	r3, r3
 8003c8e:	441a      	add	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d105      	bne.n	8003ca6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003cae:	697b      	ldr	r3, [r7, #20]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	441a      	add	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d303      	bcc.n	8003cec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68d9      	ldr	r1, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6838      	ldr	r0, [r7, #0]
 8003cf8:	f002 f83a 	bl	8005d70 <memcpy>
	}
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d0c:	f001 fc9c 	bl	8005648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d18:	e011      	b.n	8003d3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3324      	adds	r3, #36	@ 0x24
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fd5c 	bl	80047e4 <xTaskRemoveFromEventList>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d32:	f000 fe35 	bl	80049a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	dce9      	bgt.n	8003d1a <prvUnlockQueue+0x16>
 8003d46:	e000      	b.n	8003d4a <prvUnlockQueue+0x46>
					break;
 8003d48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	22ff      	movs	r2, #255	@ 0xff
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003d52:	f001 fcab 	bl	80056ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d56:	f001 fc77 	bl	8005648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d62:	e011      	b.n	8003d88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d012      	beq.n	8003d92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3310      	adds	r3, #16
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fd37 	bl	80047e4 <xTaskRemoveFromEventList>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d7c:	f000 fe10 	bl	80049a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d80:	7bbb      	ldrb	r3, [r7, #14]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	dce9      	bgt.n	8003d64 <prvUnlockQueue+0x60>
 8003d90:	e000      	b.n	8003d94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	22ff      	movs	r2, #255	@ 0xff
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d9c:	f001 fc86 	bl	80056ac <vPortExitCritical>
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003db0:	f001 fc4a 	bl	8005648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e001      	b.n	8003dc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dc6:	f001 fc71 	bl	80056ac <vPortExitCritical>

	return xReturn;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ddc:	f001 fc34 	bl	8005648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d102      	bne.n	8003df2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e001      	b.n	8003df6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003df6:	f001 fc59 	bl	80056ac <vPortExitCritical>

	return xReturn;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e014      	b.n	8003e3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e14:	4a0f      	ldr	r2, [pc, #60]	@ (8003e54 <vQueueAddToRegistry+0x50>)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e20:	490c      	ldr	r1, [pc, #48]	@ (8003e54 <vQueueAddToRegistry+0x50>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <vQueueAddToRegistry+0x50>)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e36:	e006      	b.n	8003e46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b07      	cmp	r3, #7
 8003e42:	d9e7      	bls.n	8003e14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000910 	.word	0x20000910

08003e58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e68:	f001 fbee 	bl	8005648 <vPortEnterCritical>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d103      	bne.n	8003e82 <vQueueWaitForMessageRestricted+0x2a>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d103      	bne.n	8003e98 <vQueueWaitForMessageRestricted+0x40>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e98:	f001 fc08 	bl	80056ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3324      	adds	r3, #36	@ 0x24
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fc6d 	bl	800478c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff26 	bl	8003d04 <prvUnlockQueue>
	}
 8003eb8:	bf00      	nop
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	@ 0x38
 8003ec4:	af04      	add	r7, sp, #16
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	623b      	str	r3, [r7, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	61fb      	str	r3, [r7, #28]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f0a:	23a8      	movs	r3, #168	@ 0xa8
 8003f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2ba8      	cmp	r3, #168	@ 0xa8
 8003f12:	d00b      	beq.n	8003f2c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	61bb      	str	r3, [r7, #24]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01e      	beq.n	8003f72 <xTaskCreateStatic+0xb2>
 8003f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01b      	beq.n	8003f72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f851 	bl	800400c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f6c:	f000 f8f6 	bl	800415c <prvAddNewTaskToReadyList>
 8003f70:	e001      	b.n	8003f76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f76:	697b      	ldr	r3, [r7, #20]
	}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3728      	adds	r7, #40	@ 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	@ 0x30
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fc79 	bl	800588c <pvPortMalloc>
 8003f9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00e      	beq.n	8003fc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fa2:	20a8      	movs	r0, #168	@ 0xa8
 8003fa4:	f001 fc72 	bl	800588c <pvPortMalloc>
 8003fa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb6:	e005      	b.n	8003fc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fb8:	6978      	ldr	r0, [r7, #20]
 8003fba:	f001 fd35 	bl	8005a28 <vPortFree>
 8003fbe:	e001      	b.n	8003fc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d017      	beq.n	8003ffa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f80f 	bl	800400c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fee:	69f8      	ldr	r0, [r7, #28]
 8003ff0:	f000 f8b4 	bl	800415c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e002      	b.n	8004000 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004000:	69bb      	ldr	r3, [r7, #24]
	}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	21a5      	movs	r1, #165	@ 0xa5
 8004026:	f001 fe1f 	bl	8005c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004034:	3b01      	subs	r3, #1
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	617b      	str	r3, [r7, #20]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01f      	beq.n	80040ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	e012      	b.n	8004098 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	7819      	ldrb	r1, [r3, #0]
 800407a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	3334      	adds	r3, #52	@ 0x34
 8004082:	460a      	mov	r2, r1
 8004084:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	d9e9      	bls.n	8004072 <prvInitialiseNewTask+0x66>
 800409e:	e000      	b.n	80040a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80040a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040aa:	e003      	b.n	80040b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2b37      	cmp	r3, #55	@ 0x37
 80040b8:	d901      	bls.n	80040be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040ba:	2337      	movs	r3, #55	@ 0x37
 80040bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	2200      	movs	r2, #0
 80040ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f965 	bl	80033a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	3318      	adds	r3, #24
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f960 	bl	80033a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	2200      	movs	r2, #0
 8004106:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	3354      	adds	r3, #84	@ 0x54
 800410e:	224c      	movs	r2, #76	@ 0x4c
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fda8 	bl	8005c68 <memset>
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	4a0d      	ldr	r2, [pc, #52]	@ (8004150 <prvInitialiseNewTask+0x144>)
 800411c:	659a      	str	r2, [r3, #88]	@ 0x58
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	4a0c      	ldr	r2, [pc, #48]	@ (8004154 <prvInitialiseNewTask+0x148>)
 8004122:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	4a0c      	ldr	r2, [pc, #48]	@ (8004158 <prvInitialiseNewTask+0x14c>)
 8004128:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	69b8      	ldr	r0, [r7, #24]
 8004130:	f001 f95a 	bl	80053e8 <pxPortInitialiseStack>
 8004134:	4602      	mov	r2, r0
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20004ba4 	.word	0x20004ba4
 8004154:	20004c0c 	.word	0x20004c0c
 8004158:	20004c74 	.word	0x20004c74

0800415c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004164:	f001 fa70 	bl	8005648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004168:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <prvAddNewTaskToReadyList+0xc4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4a2c      	ldr	r2, [pc, #176]	@ (8004220 <prvAddNewTaskToReadyList+0xc4>)
 8004170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004172:	4b2c      	ldr	r3, [pc, #176]	@ (8004224 <prvAddNewTaskToReadyList+0xc8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800417a:	4a2a      	ldr	r2, [pc, #168]	@ (8004224 <prvAddNewTaskToReadyList+0xc8>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004180:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <prvAddNewTaskToReadyList+0xc4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d110      	bne.n	80041aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004188:	f000 fc2e 	bl	80049e8 <prvInitialiseTaskLists>
 800418c:	e00d      	b.n	80041aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800418e:	4b26      	ldr	r3, [pc, #152]	@ (8004228 <prvAddNewTaskToReadyList+0xcc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004196:	4b23      	ldr	r3, [pc, #140]	@ (8004224 <prvAddNewTaskToReadyList+0xc8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d802      	bhi.n	80041aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004224 <prvAddNewTaskToReadyList+0xc8>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041aa:	4b20      	ldr	r3, [pc, #128]	@ (800422c <prvAddNewTaskToReadyList+0xd0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	4a1e      	ldr	r2, [pc, #120]	@ (800422c <prvAddNewTaskToReadyList+0xd0>)
 80041b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041b4:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <prvAddNewTaskToReadyList+0xd0>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <prvAddNewTaskToReadyList+0xd4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d903      	bls.n	80041d0 <prvAddNewTaskToReadyList+0x74>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	4a18      	ldr	r2, [pc, #96]	@ (8004230 <prvAddNewTaskToReadyList+0xd4>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4a15      	ldr	r2, [pc, #84]	@ (8004234 <prvAddNewTaskToReadyList+0xd8>)
 80041de:	441a      	add	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f7ff f8e9 	bl	80033be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041ec:	f001 fa5e 	bl	80056ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <prvAddNewTaskToReadyList+0xcc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <prvAddNewTaskToReadyList+0xc8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	429a      	cmp	r2, r3
 8004204:	d207      	bcs.n	8004216 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004206:	4b0c      	ldr	r3, [pc, #48]	@ (8004238 <prvAddNewTaskToReadyList+0xdc>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000e24 	.word	0x20000e24
 8004224:	20000950 	.word	0x20000950
 8004228:	20000e30 	.word	0x20000e30
 800422c:	20000e40 	.word	0x20000e40
 8004230:	20000e2c 	.word	0x20000e2c
 8004234:	20000954 	.word	0x20000954
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800424e:	4b14      	ldr	r3, [pc, #80]	@ (80042a0 <vTaskDelay+0x64>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <vTaskDelay+0x32>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60bb      	str	r3, [r7, #8]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800426e:	f000 f88b 	bl	8004388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004272:	2100      	movs	r1, #0
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fd09 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800427a:	f000 f893 	bl	80043a4 <xTaskResumeAll>
 800427e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004286:	4b07      	ldr	r3, [pc, #28]	@ (80042a4 <vTaskDelay+0x68>)
 8004288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000e4c 	.word	0x20000e4c
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042b6:	463a      	mov	r2, r7
 80042b8:	1d39      	adds	r1, r7, #4
 80042ba:	f107 0308 	add.w	r3, r7, #8
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff f81c 	bl	80032fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042c4:	6839      	ldr	r1, [r7, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	9202      	str	r2, [sp, #8]
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	460a      	mov	r2, r1
 80042d6:	4924      	ldr	r1, [pc, #144]	@ (8004368 <vTaskStartScheduler+0xc0>)
 80042d8:	4824      	ldr	r0, [pc, #144]	@ (800436c <vTaskStartScheduler+0xc4>)
 80042da:	f7ff fdf1 	bl	8003ec0 <xTaskCreateStatic>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a23      	ldr	r2, [pc, #140]	@ (8004370 <vTaskStartScheduler+0xc8>)
 80042e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042e4:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <vTaskStartScheduler+0xc8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042ec:	2301      	movs	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e001      	b.n	80042f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042fc:	f000 fd1a 	bl	8004d34 <xTimerCreateTimerTask>
 8004300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d11b      	bne.n	8004340 <vTaskStartScheduler+0x98>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
}
 800431a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800431c:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <vTaskStartScheduler+0xcc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3354      	adds	r3, #84	@ 0x54
 8004322:	4a15      	ldr	r2, [pc, #84]	@ (8004378 <vTaskStartScheduler+0xd0>)
 8004324:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004326:	4b15      	ldr	r3, [pc, #84]	@ (800437c <vTaskStartScheduler+0xd4>)
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800432e:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <vTaskStartScheduler+0xd8>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004334:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <vTaskStartScheduler+0xdc>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800433a:	f001 f8e1 	bl	8005500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800433e:	e00f      	b.n	8004360 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d10b      	bne.n	8004360 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	e7fd      	b.n	800435c <vTaskStartScheduler+0xb4>
}
 8004360:	bf00      	nop
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	08005e74 	.word	0x08005e74
 800436c:	080049b9 	.word	0x080049b9
 8004370:	20000e48 	.word	0x20000e48
 8004374:	20000950 	.word	0x20000950
 8004378:	2000002c 	.word	0x2000002c
 800437c:	20000e44 	.word	0x20000e44
 8004380:	20000e30 	.word	0x20000e30
 8004384:	20000e28 	.word	0x20000e28

08004388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800438c:	4b04      	ldr	r3, [pc, #16]	@ (80043a0 <vTaskSuspendAll+0x18>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	4a03      	ldr	r2, [pc, #12]	@ (80043a0 <vTaskSuspendAll+0x18>)
 8004394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004396:	bf00      	nop
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000e4c 	.word	0x20000e4c

080043a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043b2:	4b42      	ldr	r3, [pc, #264]	@ (80044bc <xTaskResumeAll+0x118>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043d2:	f001 f939 	bl	8005648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <xTaskResumeAll+0x118>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	4a37      	ldr	r2, [pc, #220]	@ (80044bc <xTaskResumeAll+0x118>)
 80043de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e0:	4b36      	ldr	r3, [pc, #216]	@ (80044bc <xTaskResumeAll+0x118>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d162      	bne.n	80044ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043e8:	4b35      	ldr	r3, [pc, #212]	@ (80044c0 <xTaskResumeAll+0x11c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05e      	beq.n	80044ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f0:	e02f      	b.n	8004452 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f2:	4b34      	ldr	r3, [pc, #208]	@ (80044c4 <xTaskResumeAll+0x120>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3318      	adds	r3, #24
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f83a 	bl	8003478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff f835 	bl	8003478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	4b2d      	ldr	r3, [pc, #180]	@ (80044c8 <xTaskResumeAll+0x124>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d903      	bls.n	8004422 <xTaskResumeAll+0x7e>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441e:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <xTaskResumeAll+0x124>)
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a27      	ldr	r2, [pc, #156]	@ (80044cc <xTaskResumeAll+0x128>)
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fe ffc0 	bl	80033be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004442:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <xTaskResumeAll+0x12c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800444c:	4b21      	ldr	r3, [pc, #132]	@ (80044d4 <xTaskResumeAll+0x130>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004452:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <xTaskResumeAll+0x120>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cb      	bne.n	80043f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004460:	f000 fb66 	bl	8004b30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004464:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <xTaskResumeAll+0x134>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d010      	beq.n	8004492 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004470:	f000 f846 	bl	8004500 <xTaskIncrementTick>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800447a:	4b16      	ldr	r3, [pc, #88]	@ (80044d4 <xTaskResumeAll+0x130>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f1      	bne.n	8004470 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800448c:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <xTaskResumeAll+0x134>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <xTaskResumeAll+0x130>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800449e:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <xTaskResumeAll+0x138>)
 80044a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044ae:	f001 f8fd 	bl	80056ac <vPortExitCritical>

	return xAlreadyYielded;
 80044b2:	68bb      	ldr	r3, [r7, #8]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000e4c 	.word	0x20000e4c
 80044c0:	20000e24 	.word	0x20000e24
 80044c4:	20000de4 	.word	0x20000de4
 80044c8:	20000e2c 	.word	0x20000e2c
 80044cc:	20000954 	.word	0x20000954
 80044d0:	20000950 	.word	0x20000950
 80044d4:	20000e38 	.word	0x20000e38
 80044d8:	20000e34 	.word	0x20000e34
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044e6:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <xTaskGetTickCount+0x1c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044ec:	687b      	ldr	r3, [r7, #4]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000e28 	.word	0x20000e28

08004500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450a:	4b4f      	ldr	r3, [pc, #316]	@ (8004648 <xTaskIncrementTick+0x148>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f040 8090 	bne.w	8004634 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004514:	4b4d      	ldr	r3, [pc, #308]	@ (800464c <xTaskIncrementTick+0x14c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800451c:	4a4b      	ldr	r2, [pc, #300]	@ (800464c <xTaskIncrementTick+0x14c>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d121      	bne.n	800456c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004528:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <xTaskIncrementTick+0x150>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	603b      	str	r3, [r7, #0]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <xTaskIncrementTick+0x46>
 800454a:	4b41      	ldr	r3, [pc, #260]	@ (8004650 <xTaskIncrementTick+0x150>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <xTaskIncrementTick+0x154>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3e      	ldr	r2, [pc, #248]	@ (8004650 <xTaskIncrementTick+0x150>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4a3e      	ldr	r2, [pc, #248]	@ (8004654 <xTaskIncrementTick+0x154>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <xTaskIncrementTick+0x158>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a3c      	ldr	r2, [pc, #240]	@ (8004658 <xTaskIncrementTick+0x158>)
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	f000 fae2 	bl	8004b30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800456c:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <xTaskIncrementTick+0x15c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d349      	bcc.n	800460a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004576:	4b36      	ldr	r3, [pc, #216]	@ (8004650 <xTaskIncrementTick+0x150>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004580:	4b36      	ldr	r3, [pc, #216]	@ (800465c <xTaskIncrementTick+0x15c>)
 8004582:	f04f 32ff 	mov.w	r2, #4294967295
 8004586:	601a      	str	r2, [r3, #0]
					break;
 8004588:	e03f      	b.n	800460a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458a:	4b31      	ldr	r3, [pc, #196]	@ (8004650 <xTaskIncrementTick+0x150>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d203      	bcs.n	80045aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045a2:	4a2e      	ldr	r2, [pc, #184]	@ (800465c <xTaskIncrementTick+0x15c>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045a8:	e02f      	b.n	800460a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ff62 	bl	8003478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d004      	beq.n	80045c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	3318      	adds	r3, #24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe ff59 	bl	8003478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ca:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <xTaskIncrementTick+0x160>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d903      	bls.n	80045da <xTaskIncrementTick+0xda>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	4a22      	ldr	r2, [pc, #136]	@ (8004660 <xTaskIncrementTick+0x160>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004664 <xTaskIncrementTick+0x164>)
 80045e8:	441a      	add	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fee4 	bl	80033be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <xTaskIncrementTick+0x168>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	429a      	cmp	r2, r3
 8004602:	d3b8      	bcc.n	8004576 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004608:	e7b5      	b.n	8004576 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800460a:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <xTaskIncrementTick+0x168>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	4914      	ldr	r1, [pc, #80]	@ (8004664 <xTaskIncrementTick+0x164>)
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d901      	bls.n	8004626 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004622:	2301      	movs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004626:	4b11      	ldr	r3, [pc, #68]	@ (800466c <xTaskIncrementTick+0x16c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e004      	b.n	800463e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004634:	4b0e      	ldr	r3, [pc, #56]	@ (8004670 <xTaskIncrementTick+0x170>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a0d      	ldr	r2, [pc, #52]	@ (8004670 <xTaskIncrementTick+0x170>)
 800463c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000e4c 	.word	0x20000e4c
 800464c:	20000e28 	.word	0x20000e28
 8004650:	20000ddc 	.word	0x20000ddc
 8004654:	20000de0 	.word	0x20000de0
 8004658:	20000e3c 	.word	0x20000e3c
 800465c:	20000e44 	.word	0x20000e44
 8004660:	20000e2c 	.word	0x20000e2c
 8004664:	20000954 	.word	0x20000954
 8004668:	20000950 	.word	0x20000950
 800466c:	20000e38 	.word	0x20000e38
 8004670:	20000e34 	.word	0x20000e34

08004674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800467a:	4b2b      	ldr	r3, [pc, #172]	@ (8004728 <vTaskSwitchContext+0xb4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004682:	4b2a      	ldr	r3, [pc, #168]	@ (800472c <vTaskSwitchContext+0xb8>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004688:	e047      	b.n	800471a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <vTaskSwitchContext+0xb8>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <vTaskSwitchContext+0xbc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e011      	b.n	80046bc <vTaskSwitchContext+0x48>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <vTaskSwitchContext+0x3e>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	491d      	ldr	r1, [pc, #116]	@ (8004734 <vTaskSwitchContext+0xc0>)
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0e3      	beq.n	8004698 <vTaskSwitchContext+0x24>
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a16      	ldr	r2, [pc, #88]	@ (8004734 <vTaskSwitchContext+0xc0>)
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	3308      	adds	r3, #8
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d104      	bne.n	8004700 <vTaskSwitchContext+0x8c>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <vTaskSwitchContext+0xc4>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4a09      	ldr	r2, [pc, #36]	@ (8004730 <vTaskSwitchContext+0xbc>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004710:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <vTaskSwitchContext+0xc4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3354      	adds	r3, #84	@ 0x54
 8004716:	4a09      	ldr	r2, [pc, #36]	@ (800473c <vTaskSwitchContext+0xc8>)
 8004718:	6013      	str	r3, [r2, #0]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000e4c 	.word	0x20000e4c
 800472c:	20000e38 	.word	0x20000e38
 8004730:	20000e2c 	.word	0x20000e2c
 8004734:	20000954 	.word	0x20000954
 8004738:	20000950 	.word	0x20000950
 800473c:	2000002c 	.word	0x2000002c

08004740 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004768:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <vTaskPlaceOnEventList+0x48>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3318      	adds	r3, #24
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fe fe48 	bl	8003406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004776:	2101      	movs	r1, #1
 8004778:	6838      	ldr	r0, [r7, #0]
 800477a:	f000 fa87 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000950 	.word	0x20000950

0800478c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	617b      	str	r3, [r7, #20]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b6:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3318      	adds	r3, #24
 80047bc:	4619      	mov	r1, r3
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7fe fdfd 	bl	80033be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f000 fa5a 	bl	8004c8c <prvAddCurrentTaskToDelayedList>
	}
 80047d8:	bf00      	nop
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000950 	.word	0x20000950

080047e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60fb      	str	r3, [r7, #12]
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	e7fd      	b.n	800480e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	3318      	adds	r3, #24
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fe2e 	bl	8003478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481c:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <xTaskRemoveFromEventList+0xb0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d11d      	bne.n	8004860 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3304      	adds	r3, #4
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fe25 	bl	8003478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004832:	4b19      	ldr	r3, [pc, #100]	@ (8004898 <xTaskRemoveFromEventList+0xb4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d903      	bls.n	8004842 <xTaskRemoveFromEventList+0x5e>
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <xTaskRemoveFromEventList+0xb4>)
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4a13      	ldr	r2, [pc, #76]	@ (800489c <xTaskRemoveFromEventList+0xb8>)
 8004850:	441a      	add	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	3304      	adds	r3, #4
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7fe fdb0 	bl	80033be <vListInsertEnd>
 800485e:	e005      	b.n	800486c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3318      	adds	r3, #24
 8004864:	4619      	mov	r1, r3
 8004866:	480e      	ldr	r0, [pc, #56]	@ (80048a0 <xTaskRemoveFromEventList+0xbc>)
 8004868:	f7fe fda9 	bl	80033be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <xTaskRemoveFromEventList+0xc0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	429a      	cmp	r2, r3
 8004878:	d905      	bls.n	8004886 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800487e:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <xTaskRemoveFromEventList+0xc4>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e001      	b.n	800488a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800488a:	697b      	ldr	r3, [r7, #20]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000e4c 	.word	0x20000e4c
 8004898:	20000e2c 	.word	0x20000e2c
 800489c:	20000954 	.word	0x20000954
 80048a0:	20000de4 	.word	0x20000de4
 80048a4:	20000950 	.word	0x20000950
 80048a8:	20000e38 	.word	0x20000e38

080048ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <vTaskInternalSetTimeOutState+0x24>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048bc:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <vTaskInternalSetTimeOutState+0x28>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20000e3c 	.word	0x20000e3c
 80048d4:	20000e28 	.word	0x20000e28

080048d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	613b      	str	r3, [r7, #16]
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	e7fd      	b.n	80048fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	60fb      	str	r3, [r7, #12]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800491e:	f000 fe93 	bl	8005648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004922:	4b1d      	ldr	r3, [pc, #116]	@ (8004998 <xTaskCheckForTimeOut+0xc0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d102      	bne.n	8004942 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e023      	b.n	800498a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b15      	ldr	r3, [pc, #84]	@ (800499c <xTaskCheckForTimeOut+0xc4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d007      	beq.n	800495e <xTaskCheckForTimeOut+0x86>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e015      	b.n	800498a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	d20b      	bcs.n	8004980 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff99 	bl	80048ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e004      	b.n	800498a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800498a:	f000 fe8f 	bl	80056ac <vPortExitCritical>

	return xReturn;
 800498e:	69fb      	ldr	r3, [r7, #28]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000e28 	.word	0x20000e28
 800499c:	20000e3c 	.word	0x20000e3c

080049a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <vTaskMissedYield+0x14>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000e38 	.word	0x20000e38

080049b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049c0:	f000 f852 	bl	8004a68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <prvIdleTask+0x28>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d9f9      	bls.n	80049c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <prvIdleTask+0x2c>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049dc:	e7f0      	b.n	80049c0 <prvIdleTask+0x8>
 80049de:	bf00      	nop
 80049e0:	20000954 	.word	0x20000954
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	e00c      	b.n	8004a0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a12      	ldr	r2, [pc, #72]	@ (8004a48 <prvInitialiseTaskLists+0x60>)
 8004a00:	4413      	add	r3, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fcae 	bl	8003364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b37      	cmp	r3, #55	@ 0x37
 8004a12:	d9ef      	bls.n	80049f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a14:	480d      	ldr	r0, [pc, #52]	@ (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a16:	f7fe fca5 	bl	8003364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a1a:	480d      	ldr	r0, [pc, #52]	@ (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a1c:	f7fe fca2 	bl	8003364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a20:	480c      	ldr	r0, [pc, #48]	@ (8004a54 <prvInitialiseTaskLists+0x6c>)
 8004a22:	f7fe fc9f 	bl	8003364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a26:	480c      	ldr	r0, [pc, #48]	@ (8004a58 <prvInitialiseTaskLists+0x70>)
 8004a28:	f7fe fc9c 	bl	8003364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a2c:	480b      	ldr	r0, [pc, #44]	@ (8004a5c <prvInitialiseTaskLists+0x74>)
 8004a2e:	f7fe fc99 	bl	8003364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <prvInitialiseTaskLists+0x78>)
 8004a34:	4a05      	ldr	r2, [pc, #20]	@ (8004a4c <prvInitialiseTaskLists+0x64>)
 8004a36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a38:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <prvInitialiseTaskLists+0x7c>)
 8004a3a:	4a05      	ldr	r2, [pc, #20]	@ (8004a50 <prvInitialiseTaskLists+0x68>)
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000954 	.word	0x20000954
 8004a4c:	20000db4 	.word	0x20000db4
 8004a50:	20000dc8 	.word	0x20000dc8
 8004a54:	20000de4 	.word	0x20000de4
 8004a58:	20000df8 	.word	0x20000df8
 8004a5c:	20000e10 	.word	0x20000e10
 8004a60:	20000ddc 	.word	0x20000ddc
 8004a64:	20000de0 	.word	0x20000de0

08004a68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a6e:	e019      	b.n	8004aa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a70:	f000 fdea 	bl	8005648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a74:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <prvCheckTasksWaitingTermination+0x50>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fcf9 	bl	8003478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004abc <prvCheckTasksWaitingTermination+0x54>)
 8004a8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004a98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a9a:	f000 fe07 	bl	80056ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f810 	bl	8004ac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <prvCheckTasksWaitingTermination+0x58>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e1      	bne.n	8004a70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000df8 	.word	0x20000df8
 8004abc:	20000e24 	.word	0x20000e24
 8004ac0:	20000e0c 	.word	0x20000e0c

08004ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3354      	adds	r3, #84	@ 0x54
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 f8d1 	bl	8005c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ff9f 	bl	8005a28 <vPortFree>
				vPortFree( pxTCB );
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff9c 	bl	8005a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004af0:	e019      	b.n	8004b26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d103      	bne.n	8004b04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 ff93 	bl	8005a28 <vPortFree>
	}
 8004b02:	e010      	b.n	8004b26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d00b      	beq.n	8004b26 <prvDeleteTCB+0x62>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	60fb      	str	r3, [r7, #12]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <prvDeleteTCB+0x5e>
	}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b36:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <prvResetNextTaskUnblockTime+0x38>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <prvResetNextTaskUnblockTime+0x3c>)
 8004b42:	f04f 32ff 	mov.w	r2, #4294967295
 8004b46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b48:	e008      	b.n	8004b5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4a:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <prvResetNextTaskUnblockTime+0x38>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <prvResetNextTaskUnblockTime+0x3c>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000ddc 	.word	0x20000ddc
 8004b6c:	20000e44 	.word	0x20000e44

08004b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <xTaskGetSchedulerState+0x34>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	e008      	b.n	8004b96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b08      	ldr	r3, [pc, #32]	@ (8004ba8 <xTaskGetSchedulerState+0x38>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e001      	b.n	8004b96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b96:	687b      	ldr	r3, [r7, #4]
	}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	20000e30 	.word	0x20000e30
 8004ba8:	20000e4c 	.word	0x20000e4c

08004bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d058      	beq.n	8004c74 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c80 <xTaskPriorityDisinherit+0xd4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d00b      	beq.n	8004be4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60fb      	str	r3, [r7, #12]
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	e7fd      	b.n	8004c00 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d02c      	beq.n	8004c74 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d128      	bne.n	8004c74 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fc26 	bl	8003478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c44:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <xTaskPriorityDisinherit+0xd8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d903      	bls.n	8004c54 <xTaskPriorityDisinherit+0xa8>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a0c      	ldr	r2, [pc, #48]	@ (8004c84 <xTaskPriorityDisinherit+0xd8>)
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <xTaskPriorityDisinherit+0xdc>)
 8004c62:	441a      	add	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7fe fba7 	bl	80033be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c74:	697b      	ldr	r3, [r7, #20]
	}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000950 	.word	0x20000950
 8004c84:	20000e2c 	.word	0x20000e2c
 8004c88:	20000954 	.word	0x20000954

08004c8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c96:	4b21      	ldr	r3, [pc, #132]	@ (8004d1c <prvAddCurrentTaskToDelayedList+0x90>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fbe8 	bl	8003478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d10a      	bne.n	8004cc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d007      	beq.n	8004cc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4819      	ldr	r0, [pc, #100]	@ (8004d24 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cc0:	f7fe fb7d 	bl	80033be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cc4:	e026      	b.n	8004d14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4413      	add	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cce:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d209      	bcs.n	8004cf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cde:	4b12      	ldr	r3, [pc, #72]	@ (8004d28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f7fe fb8b 	bl	8003406 <vListInsert>
}
 8004cf0:	e010      	b.n	8004d14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8004d2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f7fe fb81 	bl	8003406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d202      	bcs.n	8004d14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d0e:	4a08      	ldr	r2, [pc, #32]	@ (8004d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000e28 	.word	0x20000e28
 8004d20:	20000950 	.word	0x20000950
 8004d24:	20000e10 	.word	0x20000e10
 8004d28:	20000de0 	.word	0x20000de0
 8004d2c:	20000ddc 	.word	0x20000ddc
 8004d30:	20000e44 	.word	0x20000e44

08004d34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	@ 0x28
 8004d38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d3e:	f000 fb13 	bl	8005368 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d42:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <xTimerCreateTimerTask+0x84>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d021      	beq.n	8004d8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d52:	1d3a      	adds	r2, r7, #4
 8004d54:	f107 0108 	add.w	r1, r7, #8
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fae7 	bl	8003330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	9202      	str	r2, [sp, #8]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	460a      	mov	r2, r1
 8004d74:	4911      	ldr	r1, [pc, #68]	@ (8004dbc <xTimerCreateTimerTask+0x88>)
 8004d76:	4812      	ldr	r0, [pc, #72]	@ (8004dc0 <xTimerCreateTimerTask+0x8c>)
 8004d78:	f7ff f8a2 	bl	8003ec0 <xTaskCreateStatic>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a11      	ldr	r2, [pc, #68]	@ (8004dc4 <xTimerCreateTimerTask+0x90>)
 8004d80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d82:	4b10      	ldr	r3, [pc, #64]	@ (8004dc4 <xTimerCreateTimerTask+0x90>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	613b      	str	r3, [r7, #16]
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004dac:	697b      	ldr	r3, [r7, #20]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000e80 	.word	0x20000e80
 8004dbc:	08005e7c 	.word	0x08005e7c
 8004dc0:	08004f01 	.word	0x08004f01
 8004dc4:	20000e84 	.word	0x20000e84

08004dc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	@ 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	623b      	str	r3, [r7, #32]
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004df8:	4b19      	ldr	r3, [pc, #100]	@ (8004e60 <xTimerGenericCommand+0x98>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02a      	beq.n	8004e56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b05      	cmp	r3, #5
 8004e10:	dc18      	bgt.n	8004e44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e12:	f7ff fead 	bl	8004b70 <xTaskGetSchedulerState>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d109      	bne.n	8004e30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e1c:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <xTimerGenericCommand+0x98>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	f107 0110 	add.w	r1, r7, #16
 8004e24:	2300      	movs	r3, #0
 8004e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e28:	f7fe fc5a 	bl	80036e0 <xQueueGenericSend>
 8004e2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e2e:	e012      	b.n	8004e56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <xTimerGenericCommand+0x98>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	f107 0110 	add.w	r1, r7, #16
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f7fe fc50 	bl	80036e0 <xQueueGenericSend>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e42:	e008      	b.n	8004e56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e44:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <xTimerGenericCommand+0x98>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	f107 0110 	add.w	r1, r7, #16
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	f7fe fd48 	bl	80038e4 <xQueueGenericSendFromISR>
 8004e54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	@ 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000e80 	.word	0x20000e80

08004e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e6e:	4b23      	ldr	r3, [pc, #140]	@ (8004efc <prvProcessExpiredTimer+0x98>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fafb 	bl	8003478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	18d1      	adds	r1, r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	6978      	ldr	r0, [r7, #20]
 8004e9e:	f000 f8d5 	bl	800504c <prvInsertTimerInActiveList>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7ff ff88 	bl	8004dc8 <xTimerGenericCommand>
 8004eb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d114      	bne.n	8004eea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	6978      	ldr	r0, [r7, #20]
 8004ef0:	4798      	blx	r3
}
 8004ef2:	bf00      	nop
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000e78 	.word	0x20000e78

08004f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 f859 	bl	8004fc4 <prvGetNextExpireTime>
 8004f12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4619      	mov	r1, r3
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f805 	bl	8004f28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f1e:	f000 f8d7 	bl	80050d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f22:	bf00      	nop
 8004f24:	e7f0      	b.n	8004f08 <prvTimerTask+0x8>
	...

08004f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f32:	f7ff fa29 	bl	8004388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f866 	bl	800500c <prvSampleTimeNow>
 8004f40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d130      	bne.n	8004faa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <prvProcessTimerOrBlockTask+0x3c>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d806      	bhi.n	8004f64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f56:	f7ff fa25 	bl	80043a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff81 	bl	8004e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f62:	e024      	b.n	8004fae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f6a:	4b13      	ldr	r3, [pc, #76]	@ (8004fb8 <prvProcessTimerOrBlockTask+0x90>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <prvProcessTimerOrBlockTask+0x50>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <prvProcessTimerOrBlockTask+0x52>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <prvProcessTimerOrBlockTask+0x94>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fe ff65 	bl	8003e58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f8e:	f7ff fa09 	bl	80043a4 <xTaskResumeAll>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <prvProcessTimerOrBlockTask+0x98>)
 8004f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	f3bf 8f6f 	isb	sy
}
 8004fa8:	e001      	b.n	8004fae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004faa:	f7ff f9fb 	bl	80043a4 <xTaskResumeAll>
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000e7c 	.word	0x20000e7c
 8004fbc:	20000e80 	.word	0x20000e80
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <prvGetNextExpireTime+0x44>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <prvGetNextExpireTime+0x16>
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	e000      	b.n	8004fdc <prvGetNextExpireTime+0x18>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fe8:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <prvGetNextExpireTime+0x44>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	e001      	b.n	8004ff8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000e78 	.word	0x20000e78

0800500c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005014:	f7ff fa64 	bl	80044e0 <xTaskGetTickCount>
 8005018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <prvSampleTimeNow+0x3c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d205      	bcs.n	8005030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005024:	f000 f93a 	bl	800529c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005036:	4a04      	ldr	r2, [pc, #16]	@ (8005048 <prvSampleTimeNow+0x3c>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000e88 	.word	0x20000e88

0800504c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d812      	bhi.n	8005098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e01b      	b.n	80050be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005086:	4b10      	ldr	r3, [pc, #64]	@ (80050c8 <prvInsertTimerInActiveList+0x7c>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f7fe f9b8 	bl	8003406 <vListInsert>
 8005096:	e012      	b.n	80050be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d206      	bcs.n	80050ae <prvInsertTimerInActiveList+0x62>
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e007      	b.n	80050be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ae:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <prvInsertTimerInActiveList+0x80>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fe f9a4 	bl	8003406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050be:	697b      	ldr	r3, [r7, #20]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000e7c 	.word	0x20000e7c
 80050cc:	20000e78 	.word	0x20000e78

080050d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	@ 0x38
 80050d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050d6:	e0ce      	b.n	8005276 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da19      	bge.n	8005112 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	3304      	adds	r3, #4
 80050e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	61fb      	str	r3, [r7, #28]
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005108:	6850      	ldr	r0, [r2, #4]
 800510a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800510c:	6892      	ldr	r2, [r2, #8]
 800510e:	4611      	mov	r1, r2
 8005110:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f2c0 80ae 	blt.w	8005276 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	3304      	adds	r3, #4
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe f9a4 	bl	8003478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005130:	463b      	mov	r3, r7
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff ff6a 	bl	800500c <prvSampleTimeNow>
 8005138:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b09      	cmp	r3, #9
 800513e:	f200 8097 	bhi.w	8005270 <prvProcessReceivedCommands+0x1a0>
 8005142:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <prvProcessReceivedCommands+0x78>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005171 	.word	0x08005171
 800514c:	08005171 	.word	0x08005171
 8005150:	08005171 	.word	0x08005171
 8005154:	080051e7 	.word	0x080051e7
 8005158:	080051fb 	.word	0x080051fb
 800515c:	08005247 	.word	0x08005247
 8005160:	08005171 	.word	0x08005171
 8005164:	08005171 	.word	0x08005171
 8005168:	080051e7 	.word	0x080051e7
 800516c:	080051fb 	.word	0x080051fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	18d1      	adds	r1, r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005190:	f7ff ff5c 	bl	800504c <prvInsertTimerInActiveList>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d06c      	beq.n	8005274 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d061      	beq.n	8005274 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	441a      	add	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2300      	movs	r3, #0
 80051be:	2100      	movs	r1, #0
 80051c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051c2:	f7ff fe01 	bl	8004dc8 <xTimerGenericCommand>
 80051c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d152      	bne.n	8005274 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	61bb      	str	r3, [r7, #24]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80051f8:	e03d      	b.n	8005276 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	b2da      	uxtb	r2, r3
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005210:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10b      	bne.n	8005232 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	617b      	str	r3, [r7, #20]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	18d1      	adds	r1, r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005240:	f7ff ff04 	bl	800504c <prvInsertTimerInActiveList>
					break;
 8005244:	e017      	b.n	8005276 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005256:	f000 fbe7 	bl	8005a28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800525a:	e00c      	b.n	8005276 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800526e:	e002      	b.n	8005276 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005270:	bf00      	nop
 8005272:	e000      	b.n	8005276 <prvProcessReceivedCommands+0x1a6>
					break;
 8005274:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005276:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <prvProcessReceivedCommands+0x1c8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1d39      	adds	r1, r7, #4
 800527c:	2200      	movs	r2, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fbce 	bl	8003a20 <xQueueReceive>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f47f af26 	bne.w	80050d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3730      	adds	r7, #48	@ 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000e80 	.word	0x20000e80

0800529c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052a2:	e049      	b.n	8005338 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005360 <prvSwitchTimerLists+0xc4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005360 <prvSwitchTimerLists+0xc4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe f8db 	bl	8003478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02f      	beq.n	8005338 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d90e      	bls.n	8005308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005360 <prvSwitchTimerLists+0xc4>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7fe f880 	bl	8003406 <vListInsert>
 8005306:	e017      	b.n	8005338 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005308:	2300      	movs	r3, #0
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2300      	movs	r3, #0
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	2100      	movs	r1, #0
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7ff fd58 	bl	8004dc8 <xTimerGenericCommand>
 8005318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10b      	bne.n	8005338 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	603b      	str	r3, [r7, #0]
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	e7fd      	b.n	8005334 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005338:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <prvSwitchTimerLists+0xc4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1b0      	bne.n	80052a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005342:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <prvSwitchTimerLists+0xc4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <prvSwitchTimerLists+0xc8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a04      	ldr	r2, [pc, #16]	@ (8005360 <prvSwitchTimerLists+0xc4>)
 800534e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005350:	4a04      	ldr	r2, [pc, #16]	@ (8005364 <prvSwitchTimerLists+0xc8>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6013      	str	r3, [r2, #0]
}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000e78 	.word	0x20000e78
 8005364:	20000e7c 	.word	0x20000e7c

08005368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800536e:	f000 f96b 	bl	8005648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005372:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <prvCheckForValidListAndQueue+0x60>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d120      	bne.n	80053bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800537a:	4814      	ldr	r0, [pc, #80]	@ (80053cc <prvCheckForValidListAndQueue+0x64>)
 800537c:	f7fd fff2 	bl	8003364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005380:	4813      	ldr	r0, [pc, #76]	@ (80053d0 <prvCheckForValidListAndQueue+0x68>)
 8005382:	f7fd ffef 	bl	8003364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005386:	4b13      	ldr	r3, [pc, #76]	@ (80053d4 <prvCheckForValidListAndQueue+0x6c>)
 8005388:	4a10      	ldr	r2, [pc, #64]	@ (80053cc <prvCheckForValidListAndQueue+0x64>)
 800538a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800538c:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <prvCheckForValidListAndQueue+0x70>)
 800538e:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <prvCheckForValidListAndQueue+0x68>)
 8005390:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005392:	2300      	movs	r3, #0
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	4b11      	ldr	r3, [pc, #68]	@ (80053dc <prvCheckForValidListAndQueue+0x74>)
 8005398:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <prvCheckForValidListAndQueue+0x78>)
 800539a:	2110      	movs	r1, #16
 800539c:	200a      	movs	r0, #10
 800539e:	f7fe f8ff 	bl	80035a0 <xQueueGenericCreateStatic>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <prvCheckForValidListAndQueue+0x60>)
 80053a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <prvCheckForValidListAndQueue+0x60>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053b0:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <prvCheckForValidListAndQueue+0x60>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	490b      	ldr	r1, [pc, #44]	@ (80053e4 <prvCheckForValidListAndQueue+0x7c>)
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fd24 	bl	8003e04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053bc:	f000 f976 	bl	80056ac <vPortExitCritical>
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000e80 	.word	0x20000e80
 80053cc:	20000e50 	.word	0x20000e50
 80053d0:	20000e64 	.word	0x20000e64
 80053d4:	20000e78 	.word	0x20000e78
 80053d8:	20000e7c 	.word	0x20000e7c
 80053dc:	20000f2c 	.word	0x20000f2c
 80053e0:	20000e8c 	.word	0x20000e8c
 80053e4:	08005e84 	.word	0x08005e84

080053e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3b04      	subs	r3, #4
 80053f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b04      	subs	r3, #4
 8005406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3b04      	subs	r3, #4
 8005416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005418:	4a0c      	ldr	r2, [pc, #48]	@ (800544c <pxPortInitialiseStack+0x64>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3b14      	subs	r3, #20
 8005422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b04      	subs	r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f06f 0202 	mvn.w	r2, #2
 8005436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3b20      	subs	r3, #32
 800543c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	08005451 	.word	0x08005451

08005450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800545a:	4b13      	ldr	r3, [pc, #76]	@ (80054a8 <prvTaskExitError+0x58>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d00b      	beq.n	800547c <prvTaskExitError+0x2c>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	60fb      	str	r3, [r7, #12]
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <prvTaskExitError+0x28>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60bb      	str	r3, [r7, #8]
}
 800548e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005490:	bf00      	nop
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0fc      	beq.n	8005492 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005498:	bf00      	nop
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000028 	.word	0x20000028
 80054ac:	00000000 	.word	0x00000000

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	4770      	bx	lr
 80054cc:	f3af 8000 	nop.w

080054d0 <pxCurrentTCBConst2>:
 80054d0:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054d8:	4808      	ldr	r0, [pc, #32]	@ (80054fc <prvPortStartFirstTask+0x24>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8814 	msr	CONTROL, r0
 80054ea:	b662      	cpsie	i
 80054ec:	b661      	cpsie	f
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	df00      	svc	0
 80054f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054fa:	bf00      	nop
 80054fc:	e000ed08 	.word	0xe000ed08

08005500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005506:	4b47      	ldr	r3, [pc, #284]	@ (8005624 <xPortStartScheduler+0x124>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a47      	ldr	r2, [pc, #284]	@ (8005628 <xPortStartScheduler+0x128>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10b      	bne.n	8005528 <xPortStartScheduler+0x28>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	613b      	str	r3, [r7, #16]
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005528:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <xPortStartScheduler+0x124>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3f      	ldr	r2, [pc, #252]	@ (800562c <xPortStartScheduler+0x12c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d10b      	bne.n	800554a <xPortStartScheduler+0x4a>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60fb      	str	r3, [r7, #12]
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800554a:	4b39      	ldr	r3, [pc, #228]	@ (8005630 <xPortStartScheduler+0x130>)
 800554c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	22ff      	movs	r2, #255	@ 0xff
 800555a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800556c:	b2da      	uxtb	r2, r3
 800556e:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <xPortStartScheduler+0x134>)
 8005570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005572:	4b31      	ldr	r3, [pc, #196]	@ (8005638 <xPortStartScheduler+0x138>)
 8005574:	2207      	movs	r2, #7
 8005576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005578:	e009      	b.n	800558e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800557a:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <xPortStartScheduler+0x138>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3b01      	subs	r3, #1
 8005580:	4a2d      	ldr	r2, [pc, #180]	@ (8005638 <xPortStartScheduler+0x138>)
 8005582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005596:	2b80      	cmp	r3, #128	@ 0x80
 8005598:	d0ef      	beq.n	800557a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800559a:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <xPortStartScheduler+0x138>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f1c3 0307 	rsb	r3, r3, #7
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d00b      	beq.n	80055be <xPortStartScheduler+0xbe>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60bb      	str	r3, [r7, #8]
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	e7fd      	b.n	80055ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055be:	4b1e      	ldr	r3, [pc, #120]	@ (8005638 <xPortStartScheduler+0x138>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005638 <xPortStartScheduler+0x138>)
 80055c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <xPortStartScheduler+0x138>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055d0:	4a19      	ldr	r2, [pc, #100]	@ (8005638 <xPortStartScheduler+0x138>)
 80055d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055dc:	4b17      	ldr	r3, [pc, #92]	@ (800563c <xPortStartScheduler+0x13c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a16      	ldr	r2, [pc, #88]	@ (800563c <xPortStartScheduler+0x13c>)
 80055e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055e8:	4b14      	ldr	r3, [pc, #80]	@ (800563c <xPortStartScheduler+0x13c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a13      	ldr	r2, [pc, #76]	@ (800563c <xPortStartScheduler+0x13c>)
 80055ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80055f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055f4:	f000 f8da 	bl	80057ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055f8:	4b11      	ldr	r3, [pc, #68]	@ (8005640 <xPortStartScheduler+0x140>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055fe:	f000 f8f9 	bl	80057f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <xPortStartScheduler+0x144>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a0f      	ldr	r2, [pc, #60]	@ (8005644 <xPortStartScheduler+0x144>)
 8005608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800560c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800560e:	f7ff ff63 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005612:	f7ff f82f 	bl	8004674 <vTaskSwitchContext>
	prvTaskExitError();
 8005616:	f7ff ff1b 	bl	8005450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	e000ed00 	.word	0xe000ed00
 8005628:	410fc271 	.word	0x410fc271
 800562c:	410fc270 	.word	0x410fc270
 8005630:	e000e400 	.word	0xe000e400
 8005634:	20000f7c 	.word	0x20000f7c
 8005638:	20000f80 	.word	0x20000f80
 800563c:	e000ed20 	.word	0xe000ed20
 8005640:	20000028 	.word	0x20000028
 8005644:	e000ef34 	.word	0xe000ef34

08005648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005662:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <vPortEnterCritical+0x5c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	4a0e      	ldr	r2, [pc, #56]	@ (80056a4 <vPortEnterCritical+0x5c>)
 800566a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800566c:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <vPortEnterCritical+0x5c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d110      	bne.n	8005696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005674:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <vPortEnterCritical+0x60>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <vPortEnterCritical+0x4e>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	603b      	str	r3, [r7, #0]
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	e7fd      	b.n	8005692 <vPortEnterCritical+0x4a>
	}
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000028 	.word	0x20000028
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056b2:	4b12      	ldr	r3, [pc, #72]	@ (80056fc <vPortExitCritical+0x50>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <vPortExitCritical+0x26>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	607b      	str	r3, [r7, #4]
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056d2:	4b0a      	ldr	r3, [pc, #40]	@ (80056fc <vPortExitCritical+0x50>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <vPortExitCritical+0x50>)
 80056da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056dc:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <vPortExitCritical+0x50>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <vPortExitCritical+0x44>
 80056e4:	2300      	movs	r3, #0
 80056e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f383 8811 	msr	BASEPRI, r3
}
 80056ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000028 	.word	0x20000028

08005700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005700:	f3ef 8009 	mrs	r0, PSP
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4b15      	ldr	r3, [pc, #84]	@ (8005760 <pxCurrentTCBConst>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f01e 0f10 	tst.w	lr, #16
 8005710:	bf08      	it	eq
 8005712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571a:	6010      	str	r0, [r2, #0]
 800571c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005724:	f380 8811 	msr	BASEPRI, r0
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f7fe ffa0 	bl	8004674 <vTaskSwitchContext>
 8005734:	f04f 0000 	mov.w	r0, #0
 8005738:	f380 8811 	msr	BASEPRI, r0
 800573c:	bc09      	pop	{r0, r3}
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	6808      	ldr	r0, [r1, #0]
 8005742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005746:	f01e 0f10 	tst.w	lr, #16
 800574a:	bf08      	it	eq
 800574c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005750:	f380 8809 	msr	PSP, r0
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst>:
 8005760:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
}
 8005780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005782:	f7fe febd 	bl	8004500 <xTaskIncrementTick>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800578c:	4b06      	ldr	r3, [pc, #24]	@ (80057a8 <xPortSysTickHandler+0x40>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	2300      	movs	r3, #0
 8005796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f383 8811 	msr	BASEPRI, r3
}
 800579e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <vPortSetupTimerInterrupt+0x34>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057b6:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <vPortSetupTimerInterrupt+0x38>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <vPortSetupTimerInterrupt+0x3c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <vPortSetupTimerInterrupt+0x40>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	4a09      	ldr	r2, [pc, #36]	@ (80057f0 <vPortSetupTimerInterrupt+0x44>)
 80057ca:	3b01      	subs	r3, #1
 80057cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ce:	4b04      	ldr	r3, [pc, #16]	@ (80057e0 <vPortSetupTimerInterrupt+0x34>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010
 80057e4:	e000e018 	.word	0xe000e018
 80057e8:	2000001c 	.word	0x2000001c
 80057ec:	10624dd3 	.word	0x10624dd3
 80057f0:	e000e014 	.word	0xe000e014

080057f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005804 <vPortEnableVFP+0x10>
 80057f8:	6801      	ldr	r1, [r0, #0]
 80057fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80057fe:	6001      	str	r1, [r0, #0]
 8005800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005802:	bf00      	nop
 8005804:	e000ed88 	.word	0xe000ed88

08005808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800580e:	f3ef 8305 	mrs	r3, IPSR
 8005812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d915      	bls.n	8005846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800581a:	4a18      	ldr	r2, [pc, #96]	@ (800587c <vPortValidateInterruptPriority+0x74>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005824:	4b16      	ldr	r3, [pc, #88]	@ (8005880 <vPortValidateInterruptPriority+0x78>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	7afa      	ldrb	r2, [r7, #11]
 800582a:	429a      	cmp	r2, r3
 800582c:	d20b      	bcs.n	8005846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	607b      	str	r3, [r7, #4]
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	e7fd      	b.n	8005842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005846:	4b0f      	ldr	r3, [pc, #60]	@ (8005884 <vPortValidateInterruptPriority+0x7c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800584e:	4b0e      	ldr	r3, [pc, #56]	@ (8005888 <vPortValidateInterruptPriority+0x80>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90b      	bls.n	800586e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	603b      	str	r3, [r7, #0]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <vPortValidateInterruptPriority+0x62>
	}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000e3f0 	.word	0xe000e3f0
 8005880:	20000f7c 	.word	0x20000f7c
 8005884:	e000ed0c 	.word	0xe000ed0c
 8005888:	20000f80 	.word	0x20000f80

0800588c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	@ 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005898:	f7fe fd76 	bl	8004388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800589c:	4b5c      	ldr	r3, [pc, #368]	@ (8005a10 <pvPortMalloc+0x184>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058a4:	f000 f924 	bl	8005af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a14 <pvPortMalloc+0x188>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 8095 	bne.w	80059e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01e      	beq.n	80058fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80058bc:	2208      	movs	r2, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d015      	beq.n	80058fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	3308      	adds	r3, #8
 80058d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <pvPortMalloc+0x6e>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	617b      	str	r3, [r7, #20]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d06f      	beq.n	80059e0 <pvPortMalloc+0x154>
 8005900:	4b45      	ldr	r3, [pc, #276]	@ (8005a18 <pvPortMalloc+0x18c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d86a      	bhi.n	80059e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800590a:	4b44      	ldr	r3, [pc, #272]	@ (8005a1c <pvPortMalloc+0x190>)
 800590c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800590e:	4b43      	ldr	r3, [pc, #268]	@ (8005a1c <pvPortMalloc+0x190>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005914:	e004      	b.n	8005920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <pvPortMalloc+0xa6>
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f1      	bne.n	8005916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005932:	4b37      	ldr	r3, [pc, #220]	@ (8005a10 <pvPortMalloc+0x184>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005938:	429a      	cmp	r2, r3
 800593a:	d051      	beq.n	80059e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2208      	movs	r2, #8
 8005942:	4413      	add	r3, r2
 8005944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	1ad2      	subs	r2, r2, r3
 8005956:	2308      	movs	r3, #8
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	429a      	cmp	r2, r3
 800595c:	d920      	bls.n	80059a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800595e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <pvPortMalloc+0xfc>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	613b      	str	r3, [r7, #16]
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800599a:	69b8      	ldr	r0, [r7, #24]
 800599c:	f000 f90a 	bl	8005bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <pvPortMalloc+0x18c>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a18 <pvPortMalloc+0x18c>)
 80059ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <pvPortMalloc+0x18c>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <pvPortMalloc+0x194>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d203      	bcs.n	80059c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059ba:	4b17      	ldr	r3, [pc, #92]	@ (8005a18 <pvPortMalloc+0x18c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a18      	ldr	r2, [pc, #96]	@ (8005a20 <pvPortMalloc+0x194>)
 80059c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <pvPortMalloc+0x188>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059d6:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <pvPortMalloc+0x198>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	4a11      	ldr	r2, [pc, #68]	@ (8005a24 <pvPortMalloc+0x198>)
 80059de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059e0:	f7fe fce0 	bl	80043a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <pvPortMalloc+0x17a>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60fb      	str	r3, [r7, #12]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <pvPortMalloc+0x176>
	return pvReturn;
 8005a06:	69fb      	ldr	r3, [r7, #28]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3728      	adds	r7, #40	@ 0x28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20004b8c 	.word	0x20004b8c
 8005a14:	20004ba0 	.word	0x20004ba0
 8005a18:	20004b90 	.word	0x20004b90
 8005a1c:	20004b84 	.word	0x20004b84
 8005a20:	20004b94 	.word	0x20004b94
 8005a24:	20004b98 	.word	0x20004b98

08005a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d04f      	beq.n	8005ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	425b      	negs	r3, r3
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4413      	add	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ae4 <vPortFree+0xbc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <vPortFree+0x46>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60fb      	str	r3, [r7, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <vPortFree+0x66>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60bb      	str	r3, [r7, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	e7fd      	b.n	8005a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <vPortFree+0xbc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01e      	beq.n	8005ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11a      	bne.n	8005ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae4 <vPortFree+0xbc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	43db      	mvns	r3, r3
 8005aae:	401a      	ands	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ab4:	f7fe fc68 	bl	8004388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <vPortFree+0xc0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	4a09      	ldr	r2, [pc, #36]	@ (8005ae8 <vPortFree+0xc0>)
 8005ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ac6:	6938      	ldr	r0, [r7, #16]
 8005ac8:	f000 f874 	bl	8005bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005acc:	4b07      	ldr	r3, [pc, #28]	@ (8005aec <vPortFree+0xc4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	4a06      	ldr	r2, [pc, #24]	@ (8005aec <vPortFree+0xc4>)
 8005ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ad6:	f7fe fc65 	bl	80043a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20004ba0 	.word	0x20004ba0
 8005ae8:	20004b90 	.word	0x20004b90
 8005aec:	20004b9c 	.word	0x20004b9c

08005af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005af6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005afc:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <prvHeapInit+0xac>)
 8005afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3307      	adds	r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0307 	bic.w	r3, r3, #7
 8005b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b9c <prvHeapInit+0xac>)
 8005b20:	4413      	add	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b28:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba0 <prvHeapInit+0xb0>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba0 <prvHeapInit+0xb0>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1a9b      	subs	r3, r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ba4 <prvHeapInit+0xb4>)
 8005b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b52:	4b14      	ldr	r3, [pc, #80]	@ (8005ba4 <prvHeapInit+0xb4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b5a:	4b12      	ldr	r3, [pc, #72]	@ (8005ba4 <prvHeapInit+0xb4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <prvHeapInit+0xb4>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <prvHeapInit+0xb8>)
 8005b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a09      	ldr	r2, [pc, #36]	@ (8005bac <prvHeapInit+0xbc>)
 8005b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b88:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <prvHeapInit+0xc0>)
 8005b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b8e:	601a      	str	r2, [r3, #0]
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	20000f84 	.word	0x20000f84
 8005ba0:	20004b84 	.word	0x20004b84
 8005ba4:	20004b8c 	.word	0x20004b8c
 8005ba8:	20004b94 	.word	0x20004b94
 8005bac:	20004b90 	.word	0x20004b90
 8005bb0:	20004ba0 	.word	0x20004ba0

08005bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bbc:	4b28      	ldr	r3, [pc, #160]	@ (8005c60 <prvInsertBlockIntoFreeList+0xac>)
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e002      	b.n	8005bc8 <prvInsertBlockIntoFreeList+0x14>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d8f7      	bhi.n	8005bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d108      	bne.n	8005bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	441a      	add	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	441a      	add	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d118      	bne.n	8005c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <prvInsertBlockIntoFreeList+0xb0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d00d      	beq.n	8005c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e008      	b.n	8005c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c32:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <prvInsertBlockIntoFreeList+0xb0>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e003      	b.n	8005c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d002      	beq.n	8005c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20004b84 	.word	0x20004b84
 8005c64:	20004b8c 	.word	0x20004b8c

08005c68 <memset>:
 8005c68:	4402      	add	r2, r0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d100      	bne.n	8005c72 <memset+0xa>
 8005c70:	4770      	bx	lr
 8005c72:	f803 1b01 	strb.w	r1, [r3], #1
 8005c76:	e7f9      	b.n	8005c6c <memset+0x4>

08005c78 <_reclaim_reent>:
 8005c78:	4b29      	ldr	r3, [pc, #164]	@ (8005d20 <_reclaim_reent+0xa8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4283      	cmp	r3, r0
 8005c7e:	b570      	push	{r4, r5, r6, lr}
 8005c80:	4604      	mov	r4, r0
 8005c82:	d04b      	beq.n	8005d1c <_reclaim_reent+0xa4>
 8005c84:	69c3      	ldr	r3, [r0, #28]
 8005c86:	b1ab      	cbz	r3, 8005cb4 <_reclaim_reent+0x3c>
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	b16b      	cbz	r3, 8005ca8 <_reclaim_reent+0x30>
 8005c8c:	2500      	movs	r5, #0
 8005c8e:	69e3      	ldr	r3, [r4, #28]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	5959      	ldr	r1, [r3, r5]
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d13b      	bne.n	8005d10 <_reclaim_reent+0x98>
 8005c98:	3504      	adds	r5, #4
 8005c9a:	2d80      	cmp	r5, #128	@ 0x80
 8005c9c:	d1f7      	bne.n	8005c8e <_reclaim_reent+0x16>
 8005c9e:	69e3      	ldr	r3, [r4, #28]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	68d9      	ldr	r1, [r3, #12]
 8005ca4:	f000 f872 	bl	8005d8c <_free_r>
 8005ca8:	69e3      	ldr	r3, [r4, #28]
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	b111      	cbz	r1, 8005cb4 <_reclaim_reent+0x3c>
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 f86c 	bl	8005d8c <_free_r>
 8005cb4:	6961      	ldr	r1, [r4, #20]
 8005cb6:	b111      	cbz	r1, 8005cbe <_reclaim_reent+0x46>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 f867 	bl	8005d8c <_free_r>
 8005cbe:	69e1      	ldr	r1, [r4, #28]
 8005cc0:	b111      	cbz	r1, 8005cc8 <_reclaim_reent+0x50>
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 f862 	bl	8005d8c <_free_r>
 8005cc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005cca:	b111      	cbz	r1, 8005cd2 <_reclaim_reent+0x5a>
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f85d 	bl	8005d8c <_free_r>
 8005cd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cd4:	b111      	cbz	r1, 8005cdc <_reclaim_reent+0x64>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f858 	bl	8005d8c <_free_r>
 8005cdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005cde:	b111      	cbz	r1, 8005ce6 <_reclaim_reent+0x6e>
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 f853 	bl	8005d8c <_free_r>
 8005ce6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ce8:	b111      	cbz	r1, 8005cf0 <_reclaim_reent+0x78>
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 f84e 	bl	8005d8c <_free_r>
 8005cf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005cf2:	b111      	cbz	r1, 8005cfa <_reclaim_reent+0x82>
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	f000 f849 	bl	8005d8c <_free_r>
 8005cfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005cfc:	b111      	cbz	r1, 8005d04 <_reclaim_reent+0x8c>
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f844 	bl	8005d8c <_free_r>
 8005d04:	6a23      	ldr	r3, [r4, #32]
 8005d06:	b14b      	cbz	r3, 8005d1c <_reclaim_reent+0xa4>
 8005d08:	4620      	mov	r0, r4
 8005d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d0e:	4718      	bx	r3
 8005d10:	680e      	ldr	r6, [r1, #0]
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 f83a 	bl	8005d8c <_free_r>
 8005d18:	4631      	mov	r1, r6
 8005d1a:	e7bb      	b.n	8005c94 <_reclaim_reent+0x1c>
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	bf00      	nop
 8005d20:	2000002c 	.word	0x2000002c

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4d0d      	ldr	r5, [pc, #52]	@ (8005d5c <__libc_init_array+0x38>)
 8005d28:	4c0d      	ldr	r4, [pc, #52]	@ (8005d60 <__libc_init_array+0x3c>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	2600      	movs	r6, #0
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	4d0b      	ldr	r5, [pc, #44]	@ (8005d64 <__libc_init_array+0x40>)
 8005d36:	4c0c      	ldr	r4, [pc, #48]	@ (8005d68 <__libc_init_array+0x44>)
 8005d38:	f000 f87e 	bl	8005e38 <_init>
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	2600      	movs	r6, #0
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	08005ef4 	.word	0x08005ef4
 8005d60:	08005ef4 	.word	0x08005ef4
 8005d64:	08005ef4 	.word	0x08005ef4
 8005d68:	08005ef8 	.word	0x08005ef8

08005d6c <__retarget_lock_acquire_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_release_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <memcpy>:
 8005d70:	440a      	add	r2, r1
 8005d72:	4291      	cmp	r1, r2
 8005d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d78:	d100      	bne.n	8005d7c <memcpy+0xc>
 8005d7a:	4770      	bx	lr
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d86:	4291      	cmp	r1, r2
 8005d88:	d1f9      	bne.n	8005d7e <memcpy+0xe>
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <_free_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4605      	mov	r5, r0
 8005d90:	2900      	cmp	r1, #0
 8005d92:	d041      	beq.n	8005e18 <_free_r+0x8c>
 8005d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d98:	1f0c      	subs	r4, r1, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bfb8      	it	lt
 8005d9e:	18e4      	addlt	r4, r4, r3
 8005da0:	f000 f83e 	bl	8005e20 <__malloc_lock>
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <_free_r+0x90>)
 8005da6:	6813      	ldr	r3, [r2, #0]
 8005da8:	b933      	cbnz	r3, 8005db8 <_free_r+0x2c>
 8005daa:	6063      	str	r3, [r4, #4]
 8005dac:	6014      	str	r4, [r2, #0]
 8005dae:	4628      	mov	r0, r5
 8005db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db4:	f000 b83a 	b.w	8005e2c <__malloc_unlock>
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d908      	bls.n	8005dce <_free_r+0x42>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	1821      	adds	r1, r4, r0
 8005dc0:	428b      	cmp	r3, r1
 8005dc2:	bf01      	itttt	eq
 8005dc4:	6819      	ldreq	r1, [r3, #0]
 8005dc6:	685b      	ldreq	r3, [r3, #4]
 8005dc8:	1809      	addeq	r1, r1, r0
 8005dca:	6021      	streq	r1, [r4, #0]
 8005dcc:	e7ed      	b.n	8005daa <_free_r+0x1e>
 8005dce:	461a      	mov	r2, r3
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	b10b      	cbz	r3, 8005dd8 <_free_r+0x4c>
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d9fa      	bls.n	8005dce <_free_r+0x42>
 8005dd8:	6811      	ldr	r1, [r2, #0]
 8005dda:	1850      	adds	r0, r2, r1
 8005ddc:	42a0      	cmp	r0, r4
 8005dde:	d10b      	bne.n	8005df8 <_free_r+0x6c>
 8005de0:	6820      	ldr	r0, [r4, #0]
 8005de2:	4401      	add	r1, r0
 8005de4:	1850      	adds	r0, r2, r1
 8005de6:	4283      	cmp	r3, r0
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	d1e0      	bne.n	8005dae <_free_r+0x22>
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	6053      	str	r3, [r2, #4]
 8005df2:	4408      	add	r0, r1
 8005df4:	6010      	str	r0, [r2, #0]
 8005df6:	e7da      	b.n	8005dae <_free_r+0x22>
 8005df8:	d902      	bls.n	8005e00 <_free_r+0x74>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	e7d6      	b.n	8005dae <_free_r+0x22>
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	1821      	adds	r1, r4, r0
 8005e04:	428b      	cmp	r3, r1
 8005e06:	bf04      	itt	eq
 8005e08:	6819      	ldreq	r1, [r3, #0]
 8005e0a:	685b      	ldreq	r3, [r3, #4]
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	bf04      	itt	eq
 8005e10:	1809      	addeq	r1, r1, r0
 8005e12:	6021      	streq	r1, [r4, #0]
 8005e14:	6054      	str	r4, [r2, #4]
 8005e16:	e7ca      	b.n	8005dae <_free_r+0x22>
 8005e18:	bd38      	pop	{r3, r4, r5, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20004ce0 	.word	0x20004ce0

08005e20 <__malloc_lock>:
 8005e20:	4801      	ldr	r0, [pc, #4]	@ (8005e28 <__malloc_lock+0x8>)
 8005e22:	f7ff bfa3 	b.w	8005d6c <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	20004cdc 	.word	0x20004cdc

08005e2c <__malloc_unlock>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	@ (8005e34 <__malloc_unlock+0x8>)
 8005e2e:	f7ff bf9e 	b.w	8005d6e <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	20004cdc 	.word	0x20004cdc

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
