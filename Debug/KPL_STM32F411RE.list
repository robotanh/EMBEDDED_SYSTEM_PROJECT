
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00008094  2**0
                  CONTENTS
  4 .ARM          00000008  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006994  08006994  00008094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006994  08006994  00007994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006998  08006998  00007998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800699c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  20000094  08006a30  00008094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d14  08006a30  00008d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea6  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003806  00000000  00000000  0001ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00022770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f86  00000000  00000000  00023ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001935d  00000000  00000000  00024b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017141  00000000  00000000  0003de83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098672  00000000  00000000  00054fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed636  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  000ed67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f2f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800687c 	.word	0x0800687c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800687c 	.word	0x0800687c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ScanColumns>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 80c0 	bhi.w	8000712 <ScanColumns+0x192>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ScanColumns+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	08000605 	.word	0x08000605
 80005a0:	0800065f 	.word	0x0800065f
 80005a4:	080006b9 	.word	0x080006b9
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80005a8:	2101      	movs	r1, #1
 80005aa:	4861      	ldr	r0, [pc, #388]	@ (8000730 <ScanColumns+0x1b0>)
 80005ac:	f001 fc9a 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <ScanColumns+0x3a>
 80005b6:	2343      	movs	r3, #67	@ 0x43
 80005b8:	e0b5      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 80005ba:	2102      	movs	r1, #2
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <ScanColumns+0x1b0>)
 80005be:	f001 fc91 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <ScanColumns+0x4c>
 80005c8:	2337      	movs	r3, #55	@ 0x37
 80005ca:	e0ac      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 80005cc:	2104      	movs	r1, #4
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <ScanColumns+0x1b0>)
 80005d0:	f001 fc88 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ScanColumns+0x5e>
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	e0a3      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 80005de:	2108      	movs	r1, #8
 80005e0:	4853      	ldr	r0, [pc, #332]	@ (8000730 <ScanColumns+0x1b0>)
 80005e2:	f001 fc7f 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <ScanColumns+0x70>
 80005ec:	2331      	movs	r3, #49	@ 0x31
 80005ee:	e09a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 80005f0:	2110      	movs	r1, #16
 80005f2:	484f      	ldr	r0, [pc, #316]	@ (8000730 <ScanColumns+0x1b0>)
 80005f4:	f001 fc76 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 808b 	bne.w	8000716 <ScanColumns+0x196>
 8000600:	2341      	movs	r3, #65	@ 0x41
 8000602:	e090      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000604:	2101      	movs	r1, #1
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <ScanColumns+0x1b0>)
 8000608:	f001 fc6c 	bl	8001ee4 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ScanColumns+0x96>
 8000612:	2330      	movs	r3, #48	@ 0x30
 8000614:	e087      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000616:	2102      	movs	r1, #2
 8000618:	4845      	ldr	r0, [pc, #276]	@ (8000730 <ScanColumns+0x1b0>)
 800061a:	f001 fc63 	bl	8001ee4 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ScanColumns+0xa8>
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	e07e      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000628:	2104      	movs	r1, #4
 800062a:	4841      	ldr	r0, [pc, #260]	@ (8000730 <ScanColumns+0x1b0>)
 800062c:	f001 fc5a 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <ScanColumns+0xba>
 8000636:	2335      	movs	r3, #53	@ 0x35
 8000638:	e075      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800063a:	2108      	movs	r1, #8
 800063c:	483c      	ldr	r0, [pc, #240]	@ (8000730 <ScanColumns+0x1b0>)
 800063e:	f001 fc51 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <ScanColumns+0xcc>
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	e06c      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800064c:	2110      	movs	r1, #16
 800064e:	4838      	ldr	r0, [pc, #224]	@ (8000730 <ScanColumns+0x1b0>)
 8000650:	f001 fc48 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d15f      	bne.n	800071a <ScanColumns+0x19a>
 800065a:	2342      	movs	r3, #66	@ 0x42
 800065c:	e063      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 800065e:	2101      	movs	r1, #1
 8000660:	4833      	ldr	r0, [pc, #204]	@ (8000730 <ScanColumns+0x1b0>)
 8000662:	f001 fc3f 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <ScanColumns+0xf0>
 800066c:	2345      	movs	r3, #69	@ 0x45
 800066e:	e05a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000670:	2102      	movs	r1, #2
 8000672:	482f      	ldr	r0, [pc, #188]	@ (8000730 <ScanColumns+0x1b0>)
 8000674:	f001 fc36 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <ScanColumns+0x102>
 800067e:	2339      	movs	r3, #57	@ 0x39
 8000680:	e051      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000682:	2104      	movs	r1, #4
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <ScanColumns+0x1b0>)
 8000686:	f001 fc2d 	bl	8001ee4 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <ScanColumns+0x114>
 8000690:	2336      	movs	r3, #54	@ 0x36
 8000692:	e048      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000694:	2108      	movs	r1, #8
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <ScanColumns+0x1b0>)
 8000698:	f001 fc24 	bl	8001ee4 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <ScanColumns+0x126>
 80006a2:	2333      	movs	r3, #51	@ 0x33
 80006a4:	e03f      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80006a6:	2110      	movs	r1, #16
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <ScanColumns+0x1b0>)
 80006aa:	f001 fc1b 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d134      	bne.n	800071e <ScanColumns+0x19e>
 80006b4:	2344      	movs	r3, #68	@ 0x44
 80006b6:	e036      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 80006b8:	2101      	movs	r1, #1
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <ScanColumns+0x1b0>)
 80006bc:	f001 fc12 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <ScanColumns+0x14a>
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	e02d      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 80006ca:	2102      	movs	r1, #2
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <ScanColumns+0x1b0>)
 80006ce:	f001 fc09 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <ScanColumns+0x15c>
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	e024      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 80006dc:	2104      	movs	r1, #4
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <ScanColumns+0x1b0>)
 80006e0:	f001 fc00 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <ScanColumns+0x16e>
 80006ea:	2324      	movs	r3, #36	@ 0x24
 80006ec:	e01b      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 80006ee:	2108      	movs	r1, #8
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <ScanColumns+0x1b0>)
 80006f2:	f001 fbf7 	bl	8001ee4 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <ScanColumns+0x180>
 80006fc:	234c      	movs	r3, #76	@ 0x4c
 80006fe:	e012      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <ScanColumns+0x1b0>)
 8000704:	f001 fbee 	bl	8001ee4 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <ScanColumns+0x1a2>
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	e009      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000712:	23ff      	movs	r3, #255	@ 0xff
 8000714:	e007      	b.n	8000726 <ScanColumns+0x1a6>
            break;
 8000716:	bf00      	nop
 8000718:	e004      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071a:	bf00      	nop
 800071c:	e002      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 8000722:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000724:	23ff      	movs	r3, #255	@ 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400

08000734 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000740:	f001 fbe8 	bl	8001f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800074c:	f001 fbe2 	bl	8001f14 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff15 	bl	8000580 <ScanColumns>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d001      	beq.n	8000764 <KeyPad_Scan+0x30>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	e041      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800076a:	f001 fbd3 	bl	8001f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000774:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000776:	f001 fbcd 	bl	8001f14 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff00 	bl	8000580 <ScanColumns>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d001      	beq.n	800078e <KeyPad_Scan+0x5a>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	e02c      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000796:	f001 fbbd 	bl	8001f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007a2:	f001 fbb7 	bl	8001f14 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff feea 	bl	8000580 <ScanColumns>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <KeyPad_Scan+0x86>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	e016      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007c2:	f001 fba7 	bl	8001f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007ce:	f001 fba1 	bl	8001f14 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fed4 	bl	8000580 <ScanColumns>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <KeyPad_Scan+0xb2>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	e000      	b.n	80007e8 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80007e6:	23ff      	movs	r3, #255	@ 0xff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020400 	.word	0x40020400

080007f4 <formatTotalLiters>:

void formatTotalLiters(uint32_t total, uint32_t* buffer1, uint32_t* buffer2)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a16      	ldr	r2, [pc, #88]	@ (800085c <formatTotalLiters+0x68>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d815      	bhi.n	8000834 <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <formatTotalLiters+0x6c>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <formatTotalLiters+0x6c>)
 800081a:	fba3 1302 	umull	r1, r3, r3, r2
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	4910      	ldr	r1, [pc, #64]	@ (8000864 <formatTotalLiters+0x70>)
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <formatTotalLiters+0x74>)
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = 0;
		LEDPointFlag = 2;
	}
}
 8000832:	e00c      	b.n	800084e <formatTotalLiters+0x5a>
		* buffer1 = total / 100000000;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <formatTotalLiters+0x78>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0e5a      	lsrs	r2, r3, #25
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 2;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <formatTotalLiters+0x74>)
 800084a:	2202      	movs	r2, #2
 800084c:	601a      	str	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	05f5e0ff 	.word	0x05f5e0ff
 8000860:	431bde83 	.word	0x431bde83
 8000864:	000f4240 	.word	0x000f4240
 8000868:	20000030 	.word	0x20000030
 800086c:	55e63b89 	.word	0x55e63b89

08000870 <KeyLogic>:


void KeyLogic() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8000876:	f003 ff35 	bl	80046e4 <xTaskGetTickCount>
 800087a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800087c:	f7ff ff5a 	bl	8000734 <KeyPad_Scan>
 8000880:	4603      	mov	r3, r0
 8000882:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000884:	4bb1      	ldr	r3, [pc, #708]	@ (8000b4c <KeyLogic+0x2dc>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d85a      	bhi.n	8000942 <KeyLogic+0xd2>
 800088c:	a201      	add	r2, pc, #4	@ (adr r2, 8000894 <KeyLogic+0x24>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008a5 	.word	0x080008a5
 8000898:	080008bf 	.word	0x080008bf
 800089c:	080008eb 	.word	0x080008eb
 80008a0:	0800091b 	.word	0x0800091b
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	2bff      	cmp	r3, #255	@ 0xff
 80008a8:	d044      	beq.n	8000934 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 80008aa:	4aa9      	ldr	r2, [pc, #676]	@ (8000b50 <KeyLogic+0x2e0>)
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 80008b0:	4aa8      	ldr	r2, [pc, #672]	@ (8000b54 <KeyLogic+0x2e4>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 80008b6:	4ba5      	ldr	r3, [pc, #660]	@ (8000b4c <KeyLogic+0x2dc>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
            }
            break;
 80008bc:	e03a      	b.n	8000934 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 80008be:	4ba5      	ldr	r3, [pc, #660]	@ (8000b54 <KeyLogic+0x2e4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b31      	cmp	r3, #49	@ 0x31
 80008c8:	d936      	bls.n	8000938 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 80008ca:	4ba1      	ldr	r3, [pc, #644]	@ (8000b50 <KeyLogic+0x2e0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d106      	bne.n	80008e2 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 80008d4:	4b9d      	ldr	r3, [pc, #628]	@ (8000b4c <KeyLogic+0x2dc>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 80008da:	4a9f      	ldr	r2, [pc, #636]	@ (8000b58 <KeyLogic+0x2e8>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 80008e0:	e02a      	b.n	8000938 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 80008e2:	4b9a      	ldr	r3, [pc, #616]	@ (8000b4c <KeyLogic+0x2dc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
            break;
 80008e8:	e026      	b.n	8000938 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 80008ea:	4b99      	ldr	r3, [pc, #612]	@ (8000b50 <KeyLogic+0x2e0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	78fa      	ldrb	r2, [r7, #3]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d10a      	bne.n	800090a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 80008f4:	4b98      	ldr	r3, [pc, #608]	@ (8000b58 <KeyLogic+0x2e8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000900:	d31c      	bcc.n	800093c <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000902:	4b92      	ldr	r3, [pc, #584]	@ (8000b4c <KeyLogic+0x2dc>)
 8000904:	2203      	movs	r2, #3
 8000906:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000908:	e018      	b.n	800093c <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800090a:	4b91      	ldr	r3, [pc, #580]	@ (8000b50 <KeyLogic+0x2e0>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b93      	ldr	r3, [pc, #588]	@ (8000b5c <KeyLogic+0x2ec>)
 8000910:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 8000912:	4b8e      	ldr	r3, [pc, #568]	@ (8000b4c <KeyLogic+0x2dc>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
            break;
 8000918:	e010      	b.n	800093c <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 800091a:	4b8d      	ldr	r3, [pc, #564]	@ (8000b50 <KeyLogic+0x2e0>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	429a      	cmp	r2, r3
 8000922:	d00d      	beq.n	8000940 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 8000924:	4b8a      	ldr	r3, [pc, #552]	@ (8000b50 <KeyLogic+0x2e0>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b8c      	ldr	r3, [pc, #560]	@ (8000b5c <KeyLogic+0x2ec>)
 800092a:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 800092c:	4b87      	ldr	r3, [pc, #540]	@ (8000b4c <KeyLogic+0x2dc>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000932:	e005      	b.n	8000940 <KeyLogic+0xd0>
            break;
 8000934:	bf00      	nop
 8000936:	e004      	b.n	8000942 <KeyLogic+0xd2>
            break;
 8000938:	bf00      	nop
 800093a:	e002      	b.n	8000942 <KeyLogic+0xd2>
            break;
 800093c:	bf00      	nop
 800093e:	e000      	b.n	8000942 <KeyLogic+0xd2>
            break;
 8000940:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 8000942:	4b86      	ldr	r3, [pc, #536]	@ (8000b5c <KeyLogic+0x2ec>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2bff      	cmp	r3, #255	@ 0xff
 8000948:	f000 815a 	beq.w	8000c00 <KeyLogic+0x390>
        if (seqState == SEQ_NUMBER) {
 800094c:	4b84      	ldr	r3, [pc, #528]	@ (8000b60 <KeyLogic+0x2f0>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b06      	cmp	r3, #6
 8000952:	d12a      	bne.n	80009aa <KeyLogic+0x13a>
            if (keyPressed >= '0' && keyPressed <= '9') {
 8000954:	4b81      	ldr	r3, [pc, #516]	@ (8000b5c <KeyLogic+0x2ec>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b2f      	cmp	r3, #47	@ 0x2f
 800095a:	d91c      	bls.n	8000996 <KeyLogic+0x126>
 800095c:	4b7f      	ldr	r3, [pc, #508]	@ (8000b5c <KeyLogic+0x2ec>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b39      	cmp	r3, #57	@ 0x39
 8000962:	d818      	bhi.n	8000996 <KeyLogic+0x126>
                if (numberOfDigits < 6) {
 8000964:	4b7f      	ldr	r3, [pc, #508]	@ (8000b64 <KeyLogic+0x2f4>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b05      	cmp	r3, #5
 800096a:	f200 8146 	bhi.w	8000bfa <KeyLogic+0x38a>
                    accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 800096e:	4b7e      	ldr	r3, [pc, #504]	@ (8000b68 <KeyLogic+0x2f8>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	461a      	mov	r2, r3
 800097c:	4b77      	ldr	r3, [pc, #476]	@ (8000b5c <KeyLogic+0x2ec>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4413      	add	r3, r2
 8000982:	3b30      	subs	r3, #48	@ 0x30
 8000984:	4a78      	ldr	r2, [pc, #480]	@ (8000b68 <KeyLogic+0x2f8>)
 8000986:	6013      	str	r3, [r2, #0]
                    numberOfDigits++;
 8000988:	4b76      	ldr	r3, [pc, #472]	@ (8000b64 <KeyLogic+0x2f4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b74      	ldr	r3, [pc, #464]	@ (8000b64 <KeyLogic+0x2f4>)
 8000992:	701a      	strb	r2, [r3, #0]
                if (numberOfDigits < 6) {
 8000994:	e131      	b.n	8000bfa <KeyLogic+0x38a>
                }
            } else {
                seqState = SEQ_IDLE;
 8000996:	4b72      	ldr	r3, [pc, #456]	@ (8000b60 <KeyLogic+0x2f0>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
                numberOfDigits = 0;
 800099c:	4b71      	ldr	r3, [pc, #452]	@ (8000b64 <KeyLogic+0x2f4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
                accumulatedNumber = 0;
 80009a2:	4b71      	ldr	r3, [pc, #452]	@ (8000b68 <KeyLogic+0x2f8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e127      	b.n	8000bfa <KeyLogic+0x38a>
            }
        } else {
            switch (keyPressed) {
 80009aa:	4b6c      	ldr	r3, [pc, #432]	@ (8000b5c <KeyLogic+0x2ec>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3b24      	subs	r3, #36	@ 0x24
 80009b0:	2b30      	cmp	r3, #48	@ 0x30
 80009b2:	f200 8109 	bhi.w	8000bc8 <KeyLogic+0x358>
 80009b6:	a201      	add	r2, pc, #4	@ (adr r2, 80009bc <KeyLogic+0x14c>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	08000b33 	.word	0x08000b33
 80009c0:	08000bc9 	.word	0x08000bc9
 80009c4:	08000bc9 	.word	0x08000bc9
 80009c8:	08000bc9 	.word	0x08000bc9
 80009cc:	08000bc9 	.word	0x08000bc9
 80009d0:	08000bc9 	.word	0x08000bc9
 80009d4:	08000bc9 	.word	0x08000bc9
 80009d8:	08000bc9 	.word	0x08000bc9
 80009dc:	08000bc9 	.word	0x08000bc9
 80009e0:	08000bc9 	.word	0x08000bc9
 80009e4:	08000bc9 	.word	0x08000bc9
 80009e8:	08000bc9 	.word	0x08000bc9
 80009ec:	08000bc9 	.word	0x08000bc9
 80009f0:	08000bc9 	.word	0x08000bc9
 80009f4:	08000bc9 	.word	0x08000bc9
 80009f8:	08000bc9 	.word	0x08000bc9
 80009fc:	08000bc9 	.word	0x08000bc9
 8000a00:	08000bc9 	.word	0x08000bc9
 8000a04:	08000bc9 	.word	0x08000bc9
 8000a08:	08000bc9 	.word	0x08000bc9
 8000a0c:	08000bc9 	.word	0x08000bc9
 8000a10:	08000bc9 	.word	0x08000bc9
 8000a14:	08000bc9 	.word	0x08000bc9
 8000a18:	08000bc9 	.word	0x08000bc9
 8000a1c:	08000bc9 	.word	0x08000bc9
 8000a20:	08000bc9 	.word	0x08000bc9
 8000a24:	08000bc9 	.word	0x08000bc9
 8000a28:	08000bc9 	.word	0x08000bc9
 8000a2c:	08000bc9 	.word	0x08000bc9
 8000a30:	08000a81 	.word	0x08000a81
 8000a34:	08000aa9 	.word	0x08000aa9
 8000a38:	08000acf 	.word	0x08000acf
 8000a3c:	08000b99 	.word	0x08000b99
 8000a40:	08000af5 	.word	0x08000af5
 8000a44:	08000bb1 	.word	0x08000bb1
 8000a48:	08000bc9 	.word	0x08000bc9
 8000a4c:	08000bc9 	.word	0x08000bc9
 8000a50:	08000bc9 	.word	0x08000bc9
 8000a54:	08000bc9 	.word	0x08000bc9
 8000a58:	08000bc9 	.word	0x08000bc9
 8000a5c:	08000b81 	.word	0x08000b81
 8000a60:	08000bc9 	.word	0x08000bc9
 8000a64:	08000bc9 	.word	0x08000bc9
 8000a68:	08000bc9 	.word	0x08000bc9
 8000a6c:	08000bc9 	.word	0x08000bc9
 8000a70:	08000bc9 	.word	0x08000bc9
 8000a74:	08000bc9 	.word	0x08000bc9
 8000a78:	08000bc9 	.word	0x08000bc9
 8000a7c:	08000b1b 	.word	0x08000b1b
                case 'A':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000a80:	2300      	movs	r3, #0
 8000a82:	4a3a      	ldr	r2, [pc, #232]	@ (8000b6c <KeyLogic+0x2fc>)
 8000a84:	2107      	movs	r1, #7
 8000a86:	483a      	ldr	r0, [pc, #232]	@ (8000b70 <KeyLogic+0x300>)
 8000a88:	f005 f9ee 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 8000a8c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a90:	4a36      	ldr	r2, [pc, #216]	@ (8000b6c <KeyLogic+0x2fc>)
 8000a92:	2107      	movs	r1, #7
 8000a94:	4837      	ldr	r0, [pc, #220]	@ (8000b74 <KeyLogic+0x304>)
 8000a96:	f005 f9e7 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	4a33      	ldr	r2, [pc, #204]	@ (8000b6c <KeyLogic+0x2fc>)
 8000a9e:	2107      	movs	r1, #7
 8000aa0:	4835      	ldr	r0, [pc, #212]	@ (8000b78 <KeyLogic+0x308>)
 8000aa2:	f005 f9e1 	bl	8005e68 <sniprintf>
                    break;
 8000aa6:	e0a8      	b.n	8000bfa <KeyLogic+0x38a>
                case 'B':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <KeyLogic+0x2fc>)
 8000aac:	2107      	movs	r1, #7
 8000aae:	4830      	ldr	r0, [pc, #192]	@ (8000b70 <KeyLogic+0x300>)
 8000ab0:	f005 f9da 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000ab4:	4b31      	ldr	r3, [pc, #196]	@ (8000b7c <KeyLogic+0x30c>)
 8000ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b6c <KeyLogic+0x2fc>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	482e      	ldr	r0, [pc, #184]	@ (8000b74 <KeyLogic+0x304>)
 8000abc:	f005 f9d4 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b6c <KeyLogic+0x2fc>)
 8000ac4:	2107      	movs	r1, #7
 8000ac6:	482c      	ldr	r0, [pc, #176]	@ (8000b78 <KeyLogic+0x308>)
 8000ac8:	f005 f9ce 	bl	8005e68 <sniprintf>
                    break;
 8000acc:	e095      	b.n	8000bfa <KeyLogic+0x38a>
                case 'C':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	4a26      	ldr	r2, [pc, #152]	@ (8000b6c <KeyLogic+0x2fc>)
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	4826      	ldr	r0, [pc, #152]	@ (8000b70 <KeyLogic+0x300>)
 8000ad6:	f005 f9c7 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ada:	2300      	movs	r3, #0
 8000adc:	4a23      	ldr	r2, [pc, #140]	@ (8000b6c <KeyLogic+0x2fc>)
 8000ade:	2107      	movs	r1, #7
 8000ae0:	4824      	ldr	r0, [pc, #144]	@ (8000b74 <KeyLogic+0x304>)
 8000ae2:	f005 f9c1 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	4a20      	ldr	r2, [pc, #128]	@ (8000b6c <KeyLogic+0x2fc>)
 8000aea:	2107      	movs	r1, #7
 8000aec:	4822      	ldr	r0, [pc, #136]	@ (8000b78 <KeyLogic+0x308>)
 8000aee:	f005 f9bb 	bl	8005e68 <sniprintf>
                    break;
 8000af2:	e082      	b.n	8000bfa <KeyLogic+0x38a>
                case 'E':
                    snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000af4:	2300      	movs	r3, #0
 8000af6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <KeyLogic+0x2fc>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	481d      	ldr	r0, [pc, #116]	@ (8000b70 <KeyLogic+0x300>)
 8000afc:	f005 f9b4 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b00:	2300      	movs	r3, #0
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <KeyLogic+0x2fc>)
 8000b04:	2107      	movs	r1, #7
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <KeyLogic+0x304>)
 8000b08:	f005 f9ae 	bl	8005e68 <sniprintf>
                    snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 100);
 8000b0c:	2364      	movs	r3, #100	@ 0x64
 8000b0e:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <KeyLogic+0x2fc>)
 8000b10:	2107      	movs	r1, #7
 8000b12:	4819      	ldr	r0, [pc, #100]	@ (8000b78 <KeyLogic+0x308>)
 8000b14:	f005 f9a8 	bl	8005e68 <sniprintf>
                    break;
 8000b18:	e06f      	b.n	8000bfa <KeyLogic+0x38a>
                case 'T':
                    if (seqState == SEQ_IDLE) {
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <KeyLogic+0x2f0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <KeyLogic+0x2ba>
                        seqState = SEQ_PRESSED_T;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <KeyLogic+0x2f0>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000b28:	e067      	b.n	8000bfa <KeyLogic+0x38a>
                        seqState = SEQ_IDLE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <KeyLogic+0x2f0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
                    break;
 8000b30:	e063      	b.n	8000bfa <KeyLogic+0x38a>
                case '$':
                    if (seqState == SEQ_PRESSED_T) {
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <KeyLogic+0x2f0>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d103      	bne.n	8000b42 <KeyLogic+0x2d2>
                        seqState = SEQ_PRESSED_T_$;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <KeyLogic+0x2f0>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000b40:	e05b      	b.n	8000bfa <KeyLogic+0x38a>
                        seqState = SEQ_IDLE;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <KeyLogic+0x2f0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
                    break;
 8000b48:	e057      	b.n	8000bfa <KeyLogic+0x38a>
 8000b4a:	bf00      	nop
 8000b4c:	200000c8 	.word	0x200000c8
 8000b50:	20000001 	.word	0x20000001
 8000b54:	200000b0 	.word	0x200000b0
 8000b58:	200000b4 	.word	0x200000b4
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	200000c9 	.word	0x200000c9
 8000b64:	200000bc 	.word	0x200000bc
 8000b68:	200000b8 	.word	0x200000b8
 8000b6c:	08006894 	.word	0x08006894
 8000b70:	20000014 	.word	0x20000014
 8000b74:	2000001b 	.word	0x2000001b
 8000b78:	20000022 	.word	0x20000022
 8000b7c:	000186a0 	.word	0x000186a0
                case 'L':
                    if (seqState == SEQ_PRESSED_T) {
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <KeyLogic+0x398>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d103      	bne.n	8000b90 <KeyLogic+0x320>
                        seqState = SEQ_PRESSED_T_L;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <KeyLogic+0x398>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000b8e:	e034      	b.n	8000bfa <KeyLogic+0x38a>
                        seqState = SEQ_IDLE;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <KeyLogic+0x398>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
                    break;
 8000b96:	e030      	b.n	8000bfa <KeyLogic+0x38a>
                case 'D':
                    if (seqState == SEQ_PRESSED_T) {
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <KeyLogic+0x398>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d103      	bne.n	8000ba8 <KeyLogic+0x338>
                        seqState = SEQ_PRESSED_T_F3;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <KeyLogic+0x398>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000ba6:	e028      	b.n	8000bfa <KeyLogic+0x38a>
                        seqState = SEQ_IDLE;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <KeyLogic+0x398>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
                    break;
 8000bae:	e024      	b.n	8000bfa <KeyLogic+0x38a>
                case 'F':
                    if (seqState == SEQ_PRESSED_T) {
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <KeyLogic+0x398>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d103      	bne.n	8000bc0 <KeyLogic+0x350>
                        seqState = SEQ_PRESSED_T_F4;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <KeyLogic+0x398>)
 8000bba:	2205      	movs	r2, #5
 8000bbc:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000bbe:	e01c      	b.n	8000bfa <KeyLogic+0x38a>
                        seqState = SEQ_IDLE;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <KeyLogic+0x398>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
                    break;
 8000bc6:	e018      	b.n	8000bfa <KeyLogic+0x38a>
                default:
                    if (keyPressed >= '0' && keyPressed <= '9') {
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <KeyLogic+0x39c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bce:	d910      	bls.n	8000bf2 <KeyLogic+0x382>
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <KeyLogic+0x39c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b39      	cmp	r3, #57	@ 0x39
 8000bd6:	d80c      	bhi.n	8000bf2 <KeyLogic+0x382>
                        seqState = SEQ_NUMBER;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <KeyLogic+0x398>)
 8000bda:	2206      	movs	r2, #6
 8000bdc:	701a      	strb	r2, [r3, #0]
                        accumulatedNumber = keyPressed - '0';
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <KeyLogic+0x39c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3b30      	subs	r3, #48	@ 0x30
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <KeyLogic+0x3a0>)
 8000be8:	601a      	str	r2, [r3, #0]
                        numberOfDigits = 1;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <KeyLogic+0x3a4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
                    } else {
                        seqState = SEQ_IDLE;
                    }
                    break;
 8000bf0:	e002      	b.n	8000bf8 <KeyLogic+0x388>
                        seqState = SEQ_IDLE;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <KeyLogic+0x398>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
                    break;
 8000bf8:	bf00      	nop
            }
        }
        keyPressed = 0xFF;
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <KeyLogic+0x39c>)
 8000bfc:	22ff      	movs	r2, #255	@ 0xff
 8000bfe:	701a      	strb	r2, [r3, #0]
    }
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000c9 	.word	0x200000c9
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	200000b8 	.word	0x200000b8
 8000c14:	200000bc 	.word	0x200000bc

08000c18 <KeyLogic_Action>:

void KeyLogic_Action() {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 8000c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8000e14 <KeyLogic_Action+0x1fc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	f200 80df 	bhi.w	8000de6 <KeyLogic_Action+0x1ce>
 8000c28:	a201      	add	r2, pc, #4	@ (adr r2, 8000c30 <KeyLogic_Action+0x18>)
 8000c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2e:	bf00      	nop
 8000c30:	08000c4d 	.word	0x08000c4d
 8000c34:	08000c73 	.word	0x08000c73
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000c99 	.word	0x08000c99
 8000c40:	08000d5b 	.word	0x08000d5b
 8000c44:	08000d81 	.word	0x08000d81
 8000c48:	08000da7 	.word	0x08000da7
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4a72      	ldr	r2, [pc, #456]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c50:	2107      	movs	r1, #7
 8000c52:	4872      	ldr	r0, [pc, #456]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000c54:	f005 f908 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4a6f      	ldr	r2, [pc, #444]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c5c:	2107      	movs	r1, #7
 8000c5e:	4870      	ldr	r0, [pc, #448]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000c60:	f005 f902 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000c64:	2300      	movs	r3, #0
 8000c66:	4a6c      	ldr	r2, [pc, #432]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c68:	2107      	movs	r1, #7
 8000c6a:	486e      	ldr	r0, [pc, #440]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000c6c:	f005 f8fc 	bl	8005e68 <sniprintf>
            break;
 8000c70:	e0cc      	b.n	8000e0c <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000c72:	2300      	movs	r3, #0
 8000c74:	4a68      	ldr	r2, [pc, #416]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c76:	2107      	movs	r1, #7
 8000c78:	4868      	ldr	r0, [pc, #416]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000c7a:	f005 f8f5 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	4a65      	ldr	r2, [pc, #404]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c82:	2107      	movs	r1, #7
 8000c84:	4866      	ldr	r0, [pc, #408]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000c86:	f005 f8ef 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000c8a:	4b67      	ldr	r3, [pc, #412]	@ (8000e28 <KeyLogic_Action+0x210>)
 8000c8c:	4a62      	ldr	r2, [pc, #392]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c8e:	2107      	movs	r1, #7
 8000c90:	4864      	ldr	r0, [pc, #400]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000c92:	f005 f8e9 	bl	8005e68 <sniprintf>
            break;
 8000c96:	e0b9      	b.n	8000e0c <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_$:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	485f      	ldr	r0, [pc, #380]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000ca0:	f005 f8e2 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	4a5c      	ldr	r2, [pc, #368]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000ca8:	2107      	movs	r1, #7
 8000caa:	485d      	ldr	r0, [pc, #372]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000cac:	f005 f8dc 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 111111);
 8000cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e2c <KeyLogic_Action+0x214>)
 8000cb2:	4a59      	ldr	r2, [pc, #356]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000cb4:	2107      	movs	r1, #7
 8000cb6:	485b      	ldr	r0, [pc, #364]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000cb8:	f005 f8d6 	bl	8005e68 <sniprintf>
            break;
 8000cbc:	e0a6      	b.n	8000e0c <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8000cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000e30 <KeyLogic_Action+0x218>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8000e34 <KeyLogic_Action+0x21c>)
 8000cc4:	495c      	ldr	r1, [pc, #368]	@ (8000e38 <KeyLogic_Action+0x220>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fd94 	bl	80007f4 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8000ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8000e38 <KeyLogic_Action+0x220>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f107 000c 	add.w	r0, r7, #12
 8000cd4:	4a59      	ldr	r2, [pc, #356]	@ (8000e3c <KeyLogic_Action+0x224>)
 8000cd6:	2107      	movs	r1, #7
 8000cd8:	f005 f8c6 	bl	8005e68 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.. %02ld", row1 % 100); // Extract last two digits of row1
 8000cdc:	4b56      	ldr	r3, [pc, #344]	@ (8000e38 <KeyLogic_Action+0x220>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b57      	ldr	r3, [pc, #348]	@ (8000e40 <KeyLogic_Action+0x228>)
 8000ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2164      	movs	r1, #100	@ 0x64
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	1d38      	adds	r0, r7, #4
 8000cf2:	4a54      	ldr	r2, [pc, #336]	@ (8000e44 <KeyLogic_Action+0x22c>)
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	f005 f8b7 	bl	8005e68 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	e019      	b.n	8000d34 <KeyLogic_Action+0x11c>
                if (i < strlen(combinedStr)) {
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fa6c 	bl	80001e0 <strlen>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d909      	bls.n	8000d24 <KeyLogic_Action+0x10c>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8000d10:	1d3a      	adds	r2, r7, #4
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	4413      	add	r3, r2
 8000d16:	7819      	ldrb	r1, [r3, #0]
 8000d18:	4a40      	ldr	r2, [pc, #256]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	460a      	mov	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e004      	b.n	8000d2e <KeyLogic_Action+0x116>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000d24:	4a3d      	ldr	r2, [pc, #244]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	4413      	add	r3, r2
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3301      	adds	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	dde2      	ble.n	8000d00 <KeyLogic_Action+0xe8>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e34 <KeyLogic_Action+0x21c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e3c <KeyLogic_Action+0x224>)
 8000d40:	2107      	movs	r1, #7
 8000d42:	4837      	ldr	r0, [pc, #220]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000d44:	f005 f890 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "Total");
 8000d48:	4a3f      	ldr	r2, [pc, #252]	@ (8000e48 <KeyLogic_Action+0x230>)
 8000d4a:	2107      	movs	r1, #7
 8000d4c:	4835      	ldr	r0, [pc, #212]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000d4e:	f005 f88b 	bl	8005e68 <sniprintf>


            LEDPointFlag = 3;
 8000d52:	4b3e      	ldr	r3, [pc, #248]	@ (8000e4c <KeyLogic_Action+0x234>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	601a      	str	r2, [r3, #0]
            break;
 8000d58:	e058      	b.n	8000e0c <KeyLogic_Action+0x1f4>



        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <KeyLogic_Action+0x238>)
 8000d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000d5e:	2107      	movs	r1, #7
 8000d60:	482e      	ldr	r0, [pc, #184]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000d62:	f005 f881 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000d66:	2300      	movs	r3, #0
 8000d68:	4a2b      	ldr	r2, [pc, #172]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	482c      	ldr	r0, [pc, #176]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000d6e:	f005 f87b 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000d72:	2300      	movs	r3, #0
 8000d74:	4a28      	ldr	r2, [pc, #160]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000d76:	2107      	movs	r1, #7
 8000d78:	482a      	ldr	r0, [pc, #168]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000d7a:	f005 f875 	bl	8005e68 <sniprintf>
            break;
 8000d7e:	e045      	b.n	8000e0c <KeyLogic_Action+0x1f4>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 8000d80:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <KeyLogic_Action+0x23c>)
 8000d82:	4a25      	ldr	r2, [pc, #148]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000d84:	2107      	movs	r1, #7
 8000d86:	4825      	ldr	r0, [pc, #148]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000d88:	f005 f86e 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4a22      	ldr	r2, [pc, #136]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000d90:	2107      	movs	r1, #7
 8000d92:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000d94:	f005 f868 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000d9c:	2107      	movs	r1, #7
 8000d9e:	4821      	ldr	r0, [pc, #132]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000da0:	f005 f862 	bl	8005e68 <sniprintf>
            break;
 8000da4:	e032      	b.n	8000e0c <KeyLogic_Action+0x1f4>
        case SEQ_NUMBER:
            snprintf(buffer, sizeof(buffer), "%06d", accumulatedNumber);
 8000da6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <KeyLogic_Action+0x240>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f107 0014 	add.w	r0, r7, #20
 8000dae:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000db0:	2107      	movs	r1, #7
 8000db2:	f005 f859 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4a28      	ldr	r2, [pc, #160]	@ (8000e5c <KeyLogic_Action+0x244>)
 8000dbc:	2107      	movs	r1, #7
 8000dbe:	4817      	ldr	r0, [pc, #92]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000dc0:	f005 f852 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000dc8:	2107      	movs	r1, #7
 8000dca:	4815      	ldr	r0, [pc, #84]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000dcc:	f005 f84c 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4a11      	ldr	r2, [pc, #68]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	4813      	ldr	r0, [pc, #76]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000dd8:	f005 f846 	bl	8005e68 <sniprintf>
            LEDPointFlag = -1;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <KeyLogic_Action+0x234>)
 8000dde:	f04f 32ff 	mov.w	r2, #4294967295
 8000de2:	601a      	str	r2, [r3, #0]
            break;
 8000de4:	e012      	b.n	8000e0c <KeyLogic_Action+0x1f4>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000de6:	2300      	movs	r3, #0
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000dea:	2107      	movs	r1, #7
 8000dec:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <KeyLogic_Action+0x204>)
 8000dee:	f005 f83b 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000df2:	2300      	movs	r3, #0
 8000df4:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000df6:	2107      	movs	r1, #7
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <KeyLogic_Action+0x208>)
 8000dfa:	f005 f835 	bl	8005e68 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <KeyLogic_Action+0x200>)
 8000e02:	2107      	movs	r1, #7
 8000e04:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <KeyLogic_Action+0x20c>)
 8000e06:	f005 f82f 	bl	8005e68 <sniprintf>
            break;
 8000e0a:	bf00      	nop
    }
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000c9 	.word	0x200000c9
 8000e18:	08006894 	.word	0x08006894
 8000e1c:	20000014 	.word	0x20000014
 8000e20:	2000001b 	.word	0x2000001b
 8000e24:	20000022 	.word	0x20000022
 8000e28:	000f423f 	.word	0x000f423f
 8000e2c:	0001b207 	.word	0x0001b207
 8000e30:	2000002c 	.word	0x2000002c
 8000e34:	200000c4 	.word	0x200000c4
 8000e38:	200000c0 	.word	0x200000c0
 8000e3c:	0800689c 	.word	0x0800689c
 8000e40:	51eb851f 	.word	0x51eb851f
 8000e44:	080068a4 	.word	0x080068a4
 8000e48:	080068b0 	.word	0x080068b0
 8000e4c:	20000030 	.word	0x20000030
 8000e50:	00051615 	.word	0x00051615
 8000e54:	0006c81c 	.word	0x0006c81c
 8000e58:	200000b8 	.word	0x200000b8
 8000e5c:	080068b8 	.word	0x080068b8

08000e60 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e6e:	d907      	bls.n	8000e80 <CharToSegment+0x20>
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b39      	cmp	r3, #57	@ 0x39
 8000e74:	d804      	bhi.n	8000e80 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	3b30      	subs	r3, #48	@ 0x30
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <CharToSegment+0x48>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	e00c      	b.n	8000e9a <CharToSegment+0x3a>
    } else if (c == 'L') {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b4c      	cmp	r3, #76	@ 0x4c
 8000e84:	d102      	bne.n	8000e8c <CharToSegment+0x2c>
        return specialCharMap[0];
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <CharToSegment+0x4c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	e006      	b.n	8000e9a <CharToSegment+0x3a>
    } else if (c == '.') {
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e90:	d102      	bne.n	8000e98 <CharToSegment+0x38>
        return specialCharMap[1];
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <CharToSegment+0x4c>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	e000      	b.n	8000e9a <CharToSegment+0x3a>
    } else {
        return 0b11111111; // Blank
 8000e98:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	20000010 	.word	0x20000010

08000eb0 <SevenSegLEDsHandler>:

uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e035      	b.n	8000f2e <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f986 	bl	80001e0 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	d81f      	bhi.n	8000f1e <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dd15      	ble.n	8000f12 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	441a      	add	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1e59      	subs	r1, r3, #1
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffaf 	bl	8000e60 <CharToSegment>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4619      	mov	r1, r3
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <SevenSegLEDsHandler+0x90>)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e00a      	b.n	8000f28 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8000f12:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <SevenSegLEDsHandler+0x90>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	22ff      	movs	r2, #255	@ 0xff
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e004      	b.n	8000f28 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8000f1e:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <SevenSegLEDsHandler+0x90>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	22ff      	movs	r2, #255	@ 0xff
 8000f26:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	ddc6      	ble.n	8000ec2 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8000f34:	4b02      	ldr	r3, [pc, #8]	@ (8000f40 <SevenSegLEDsHandler+0x90>)
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000d8 	.word	0x200000d8

08000f44 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
 8000f50:	4613      	mov	r3, r2
 8000f52:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffa9 	bl	8000eb0 <SevenSegLEDsHandler>
 8000f5e:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d820      	bhi.n	8000fa8 <UpdateDisplayBuffer+0x64>
 8000f66:	a201      	add	r2, pc, #4	@ (adr r2, 8000f6c <UpdateDisplayBuffer+0x28>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000f85 	.word	0x08000f85
 8000f70:	08000f8b 	.word	0x08000f8b
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000f97 	.word	0x08000f97
 8000f7c:	08000f9d 	.word	0x08000f9d
 8000f80:	08000fa3 	.word	0x08000fa3
        case 0:
            curr_scan = 0b11111110;
 8000f84:	23fe      	movs	r3, #254	@ 0xfe
 8000f86:	73fb      	strb	r3, [r7, #15]
            break;
 8000f88:	e011      	b.n	8000fae <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 8000f8a:	23fd      	movs	r3, #253	@ 0xfd
 8000f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8000f8e:	e00e      	b.n	8000fae <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8000f90:	23fb      	movs	r3, #251	@ 0xfb
 8000f92:	73fb      	strb	r3, [r7, #15]
            break;
 8000f94:	e00b      	b.n	8000fae <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 8000f96:	23f7      	movs	r3, #247	@ 0xf7
 8000f98:	73fb      	strb	r3, [r7, #15]
            break;
 8000f9a:	e008      	b.n	8000fae <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000f9c:	23ef      	movs	r3, #239	@ 0xef
 8000f9e:	73fb      	strb	r3, [r7, #15]
            break;
 8000fa0:	e005      	b.n	8000fae <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8000fa2:	23df      	movs	r3, #223	@ 0xdf
 8000fa4:	73fb      	strb	r3, [r7, #15]
            break;
 8000fa6:	e002      	b.n	8000fae <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8000fa8:	23ff      	movs	r3, #255	@ 0xff
 8000faa:	73fb      	strb	r3, [r7, #15]
            break;
 8000fac:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 8000fae:	4b57      	ldr	r3, [pc, #348]	@ (800110c <UpdateDisplayBuffer+0x1c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db72      	blt.n	800109c <UpdateDisplayBuffer+0x158>
 8000fb6:	4b55      	ldr	r3, [pc, #340]	@ (800110c <UpdateDisplayBuffer+0x1c8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	dc6e      	bgt.n	800109c <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 8000fbe:	78fa      	ldrb	r2, [r7, #3]
 8000fc0:	4b52      	ldr	r3, [pc, #328]	@ (800110c <UpdateDisplayBuffer+0x1c8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d136      	bne.n	8001036 <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8000fc8:	78ba      	ldrb	r2, [r7, #2]
 8000fca:	4951      	ldr	r1, [pc, #324]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	22ff      	movs	r2, #255	@ 0xff
 8000fd6:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8000fd8:	78ba      	ldrb	r2, [r7, #2]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	7898      	ldrb	r0, [r3, #2]
 8000fde:	494c      	ldr	r1, [pc, #304]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4602      	mov	r2, r0
 8000fec:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 8000fee:	78ba      	ldrb	r2, [r7, #2]
 8000ff0:	4947      	ldr	r1, [pc, #284]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	3301      	adds	r3, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	78ba      	ldrb	r2, [r7, #2]
 8001008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800100c:	b2d8      	uxtb	r0, r3
 800100e:	4940      	ldr	r1, [pc, #256]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	440b      	add	r3, r1
 8001018:	3303      	adds	r3, #3
 800101a:	4602      	mov	r2, r0
 800101c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 800101e:	78ba      	ldrb	r2, [r7, #2]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	7818      	ldrb	r0, [r3, #0]
 8001024:	493a      	ldr	r1, [pc, #232]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	440b      	add	r3, r1
 800102e:	3304      	adds	r3, #4
 8001030:	4602      	mov	r2, r0
 8001032:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 8001034:	e065      	b.n	8001102 <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001036:	78ba      	ldrb	r2, [r7, #2]
 8001038:	4935      	ldr	r1, [pc, #212]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	440b      	add	r3, r1
 8001042:	22ff      	movs	r2, #255	@ 0xff
 8001044:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001046:	78ba      	ldrb	r2, [r7, #2]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	7898      	ldrb	r0, [r3, #2]
 800104c:	4930      	ldr	r1, [pc, #192]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	440b      	add	r3, r1
 8001056:	3301      	adds	r3, #1
 8001058:	4602      	mov	r2, r0
 800105a:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 800105c:	78ba      	ldrb	r2, [r7, #2]
 800105e:	492c      	ldr	r1, [pc, #176]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	440b      	add	r3, r1
 8001068:	3302      	adds	r3, #2
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 800106e:	78ba      	ldrb	r2, [r7, #2]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	7858      	ldrb	r0, [r3, #1]
 8001074:	4926      	ldr	r1, [pc, #152]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	440b      	add	r3, r1
 800107e:	3303      	adds	r3, #3
 8001080:	4602      	mov	r2, r0
 8001082:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 8001084:	78ba      	ldrb	r2, [r7, #2]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	7818      	ldrb	r0, [r3, #0]
 800108a:	4921      	ldr	r1, [pc, #132]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	440b      	add	r3, r1
 8001094:	3304      	adds	r3, #4
 8001096:	4602      	mov	r2, r0
 8001098:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 800109a:	e032      	b.n	8001102 <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800109c:	78ba      	ldrb	r2, [r7, #2]
 800109e:	491c      	ldr	r1, [pc, #112]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	22ff      	movs	r2, #255	@ 0xff
 80010aa:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 80010ac:	78ba      	ldrb	r2, [r7, #2]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	7898      	ldrb	r0, [r3, #2]
 80010b2:	4917      	ldr	r1, [pc, #92]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	3301      	adds	r3, #1
 80010be:	4602      	mov	r2, r0
 80010c0:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 80010c2:	78ba      	ldrb	r2, [r7, #2]
 80010c4:	4912      	ldr	r1, [pc, #72]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	3302      	adds	r3, #2
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 80010d4:	78ba      	ldrb	r2, [r7, #2]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	7858      	ldrb	r0, [r3, #1]
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	3303      	adds	r3, #3
 80010e6:	4602      	mov	r2, r0
 80010e8:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 80010ea:	78ba      	ldrb	r2, [r7, #2]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	7818      	ldrb	r0, [r3, #0]
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <UpdateDisplayBuffer+0x1cc>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	4602      	mov	r2, r0
 80010fe:	701a      	strb	r2, [r3, #0]
    }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000030 	.word	0x20000030
 8001110:	200000cc 	.word	0x200000cc

08001114 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <SevenSegLEDsScan+0x7c>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	3301      	adds	r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	bfb8      	it	lt
 800112a:	425b      	neglt	r3, r3
 800112c:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <SevenSegLEDsScan+0x80>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	4619      	mov	r1, r3
 8001138:	4817      	ldr	r0, [pc, #92]	@ (8001198 <SevenSegLEDsScan+0x84>)
 800113a:	f7ff ff03 	bl	8000f44 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113e:	b672      	cpsid	i
}
 8001140:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <SevenSegLEDsScan+0x7c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <SevenSegLEDsScan+0x88>)
 8001152:	4413      	add	r3, r2
 8001154:	2105      	movs	r1, #5
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f824 	bl	80011a4 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <SevenSegLEDsScan+0x7c>)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001162:	b662      	cpsie	i
}
 8001164:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <SevenSegLEDsScan+0x80>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <SevenSegLEDsScan+0x8c>)
 8001170:	fb83 3102 	smull	r3, r1, r3, r2
 8001174:	17d3      	asrs	r3, r2, #31
 8001176:	1ac9      	subs	r1, r1, r3
 8001178:	460b      	mov	r3, r1
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	440b      	add	r3, r1
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	1ad1      	subs	r1, r2, r3
 8001182:	b2ca      	uxtb	r2, r1
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <SevenSegLEDsScan+0x80>)
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000d6 	.word	0x200000d6
 8001194:	200000ca 	.word	0x200000ca
 8001198:	20000014 	.word	0x20000014
 800119c:	200000cc 	.word	0x200000cc
 80011a0:	2aaaaaab 	.word	0x2aaaaaab

080011a4 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b4:	4823      	ldr	r0, [pc, #140]	@ (8001244 <ShiftOut_SPI+0xa0>)
 80011b6:	f000 fead 	bl	8001f14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2180      	movs	r1, #128	@ 0x80
 80011be:	4822      	ldr	r0, [pc, #136]	@ (8001248 <ShiftOut_SPI+0xa4>)
 80011c0:	f000 fea8 	bl	8001f14 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e003      	b.n	80011d2 <ShiftOut_SPI+0x2e>
 80011ca:	bf00      	nop
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011d8:	dbf7      	blt.n	80011ca <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011da:	bf00      	nop
 80011dc:	481b      	ldr	r0, [pc, #108]	@ (800124c <ShiftOut_SPI+0xa8>)
 80011de:	f001 fcf5 	bl	8002bcc <HAL_SPI_GetState>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d1f9      	bne.n	80011dc <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4816      	ldr	r0, [pc, #88]	@ (800124c <ShiftOut_SPI+0xa8>)
 80011f4:	f001 fba7 	bl	8002946 <HAL_SPI_Transmit>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 80011fe:	f000 f9e5 	bl	80015cc <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	e003      	b.n	8001210 <ShiftOut_SPI+0x6c>
 8001208:	bf00      	nop
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3301      	adds	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001216:	dbf7      	blt.n	8001208 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001218:	bf00      	nop
 800121a:	480c      	ldr	r0, [pc, #48]	@ (800124c <ShiftOut_SPI+0xa8>)
 800121c:	f001 fcd6 	bl	8002bcc <HAL_SPI_GetState>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	d1f9      	bne.n	800121a <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <ShiftOut_SPI+0xa0>)
 800122e:	f000 fe71 	bl	8001f14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2180      	movs	r1, #128	@ 0x80
 8001236:	4804      	ldr	r0, [pc, #16]	@ (8001248 <ShiftOut_SPI+0xa4>)
 8001238:	f000 fe6c 	bl	8001f14 <HAL_GPIO_WritePin>

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	200000dc 	.word	0x200000dc

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f000 fb9e 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f828 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 f8fa 	bl	8001454 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001260:	f000 f88c 	bl	800137c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001264:	f000 f8c0 	bl	80013e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001268:	f002 f852 	bl	8003310 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <main+0x44>)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	@ (8001298 <main+0x48>)
 8001272:	f002 f897 	bl	80033a4 <osThreadNew>
 8001276:	4603      	mov	r3, r0
 8001278:	4a08      	ldr	r2, [pc, #32]	@ (800129c <main+0x4c>)
 800127a:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <main+0x50>)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <main+0x54>)
 8001282:	f002 f88f 	bl	80033a4 <osThreadNew>
 8001286:	4603      	mov	r3, r0
 8001288:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <main+0x58>)
 800128a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800128c:	f002 f864 	bl	8003358 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <main+0x40>
 8001294:	080068f8 	.word	0x080068f8
 8001298:	08001559 	.word	0x08001559
 800129c:	2000018c 	.word	0x2000018c
 80012a0:	0800691c 	.word	0x0800691c
 80012a4:	08001595 	.word	0x08001595
 80012a8:	20000190 	.word	0x20000190

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	@ 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fe08 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <SystemClock_Config+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	4a26      	ldr	r2, [pc, #152]	@ (8001374 <SystemClock_Config+0xc8>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <SystemClock_Config+0xc8>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a20      	ldr	r2, [pc, #128]	@ (8001378 <SystemClock_Config+0xcc>)
 80012f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <SystemClock_Config+0xcc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800131c:	2308      	movs	r3, #8
 800131e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001320:	2364      	movs	r3, #100	@ 0x64
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001328:	2304      	movs	r3, #4
 800132a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fe09 	bl	8001f48 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800133c:	f000 f946 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2103      	movs	r1, #3
 800135c:	4618      	mov	r0, r3
 800135e:	f001 f86b 	bl	8002438 <HAL_RCC_ClockConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001368:	f000 f930 	bl	80015cc <Error_Handler>
  }
}
 800136c:	bf00      	nop
 800136e:	3750      	adds	r7, #80	@ 0x50
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_SPI1_Init+0x64>)
 8001382:	4a18      	ldr	r2, [pc, #96]	@ (80013e4 <MX_SPI1_Init+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <MX_SPI1_Init+0x64>)
 8001388:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_SPI1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_SPI1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013b0:	2220      	movs	r2, #32
 80013b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013c8:	220a      	movs	r2, #10
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_SPI1_Init+0x64>)
 80013ce:	f001 fa31 	bl	8002834 <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d8:	f000 f8f8 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000dc 	.word	0x200000dc
 80013e4:	40013000 	.word	0x40013000

080013e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_SPI2_Init+0x64>)
 80013ee:	4a18      	ldr	r2, [pc, #96]	@ (8001450 <MX_SPI2_Init+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_SPI2_Init+0x64>)
 80013f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_SPI2_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_SPI2_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_SPI2_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_SPI2_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_SPI2_Init+0x64>)
 8001414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_SPI2_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <MX_SPI2_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_SPI2_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <MX_SPI2_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_SPI2_Init+0x64>)
 8001434:	220a      	movs	r2, #10
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <MX_SPI2_Init+0x64>)
 800143a:	f001 f9fb 	bl	8002834 <HAL_SPI_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001444:	f000 f8c2 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000134 	.word	0x20000134
 8001450:	40003800 	.word	0x40003800

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b37      	ldr	r3, [pc, #220]	@ (800154c <MX_GPIO_Init+0xf8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a36      	ldr	r2, [pc, #216]	@ (800154c <MX_GPIO_Init+0xf8>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <MX_GPIO_Init+0xf8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <MX_GPIO_Init+0xf8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a2f      	ldr	r2, [pc, #188]	@ (800154c <MX_GPIO_Init+0xf8>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <MX_GPIO_Init+0xf8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a28      	ldr	r2, [pc, #160]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b26      	ldr	r3, [pc, #152]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b22      	ldr	r3, [pc, #136]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <MX_GPIO_Init+0xf8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80014da:	2200      	movs	r2, #0
 80014dc:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 80014e0:	481b      	ldr	r0, [pc, #108]	@ (8001550 <MX_GPIO_Init+0xfc>)
 80014e2:	f000 fd17 	bl	8001f14 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	481a      	ldr	r0, [pc, #104]	@ (8001554 <MX_GPIO_Init+0x100>)
 80014ec:	f000 fd12 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80014f0:	231f      	movs	r3, #31
 80014f2:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4813      	ldr	r0, [pc, #76]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001504:	f000 fb6a 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001508:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 800150c:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	@ (8001550 <MX_GPIO_Init+0xfc>)
 8001522:	f000 fb5b 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_GPIO_Init+0x100>)
 800153e:	f000 fb4d 	bl	8001bdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	@ 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800

08001558 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8001560:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <Led3x6Run+0x38>)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800156a:	6018      	str	r0, [r3, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8001570:	f7ff fdd0 	bl	8001114 <SevenSegLEDsScan>
	  osDelay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f001 ffa7 	bl	80034c8 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2105      	movs	r1, #5
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe0f 	bl	80011a4 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f001 ff9e 	bl	80034c8 <osDelay>
	  SevenSegLEDsScan();
 800158c:	bf00      	nop
 800158e:	e7ef      	b.n	8001570 <Led3x6Run+0x18>
 8001590:	080068d8 	.word	0x080068d8

08001594 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 800159c:	f7ff f968 	bl	8000870 <KeyLogic>
	 KeyLogic_Action();
 80015a0:	f7ff fb3a 	bl	8000c18 <KeyLogic_Action>
	 osDelay(1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f001 ff8f 	bl	80034c8 <osDelay>
	 KeyLogic();
 80015aa:	bf00      	nop
 80015ac:	e7f6      	b.n	800159c <KeyPad4x5Run+0x8>

080015ae <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015be:	d101      	bne.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c0:	f000 fa0a 	bl	80019d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <Error_Handler+0x8>

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_MspInit+0x54>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a11      	ldr	r2, [pc, #68]	@ (800162c <HAL_MspInit+0x54>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <HAL_MspInit+0x54>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <HAL_MspInit+0x54>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <HAL_MspInit+0x54>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <HAL_MspInit+0x54>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	210f      	movs	r1, #15
 800161a:	f06f 0001 	mvn.w	r0, #1
 800161e:	f000 fab3 	bl	8001b88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	@ 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a41      	ldr	r2, [pc, #260]	@ (8001754 <HAL_SPI_MspInit+0x124>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12c      	bne.n	80016ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	4a3f      	ldr	r2, [pc, #252]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 800165c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001660:	6453      	str	r3, [r2, #68]	@ 0x44
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a38      	ldr	r2, [pc, #224]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800168a:	23a0      	movs	r3, #160	@ 0xa0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169a:	2305      	movs	r3, #5
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	482d      	ldr	r0, [pc, #180]	@ (800175c <HAL_SPI_MspInit+0x12c>)
 80016a6:	f000 fa99 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016aa:	e04f      	b.n	800174c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <HAL_SPI_MspInit+0x130>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d14a      	bne.n	800174c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b27      	ldr	r3, [pc, #156]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <HAL_SPI_MspInit+0x128>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800170a:	2308      	movs	r3, #8
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171a:	2305      	movs	r3, #5
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	480f      	ldr	r0, [pc, #60]	@ (8001764 <HAL_SPI_MspInit+0x134>)
 8001726:	f000 fa59 	bl	8001bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800172a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800173c:	2305      	movs	r3, #5
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4808      	ldr	r0, [pc, #32]	@ (8001768 <HAL_SPI_MspInit+0x138>)
 8001748:	f000 fa48 	bl	8001bdc <HAL_GPIO_Init>
}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	@ 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40013000 	.word	0x40013000
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40003800 	.word	0x40003800
 8001764:	40020800 	.word	0x40020800
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08e      	sub	sp, #56	@ 0x38
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <HAL_InitTick+0xe8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <HAL_InitTick+0xe8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
 800178c:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_InitTick+0xe8>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f814 	bl	80027d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017b2:	f000 fff9 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 80017b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80017b8:	e004      	b.n	80017c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ba:	f000 fff5 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 80017be:	4603      	mov	r3, r0
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c6:	4a24      	ldr	r2, [pc, #144]	@ (8001858 <HAL_InitTick+0xec>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	3b01      	subs	r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80017d2:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_InitTick+0xf0>)
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <HAL_InitTick+0xf0>)
 80017dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017e0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80017e2:	4a1e      	ldr	r2, [pc, #120]	@ (800185c <HAL_InitTick+0xf0>)
 80017e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <HAL_InitTick+0xf0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_InitTick+0xf0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_InitTick+0xf0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80017fa:	4818      	ldr	r0, [pc, #96]	@ (800185c <HAL_InitTick+0xf0>)
 80017fc:	f001 fad0 	bl	8002da0 <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001806:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11b      	bne.n	8001846 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800180e:	4813      	ldr	r0, [pc, #76]	@ (800185c <HAL_InitTick+0xf0>)
 8001810:	f001 fb20 	bl	8002e54 <HAL_TIM_Base_Start_IT>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800181a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800181e:	2b00      	cmp	r3, #0
 8001820:	d111      	bne.n	8001846 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001822:	201c      	movs	r0, #28
 8001824:	f000 f9cc 	bl	8001bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	d808      	bhi.n	8001840 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800182e:	2200      	movs	r2, #0
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	201c      	movs	r0, #28
 8001834:	f000 f9a8 	bl	8001b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001838:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_InitTick+0xf4>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e002      	b.n	8001846 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001846:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800184a:	4618      	mov	r0, r3
 800184c:	3738      	adds	r7, #56	@ 0x38
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	431bde83 	.word	0x431bde83
 800185c:	20000194 	.word	0x20000194
 8001860:	20000038 	.word	0x20000038

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <NMI_Handler+0x4>

0800186c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <MemManage_Handler+0x4>

0800187c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <UsageFault_Handler+0x4>

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <TIM2_IRQHandler+0x10>)
 80018a2:	f001 fb39 	bl	8002f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000194 	.word	0x20000194

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f004 fb54 	bl	8005f8c <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20020000 	.word	0x20020000
 8001910:	00000400 	.word	0x00000400
 8001914:	200001dc 	.word	0x200001dc
 8001918:	20004d18 	.word	0x20004d18

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001978 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	@ (800198c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f004 fb13 	bl	8005f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fc6d 	bl	8001250 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001984:	0800699c 	.word	0x0800699c
  ldr r2, =_sbss
 8001988:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800198c:	20004d14 	.word	0x20004d14

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f8d8 	bl	8001b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f7ff fed2 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fe06 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000003c 	.word	0x2000003c
 80019fc:	200001e0 	.word	0x200001e0

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200001e0 	.word	0x200001e0

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	@ (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	@ (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	@ 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff4c 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9a:	f7ff ff61 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	f7ff ffb1 	bl	8001b0c <NVIC_EncodePriority>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff80 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff54 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e159      	b.n	8001eac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8148 	bne.w	8001ea6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a2 	beq.w	8001ea6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b57      	ldr	r3, [pc, #348]	@ (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a56      	ldr	r2, [pc, #344]	@ (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b54      	ldr	r3, [pc, #336]	@ (8001ec4 <HAL_GPIO_Init+0x2e8>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a52      	ldr	r2, [pc, #328]	@ (8001ec8 <HAL_GPIO_Init+0x2ec>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a49      	ldr	r2, [pc, #292]	@ (8001ecc <HAL_GPIO_Init+0x2f0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x202>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a48      	ldr	r2, [pc, #288]	@ (8001ed0 <HAL_GPIO_Init+0x2f4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x1fe>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a47      	ldr	r2, [pc, #284]	@ (8001ed4 <HAL_GPIO_Init+0x2f8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x1fa>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a46      	ldr	r2, [pc, #280]	@ (8001ed8 <HAL_GPIO_Init+0x2fc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x1f6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a45      	ldr	r2, [pc, #276]	@ (8001edc <HAL_GPIO_Init+0x300>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x1f2>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e008      	b.n	8001de0 <HAL_GPIO_Init+0x204>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x204>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_Init+0x204>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x204>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x204>
 8001dde:	2300      	movs	r3, #0
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	f002 0203 	and.w	r2, r2, #3
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4093      	lsls	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df0:	4935      	ldr	r1, [pc, #212]	@ (8001ec8 <HAL_GPIO_Init+0x2ec>)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfe:	4b38      	ldr	r3, [pc, #224]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e4c:	4a24      	ldr	r2, [pc, #144]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e52:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <HAL_GPIO_Init+0x304>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b0f      	cmp	r3, #15
 8001eb0:	f67f aea2 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40013c00 	.word	0x40013c00

08001ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e267      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d075      	beq.n	8002052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f66:	4b88      	ldr	r3, [pc, #544]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d00c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b85      	ldr	r3, [pc, #532]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d112      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4b82      	ldr	r3, [pc, #520]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f8a:	d10b      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05b      	beq.n	8002050 <HAL_RCC_OscConfig+0x108>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d157      	bne.n	8002050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e242      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x74>
 8001fae:	4b76      	ldr	r3, [pc, #472]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a75      	ldr	r2, [pc, #468]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e01d      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6f      	ldr	r2, [pc, #444]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6c      	ldr	r2, [pc, #432]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xb0>
 8001fe0:	4b69      	ldr	r3, [pc, #420]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	4b66      	ldr	r3, [pc, #408]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a65      	ldr	r2, [pc, #404]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fcfe 	bl	8001a00 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff fcfa 	bl	8001a00 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e207      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0xc0>
 8002026:	e014      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff fcea 	bl	8001a00 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fce6 	bl	8001a00 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1f3      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	4b51      	ldr	r3, [pc, #324]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0xe8>
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205e:	4b4a      	ldr	r3, [pc, #296]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b47      	ldr	r3, [pc, #284]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002072:	2b08      	cmp	r3, #8
 8002074:	d11c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b44      	ldr	r3, [pc, #272]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	4b41      	ldr	r3, [pc, #260]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1c7      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	e03a      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b8:	4b34      	ldr	r3, [pc, #208]	@ (800218c <HAL_RCC_OscConfig+0x244>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff fc9f 	bl	8001a00 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff fc9b 	bl	8001a00 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1a8      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4925      	ldr	r1, [pc, #148]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x244>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff fc7e 	bl	8001a00 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002108:	f7ff fc7a 	bl	8001a00 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e187      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	4b1b      	ldr	r3, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_RCC_OscConfig+0x248>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7ff fc5e 	bl	8001a00 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7ff fc5a 	bl	8001a00 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e167      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <HAL_RCC_OscConfig+0x240>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x200>
 8002166:	e01b      	b.n	80021a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCC_OscConfig+0x248>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fc47 	bl	8001a00 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002174:	e00e      	b.n	8002194 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7ff fc43 	bl	8001a00 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d907      	bls.n	8002194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e150      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
 8002188:	40023800 	.word	0x40023800
 800218c:	42470000 	.word	0x42470000
 8002190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ea      	bne.n	8002176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8097 	beq.w	80022dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b81      	ldr	r3, [pc, #516]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b7d      	ldr	r3, [pc, #500]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	4a7c      	ldr	r2, [pc, #496]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ce:	4b7a      	ldr	r3, [pc, #488]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b77      	ldr	r3, [pc, #476]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b74      	ldr	r3, [pc, #464]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a73      	ldr	r2, [pc, #460]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fc03 	bl	8001a00 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7ff fbff 	bl	8001a00 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e10c      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b6a      	ldr	r3, [pc, #424]	@ (80023bc <HAL_RCC_OscConfig+0x474>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x2ea>
 8002224:	4b64      	ldr	r3, [pc, #400]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002228:	4a63      	ldr	r2, [pc, #396]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002230:	e01c      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x30c>
 800223a:	4b5f      	ldr	r3, [pc, #380]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	4a5e      	ldr	r2, [pc, #376]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6713      	str	r3, [r2, #112]	@ 0x70
 8002246:	4b5c      	ldr	r3, [pc, #368]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	4a5b      	ldr	r2, [pc, #364]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6713      	str	r3, [r2, #112]	@ 0x70
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x324>
 8002254:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	4a57      	ldr	r2, [pc, #348]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002260:	4b55      	ldr	r3, [pc, #340]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a54      	ldr	r2, [pc, #336]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d015      	beq.n	80022a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7ff fbc4 	bl	8001a00 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7ff fbc0 	bl	8001a00 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0cb      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ee      	beq.n	800227c <HAL_RCC_OscConfig+0x334>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7ff fbae 	bl	8001a00 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff fbaa 	bl	8001a00 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0b5      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1ee      	bne.n	80022a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d0:	4b39      	ldr	r3, [pc, #228]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	4a38      	ldr	r2, [pc, #224]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a1 	beq.w	8002428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e6:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d05c      	beq.n	80023ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d141      	bne.n	800237e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCC_OscConfig+0x478>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff fb7e 	bl	8001a00 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff fb7a 	bl	8001a00 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e087      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b27      	ldr	r3, [pc, #156]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	491b      	ldr	r1, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fb53 	bl	8001a00 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7ff fb4f 	bl	8001a00 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e05c      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x416>
 800237c:	e054      	b.n	8002428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_RCC_OscConfig+0x478>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fb3c 	bl	8001a00 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff fb38 	bl	8001a00 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e045      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_RCC_OscConfig+0x470>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
 80023aa:	e03d      	b.n	8002428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e038      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000
 80023c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x4ec>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d028      	beq.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d121      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	3b01      	subs	r3, #1
 800240e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0cc      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b68      	ldr	r3, [pc, #416]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d90c      	bls.n	8002474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b65      	ldr	r3, [pc, #404]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b8      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800248c:	4b59      	ldr	r3, [pc, #356]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a58      	ldr	r2, [pc, #352]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a4:	4b53      	ldr	r3, [pc, #332]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b50      	ldr	r3, [pc, #320]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	494d      	ldr	r1, [pc, #308]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d044      	beq.n	8002558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b47      	ldr	r3, [pc, #284]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d119      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e07f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b3f      	ldr	r3, [pc, #252]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e067      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4934      	ldr	r1, [pc, #208]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7ff fa6a 	bl	8001a00 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7ff fa66 	bl	8001a00 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e04f      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d20c      	bcs.n	8002580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e032      	b.n	80025e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4916      	ldr	r1, [pc, #88]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	490e      	ldr	r1, [pc, #56]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025be:	f000 f821 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	490a      	ldr	r1, [pc, #40]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	5ccb      	ldrb	r3, [r1, r3]
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	@ (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f8c4 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08006940 	.word	0x08006940
 80025fc:	20000034 	.word	0x20000034
 8002600:	20000038 	.word	0x20000038

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002608:	b090      	sub	sp, #64	@ 0x40
 800260a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002610:	2300      	movs	r3, #0
 8002612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261c:	4b59      	ldr	r3, [pc, #356]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x180>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d00d      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x40>
 8002628:	2b08      	cmp	r3, #8
 800262a:	f200 80a1 	bhi.w	8002770 <HAL_RCC_GetSysClockFreq+0x16c>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x34>
 8002632:	2b04      	cmp	r3, #4
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x3a>
 8002636:	e09b      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x184>)
 800263a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800263c:	e09b      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263e:	4b53      	ldr	r3, [pc, #332]	@ (800278c <HAL_RCC_GetSysClockFreq+0x188>)
 8002640:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002642:	e098      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002644:	4b4f      	ldr	r3, [pc, #316]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x180>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800264c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264e:	4b4d      	ldr	r3, [pc, #308]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x180>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265a:	4b4a      	ldr	r3, [pc, #296]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x180>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	2200      	movs	r2, #0
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	627a      	str	r2, [r7, #36]	@ 0x24
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800266c:	2100      	movs	r1, #0
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_GetSysClockFreq+0x188>)
 8002670:	fb03 f201 	mul.w	r2, r3, r1
 8002674:	2300      	movs	r3, #0
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	4413      	add	r3, r2
 800267c:	4a43      	ldr	r2, [pc, #268]	@ (800278c <HAL_RCC_GetSysClockFreq+0x188>)
 800267e:	fba0 1202 	umull	r1, r2, r0, r2
 8002682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002684:	460a      	mov	r2, r1
 8002686:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002688:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800268a:	4413      	add	r3, r2
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002690:	2200      	movs	r2, #0
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	61fa      	str	r2, [r7, #28]
 8002696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800269e:	f7fd fdf7 	bl	8000290 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4613      	mov	r3, r2
 80026a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026aa:	e053      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ac:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	2200      	movs	r2, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	617a      	str	r2, [r7, #20]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026be:	f04f 0b00 	mov.w	fp, #0
 80026c2:	4652      	mov	r2, sl
 80026c4:	465b      	mov	r3, fp
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ebb2 080a 	subs.w	r8, r2, sl
 80026de:	eb63 090b 	sbc.w	r9, r3, fp
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026f6:	ebb2 0408 	subs.w	r4, r2, r8
 80026fa:	eb63 0509 	sbc.w	r5, r3, r9
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	00eb      	lsls	r3, r5, #3
 8002708:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270c:	00e2      	lsls	r2, r4, #3
 800270e:	4614      	mov	r4, r2
 8002710:	461d      	mov	r5, r3
 8002712:	eb14 030a 	adds.w	r3, r4, sl
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	eb45 030b 	adc.w	r3, r5, fp
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272a:	4629      	mov	r1, r5
 800272c:	028b      	lsls	r3, r1, #10
 800272e:	4621      	mov	r1, r4
 8002730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002734:	4621      	mov	r1, r4
 8002736:	028a      	lsls	r2, r1, #10
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273e:	2200      	movs	r2, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	60fa      	str	r2, [r7, #12]
 8002744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002748:	f7fd fda2 	bl	8000290 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4613      	mov	r3, r2
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x180>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002764:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x184>)
 8002772:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002778:	4618      	mov	r0, r3
 800277a:	3740      	adds	r7, #64	@ 0x40
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	00f42400 	.word	0x00f42400
 800278c:	017d7840 	.word	0x017d7840

08002790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000034 	.word	0x20000034

080027a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027ac:	f7ff fff0 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08006950 	.word	0x08006950

080027d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	220f      	movs	r2, #15
 80027de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e0:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_RCC_GetClockConfig+0x60>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07b      	b.n	800293e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002856:	d009      	beq.n	800286c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
 800285e:	e005      	b.n	800286c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fed2 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f0:	ea42 0103 	orr.w	r1, r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0104 	and.w	r1, r3, #4
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f003 0210 	and.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800292c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b088      	sub	sp, #32
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_SPI_Transmit+0x22>
 8002964:	2302      	movs	r3, #2
 8002966:	e12d      	b.n	8002bc4 <HAL_SPI_Transmit+0x27e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002970:	f7ff f846 	bl	8001a00 <HAL_GetTick>
 8002974:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	77fb      	strb	r3, [r7, #31]
    goto error;
 800298a:	e116      	b.n	8002bba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_SPI_Transmit+0x52>
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800299c:	e10d      	b.n	8002bba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2203      	movs	r2, #3
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e4:	d10f      	bne.n	8002a06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b40      	cmp	r3, #64	@ 0x40
 8002a12:	d007      	beq.n	8002a24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a2c:	d14f      	bne.n	8002ace <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_Transmit+0xf6>
 8002a36:	8afb      	ldrh	r3, [r7, #22]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d142      	bne.n	8002ac2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a60:	e02f      	b.n	8002ac2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d112      	bne.n	8002a96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	1c9a      	adds	r2, r3, #2
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a94:	e015      	b.n	8002ac2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a96:	f7fe ffb3 	bl	8001a00 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d803      	bhi.n	8002aae <HAL_SPI_Transmit+0x168>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Transmit+0x16e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ac0:	e07b      	b.n	8002bba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ca      	bne.n	8002a62 <HAL_SPI_Transmit+0x11c>
 8002acc:	e050      	b.n	8002b70 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_Transmit+0x196>
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d144      	bne.n	8002b66 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b02:	e030      	b.n	8002b66 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d113      	bne.n	8002b3a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	7812      	ldrb	r2, [r2, #0]
 8002b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b38:	e015      	b.n	8002b66 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3a:	f7fe ff61 	bl	8001a00 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d803      	bhi.n	8002b52 <HAL_SPI_Transmit+0x20c>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d102      	bne.n	8002b58 <HAL_SPI_Transmit+0x212>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002b64:	e029      	b.n	8002bba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1c9      	bne.n	8002b04 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f8bf 	bl	8002cf8 <SPI_EndRxTxTransaction>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e003      	b.n	8002bba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bda:	b2db      	uxtb	r3, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bf8:	f7fe ff02 	bl	8001a00 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c08:	f7fe fefa 	bl	8001a00 <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	0d1b      	lsrs	r3, r3, #20
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	e054      	b.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d050      	beq.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c28:	f7fe feea 	bl	8001a00 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d902      	bls.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d13d      	bne.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c56:	d111      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c60:	d004      	beq.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d107      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c84:	d10f      	bne.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e017      	b.n	8002cea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d19b      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000034 	.word	0x20000034

08002cf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff ff6a 	bl	8002be8 <SPI_WaitFlagStateUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d007      	beq.n	8002d2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e032      	b.n	8002d90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <SPI_EndRxTxTransaction+0xa0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d9c <SPI_EndRxTxTransaction+0xa4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	0d5b      	lsrs	r3, r3, #21
 8002d36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d48:	d112      	bne.n	8002d70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	@ 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff ff47 	bl	8002be8 <SPI_WaitFlagStateUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d016      	beq.n	8002d8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e00f      	b.n	8002d90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d0f2      	beq.n	8002d70 <SPI_EndRxTxTransaction+0x78>
 8002d8a:	e000      	b.n	8002d8e <SPI_EndRxTxTransaction+0x96>
        break;
 8002d8c:	bf00      	nop
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000034 	.word	0x20000034
 8002d9c:	165e9f81 	.word	0x165e9f81

08002da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e041      	b.n	8002e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f839 	bl	8002e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f000 f9b2 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d001      	beq.n	8002e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e044      	b.n	8002ef6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1e      	ldr	r2, [pc, #120]	@ (8002f04 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e96:	d013      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f08 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a19      	ldr	r2, [pc, #100]	@ (8002f0c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a17      	ldr	r2, [pc, #92]	@ (8002f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d111      	bne.n	8002ee4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d010      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee2:	e007      	b.n	8002ef4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d020      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01b      	beq.n	8002f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0202 	mvn.w	r2, #2
 8002f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8d2 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f8c4 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8d5 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d020      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0204 	mvn.w	r2, #4
 8002f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8ac 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f89e 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f8af 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d020      	beq.n	8003014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01b      	beq.n	8003014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0208 	mvn.w	r2, #8
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f886 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f878 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f889 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d020      	beq.n	8003060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01b      	beq.n	8003060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0210 	mvn.w	r2, #16
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2208      	movs	r2, #8
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f860 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f852 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f863 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0201 	mvn.w	r2, #1
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fa95 	bl	80015ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8e6 	bl	8003274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f834 	bl	8003134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0220 	mvn.w	r2, #32
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8b8 	bl	8003260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3a      	ldr	r2, [pc, #232]	@ (8003244 <TIM_Base_SetConfig+0xfc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00f      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003166:	d00b      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <TIM_Base_SetConfig+0x100>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a36      	ldr	r2, [pc, #216]	@ (800324c <TIM_Base_SetConfig+0x104>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_Base_SetConfig+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a35      	ldr	r2, [pc, #212]	@ (8003250 <TIM_Base_SetConfig+0x108>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d108      	bne.n	8003192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <TIM_Base_SetConfig+0xfc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01b      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a0:	d017      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a28      	ldr	r2, [pc, #160]	@ (8003248 <TIM_Base_SetConfig+0x100>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a27      	ldr	r2, [pc, #156]	@ (800324c <TIM_Base_SetConfig+0x104>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00f      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <TIM_Base_SetConfig+0x108>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <TIM_Base_SetConfig+0x10c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <TIM_Base_SetConfig+0x110>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a23      	ldr	r2, [pc, #140]	@ (800325c <TIM_Base_SetConfig+0x114>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0e      	ldr	r2, [pc, #56]	@ (8003244 <TIM_Base_SetConfig+0xfc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d103      	bne.n	8003218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d105      	bne.n	8003236 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]
  }
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <__NVIC_SetPriority>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	@ (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	@ (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <SysTick_Handler+0x1c>)
 80032e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032e4:	f001 fd46 	bl	8004d74 <xTaskGetSchedulerState>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032ee:	f002 fb3b 	bl	8005968 <xPortSysTickHandler>
  }
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000e010 	.word	0xe000e010

080032fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003300:	2100      	movs	r1, #0
 8003302:	f06f 0004 	mvn.w	r0, #4
 8003306:	f7ff ffbf 	bl	8003288 <__NVIC_SetPriority>
#endif
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003316:	f3ef 8305 	mrs	r3, IPSR
 800331a:	603b      	str	r3, [r7, #0]
  return(result);
 800331c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003322:	f06f 0305 	mvn.w	r3, #5
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e00c      	b.n	8003344 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <osKernelInitialize+0x44>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <osKernelInitialize+0x44>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e002      	b.n	8003344 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003344:	687b      	ldr	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200001e4 	.word	0x200001e4

08003358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335e:	f3ef 8305 	mrs	r3, IPSR
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelStart+0x1a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e010      	b.n	8003394 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003372:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <osKernelStart+0x48>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d109      	bne.n	800338e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800337a:	f7ff ffbf 	bl	80032fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800337e:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <osKernelStart+0x48>)
 8003380:	2202      	movs	r2, #2
 8003382:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003384:	f001 f892 	bl	80044ac <vTaskStartScheduler>
      stat = osOK;
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	e002      	b.n	8003394 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200001e4 	.word	0x200001e4

080033a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	@ 0x38
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b4:	f3ef 8305 	mrs	r3, IPSR
 80033b8:	617b      	str	r3, [r7, #20]
  return(result);
 80033ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d17e      	bne.n	80034be <osThreadNew+0x11a>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07b      	beq.n	80034be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033c6:	2380      	movs	r3, #128	@ 0x80
 80033c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033ca:	2318      	movs	r3, #24
 80033cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d045      	beq.n	800346a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <osThreadNew+0x48>
        name = attr->name;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <osThreadNew+0x6e>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b38      	cmp	r3, #56	@ 0x38
 8003404:	d805      	bhi.n	8003412 <osThreadNew+0x6e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <osThreadNew+0x72>
        return (NULL);
 8003412:	2300      	movs	r3, #0
 8003414:	e054      	b.n	80034c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <osThreadNew+0xa8>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2ba7      	cmp	r3, #167	@ 0xa7
 8003434:	d90a      	bls.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <osThreadNew+0xa8>
        mem = 1;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e010      	b.n	800346e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10c      	bne.n	800346e <osThreadNew+0xca>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <osThreadNew+0xca>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <osThreadNew+0xca>
          mem = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e001      	b.n	800346e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d110      	bne.n	8003496 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800347c:	9202      	str	r2, [sp, #8]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fe1a 	bl	80040c4 <xTaskCreateStatic>
 8003490:	4603      	mov	r3, r0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	e013      	b.n	80034be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d110      	bne.n	80034be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fe68 	bl	8004184 <xTaskCreate>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <osThreadNew+0x11a>
            hTask = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	@ 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d0:	f3ef 8305 	mrs	r3, IPSR
 80034d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <osDelay+0x1c>
    stat = osErrorISR;
 80034dc:	f06f 0305 	mvn.w	r3, #5
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e007      	b.n	80034f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ffa6 	bl	8004440 <vTaskDelay>
    }
  }

  return (stat);
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a07      	ldr	r2, [pc, #28]	@ (800352c <vApplicationGetIdleTaskMemory+0x2c>)
 8003510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a06      	ldr	r2, [pc, #24]	@ (8003530 <vApplicationGetIdleTaskMemory+0x30>)
 8003516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2280      	movs	r2, #128	@ 0x80
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200001e8 	.word	0x200001e8
 8003530:	20000290 	.word	0x20000290

08003534 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <vApplicationGetTimerTaskMemory+0x2c>)
 8003544:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a06      	ldr	r2, [pc, #24]	@ (8003564 <vApplicationGetTimerTaskMemory+0x30>)
 800354a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000490 	.word	0x20000490
 8003564:	20000538 	.word	0x20000538

08003568 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0208 	add.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 0208 	add.w	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f103 0208 	add.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d103      	bne.n	800362a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e00c      	b.n	8003644 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3308      	adds	r3, #8
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e002      	b.n	8003638 <vListInsert+0x2e>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d2f6      	bcs.n	8003632 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6852      	ldr	r2, [r2, #4]
 800369c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d103      	bne.n	80036b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036fc:	f002 f8a4 	bl	8005848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003708:	68f9      	ldr	r1, [r7, #12]
 800370a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	3b01      	subs	r3, #1
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	441a      	add	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	22ff      	movs	r2, #255	@ 0xff
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	22ff      	movs	r2, #255	@ 0xff
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d114      	bne.n	800377c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01a      	beq.n	8003790 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3310      	adds	r3, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f001 f942 	bl	80049e8 <xTaskRemoveFromEventList>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <xQueueGenericReset+0xd0>)
 800376c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	e009      	b.n	8003790 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3310      	adds	r3, #16
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fef1 	bl	8003568 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3324      	adds	r3, #36	@ 0x24
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff feec 	bl	8003568 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003790:	f002 f88c 	bl	80058ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000ed04 	.word	0xe000ed04

080037a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08e      	sub	sp, #56	@ 0x38
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <xQueueGenericCreateStatic+0x56>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <xQueueGenericCreateStatic+0x5a>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericCreateStatic+0x5c>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	623b      	str	r3, [r7, #32]
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <xQueueGenericCreateStatic+0x84>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <xQueueGenericCreateStatic+0x88>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <xQueueGenericCreateStatic+0x8a>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	61fb      	str	r3, [r7, #28]
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	e7fd      	b.n	8003846 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800384a:	2350      	movs	r3, #80	@ 0x50
 800384c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b50      	cmp	r3, #80	@ 0x50
 8003852:	d00b      	beq.n	800386c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61bb      	str	r3, [r7, #24]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800386c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003880:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f805 	bl	800389e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003896:	4618      	mov	r0, r3
 8003898:	3730      	adds	r7, #48	@ 0x30
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e002      	b.n	80038c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038cc:	2101      	movs	r1, #1
 80038ce:	69b8      	ldr	r0, [r7, #24]
 80038d0:	f7ff fefe 	bl	80036d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08e      	sub	sp, #56	@ 0x38
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038f2:	2300      	movs	r3, #0
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <xQueueGenericSend+0x34>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <xQueueGenericSend+0x42>
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <xQueueGenericSend+0x46>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <xQueueGenericSend+0x48>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <xQueueGenericSend+0x64>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d103      	bne.n	8003956 <xQueueGenericSend+0x72>
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <xQueueGenericSend+0x76>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueGenericSend+0x78>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <xQueueGenericSend+0x94>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003978:	f001 f9fc 	bl	8004d74 <xTaskGetSchedulerState>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <xQueueGenericSend+0xa4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <xQueueGenericSend+0xa8>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <xQueueGenericSend+0xaa>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <xQueueGenericSend+0xc6>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	61fb      	str	r3, [r7, #28]
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039aa:	f001 ff4d 	bl	8005848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <xQueueGenericSend+0xdc>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d129      	bne.n	8003a14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c6:	f000 fa0f 	bl	8003de8 <prvCopyDataToQueue>
 80039ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	3324      	adds	r3, #36	@ 0x24
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f805 	bl	80049e8 <xTaskRemoveFromEventList>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <xQueueGenericSend+0x200>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	e00a      	b.n	8003a0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039fc:	4b39      	ldr	r3, [pc, #228]	@ (8003ae4 <xQueueGenericSend+0x200>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a0c:	f001 ff4e 	bl	80058ac <vPortExitCritical>
				return pdPASS;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e063      	b.n	8003adc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1a:	f001 ff47 	bl	80058ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e05c      	b.n	8003adc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 f83f 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a32:	2301      	movs	r3, #1
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a36:	f001 ff39 	bl	80058ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3a:	f000 fda7 	bl	800458c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a3e:	f001 ff03 	bl	8005848 <vPortEnterCritical>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d103      	bne.n	8003a58 <xQueueGenericSend+0x174>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d103      	bne.n	8003a6e <xQueueGenericSend+0x18a>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a6e:	f001 ff1d 	bl	80058ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a72:	1d3a      	adds	r2, r7, #4
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 f82e 	bl	8004adc <xTaskCheckForTimeOut>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d124      	bne.n	8003ad0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a88:	f000 faa6 	bl	8003fd8 <prvIsQueueFull>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	3310      	adds	r3, #16
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff52 	bl	8004944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aa2:	f000 fa31 	bl	8003f08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aa6:	f000 fd7f 	bl	80045a8 <xTaskResumeAll>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af7c 	bne.w	80039aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <xQueueGenericSend+0x200>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	e772      	b.n	80039aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ac6:	f000 fa1f 	bl	8003f08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aca:	f000 fd6d 	bl	80045a8 <xTaskResumeAll>
 8003ace:	e76c      	b.n	80039aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad2:	f000 fa19 	bl	8003f08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad6:	f000 fd67 	bl	80045a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ada:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3738      	adds	r7, #56	@ 0x38
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b090      	sub	sp, #64	@ 0x40
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <xQueueGenericSendFromISR+0x3e>
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueGenericSendFromISR+0x42>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueGenericSendFromISR+0x44>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSendFromISR+0x6e>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <xQueueGenericSendFromISR+0x72>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueGenericSendFromISR+0x74>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	623b      	str	r3, [r7, #32]
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b78:	f001 ff46 	bl	8005a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b7c:	f3ef 8211 	mrs	r2, BASEPRI
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	61fa      	str	r2, [r7, #28]
 8003b92:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <xQueueGenericSendFromISR+0xc2>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d12f      	bne.n	8003c0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bc0:	f000 f912 	bl	8003de8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bc4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d112      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	3324      	adds	r3, #36	@ 0x24
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 ff04 	bl	80049e8 <xTaskRemoveFromEventList>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e007      	b.n	8003c04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	b25a      	sxtb	r2, r3
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003c08:	e001      	b.n	8003c0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3740      	adds	r7, #64	@ 0x40
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	@ 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <xQueueReceive+0x32>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	623b      	str	r3, [r7, #32]
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	e7fd      	b.n	8003c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <xQueueReceive+0x40>
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <xQueueReceive+0x44>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <xQueueReceive+0x46>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <xQueueReceive+0x62>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	61fb      	str	r3, [r7, #28]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c86:	f001 f875 	bl	8004d74 <xTaskGetSchedulerState>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <xQueueReceive+0x72>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <xQueueReceive+0x76>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <xQueueReceive+0x78>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10b      	bne.n	8003cb8 <xQueueReceive+0x94>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61bb      	str	r3, [r7, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cb8:	f001 fdc6 	bl	8005848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01f      	beq.n	8003d08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ccc:	f000 f8f6 	bl	8003ebc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	3310      	adds	r3, #16
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe7f 	bl	80049e8 <xTaskRemoveFromEventList>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8003de4 <xQueueReceive+0x1c0>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d00:	f001 fdd4 	bl	80058ac <vPortExitCritical>
				return pdPASS;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e069      	b.n	8003ddc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d0e:	f001 fdcd 	bl	80058ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e062      	b.n	8003ddc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d1c:	f107 0310 	add.w	r3, r7, #16
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fec5 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d2a:	f001 fdbf 	bl	80058ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d2e:	f000 fc2d 	bl	800458c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d32:	f001 fd89 	bl	8005848 <vPortEnterCritical>
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d103      	bne.n	8003d4c <xQueueReceive+0x128>
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d52:	b25b      	sxtb	r3, r3
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d103      	bne.n	8003d62 <xQueueReceive+0x13e>
 8003d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d62:	f001 fda3 	bl	80058ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d66:	1d3a      	adds	r2, r7, #4
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 feb4 	bl	8004adc <xTaskCheckForTimeOut>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d123      	bne.n	8003dc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d7c:	f000 f916 	bl	8003fac <prvIsQueueEmpty>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d017      	beq.n	8003db6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d88:	3324      	adds	r3, #36	@ 0x24
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fdd8 	bl	8004944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d96:	f000 f8b7 	bl	8003f08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d9a:	f000 fc05 	bl	80045a8 <xTaskResumeAll>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d189      	bne.n	8003cb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003da4:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <xQueueReceive+0x1c0>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	e780      	b.n	8003cb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003db8:	f000 f8a6 	bl	8003f08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dbc:	f000 fbf4 	bl	80045a8 <xTaskResumeAll>
 8003dc0:	e77a      	b.n	8003cb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc4:	f000 f8a0 	bl	8003f08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dc8:	f000 fbee 	bl	80045a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dce:	f000 f8ed 	bl	8003fac <prvIsQueueEmpty>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f43f af6f 	beq.w	8003cb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3730      	adds	r7, #48	@ 0x30
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d14d      	bne.n	8003eaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 ffcc 	bl	8004db0 <xTaskPriorityDisinherit>
 8003e18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	e043      	b.n	8003eaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d119      	bne.n	8003e5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6858      	ldr	r0, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	461a      	mov	r2, r3
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	f002 f8d6 	bl	8005fe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	441a      	add	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d32b      	bcc.n	8003eaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	e026      	b.n	8003eaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68d8      	ldr	r0, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	461a      	mov	r2, r3
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	f002 f8bc 	bl	8005fe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	425b      	negs	r3, r3
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d207      	bcs.n	8003e98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	425b      	negs	r3, r3
 8003e92:	441a      	add	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d105      	bne.n	8003eaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003eb2:	697b      	ldr	r3, [r7, #20]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	441a      	add	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d303      	bcc.n	8003ef0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	f002 f872 	bl	8005fe4 <memcpy>
	}
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f10:	f001 fc9a 	bl	8005848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f1c:	e011      	b.n	8003f42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d012      	beq.n	8003f4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3324      	adds	r3, #36	@ 0x24
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd5c 	bl	80049e8 <xTaskRemoveFromEventList>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f36:	f000 fe35 	bl	8004ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dce9      	bgt.n	8003f1e <prvUnlockQueue+0x16>
 8003f4a:	e000      	b.n	8003f4e <prvUnlockQueue+0x46>
					break;
 8003f4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	22ff      	movs	r2, #255	@ 0xff
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f56:	f001 fca9 	bl	80058ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f5a:	f001 fc75 	bl	8005848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f66:	e011      	b.n	8003f8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3310      	adds	r3, #16
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fd37 	bl	80049e8 <xTaskRemoveFromEventList>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f80:	f000 fe10 	bl	8004ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f84:	7bbb      	ldrb	r3, [r7, #14]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dce9      	bgt.n	8003f68 <prvUnlockQueue+0x60>
 8003f94:	e000      	b.n	8003f98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	22ff      	movs	r2, #255	@ 0xff
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003fa0:	f001 fc84 	bl	80058ac <vPortExitCritical>
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fb4:	f001 fc48 	bl	8005848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e001      	b.n	8003fca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f001 fc6f 	bl	80058ac <vPortExitCritical>

	return xReturn;
 8003fce:	68fb      	ldr	r3, [r7, #12]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fe0:	f001 fc32 	bl	8005848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d102      	bne.n	8003ff6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e001      	b.n	8003ffa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ffa:	f001 fc57 	bl	80058ac <vPortExitCritical>

	return xReturn;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e014      	b.n	8004042 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004018:	4a0f      	ldr	r2, [pc, #60]	@ (8004058 <vQueueAddToRegistry+0x50>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004024:	490c      	ldr	r1, [pc, #48]	@ (8004058 <vQueueAddToRegistry+0x50>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800402e:	4a0a      	ldr	r2, [pc, #40]	@ (8004058 <vQueueAddToRegistry+0x50>)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4413      	add	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800403a:	e006      	b.n	800404a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b07      	cmp	r3, #7
 8004046:	d9e7      	bls.n	8004018 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000938 	.word	0x20000938

0800405c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800406c:	f001 fbec 	bl	8005848 <vPortEnterCritical>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004076:	b25b      	sxtb	r3, r3
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d103      	bne.n	8004086 <vQueueWaitForMessageRestricted+0x2a>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d103      	bne.n	800409c <vQueueWaitForMessageRestricted+0x40>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800409c:	f001 fc06 	bl	80058ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3324      	adds	r3, #36	@ 0x24
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fc6d 	bl	8004990 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040b6:	6978      	ldr	r0, [r7, #20]
 80040b8:	f7ff ff26 	bl	8003f08 <prvUnlockQueue>
	}
 80040bc:	bf00      	nop
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	@ 0x38
 80040c8:	af04      	add	r7, sp, #16
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	623b      	str	r3, [r7, #32]
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <xTaskCreateStatic+0x4a>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	61fb      	str	r3, [r7, #28]
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	e7fd      	b.n	800410a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800410e:	23a8      	movs	r3, #168	@ 0xa8
 8004110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2ba8      	cmp	r3, #168	@ 0xa8
 8004116:	d00b      	beq.n	8004130 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	61bb      	str	r3, [r7, #24]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004130:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01e      	beq.n	8004176 <xTaskCreateStatic+0xb2>
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01b      	beq.n	8004176 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2202      	movs	r2, #2
 800414c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004150:	2300      	movs	r3, #0
 8004152:	9303      	str	r3, [sp, #12]
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f851 	bl	8004210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800416e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004170:	f000 f8f6 	bl	8004360 <prvAddNewTaskToReadyList>
 8004174:	e001      	b.n	800417a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800417a:	697b      	ldr	r3, [r7, #20]
	}
 800417c:	4618      	mov	r0, r3
 800417e:	3728      	adds	r7, #40	@ 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	@ 0x30
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fc77 	bl	8005a8c <pvPortMalloc>
 800419e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00e      	beq.n	80041c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041a6:	20a8      	movs	r0, #168	@ 0xa8
 80041a8:	f001 fc70 	bl	8005a8c <pvPortMalloc>
 80041ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ba:	e005      	b.n	80041c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f001 fd33 	bl	8005c28 <vPortFree>
 80041c2:	e001      	b.n	80041c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d017      	beq.n	80041fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	2300      	movs	r3, #0
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f80f 	bl	8004210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f2:	69f8      	ldr	r0, [r7, #28]
 80041f4:	f000 f8b4 	bl	8004360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f8:	2301      	movs	r3, #1
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e002      	b.n	8004204 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004204:	69bb      	ldr	r3, [r7, #24]
	}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	461a      	mov	r2, r3
 8004228:	21a5      	movs	r1, #165	@ 0xa5
 800422a:	f001 fe51 	bl	8005ed0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004238:	3b01      	subs	r3, #1
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f023 0307 	bic.w	r3, r3, #7
 8004246:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	617b      	str	r3, [r7, #20]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01f      	beq.n	80042b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e012      	b.n	800429c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	7819      	ldrb	r1, [r3, #0]
 800427e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	3334      	adds	r3, #52	@ 0x34
 8004286:	460a      	mov	r2, r1
 8004288:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3301      	adds	r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	d9e9      	bls.n	8004276 <prvInitialiseNewTask+0x66>
 80042a2:	e000      	b.n	80042a6 <prvInitialiseNewTask+0x96>
			{
				break;
 80042a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042ae:	e003      	b.n	80042b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	2b37      	cmp	r3, #55	@ 0x37
 80042bc:	d901      	bls.n	80042c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042be:	2337      	movs	r3, #55	@ 0x37
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	2200      	movs	r2, #0
 80042d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	3304      	adds	r3, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f965 	bl	80035a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	3318      	adds	r3, #24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f960 	bl	80035a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	2200      	movs	r2, #0
 800430a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	3354      	adds	r3, #84	@ 0x54
 8004312:	224c      	movs	r2, #76	@ 0x4c
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f001 fdda 	bl	8005ed0 <memset>
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	4a0d      	ldr	r2, [pc, #52]	@ (8004354 <prvInitialiseNewTask+0x144>)
 8004320:	659a      	str	r2, [r3, #88]	@ 0x58
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	4a0c      	ldr	r2, [pc, #48]	@ (8004358 <prvInitialiseNewTask+0x148>)
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <prvInitialiseNewTask+0x14c>)
 800432c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	69b8      	ldr	r0, [r7, #24]
 8004334:	f001 f95a 	bl	80055ec <pxPortInitialiseStack>
 8004338:	4602      	mov	r2, r0
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434a:	bf00      	nop
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20004bcc 	.word	0x20004bcc
 8004358:	20004c34 	.word	0x20004c34
 800435c:	20004c9c 	.word	0x20004c9c

08004360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004368:	f001 fa6e 	bl	8005848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800436c:	4b2d      	ldr	r3, [pc, #180]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a2c      	ldr	r2, [pc, #176]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004376:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437e:	4a2a      	ldr	r2, [pc, #168]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004384:	4b27      	ldr	r3, [pc, #156]	@ (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d110      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800438c:	f000 fc2e 	bl	8004bec <prvInitialiseTaskLists>
 8004390:	e00d      	b.n	80043ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004392:	4b26      	ldr	r3, [pc, #152]	@ (800442c <prvAddNewTaskToReadyList+0xcc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800439a:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d802      	bhi.n	80043ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ae:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d903      	bls.n	80043d4 <prvAddNewTaskToReadyList+0x74>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	4a18      	ldr	r2, [pc, #96]	@ (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a15      	ldr	r2, [pc, #84]	@ (8004438 <prvAddNewTaskToReadyList+0xd8>)
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7ff f8e9 	bl	80035c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043f0:	f001 fa5c 	bl	80058ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043f4:	4b0d      	ldr	r3, [pc, #52]	@ (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00e      	beq.n	800441a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	429a      	cmp	r2, r3
 8004408:	d207      	bcs.n	800441a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800440a:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <prvAddNewTaskToReadyList+0xdc>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000e4c 	.word	0x20000e4c
 8004428:	20000978 	.word	0x20000978
 800442c:	20000e58 	.word	0x20000e58
 8004430:	20000e68 	.word	0x20000e68
 8004434:	20000e54 	.word	0x20000e54
 8004438:	2000097c 	.word	0x2000097c
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <vTaskDelay+0x64>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <vTaskDelay+0x32>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	e7fd      	b.n	800446e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004472:	f000 f88b 	bl	800458c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004476:	2100      	movs	r1, #0
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fd09 	bl	8004e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800447e:	f000 f893 	bl	80045a8 <xTaskResumeAll>
 8004482:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800448a:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <vTaskDelay+0x68>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000e74 	.word	0x20000e74
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	@ 0x28
 80044b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ba:	463a      	mov	r2, r7
 80044bc:	1d39      	adds	r1, r7, #4
 80044be:	f107 0308 	add.w	r3, r7, #8
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f81c 	bl	8003500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	9202      	str	r2, [sp, #8]
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	460a      	mov	r2, r1
 80044da:	4924      	ldr	r1, [pc, #144]	@ (800456c <vTaskStartScheduler+0xc0>)
 80044dc:	4824      	ldr	r0, [pc, #144]	@ (8004570 <vTaskStartScheduler+0xc4>)
 80044de:	f7ff fdf1 	bl	80040c4 <xTaskCreateStatic>
 80044e2:	4603      	mov	r3, r0
 80044e4:	4a23      	ldr	r2, [pc, #140]	@ (8004574 <vTaskStartScheduler+0xc8>)
 80044e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044e8:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <vTaskStartScheduler+0xc8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e001      	b.n	80044fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004500:	f000 fd1a 	bl	8004f38 <xTimerCreateTimerTask>
 8004504:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d11b      	bne.n	8004544 <vTaskStartScheduler+0x98>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	613b      	str	r3, [r7, #16]
}
 800451e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004520:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <vTaskStartScheduler+0xcc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3354      	adds	r3, #84	@ 0x54
 8004526:	4a15      	ldr	r2, [pc, #84]	@ (800457c <vTaskStartScheduler+0xd0>)
 8004528:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <vTaskStartScheduler+0xd4>)
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004532:	4b14      	ldr	r3, [pc, #80]	@ (8004584 <vTaskStartScheduler+0xd8>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <vTaskStartScheduler+0xdc>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800453e:	f001 f8df 	bl	8005700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004542:	e00f      	b.n	8004564 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d10b      	bne.n	8004564 <vTaskStartScheduler+0xb8>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <vTaskStartScheduler+0xb4>
}
 8004564:	bf00      	nop
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	080068e0 	.word	0x080068e0
 8004570:	08004bbd 	.word	0x08004bbd
 8004574:	20000e70 	.word	0x20000e70
 8004578:	20000978 	.word	0x20000978
 800457c:	20000044 	.word	0x20000044
 8004580:	20000e6c 	.word	0x20000e6c
 8004584:	20000e58 	.word	0x20000e58
 8004588:	20000e50 	.word	0x20000e50

0800458c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004590:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <vTaskSuspendAll+0x18>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a03      	ldr	r2, [pc, #12]	@ (80045a4 <vTaskSuspendAll+0x18>)
 8004598:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000e74 	.word	0x20000e74

080045a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045b6:	4b42      	ldr	r3, [pc, #264]	@ (80046c0 <xTaskResumeAll+0x118>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	603b      	str	r3, [r7, #0]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045d6:	f001 f937 	bl	8005848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045da:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <xTaskResumeAll+0x118>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	4a37      	ldr	r2, [pc, #220]	@ (80046c0 <xTaskResumeAll+0x118>)
 80045e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e4:	4b36      	ldr	r3, [pc, #216]	@ (80046c0 <xTaskResumeAll+0x118>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d162      	bne.n	80046b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045ec:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <xTaskResumeAll+0x11c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d05e      	beq.n	80046b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f4:	e02f      	b.n	8004656 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f6:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <xTaskResumeAll+0x120>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	3318      	adds	r3, #24
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f83a 	bl	800367c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff f835 	bl	800367c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4b2d      	ldr	r3, [pc, #180]	@ (80046cc <xTaskResumeAll+0x124>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d903      	bls.n	8004626 <xTaskResumeAll+0x7e>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <xTaskResumeAll+0x124>)
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4a27      	ldr	r2, [pc, #156]	@ (80046d0 <xTaskResumeAll+0x128>)
 8004634:	441a      	add	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fe ffc0 	bl	80035c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004646:	4b23      	ldr	r3, [pc, #140]	@ (80046d4 <xTaskResumeAll+0x12c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004650:	4b21      	ldr	r3, [pc, #132]	@ (80046d8 <xTaskResumeAll+0x130>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004656:	4b1c      	ldr	r3, [pc, #112]	@ (80046c8 <xTaskResumeAll+0x120>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1cb      	bne.n	80045f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004664:	f000 fb66 	bl	8004d34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004668:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <xTaskResumeAll+0x134>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d010      	beq.n	8004696 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004674:	f000 f846 	bl	8004704 <xTaskIncrementTick>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800467e:	4b16      	ldr	r3, [pc, #88]	@ (80046d8 <xTaskResumeAll+0x130>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f1      	bne.n	8004674 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004690:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <xTaskResumeAll+0x134>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004696:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <xTaskResumeAll+0x130>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046a2:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <xTaskResumeAll+0x138>)
 80046a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046b2:	f001 f8fb 	bl	80058ac <vPortExitCritical>

	return xAlreadyYielded;
 80046b6:	68bb      	ldr	r3, [r7, #8]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20000e74 	.word	0x20000e74
 80046c4:	20000e4c 	.word	0x20000e4c
 80046c8:	20000e0c 	.word	0x20000e0c
 80046cc:	20000e54 	.word	0x20000e54
 80046d0:	2000097c 	.word	0x2000097c
 80046d4:	20000978 	.word	0x20000978
 80046d8:	20000e60 	.word	0x20000e60
 80046dc:	20000e5c 	.word	0x20000e5c
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <xTaskGetTickCount+0x1c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046f0:	687b      	ldr	r3, [r7, #4]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000e50 	.word	0x20000e50

08004704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800470e:	4b4f      	ldr	r3, [pc, #316]	@ (800484c <xTaskIncrementTick+0x148>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 8090 	bne.w	8004838 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004718:	4b4d      	ldr	r3, [pc, #308]	@ (8004850 <xTaskIncrementTick+0x14c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004720:	4a4b      	ldr	r2, [pc, #300]	@ (8004850 <xTaskIncrementTick+0x14c>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d121      	bne.n	8004770 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800472c:	4b49      	ldr	r3, [pc, #292]	@ (8004854 <xTaskIncrementTick+0x150>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	603b      	str	r3, [r7, #0]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <xTaskIncrementTick+0x46>
 800474e:	4b41      	ldr	r3, [pc, #260]	@ (8004854 <xTaskIncrementTick+0x150>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	4b40      	ldr	r3, [pc, #256]	@ (8004858 <xTaskIncrementTick+0x154>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3e      	ldr	r2, [pc, #248]	@ (8004854 <xTaskIncrementTick+0x150>)
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4a3e      	ldr	r2, [pc, #248]	@ (8004858 <xTaskIncrementTick+0x154>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b3e      	ldr	r3, [pc, #248]	@ (800485c <xTaskIncrementTick+0x158>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a3c      	ldr	r2, [pc, #240]	@ (800485c <xTaskIncrementTick+0x158>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	f000 fae2 	bl	8004d34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004770:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <xTaskIncrementTick+0x15c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	429a      	cmp	r2, r3
 8004778:	d349      	bcc.n	800480e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477a:	4b36      	ldr	r3, [pc, #216]	@ (8004854 <xTaskIncrementTick+0x150>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	4b36      	ldr	r3, [pc, #216]	@ (8004860 <xTaskIncrementTick+0x15c>)
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	601a      	str	r2, [r3, #0]
					break;
 800478c:	e03f      	b.n	800480e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478e:	4b31      	ldr	r3, [pc, #196]	@ (8004854 <xTaskIncrementTick+0x150>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d203      	bcs.n	80047ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004860 <xTaskIncrementTick+0x15c>)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047ac:	e02f      	b.n	800480e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ff62 	bl	800367c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3318      	adds	r3, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe ff59 	bl	800367c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ce:	4b25      	ldr	r3, [pc, #148]	@ (8004864 <xTaskIncrementTick+0x160>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <xTaskIncrementTick+0xda>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	4a22      	ldr	r2, [pc, #136]	@ (8004864 <xTaskIncrementTick+0x160>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004868 <xTaskIncrementTick+0x164>)
 80047ec:	441a      	add	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fee4 	bl	80035c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <xTaskIncrementTick+0x168>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d3b8      	bcc.n	800477a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480c:	e7b5      	b.n	800477a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <xTaskIncrementTick+0x168>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004814:	4914      	ldr	r1, [pc, #80]	@ (8004868 <xTaskIncrementTick+0x164>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d901      	bls.n	800482a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800482a:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <xTaskIncrementTick+0x16c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e004      	b.n	8004842 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004838:	4b0e      	ldr	r3, [pc, #56]	@ (8004874 <xTaskIncrementTick+0x170>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	4a0d      	ldr	r2, [pc, #52]	@ (8004874 <xTaskIncrementTick+0x170>)
 8004840:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004842:	697b      	ldr	r3, [r7, #20]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000e74 	.word	0x20000e74
 8004850:	20000e50 	.word	0x20000e50
 8004854:	20000e04 	.word	0x20000e04
 8004858:	20000e08 	.word	0x20000e08
 800485c:	20000e64 	.word	0x20000e64
 8004860:	20000e6c 	.word	0x20000e6c
 8004864:	20000e54 	.word	0x20000e54
 8004868:	2000097c 	.word	0x2000097c
 800486c:	20000978 	.word	0x20000978
 8004870:	20000e60 	.word	0x20000e60
 8004874:	20000e5c 	.word	0x20000e5c

08004878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800487e:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <vTaskSwitchContext+0xb4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004886:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <vTaskSwitchContext+0xb8>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800488c:	e047      	b.n	800491e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800488e:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <vTaskSwitchContext+0xb8>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004894:	4b27      	ldr	r3, [pc, #156]	@ (8004934 <vTaskSwitchContext+0xbc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e011      	b.n	80048c0 <vTaskSwitchContext+0x48>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <vTaskSwitchContext+0x42>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <vTaskSwitchContext+0x3e>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	491d      	ldr	r1, [pc, #116]	@ (8004938 <vTaskSwitchContext+0xc0>)
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0e3      	beq.n	800489c <vTaskSwitchContext+0x24>
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4a16      	ldr	r2, [pc, #88]	@ (8004938 <vTaskSwitchContext+0xc0>)
 80048e0:	4413      	add	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3308      	adds	r3, #8
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d104      	bne.n	8004904 <vTaskSwitchContext+0x8c>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4a0c      	ldr	r2, [pc, #48]	@ (800493c <vTaskSwitchContext+0xc4>)
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <vTaskSwitchContext+0xbc>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004914:	4b09      	ldr	r3, [pc, #36]	@ (800493c <vTaskSwitchContext+0xc4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3354      	adds	r3, #84	@ 0x54
 800491a:	4a09      	ldr	r2, [pc, #36]	@ (8004940 <vTaskSwitchContext+0xc8>)
 800491c:	6013      	str	r3, [r2, #0]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000e74 	.word	0x20000e74
 8004930:	20000e60 	.word	0x20000e60
 8004934:	20000e54 	.word	0x20000e54
 8004938:	2000097c 	.word	0x2000097c
 800493c:	20000978 	.word	0x20000978
 8004940:	20000044 	.word	0x20000044

08004944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800496c:	4b07      	ldr	r3, [pc, #28]	@ (800498c <vTaskPlaceOnEventList+0x48>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3318      	adds	r3, #24
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fe fe48 	bl	800360a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800497a:	2101      	movs	r1, #1
 800497c:	6838      	ldr	r0, [r7, #0]
 800497e:	f000 fa87 	bl	8004e90 <prvAddCurrentTaskToDelayedList>
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000978 	.word	0x20000978

08004990 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	617b      	str	r3, [r7, #20]
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	e7fd      	b.n	80049b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ba:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3318      	adds	r3, #24
 80049c0:	4619      	mov	r1, r3
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7fe fdfd 	bl	80035c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f000 fa5a 	bl	8004e90 <prvAddCurrentTaskToDelayedList>
	}
 80049dc:	bf00      	nop
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000978 	.word	0x20000978

080049e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60fb      	str	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fe2e 	bl	800367c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a20:	4b1d      	ldr	r3, [pc, #116]	@ (8004a98 <xTaskRemoveFromEventList+0xb0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11d      	bne.n	8004a64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fe25 	bl	800367c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a36:	4b19      	ldr	r3, [pc, #100]	@ (8004a9c <xTaskRemoveFromEventList+0xb4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d903      	bls.n	8004a46 <xTaskRemoveFromEventList+0x5e>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <xTaskRemoveFromEventList+0xb4>)
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a13      	ldr	r2, [pc, #76]	@ (8004aa0 <xTaskRemoveFromEventList+0xb8>)
 8004a54:	441a      	add	r2, r3
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fe fdb0 	bl	80035c2 <vListInsertEnd>
 8004a62:	e005      	b.n	8004a70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	3318      	adds	r3, #24
 8004a68:	4619      	mov	r1, r3
 8004a6a:	480e      	ldr	r0, [pc, #56]	@ (8004aa4 <xTaskRemoveFromEventList+0xbc>)
 8004a6c:	f7fe fda9 	bl	80035c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <xTaskRemoveFromEventList+0xc0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d905      	bls.n	8004a8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <xTaskRemoveFromEventList+0xc4>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e001      	b.n	8004a8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a8e:	697b      	ldr	r3, [r7, #20]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000e74 	.word	0x20000e74
 8004a9c:	20000e54 	.word	0x20000e54
 8004aa0:	2000097c 	.word	0x2000097c
 8004aa4:	20000e0c 	.word	0x20000e0c
 8004aa8:	20000978 	.word	0x20000978
 8004aac:	20000e60 	.word	0x20000e60

08004ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <vTaskInternalSetTimeOutState+0x24>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <vTaskInternalSetTimeOutState+0x28>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	605a      	str	r2, [r3, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000e64 	.word	0x20000e64
 8004ad8:	20000e50 	.word	0x20000e50

08004adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	613b      	str	r3, [r7, #16]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	60fb      	str	r3, [r7, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b22:	f000 fe91 	bl	8005848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <xTaskCheckForTimeOut+0xc0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d102      	bne.n	8004b46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e023      	b.n	8004b8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <xTaskCheckForTimeOut+0xc4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d007      	beq.n	8004b62 <xTaskCheckForTimeOut+0x86>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e015      	b.n	8004b8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d20b      	bcs.n	8004b84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff ff99 	bl	8004ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e004      	b.n	8004b8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b8e:	f000 fe8d 	bl	80058ac <vPortExitCritical>

	return xReturn;
 8004b92:	69fb      	ldr	r3, [r7, #28]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000e50 	.word	0x20000e50
 8004ba0:	20000e64 	.word	0x20000e64

08004ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	@ (8004bb8 <vTaskMissedYield+0x14>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	20000e60 	.word	0x20000e60

08004bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bc4:	f000 f852 	bl	8004c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <prvIdleTask+0x28>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d9f9      	bls.n	8004bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <prvIdleTask+0x2c>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004be0:	e7f0      	b.n	8004bc4 <prvIdleTask+0x8>
 8004be2:	bf00      	nop
 8004be4:	2000097c 	.word	0x2000097c
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	e00c      	b.n	8004c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4a12      	ldr	r2, [pc, #72]	@ (8004c4c <prvInitialiseTaskLists+0x60>)
 8004c04:	4413      	add	r3, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fcae 	bl	8003568 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b37      	cmp	r3, #55	@ 0x37
 8004c16:	d9ef      	bls.n	8004bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c18:	480d      	ldr	r0, [pc, #52]	@ (8004c50 <prvInitialiseTaskLists+0x64>)
 8004c1a:	f7fe fca5 	bl	8003568 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c1e:	480d      	ldr	r0, [pc, #52]	@ (8004c54 <prvInitialiseTaskLists+0x68>)
 8004c20:	f7fe fca2 	bl	8003568 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c24:	480c      	ldr	r0, [pc, #48]	@ (8004c58 <prvInitialiseTaskLists+0x6c>)
 8004c26:	f7fe fc9f 	bl	8003568 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c2a:	480c      	ldr	r0, [pc, #48]	@ (8004c5c <prvInitialiseTaskLists+0x70>)
 8004c2c:	f7fe fc9c 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c30:	480b      	ldr	r0, [pc, #44]	@ (8004c60 <prvInitialiseTaskLists+0x74>)
 8004c32:	f7fe fc99 	bl	8003568 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <prvInitialiseTaskLists+0x78>)
 8004c38:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <prvInitialiseTaskLists+0x64>)
 8004c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <prvInitialiseTaskLists+0x7c>)
 8004c3e:	4a05      	ldr	r2, [pc, #20]	@ (8004c54 <prvInitialiseTaskLists+0x68>)
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000097c 	.word	0x2000097c
 8004c50:	20000ddc 	.word	0x20000ddc
 8004c54:	20000df0 	.word	0x20000df0
 8004c58:	20000e0c 	.word	0x20000e0c
 8004c5c:	20000e20 	.word	0x20000e20
 8004c60:	20000e38 	.word	0x20000e38
 8004c64:	20000e04 	.word	0x20000e04
 8004c68:	20000e08 	.word	0x20000e08

08004c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c72:	e019      	b.n	8004ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c74:	f000 fde8 	bl	8005848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c78:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <prvCheckTasksWaitingTermination+0x50>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe fcf9 	bl	800367c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x54>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc0 <prvCheckTasksWaitingTermination+0x54>)
 8004c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c9e:	f000 fe05 	bl	80058ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f810 	bl	8004cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <prvCheckTasksWaitingTermination+0x58>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e1      	bne.n	8004c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000e20 	.word	0x20000e20
 8004cc0:	20000e4c 	.word	0x20000e4c
 8004cc4:	20000e34 	.word	0x20000e34

08004cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3354      	adds	r3, #84	@ 0x54
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 f903 	bl	8005ee0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d108      	bne.n	8004cf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 ff9d 	bl	8005c28 <vPortFree>
				vPortFree( pxTCB );
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 ff9a 	bl	8005c28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cf4:	e019      	b.n	8004d2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d103      	bne.n	8004d08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 ff91 	bl	8005c28 <vPortFree>
	}
 8004d06:	e010      	b.n	8004d2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d00b      	beq.n	8004d2a <prvDeleteTCB+0x62>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60fb      	str	r3, [r7, #12]
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <prvDeleteTCB+0x5e>
	}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <prvResetNextTaskUnblockTime+0x38>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d44:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <prvResetNextTaskUnblockTime+0x3c>)
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d4c:	e008      	b.n	8004d60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4e:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <prvResetNextTaskUnblockTime+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	@ (8004d70 <prvResetNextTaskUnblockTime+0x3c>)
 8004d5e:	6013      	str	r3, [r2, #0]
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000e04 	.word	0x20000e04
 8004d70:	20000e6c 	.word	0x20000e6c

08004d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <xTaskGetSchedulerState+0x34>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d82:	2301      	movs	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	e008      	b.n	8004d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d88:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <xTaskGetSchedulerState+0x38>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d90:	2302      	movs	r3, #2
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e001      	b.n	8004d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d9a:	687b      	ldr	r3, [r7, #4]
	}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000e58 	.word	0x20000e58
 8004dac:	20000e74 	.word	0x20000e74

08004db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d058      	beq.n	8004e78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e84 <xTaskPriorityDisinherit+0xd4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d00b      	beq.n	8004de8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	60fb      	str	r3, [r7, #12]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60bb      	str	r3, [r7, #8]
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0c:	1e5a      	subs	r2, r3, #1
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d02c      	beq.n	8004e78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d128      	bne.n	8004e78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fc26 	bl	800367c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <xTaskPriorityDisinherit+0xd8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d903      	bls.n	8004e58 <xTaskPriorityDisinherit+0xa8>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	4a0c      	ldr	r2, [pc, #48]	@ (8004e88 <xTaskPriorityDisinherit+0xd8>)
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4a09      	ldr	r2, [pc, #36]	@ (8004e8c <xTaskPriorityDisinherit+0xdc>)
 8004e66:	441a      	add	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f7fe fba7 	bl	80035c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e78:	697b      	ldr	r3, [r7, #20]
	}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000978 	.word	0x20000978
 8004e88:	20000e54 	.word	0x20000e54
 8004e8c:	2000097c 	.word	0x2000097c

08004e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e9a:	4b21      	ldr	r3, [pc, #132]	@ (8004f20 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ea0:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fbe8 	bl	800367c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d10a      	bne.n	8004eca <prvAddCurrentTaskToDelayedList+0x3a>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eba:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4819      	ldr	r0, [pc, #100]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0x98>)
 8004ec4:	f7fe fb7d 	bl	80035c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ec8:	e026      	b.n	8004f18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ed2:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d209      	bcs.n	8004ef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee2:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f7fe fb8b 	bl	800360a <vListInsert>
}
 8004ef4:	e010      	b.n	8004f18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0x94>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f7fe fb81 	bl	800360a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f08:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d202      	bcs.n	8004f18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f12:	4a08      	ldr	r2, [pc, #32]	@ (8004f34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6013      	str	r3, [r2, #0]
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000e50 	.word	0x20000e50
 8004f24:	20000978 	.word	0x20000978
 8004f28:	20000e38 	.word	0x20000e38
 8004f2c:	20000e08 	.word	0x20000e08
 8004f30:	20000e04 	.word	0x20000e04
 8004f34:	20000e6c 	.word	0x20000e6c

08004f38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f42:	f000 fb13 	bl	800556c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f46:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <xTimerCreateTimerTask+0x84>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d021      	beq.n	8004f92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f56:	1d3a      	adds	r2, r7, #4
 8004f58:	f107 0108 	add.w	r1, r7, #8
 8004f5c:	f107 030c 	add.w	r3, r7, #12
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe fae7 	bl	8003534 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	9202      	str	r2, [sp, #8]
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	2302      	movs	r3, #2
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	460a      	mov	r2, r1
 8004f78:	4911      	ldr	r1, [pc, #68]	@ (8004fc0 <xTimerCreateTimerTask+0x88>)
 8004f7a:	4812      	ldr	r0, [pc, #72]	@ (8004fc4 <xTimerCreateTimerTask+0x8c>)
 8004f7c:	f7ff f8a2 	bl	80040c4 <xTaskCreateStatic>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4a11      	ldr	r2, [pc, #68]	@ (8004fc8 <xTimerCreateTimerTask+0x90>)
 8004f84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <xTimerCreateTimerTask+0x90>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	613b      	str	r3, [r7, #16]
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004fb0:	697b      	ldr	r3, [r7, #20]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000ea8 	.word	0x20000ea8
 8004fc0:	080068e8 	.word	0x080068e8
 8004fc4:	08005105 	.word	0x08005105
 8004fc8:	20000eac 	.word	0x20000eac

08004fcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xTimerGenericCommand+0x30>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ffc:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <xTimerGenericCommand+0x98>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02a      	beq.n	800505a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b05      	cmp	r3, #5
 8005014:	dc18      	bgt.n	8005048 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005016:	f7ff fead 	bl	8004d74 <xTaskGetSchedulerState>
 800501a:	4603      	mov	r3, r0
 800501c:	2b02      	cmp	r3, #2
 800501e:	d109      	bne.n	8005034 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005020:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <xTimerGenericCommand+0x98>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	f107 0110 	add.w	r1, r7, #16
 8005028:	2300      	movs	r3, #0
 800502a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800502c:	f7fe fc5a 	bl	80038e4 <xQueueGenericSend>
 8005030:	6278      	str	r0, [r7, #36]	@ 0x24
 8005032:	e012      	b.n	800505a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <xTimerGenericCommand+0x98>)
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	f107 0110 	add.w	r1, r7, #16
 800503c:	2300      	movs	r3, #0
 800503e:	2200      	movs	r2, #0
 8005040:	f7fe fc50 	bl	80038e4 <xQueueGenericSend>
 8005044:	6278      	str	r0, [r7, #36]	@ 0x24
 8005046:	e008      	b.n	800505a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005048:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <xTimerGenericCommand+0x98>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	f107 0110 	add.w	r1, r7, #16
 8005050:	2300      	movs	r3, #0
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	f7fe fd48 	bl	8003ae8 <xQueueGenericSendFromISR>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800505c:	4618      	mov	r0, r3
 800505e:	3728      	adds	r7, #40	@ 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000ea8 	.word	0x20000ea8

08005068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af02      	add	r7, sp, #8
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005072:	4b23      	ldr	r3, [pc, #140]	@ (8005100 <prvProcessExpiredTimer+0x98>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fafb 	bl	800367c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d023      	beq.n	80050dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	699a      	ldr	r2, [r3, #24]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	18d1      	adds	r1, r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	6978      	ldr	r0, [r7, #20]
 80050a2:	f000 f8d5 	bl	8005250 <prvInsertTimerInActiveList>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d020      	beq.n	80050ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050ac:	2300      	movs	r3, #0
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2300      	movs	r3, #0
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	2100      	movs	r1, #0
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f7ff ff88 	bl	8004fcc <xTimerGenericCommand>
 80050bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d114      	bne.n	80050ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
}
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	4798      	blx	r3
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000ea0 	.word	0x20000ea0

08005104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f859 	bl	80051c8 <prvGetNextExpireTime>
 8005116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f805 	bl	800512c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005122:	f000 f8d7 	bl	80052d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005126:	bf00      	nop
 8005128:	e7f0      	b.n	800510c <prvTimerTask+0x8>
	...

0800512c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005136:	f7ff fa29 	bl	800458c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f866 	bl	8005210 <prvSampleTimeNow>
 8005144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d130      	bne.n	80051ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <prvProcessTimerOrBlockTask+0x3c>
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	429a      	cmp	r2, r3
 8005158:	d806      	bhi.n	8005168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800515a:	f7ff fa25 	bl	80045a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff81 	bl	8005068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005166:	e024      	b.n	80051b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800516e:	4b13      	ldr	r3, [pc, #76]	@ (80051bc <prvProcessTimerOrBlockTask+0x90>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <prvProcessTimerOrBlockTask+0x50>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <prvProcessTimerOrBlockTask+0x52>
 800517c:	2300      	movs	r3, #0
 800517e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005180:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <prvProcessTimerOrBlockTask+0x94>)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4619      	mov	r1, r3
 800518e:	f7fe ff65 	bl	800405c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005192:	f7ff fa09 	bl	80045a8 <xTaskResumeAll>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800519c:	4b09      	ldr	r3, [pc, #36]	@ (80051c4 <prvProcessTimerOrBlockTask+0x98>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
}
 80051ac:	e001      	b.n	80051b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051ae:	f7ff f9fb 	bl	80045a8 <xTaskResumeAll>
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000ea4 	.word	0x20000ea4
 80051c0:	20000ea8 	.word	0x20000ea8
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051d0:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <prvGetNextExpireTime+0x44>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <prvGetNextExpireTime+0x16>
 80051da:	2201      	movs	r2, #1
 80051dc:	e000      	b.n	80051e0 <prvGetNextExpireTime+0x18>
 80051de:	2200      	movs	r2, #0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d105      	bne.n	80051f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ec:	4b07      	ldr	r3, [pc, #28]	@ (800520c <prvGetNextExpireTime+0x44>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e001      	b.n	80051fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000ea0 	.word	0x20000ea0

08005210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005218:	f7ff fa64 	bl	80046e4 <xTaskGetTickCount>
 800521c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800521e:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <prvSampleTimeNow+0x3c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	429a      	cmp	r2, r3
 8005226:	d205      	bcs.n	8005234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005228:	f000 f93a 	bl	80054a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e002      	b.n	800523a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800523a:	4a04      	ldr	r2, [pc, #16]	@ (800524c <prvSampleTimeNow+0x3c>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005240:	68fb      	ldr	r3, [r7, #12]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000eb0 	.word	0x20000eb0

08005250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d812      	bhi.n	800529c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005284:	2301      	movs	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e01b      	b.n	80052c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800528a:	4b10      	ldr	r3, [pc, #64]	@ (80052cc <prvInsertTimerInActiveList+0x7c>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3304      	adds	r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7fe f9b8 	bl	800360a <vListInsert>
 800529a:	e012      	b.n	80052c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d206      	bcs.n	80052b2 <prvInsertTimerInActiveList+0x62>
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d302      	bcc.n	80052b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052ac:	2301      	movs	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	e007      	b.n	80052c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <prvInsertTimerInActiveList+0x80>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7fe f9a4 	bl	800360a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052c2:	697b      	ldr	r3, [r7, #20]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000ea4 	.word	0x20000ea4
 80052d0:	20000ea0 	.word	0x20000ea0

080052d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08e      	sub	sp, #56	@ 0x38
 80052d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052da:	e0ce      	b.n	800547a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da19      	bge.n	8005316 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	3304      	adds	r3, #4
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	61fb      	str	r3, [r7, #28]
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800530c:	6850      	ldr	r0, [r2, #4]
 800530e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005310:	6892      	ldr	r2, [r2, #8]
 8005312:	4611      	mov	r1, r2
 8005314:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f2c0 80ae 	blt.w	800547a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	3304      	adds	r3, #4
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe f9a4 	bl	800367c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005334:	463b      	mov	r3, r7
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ff6a 	bl	8005210 <prvSampleTimeNow>
 800533c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b09      	cmp	r3, #9
 8005342:	f200 8097 	bhi.w	8005474 <prvProcessReceivedCommands+0x1a0>
 8005346:	a201      	add	r2, pc, #4	@ (adr r2, 800534c <prvProcessReceivedCommands+0x78>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005375 	.word	0x08005375
 8005350:	08005375 	.word	0x08005375
 8005354:	08005375 	.word	0x08005375
 8005358:	080053eb 	.word	0x080053eb
 800535c:	080053ff 	.word	0x080053ff
 8005360:	0800544b 	.word	0x0800544b
 8005364:	08005375 	.word	0x08005375
 8005368:	08005375 	.word	0x08005375
 800536c:	080053eb 	.word	0x080053eb
 8005370:	080053ff 	.word	0x080053ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	18d1      	adds	r1, r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005394:	f7ff ff5c 	bl	8005250 <prvInsertTimerInActiveList>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d06c      	beq.n	8005478 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d061      	beq.n	8005478 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	441a      	add	r2, r3
 80053bc:	2300      	movs	r3, #0
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	2100      	movs	r1, #0
 80053c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c6:	f7ff fe01 	bl	8004fcc <xTimerGenericCommand>
 80053ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d152      	bne.n	8005478 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	61bb      	str	r3, [r7, #24]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053fc:	e03d      	b.n	800547a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	18d1      	adds	r1, r2, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005444:	f7ff ff04 	bl	8005250 <prvInsertTimerInActiveList>
					break;
 8005448:	e017      	b.n	800547a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800545a:	f000 fbe5 	bl	8005c28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800545e:	e00c      	b.n	800547a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	b2da      	uxtb	r2, r3
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005472:	e002      	b.n	800547a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <prvProcessReceivedCommands+0x1a6>
					break;
 8005478:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800547a:	4b08      	ldr	r3, [pc, #32]	@ (800549c <prvProcessReceivedCommands+0x1c8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	1d39      	adds	r1, r7, #4
 8005480:	2200      	movs	r2, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fbce 	bl	8003c24 <xQueueReceive>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	f47f af26 	bne.w	80052dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3730      	adds	r7, #48	@ 0x30
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000ea8 	.word	0x20000ea8

080054a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a6:	e049      	b.n	800553c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005564 <prvSwitchTimerLists+0xc4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005564 <prvSwitchTimerLists+0xc4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3304      	adds	r3, #4
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe f8db 	bl	800367c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d02f      	beq.n	800553c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d90e      	bls.n	800550c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <prvSwitchTimerLists+0xc4>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7fe f880 	bl	800360a <vListInsert>
 800550a:	e017      	b.n	800553c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800550c:	2300      	movs	r3, #0
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2300      	movs	r3, #0
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	2100      	movs	r1, #0
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff fd58 	bl	8004fcc <xTimerGenericCommand>
 800551c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10b      	bne.n	800553c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	603b      	str	r3, [r7, #0]
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800553c:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <prvSwitchTimerLists+0xc4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1b0      	bne.n	80054a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005546:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <prvSwitchTimerLists+0xc4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800554c:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <prvSwitchTimerLists+0xc8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a04      	ldr	r2, [pc, #16]	@ (8005564 <prvSwitchTimerLists+0xc4>)
 8005552:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005554:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <prvSwitchTimerLists+0xc8>)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	6013      	str	r3, [r2, #0]
}
 800555a:	bf00      	nop
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000ea0 	.word	0x20000ea0
 8005568:	20000ea4 	.word	0x20000ea4

0800556c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005572:	f000 f969 	bl	8005848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005576:	4b15      	ldr	r3, [pc, #84]	@ (80055cc <prvCheckForValidListAndQueue+0x60>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d120      	bne.n	80055c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800557e:	4814      	ldr	r0, [pc, #80]	@ (80055d0 <prvCheckForValidListAndQueue+0x64>)
 8005580:	f7fd fff2 	bl	8003568 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005584:	4813      	ldr	r0, [pc, #76]	@ (80055d4 <prvCheckForValidListAndQueue+0x68>)
 8005586:	f7fd ffef 	bl	8003568 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800558a:	4b13      	ldr	r3, [pc, #76]	@ (80055d8 <prvCheckForValidListAndQueue+0x6c>)
 800558c:	4a10      	ldr	r2, [pc, #64]	@ (80055d0 <prvCheckForValidListAndQueue+0x64>)
 800558e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005590:	4b12      	ldr	r3, [pc, #72]	@ (80055dc <prvCheckForValidListAndQueue+0x70>)
 8005592:	4a10      	ldr	r2, [pc, #64]	@ (80055d4 <prvCheckForValidListAndQueue+0x68>)
 8005594:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005596:	2300      	movs	r3, #0
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <prvCheckForValidListAndQueue+0x74>)
 800559c:	4a11      	ldr	r2, [pc, #68]	@ (80055e4 <prvCheckForValidListAndQueue+0x78>)
 800559e:	2110      	movs	r1, #16
 80055a0:	200a      	movs	r0, #10
 80055a2:	f7fe f8ff 	bl	80037a4 <xQueueGenericCreateStatic>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4a08      	ldr	r2, [pc, #32]	@ (80055cc <prvCheckForValidListAndQueue+0x60>)
 80055aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80055ac:	4b07      	ldr	r3, [pc, #28]	@ (80055cc <prvCheckForValidListAndQueue+0x60>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80055b4:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <prvCheckForValidListAndQueue+0x60>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	490b      	ldr	r1, [pc, #44]	@ (80055e8 <prvCheckForValidListAndQueue+0x7c>)
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fd24 	bl	8004008 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055c0:	f000 f974 	bl	80058ac <vPortExitCritical>
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000ea8 	.word	0x20000ea8
 80055d0:	20000e78 	.word	0x20000e78
 80055d4:	20000e8c 	.word	0x20000e8c
 80055d8:	20000ea0 	.word	0x20000ea0
 80055dc:	20000ea4 	.word	0x20000ea4
 80055e0:	20000f54 	.word	0x20000f54
 80055e4:	20000eb4 	.word	0x20000eb4
 80055e8:	080068f0 	.word	0x080068f0

080055ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3b04      	subs	r3, #4
 80055fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3b04      	subs	r3, #4
 800560a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 0201 	bic.w	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b04      	subs	r3, #4
 800561a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800561c:	4a0c      	ldr	r2, [pc, #48]	@ (8005650 <pxPortInitialiseStack+0x64>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b14      	subs	r3, #20
 8005626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3b04      	subs	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f06f 0202 	mvn.w	r2, #2
 800563a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b20      	subs	r3, #32
 8005640:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005642:	68fb      	ldr	r3, [r7, #12]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	08005655 	.word	0x08005655

08005654 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800565e:	4b13      	ldr	r3, [pc, #76]	@ (80056ac <prvTaskExitError+0x58>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d00b      	beq.n	8005680 <prvTaskExitError+0x2c>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <prvTaskExitError+0x28>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60bb      	str	r3, [r7, #8]
}
 8005692:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005694:	bf00      	nop
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0fc      	beq.n	8005696 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000040 	.word	0x20000040

080056b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056b0:	4b07      	ldr	r3, [pc, #28]	@ (80056d0 <pxCurrentTCBConst2>)
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	6808      	ldr	r0, [r1, #0]
 80056b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ba:	f380 8809 	msr	PSP, r0
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f380 8811 	msr	BASEPRI, r0
 80056ca:	4770      	bx	lr
 80056cc:	f3af 8000 	nop.w

080056d0 <pxCurrentTCBConst2>:
 80056d0:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop

080056d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056d8:	4808      	ldr	r0, [pc, #32]	@ (80056fc <prvPortStartFirstTask+0x24>)
 80056da:	6800      	ldr	r0, [r0, #0]
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f380 8808 	msr	MSP, r0
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8814 	msr	CONTROL, r0
 80056ea:	b662      	cpsie	i
 80056ec:	b661      	cpsie	f
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	df00      	svc	0
 80056f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056fa:	bf00      	nop
 80056fc:	e000ed08 	.word	0xe000ed08

08005700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005706:	4b47      	ldr	r3, [pc, #284]	@ (8005824 <xPortStartScheduler+0x124>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a47      	ldr	r2, [pc, #284]	@ (8005828 <xPortStartScheduler+0x128>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10b      	bne.n	8005728 <xPortStartScheduler+0x28>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	613b      	str	r3, [r7, #16]
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005728:	4b3e      	ldr	r3, [pc, #248]	@ (8005824 <xPortStartScheduler+0x124>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3f      	ldr	r2, [pc, #252]	@ (800582c <xPortStartScheduler+0x12c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10b      	bne.n	800574a <xPortStartScheduler+0x4a>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	60fb      	str	r3, [r7, #12]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800574a:	4b39      	ldr	r3, [pc, #228]	@ (8005830 <xPortStartScheduler+0x130>)
 800574c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	22ff      	movs	r2, #255	@ 0xff
 800575a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4b31      	ldr	r3, [pc, #196]	@ (8005834 <xPortStartScheduler+0x134>)
 8005770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005772:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <xPortStartScheduler+0x138>)
 8005774:	2207      	movs	r2, #7
 8005776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005778:	e009      	b.n	800578e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800577a:	4b2f      	ldr	r3, [pc, #188]	@ (8005838 <xPortStartScheduler+0x138>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3b01      	subs	r3, #1
 8005780:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <xPortStartScheduler+0x138>)
 8005782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b80      	cmp	r3, #128	@ 0x80
 8005798:	d0ef      	beq.n	800577a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800579a:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <xPortStartScheduler+0x138>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f1c3 0307 	rsb	r3, r3, #7
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d00b      	beq.n	80057be <xPortStartScheduler+0xbe>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057be:	4b1e      	ldr	r3, [pc, #120]	@ (8005838 <xPortStartScheduler+0x138>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005838 <xPortStartScheduler+0x138>)
 80057c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <xPortStartScheduler+0x138>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057d0:	4a19      	ldr	r2, [pc, #100]	@ (8005838 <xPortStartScheduler+0x138>)
 80057d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057dc:	4b17      	ldr	r3, [pc, #92]	@ (800583c <xPortStartScheduler+0x13c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a16      	ldr	r2, [pc, #88]	@ (800583c <xPortStartScheduler+0x13c>)
 80057e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057e8:	4b14      	ldr	r3, [pc, #80]	@ (800583c <xPortStartScheduler+0x13c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a13      	ldr	r2, [pc, #76]	@ (800583c <xPortStartScheduler+0x13c>)
 80057ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80057f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057f4:	f000 f8da 	bl	80059ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057f8:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <xPortStartScheduler+0x140>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057fe:	f000 f8f9 	bl	80059f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <xPortStartScheduler+0x144>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a0f      	ldr	r2, [pc, #60]	@ (8005844 <xPortStartScheduler+0x144>)
 8005808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800580c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800580e:	f7ff ff63 	bl	80056d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005812:	f7ff f831 	bl	8004878 <vTaskSwitchContext>
	prvTaskExitError();
 8005816:	f7ff ff1d 	bl	8005654 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	e000ed00 	.word	0xe000ed00
 8005828:	410fc271 	.word	0x410fc271
 800582c:	410fc270 	.word	0x410fc270
 8005830:	e000e400 	.word	0xe000e400
 8005834:	20000fa4 	.word	0x20000fa4
 8005838:	20000fa8 	.word	0x20000fa8
 800583c:	e000ed20 	.word	0xe000ed20
 8005840:	20000040 	.word	0x20000040
 8005844:	e000ef34 	.word	0xe000ef34

08005848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005862:	4b10      	ldr	r3, [pc, #64]	@ (80058a4 <vPortEnterCritical+0x5c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	4a0e      	ldr	r2, [pc, #56]	@ (80058a4 <vPortEnterCritical+0x5c>)
 800586a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800586c:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <vPortEnterCritical+0x5c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d110      	bne.n	8005896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005874:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <vPortEnterCritical+0x60>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <vPortEnterCritical+0x4e>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	603b      	str	r3, [r7, #0]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <vPortEnterCritical+0x4a>
	}
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000040 	.word	0x20000040
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058b2:	4b12      	ldr	r3, [pc, #72]	@ (80058fc <vPortExitCritical+0x50>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <vPortExitCritical+0x26>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	607b      	str	r3, [r7, #4]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058d2:	4b0a      	ldr	r3, [pc, #40]	@ (80058fc <vPortExitCritical+0x50>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4a08      	ldr	r2, [pc, #32]	@ (80058fc <vPortExitCritical+0x50>)
 80058da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058dc:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <vPortExitCritical+0x50>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <vPortExitCritical+0x44>
 80058e4:	2300      	movs	r3, #0
 80058e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f383 8811 	msr	BASEPRI, r3
}
 80058ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	20000040 	.word	0x20000040

08005900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005900:	f3ef 8009 	mrs	r0, PSP
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <pxCurrentTCBConst>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	f01e 0f10 	tst.w	lr, #16
 8005910:	bf08      	it	eq
 8005912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	6010      	str	r0, [r2, #0]
 800591c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005924:	f380 8811 	msr	BASEPRI, r0
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f7fe ffa2 	bl	8004878 <vTaskSwitchContext>
 8005934:	f04f 0000 	mov.w	r0, #0
 8005938:	f380 8811 	msr	BASEPRI, r0
 800593c:	bc09      	pop	{r0, r3}
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	6808      	ldr	r0, [r1, #0]
 8005942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005946:	f01e 0f10 	tst.w	lr, #16
 800594a:	bf08      	it	eq
 800594c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005950:	f380 8809 	msr	PSP, r0
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w

08005960 <pxCurrentTCBConst>:
 8005960:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop

08005968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	607b      	str	r3, [r7, #4]
}
 8005980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005982:	f7fe febf 	bl	8004704 <xTaskIncrementTick>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <xPortSysTickHandler+0x40>)
 800598e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	2300      	movs	r3, #0
 8005996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f383 8811 	msr	BASEPRI, r3
}
 800599e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059b0:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <vPortSetupTimerInterrupt+0x34>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059b6:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <vPortSetupTimerInterrupt+0x38>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <vPortSetupTimerInterrupt+0x3c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a0a      	ldr	r2, [pc, #40]	@ (80059ec <vPortSetupTimerInterrupt+0x40>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	099b      	lsrs	r3, r3, #6
 80059c8:	4a09      	ldr	r2, [pc, #36]	@ (80059f0 <vPortSetupTimerInterrupt+0x44>)
 80059ca:	3b01      	subs	r3, #1
 80059cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ce:	4b04      	ldr	r3, [pc, #16]	@ (80059e0 <vPortSetupTimerInterrupt+0x34>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	e000e010 	.word	0xe000e010
 80059e4:	e000e018 	.word	0xe000e018
 80059e8:	20000034 	.word	0x20000034
 80059ec:	10624dd3 	.word	0x10624dd3
 80059f0:	e000e014 	.word	0xe000e014

080059f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a04 <vPortEnableVFP+0x10>
 80059f8:	6801      	ldr	r1, [r0, #0]
 80059fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80059fe:	6001      	str	r1, [r0, #0]
 8005a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a02:	bf00      	nop
 8005a04:	e000ed88 	.word	0xe000ed88

08005a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a0e:	f3ef 8305 	mrs	r3, IPSR
 8005a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b0f      	cmp	r3, #15
 8005a18:	d915      	bls.n	8005a46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a1a:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <vPortValidateInterruptPriority+0x74>)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <vPortValidateInterruptPriority+0x78>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	7afa      	ldrb	r2, [r7, #11]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d20b      	bcs.n	8005a46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a46:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <vPortValidateInterruptPriority+0x7c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a88 <vPortValidateInterruptPriority+0x80>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d90b      	bls.n	8005a6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	603b      	str	r3, [r7, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <vPortValidateInterruptPriority+0x62>
	}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	e000e3f0 	.word	0xe000e3f0
 8005a80:	20000fa4 	.word	0x20000fa4
 8005a84:	e000ed0c 	.word	0xe000ed0c
 8005a88:	20000fa8 	.word	0x20000fa8

08005a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a98:	f7fe fd78 	bl	800458c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8005c10 <pvPortMalloc+0x184>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005aa4:	f000 f924 	bl	8005cf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c14 <pvPortMalloc+0x188>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 8095 	bne.w	8005be0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01e      	beq.n	8005afa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005abc:	2208      	movs	r2, #8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d015      	beq.n	8005afa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f023 0307 	bic.w	r3, r3, #7
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <pvPortMalloc+0x6e>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	617b      	str	r3, [r7, #20]
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	e7fd      	b.n	8005af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d06f      	beq.n	8005be0 <pvPortMalloc+0x154>
 8005b00:	4b45      	ldr	r3, [pc, #276]	@ (8005c18 <pvPortMalloc+0x18c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d86a      	bhi.n	8005be0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b0a:	4b44      	ldr	r3, [pc, #272]	@ (8005c1c <pvPortMalloc+0x190>)
 8005b0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b0e:	4b43      	ldr	r3, [pc, #268]	@ (8005c1c <pvPortMalloc+0x190>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b14:	e004      	b.n	8005b20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d903      	bls.n	8005b32 <pvPortMalloc+0xa6>
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f1      	bne.n	8005b16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b32:	4b37      	ldr	r3, [pc, #220]	@ (8005c10 <pvPortMalloc+0x184>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d051      	beq.n	8005be0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2208      	movs	r2, #8
 8005b42:	4413      	add	r3, r2
 8005b44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	1ad2      	subs	r2, r2, r3
 8005b56:	2308      	movs	r3, #8
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d920      	bls.n	8005ba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <pvPortMalloc+0xfc>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	613b      	str	r3, [r7, #16]
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b9a:	69b8      	ldr	r0, [r7, #24]
 8005b9c:	f000 f90a 	bl	8005db4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c18 <pvPortMalloc+0x18c>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	4a1b      	ldr	r2, [pc, #108]	@ (8005c18 <pvPortMalloc+0x18c>)
 8005bac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bae:	4b1a      	ldr	r3, [pc, #104]	@ (8005c18 <pvPortMalloc+0x18c>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <pvPortMalloc+0x194>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d203      	bcs.n	8005bc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bba:	4b17      	ldr	r3, [pc, #92]	@ (8005c18 <pvPortMalloc+0x18c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <pvPortMalloc+0x194>)
 8005bc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4b13      	ldr	r3, [pc, #76]	@ (8005c14 <pvPortMalloc+0x188>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bd6:	4b13      	ldr	r3, [pc, #76]	@ (8005c24 <pvPortMalloc+0x198>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <pvPortMalloc+0x198>)
 8005bde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005be0:	f7fe fce2 	bl	80045a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <pvPortMalloc+0x17a>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	60fb      	str	r3, [r7, #12]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <pvPortMalloc+0x176>
	return pvReturn;
 8005c06:	69fb      	ldr	r3, [r7, #28]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3728      	adds	r7, #40	@ 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20004bb4 	.word	0x20004bb4
 8005c14:	20004bc8 	.word	0x20004bc8
 8005c18:	20004bb8 	.word	0x20004bb8
 8005c1c:	20004bac 	.word	0x20004bac
 8005c20:	20004bbc 	.word	0x20004bbc
 8005c24:	20004bc0 	.word	0x20004bc0

08005c28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d04f      	beq.n	8005cda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <vPortFree+0xbc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <vPortFree+0x46>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <vPortFree+0x66>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	60bb      	str	r3, [r7, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	e7fd      	b.n	8005c8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <vPortFree+0xbc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01e      	beq.n	8005cda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11a      	bne.n	8005cda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <vPortFree+0xbc>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	401a      	ands	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cb4:	f7fe fc6a 	bl	800458c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <vPortFree+0xc0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4a09      	ldr	r2, [pc, #36]	@ (8005ce8 <vPortFree+0xc0>)
 8005cc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cc6:	6938      	ldr	r0, [r7, #16]
 8005cc8:	f000 f874 	bl	8005db4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ccc:	4b07      	ldr	r3, [pc, #28]	@ (8005cec <vPortFree+0xc4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	4a06      	ldr	r2, [pc, #24]	@ (8005cec <vPortFree+0xc4>)
 8005cd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cd6:	f7fe fc67 	bl	80045a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20004bc8 	.word	0x20004bc8
 8005ce8:	20004bb8 	.word	0x20004bb8
 8005cec:	20004bc4 	.word	0x20004bc4

08005cf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cf6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005cfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cfc:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <prvHeapInit+0xac>)
 8005cfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3307      	adds	r3, #7
 8005d0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d9c <prvHeapInit+0xac>)
 8005d20:	4413      	add	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <prvHeapInit+0xb0>)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005da0 <prvHeapInit+0xb0>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4413      	add	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <prvHeapInit+0xb4>)
 8005d50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d52:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <prvHeapInit+0xb4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2200      	movs	r2, #0
 8005d58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d5a:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <prvHeapInit+0xb4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	1ad2      	subs	r2, r2, r3
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d70:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <prvHeapInit+0xb4>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005da8 <prvHeapInit+0xb8>)
 8005d7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a09      	ldr	r2, [pc, #36]	@ (8005dac <prvHeapInit+0xbc>)
 8005d86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d88:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <prvHeapInit+0xc0>)
 8005d8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d8e:	601a      	str	r2, [r3, #0]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	20000fac 	.word	0x20000fac
 8005da0:	20004bac 	.word	0x20004bac
 8005da4:	20004bb4 	.word	0x20004bb4
 8005da8:	20004bbc 	.word	0x20004bbc
 8005dac:	20004bb8 	.word	0x20004bb8
 8005db0:	20004bc8 	.word	0x20004bc8

08005db4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dbc:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <prvInsertBlockIntoFreeList+0xac>)
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e002      	b.n	8005dc8 <prvInsertBlockIntoFreeList+0x14>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d8f7      	bhi.n	8005dc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	4413      	add	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d108      	bne.n	8005df6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d118      	bne.n	8005e3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	4b15      	ldr	r3, [pc, #84]	@ (8005e64 <prvInsertBlockIntoFreeList+0xb0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d00d      	beq.n	8005e32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e008      	b.n	8005e44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e32:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <prvInsertBlockIntoFreeList+0xb0>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e003      	b.n	8005e44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d002      	beq.n	8005e52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20004bac 	.word	0x20004bac
 8005e64:	20004bb4 	.word	0x20004bb4

08005e68 <sniprintf>:
 8005e68:	b40c      	push	{r2, r3}
 8005e6a:	b530      	push	{r4, r5, lr}
 8005e6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ecc <sniprintf+0x64>)
 8005e6e:	1e0c      	subs	r4, r1, #0
 8005e70:	681d      	ldr	r5, [r3, #0]
 8005e72:	b09d      	sub	sp, #116	@ 0x74
 8005e74:	da08      	bge.n	8005e88 <sniprintf+0x20>
 8005e76:	238b      	movs	r3, #139	@ 0x8b
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	b01d      	add	sp, #116	@ 0x74
 8005e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e84:	b002      	add	sp, #8
 8005e86:	4770      	bx	lr
 8005e88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e90:	bf14      	ite	ne
 8005e92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e96:	4623      	moveq	r3, r4
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	9307      	str	r3, [sp, #28]
 8005e9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ea0:	9002      	str	r0, [sp, #8]
 8005ea2:	9006      	str	r0, [sp, #24]
 8005ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ea8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005eaa:	ab21      	add	r3, sp, #132	@ 0x84
 8005eac:	a902      	add	r1, sp, #8
 8005eae:	4628      	mov	r0, r5
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	f000 f9f9 	bl	80062a8 <_svfiprintf_r>
 8005eb6:	1c43      	adds	r3, r0, #1
 8005eb8:	bfbc      	itt	lt
 8005eba:	238b      	movlt	r3, #139	@ 0x8b
 8005ebc:	602b      	strlt	r3, [r5, #0]
 8005ebe:	2c00      	cmp	r4, #0
 8005ec0:	d0dd      	beq.n	8005e7e <sniprintf+0x16>
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e7d9      	b.n	8005e7e <sniprintf+0x16>
 8005eca:	bf00      	nop
 8005ecc:	20000044 	.word	0x20000044

08005ed0 <memset>:
 8005ed0:	4402      	add	r2, r0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	f803 1b01 	strb.w	r1, [r3], #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <_reclaim_reent>:
 8005ee0:	4b29      	ldr	r3, [pc, #164]	@ (8005f88 <_reclaim_reent+0xa8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4283      	cmp	r3, r0
 8005ee6:	b570      	push	{r4, r5, r6, lr}
 8005ee8:	4604      	mov	r4, r0
 8005eea:	d04b      	beq.n	8005f84 <_reclaim_reent+0xa4>
 8005eec:	69c3      	ldr	r3, [r0, #28]
 8005eee:	b1ab      	cbz	r3, 8005f1c <_reclaim_reent+0x3c>
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	b16b      	cbz	r3, 8005f10 <_reclaim_reent+0x30>
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	69e3      	ldr	r3, [r4, #28]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	5959      	ldr	r1, [r3, r5]
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d13b      	bne.n	8005f78 <_reclaim_reent+0x98>
 8005f00:	3504      	adds	r5, #4
 8005f02:	2d80      	cmp	r5, #128	@ 0x80
 8005f04:	d1f7      	bne.n	8005ef6 <_reclaim_reent+0x16>
 8005f06:	69e3      	ldr	r3, [r4, #28]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	68d9      	ldr	r1, [r3, #12]
 8005f0c:	f000 f878 	bl	8006000 <_free_r>
 8005f10:	69e3      	ldr	r3, [r4, #28]
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	b111      	cbz	r1, 8005f1c <_reclaim_reent+0x3c>
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 f872 	bl	8006000 <_free_r>
 8005f1c:	6961      	ldr	r1, [r4, #20]
 8005f1e:	b111      	cbz	r1, 8005f26 <_reclaim_reent+0x46>
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 f86d 	bl	8006000 <_free_r>
 8005f26:	69e1      	ldr	r1, [r4, #28]
 8005f28:	b111      	cbz	r1, 8005f30 <_reclaim_reent+0x50>
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 f868 	bl	8006000 <_free_r>
 8005f30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f32:	b111      	cbz	r1, 8005f3a <_reclaim_reent+0x5a>
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 f863 	bl	8006000 <_free_r>
 8005f3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f3c:	b111      	cbz	r1, 8005f44 <_reclaim_reent+0x64>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 f85e 	bl	8006000 <_free_r>
 8005f44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005f46:	b111      	cbz	r1, 8005f4e <_reclaim_reent+0x6e>
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 f859 	bl	8006000 <_free_r>
 8005f4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005f50:	b111      	cbz	r1, 8005f58 <_reclaim_reent+0x78>
 8005f52:	4620      	mov	r0, r4
 8005f54:	f000 f854 	bl	8006000 <_free_r>
 8005f58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005f5a:	b111      	cbz	r1, 8005f62 <_reclaim_reent+0x82>
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 f84f 	bl	8006000 <_free_r>
 8005f62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f64:	b111      	cbz	r1, 8005f6c <_reclaim_reent+0x8c>
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f84a 	bl	8006000 <_free_r>
 8005f6c:	6a23      	ldr	r3, [r4, #32]
 8005f6e:	b14b      	cbz	r3, 8005f84 <_reclaim_reent+0xa4>
 8005f70:	4620      	mov	r0, r4
 8005f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f76:	4718      	bx	r3
 8005f78:	680e      	ldr	r6, [r1, #0]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f840 	bl	8006000 <_free_r>
 8005f80:	4631      	mov	r1, r6
 8005f82:	e7bb      	b.n	8005efc <_reclaim_reent+0x1c>
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	bf00      	nop
 8005f88:	20000044 	.word	0x20000044

08005f8c <__errno>:
 8005f8c:	4b01      	ldr	r3, [pc, #4]	@ (8005f94 <__errno+0x8>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000044 	.word	0x20000044

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd0 <__libc_init_array+0x38>)
 8005f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd4 <__libc_init_array+0x3c>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8005fd8 <__libc_init_array+0x40>)
 8005faa:	4c0c      	ldr	r4, [pc, #48]	@ (8005fdc <__libc_init_array+0x44>)
 8005fac:	f000 fc66 	bl	800687c <_init>
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	08006994 	.word	0x08006994
 8005fd4:	08006994 	.word	0x08006994
 8005fd8:	08006994 	.word	0x08006994
 8005fdc:	08006998 	.word	0x08006998

08005fe0 <__retarget_lock_acquire_recursive>:
 8005fe0:	4770      	bx	lr

08005fe2 <__retarget_lock_release_recursive>:
 8005fe2:	4770      	bx	lr

08005fe4 <memcpy>:
 8005fe4:	440a      	add	r2, r1
 8005fe6:	4291      	cmp	r1, r2
 8005fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fec:	d100      	bne.n	8005ff0 <memcpy+0xc>
 8005fee:	4770      	bx	lr
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	d1f9      	bne.n	8005ff2 <memcpy+0xe>
 8005ffe:	bd10      	pop	{r4, pc}

08006000 <_free_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4605      	mov	r5, r0
 8006004:	2900      	cmp	r1, #0
 8006006:	d041      	beq.n	800608c <_free_r+0x8c>
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f0c      	subs	r4, r1, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfb8      	it	lt
 8006012:	18e4      	addlt	r4, r4, r3
 8006014:	f000 f8e0 	bl	80061d8 <__malloc_lock>
 8006018:	4a1d      	ldr	r2, [pc, #116]	@ (8006090 <_free_r+0x90>)
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	b933      	cbnz	r3, 800602c <_free_r+0x2c>
 800601e:	6063      	str	r3, [r4, #4]
 8006020:	6014      	str	r4, [r2, #0]
 8006022:	4628      	mov	r0, r5
 8006024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006028:	f000 b8dc 	b.w	80061e4 <__malloc_unlock>
 800602c:	42a3      	cmp	r3, r4
 800602e:	d908      	bls.n	8006042 <_free_r+0x42>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	1821      	adds	r1, r4, r0
 8006034:	428b      	cmp	r3, r1
 8006036:	bf01      	itttt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	e7ed      	b.n	800601e <_free_r+0x1e>
 8006042:	461a      	mov	r2, r3
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	b10b      	cbz	r3, 800604c <_free_r+0x4c>
 8006048:	42a3      	cmp	r3, r4
 800604a:	d9fa      	bls.n	8006042 <_free_r+0x42>
 800604c:	6811      	ldr	r1, [r2, #0]
 800604e:	1850      	adds	r0, r2, r1
 8006050:	42a0      	cmp	r0, r4
 8006052:	d10b      	bne.n	800606c <_free_r+0x6c>
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	4401      	add	r1, r0
 8006058:	1850      	adds	r0, r2, r1
 800605a:	4283      	cmp	r3, r0
 800605c:	6011      	str	r1, [r2, #0]
 800605e:	d1e0      	bne.n	8006022 <_free_r+0x22>
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	6053      	str	r3, [r2, #4]
 8006066:	4408      	add	r0, r1
 8006068:	6010      	str	r0, [r2, #0]
 800606a:	e7da      	b.n	8006022 <_free_r+0x22>
 800606c:	d902      	bls.n	8006074 <_free_r+0x74>
 800606e:	230c      	movs	r3, #12
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	e7d6      	b.n	8006022 <_free_r+0x22>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	1821      	adds	r1, r4, r0
 8006078:	428b      	cmp	r3, r1
 800607a:	bf04      	itt	eq
 800607c:	6819      	ldreq	r1, [r3, #0]
 800607e:	685b      	ldreq	r3, [r3, #4]
 8006080:	6063      	str	r3, [r4, #4]
 8006082:	bf04      	itt	eq
 8006084:	1809      	addeq	r1, r1, r0
 8006086:	6021      	streq	r1, [r4, #0]
 8006088:	6054      	str	r4, [r2, #4]
 800608a:	e7ca      	b.n	8006022 <_free_r+0x22>
 800608c:	bd38      	pop	{r3, r4, r5, pc}
 800608e:	bf00      	nop
 8006090:	20004d10 	.word	0x20004d10

08006094 <sbrk_aligned>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4e0f      	ldr	r6, [pc, #60]	@ (80060d4 <sbrk_aligned+0x40>)
 8006098:	460c      	mov	r4, r1
 800609a:	6831      	ldr	r1, [r6, #0]
 800609c:	4605      	mov	r5, r0
 800609e:	b911      	cbnz	r1, 80060a6 <sbrk_aligned+0x12>
 80060a0:	f000 fba6 	bl	80067f0 <_sbrk_r>
 80060a4:	6030      	str	r0, [r6, #0]
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 fba1 	bl	80067f0 <_sbrk_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	d103      	bne.n	80060ba <sbrk_aligned+0x26>
 80060b2:	f04f 34ff 	mov.w	r4, #4294967295
 80060b6:	4620      	mov	r0, r4
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	1cc4      	adds	r4, r0, #3
 80060bc:	f024 0403 	bic.w	r4, r4, #3
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d0f8      	beq.n	80060b6 <sbrk_aligned+0x22>
 80060c4:	1a21      	subs	r1, r4, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 fb92 	bl	80067f0 <_sbrk_r>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d1f2      	bne.n	80060b6 <sbrk_aligned+0x22>
 80060d0:	e7ef      	b.n	80060b2 <sbrk_aligned+0x1e>
 80060d2:	bf00      	nop
 80060d4:	20004d0c 	.word	0x20004d0c

080060d8 <_malloc_r>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	1ccd      	adds	r5, r1, #3
 80060de:	f025 0503 	bic.w	r5, r5, #3
 80060e2:	3508      	adds	r5, #8
 80060e4:	2d0c      	cmp	r5, #12
 80060e6:	bf38      	it	cc
 80060e8:	250c      	movcc	r5, #12
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	4606      	mov	r6, r0
 80060ee:	db01      	blt.n	80060f4 <_malloc_r+0x1c>
 80060f0:	42a9      	cmp	r1, r5
 80060f2:	d904      	bls.n	80060fe <_malloc_r+0x26>
 80060f4:	230c      	movs	r3, #12
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	2000      	movs	r0, #0
 80060fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d4 <_malloc_r+0xfc>
 8006102:	f000 f869 	bl	80061d8 <__malloc_lock>
 8006106:	f8d8 3000 	ldr.w	r3, [r8]
 800610a:	461c      	mov	r4, r3
 800610c:	bb44      	cbnz	r4, 8006160 <_malloc_r+0x88>
 800610e:	4629      	mov	r1, r5
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ffbf 	bl	8006094 <sbrk_aligned>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	4604      	mov	r4, r0
 800611a:	d158      	bne.n	80061ce <_malloc_r+0xf6>
 800611c:	f8d8 4000 	ldr.w	r4, [r8]
 8006120:	4627      	mov	r7, r4
 8006122:	2f00      	cmp	r7, #0
 8006124:	d143      	bne.n	80061ae <_malloc_r+0xd6>
 8006126:	2c00      	cmp	r4, #0
 8006128:	d04b      	beq.n	80061c2 <_malloc_r+0xea>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	4639      	mov	r1, r7
 800612e:	4630      	mov	r0, r6
 8006130:	eb04 0903 	add.w	r9, r4, r3
 8006134:	f000 fb5c 	bl	80067f0 <_sbrk_r>
 8006138:	4581      	cmp	r9, r0
 800613a:	d142      	bne.n	80061c2 <_malloc_r+0xea>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	1a6d      	subs	r5, r5, r1
 8006140:	4629      	mov	r1, r5
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffa6 	bl	8006094 <sbrk_aligned>
 8006148:	3001      	adds	r0, #1
 800614a:	d03a      	beq.n	80061c2 <_malloc_r+0xea>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	442b      	add	r3, r5
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	f8d8 3000 	ldr.w	r3, [r8]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	bb62      	cbnz	r2, 80061b4 <_malloc_r+0xdc>
 800615a:	f8c8 7000 	str.w	r7, [r8]
 800615e:	e00f      	b.n	8006180 <_malloc_r+0xa8>
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	1b52      	subs	r2, r2, r5
 8006164:	d420      	bmi.n	80061a8 <_malloc_r+0xd0>
 8006166:	2a0b      	cmp	r2, #11
 8006168:	d917      	bls.n	800619a <_malloc_r+0xc2>
 800616a:	1961      	adds	r1, r4, r5
 800616c:	42a3      	cmp	r3, r4
 800616e:	6025      	str	r5, [r4, #0]
 8006170:	bf18      	it	ne
 8006172:	6059      	strne	r1, [r3, #4]
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	bf08      	it	eq
 8006178:	f8c8 1000 	streq.w	r1, [r8]
 800617c:	5162      	str	r2, [r4, r5]
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	4630      	mov	r0, r6
 8006182:	f000 f82f 	bl	80061e4 <__malloc_unlock>
 8006186:	f104 000b 	add.w	r0, r4, #11
 800618a:	1d23      	adds	r3, r4, #4
 800618c:	f020 0007 	bic.w	r0, r0, #7
 8006190:	1ac2      	subs	r2, r0, r3
 8006192:	bf1c      	itt	ne
 8006194:	1a1b      	subne	r3, r3, r0
 8006196:	50a3      	strne	r3, [r4, r2]
 8006198:	e7af      	b.n	80060fa <_malloc_r+0x22>
 800619a:	6862      	ldr	r2, [r4, #4]
 800619c:	42a3      	cmp	r3, r4
 800619e:	bf0c      	ite	eq
 80061a0:	f8c8 2000 	streq.w	r2, [r8]
 80061a4:	605a      	strne	r2, [r3, #4]
 80061a6:	e7eb      	b.n	8006180 <_malloc_r+0xa8>
 80061a8:	4623      	mov	r3, r4
 80061aa:	6864      	ldr	r4, [r4, #4]
 80061ac:	e7ae      	b.n	800610c <_malloc_r+0x34>
 80061ae:	463c      	mov	r4, r7
 80061b0:	687f      	ldr	r7, [r7, #4]
 80061b2:	e7b6      	b.n	8006122 <_malloc_r+0x4a>
 80061b4:	461a      	mov	r2, r3
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d1fb      	bne.n	80061b4 <_malloc_r+0xdc>
 80061bc:	2300      	movs	r3, #0
 80061be:	6053      	str	r3, [r2, #4]
 80061c0:	e7de      	b.n	8006180 <_malloc_r+0xa8>
 80061c2:	230c      	movs	r3, #12
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	4630      	mov	r0, r6
 80061c8:	f000 f80c 	bl	80061e4 <__malloc_unlock>
 80061cc:	e794      	b.n	80060f8 <_malloc_r+0x20>
 80061ce:	6005      	str	r5, [r0, #0]
 80061d0:	e7d6      	b.n	8006180 <_malloc_r+0xa8>
 80061d2:	bf00      	nop
 80061d4:	20004d10 	.word	0x20004d10

080061d8 <__malloc_lock>:
 80061d8:	4801      	ldr	r0, [pc, #4]	@ (80061e0 <__malloc_lock+0x8>)
 80061da:	f7ff bf01 	b.w	8005fe0 <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	20004d08 	.word	0x20004d08

080061e4 <__malloc_unlock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	@ (80061ec <__malloc_unlock+0x8>)
 80061e6:	f7ff befc 	b.w	8005fe2 <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	20004d08 	.word	0x20004d08

080061f0 <__ssputs_r>:
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	688e      	ldr	r6, [r1, #8]
 80061f6:	461f      	mov	r7, r3
 80061f8:	42be      	cmp	r6, r7
 80061fa:	680b      	ldr	r3, [r1, #0]
 80061fc:	4682      	mov	sl, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4690      	mov	r8, r2
 8006202:	d82d      	bhi.n	8006260 <__ssputs_r+0x70>
 8006204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006208:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800620c:	d026      	beq.n	800625c <__ssputs_r+0x6c>
 800620e:	6965      	ldr	r5, [r4, #20]
 8006210:	6909      	ldr	r1, [r1, #16]
 8006212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006216:	eba3 0901 	sub.w	r9, r3, r1
 800621a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800621e:	1c7b      	adds	r3, r7, #1
 8006220:	444b      	add	r3, r9
 8006222:	106d      	asrs	r5, r5, #1
 8006224:	429d      	cmp	r5, r3
 8006226:	bf38      	it	cc
 8006228:	461d      	movcc	r5, r3
 800622a:	0553      	lsls	r3, r2, #21
 800622c:	d527      	bpl.n	800627e <__ssputs_r+0x8e>
 800622e:	4629      	mov	r1, r5
 8006230:	f7ff ff52 	bl	80060d8 <_malloc_r>
 8006234:	4606      	mov	r6, r0
 8006236:	b360      	cbz	r0, 8006292 <__ssputs_r+0xa2>
 8006238:	6921      	ldr	r1, [r4, #16]
 800623a:	464a      	mov	r2, r9
 800623c:	f7ff fed2 	bl	8005fe4 <memcpy>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	6126      	str	r6, [r4, #16]
 800624e:	6165      	str	r5, [r4, #20]
 8006250:	444e      	add	r6, r9
 8006252:	eba5 0509 	sub.w	r5, r5, r9
 8006256:	6026      	str	r6, [r4, #0]
 8006258:	60a5      	str	r5, [r4, #8]
 800625a:	463e      	mov	r6, r7
 800625c:	42be      	cmp	r6, r7
 800625e:	d900      	bls.n	8006262 <__ssputs_r+0x72>
 8006260:	463e      	mov	r6, r7
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	4632      	mov	r2, r6
 8006266:	4641      	mov	r1, r8
 8006268:	f000 faa8 	bl	80067bc <memmove>
 800626c:	68a3      	ldr	r3, [r4, #8]
 800626e:	1b9b      	subs	r3, r3, r6
 8006270:	60a3      	str	r3, [r4, #8]
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	4433      	add	r3, r6
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	2000      	movs	r0, #0
 800627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627e:	462a      	mov	r2, r5
 8006280:	f000 fac6 	bl	8006810 <_realloc_r>
 8006284:	4606      	mov	r6, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	d1e0      	bne.n	800624c <__ssputs_r+0x5c>
 800628a:	6921      	ldr	r1, [r4, #16]
 800628c:	4650      	mov	r0, sl
 800628e:	f7ff feb7 	bl	8006000 <_free_r>
 8006292:	230c      	movs	r3, #12
 8006294:	f8ca 3000 	str.w	r3, [sl]
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e7e9      	b.n	800627a <__ssputs_r+0x8a>
	...

080062a8 <_svfiprintf_r>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	4698      	mov	r8, r3
 80062ae:	898b      	ldrh	r3, [r1, #12]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	b09d      	sub	sp, #116	@ 0x74
 80062b4:	4607      	mov	r7, r0
 80062b6:	460d      	mov	r5, r1
 80062b8:	4614      	mov	r4, r2
 80062ba:	d510      	bpl.n	80062de <_svfiprintf_r+0x36>
 80062bc:	690b      	ldr	r3, [r1, #16]
 80062be:	b973      	cbnz	r3, 80062de <_svfiprintf_r+0x36>
 80062c0:	2140      	movs	r1, #64	@ 0x40
 80062c2:	f7ff ff09 	bl	80060d8 <_malloc_r>
 80062c6:	6028      	str	r0, [r5, #0]
 80062c8:	6128      	str	r0, [r5, #16]
 80062ca:	b930      	cbnz	r0, 80062da <_svfiprintf_r+0x32>
 80062cc:	230c      	movs	r3, #12
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b01d      	add	sp, #116	@ 0x74
 80062d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	2340      	movs	r3, #64	@ 0x40
 80062dc:	616b      	str	r3, [r5, #20]
 80062de:	2300      	movs	r3, #0
 80062e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e2:	2320      	movs	r3, #32
 80062e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ec:	2330      	movs	r3, #48	@ 0x30
 80062ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800648c <_svfiprintf_r+0x1e4>
 80062f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062f6:	f04f 0901 	mov.w	r9, #1
 80062fa:	4623      	mov	r3, r4
 80062fc:	469a      	mov	sl, r3
 80062fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006302:	b10a      	cbz	r2, 8006308 <_svfiprintf_r+0x60>
 8006304:	2a25      	cmp	r2, #37	@ 0x25
 8006306:	d1f9      	bne.n	80062fc <_svfiprintf_r+0x54>
 8006308:	ebba 0b04 	subs.w	fp, sl, r4
 800630c:	d00b      	beq.n	8006326 <_svfiprintf_r+0x7e>
 800630e:	465b      	mov	r3, fp
 8006310:	4622      	mov	r2, r4
 8006312:	4629      	mov	r1, r5
 8006314:	4638      	mov	r0, r7
 8006316:	f7ff ff6b 	bl	80061f0 <__ssputs_r>
 800631a:	3001      	adds	r0, #1
 800631c:	f000 80a7 	beq.w	800646e <_svfiprintf_r+0x1c6>
 8006320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006322:	445a      	add	r2, fp
 8006324:	9209      	str	r2, [sp, #36]	@ 0x24
 8006326:	f89a 3000 	ldrb.w	r3, [sl]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 809f 	beq.w	800646e <_svfiprintf_r+0x1c6>
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800633a:	f10a 0a01 	add.w	sl, sl, #1
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	9307      	str	r3, [sp, #28]
 8006342:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006346:	931a      	str	r3, [sp, #104]	@ 0x68
 8006348:	4654      	mov	r4, sl
 800634a:	2205      	movs	r2, #5
 800634c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006350:	484e      	ldr	r0, [pc, #312]	@ (800648c <_svfiprintf_r+0x1e4>)
 8006352:	f7f9 ff4d 	bl	80001f0 <memchr>
 8006356:	9a04      	ldr	r2, [sp, #16]
 8006358:	b9d8      	cbnz	r0, 8006392 <_svfiprintf_r+0xea>
 800635a:	06d0      	lsls	r0, r2, #27
 800635c:	bf44      	itt	mi
 800635e:	2320      	movmi	r3, #32
 8006360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006364:	0711      	lsls	r1, r2, #28
 8006366:	bf44      	itt	mi
 8006368:	232b      	movmi	r3, #43	@ 0x2b
 800636a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800636e:	f89a 3000 	ldrb.w	r3, [sl]
 8006372:	2b2a      	cmp	r3, #42	@ 0x2a
 8006374:	d015      	beq.n	80063a2 <_svfiprintf_r+0xfa>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	4654      	mov	r4, sl
 800637a:	2000      	movs	r0, #0
 800637c:	f04f 0c0a 	mov.w	ip, #10
 8006380:	4621      	mov	r1, r4
 8006382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006386:	3b30      	subs	r3, #48	@ 0x30
 8006388:	2b09      	cmp	r3, #9
 800638a:	d94b      	bls.n	8006424 <_svfiprintf_r+0x17c>
 800638c:	b1b0      	cbz	r0, 80063bc <_svfiprintf_r+0x114>
 800638e:	9207      	str	r2, [sp, #28]
 8006390:	e014      	b.n	80063bc <_svfiprintf_r+0x114>
 8006392:	eba0 0308 	sub.w	r3, r0, r8
 8006396:	fa09 f303 	lsl.w	r3, r9, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	46a2      	mov	sl, r4
 80063a0:	e7d2      	b.n	8006348 <_svfiprintf_r+0xa0>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	9103      	str	r1, [sp, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfbb      	ittet	lt
 80063ae:	425b      	neglt	r3, r3
 80063b0:	f042 0202 	orrlt.w	r2, r2, #2
 80063b4:	9307      	strge	r3, [sp, #28]
 80063b6:	9307      	strlt	r3, [sp, #28]
 80063b8:	bfb8      	it	lt
 80063ba:	9204      	strlt	r2, [sp, #16]
 80063bc:	7823      	ldrb	r3, [r4, #0]
 80063be:	2b2e      	cmp	r3, #46	@ 0x2e
 80063c0:	d10a      	bne.n	80063d8 <_svfiprintf_r+0x130>
 80063c2:	7863      	ldrb	r3, [r4, #1]
 80063c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80063c6:	d132      	bne.n	800642e <_svfiprintf_r+0x186>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	9203      	str	r2, [sp, #12]
 80063d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063d4:	3402      	adds	r4, #2
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800649c <_svfiprintf_r+0x1f4>
 80063dc:	7821      	ldrb	r1, [r4, #0]
 80063de:	2203      	movs	r2, #3
 80063e0:	4650      	mov	r0, sl
 80063e2:	f7f9 ff05 	bl	80001f0 <memchr>
 80063e6:	b138      	cbz	r0, 80063f8 <_svfiprintf_r+0x150>
 80063e8:	9b04      	ldr	r3, [sp, #16]
 80063ea:	eba0 000a 	sub.w	r0, r0, sl
 80063ee:	2240      	movs	r2, #64	@ 0x40
 80063f0:	4082      	lsls	r2, r0
 80063f2:	4313      	orrs	r3, r2
 80063f4:	3401      	adds	r4, #1
 80063f6:	9304      	str	r3, [sp, #16]
 80063f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fc:	4824      	ldr	r0, [pc, #144]	@ (8006490 <_svfiprintf_r+0x1e8>)
 80063fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006402:	2206      	movs	r2, #6
 8006404:	f7f9 fef4 	bl	80001f0 <memchr>
 8006408:	2800      	cmp	r0, #0
 800640a:	d036      	beq.n	800647a <_svfiprintf_r+0x1d2>
 800640c:	4b21      	ldr	r3, [pc, #132]	@ (8006494 <_svfiprintf_r+0x1ec>)
 800640e:	bb1b      	cbnz	r3, 8006458 <_svfiprintf_r+0x1b0>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	3307      	adds	r3, #7
 8006414:	f023 0307 	bic.w	r3, r3, #7
 8006418:	3308      	adds	r3, #8
 800641a:	9303      	str	r3, [sp, #12]
 800641c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641e:	4433      	add	r3, r6
 8006420:	9309      	str	r3, [sp, #36]	@ 0x24
 8006422:	e76a      	b.n	80062fa <_svfiprintf_r+0x52>
 8006424:	fb0c 3202 	mla	r2, ip, r2, r3
 8006428:	460c      	mov	r4, r1
 800642a:	2001      	movs	r0, #1
 800642c:	e7a8      	b.n	8006380 <_svfiprintf_r+0xd8>
 800642e:	2300      	movs	r3, #0
 8006430:	3401      	adds	r4, #1
 8006432:	9305      	str	r3, [sp, #20]
 8006434:	4619      	mov	r1, r3
 8006436:	f04f 0c0a 	mov.w	ip, #10
 800643a:	4620      	mov	r0, r4
 800643c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006440:	3a30      	subs	r2, #48	@ 0x30
 8006442:	2a09      	cmp	r2, #9
 8006444:	d903      	bls.n	800644e <_svfiprintf_r+0x1a6>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0c6      	beq.n	80063d8 <_svfiprintf_r+0x130>
 800644a:	9105      	str	r1, [sp, #20]
 800644c:	e7c4      	b.n	80063d8 <_svfiprintf_r+0x130>
 800644e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006452:	4604      	mov	r4, r0
 8006454:	2301      	movs	r3, #1
 8006456:	e7f0      	b.n	800643a <_svfiprintf_r+0x192>
 8006458:	ab03      	add	r3, sp, #12
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	462a      	mov	r2, r5
 800645e:	4b0e      	ldr	r3, [pc, #56]	@ (8006498 <_svfiprintf_r+0x1f0>)
 8006460:	a904      	add	r1, sp, #16
 8006462:	4638      	mov	r0, r7
 8006464:	f3af 8000 	nop.w
 8006468:	1c42      	adds	r2, r0, #1
 800646a:	4606      	mov	r6, r0
 800646c:	d1d6      	bne.n	800641c <_svfiprintf_r+0x174>
 800646e:	89ab      	ldrh	r3, [r5, #12]
 8006470:	065b      	lsls	r3, r3, #25
 8006472:	f53f af2d 	bmi.w	80062d0 <_svfiprintf_r+0x28>
 8006476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006478:	e72c      	b.n	80062d4 <_svfiprintf_r+0x2c>
 800647a:	ab03      	add	r3, sp, #12
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	462a      	mov	r2, r5
 8006480:	4b05      	ldr	r3, [pc, #20]	@ (8006498 <_svfiprintf_r+0x1f0>)
 8006482:	a904      	add	r1, sp, #16
 8006484:	4638      	mov	r0, r7
 8006486:	f000 f879 	bl	800657c <_printf_i>
 800648a:	e7ed      	b.n	8006468 <_svfiprintf_r+0x1c0>
 800648c:	08006958 	.word	0x08006958
 8006490:	08006962 	.word	0x08006962
 8006494:	00000000 	.word	0x00000000
 8006498:	080061f1 	.word	0x080061f1
 800649c:	0800695e 	.word	0x0800695e

080064a0 <_printf_common>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	4616      	mov	r6, r2
 80064a6:	4698      	mov	r8, r3
 80064a8:	688a      	ldr	r2, [r1, #8]
 80064aa:	690b      	ldr	r3, [r1, #16]
 80064ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bfb8      	it	lt
 80064b4:	4613      	movlt	r3, r2
 80064b6:	6033      	str	r3, [r6, #0]
 80064b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064bc:	4607      	mov	r7, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b10a      	cbz	r2, 80064c6 <_printf_common+0x26>
 80064c2:	3301      	adds	r3, #1
 80064c4:	6033      	str	r3, [r6, #0]
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	0699      	lsls	r1, r3, #26
 80064ca:	bf42      	ittt	mi
 80064cc:	6833      	ldrmi	r3, [r6, #0]
 80064ce:	3302      	addmi	r3, #2
 80064d0:	6033      	strmi	r3, [r6, #0]
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	f015 0506 	ands.w	r5, r5, #6
 80064d8:	d106      	bne.n	80064e8 <_printf_common+0x48>
 80064da:	f104 0a19 	add.w	sl, r4, #25
 80064de:	68e3      	ldr	r3, [r4, #12]
 80064e0:	6832      	ldr	r2, [r6, #0]
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	42ab      	cmp	r3, r5
 80064e6:	dc26      	bgt.n	8006536 <_printf_common+0x96>
 80064e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	3b00      	subs	r3, #0
 80064f0:	bf18      	it	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	0692      	lsls	r2, r2, #26
 80064f6:	d42b      	bmi.n	8006550 <_printf_common+0xb0>
 80064f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064fc:	4641      	mov	r1, r8
 80064fe:	4638      	mov	r0, r7
 8006500:	47c8      	blx	r9
 8006502:	3001      	adds	r0, #1
 8006504:	d01e      	beq.n	8006544 <_printf_common+0xa4>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	6922      	ldr	r2, [r4, #16]
 800650a:	f003 0306 	and.w	r3, r3, #6
 800650e:	2b04      	cmp	r3, #4
 8006510:	bf02      	ittt	eq
 8006512:	68e5      	ldreq	r5, [r4, #12]
 8006514:	6833      	ldreq	r3, [r6, #0]
 8006516:	1aed      	subeq	r5, r5, r3
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	bf0c      	ite	eq
 800651c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006520:	2500      	movne	r5, #0
 8006522:	4293      	cmp	r3, r2
 8006524:	bfc4      	itt	gt
 8006526:	1a9b      	subgt	r3, r3, r2
 8006528:	18ed      	addgt	r5, r5, r3
 800652a:	2600      	movs	r6, #0
 800652c:	341a      	adds	r4, #26
 800652e:	42b5      	cmp	r5, r6
 8006530:	d11a      	bne.n	8006568 <_printf_common+0xc8>
 8006532:	2000      	movs	r0, #0
 8006534:	e008      	b.n	8006548 <_printf_common+0xa8>
 8006536:	2301      	movs	r3, #1
 8006538:	4652      	mov	r2, sl
 800653a:	4641      	mov	r1, r8
 800653c:	4638      	mov	r0, r7
 800653e:	47c8      	blx	r9
 8006540:	3001      	adds	r0, #1
 8006542:	d103      	bne.n	800654c <_printf_common+0xac>
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654c:	3501      	adds	r5, #1
 800654e:	e7c6      	b.n	80064de <_printf_common+0x3e>
 8006550:	18e1      	adds	r1, r4, r3
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	2030      	movs	r0, #48	@ 0x30
 8006556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800655a:	4422      	add	r2, r4
 800655c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006564:	3302      	adds	r3, #2
 8006566:	e7c7      	b.n	80064f8 <_printf_common+0x58>
 8006568:	2301      	movs	r3, #1
 800656a:	4622      	mov	r2, r4
 800656c:	4641      	mov	r1, r8
 800656e:	4638      	mov	r0, r7
 8006570:	47c8      	blx	r9
 8006572:	3001      	adds	r0, #1
 8006574:	d0e6      	beq.n	8006544 <_printf_common+0xa4>
 8006576:	3601      	adds	r6, #1
 8006578:	e7d9      	b.n	800652e <_printf_common+0x8e>
	...

0800657c <_printf_i>:
 800657c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	7e0f      	ldrb	r7, [r1, #24]
 8006582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006584:	2f78      	cmp	r7, #120	@ 0x78
 8006586:	4691      	mov	r9, r2
 8006588:	4680      	mov	r8, r0
 800658a:	460c      	mov	r4, r1
 800658c:	469a      	mov	sl, r3
 800658e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006592:	d807      	bhi.n	80065a4 <_printf_i+0x28>
 8006594:	2f62      	cmp	r7, #98	@ 0x62
 8006596:	d80a      	bhi.n	80065ae <_printf_i+0x32>
 8006598:	2f00      	cmp	r7, #0
 800659a:	f000 80d2 	beq.w	8006742 <_printf_i+0x1c6>
 800659e:	2f58      	cmp	r7, #88	@ 0x58
 80065a0:	f000 80b9 	beq.w	8006716 <_printf_i+0x19a>
 80065a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065ac:	e03a      	b.n	8006624 <_printf_i+0xa8>
 80065ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065b2:	2b15      	cmp	r3, #21
 80065b4:	d8f6      	bhi.n	80065a4 <_printf_i+0x28>
 80065b6:	a101      	add	r1, pc, #4	@ (adr r1, 80065bc <_printf_i+0x40>)
 80065b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065bc:	08006615 	.word	0x08006615
 80065c0:	08006629 	.word	0x08006629
 80065c4:	080065a5 	.word	0x080065a5
 80065c8:	080065a5 	.word	0x080065a5
 80065cc:	080065a5 	.word	0x080065a5
 80065d0:	080065a5 	.word	0x080065a5
 80065d4:	08006629 	.word	0x08006629
 80065d8:	080065a5 	.word	0x080065a5
 80065dc:	080065a5 	.word	0x080065a5
 80065e0:	080065a5 	.word	0x080065a5
 80065e4:	080065a5 	.word	0x080065a5
 80065e8:	08006729 	.word	0x08006729
 80065ec:	08006653 	.word	0x08006653
 80065f0:	080066e3 	.word	0x080066e3
 80065f4:	080065a5 	.word	0x080065a5
 80065f8:	080065a5 	.word	0x080065a5
 80065fc:	0800674b 	.word	0x0800674b
 8006600:	080065a5 	.word	0x080065a5
 8006604:	08006653 	.word	0x08006653
 8006608:	080065a5 	.word	0x080065a5
 800660c:	080065a5 	.word	0x080065a5
 8006610:	080066eb 	.word	0x080066eb
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	1d1a      	adds	r2, r3, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6032      	str	r2, [r6, #0]
 800661c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006624:	2301      	movs	r3, #1
 8006626:	e09d      	b.n	8006764 <_printf_i+0x1e8>
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	6820      	ldr	r0, [r4, #0]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	6031      	str	r1, [r6, #0]
 8006630:	0606      	lsls	r6, r0, #24
 8006632:	d501      	bpl.n	8006638 <_printf_i+0xbc>
 8006634:	681d      	ldr	r5, [r3, #0]
 8006636:	e003      	b.n	8006640 <_printf_i+0xc4>
 8006638:	0645      	lsls	r5, r0, #25
 800663a:	d5fb      	bpl.n	8006634 <_printf_i+0xb8>
 800663c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006640:	2d00      	cmp	r5, #0
 8006642:	da03      	bge.n	800664c <_printf_i+0xd0>
 8006644:	232d      	movs	r3, #45	@ 0x2d
 8006646:	426d      	negs	r5, r5
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800664c:	4859      	ldr	r0, [pc, #356]	@ (80067b4 <_printf_i+0x238>)
 800664e:	230a      	movs	r3, #10
 8006650:	e011      	b.n	8006676 <_printf_i+0xfa>
 8006652:	6821      	ldr	r1, [r4, #0]
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	0608      	lsls	r0, r1, #24
 8006658:	f853 5b04 	ldr.w	r5, [r3], #4
 800665c:	d402      	bmi.n	8006664 <_printf_i+0xe8>
 800665e:	0649      	lsls	r1, r1, #25
 8006660:	bf48      	it	mi
 8006662:	b2ad      	uxthmi	r5, r5
 8006664:	2f6f      	cmp	r7, #111	@ 0x6f
 8006666:	4853      	ldr	r0, [pc, #332]	@ (80067b4 <_printf_i+0x238>)
 8006668:	6033      	str	r3, [r6, #0]
 800666a:	bf14      	ite	ne
 800666c:	230a      	movne	r3, #10
 800666e:	2308      	moveq	r3, #8
 8006670:	2100      	movs	r1, #0
 8006672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006676:	6866      	ldr	r6, [r4, #4]
 8006678:	60a6      	str	r6, [r4, #8]
 800667a:	2e00      	cmp	r6, #0
 800667c:	bfa2      	ittt	ge
 800667e:	6821      	ldrge	r1, [r4, #0]
 8006680:	f021 0104 	bicge.w	r1, r1, #4
 8006684:	6021      	strge	r1, [r4, #0]
 8006686:	b90d      	cbnz	r5, 800668c <_printf_i+0x110>
 8006688:	2e00      	cmp	r6, #0
 800668a:	d04b      	beq.n	8006724 <_printf_i+0x1a8>
 800668c:	4616      	mov	r6, r2
 800668e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006692:	fb03 5711 	mls	r7, r3, r1, r5
 8006696:	5dc7      	ldrb	r7, [r0, r7]
 8006698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800669c:	462f      	mov	r7, r5
 800669e:	42bb      	cmp	r3, r7
 80066a0:	460d      	mov	r5, r1
 80066a2:	d9f4      	bls.n	800668e <_printf_i+0x112>
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d10b      	bne.n	80066c0 <_printf_i+0x144>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07df      	lsls	r7, r3, #31
 80066ac:	d508      	bpl.n	80066c0 <_printf_i+0x144>
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	6861      	ldr	r1, [r4, #4]
 80066b2:	4299      	cmp	r1, r3
 80066b4:	bfde      	ittt	le
 80066b6:	2330      	movle	r3, #48	@ 0x30
 80066b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066c0:	1b92      	subs	r2, r2, r6
 80066c2:	6122      	str	r2, [r4, #16]
 80066c4:	f8cd a000 	str.w	sl, [sp]
 80066c8:	464b      	mov	r3, r9
 80066ca:	aa03      	add	r2, sp, #12
 80066cc:	4621      	mov	r1, r4
 80066ce:	4640      	mov	r0, r8
 80066d0:	f7ff fee6 	bl	80064a0 <_printf_common>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d14a      	bne.n	800676e <_printf_i+0x1f2>
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	b004      	add	sp, #16
 80066de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f043 0320 	orr.w	r3, r3, #32
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	4833      	ldr	r0, [pc, #204]	@ (80067b8 <_printf_i+0x23c>)
 80066ec:	2778      	movs	r7, #120	@ 0x78
 80066ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	6831      	ldr	r1, [r6, #0]
 80066f6:	061f      	lsls	r7, r3, #24
 80066f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80066fc:	d402      	bmi.n	8006704 <_printf_i+0x188>
 80066fe:	065f      	lsls	r7, r3, #25
 8006700:	bf48      	it	mi
 8006702:	b2ad      	uxthmi	r5, r5
 8006704:	6031      	str	r1, [r6, #0]
 8006706:	07d9      	lsls	r1, r3, #31
 8006708:	bf44      	itt	mi
 800670a:	f043 0320 	orrmi.w	r3, r3, #32
 800670e:	6023      	strmi	r3, [r4, #0]
 8006710:	b11d      	cbz	r5, 800671a <_printf_i+0x19e>
 8006712:	2310      	movs	r3, #16
 8006714:	e7ac      	b.n	8006670 <_printf_i+0xf4>
 8006716:	4827      	ldr	r0, [pc, #156]	@ (80067b4 <_printf_i+0x238>)
 8006718:	e7e9      	b.n	80066ee <_printf_i+0x172>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	f023 0320 	bic.w	r3, r3, #32
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	e7f6      	b.n	8006712 <_printf_i+0x196>
 8006724:	4616      	mov	r6, r2
 8006726:	e7bd      	b.n	80066a4 <_printf_i+0x128>
 8006728:	6833      	ldr	r3, [r6, #0]
 800672a:	6825      	ldr	r5, [r4, #0]
 800672c:	6961      	ldr	r1, [r4, #20]
 800672e:	1d18      	adds	r0, r3, #4
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	062e      	lsls	r6, r5, #24
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	d501      	bpl.n	800673c <_printf_i+0x1c0>
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0x1c6>
 800673c:	0668      	lsls	r0, r5, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0x1bc>
 8006740:	8019      	strh	r1, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	4616      	mov	r6, r2
 8006748:	e7bc      	b.n	80066c4 <_printf_i+0x148>
 800674a:	6833      	ldr	r3, [r6, #0]
 800674c:	1d1a      	adds	r2, r3, #4
 800674e:	6032      	str	r2, [r6, #0]
 8006750:	681e      	ldr	r6, [r3, #0]
 8006752:	6862      	ldr	r2, [r4, #4]
 8006754:	2100      	movs	r1, #0
 8006756:	4630      	mov	r0, r6
 8006758:	f7f9 fd4a 	bl	80001f0 <memchr>
 800675c:	b108      	cbz	r0, 8006762 <_printf_i+0x1e6>
 800675e:	1b80      	subs	r0, r0, r6
 8006760:	6060      	str	r0, [r4, #4]
 8006762:	6863      	ldr	r3, [r4, #4]
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	2300      	movs	r3, #0
 8006768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800676c:	e7aa      	b.n	80066c4 <_printf_i+0x148>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	4632      	mov	r2, r6
 8006772:	4649      	mov	r1, r9
 8006774:	4640      	mov	r0, r8
 8006776:	47d0      	blx	sl
 8006778:	3001      	adds	r0, #1
 800677a:	d0ad      	beq.n	80066d8 <_printf_i+0x15c>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	079b      	lsls	r3, r3, #30
 8006780:	d413      	bmi.n	80067aa <_printf_i+0x22e>
 8006782:	68e0      	ldr	r0, [r4, #12]
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	4298      	cmp	r0, r3
 8006788:	bfb8      	it	lt
 800678a:	4618      	movlt	r0, r3
 800678c:	e7a6      	b.n	80066dc <_printf_i+0x160>
 800678e:	2301      	movs	r3, #1
 8006790:	4632      	mov	r2, r6
 8006792:	4649      	mov	r1, r9
 8006794:	4640      	mov	r0, r8
 8006796:	47d0      	blx	sl
 8006798:	3001      	adds	r0, #1
 800679a:	d09d      	beq.n	80066d8 <_printf_i+0x15c>
 800679c:	3501      	adds	r5, #1
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	9903      	ldr	r1, [sp, #12]
 80067a2:	1a5b      	subs	r3, r3, r1
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dcf2      	bgt.n	800678e <_printf_i+0x212>
 80067a8:	e7eb      	b.n	8006782 <_printf_i+0x206>
 80067aa:	2500      	movs	r5, #0
 80067ac:	f104 0619 	add.w	r6, r4, #25
 80067b0:	e7f5      	b.n	800679e <_printf_i+0x222>
 80067b2:	bf00      	nop
 80067b4:	08006969 	.word	0x08006969
 80067b8:	0800697a 	.word	0x0800697a

080067bc <memmove>:
 80067bc:	4288      	cmp	r0, r1
 80067be:	b510      	push	{r4, lr}
 80067c0:	eb01 0402 	add.w	r4, r1, r2
 80067c4:	d902      	bls.n	80067cc <memmove+0x10>
 80067c6:	4284      	cmp	r4, r0
 80067c8:	4623      	mov	r3, r4
 80067ca:	d807      	bhi.n	80067dc <memmove+0x20>
 80067cc:	1e43      	subs	r3, r0, #1
 80067ce:	42a1      	cmp	r1, r4
 80067d0:	d008      	beq.n	80067e4 <memmove+0x28>
 80067d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067da:	e7f8      	b.n	80067ce <memmove+0x12>
 80067dc:	4402      	add	r2, r0
 80067de:	4601      	mov	r1, r0
 80067e0:	428a      	cmp	r2, r1
 80067e2:	d100      	bne.n	80067e6 <memmove+0x2a>
 80067e4:	bd10      	pop	{r4, pc}
 80067e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ee:	e7f7      	b.n	80067e0 <memmove+0x24>

080067f0 <_sbrk_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d06      	ldr	r5, [pc, #24]	@ (800680c <_sbrk_r+0x1c>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fb f858 	bl	80018b0 <_sbrk>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_sbrk_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_sbrk_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	20004d04 	.word	0x20004d04

08006810 <_realloc_r>:
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	4680      	mov	r8, r0
 8006816:	4615      	mov	r5, r2
 8006818:	460c      	mov	r4, r1
 800681a:	b921      	cbnz	r1, 8006826 <_realloc_r+0x16>
 800681c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006820:	4611      	mov	r1, r2
 8006822:	f7ff bc59 	b.w	80060d8 <_malloc_r>
 8006826:	b92a      	cbnz	r2, 8006834 <_realloc_r+0x24>
 8006828:	f7ff fbea 	bl	8006000 <_free_r>
 800682c:	2400      	movs	r4, #0
 800682e:	4620      	mov	r0, r4
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006834:	f000 f81a 	bl	800686c <_malloc_usable_size_r>
 8006838:	4285      	cmp	r5, r0
 800683a:	4606      	mov	r6, r0
 800683c:	d802      	bhi.n	8006844 <_realloc_r+0x34>
 800683e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006842:	d8f4      	bhi.n	800682e <_realloc_r+0x1e>
 8006844:	4629      	mov	r1, r5
 8006846:	4640      	mov	r0, r8
 8006848:	f7ff fc46 	bl	80060d8 <_malloc_r>
 800684c:	4607      	mov	r7, r0
 800684e:	2800      	cmp	r0, #0
 8006850:	d0ec      	beq.n	800682c <_realloc_r+0x1c>
 8006852:	42b5      	cmp	r5, r6
 8006854:	462a      	mov	r2, r5
 8006856:	4621      	mov	r1, r4
 8006858:	bf28      	it	cs
 800685a:	4632      	movcs	r2, r6
 800685c:	f7ff fbc2 	bl	8005fe4 <memcpy>
 8006860:	4621      	mov	r1, r4
 8006862:	4640      	mov	r0, r8
 8006864:	f7ff fbcc 	bl	8006000 <_free_r>
 8006868:	463c      	mov	r4, r7
 800686a:	e7e0      	b.n	800682e <_realloc_r+0x1e>

0800686c <_malloc_usable_size_r>:
 800686c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006870:	1f18      	subs	r0, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfbc      	itt	lt
 8006876:	580b      	ldrlt	r3, [r1, r0]
 8006878:	18c0      	addlt	r0, r0, r3
 800687a:	4770      	bx	lr

0800687c <_init>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr

08006888 <_fini>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr
