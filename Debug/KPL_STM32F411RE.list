
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006bf4  08006bf4  00007bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d0c  08006d0c  000080a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006d0c  08006d0c  00007d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d14  08006d14  000080a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d18  08006d18  00007d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08006d1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  200000a8  08006dc4  000080a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d28  08006dc4  00008d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f55  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  0001f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00023c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938d  00000000  00000000  00024bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172e3  00000000  00000000  0003df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000986e6  00000000  00000000  00055266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed94c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000ed990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f32c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006bdc 	.word	0x08006bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08006bdc 	.word	0x08006bdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ScanColumns>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 80c0 	bhi.w	8000712 <ScanColumns+0x192>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ScanColumns+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	08000605 	.word	0x08000605
 80005a0:	0800065f 	.word	0x0800065f
 80005a4:	080006b9 	.word	0x080006b9
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80005a8:	2101      	movs	r1, #1
 80005aa:	4861      	ldr	r0, [pc, #388]	@ (8000730 <ScanColumns+0x1b0>)
 80005ac:	f001 fe4a 	bl	8002244 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <ScanColumns+0x3a>
 80005b6:	2343      	movs	r3, #67	@ 0x43
 80005b8:	e0b5      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 80005ba:	2102      	movs	r1, #2
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <ScanColumns+0x1b0>)
 80005be:	f001 fe41 	bl	8002244 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <ScanColumns+0x4c>
 80005c8:	2337      	movs	r3, #55	@ 0x37
 80005ca:	e0ac      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 80005cc:	2104      	movs	r1, #4
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <ScanColumns+0x1b0>)
 80005d0:	f001 fe38 	bl	8002244 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ScanColumns+0x5e>
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	e0a3      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 80005de:	2108      	movs	r1, #8
 80005e0:	4853      	ldr	r0, [pc, #332]	@ (8000730 <ScanColumns+0x1b0>)
 80005e2:	f001 fe2f 	bl	8002244 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <ScanColumns+0x70>
 80005ec:	2331      	movs	r3, #49	@ 0x31
 80005ee:	e09a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 80005f0:	2110      	movs	r1, #16
 80005f2:	484f      	ldr	r0, [pc, #316]	@ (8000730 <ScanColumns+0x1b0>)
 80005f4:	f001 fe26 	bl	8002244 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 808b 	bne.w	8000716 <ScanColumns+0x196>
 8000600:	2341      	movs	r3, #65	@ 0x41
 8000602:	e090      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000604:	2101      	movs	r1, #1
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <ScanColumns+0x1b0>)
 8000608:	f001 fe1c 	bl	8002244 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ScanColumns+0x96>
 8000612:	2330      	movs	r3, #48	@ 0x30
 8000614:	e087      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000616:	2102      	movs	r1, #2
 8000618:	4845      	ldr	r0, [pc, #276]	@ (8000730 <ScanColumns+0x1b0>)
 800061a:	f001 fe13 	bl	8002244 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ScanColumns+0xa8>
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	e07e      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000628:	2104      	movs	r1, #4
 800062a:	4841      	ldr	r0, [pc, #260]	@ (8000730 <ScanColumns+0x1b0>)
 800062c:	f001 fe0a 	bl	8002244 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <ScanColumns+0xba>
 8000636:	2335      	movs	r3, #53	@ 0x35
 8000638:	e075      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800063a:	2108      	movs	r1, #8
 800063c:	483c      	ldr	r0, [pc, #240]	@ (8000730 <ScanColumns+0x1b0>)
 800063e:	f001 fe01 	bl	8002244 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <ScanColumns+0xcc>
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	e06c      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800064c:	2110      	movs	r1, #16
 800064e:	4838      	ldr	r0, [pc, #224]	@ (8000730 <ScanColumns+0x1b0>)
 8000650:	f001 fdf8 	bl	8002244 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d15f      	bne.n	800071a <ScanColumns+0x19a>
 800065a:	2342      	movs	r3, #66	@ 0x42
 800065c:	e063      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 800065e:	2101      	movs	r1, #1
 8000660:	4833      	ldr	r0, [pc, #204]	@ (8000730 <ScanColumns+0x1b0>)
 8000662:	f001 fdef 	bl	8002244 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <ScanColumns+0xf0>
 800066c:	2345      	movs	r3, #69	@ 0x45
 800066e:	e05a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000670:	2102      	movs	r1, #2
 8000672:	482f      	ldr	r0, [pc, #188]	@ (8000730 <ScanColumns+0x1b0>)
 8000674:	f001 fde6 	bl	8002244 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <ScanColumns+0x102>
 800067e:	2339      	movs	r3, #57	@ 0x39
 8000680:	e051      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000682:	2104      	movs	r1, #4
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <ScanColumns+0x1b0>)
 8000686:	f001 fddd 	bl	8002244 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <ScanColumns+0x114>
 8000690:	2336      	movs	r3, #54	@ 0x36
 8000692:	e048      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000694:	2108      	movs	r1, #8
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <ScanColumns+0x1b0>)
 8000698:	f001 fdd4 	bl	8002244 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <ScanColumns+0x126>
 80006a2:	2333      	movs	r3, #51	@ 0x33
 80006a4:	e03f      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80006a6:	2110      	movs	r1, #16
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <ScanColumns+0x1b0>)
 80006aa:	f001 fdcb 	bl	8002244 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d134      	bne.n	800071e <ScanColumns+0x19e>
 80006b4:	2344      	movs	r3, #68	@ 0x44
 80006b6:	e036      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 80006b8:	2101      	movs	r1, #1
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <ScanColumns+0x1b0>)
 80006bc:	f001 fdc2 	bl	8002244 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <ScanColumns+0x14a>
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	e02d      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 80006ca:	2102      	movs	r1, #2
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <ScanColumns+0x1b0>)
 80006ce:	f001 fdb9 	bl	8002244 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <ScanColumns+0x15c>
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	e024      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 80006dc:	2104      	movs	r1, #4
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <ScanColumns+0x1b0>)
 80006e0:	f001 fdb0 	bl	8002244 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <ScanColumns+0x16e>
 80006ea:	2324      	movs	r3, #36	@ 0x24
 80006ec:	e01b      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 80006ee:	2108      	movs	r1, #8
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <ScanColumns+0x1b0>)
 80006f2:	f001 fda7 	bl	8002244 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <ScanColumns+0x180>
 80006fc:	234c      	movs	r3, #76	@ 0x4c
 80006fe:	e012      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <ScanColumns+0x1b0>)
 8000704:	f001 fd9e 	bl	8002244 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <ScanColumns+0x1a2>
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	e009      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000712:	23ff      	movs	r3, #255	@ 0xff
 8000714:	e007      	b.n	8000726 <ScanColumns+0x1a6>
            break;
 8000716:	bf00      	nop
 8000718:	e004      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071a:	bf00      	nop
 800071c:	e002      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 8000722:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000724:	23ff      	movs	r3, #255	@ 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400

08000734 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000740:	f001 fd98 	bl	8002274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800074c:	f001 fd92 	bl	8002274 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff15 	bl	8000580 <ScanColumns>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d001      	beq.n	8000764 <KeyPad_Scan+0x30>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	e041      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800076a:	f001 fd83 	bl	8002274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000774:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000776:	f001 fd7d 	bl	8002274 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff00 	bl	8000580 <ScanColumns>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d001      	beq.n	800078e <KeyPad_Scan+0x5a>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	e02c      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000796:	f001 fd6d 	bl	8002274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007a2:	f001 fd67 	bl	8002274 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff feea 	bl	8000580 <ScanColumns>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <KeyPad_Scan+0x86>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	e016      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007c2:	f001 fd57 	bl	8002274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007ce:	f001 fd51 	bl	8002274 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fed4 	bl	8000580 <ScanColumns>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <KeyPad_Scan+0xb2>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	e000      	b.n	80007e8 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80007e6:	23ff      	movs	r3, #255	@ 0xff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020400 	.word	0x40020400

080007f4 <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <formatTotalLiters+0x80>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d815      	bhi.n	8000834 <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <formatTotalLiters+0x84>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <formatTotalLiters+0x84>)
 800081a:	fba3 1302 	umull	r1, r3, r3, r2
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	4916      	ldr	r1, [pc, #88]	@ (800087c <formatTotalLiters+0x88>)
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <formatTotalLiters+0x8c>)
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000832:	e018      	b.n	8000866 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <formatTotalLiters+0x90>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0e5a      	lsrs	r2, r3, #25
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <formatTotalLiters+0x90>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0e5b      	lsrs	r3, r3, #25
 800084c:	490e      	ldr	r1, [pc, #56]	@ (8000888 <formatTotalLiters+0x94>)
 800084e:	fb01 f303 	mul.w	r3, r1, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <formatTotalLiters+0x98>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	095a      	lsrs	r2, r3, #5
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <formatTotalLiters+0x8c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	05f5e0ff 	.word	0x05f5e0ff
 8000878:	431bde83 	.word	0x431bde83
 800087c:	000f4240 	.word	0x000f4240
 8000880:	20000044 	.word	0x20000044
 8000884:	55e63b89 	.word	0x55e63b89
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	51eb851f 	.word	0x51eb851f

08000890 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <formatTotalLitersShift+0x60>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d815      	bhi.n	80008d0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9a      	lsrs	r2, r3, #18
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	490e      	ldr	r1, [pc, #56]	@ (80008f8 <formatTotalLitersShift+0x68>)
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -11;
	}
}
 80008ce:	e009      	b.n	80008e4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -11;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008de:	f06f 020a 	mvn.w	r2, #10
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	3b9ac9ff 	.word	0x3b9ac9ff
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	20000044 	.word	0x20000044

08000900 <KeyLogic>:


void KeyLogic() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8000906:	f004 f89d 	bl	8004a44 <xTaskGetTickCount>
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800090c:	f7ff ff12 	bl	8000734 <KeyPad_Scan>
 8000910:	4603      	mov	r3, r0
 8000912:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000914:	4b90      	ldr	r3, [pc, #576]	@ (8000b58 <KeyLogic+0x258>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d85a      	bhi.n	80009d2 <KeyLogic+0xd2>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <KeyLogic+0x24>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	0800094f 	.word	0x0800094f
 800092c:	0800097b 	.word	0x0800097b
 8000930:	080009ab 	.word	0x080009ab
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d044      	beq.n	80009c4 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800093a:	4a88      	ldr	r2, [pc, #544]	@ (8000b5c <KeyLogic+0x25c>)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000940:	4a87      	ldr	r2, [pc, #540]	@ (8000b60 <KeyLogic+0x260>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8000946:	4b84      	ldr	r3, [pc, #528]	@ (8000b58 <KeyLogic+0x258>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800094c:	e03a      	b.n	80009c4 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800094e:	4b84      	ldr	r3, [pc, #528]	@ (8000b60 <KeyLogic+0x260>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b31      	cmp	r3, #49	@ 0x31
 8000958:	d936      	bls.n	80009c8 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800095a:	4b80      	ldr	r3, [pc, #512]	@ (8000b5c <KeyLogic+0x25c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d106      	bne.n	8000972 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8000964:	4b7c      	ldr	r3, [pc, #496]	@ (8000b58 <KeyLogic+0x258>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800096a:	4a7e      	ldr	r2, [pc, #504]	@ (8000b64 <KeyLogic+0x264>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8000970:	e02a      	b.n	80009c8 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8000972:	4b79      	ldr	r3, [pc, #484]	@ (8000b58 <KeyLogic+0x258>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
            break;
 8000978:	e026      	b.n	80009c8 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800097a:	4b78      	ldr	r3, [pc, #480]	@ (8000b5c <KeyLogic+0x25c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10a      	bne.n	800099a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8000984:	4b77      	ldr	r3, [pc, #476]	@ (8000b64 <KeyLogic+0x264>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000990:	d31c      	bcc.n	80009cc <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000992:	4b71      	ldr	r3, [pc, #452]	@ (8000b58 <KeyLogic+0x258>)
 8000994:	2203      	movs	r2, #3
 8000996:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000998:	e018      	b.n	80009cc <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800099a:	4b70      	ldr	r3, [pc, #448]	@ (8000b5c <KeyLogic+0x25c>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b72      	ldr	r3, [pc, #456]	@ (8000b68 <KeyLogic+0x268>)
 80009a0:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009a2:	4b6d      	ldr	r3, [pc, #436]	@ (8000b58 <KeyLogic+0x258>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
            break;
 80009a8:	e010      	b.n	80009cc <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80009aa:	4b6c      	ldr	r3, [pc, #432]	@ (8000b5c <KeyLogic+0x25c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d00d      	beq.n	80009d0 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80009b4:	4b69      	ldr	r3, [pc, #420]	@ (8000b5c <KeyLogic+0x25c>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b68 <KeyLogic+0x268>)
 80009ba:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009bc:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <KeyLogic+0x258>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80009c2:	e005      	b.n	80009d0 <KeyLogic+0xd0>
            break;
 80009c4:	bf00      	nop
 80009c6:	e004      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009d0:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 80009d2:	4b65      	ldr	r3, [pc, #404]	@ (8000b68 <KeyLogic+0x268>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2bff      	cmp	r3, #255	@ 0xff
 80009d8:	f000 81e8 	beq.w	8000dac <KeyLogic+0x4ac>
        switch (seqState) {
 80009dc:	4b63      	ldr	r3, [pc, #396]	@ (8000b6c <KeyLogic+0x26c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b08      	cmp	r3, #8
 80009e2:	d07b      	beq.n	8000adc <KeyLogic+0x1dc>
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	f300 80c9 	bgt.w	8000b7c <KeyLogic+0x27c>
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d002      	beq.n	80009f4 <KeyLogic+0xf4>
 80009ee:	2b07      	cmp	r3, #7
 80009f0:	d02b      	beq.n	8000a4a <KeyLogic+0x14a>
 80009f2:	e0c3      	b.n	8000b7c <KeyLogic+0x27c>
            case SEQ_NUMBER:
                if (keyPressed >= '0' && keyPressed <= '9') {
 80009f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b68 <KeyLogic+0x268>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80009fa:	d91b      	bls.n	8000a34 <KeyLogic+0x134>
 80009fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000b68 <KeyLogic+0x268>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b39      	cmp	r3, #57	@ 0x39
 8000a02:	d817      	bhi.n	8000a34 <KeyLogic+0x134>
                    if (numberOfDigits < 6) {
 8000a04:	4b5a      	ldr	r3, [pc, #360]	@ (8000b70 <KeyLogic+0x270>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d81d      	bhi.n	8000a48 <KeyLogic+0x148>
                        accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000a0c:	4b59      	ldr	r3, [pc, #356]	@ (8000b74 <KeyLogic+0x274>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b53      	ldr	r3, [pc, #332]	@ (8000b68 <KeyLogic+0x268>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	3b30      	subs	r3, #48	@ 0x30
 8000a22:	4a54      	ldr	r2, [pc, #336]	@ (8000b74 <KeyLogic+0x274>)
 8000a24:	6013      	str	r3, [r2, #0]
                        numberOfDigits++;
 8000a26:	4b52      	ldr	r3, [pc, #328]	@ (8000b70 <KeyLogic+0x270>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b50      	ldr	r3, [pc, #320]	@ (8000b70 <KeyLogic+0x270>)
 8000a30:	701a      	strb	r2, [r3, #0]
                    if (numberOfDigits < 6) {
 8000a32:	e009      	b.n	8000a48 <KeyLogic+0x148>
                    }
                } else {
                    seqState = SEQ_IDLE;
 8000a34:	4b4d      	ldr	r3, [pc, #308]	@ (8000b6c <KeyLogic+0x26c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
                    numberOfDigits = 0;
 8000a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b70 <KeyLogic+0x270>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
                    accumulatedNumber = 0;
 8000a40:	4b4c      	ldr	r3, [pc, #304]	@ (8000b74 <KeyLogic+0x274>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
                }
                break;
 8000a46:	e1ae      	b.n	8000da6 <KeyLogic+0x4a6>
 8000a48:	e1ad      	b.n	8000da6 <KeyLogic+0x4a6>

            case SEQ_ENTER_OLD_PASSWORD:
                if (keyPressed >= '0' && keyPressed <= '9') {
 8000a4a:	4b47      	ldr	r3, [pc, #284]	@ (8000b68 <KeyLogic+0x268>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a50:	d91b      	bls.n	8000a8a <KeyLogic+0x18a>
 8000a52:	4b45      	ldr	r3, [pc, #276]	@ (8000b68 <KeyLogic+0x268>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b39      	cmp	r3, #57	@ 0x39
 8000a58:	d817      	bhi.n	8000a8a <KeyLogic+0x18a>
                    if (numberOfDigits < 6) {
 8000a5a:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <KeyLogic+0x270>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d83b      	bhi.n	8000ada <KeyLogic+0x1da>
                        accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000a62:	4b44      	ldr	r3, [pc, #272]	@ (8000b74 <KeyLogic+0x274>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b3d      	ldr	r3, [pc, #244]	@ (8000b68 <KeyLogic+0x268>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	3b30      	subs	r3, #48	@ 0x30
 8000a78:	4a3e      	ldr	r2, [pc, #248]	@ (8000b74 <KeyLogic+0x274>)
 8000a7a:	6013      	str	r3, [r2, #0]
                        numberOfDigits++;
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <KeyLogic+0x270>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <KeyLogic+0x270>)
 8000a86:	701a      	strb	r2, [r3, #0]
                    if (numberOfDigits < 6) {
 8000a88:	e027      	b.n	8000ada <KeyLogic+0x1da>
                    }
                } else if (keyPressed == 'E') {
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <KeyLogic+0x268>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b45      	cmp	r3, #69	@ 0x45
 8000a90:	d119      	bne.n	8000ac6 <KeyLogic+0x1c6>
                    if (accumulatedNumber == password) {
 8000a92:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <KeyLogic+0x274>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b38      	ldr	r3, [pc, #224]	@ (8000b78 <KeyLogic+0x278>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d109      	bne.n	8000ab2 <KeyLogic+0x1b2>
                        seqState = SEQ_ENTER_NEW_PASSWORD;
 8000a9e:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <KeyLogic+0x26c>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	701a      	strb	r2, [r3, #0]
                        numberOfDigits = 0;
 8000aa4:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <KeyLogic+0x270>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
                        accumulatedNumber = 0;
 8000aaa:	4b32      	ldr	r3, [pc, #200]	@ (8000b74 <KeyLogic+0x274>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
                } else {
                    seqState = SEQ_IDLE;
                    numberOfDigits = 0;
                    accumulatedNumber = 0;
                }
                break;
 8000ab0:	e179      	b.n	8000da6 <KeyLogic+0x4a6>
                        seqState = SEQ_IDLE;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <KeyLogic+0x26c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
                        numberOfDigits = 0;
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <KeyLogic+0x270>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
                        accumulatedNumber = 0;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <KeyLogic+0x274>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
                break;
 8000ac4:	e16f      	b.n	8000da6 <KeyLogic+0x4a6>
                    seqState = SEQ_IDLE;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <KeyLogic+0x26c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
                    numberOfDigits = 0;
 8000acc:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <KeyLogic+0x270>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
                    accumulatedNumber = 0;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <KeyLogic+0x274>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
                break;
 8000ad8:	e165      	b.n	8000da6 <KeyLogic+0x4a6>
 8000ada:	e164      	b.n	8000da6 <KeyLogic+0x4a6>

            case SEQ_ENTER_NEW_PASSWORD:
                if (keyPressed >= '0' && keyPressed <= '9') {
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <KeyLogic+0x268>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ae2:	d91b      	bls.n	8000b1c <KeyLogic+0x21c>
 8000ae4:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <KeyLogic+0x268>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b39      	cmp	r3, #57	@ 0x39
 8000aea:	d817      	bhi.n	8000b1c <KeyLogic+0x21c>
                    if (numberOfDigits < 6) {
 8000aec:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <KeyLogic+0x270>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d82f      	bhi.n	8000b54 <KeyLogic+0x254>
                        accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <KeyLogic+0x274>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <KeyLogic+0x268>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	3b30      	subs	r3, #48	@ 0x30
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b74 <KeyLogic+0x274>)
 8000b0c:	6013      	str	r3, [r2, #0]
                        numberOfDigits++;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <KeyLogic+0x270>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <KeyLogic+0x270>)
 8000b18:	701a      	strb	r2, [r3, #0]
                    if (numberOfDigits < 6) {
 8000b1a:	e01b      	b.n	8000b54 <KeyLogic+0x254>
                    }
                } else if (keyPressed == 'E') {
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <KeyLogic+0x268>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b45      	cmp	r3, #69	@ 0x45
 8000b22:	d10d      	bne.n	8000b40 <KeyLogic+0x240>
                    password = accumulatedNumber;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <KeyLogic+0x274>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <KeyLogic+0x278>)
 8000b2a:	6013      	str	r3, [r2, #0]
                    seqState = SEQ_IDLE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <KeyLogic+0x26c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
                    numberOfDigits = 0;
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <KeyLogic+0x270>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
                    accumulatedNumber = 0;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <KeyLogic+0x274>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
                } else {
                    seqState = SEQ_IDLE;
                    numberOfDigits = 0;
                    accumulatedNumber = 0;
                }
                break;
 8000b3e:	e132      	b.n	8000da6 <KeyLogic+0x4a6>
                    seqState = SEQ_IDLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <KeyLogic+0x26c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
                    numberOfDigits = 0;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <KeyLogic+0x270>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
                    accumulatedNumber = 0;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <KeyLogic+0x274>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
                break;
 8000b52:	e128      	b.n	8000da6 <KeyLogic+0x4a6>
 8000b54:	e127      	b.n	8000da6 <KeyLogic+0x4a6>
 8000b56:	bf00      	nop
 8000b58:	200000dc 	.word	0x200000dc
 8000b5c:	20000001 	.word	0x20000001
 8000b60:	200000c4 	.word	0x200000c4
 8000b64:	200000c8 	.word	0x200000c8
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200000dd 	.word	0x200000dd
 8000b70:	200000d0 	.word	0x200000d0
 8000b74:	200000cc 	.word	0x200000cc
 8000b78:	20000038 	.word	0x20000038

            default:
                switch (keyPressed) {
 8000b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8000db4 <KeyLogic+0x4b4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3b24      	subs	r3, #36	@ 0x24
 8000b82:	2b30      	cmp	r3, #48	@ 0x30
 8000b84:	f200 80f5 	bhi.w	8000d72 <KeyLogic+0x472>
 8000b88:	a201      	add	r2, pc, #4	@ (adr r2, 8000b90 <KeyLogic+0x290>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000d07 	.word	0x08000d07
 8000b94:	08000d73 	.word	0x08000d73
 8000b98:	08000d73 	.word	0x08000d73
 8000b9c:	08000d73 	.word	0x08000d73
 8000ba0:	08000d73 	.word	0x08000d73
 8000ba4:	08000d73 	.word	0x08000d73
 8000ba8:	08000d73 	.word	0x08000d73
 8000bac:	08000d73 	.word	0x08000d73
 8000bb0:	08000d73 	.word	0x08000d73
 8000bb4:	08000d73 	.word	0x08000d73
 8000bb8:	08000d73 	.word	0x08000d73
 8000bbc:	08000d73 	.word	0x08000d73
 8000bc0:	08000d73 	.word	0x08000d73
 8000bc4:	08000d73 	.word	0x08000d73
 8000bc8:	08000d73 	.word	0x08000d73
 8000bcc:	08000d73 	.word	0x08000d73
 8000bd0:	08000d73 	.word	0x08000d73
 8000bd4:	08000d73 	.word	0x08000d73
 8000bd8:	08000d73 	.word	0x08000d73
 8000bdc:	08000d73 	.word	0x08000d73
 8000be0:	08000d73 	.word	0x08000d73
 8000be4:	08000d73 	.word	0x08000d73
 8000be8:	08000d73 	.word	0x08000d73
 8000bec:	08000d73 	.word	0x08000d73
 8000bf0:	08000d73 	.word	0x08000d73
 8000bf4:	08000d73 	.word	0x08000d73
 8000bf8:	08000d73 	.word	0x08000d73
 8000bfc:	08000d73 	.word	0x08000d73
 8000c00:	08000d73 	.word	0x08000d73
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c7d 	.word	0x08000c7d
 8000c0c:	08000ca3 	.word	0x08000ca3
 8000c10:	08000d37 	.word	0x08000d37
 8000c14:	08000cc9 	.word	0x08000cc9
 8000c18:	08000d5b 	.word	0x08000d5b
 8000c1c:	08000d73 	.word	0x08000d73
 8000c20:	08000d73 	.word	0x08000d73
 8000c24:	08000d73 	.word	0x08000d73
 8000c28:	08000d73 	.word	0x08000d73
 8000c2c:	08000d73 	.word	0x08000d73
 8000c30:	08000d1f 	.word	0x08000d1f
 8000c34:	08000d73 	.word	0x08000d73
 8000c38:	08000d73 	.word	0x08000d73
 8000c3c:	08000d73 	.word	0x08000d73
 8000c40:	08000d73 	.word	0x08000d73
 8000c44:	08000d73 	.word	0x08000d73
 8000c48:	08000d73 	.word	0x08000d73
 8000c4c:	08000d73 	.word	0x08000d73
 8000c50:	08000cef 	.word	0x08000cef
                    case 'A':
                        snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	4a58      	ldr	r2, [pc, #352]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c58:	2107      	movs	r1, #7
 8000c5a:	4858      	ldr	r0, [pc, #352]	@ (8000dbc <KeyLogic+0x4bc>)
 8000c5c:	f005 fab4 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 8000c60:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c64:	4a54      	ldr	r2, [pc, #336]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c66:	2107      	movs	r1, #7
 8000c68:	4855      	ldr	r0, [pc, #340]	@ (8000dc0 <KeyLogic+0x4c0>)
 8000c6a:	f005 faad 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000c6e:	2300      	movs	r3, #0
 8000c70:	4a51      	ldr	r2, [pc, #324]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c72:	2107      	movs	r1, #7
 8000c74:	4853      	ldr	r0, [pc, #332]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c76:	f005 faa7 	bl	80061c8 <sniprintf>
                        break;
 8000c7a:	e093      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'B':
                        snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4a4e      	ldr	r2, [pc, #312]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c80:	2107      	movs	r1, #7
 8000c82:	484e      	ldr	r0, [pc, #312]	@ (8000dbc <KeyLogic+0x4bc>)
 8000c84:	f005 faa0 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000c88:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc8 <KeyLogic+0x4c8>)
 8000c8a:	4a4b      	ldr	r2, [pc, #300]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c8c:	2107      	movs	r1, #7
 8000c8e:	484c      	ldr	r0, [pc, #304]	@ (8000dc0 <KeyLogic+0x4c0>)
 8000c90:	f005 fa9a 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000c94:	2300      	movs	r3, #0
 8000c96:	4a48      	ldr	r2, [pc, #288]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c98:	2107      	movs	r1, #7
 8000c9a:	484a      	ldr	r0, [pc, #296]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000c9c:	f005 fa94 	bl	80061c8 <sniprintf>
                        break;
 8000ca0:	e080      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'C':
                        snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	4a44      	ldr	r2, [pc, #272]	@ (8000db8 <KeyLogic+0x4b8>)
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	4844      	ldr	r0, [pc, #272]	@ (8000dbc <KeyLogic+0x4bc>)
 8000caa:	f005 fa8d 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	4a41      	ldr	r2, [pc, #260]	@ (8000db8 <KeyLogic+0x4b8>)
 8000cb2:	2107      	movs	r1, #7
 8000cb4:	4842      	ldr	r0, [pc, #264]	@ (8000dc0 <KeyLogic+0x4c0>)
 8000cb6:	f005 fa87 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000cba:	2301      	movs	r3, #1
 8000cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8000db8 <KeyLogic+0x4b8>)
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	4840      	ldr	r0, [pc, #256]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000cc2:	f005 fa81 	bl	80061c8 <sniprintf>
                        break;
 8000cc6:	e06d      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'E':
                        snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000cc8:	2300      	movs	r3, #0
 8000cca:	4a3b      	ldr	r2, [pc, #236]	@ (8000db8 <KeyLogic+0x4b8>)
 8000ccc:	2107      	movs	r1, #7
 8000cce:	483b      	ldr	r0, [pc, #236]	@ (8000dbc <KeyLogic+0x4bc>)
 8000cd0:	f005 fa7a 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4a38      	ldr	r2, [pc, #224]	@ (8000db8 <KeyLogic+0x4b8>)
 8000cd8:	2107      	movs	r1, #7
 8000cda:	4839      	ldr	r0, [pc, #228]	@ (8000dc0 <KeyLogic+0x4c0>)
 8000cdc:	f005 fa74 	bl	80061c8 <sniprintf>
                        snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 100);
 8000ce0:	2364      	movs	r3, #100	@ 0x64
 8000ce2:	4a35      	ldr	r2, [pc, #212]	@ (8000db8 <KeyLogic+0x4b8>)
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	4837      	ldr	r0, [pc, #220]	@ (8000dc4 <KeyLogic+0x4c4>)
 8000ce8:	f005 fa6e 	bl	80061c8 <sniprintf>
                        break;
 8000cec:	e05a      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'T':
                        if (seqState == SEQ_IDLE) {
 8000cee:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <KeyLogic+0x4cc>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d103      	bne.n	8000cfe <KeyLogic+0x3fe>
                            seqState = SEQ_PRESSED_T;
 8000cf6:	4b35      	ldr	r3, [pc, #212]	@ (8000dcc <KeyLogic+0x4cc>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
                        } else {
                            seqState = SEQ_IDLE;
                        }
                        break;
 8000cfc:	e052      	b.n	8000da4 <KeyLogic+0x4a4>
                            seqState = SEQ_IDLE;
 8000cfe:	4b33      	ldr	r3, [pc, #204]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                        break;
 8000d04:	e04e      	b.n	8000da4 <KeyLogic+0x4a4>
                    case '$':
                        if (seqState == SEQ_PRESSED_T) {
 8000d06:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d103      	bne.n	8000d16 <KeyLogic+0x416>
                            seqState = SEQ_PRESSED_T_$;
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d10:	2203      	movs	r2, #3
 8000d12:	701a      	strb	r2, [r3, #0]
                        } else {
                            seqState = SEQ_IDLE;
                        }
                        break;
 8000d14:	e046      	b.n	8000da4 <KeyLogic+0x4a4>
                            seqState = SEQ_IDLE;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
                        break;
 8000d1c:	e042      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'L':
                        if (seqState == SEQ_PRESSED_T) {
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d103      	bne.n	8000d2e <KeyLogic+0x42e>
                            seqState = SEQ_PRESSED_T_L;
 8000d26:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	701a      	strb	r2, [r3, #0]
                        } else {
                            seqState = SEQ_IDLE;
                        }
                        break;
 8000d2c:	e03a      	b.n	8000da4 <KeyLogic+0x4a4>
                            seqState = SEQ_IDLE;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
                        break;
 8000d34:	e036      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'D':
                        if (seqState == SEQ_PRESSED_T) {
 8000d36:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d109      	bne.n	8000d52 <KeyLogic+0x452>
                            seqState = SEQ_ENTER_OLD_PASSWORD;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	701a      	strb	r2, [r3, #0]
                            numberOfDigits = 0;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
                            accumulatedNumber = 0;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
                        } else {
                            seqState = SEQ_IDLE;
                        }
                        break;
 8000d50:	e028      	b.n	8000da4 <KeyLogic+0x4a4>
                            seqState = SEQ_IDLE;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
                        break;
 8000d58:	e024      	b.n	8000da4 <KeyLogic+0x4a4>
                    case 'F':
                        if (seqState == SEQ_PRESSED_T) {
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d103      	bne.n	8000d6a <KeyLogic+0x46a>
                            seqState = SEQ_PRESSED_T_F4;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d64:	2205      	movs	r2, #5
 8000d66:	701a      	strb	r2, [r3, #0]
                        } else {
                            seqState = SEQ_IDLE;
                        }
                        break;
 8000d68:	e01c      	b.n	8000da4 <KeyLogic+0x4a4>
                            seqState = SEQ_IDLE;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
                        break;
 8000d70:	e018      	b.n	8000da4 <KeyLogic+0x4a4>
                    default:
                        if (keyPressed >= '0' && keyPressed <= '9') {
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d78:	d910      	bls.n	8000d9c <KeyLogic+0x49c>
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b39      	cmp	r3, #57	@ 0x39
 8000d80:	d80c      	bhi.n	8000d9c <KeyLogic+0x49c>
                            seqState = SEQ_NUMBER;
 8000d82:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d84:	2206      	movs	r2, #6
 8000d86:	701a      	strb	r2, [r3, #0]
                            accumulatedNumber = keyPressed - '0';
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3b30      	subs	r3, #48	@ 0x30
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000d92:	601a      	str	r2, [r3, #0]
                            numberOfDigits = 1;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
                        } else {
                            seqState = SEQ_IDLE;
                        }
                        break;
 8000d9a:	e002      	b.n	8000da2 <KeyLogic+0x4a2>
                            seqState = SEQ_IDLE;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <KeyLogic+0x4cc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
                        break;
 8000da2:	bf00      	nop
                }
                break;
 8000da4:	bf00      	nop
        }
        keyPressed = 0xFF; // Reset keyPressed after processing
 8000da6:	4b03      	ldr	r3, [pc, #12]	@ (8000db4 <KeyLogic+0x4b4>)
 8000da8:	22ff      	movs	r2, #255	@ 0xff
 8000daa:	701a      	strb	r2, [r3, #0]
    }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	08006bf4 	.word	0x08006bf4
 8000dbc:	20000020 	.word	0x20000020
 8000dc0:	20000027 	.word	0x20000027
 8000dc4:	2000002e 	.word	0x2000002e
 8000dc8:	000186a0 	.word	0x000186a0
 8000dcc:	200000dd 	.word	0x200000dd
 8000dd0:	200000d0 	.word	0x200000d0
 8000dd4:	200000cc 	.word	0x200000cc

08000dd8 <KeyLogic_Action>:

void KeyLogic_Action() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 8000dde:	4bb0      	ldr	r3, [pc, #704]	@ (80010a0 <KeyLogic_Action+0x2c8>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	f200 818a 	bhi.w	80010fc <KeyLogic_Action+0x324>
 8000de8:	a201      	add	r2, pc, #4	@ (adr r2, 8000df0 <KeyLogic_Action+0x18>)
 8000dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dee:	bf00      	nop
 8000df0:	08000e15 	.word	0x08000e15
 8000df4:	08000e3b 	.word	0x08000e3b
 8000df8:	08000eff 	.word	0x08000eff
 8000dfc:	08000e61 	.word	0x08000e61
 8000e00:	08000f97 	.word	0x08000f97
 8000e04:	08000fbd 	.word	0x08000fbd
 8000e08:	08000fe3 	.word	0x08000fe3
 8000e0c:	08001023 	.word	0x08001023
 8000e10:	08001061 	.word	0x08001061
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000e14:	2300      	movs	r3, #0
 8000e16:	4aa3      	ldr	r2, [pc, #652]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	48a3      	ldr	r0, [pc, #652]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000e1c:	f005 f9d4 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000e20:	2300      	movs	r3, #0
 8000e22:	4aa0      	ldr	r2, [pc, #640]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000e24:	2107      	movs	r1, #7
 8000e26:	48a1      	ldr	r0, [pc, #644]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8000e28:	f005 f9ce 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4a9d      	ldr	r2, [pc, #628]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	489f      	ldr	r0, [pc, #636]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8000e34:	f005 f9c8 	bl	80061c8 <sniprintf>
            break;
 8000e38:	e173      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	4a99      	ldr	r2, [pc, #612]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000e3e:	2107      	movs	r1, #7
 8000e40:	4899      	ldr	r0, [pc, #612]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000e42:	f005 f9c1 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000e46:	2300      	movs	r3, #0
 8000e48:	4a96      	ldr	r2, [pc, #600]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	4897      	ldr	r0, [pc, #604]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8000e4e:	f005 f9bb 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000e52:	4b98      	ldr	r3, [pc, #608]	@ (80010b4 <KeyLogic_Action+0x2dc>)
 8000e54:	4a93      	ldr	r2, [pc, #588]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000e56:	2107      	movs	r1, #7
 8000e58:	4895      	ldr	r0, [pc, #596]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8000e5a:	f005 f9b5 	bl	80061c8 <sniprintf>
            break;
 8000e5e:	e160      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8000e60:	4b95      	ldr	r3, [pc, #596]	@ (80010b8 <KeyLogic_Action+0x2e0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a95      	ldr	r2, [pc, #596]	@ (80010bc <KeyLogic_Action+0x2e4>)
 8000e66:	4996      	ldr	r1, [pc, #600]	@ (80010c0 <KeyLogic_Action+0x2e8>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fd11 	bl	8000890 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8000e6e:	4b94      	ldr	r3, [pc, #592]	@ (80010c0 <KeyLogic_Action+0x2e8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f107 0018 	add.w	r0, r7, #24
 8000e76:	4a93      	ldr	r2, [pc, #588]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 8000e78:	2107      	movs	r1, #7
 8000e7a:	f005 f9a5 	bl	80061c8 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8000e7e:	4b90      	ldr	r3, [pc, #576]	@ (80010c0 <KeyLogic_Action+0x2e8>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b91      	ldr	r3, [pc, #580]	@ (80010c8 <KeyLogic_Action+0x2f0>)
 8000e84:	fba3 1302 	umull	r1, r3, r3, r2
 8000e88:	0b5b      	lsrs	r3, r3, #13
 8000e8a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000e8e:	fb01 f303 	mul.w	r3, r1, r3
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f107 0010 	add.w	r0, r7, #16
 8000e98:	4a8c      	ldr	r2, [pc, #560]	@ (80010cc <KeyLogic_Action+0x2f4>)
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	f005 f994 	bl	80061c8 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ea4:	e01b      	b.n	8000ede <KeyLogic_Action+0x106>
				if (i < strlen(combinedStrShift)) {
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff f998 	bl	80001e0 <strlen>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d90a      	bls.n	8000ece <KeyLogic_Action+0xf6>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000eb8:	f107 0210 	add.w	r2, r7, #16
 8000ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ebe:	4413      	add	r3, r2
 8000ec0:	7819      	ldrb	r1, [r3, #0]
 8000ec2:	4a79      	ldr	r2, [pc, #484]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec6:	4413      	add	r3, r2
 8000ec8:	460a      	mov	r2, r1
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	e004      	b.n	8000ed8 <KeyLogic_Action+0x100>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000ece:	4a76      	ldr	r2, [pc, #472]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed2:	4413      	add	r3, r2
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8000ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eda:	3301      	adds	r3, #1
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	dde0      	ble.n	8000ea6 <KeyLogic_Action+0xce>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000ee4:	4b75      	ldr	r3, [pc, #468]	@ (80010bc <KeyLogic_Action+0x2e4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a76      	ldr	r2, [pc, #472]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 8000eea:	2107      	movs	r1, #7
 8000eec:	486f      	ldr	r0, [pc, #444]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8000eee:	f005 f96b 	bl	80061c8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8000ef2:	4a77      	ldr	r2, [pc, #476]	@ (80010d0 <KeyLogic_Action+0x2f8>)
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	486e      	ldr	r0, [pc, #440]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8000ef8:	f005 f966 	bl	80061c8 <sniprintf>

            break;
 8000efc:	e111      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8000efe:	4b75      	ldr	r3, [pc, #468]	@ (80010d4 <KeyLogic_Action+0x2fc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a6e      	ldr	r2, [pc, #440]	@ (80010bc <KeyLogic_Action+0x2e4>)
 8000f04:	496e      	ldr	r1, [pc, #440]	@ (80010c0 <KeyLogic_Action+0x2e8>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc74 	bl	80007f4 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8000f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80010c0 <KeyLogic_Action+0x2e8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f107 0008 	add.w	r0, r7, #8
 8000f14:	4a6b      	ldr	r2, [pc, #428]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 8000f16:	2107      	movs	r1, #7
 8000f18:	f005 f956 	bl	80061c8 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8000f1c:	4b68      	ldr	r3, [pc, #416]	@ (80010c0 <KeyLogic_Action+0x2e8>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b69      	ldr	r3, [pc, #420]	@ (80010c8 <KeyLogic_Action+0x2f0>)
 8000f22:	fba3 1302 	umull	r1, r3, r3, r2
 8000f26:	0b5b      	lsrs	r3, r3, #13
 8000f28:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000f2c:	fb01 f303 	mul.w	r3, r1, r3
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	4638      	mov	r0, r7
 8000f34:	4a68      	ldr	r2, [pc, #416]	@ (80010d8 <KeyLogic_Action+0x300>)
 8000f36:	2108      	movs	r1, #8
 8000f38:	f005 f946 	bl	80061c8 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f40:	e019      	b.n	8000f76 <KeyLogic_Action+0x19e>
                if (i < strlen(combinedStr)) {
 8000f42:	463b      	mov	r3, r7
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff f94b 	bl	80001e0 <strlen>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d909      	bls.n	8000f66 <KeyLogic_Action+0x18e>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8000f52:	463a      	mov	r2, r7
 8000f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f56:	4413      	add	r3, r2
 8000f58:	7819      	ldrb	r1, [r3, #0]
 8000f5a:	4a53      	ldr	r2, [pc, #332]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5e:	4413      	add	r3, r2
 8000f60:	460a      	mov	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e004      	b.n	8000f70 <KeyLogic_Action+0x198>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000f66:	4a50      	ldr	r2, [pc, #320]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8000f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f72:	3301      	adds	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	dde2      	ble.n	8000f42 <KeyLogic_Action+0x16a>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80010bc <KeyLogic_Action+0x2e4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a50      	ldr	r2, [pc, #320]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 8000f82:	2107      	movs	r1, #7
 8000f84:	4849      	ldr	r0, [pc, #292]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8000f86:	f005 f91f 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 8000f8a:	4a54      	ldr	r2, [pc, #336]	@ (80010dc <KeyLogic_Action+0x304>)
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	4848      	ldr	r0, [pc, #288]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8000f90:	f005 f91a 	bl	80061c8 <sniprintf>



            break;
 8000f94:	e0c5      	b.n	8001122 <KeyLogic_Action+0x34a>



        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8000f96:	4b52      	ldr	r3, [pc, #328]	@ (80010e0 <KeyLogic_Action+0x308>)
 8000f98:	4a42      	ldr	r2, [pc, #264]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000f9a:	2107      	movs	r1, #7
 8000f9c:	4842      	ldr	r0, [pc, #264]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000f9e:	f005 f913 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000fa6:	2107      	movs	r1, #7
 8000fa8:	4840      	ldr	r0, [pc, #256]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8000faa:	f005 f90d 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000fb2:	2107      	movs	r1, #7
 8000fb4:	483e      	ldr	r0, [pc, #248]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8000fb6:	f005 f907 	bl	80061c8 <sniprintf>
            break;
 8000fba:	e0b2      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 8000fbc:	4b49      	ldr	r3, [pc, #292]	@ (80010e4 <KeyLogic_Action+0x30c>)
 8000fbe:	4a39      	ldr	r2, [pc, #228]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000fc0:	2107      	movs	r1, #7
 8000fc2:	4839      	ldr	r0, [pc, #228]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000fc4:	f005 f900 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4a36      	ldr	r2, [pc, #216]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000fcc:	2107      	movs	r1, #7
 8000fce:	4837      	ldr	r0, [pc, #220]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8000fd0:	f005 f8fa 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4a33      	ldr	r2, [pc, #204]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	4835      	ldr	r0, [pc, #212]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8000fdc:	f005 f8f4 	bl	80061c8 <sniprintf>
            break;
 8000fe0:	e09f      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_NUMBER:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000fe2:	4b41      	ldr	r3, [pc, #260]	@ (80010e8 <KeyLogic_Action+0x310>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 0020 	add.w	r0, r7, #32
 8000fea:	4a36      	ldr	r2, [pc, #216]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 8000fec:	2107      	movs	r1, #7
 8000fee:	f005 f8eb 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ec <KeyLogic_Action+0x314>)
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	482b      	ldr	r0, [pc, #172]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 8000ffc:	f005 f8e4 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001000:	2300      	movs	r3, #0
 8001002:	4a28      	ldr	r2, [pc, #160]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8001004:	2107      	movs	r1, #7
 8001006:	4829      	ldr	r0, [pc, #164]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8001008:	f005 f8de 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800100c:	2300      	movs	r3, #0
 800100e:	4a25      	ldr	r2, [pc, #148]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8001010:	2107      	movs	r1, #7
 8001012:	4827      	ldr	r0, [pc, #156]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8001014:	f005 f8d8 	bl	80061c8 <sniprintf>
            LEDPointFlag = -1;
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <KeyLogic_Action+0x318>)
 800101a:	f04f 32ff 	mov.w	r2, #4294967295
 800101e:	601a      	str	r2, [r3, #0]
            break;
 8001020:	e07f      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001022:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <KeyLogic_Action+0x310>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f107 0020 	add.w	r0, r7, #32
 800102a:	4a26      	ldr	r2, [pc, #152]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 800102c:	2107      	movs	r1, #7
 800102e:	f005 f8cb 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	4a2d      	ldr	r2, [pc, #180]	@ (80010ec <KeyLogic_Action+0x314>)
 8001038:	2107      	movs	r1, #7
 800103a:	481b      	ldr	r0, [pc, #108]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 800103c:	f005 f8c4 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8001040:	4a2c      	ldr	r2, [pc, #176]	@ (80010f4 <KeyLogic_Action+0x31c>)
 8001042:	2107      	movs	r1, #7
 8001044:	4819      	ldr	r0, [pc, #100]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8001046:	f005 f8bf 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800104a:	2300      	movs	r3, #0
 800104c:	4a15      	ldr	r2, [pc, #84]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 800104e:	2107      	movs	r1, #7
 8001050:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8001052:	f005 f8b9 	bl	80061c8 <sniprintf>
            LEDPointFlag = -1;
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <KeyLogic_Action+0x318>)
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	601a      	str	r2, [r3, #0]
            break;
 800105e:	e060      	b.n	8001122 <KeyLogic_Action+0x34a>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <KeyLogic_Action+0x310>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f107 0020 	add.w	r0, r7, #32
 8001068:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <KeyLogic_Action+0x2ec>)
 800106a:	2107      	movs	r1, #7
 800106c:	f005 f8ac 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <KeyLogic_Action+0x314>)
 8001076:	2107      	movs	r1, #7
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <KeyLogic_Action+0x2d0>)
 800107a:	f005 f8a5 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800107e:	2300      	movs	r3, #0
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <KeyLogic_Action+0x2cc>)
 8001082:	2107      	movs	r1, #7
 8001084:	4809      	ldr	r0, [pc, #36]	@ (80010ac <KeyLogic_Action+0x2d4>)
 8001086:	f005 f89f 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 800108a:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <KeyLogic_Action+0x320>)
 800108c:	2107      	movs	r1, #7
 800108e:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <KeyLogic_Action+0x2d8>)
 8001090:	f005 f89a 	bl	80061c8 <sniprintf>
            LEDPointFlag = -1;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <KeyLogic_Action+0x318>)
 8001096:	f04f 32ff 	mov.w	r2, #4294967295
 800109a:	601a      	str	r2, [r3, #0]
            break;
 800109c:	e041      	b.n	8001122 <KeyLogic_Action+0x34a>
 800109e:	bf00      	nop
 80010a0:	200000dd 	.word	0x200000dd
 80010a4:	08006bf4 	.word	0x08006bf4
 80010a8:	20000020 	.word	0x20000020
 80010ac:	20000027 	.word	0x20000027
 80010b0:	2000002e 	.word	0x2000002e
 80010b4:	000f423f 	.word	0x000f423f
 80010b8:	20000040 	.word	0x20000040
 80010bc:	200000d8 	.word	0x200000d8
 80010c0:	200000d4 	.word	0x200000d4
 80010c4:	08006bfc 	.word	0x08006bfc
 80010c8:	d1b71759 	.word	0xd1b71759
 80010cc:	08006c04 	.word	0x08006c04
 80010d0:	08006c10 	.word	0x08006c10
 80010d4:	2000003c 	.word	0x2000003c
 80010d8:	08006c18 	.word	0x08006c18
 80010dc:	08006c20 	.word	0x08006c20
 80010e0:	00051615 	.word	0x00051615
 80010e4:	0006c81c 	.word	0x0006c81c
 80010e8:	200000cc 	.word	0x200000cc
 80010ec:	08006c28 	.word	0x08006c28
 80010f0:	20000044 	.word	0x20000044
 80010f4:	08006c2c 	.word	0x08006c2c
 80010f8:	08006c34 	.word	0x08006c34
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80010fc:	2300      	movs	r3, #0
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <KeyLogic_Action+0x354>)
 8001100:	2107      	movs	r1, #7
 8001102:	480b      	ldr	r0, [pc, #44]	@ (8001130 <KeyLogic_Action+0x358>)
 8001104:	f005 f860 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001108:	2300      	movs	r3, #0
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <KeyLogic_Action+0x354>)
 800110c:	2107      	movs	r1, #7
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <KeyLogic_Action+0x35c>)
 8001110:	f005 f85a 	bl	80061c8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001114:	2300      	movs	r3, #0
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <KeyLogic_Action+0x354>)
 8001118:	2107      	movs	r1, #7
 800111a:	4807      	ldr	r0, [pc, #28]	@ (8001138 <KeyLogic_Action+0x360>)
 800111c:	f005 f854 	bl	80061c8 <sniprintf>
            break;
 8001120:	bf00      	nop
    }
}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08006bf4 	.word	0x08006bf4
 8001130:	20000020 	.word	0x20000020
 8001134:	20000027 	.word	0x20000027
 8001138:	2000002e 	.word	0x2000002e

0800113c <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b2f      	cmp	r3, #47	@ 0x2f
 800114a:	d907      	bls.n	800115c <CharToSegment+0x20>
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b39      	cmp	r3, #57	@ 0x39
 8001150:	d804      	bhi.n	800115c <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	3b30      	subs	r3, #48	@ 0x30
 8001156:	4a2c      	ldr	r2, [pc, #176]	@ (8001208 <CharToSegment+0xcc>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	e04e      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'L') {
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001160:	d102      	bne.n	8001168 <CharToSegment+0x2c>
        return specialCharMap[0];
 8001162:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <CharToSegment+0xd0>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	e048      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == '.') {
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b2e      	cmp	r3, #46	@ 0x2e
 800116c:	d102      	bne.n	8001174 <CharToSegment+0x38>
        return specialCharMap[1];
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <CharToSegment+0xd0>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	e042      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'T') {
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2b54      	cmp	r3, #84	@ 0x54
 8001178:	d102      	bne.n	8001180 <CharToSegment+0x44>
        return specialCharMap[2];
 800117a:	4b24      	ldr	r3, [pc, #144]	@ (800120c <CharToSegment+0xd0>)
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	e03c      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'O') {
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b4f      	cmp	r3, #79	@ 0x4f
 8001184:	d102      	bne.n	800118c <CharToSegment+0x50>
        return specialCharMap[3];
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <CharToSegment+0xd0>)
 8001188:	78db      	ldrb	r3, [r3, #3]
 800118a:	e036      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'A') {
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b41      	cmp	r3, #65	@ 0x41
 8001190:	d102      	bne.n	8001198 <CharToSegment+0x5c>
        return specialCharMap[4];
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <CharToSegment+0xd0>)
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	e030      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'S') {
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b53      	cmp	r3, #83	@ 0x53
 800119c:	d102      	bne.n	80011a4 <CharToSegment+0x68>
        return specialCharMap[5];
 800119e:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <CharToSegment+0xd0>)
 80011a0:	795b      	ldrb	r3, [r3, #5]
 80011a2:	e02a      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'H') {
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	2b48      	cmp	r3, #72	@ 0x48
 80011a8:	d102      	bne.n	80011b0 <CharToSegment+0x74>
        return specialCharMap[6];
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <CharToSegment+0xd0>)
 80011ac:	799b      	ldrb	r3, [r3, #6]
 80011ae:	e024      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'I') {
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b49      	cmp	r3, #73	@ 0x49
 80011b4:	d102      	bne.n	80011bc <CharToSegment+0x80>
        return specialCharMap[7];
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <CharToSegment+0xd0>)
 80011b8:	79db      	ldrb	r3, [r3, #7]
 80011ba:	e01e      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'F') {
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b46      	cmp	r3, #70	@ 0x46
 80011c0:	d102      	bne.n	80011c8 <CharToSegment+0x8c>
        return specialCharMap[8];
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <CharToSegment+0xd0>)
 80011c4:	7a1b      	ldrb	r3, [r3, #8]
 80011c6:	e018      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'C') {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b43      	cmp	r3, #67	@ 0x43
 80011cc:	d102      	bne.n	80011d4 <CharToSegment+0x98>
        return specialCharMap[9];
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <CharToSegment+0xd0>)
 80011d0:	7a5b      	ldrb	r3, [r3, #9]
 80011d2:	e012      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'E') {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b45      	cmp	r3, #69	@ 0x45
 80011d8:	d102      	bne.n	80011e0 <CharToSegment+0xa4>
        return specialCharMap[10];
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <CharToSegment+0xd0>)
 80011dc:	7a9b      	ldrb	r3, [r3, #10]
 80011de:	e00c      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'U') {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b55      	cmp	r3, #85	@ 0x55
 80011e4:	d102      	bne.n	80011ec <CharToSegment+0xb0>
        return specialCharMap[11];
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <CharToSegment+0xd0>)
 80011e8:	7adb      	ldrb	r3, [r3, #11]
 80011ea:	e006      	b.n	80011fa <CharToSegment+0xbe>
    } else if (c == 'N') {
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80011f0:	d102      	bne.n	80011f8 <CharToSegment+0xbc>
        return specialCharMap[12];
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <CharToSegment+0xd0>)
 80011f4:	7b1b      	ldrb	r3, [r3, #12]
 80011f6:	e000      	b.n	80011fa <CharToSegment+0xbe>
    } else {
        return 0b11111111; // Blank
 80011f8:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000004 	.word	0x20000004
 800120c:	20000010 	.word	0x20000010

08001210 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e035      	b.n	800128e <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ffd6 	bl	80001e0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d81f      	bhi.n	800127e <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	dd15      	ble.n	8001272 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	441a      	add	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1e59      	subs	r1, r3, #1
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff6d 	bl	800113c <CharToSegment>
 8001262:	4603      	mov	r3, r0
 8001264:	4619      	mov	r1, r3
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <SevenSegLEDsHandler+0x90>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	460a      	mov	r2, r1
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e00a      	b.n	8001288 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <SevenSegLEDsHandler+0x90>)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	22ff      	movs	r2, #255	@ 0xff
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	e004      	b.n	8001288 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <SevenSegLEDsHandler+0x90>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	22ff      	movs	r2, #255	@ 0xff
 8001286:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b02      	cmp	r3, #2
 8001292:	ddc6      	ble.n	8001222 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8001294:	4b02      	ldr	r3, [pc, #8]	@ (80012a0 <SevenSegLEDsHandler+0x90>)
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000ec 	.word	0x200000ec

080012a4 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
 80012b0:	4613      	mov	r3, r2
 80012b2:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	4619      	mov	r1, r3
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffa9 	bl	8001210 <SevenSegLEDsHandler>
 80012be:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	d820      	bhi.n	8001308 <UpdateDisplayBuffer+0x64>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <UpdateDisplayBuffer+0x28>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012e5 	.word	0x080012e5
 80012d0:	080012eb 	.word	0x080012eb
 80012d4:	080012f1 	.word	0x080012f1
 80012d8:	080012f7 	.word	0x080012f7
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	08001303 	.word	0x08001303
        case 0:
            curr_scan = 0b11111110;
 80012e4:	23fe      	movs	r3, #254	@ 0xfe
 80012e6:	73fb      	strb	r3, [r7, #15]
            break;
 80012e8:	e011      	b.n	800130e <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 80012ea:	23fd      	movs	r3, #253	@ 0xfd
 80012ec:	73fb      	strb	r3, [r7, #15]
            break;
 80012ee:	e00e      	b.n	800130e <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 80012f0:	23fb      	movs	r3, #251	@ 0xfb
 80012f2:	73fb      	strb	r3, [r7, #15]
            break;
 80012f4:	e00b      	b.n	800130e <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 80012f6:	23f7      	movs	r3, #247	@ 0xf7
 80012f8:	73fb      	strb	r3, [r7, #15]
            break;
 80012fa:	e008      	b.n	800130e <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 80012fc:	23ef      	movs	r3, #239	@ 0xef
 80012fe:	73fb      	strb	r3, [r7, #15]
            break;
 8001300:	e005      	b.n	800130e <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8001302:	23df      	movs	r3, #223	@ 0xdf
 8001304:	73fb      	strb	r3, [r7, #15]
            break;
 8001306:	e002      	b.n	800130e <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8001308:	23ff      	movs	r3, #255	@ 0xff
 800130a:	73fb      	strb	r3, [r7, #15]
            break;
 800130c:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 800130e:	4b57      	ldr	r3, [pc, #348]	@ (800146c <UpdateDisplayBuffer+0x1c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db72      	blt.n	80013fc <UpdateDisplayBuffer+0x158>
 8001316:	4b55      	ldr	r3, [pc, #340]	@ (800146c <UpdateDisplayBuffer+0x1c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b05      	cmp	r3, #5
 800131c:	dc6e      	bgt.n	80013fc <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	4b52      	ldr	r3, [pc, #328]	@ (800146c <UpdateDisplayBuffer+0x1c8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d136      	bne.n	8001396 <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001328:	78ba      	ldrb	r2, [r7, #2]
 800132a:	4951      	ldr	r1, [pc, #324]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	440b      	add	r3, r1
 8001334:	22ff      	movs	r2, #255	@ 0xff
 8001336:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001338:	78ba      	ldrb	r2, [r7, #2]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	7898      	ldrb	r0, [r3, #2]
 800133e:	494c      	ldr	r1, [pc, #304]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	440b      	add	r3, r1
 8001348:	3301      	adds	r3, #1
 800134a:	4602      	mov	r2, r0
 800134c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 800134e:	78ba      	ldrb	r2, [r7, #2]
 8001350:	4947      	ldr	r1, [pc, #284]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	440b      	add	r3, r1
 800135a:	3302      	adds	r3, #2
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	3301      	adds	r3, #1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	78ba      	ldrb	r2, [r7, #2]
 8001368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800136c:	b2d8      	uxtb	r0, r3
 800136e:	4940      	ldr	r1, [pc, #256]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	440b      	add	r3, r1
 8001378:	3303      	adds	r3, #3
 800137a:	4602      	mov	r2, r0
 800137c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 800137e:	78ba      	ldrb	r2, [r7, #2]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	7818      	ldrb	r0, [r3, #0]
 8001384:	493a      	ldr	r1, [pc, #232]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	440b      	add	r3, r1
 800138e:	3304      	adds	r3, #4
 8001390:	4602      	mov	r2, r0
 8001392:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 8001394:	e065      	b.n	8001462 <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001396:	78ba      	ldrb	r2, [r7, #2]
 8001398:	4935      	ldr	r1, [pc, #212]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 80013a6:	78ba      	ldrb	r2, [r7, #2]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	7898      	ldrb	r0, [r3, #2]
 80013ac:	4930      	ldr	r1, [pc, #192]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	3301      	adds	r3, #1
 80013b8:	4602      	mov	r2, r0
 80013ba:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 80013bc:	78ba      	ldrb	r2, [r7, #2]
 80013be:	492c      	ldr	r1, [pc, #176]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	3302      	adds	r3, #2
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 80013ce:	78ba      	ldrb	r2, [r7, #2]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	7858      	ldrb	r0, [r3, #1]
 80013d4:	4926      	ldr	r1, [pc, #152]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	440b      	add	r3, r1
 80013de:	3303      	adds	r3, #3
 80013e0:	4602      	mov	r2, r0
 80013e2:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 80013e4:	78ba      	ldrb	r2, [r7, #2]
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	7818      	ldrb	r0, [r3, #0]
 80013ea:	4921      	ldr	r1, [pc, #132]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	3304      	adds	r3, #4
 80013f6:	4602      	mov	r2, r0
 80013f8:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80013fa:	e032      	b.n	8001462 <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80013fc:	78ba      	ldrb	r2, [r7, #2]
 80013fe:	491c      	ldr	r1, [pc, #112]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	440b      	add	r3, r1
 8001408:	22ff      	movs	r2, #255	@ 0xff
 800140a:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 800140c:	78ba      	ldrb	r2, [r7, #2]
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	7898      	ldrb	r0, [r3, #2]
 8001412:	4917      	ldr	r1, [pc, #92]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	440b      	add	r3, r1
 800141c:	3301      	adds	r3, #1
 800141e:	4602      	mov	r2, r0
 8001420:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 8001422:	78ba      	ldrb	r2, [r7, #2]
 8001424:	4912      	ldr	r1, [pc, #72]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	440b      	add	r3, r1
 800142e:	3302      	adds	r3, #2
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 8001434:	78ba      	ldrb	r2, [r7, #2]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	7858      	ldrb	r0, [r3, #1]
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	440b      	add	r3, r1
 8001444:	3303      	adds	r3, #3
 8001446:	4602      	mov	r2, r0
 8001448:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 800144a:	78ba      	ldrb	r2, [r7, #2]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	7818      	ldrb	r0, [r3, #0]
 8001450:	4907      	ldr	r1, [pc, #28]	@ (8001470 <UpdateDisplayBuffer+0x1cc>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	440b      	add	r3, r1
 800145a:	3304      	adds	r3, #4
 800145c:	4602      	mov	r2, r0
 800145e:	701a      	strb	r2, [r3, #0]
    }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000044 	.word	0x20000044
 8001470:	200000e0 	.word	0x200000e0

08001474 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <SevenSegLEDsScan+0x7c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	bfb8      	it	lt
 800148a:	425b      	neglt	r3, r3
 800148c:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <SevenSegLEDsScan+0x80>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	4619      	mov	r1, r3
 8001498:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <SevenSegLEDsScan+0x84>)
 800149a:	f7ff ff03 	bl	80012a4 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149e:	b672      	cpsid	i
}
 80014a0:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <SevenSegLEDsScan+0x7c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <SevenSegLEDsScan+0x88>)
 80014b2:	4413      	add	r3, r2
 80014b4:	2105      	movs	r1, #5
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f824 	bl	8001504 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <SevenSegLEDsScan+0x7c>)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014c2:	b662      	cpsie	i
}
 80014c4:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <SevenSegLEDsScan+0x80>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <SevenSegLEDsScan+0x8c>)
 80014d0:	fb83 3102 	smull	r3, r1, r3, r2
 80014d4:	17d3      	asrs	r3, r2, #31
 80014d6:	1ac9      	subs	r1, r1, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	440b      	add	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	1ad1      	subs	r1, r2, r3
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <SevenSegLEDsScan+0x80>)
 80014e6:	701a      	strb	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200000ea 	.word	0x200000ea
 80014f4:	200000de 	.word	0x200000de
 80014f8:	20000020 	.word	0x20000020
 80014fc:	200000e0 	.word	0x200000e0
 8001500:	2aaaaaab 	.word	0x2aaaaaab

08001504 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001514:	4823      	ldr	r0, [pc, #140]	@ (80015a4 <ShiftOut_SPI+0xa0>)
 8001516:	f000 fead 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	4822      	ldr	r0, [pc, #136]	@ (80015a8 <ShiftOut_SPI+0xa4>)
 8001520:	f000 fea8 	bl	8002274 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e003      	b.n	8001532 <ShiftOut_SPI+0x2e>
 800152a:	bf00      	nop
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001538:	dbf7      	blt.n	800152a <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800153a:	bf00      	nop
 800153c:	481b      	ldr	r0, [pc, #108]	@ (80015ac <ShiftOut_SPI+0xa8>)
 800153e:	f001 fcf5 	bl	8002f2c <HAL_SPI_GetState>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d1f9      	bne.n	800153c <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b29a      	uxth	r2, r3
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4816      	ldr	r0, [pc, #88]	@ (80015ac <ShiftOut_SPI+0xa8>)
 8001554:	f001 fba7 	bl	8002ca6 <HAL_SPI_Transmit>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 800155e:	f000 f9e5 	bl	800192c <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	e003      	b.n	8001570 <ShiftOut_SPI+0x6c>
 8001568:	bf00      	nop
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001576:	dbf7      	blt.n	8001568 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001578:	bf00      	nop
 800157a:	480c      	ldr	r0, [pc, #48]	@ (80015ac <ShiftOut_SPI+0xa8>)
 800157c:	f001 fcd6 	bl	8002f2c <HAL_SPI_GetState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d1f9      	bne.n	800157a <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <ShiftOut_SPI+0xa0>)
 800158e:	f000 fe71 	bl	8002274 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <ShiftOut_SPI+0xa4>)
 8001598:	f000 fe6c 	bl	8002274 <HAL_GPIO_WritePin>

}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	200000f0 	.word	0x200000f0

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f000 fb9e 	bl	8001cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f828 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f000 f8fa 	bl	80017b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015c0:	f000 f88c 	bl	80016dc <MX_SPI1_Init>
  MX_SPI2_Init();
 80015c4:	f000 f8c0 	bl	8001748 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015c8:	f002 f852 	bl	8003670 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80015cc:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <main+0x44>)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <main+0x48>)
 80015d2:	f002 f897 	bl	8003704 <osThreadNew>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <main+0x4c>)
 80015da:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80015dc:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <main+0x50>)
 80015de:	2100      	movs	r1, #0
 80015e0:	4808      	ldr	r0, [pc, #32]	@ (8001604 <main+0x54>)
 80015e2:	f002 f88f 	bl	8003704 <osThreadNew>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <main+0x58>)
 80015ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015ec:	f002 f864 	bl	80036b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <main+0x40>
 80015f4:	08006c78 	.word	0x08006c78
 80015f8:	080018b9 	.word	0x080018b9
 80015fc:	200001a0 	.word	0x200001a0
 8001600:	08006c9c 	.word	0x08006c9c
 8001604:	080018f5 	.word	0x080018f5
 8001608:	200001a4 	.word	0x200001a4

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	@ 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	@ 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f004 fe08 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <SystemClock_Config+0xc8>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <SystemClock_Config+0xc8>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001640:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <SystemClock_Config+0xc8>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <SystemClock_Config+0xcc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <SystemClock_Config+0xcc>)
 8001656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <SystemClock_Config+0xcc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001670:	2310      	movs	r3, #16
 8001672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800167c:	2308      	movs	r3, #8
 800167e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001680:	2364      	movs	r3, #100	@ 0x64
 8001682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001684:	2302      	movs	r3, #2
 8001686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001688:	2304      	movs	r3, #4
 800168a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168c:	f107 0320 	add.w	r3, r7, #32
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fe09 	bl	80022a8 <HAL_RCC_OscConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800169c:	f000 f946 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a0:	230f      	movs	r3, #15
 80016a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a4:	2302      	movs	r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2103      	movs	r1, #3
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 f86b 	bl	8002798 <HAL_RCC_ClockConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016c8:	f000 f930 	bl	800192c <Error_Handler>
  }
}
 80016cc:	bf00      	nop
 80016ce:	3750      	adds	r7, #80	@ 0x50
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016e2:	4a18      	ldr	r2, [pc, #96]	@ (8001744 <MX_SPI1_Init+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001710:	2220      	movs	r2, #32
 8001712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_SPI1_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001728:	220a      	movs	r2, #10
 800172a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <MX_SPI1_Init+0x64>)
 800172e:	f001 fa31 	bl	8002b94 <HAL_SPI_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001738:	f000 f8f8 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000f0 	.word	0x200000f0
 8001744:	40013000 	.word	0x40013000

08001748 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_SPI2_Init+0x64>)
 800174e:	4a18      	ldr	r2, [pc, #96]	@ (80017b0 <MX_SPI2_Init+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001754:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001758:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_SPI2_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_SPI2_Init+0x64>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001778:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <MX_SPI2_Init+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001780:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <MX_SPI2_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_SPI2_Init+0x64>)
 8001794:	220a      	movs	r2, #10
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_SPI2_Init+0x64>)
 800179a:	f001 f9fb 	bl	8002b94 <HAL_SPI_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017a4:	f000 f8c2 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000148 	.word	0x20000148
 80017b0:	40003800 	.word	0x40003800

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <MX_GPIO_Init+0xf8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a36      	ldr	r2, [pc, #216]	@ (80018ac <MX_GPIO_Init+0xf8>)
 80017d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <MX_GPIO_Init+0xf8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <MX_GPIO_Init+0xf8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a2f      	ldr	r2, [pc, #188]	@ (80018ac <MX_GPIO_Init+0xf8>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <MX_GPIO_Init+0xf8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <MX_GPIO_Init+0xf8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a28      	ldr	r2, [pc, #160]	@ (80018ac <MX_GPIO_Init+0xf8>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <MX_GPIO_Init+0xf8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <MX_GPIO_Init+0xf8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <MX_GPIO_Init+0xf8>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <MX_GPIO_Init+0xf8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800183a:	2200      	movs	r2, #0
 800183c:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8001840:	481b      	ldr	r0, [pc, #108]	@ (80018b0 <MX_GPIO_Init+0xfc>)
 8001842:	f000 fd17 	bl	8002274 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2180      	movs	r1, #128	@ 0x80
 800184a:	481a      	ldr	r0, [pc, #104]	@ (80018b4 <MX_GPIO_Init+0x100>)
 800184c:	f000 fd12 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001850:	231f      	movs	r3, #31
 8001852:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001858:	2301      	movs	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4813      	ldr	r0, [pc, #76]	@ (80018b0 <MX_GPIO_Init+0xfc>)
 8001864:	f000 fb6a 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001868:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 800186c:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <MX_GPIO_Init+0xfc>)
 8001882:	f000 fb5b 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <MX_GPIO_Init+0x100>)
 800189e:	f000 fb4d 	bl	8001f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800

080018b8 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 80018c0:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <Led3x6Run+0x38>)
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ca:	6018      	str	r0, [r3, #0]
 80018cc:	3304      	adds	r3, #4
 80018ce:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 80018d0:	f7ff fdd0 	bl	8001474 <SevenSegLEDsScan>
	  osDelay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f001 ffa7 	bl	8003828 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2105      	movs	r1, #5
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe0f 	bl	8001504 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f001 ff9e 	bl	8003828 <osDelay>
	  SevenSegLEDsScan();
 80018ec:	bf00      	nop
 80018ee:	e7ef      	b.n	80018d0 <Led3x6Run+0x18>
 80018f0:	08006c58 	.word	0x08006c58

080018f4 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 80018fc:	f7ff f800 	bl	8000900 <KeyLogic>
	 KeyLogic_Action();
 8001900:	f7ff fa6a 	bl	8000dd8 <KeyLogic_Action>
	 osDelay(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f001 ff8f 	bl	8003828 <osDelay>
	 KeyLogic();
 800190a:	bf00      	nop
 800190c:	e7f6      	b.n	80018fc <KeyPad4x5Run+0x8>

0800190e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191e:	d101      	bne.n	8001924 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001920:	f000 fa0a 	bl	8001d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <Error_Handler+0x8>

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_MspInit+0x54>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a11      	ldr	r2, [pc, #68]	@ (800198c <HAL_MspInit+0x54>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <HAL_MspInit+0x54>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_MspInit+0x54>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_MspInit+0x54>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_MspInit+0x54>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	210f      	movs	r1, #15
 800197a:	f06f 0001 	mvn.w	r0, #1
 800197e:	f000 fab3 	bl	8001ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a41      	ldr	r2, [pc, #260]	@ (8001ab4 <HAL_SPI_MspInit+0x124>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d12c      	bne.n	8001a0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	4b40      	ldr	r3, [pc, #256]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a38      	ldr	r2, [pc, #224]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019ea:	23a0      	movs	r3, #160	@ 0xa0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fa:	2305      	movs	r3, #5
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	482d      	ldr	r0, [pc, #180]	@ (8001abc <HAL_SPI_MspInit+0x12c>)
 8001a06:	f000 fa99 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a0a:	e04f      	b.n	8001aac <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac0 <HAL_SPI_MspInit+0x130>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d14a      	bne.n	8001aac <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a26:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_SPI_MspInit+0x128>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	480f      	ldr	r0, [pc, #60]	@ (8001ac4 <HAL_SPI_MspInit+0x134>)
 8001a86:	f000 fa59 	bl	8001f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4808      	ldr	r0, [pc, #32]	@ (8001ac8 <HAL_SPI_MspInit+0x138>)
 8001aa8:	f000 fa48 	bl	8001f3c <HAL_GPIO_Init>
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	@ 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40013000 	.word	0x40013000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40003800 	.word	0x40003800
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08e      	sub	sp, #56	@ 0x38
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <HAL_InitTick+0xe8>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	4a33      	ldr	r2, [pc, #204]	@ (8001bb4 <HAL_InitTick+0xe8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aec:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <HAL_InitTick+0xe8>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af8:	f107 0210 	add.w	r2, r7, #16
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 f814 	bl	8002b30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b12:	f000 fff9 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8001b16:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b18:	e004      	b.n	8001b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b1a:	f000 fff5 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b26:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <HAL_InitTick+0xec>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b40:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001b42:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b46:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001b5a:	4818      	ldr	r0, [pc, #96]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b5c:	f001 fad0 	bl	8003100 <HAL_TIM_Base_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b66:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11b      	bne.n	8001ba6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001b6e:	4813      	ldr	r0, [pc, #76]	@ (8001bbc <HAL_InitTick+0xf0>)
 8001b70:	f001 fb20 	bl	80031b4 <HAL_TIM_Base_Start_IT>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d111      	bne.n	8001ba6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b82:	201c      	movs	r0, #28
 8001b84:	f000 f9cc 	bl	8001f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d808      	bhi.n	8001ba0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	201c      	movs	r0, #28
 8001b94:	f000 f9a8 	bl	8001ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b98:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <HAL_InitTick+0xf4>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e002      	b.n	8001ba6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3738      	adds	r7, #56	@ 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	200001a8 	.word	0x200001a8
 8001bc0:	2000004c 	.word	0x2000004c

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <NMI_Handler+0x4>

08001bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <TIM2_IRQHandler+0x10>)
 8001c02:	f001 fb39 	bl	8003278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200001a8 	.word	0x200001a8

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f004 fb54 	bl	80062ec <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20020000 	.word	0x20020000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	200001f0 	.word	0x200001f0
 8001c78:	20004d28 	.word	0x20004d28

08001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca4:	f7ff ffea 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f004 fb13 	bl	80062f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7ff fc6d 	bl	80015b0 <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001ce4:	08006d1c 	.word	0x08006d1c
  ldr r2, =_sbss
 8001ce8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001cec:	20004d28 	.word	0x20004d28

08001cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <HAL_Init+0x40>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_Init+0x40>)
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_Init+0x40>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 f8d8 	bl	8001ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d22:	200f      	movs	r0, #15
 8001d24:	f7ff fed2 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d28:	f7ff fe06 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000050 	.word	0x20000050
 8001d5c:	200001f4 	.word	0x200001f4

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200001f4 	.word	0x200001f4

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	@ (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	@ (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	@ (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	@ 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff4c 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efa:	f7ff ff61 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7ff ffb1 	bl	8001e6c <NVIC_EncodePriority>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff80 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff54 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e159      	b.n	800220c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8148 	bne.w	8002206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a2 	beq.w	8002206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b57      	ldr	r3, [pc, #348]	@ (8002224 <HAL_GPIO_Init+0x2e8>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a56      	ldr	r2, [pc, #344]	@ (8002224 <HAL_GPIO_Init+0x2e8>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b54      	ldr	r3, [pc, #336]	@ (8002224 <HAL_GPIO_Init+0x2e8>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a52      	ldr	r2, [pc, #328]	@ (8002228 <HAL_GPIO_Init+0x2ec>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a49      	ldr	r2, [pc, #292]	@ (800222c <HAL_GPIO_Init+0x2f0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x202>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a48      	ldr	r2, [pc, #288]	@ (8002230 <HAL_GPIO_Init+0x2f4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x1fe>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a47      	ldr	r2, [pc, #284]	@ (8002234 <HAL_GPIO_Init+0x2f8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x1fa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a46      	ldr	r2, [pc, #280]	@ (8002238 <HAL_GPIO_Init+0x2fc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x1f6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a45      	ldr	r2, [pc, #276]	@ (800223c <HAL_GPIO_Init+0x300>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x1f2>
 800212a:	2304      	movs	r3, #4
 800212c:	e008      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800212e:	2307      	movs	r3, #7
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213e:	2300      	movs	r3, #0
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002150:	4935      	ldr	r1, [pc, #212]	@ (8002228 <HAL_GPIO_Init+0x2ec>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215e:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <HAL_GPIO_Init+0x304>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002182:	4a2f      	ldr	r2, [pc, #188]	@ (8002240 <HAL_GPIO_Init+0x304>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002188:	4b2d      	ldr	r3, [pc, #180]	@ (8002240 <HAL_GPIO_Init+0x304>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ac:	4a24      	ldr	r2, [pc, #144]	@ (8002240 <HAL_GPIO_Init+0x304>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021b2:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <HAL_GPIO_Init+0x304>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002240 <HAL_GPIO_Init+0x304>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021dc:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_GPIO_Init+0x304>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002200:	4a0f      	ldr	r2, [pc, #60]	@ (8002240 <HAL_GPIO_Init+0x304>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3301      	adds	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	f67f aea2 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3724      	adds	r7, #36	@ 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40013800 	.word	0x40013800
 800222c:	40020000 	.word	0x40020000
 8002230:	40020400 	.word	0x40020400
 8002234:	40020800 	.word	0x40020800
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40021000 	.word	0x40021000
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e267      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d075      	beq.n	80023b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c6:	4b88      	ldr	r3, [pc, #544]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d00c      	beq.n	80022ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d2:	4b85      	ldr	r3, [pc, #532]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d112      	bne.n	8002304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022de:	4b82      	ldr	r3, [pc, #520]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ea:	d10b      	bne.n	8002304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	4b7e      	ldr	r3, [pc, #504]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05b      	beq.n	80023b0 <HAL_RCC_OscConfig+0x108>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d157      	bne.n	80023b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e242      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800230c:	d106      	bne.n	800231c <HAL_RCC_OscConfig+0x74>
 800230e:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a75      	ldr	r2, [pc, #468]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	e01d      	b.n	8002358 <HAL_RCC_OscConfig+0xb0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x98>
 8002326:	4b70      	ldr	r3, [pc, #448]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6f      	ldr	r2, [pc, #444]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 800232c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6c      	ldr	r2, [pc, #432]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e00b      	b.n	8002358 <HAL_RCC_OscConfig+0xb0>
 8002340:	4b69      	ldr	r3, [pc, #420]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a68      	ldr	r2, [pc, #416]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b66      	ldr	r3, [pc, #408]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a65      	ldr	r2, [pc, #404]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fcfe 	bl	8001d60 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff fcfa 	bl	8001d60 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e207      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0xc0>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fcea 	bl	8001d60 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fce6 	bl	8001d60 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1f3      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0xe8>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d063      	beq.n	8002486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023be:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d11c      	bne.n	8002410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d6:	4b44      	ldr	r3, [pc, #272]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	4b41      	ldr	r3, [pc, #260]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_OscConfig+0x152>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1c7      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4937      	ldr	r1, [pc, #220]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	e03a      	b.n	8002486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002418:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_RCC_OscConfig+0x244>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7ff fc9f 	bl	8001d60 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002426:	f7ff fc9b 	bl	8001d60 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1a8      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4925      	ldr	r1, [pc, #148]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_RCC_OscConfig+0x244>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff fc7e 	bl	8001d60 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002468:	f7ff fc7a 	bl	8001d60 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e187      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d036      	beq.n	8002500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_RCC_OscConfig+0x248>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff fc5e 	bl	8001d60 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff fc5a 	bl	8001d60 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e167      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x200>
 80024c6:	e01b      	b.n	8002500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_OscConfig+0x248>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fc47 	bl	8001d60 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	e00e      	b.n	80024f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d6:	f7ff fc43 	bl	8001d60 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d907      	bls.n	80024f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e150      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470000 	.word	0x42470000
 80024f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ea      	bne.n	80024d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8097 	beq.w	800263c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b81      	ldr	r3, [pc, #516]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	4b7d      	ldr	r3, [pc, #500]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	4a7c      	ldr	r2, [pc, #496]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	@ 0x40
 800252e:	4b7a      	ldr	r3, [pc, #488]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b77      	ldr	r3, [pc, #476]	@ (800271c <HAL_RCC_OscConfig+0x474>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b74      	ldr	r3, [pc, #464]	@ (800271c <HAL_RCC_OscConfig+0x474>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a73      	ldr	r2, [pc, #460]	@ (800271c <HAL_RCC_OscConfig+0x474>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7ff fc03 	bl	8001d60 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7ff fbff 	bl	8001d60 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e10c      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b6a      	ldr	r3, [pc, #424]	@ (800271c <HAL_RCC_OscConfig+0x474>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x2ea>
 8002584:	4b64      	ldr	r3, [pc, #400]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	4a63      	ldr	r2, [pc, #396]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x324>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x30c>
 800259a:	4b5f      	ldr	r3, [pc, #380]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	4a5e      	ldr	r2, [pc, #376]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0x324>
 80025b4:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b8:	4a57      	ldr	r2, [pc, #348]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c0:	4b55      	ldr	r3, [pc, #340]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c4:	4a54      	ldr	r2, [pc, #336]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7ff fbc4 	bl	8001d60 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7ff fbc0 	bl	8001d60 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0cb      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	4b49      	ldr	r3, [pc, #292]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ee      	beq.n	80025dc <HAL_RCC_OscConfig+0x334>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7ff fbae 	bl	8001d60 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff fbaa 	bl	8001d60 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0b5      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	4b3e      	ldr	r3, [pc, #248]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ee      	bne.n	8002608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	4a38      	ldr	r2, [pc, #224]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a1 	beq.w	8002788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002646:	4b34      	ldr	r3, [pc, #208]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b08      	cmp	r3, #8
 8002650:	d05c      	beq.n	800270c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d141      	bne.n	80026de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HAL_RCC_OscConfig+0x478>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fb7e 	bl	8001d60 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff fb7a 	bl	8001d60 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e087      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	491b      	ldr	r1, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x478>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb53 	bl	8001d60 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026be:	f7ff fb4f 	bl	8001d60 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e05c      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x416>
 80026dc:	e054      	b.n	8002788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_OscConfig+0x478>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fb3c 	bl	8001d60 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ec:	f7ff fb38 	bl	8001d60 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e045      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_RCC_OscConfig+0x470>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x444>
 800270a:	e03d      	b.n	8002788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e038      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
 8002718:	40023800 	.word	0x40023800
 800271c:	40007000 	.word	0x40007000
 8002720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <HAL_RCC_OscConfig+0x4ec>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d028      	beq.n	8002784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d121      	bne.n	8002784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d11a      	bne.n	8002784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800275a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800275c:	4293      	cmp	r3, r2
 800275e:	d111      	bne.n	8002784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	3b01      	subs	r3, #1
 800276e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0cc      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b68      	ldr	r3, [pc, #416]	@ (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d90c      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b65      	ldr	r3, [pc, #404]	@ (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b63      	ldr	r3, [pc, #396]	@ (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0b8      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ec:	4b59      	ldr	r3, [pc, #356]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a58      	ldr	r2, [pc, #352]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002804:	4b53      	ldr	r3, [pc, #332]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a52      	ldr	r2, [pc, #328]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800280e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b50      	ldr	r3, [pc, #320]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	494d      	ldr	r1, [pc, #308]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d044      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d119      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d003      	beq.n	8002856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002852:	2b03      	cmp	r3, #3
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b3f      	ldr	r3, [pc, #252]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e06f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e067      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4934      	ldr	r1, [pc, #208]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002888:	f7ff fa6a 	bl	8001d60 <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7ff fa66 	bl	8001d60 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e04f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1eb      	bne.n	8002890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d20c      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e032      	b.n	8002946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4916      	ldr	r1, [pc, #88]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290a:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	490e      	ldr	r1, [pc, #56]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291e:	f000 f821 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	490a      	ldr	r1, [pc, #40]	@ (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f8c4 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00
 8002954:	40023800 	.word	0x40023800
 8002958:	08006cc0 	.word	0x08006cc0
 800295c:	20000048 	.word	0x20000048
 8002960:	2000004c 	.word	0x2000004c

08002964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002968:	b090      	sub	sp, #64	@ 0x40
 800296a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002970:	2300      	movs	r3, #0
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800297c:	4b59      	ldr	r3, [pc, #356]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d00d      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002988:	2b08      	cmp	r3, #8
 800298a:	f200 80a1 	bhi.w	8002ad0 <HAL_RCC_GetSysClockFreq+0x16c>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x34>
 8002992:	2b04      	cmp	r3, #4
 8002994:	d003      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x3a>
 8002996:	e09b      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002998:	4b53      	ldr	r3, [pc, #332]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 800299a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800299c:	e09b      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299e:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x188>)
 80029a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a2:	e098      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d028      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	099b      	lsrs	r3, r3, #6
 80029c0:	2200      	movs	r2, #0
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029cc:	2100      	movs	r1, #0
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x188>)
 80029d0:	fb03 f201 	mul.w	r2, r3, r1
 80029d4:	2300      	movs	r3, #0
 80029d6:	fb00 f303 	mul.w	r3, r0, r3
 80029da:	4413      	add	r3, r2
 80029dc:	4a43      	ldr	r2, [pc, #268]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x188>)
 80029de:	fba0 1202 	umull	r1, r2, r0, r2
 80029e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e4:	460a      	mov	r2, r1
 80029e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ea:	4413      	add	r3, r2
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f0:	2200      	movs	r2, #0
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	61fa      	str	r2, [r7, #28]
 80029f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029fe:	f7fd fc47 	bl	8000290 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4613      	mov	r3, r2
 8002a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a0a:	e053      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	099b      	lsrs	r3, r3, #6
 8002a12:	2200      	movs	r2, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	617a      	str	r2, [r7, #20]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a1e:	f04f 0b00 	mov.w	fp, #0
 8002a22:	4652      	mov	r2, sl
 8002a24:	465b      	mov	r3, fp
 8002a26:	f04f 0000 	mov.w	r0, #0
 8002a2a:	f04f 0100 	mov.w	r1, #0
 8002a2e:	0159      	lsls	r1, r3, #5
 8002a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a34:	0150      	lsls	r0, r2, #5
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a56:	ebb2 0408 	subs.w	r4, r2, r8
 8002a5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	00eb      	lsls	r3, r5, #3
 8002a68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6c:	00e2      	lsls	r2, r4, #3
 8002a6e:	4614      	mov	r4, r2
 8002a70:	461d      	mov	r5, r3
 8002a72:	eb14 030a 	adds.w	r3, r4, sl
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	eb45 030b 	adc.w	r3, r5, fp
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	028b      	lsls	r3, r1, #10
 8002a8e:	4621      	mov	r1, r4
 8002a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a94:	4621      	mov	r1, r4
 8002a96:	028a      	lsls	r2, r1, #10
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	60fa      	str	r2, [r7, #12]
 8002aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aa8:	f7fd fbf2 	bl	8000290 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ac4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3740      	adds	r7, #64	@ 0x40
 8002adc:	46bd      	mov	sp, r7
 8002ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	017d7840 	.word	0x017d7840

08002af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000048 	.word	0x20000048

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	08006cd0 	.word	0x08006cd0

08002b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b64:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <HAL_RCC_GetClockConfig+0x5c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b72:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <HAL_RCC_GetClockConfig+0x60>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0207 	and.w	r2, r3, #7
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07b      	b.n	8002c9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bb6:	d009      	beq.n	8002bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
 8002bbe:	e005      	b.n	8002bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fed2 	bl	8001990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c50:	ea42 0103 	orr.w	r1, r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	f003 0104 	and.w	r1, r3, #4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	f003 0210 	and.w	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b088      	sub	sp, #32
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_SPI_Transmit+0x22>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e12d      	b.n	8002f24 <HAL_SPI_Transmit+0x27e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd0:	f7ff f846 	bl	8001d60 <HAL_GetTick>
 8002cd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cea:	e116      	b.n	8002f1a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Transmit+0x52>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cfc:	e10d      	b.n	8002f1a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d44:	d10f      	bne.n	8002d66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d007      	beq.n	8002d84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d8c:	d14f      	bne.n	8002e2e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_Transmit+0xf6>
 8002d96:	8afb      	ldrh	r3, [r7, #22]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d142      	bne.n	8002e22 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	1c9a      	adds	r2, r3, #2
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dc0:	e02f      	b.n	8002e22 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d112      	bne.n	8002df6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002df4:	e015      	b.n	8002e22 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df6:	f7fe ffb3 	bl	8001d60 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d803      	bhi.n	8002e0e <HAL_SPI_Transmit+0x168>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x16e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e20:	e07b      	b.n	8002f1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ca      	bne.n	8002dc2 <HAL_SPI_Transmit+0x11c>
 8002e2c:	e050      	b.n	8002ed0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0x196>
 8002e36:	8afb      	ldrh	r3, [r7, #22]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d144      	bne.n	8002ec6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e62:	e030      	b.n	8002ec6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d113      	bne.n	8002e9a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e98:	e015      	b.n	8002ec6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9a:	f7fe ff61 	bl	8001d60 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d803      	bhi.n	8002eb2 <HAL_SPI_Transmit+0x20c>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d102      	bne.n	8002eb8 <HAL_SPI_Transmit+0x212>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ec4:	e029      	b.n	8002f1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1c9      	bne.n	8002e64 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f8bf 	bl	8003058 <SPI_EndRxTxTransaction>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e003      	b.n	8002f1a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3720      	adds	r7, #32
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f3a:	b2db      	uxtb	r3, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f58:	f7fe ff02 	bl	8001d60 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f68:	f7fe fefa 	bl	8001d60 <HAL_GetTick>
 8002f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f6e:	4b39      	ldr	r3, [pc, #228]	@ (8003054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	015b      	lsls	r3, r3, #5
 8002f74:	0d1b      	lsrs	r3, r3, #20
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f7e:	e054      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d050      	beq.n	800302a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f88:	f7fe feea 	bl	8001d60 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d902      	bls.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d13d      	bne.n	800301a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fb6:	d111      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc0:	d004      	beq.n	8002fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fca:	d107      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe4:	d10f      	bne.n	8003006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e017      	b.n	800304a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3b01      	subs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	429a      	cmp	r2, r3
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	429a      	cmp	r2, r3
 8003046:	d19b      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000048 	.word	0x20000048

08003058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2201      	movs	r2, #1
 800306c:	2102      	movs	r1, #2
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff ff6a 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e032      	b.n	80030f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <SPI_EndRxTxTransaction+0xa0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1b      	ldr	r2, [pc, #108]	@ (80030fc <SPI_EndRxTxTransaction+0xa4>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	0d5b      	lsrs	r3, r3, #21
 8003096:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030a8:	d112      	bne.n	80030d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	@ 0x80
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff ff47 	bl	8002f48 <SPI_WaitFlagStateUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e00f      	b.n	80030f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3b01      	subs	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	2b80      	cmp	r3, #128	@ 0x80
 80030e8:	d0f2      	beq.n	80030d0 <SPI_EndRxTxTransaction+0x78>
 80030ea:	e000      	b.n	80030ee <SPI_EndRxTxTransaction+0x96>
        break;
 80030ec:	bf00      	nop
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000048 	.word	0x20000048
 80030fc:	165e9f81 	.word	0x165e9f81

08003100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e041      	b.n	8003196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f839 	bl	800319e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3304      	adds	r3, #4
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f000 f9b2 	bl	80034a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d001      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e044      	b.n	8003256 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_TIM_Base_Start_IT+0xb0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d018      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x6c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f6:	d013      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x6c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <HAL_TIM_Base_Start_IT+0xb4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00e      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x6c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a19      	ldr	r2, [pc, #100]	@ (800326c <HAL_TIM_Base_Start_IT+0xb8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x6c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <HAL_TIM_Base_Start_IT+0xbc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x6c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <HAL_TIM_Base_Start_IT+0xc0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b06      	cmp	r3, #6
 8003230:	d010      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	e007      	b.n	8003254 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010000 	.word	0x40010000
 8003268:	40000400 	.word	0x40000400
 800326c:	40000800 	.word	0x40000800
 8003270:	40000c00 	.word	0x40000c00
 8003274:	40014000 	.word	0x40014000

08003278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d020      	beq.n	80032dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0202 	mvn.w	r2, #2
 80032ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8d2 	bl	800346c <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8c4 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8d5 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0204 	mvn.w	r2, #4
 80032f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f8ac 	bl	800346c <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f89e 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8af 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0208 	mvn.w	r2, #8
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f886 	bl	800346c <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f878 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f889 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0210 	mvn.w	r2, #16
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2208      	movs	r2, #8
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f860 	bl	800346c <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f852 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f863 	bl	8003480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0201 	mvn.w	r2, #1
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fe fa95 	bl	800190e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8e6 	bl	80035d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00c      	beq.n	800342c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f834 	bl	8003494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0220 	mvn.w	r2, #32
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8b8 	bl	80035c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3a      	ldr	r2, [pc, #232]	@ (80035a4 <TIM_Base_SetConfig+0xfc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00f      	beq.n	80034e0 <TIM_Base_SetConfig+0x38>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x38>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a37      	ldr	r2, [pc, #220]	@ (80035a8 <TIM_Base_SetConfig+0x100>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x38>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <TIM_Base_SetConfig+0x104>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x38>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a35      	ldr	r2, [pc, #212]	@ (80035b0 <TIM_Base_SetConfig+0x108>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2b      	ldr	r2, [pc, #172]	@ (80035a4 <TIM_Base_SetConfig+0xfc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01b      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003500:	d017      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a28      	ldr	r2, [pc, #160]	@ (80035a8 <TIM_Base_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a27      	ldr	r2, [pc, #156]	@ (80035ac <TIM_Base_SetConfig+0x104>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a26      	ldr	r2, [pc, #152]	@ (80035b0 <TIM_Base_SetConfig+0x108>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <TIM_Base_SetConfig+0x10c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a24      	ldr	r2, [pc, #144]	@ (80035b8 <TIM_Base_SetConfig+0x110>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0x8a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a23      	ldr	r2, [pc, #140]	@ (80035bc <TIM_Base_SetConfig+0x114>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0e      	ldr	r2, [pc, #56]	@ (80035a4 <TIM_Base_SetConfig+0xfc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d103      	bne.n	8003578 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]
  }
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800
 80035b0:	40000c00 	.word	0x40000c00
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <__NVIC_SetPriority>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	@ (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	@ (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <SysTick_Handler+0x1c>)
 8003642:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003644:	f001 fd46 	bl	80050d4 <xTaskGetSchedulerState>
 8003648:	4603      	mov	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800364e:	f002 fb3b 	bl	8005cc8 <xPortSysTickHandler>
  }
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003660:	2100      	movs	r1, #0
 8003662:	f06f 0004 	mvn.w	r0, #4
 8003666:	f7ff ffbf 	bl	80035e8 <__NVIC_SetPriority>
#endif
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003676:	f3ef 8305 	mrs	r3, IPSR
 800367a:	603b      	str	r3, [r7, #0]
  return(result);
 800367c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003682:	f06f 0305 	mvn.w	r3, #5
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	e00c      	b.n	80036a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <osKernelInitialize+0x44>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003692:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <osKernelInitialize+0x44>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e002      	b.n	80036a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
 80036a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	200001f8 	.word	0x200001f8

080036b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036be:	f3ef 8305 	mrs	r3, IPSR
 80036c2:	603b      	str	r3, [r7, #0]
  return(result);
 80036c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80036ca:	f06f 0305 	mvn.w	r3, #5
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	e010      	b.n	80036f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <osKernelStart+0x48>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d109      	bne.n	80036ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036da:	f7ff ffbf 	bl	800365c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <osKernelStart+0x48>)
 80036e0:	2202      	movs	r2, #2
 80036e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036e4:	f001 f892 	bl	800480c <vTaskStartScheduler>
      stat = osOK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	e002      	b.n	80036f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036f4:	687b      	ldr	r3, [r7, #4]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200001f8 	.word	0x200001f8

08003704 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b08e      	sub	sp, #56	@ 0x38
 8003708:	af04      	add	r7, sp, #16
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003714:	f3ef 8305 	mrs	r3, IPSR
 8003718:	617b      	str	r3, [r7, #20]
  return(result);
 800371a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800371c:	2b00      	cmp	r3, #0
 800371e:	d17e      	bne.n	800381e <osThreadNew+0x11a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d07b      	beq.n	800381e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800372a:	2318      	movs	r3, #24
 800372c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d045      	beq.n	80037ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <osThreadNew+0x48>
        name = attr->name;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <osThreadNew+0x6e>
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	2b38      	cmp	r3, #56	@ 0x38
 8003764:	d805      	bhi.n	8003772 <osThreadNew+0x6e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <osThreadNew+0x72>
        return (NULL);
 8003772:	2300      	movs	r3, #0
 8003774:	e054      	b.n	8003820 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00e      	beq.n	80037ac <osThreadNew+0xa8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2ba7      	cmp	r3, #167	@ 0xa7
 8003794:	d90a      	bls.n	80037ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <osThreadNew+0xa8>
        mem = 1;
 80037a6:	2301      	movs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	e010      	b.n	80037ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10c      	bne.n	80037ce <osThreadNew+0xca>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <osThreadNew+0xca>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <osThreadNew+0xca>
          mem = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e001      	b.n	80037ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d110      	bne.n	80037f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037dc:	9202      	str	r2, [sp, #8]
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6a3a      	ldr	r2, [r7, #32]
 80037e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fe1a 	bl	8004424 <xTaskCreateStatic>
 80037f0:	4603      	mov	r3, r0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	e013      	b.n	800381e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d110      	bne.n	800381e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fe68 	bl	80044e4 <xTaskCreate>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <osThreadNew+0x11a>
            hTask = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800381e:	693b      	ldr	r3, [r7, #16]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3728      	adds	r7, #40	@ 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003830:	f3ef 8305 	mrs	r3, IPSR
 8003834:	60bb      	str	r3, [r7, #8]
  return(result);
 8003836:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <osDelay+0x1c>
    stat = osErrorISR;
 800383c:	f06f 0305 	mvn.w	r3, #5
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e007      	b.n	8003854 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <osDelay+0x2c>
      vTaskDelay(ticks);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 ffa6 	bl	80047a0 <vTaskDelay>
    }
  }

  return (stat);
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a07      	ldr	r2, [pc, #28]	@ (800388c <vApplicationGetIdleTaskMemory+0x2c>)
 8003870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a06      	ldr	r2, [pc, #24]	@ (8003890 <vApplicationGetIdleTaskMemory+0x30>)
 8003876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	200001fc 	.word	0x200001fc
 8003890:	200002a4 	.word	0x200002a4

08003894 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80038a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a06      	ldr	r2, [pc, #24]	@ (80038c4 <vApplicationGetTimerTaskMemory+0x30>)
 80038aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	200004a4 	.word	0x200004a4
 80038c4:	2000054c 	.word	0x2000054c

080038c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f103 0208 	add.w	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f103 0208 	add.w	r2, r3, #8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f103 0208 	add.w	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800396a:	b480      	push	{r7}
 800396c:	b085      	sub	sp, #20
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d103      	bne.n	800398a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e00c      	b.n	80039a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3308      	adds	r3, #8
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e002      	b.n	8003998 <vListInsert+0x2e>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d2f6      	bcs.n	8003992 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6892      	ldr	r2, [r2, #8]
 80039f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6852      	ldr	r2, [r2, #4]
 80039fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d103      	bne.n	8003a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a5c:	f002 f8a4 	bl	8005ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	441a      	add	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	68f9      	ldr	r1, [r7, #12]
 8003a90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	441a      	add	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	22ff      	movs	r2, #255	@ 0xff
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	22ff      	movs	r2, #255	@ 0xff
 8003aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d114      	bne.n	8003adc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01a      	beq.n	8003af0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3310      	adds	r3, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f942 	bl	8004d48 <xTaskRemoveFromEventList>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d012      	beq.n	8003af0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <xQueueGenericReset+0xd0>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	e009      	b.n	8003af0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3310      	adds	r3, #16
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fef1 	bl	80038c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3324      	adds	r3, #36	@ 0x24
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff feec 	bl	80038c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003af0:	f002 f88c 	bl	8005c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003af4:	2301      	movs	r3, #1
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08e      	sub	sp, #56	@ 0x38
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <xQueueGenericCreateStatic+0x56>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <xQueueGenericCreateStatic+0x5a>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xQueueGenericCreateStatic+0x5c>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	623b      	str	r3, [r7, #32]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <xQueueGenericCreateStatic+0x84>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <xQueueGenericCreateStatic+0x88>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <xQueueGenericCreateStatic+0x8a>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	61fb      	str	r3, [r7, #28]
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	e7fd      	b.n	8003ba6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003baa:	2350      	movs	r3, #80	@ 0x50
 8003bac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b50      	cmp	r3, #80	@ 0x50
 8003bb2:	d00b      	beq.n	8003bcc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61bb      	str	r3, [r7, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	e7fd      	b.n	8003bc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003bcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003be0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f805 	bl	8003bfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3730      	adds	r7, #48	@ 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e002      	b.n	8003c20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	69b8      	ldr	r0, [r7, #24]
 8003c30:	f7ff fefe 	bl	8003a30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	@ 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <xQueueGenericSend+0x34>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x42>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <xQueueGenericSend+0x46>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericSend+0x48>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <xQueueGenericSend+0x64>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d103      	bne.n	8003cb6 <xQueueGenericSend+0x72>
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <xQueueGenericSend+0x76>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <xQueueGenericSend+0x78>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <xQueueGenericSend+0x94>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	623b      	str	r3, [r7, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd8:	f001 f9fc 	bl	80050d4 <xTaskGetSchedulerState>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <xQueueGenericSend+0xa4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueGenericSend+0xa8>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <xQueueGenericSend+0xaa>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <xQueueGenericSend+0xc6>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	61fb      	str	r3, [r7, #28]
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d0a:	f001 ff4d 	bl	8005ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xQueueGenericSend+0xdc>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d129      	bne.n	8003d74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d26:	f000 fa0f 	bl	8004148 <prvCopyDataToQueue>
 8003d2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	3324      	adds	r3, #36	@ 0x24
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 f805 	bl	8004d48 <xTaskRemoveFromEventList>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d44:	4b3f      	ldr	r3, [pc, #252]	@ (8003e44 <xQueueGenericSend+0x200>)
 8003d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	e00a      	b.n	8003d6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <xQueueGenericSend+0x200>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d6c:	f001 ff4e 	bl	8005c0c <vPortExitCritical>
				return pdPASS;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e063      	b.n	8003e3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d7a:	f001 ff47 	bl	8005c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e05c      	b.n	8003e3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d88:	f107 0314 	add.w	r3, r7, #20
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f83f 	bl	8004e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d92:	2301      	movs	r3, #1
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d96:	f001 ff39 	bl	8005c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d9a:	f000 fda7 	bl	80048ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d9e:	f001 ff03 	bl	8005ba8 <vPortEnterCritical>
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d103      	bne.n	8003db8 <xQueueGenericSend+0x174>
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d103      	bne.n	8003dce <xQueueGenericSend+0x18a>
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dce:	f001 ff1d 	bl	8005c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dd2:	1d3a      	adds	r2, r7, #4
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 f82e 	bl	8004e3c <xTaskCheckForTimeOut>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d124      	bne.n	8003e30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003de6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003de8:	f000 faa6 	bl	8004338 <prvIsQueueFull>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	3310      	adds	r3, #16
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 ff52 	bl	8004ca4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e02:	f000 fa31 	bl	8004268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e06:	f000 fd7f 	bl	8004908 <xTaskResumeAll>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f47f af7c 	bne.w	8003d0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e12:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <xQueueGenericSend+0x200>)
 8003e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	e772      	b.n	8003d0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e26:	f000 fa1f 	bl	8004268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e2a:	f000 fd6d 	bl	8004908 <xTaskResumeAll>
 8003e2e:	e76c      	b.n	8003d0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e32:	f000 fa19 	bl	8004268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e36:	f000 fd67 	bl	8004908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3738      	adds	r7, #56	@ 0x38
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b090      	sub	sp, #64	@ 0x40
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <xQueueGenericSendFromISR+0x3e>
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <xQueueGenericSendFromISR+0x42>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <xQueueGenericSendFromISR+0x44>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d103      	bne.n	8003eb6 <xQueueGenericSendFromISR+0x6e>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <xQueueGenericSendFromISR+0x72>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <xQueueGenericSendFromISR+0x74>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	623b      	str	r3, [r7, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ed8:	f001 ff46 	bl	8005d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003edc:	f3ef 8211 	mrs	r2, BASEPRI
 8003ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	61fa      	str	r2, [r7, #28]
 8003ef2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ef6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <xQueueGenericSendFromISR+0xc2>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d12f      	bne.n	8003f6a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f20:	f000 f912 	bl	8004148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f24:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d112      	bne.n	8003f54 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f38:	3324      	adds	r3, #36	@ 0x24
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 ff04 	bl	8004d48 <xTaskRemoveFromEventList>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e007      	b.n	8003f64 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f58:	3301      	adds	r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	b25a      	sxtb	r2, r3
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003f64:	2301      	movs	r3, #1
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003f68:	e001      	b.n	8003f6e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f70:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3740      	adds	r7, #64	@ 0x40
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	@ 0x30
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <xQueueReceive+0x32>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	623b      	str	r3, [r7, #32]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <xQueueReceive+0x40>
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <xQueueReceive+0x44>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <xQueueReceive+0x46>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <xQueueReceive+0x62>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	61fb      	str	r3, [r7, #28]
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fe6:	f001 f875 	bl	80050d4 <xTaskGetSchedulerState>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <xQueueReceive+0x72>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <xQueueReceive+0x76>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <xQueueReceive+0x78>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <xQueueReceive+0x94>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61bb      	str	r3, [r7, #24]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004018:	f001 fdc6 	bl	8005ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01f      	beq.n	8004068 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800402c:	f000 f8f6 	bl	800421c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	1e5a      	subs	r2, r3, #1
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00f      	beq.n	8004060 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	3310      	adds	r3, #16
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fe7f 	bl	8004d48 <xTaskRemoveFromEventList>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004050:	4b3c      	ldr	r3, [pc, #240]	@ (8004144 <xQueueReceive+0x1c0>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004060:	f001 fdd4 	bl	8005c0c <vPortExitCritical>
				return pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	e069      	b.n	800413c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800406e:	f001 fdcd 	bl	8005c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004072:	2300      	movs	r3, #0
 8004074:	e062      	b.n	800413c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800407c:	f107 0310 	add.w	r3, r7, #16
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fec5 	bl	8004e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800408a:	f001 fdbf 	bl	8005c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800408e:	f000 fc2d 	bl	80048ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004092:	f001 fd89 	bl	8005ba8 <vPortEnterCritical>
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800409c:	b25b      	sxtb	r3, r3
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d103      	bne.n	80040ac <xQueueReceive+0x128>
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <xQueueReceive+0x13e>
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040c2:	f001 fda3 	bl	8005c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	f107 0310 	add.w	r3, r7, #16
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 feb4 	bl	8004e3c <xTaskCheckForTimeOut>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d123      	bne.n	8004122 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040dc:	f000 f916 	bl	800430c <prvIsQueueEmpty>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	3324      	adds	r3, #36	@ 0x24
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fdd8 	bl	8004ca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040f6:	f000 f8b7 	bl	8004268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040fa:	f000 fc05 	bl	8004908 <xTaskResumeAll>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d189      	bne.n	8004018 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004104:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <xQueueReceive+0x1c0>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	e780      	b.n	8004018 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004118:	f000 f8a6 	bl	8004268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800411c:	f000 fbf4 	bl	8004908 <xTaskResumeAll>
 8004120:	e77a      	b.n	8004018 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004124:	f000 f8a0 	bl	8004268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004128:	f000 fbee 	bl	8004908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800412c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800412e:	f000 f8ed 	bl	800430c <prvIsQueueEmpty>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	f43f af6f 	beq.w	8004018 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800413a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800413c:	4618      	mov	r0, r3
 800413e:	3730      	adds	r7, #48	@ 0x30
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d14d      	bne.n	800420a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 ffcc 	bl	8005110 <xTaskPriorityDisinherit>
 8004178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	e043      	b.n	800420a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d119      	bne.n	80041bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6858      	ldr	r0, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	461a      	mov	r2, r3
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	f002 f8d6 	bl	8006344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d32b      	bcc.n	800420a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	e026      	b.n	800420a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68d8      	ldr	r0, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	461a      	mov	r2, r3
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	f002 f8bc 	bl	8006344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	425b      	negs	r3, r3
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d207      	bcs.n	80041f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	425b      	negs	r3, r3
 80041f2:	441a      	add	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d105      	bne.n	800420a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3b01      	subs	r3, #1
 8004208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	441a      	add	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d303      	bcc.n	8004250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	461a      	mov	r2, r3
 800425a:	6838      	ldr	r0, [r7, #0]
 800425c:	f002 f872 	bl	8006344 <memcpy>
	}
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004270:	f001 fc9a 	bl	8005ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800427a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800427c:	e011      	b.n	80042a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3324      	adds	r3, #36	@ 0x24
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fd5c 	bl	8004d48 <xTaskRemoveFromEventList>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004296:	f000 fe35 	bl	8004f04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	3b01      	subs	r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	dce9      	bgt.n	800427e <prvUnlockQueue+0x16>
 80042aa:	e000      	b.n	80042ae <prvUnlockQueue+0x46>
					break;
 80042ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	22ff      	movs	r2, #255	@ 0xff
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042b6:	f001 fca9 	bl	8005c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ba:	f001 fc75 	bl	8005ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042c6:	e011      	b.n	80042ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3310      	adds	r3, #16
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fd37 	bl	8004d48 <xTaskRemoveFromEventList>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042e0:	f000 fe10 	bl	8004f04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042e4:	7bbb      	ldrb	r3, [r7, #14]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	dce9      	bgt.n	80042c8 <prvUnlockQueue+0x60>
 80042f4:	e000      	b.n	80042f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	22ff      	movs	r2, #255	@ 0xff
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004300:	f001 fc84 	bl	8005c0c <vPortExitCritical>
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004314:	f001 fc48 	bl	8005ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e001      	b.n	800432a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800432a:	f001 fc6f 	bl	8005c0c <vPortExitCritical>

	return xReturn;
 800432e:	68fb      	ldr	r3, [r7, #12]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004340:	f001 fc32 	bl	8005ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	429a      	cmp	r2, r3
 800434e:	d102      	bne.n	8004356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e001      	b.n	800435a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800435a:	f001 fc57 	bl	8005c0c <vPortExitCritical>

	return xReturn;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e014      	b.n	80043a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004378:	4a0f      	ldr	r2, [pc, #60]	@ (80043b8 <vQueueAddToRegistry+0x50>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004384:	490c      	ldr	r1, [pc, #48]	@ (80043b8 <vQueueAddToRegistry+0x50>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800438e:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <vQueueAddToRegistry+0x50>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800439a:	e006      	b.n	80043aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b07      	cmp	r3, #7
 80043a6:	d9e7      	bls.n	8004378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000094c 	.word	0x2000094c

080043bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043cc:	f001 fbec 	bl	8005ba8 <vPortEnterCritical>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d103      	bne.n	80043e6 <vQueueWaitForMessageRestricted+0x2a>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d103      	bne.n	80043fc <vQueueWaitForMessageRestricted+0x40>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043fc:	f001 fc06 	bl	8005c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3324      	adds	r3, #36	@ 0x24
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fc6d 	bl	8004cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7ff ff26 	bl	8004268 <prvUnlockQueue>
	}
 800441c:	bf00      	nop
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	@ 0x38
 8004428:	af04      	add	r7, sp, #16
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	623b      	str	r3, [r7, #32]
}
 800444a:	bf00      	nop
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800446e:	23a8      	movs	r3, #168	@ 0xa8
 8004470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2ba8      	cmp	r3, #168	@ 0xa8
 8004476:	d00b      	beq.n	8004490 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	61bb      	str	r3, [r7, #24]
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004490:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01e      	beq.n	80044d6 <xTaskCreateStatic+0xb2>
 8004498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01b      	beq.n	80044d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044b0:	2300      	movs	r3, #0
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	f107 0314 	add.w	r3, r7, #20
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f851 	bl	8004570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044d0:	f000 f8f6 	bl	80046c0 <prvAddNewTaskToReadyList>
 80044d4:	e001      	b.n	80044da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044da:	697b      	ldr	r3, [r7, #20]
	}
 80044dc:	4618      	mov	r0, r3
 80044de:	3728      	adds	r7, #40	@ 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	@ 0x30
 80044e8:	af04      	add	r7, sp, #16
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 fc77 	bl	8005dec <pvPortMalloc>
 80044fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004506:	20a8      	movs	r0, #168	@ 0xa8
 8004508:	f001 fc70 	bl	8005dec <pvPortMalloc>
 800450c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30
 800451a:	e005      	b.n	8004528 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	f001 fd33 	bl	8005f88 <vPortFree>
 8004522:	e001      	b.n	8004528 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d017      	beq.n	800455e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	2300      	movs	r3, #0
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	9302      	str	r3, [sp, #8]
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f80f 	bl	8004570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004552:	69f8      	ldr	r0, [r7, #28]
 8004554:	f000 f8b4 	bl	80046c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	e002      	b.n	8004564 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004564:	69bb      	ldr	r3, [r7, #24]
	}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	21a5      	movs	r1, #165	@ 0xa5
 800458a:	f001 fe51 	bl	8006230 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004598:	3b01      	subs	r3, #1
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	617b      	str	r3, [r7, #20]
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	e7fd      	b.n	80045c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01f      	beq.n	8004610 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e012      	b.n	80045fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	7819      	ldrb	r1, [r3, #0]
 80045de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	3334      	adds	r3, #52	@ 0x34
 80045e6:	460a      	mov	r2, r1
 80045e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d006      	beq.n	8004604 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d9e9      	bls.n	80045d6 <prvInitialiseNewTask+0x66>
 8004602:	e000      	b.n	8004606 <prvInitialiseNewTask+0x96>
			{
				break;
 8004604:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800460e:	e003      	b.n	8004618 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	2b37      	cmp	r3, #55	@ 0x37
 800461c:	d901      	bls.n	8004622 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800461e:	2337      	movs	r3, #55	@ 0x37
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004626:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800462c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	2200      	movs	r2, #0
 8004632:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff f965 	bl	8003908 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	3318      	adds	r3, #24
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f960 	bl	8003908 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	2200      	movs	r2, #0
 800466a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3354      	adds	r3, #84	@ 0x54
 8004672:	224c      	movs	r2, #76	@ 0x4c
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f001 fdda 	bl	8006230 <memset>
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <prvInitialiseNewTask+0x144>)
 8004680:	659a      	str	r2, [r3, #88]	@ 0x58
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <prvInitialiseNewTask+0x148>)
 8004686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	4a0c      	ldr	r2, [pc, #48]	@ (80046bc <prvInitialiseNewTask+0x14c>)
 800468c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	69b8      	ldr	r0, [r7, #24]
 8004694:	f001 f95a 	bl	800594c <pxPortInitialiseStack>
 8004698:	4602      	mov	r2, r0
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046aa:	bf00      	nop
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20004be0 	.word	0x20004be0
 80046b8:	20004c48 	.word	0x20004c48
 80046bc:	20004cb0 	.word	0x20004cb0

080046c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046c8:	f001 fa6e 	bl	8005ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d110      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046ec:	f000 fc2e 	bl	8004f4c <prvInitialiseTaskLists>
 80046f0:	e00d      	b.n	800470e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	429a      	cmp	r2, r3
 8004706:	d802      	bhi.n	800470e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800470e:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d903      	bls.n	8004734 <prvAddNewTaskToReadyList+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <prvAddNewTaskToReadyList+0xd8>)
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7ff f8e9 	bl	8003922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004750:	f001 fa5c 	bl	8005c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004754:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00e      	beq.n	800477a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d207      	bcs.n	800477a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <prvAddNewTaskToReadyList+0xdc>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000e60 	.word	0x20000e60
 8004788:	2000098c 	.word	0x2000098c
 800478c:	20000e6c 	.word	0x20000e6c
 8004790:	20000e7c 	.word	0x20000e7c
 8004794:	20000e68 	.word	0x20000e68
 8004798:	20000990 	.word	0x20000990
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <vTaskDelay+0x64>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <vTaskDelay+0x32>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60bb      	str	r3, [r7, #8]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047d2:	f000 f88b 	bl	80048ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fd09 	bl	80051f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047de:	f000 f893 	bl	8004908 <xTaskResumeAll>
 80047e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <vTaskDelay+0x68>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000e88 	.word	0x20000e88
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800481a:	463a      	mov	r2, r7
 800481c:	1d39      	adds	r1, r7, #4
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff f81c 	bl	8003860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	9202      	str	r2, [sp, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	460a      	mov	r2, r1
 800483a:	4924      	ldr	r1, [pc, #144]	@ (80048cc <vTaskStartScheduler+0xc0>)
 800483c:	4824      	ldr	r0, [pc, #144]	@ (80048d0 <vTaskStartScheduler+0xc4>)
 800483e:	f7ff fdf1 	bl	8004424 <xTaskCreateStatic>
 8004842:	4603      	mov	r3, r0
 8004844:	4a23      	ldr	r2, [pc, #140]	@ (80048d4 <vTaskStartScheduler+0xc8>)
 8004846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004848:	4b22      	ldr	r3, [pc, #136]	@ (80048d4 <vTaskStartScheduler+0xc8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e001      	b.n	800485a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004860:	f000 fd1a 	bl	8005298 <xTimerCreateTimerTask>
 8004864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d11b      	bne.n	80048a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	613b      	str	r3, [r7, #16]
}
 800487e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004880:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <vTaskStartScheduler+0xcc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3354      	adds	r3, #84	@ 0x54
 8004886:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <vTaskStartScheduler+0xd0>)
 8004888:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <vTaskStartScheduler+0xd4>)
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004892:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <vTaskStartScheduler+0xd8>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004898:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <vTaskStartScheduler+0xdc>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800489e:	f001 f8df 	bl	8005a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048a2:	e00f      	b.n	80048c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d10b      	bne.n	80048c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <vTaskStartScheduler+0xb4>
}
 80048c4:	bf00      	nop
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	08006c60 	.word	0x08006c60
 80048d0:	08004f1d 	.word	0x08004f1d
 80048d4:	20000e84 	.word	0x20000e84
 80048d8:	2000098c 	.word	0x2000098c
 80048dc:	20000058 	.word	0x20000058
 80048e0:	20000e80 	.word	0x20000e80
 80048e4:	20000e6c 	.word	0x20000e6c
 80048e8:	20000e64 	.word	0x20000e64

080048ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048f0:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <vTaskSuspendAll+0x18>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	4a03      	ldr	r2, [pc, #12]	@ (8004904 <vTaskSuspendAll+0x18>)
 80048f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	20000e88 	.word	0x20000e88

08004908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004916:	4b42      	ldr	r3, [pc, #264]	@ (8004a20 <xTaskResumeAll+0x118>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <xTaskResumeAll+0x2e>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	603b      	str	r3, [r7, #0]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004936:	f001 f937 	bl	8005ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800493a:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <xTaskResumeAll+0x118>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3b01      	subs	r3, #1
 8004940:	4a37      	ldr	r2, [pc, #220]	@ (8004a20 <xTaskResumeAll+0x118>)
 8004942:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004944:	4b36      	ldr	r3, [pc, #216]	@ (8004a20 <xTaskResumeAll+0x118>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d162      	bne.n	8004a12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800494c:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <xTaskResumeAll+0x11c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05e      	beq.n	8004a12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004954:	e02f      	b.n	80049b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004956:	4b34      	ldr	r3, [pc, #208]	@ (8004a28 <xTaskResumeAll+0x120>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3318      	adds	r3, #24
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff f83a 	bl	80039dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff f835 	bl	80039dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004976:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <xTaskResumeAll+0x124>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d903      	bls.n	8004986 <xTaskResumeAll+0x7e>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <xTaskResumeAll+0x124>)
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4a27      	ldr	r2, [pc, #156]	@ (8004a30 <xTaskResumeAll+0x128>)
 8004994:	441a      	add	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe ffc0 	bl	8003922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	4b23      	ldr	r3, [pc, #140]	@ (8004a34 <xTaskResumeAll+0x12c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80049b0:	4b21      	ldr	r3, [pc, #132]	@ (8004a38 <xTaskResumeAll+0x130>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <xTaskResumeAll+0x120>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1cb      	bne.n	8004956 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049c4:	f000 fb66 	bl	8005094 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049c8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <xTaskResumeAll+0x134>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049d4:	f000 f846 	bl	8004a64 <xTaskIncrementTick>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80049de:	4b16      	ldr	r3, [pc, #88]	@ (8004a38 <xTaskResumeAll+0x130>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f1      	bne.n	80049d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80049f0:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <xTaskResumeAll+0x134>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049f6:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <xTaskResumeAll+0x130>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a02:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <xTaskResumeAll+0x138>)
 8004a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a12:	f001 f8fb 	bl	8005c0c <vPortExitCritical>

	return xAlreadyYielded;
 8004a16:	68bb      	ldr	r3, [r7, #8]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000e88 	.word	0x20000e88
 8004a24:	20000e60 	.word	0x20000e60
 8004a28:	20000e20 	.word	0x20000e20
 8004a2c:	20000e68 	.word	0x20000e68
 8004a30:	20000990 	.word	0x20000990
 8004a34:	2000098c 	.word	0x2000098c
 8004a38:	20000e74 	.word	0x20000e74
 8004a3c:	20000e70 	.word	0x20000e70
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a4a:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <xTaskGetTickCount+0x1c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a50:	687b      	ldr	r3, [r7, #4]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000e64 	.word	0x20000e64

08004a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bac <xTaskIncrementTick+0x148>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f040 8090 	bne.w	8004b98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a78:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb0 <xTaskIncrementTick+0x14c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a80:	4a4b      	ldr	r2, [pc, #300]	@ (8004bb0 <xTaskIncrementTick+0x14c>)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d121      	bne.n	8004ad0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a8c:	4b49      	ldr	r3, [pc, #292]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	603b      	str	r3, [r7, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <xTaskIncrementTick+0x46>
 8004aae:	4b41      	ldr	r3, [pc, #260]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	4b40      	ldr	r3, [pc, #256]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb8 <xTaskIncrementTick+0x154>)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bbc <xTaskIncrementTick+0x158>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bbc <xTaskIncrementTick+0x158>)
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	f000 fae2 	bl	8005094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc0 <xTaskIncrementTick+0x15c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d349      	bcc.n	8004b6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ada:	4b36      	ldr	r3, [pc, #216]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d104      	bne.n	8004aee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae4:	4b36      	ldr	r3, [pc, #216]	@ (8004bc0 <xTaskIncrementTick+0x15c>)
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	601a      	str	r2, [r3, #0]
					break;
 8004aec:	e03f      	b.n	8004b6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aee:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <xTaskIncrementTick+0x150>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d203      	bcs.n	8004b0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b06:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <xTaskIncrementTick+0x15c>)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b0c:	e02f      	b.n	8004b6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe ff62 	bl	80039dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	3318      	adds	r3, #24
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe ff59 	bl	80039dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2e:	4b25      	ldr	r3, [pc, #148]	@ (8004bc4 <xTaskIncrementTick+0x160>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d903      	bls.n	8004b3e <xTaskIncrementTick+0xda>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	4a22      	ldr	r2, [pc, #136]	@ (8004bc4 <xTaskIncrementTick+0x160>)
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc8 <xTaskIncrementTick+0x164>)
 8004b4c:	441a      	add	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fe fee4 	bl	8003922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <xTaskIncrementTick+0x168>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3b8      	bcc.n	8004ada <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b6c:	e7b5      	b.n	8004ada <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b6e:	4b17      	ldr	r3, [pc, #92]	@ (8004bcc <xTaskIncrementTick+0x168>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b74:	4914      	ldr	r1, [pc, #80]	@ (8004bc8 <xTaskIncrementTick+0x164>)
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d901      	bls.n	8004b8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b8a:	4b11      	ldr	r3, [pc, #68]	@ (8004bd0 <xTaskIncrementTick+0x16c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004b92:	2301      	movs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e004      	b.n	8004ba2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b98:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd4 <xTaskIncrementTick+0x170>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd4 <xTaskIncrementTick+0x170>)
 8004ba0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ba2:	697b      	ldr	r3, [r7, #20]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000e88 	.word	0x20000e88
 8004bb0:	20000e64 	.word	0x20000e64
 8004bb4:	20000e18 	.word	0x20000e18
 8004bb8:	20000e1c 	.word	0x20000e1c
 8004bbc:	20000e78 	.word	0x20000e78
 8004bc0:	20000e80 	.word	0x20000e80
 8004bc4:	20000e68 	.word	0x20000e68
 8004bc8:	20000990 	.word	0x20000990
 8004bcc:	2000098c 	.word	0x2000098c
 8004bd0:	20000e74 	.word	0x20000e74
 8004bd4:	20000e70 	.word	0x20000e70

08004bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bde:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <vTaskSwitchContext+0xb4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004be6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c90 <vTaskSwitchContext+0xb8>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bec:	e047      	b.n	8004c7e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004bee:	4b28      	ldr	r3, [pc, #160]	@ (8004c90 <vTaskSwitchContext+0xb8>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf4:	4b27      	ldr	r3, [pc, #156]	@ (8004c94 <vTaskSwitchContext+0xbc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e011      	b.n	8004c20 <vTaskSwitchContext+0x48>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <vTaskSwitchContext+0x42>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	607b      	str	r3, [r7, #4]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <vTaskSwitchContext+0x3e>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	491d      	ldr	r1, [pc, #116]	@ (8004c98 <vTaskSwitchContext+0xc0>)
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0e3      	beq.n	8004bfc <vTaskSwitchContext+0x24>
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <vTaskSwitchContext+0xc0>)
 8004c40:	4413      	add	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3308      	adds	r3, #8
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d104      	bne.n	8004c64 <vTaskSwitchContext+0x8c>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c9c <vTaskSwitchContext+0xc4>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4a09      	ldr	r2, [pc, #36]	@ (8004c94 <vTaskSwitchContext+0xbc>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c74:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <vTaskSwitchContext+0xc4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3354      	adds	r3, #84	@ 0x54
 8004c7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ca0 <vTaskSwitchContext+0xc8>)
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000e88 	.word	0x20000e88
 8004c90:	20000e74 	.word	0x20000e74
 8004c94:	20000e68 	.word	0x20000e68
 8004c98:	20000990 	.word	0x20000990
 8004c9c:	2000098c 	.word	0x2000098c
 8004ca0:	20000058 	.word	0x20000058

08004ca4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	60fb      	str	r3, [r7, #12]
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ccc:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <vTaskPlaceOnEventList+0x48>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fe fe48 	bl	800396a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cda:	2101      	movs	r1, #1
 8004cdc:	6838      	ldr	r0, [r7, #0]
 8004cde:	f000 fa87 	bl	80051f0 <prvAddCurrentTaskToDelayedList>
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000098c 	.word	0x2000098c

08004cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop
 8004d18:	e7fd      	b.n	8004d16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3318      	adds	r3, #24
 8004d20:	4619      	mov	r1, r3
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fe fdfd 	bl	8003922 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	68b8      	ldr	r0, [r7, #8]
 8004d38:	f000 fa5a 	bl	80051f0 <prvAddCurrentTaskToDelayedList>
	}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	2000098c 	.word	0x2000098c

08004d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60fb      	str	r3, [r7, #12]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3318      	adds	r3, #24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fe2e 	bl	80039dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d80:	4b1d      	ldr	r3, [pc, #116]	@ (8004df8 <xTaskRemoveFromEventList+0xb0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11d      	bne.n	8004dc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fe25 	bl	80039dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d96:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <xTaskRemoveFromEventList+0xb4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <xTaskRemoveFromEventList+0x5e>
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a16      	ldr	r2, [pc, #88]	@ (8004dfc <xTaskRemoveFromEventList+0xb4>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4a13      	ldr	r2, [pc, #76]	@ (8004e00 <xTaskRemoveFromEventList+0xb8>)
 8004db4:	441a      	add	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7fe fdb0 	bl	8003922 <vListInsertEnd>
 8004dc2:	e005      	b.n	8004dd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	3318      	adds	r3, #24
 8004dc8:	4619      	mov	r1, r3
 8004dca:	480e      	ldr	r0, [pc, #56]	@ (8004e04 <xTaskRemoveFromEventList+0xbc>)
 8004dcc:	f7fe fda9 	bl	8003922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <xTaskRemoveFromEventList+0xc0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d905      	bls.n	8004dea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <xTaskRemoveFromEventList+0xc4>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e001      	b.n	8004dee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000e88 	.word	0x20000e88
 8004dfc:	20000e68 	.word	0x20000e68
 8004e00:	20000990 	.word	0x20000990
 8004e04:	20000e20 	.word	0x20000e20
 8004e08:	2000098c 	.word	0x2000098c
 8004e0c:	20000e74 	.word	0x20000e74

08004e10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e18:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <vTaskInternalSetTimeOutState+0x24>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <vTaskInternalSetTimeOutState+0x28>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	605a      	str	r2, [r3, #4]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	20000e78 	.word	0x20000e78
 8004e38:	20000e64 	.word	0x20000e64

08004e3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	613b      	str	r3, [r7, #16]
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	60fb      	str	r3, [r7, #12]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004e82:	f000 fe91 	bl	8005ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e86:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <xTaskCheckForTimeOut+0xc0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d102      	bne.n	8004ea6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e023      	b.n	8004eee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <xTaskCheckForTimeOut+0xc4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d007      	beq.n	8004ec2 <xTaskCheckForTimeOut+0x86>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e015      	b.n	8004eee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d20b      	bcs.n	8004ee4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff99 	bl	8004e10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e004      	b.n	8004eee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eea:	2301      	movs	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eee:	f000 fe8d 	bl	8005c0c <vPortExitCritical>

	return xReturn;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000e64 	.word	0x20000e64
 8004f00:	20000e78 	.word	0x20000e78

08004f04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f08:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <vTaskMissedYield+0x14>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
}
 8004f0e:	bf00      	nop
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	20000e74 	.word	0x20000e74

08004f1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f24:	f000 f852 	bl	8004fcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <prvIdleTask+0x28>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d9f9      	bls.n	8004f24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f30:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <prvIdleTask+0x2c>)
 8004f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f40:	e7f0      	b.n	8004f24 <prvIdleTask+0x8>
 8004f42:	bf00      	nop
 8004f44:	20000990 	.word	0x20000990
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e00c      	b.n	8004f72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4a12      	ldr	r2, [pc, #72]	@ (8004fac <prvInitialiseTaskLists+0x60>)
 8004f64:	4413      	add	r3, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe fcae 	bl	80038c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b37      	cmp	r3, #55	@ 0x37
 8004f76:	d9ef      	bls.n	8004f58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f78:	480d      	ldr	r0, [pc, #52]	@ (8004fb0 <prvInitialiseTaskLists+0x64>)
 8004f7a:	f7fe fca5 	bl	80038c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f7e:	480d      	ldr	r0, [pc, #52]	@ (8004fb4 <prvInitialiseTaskLists+0x68>)
 8004f80:	f7fe fca2 	bl	80038c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f84:	480c      	ldr	r0, [pc, #48]	@ (8004fb8 <prvInitialiseTaskLists+0x6c>)
 8004f86:	f7fe fc9f 	bl	80038c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f8a:	480c      	ldr	r0, [pc, #48]	@ (8004fbc <prvInitialiseTaskLists+0x70>)
 8004f8c:	f7fe fc9c 	bl	80038c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f90:	480b      	ldr	r0, [pc, #44]	@ (8004fc0 <prvInitialiseTaskLists+0x74>)
 8004f92:	f7fe fc99 	bl	80038c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <prvInitialiseTaskLists+0x78>)
 8004f98:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <prvInitialiseTaskLists+0x64>)
 8004f9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc8 <prvInitialiseTaskLists+0x7c>)
 8004f9e:	4a05      	ldr	r2, [pc, #20]	@ (8004fb4 <prvInitialiseTaskLists+0x68>)
 8004fa0:	601a      	str	r2, [r3, #0]
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000990 	.word	0x20000990
 8004fb0:	20000df0 	.word	0x20000df0
 8004fb4:	20000e04 	.word	0x20000e04
 8004fb8:	20000e20 	.word	0x20000e20
 8004fbc:	20000e34 	.word	0x20000e34
 8004fc0:	20000e4c 	.word	0x20000e4c
 8004fc4:	20000e18 	.word	0x20000e18
 8004fc8:	20000e1c 	.word	0x20000e1c

08004fcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fd2:	e019      	b.n	8005008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fd4:	f000 fde8 	bl	8005ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd8:	4b10      	ldr	r3, [pc, #64]	@ (800501c <prvCheckTasksWaitingTermination+0x50>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe fcf9 	bl	80039dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fea:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <prvCheckTasksWaitingTermination+0x54>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8005020 <prvCheckTasksWaitingTermination+0x54>)
 8004ff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <prvCheckTasksWaitingTermination+0x58>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8005024 <prvCheckTasksWaitingTermination+0x58>)
 8004ffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ffe:	f000 fe05 	bl	8005c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f810 	bl	8005028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005008:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <prvCheckTasksWaitingTermination+0x58>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e1      	bne.n	8004fd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005010:	bf00      	nop
 8005012:	bf00      	nop
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000e34 	.word	0x20000e34
 8005020:	20000e60 	.word	0x20000e60
 8005024:	20000e48 	.word	0x20000e48

08005028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3354      	adds	r3, #84	@ 0x54
 8005034:	4618      	mov	r0, r3
 8005036:	f001 f903 	bl	8006240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	4618      	mov	r0, r3
 800504a:	f000 ff9d 	bl	8005f88 <vPortFree>
				vPortFree( pxTCB );
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 ff9a 	bl	8005f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005054:	e019      	b.n	800508a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800505c:	2b01      	cmp	r3, #1
 800505e:	d103      	bne.n	8005068 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 ff91 	bl	8005f88 <vPortFree>
	}
 8005066:	e010      	b.n	800508a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800506e:	2b02      	cmp	r3, #2
 8005070:	d00b      	beq.n	800508a <prvDeleteTCB+0x62>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60fb      	str	r3, [r7, #12]
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	e7fd      	b.n	8005086 <prvDeleteTCB+0x5e>
	}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <prvResetNextTaskUnblockTime+0x38>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050a4:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <prvResetNextTaskUnblockTime+0x3c>)
 80050a6:	f04f 32ff 	mov.w	r2, #4294967295
 80050aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050ac:	e008      	b.n	80050c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ae:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <prvResetNextTaskUnblockTime+0x38>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a04      	ldr	r2, [pc, #16]	@ (80050d0 <prvResetNextTaskUnblockTime+0x3c>)
 80050be:	6013      	str	r3, [r2, #0]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20000e18 	.word	0x20000e18
 80050d0:	20000e80 	.word	0x20000e80

080050d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050da:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <xTaskGetSchedulerState+0x34>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050e2:	2301      	movs	r3, #1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e008      	b.n	80050fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e8:	4b08      	ldr	r3, [pc, #32]	@ (800510c <xTaskGetSchedulerState+0x38>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050f0:	2302      	movs	r3, #2
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	e001      	b.n	80050fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050fa:	687b      	ldr	r3, [r7, #4]
	}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	20000e6c 	.word	0x20000e6c
 800510c:	20000e88 	.word	0x20000e88

08005110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d058      	beq.n	80051d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005126:	4b2f      	ldr	r3, [pc, #188]	@ (80051e4 <xTaskPriorityDisinherit+0xd4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	429a      	cmp	r2, r3
 800512e:	d00b      	beq.n	8005148 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60bb      	str	r3, [r7, #8]
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	e7fd      	b.n	8005164 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517a:	429a      	cmp	r2, r3
 800517c:	d02c      	beq.n	80051d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d128      	bne.n	80051d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	3304      	adds	r3, #4
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe fc26 	bl	80039dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a8:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <xTaskPriorityDisinherit+0xd8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <xTaskPriorityDisinherit+0xa8>
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	4a0c      	ldr	r2, [pc, #48]	@ (80051e8 <xTaskPriorityDisinherit+0xd8>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a09      	ldr	r2, [pc, #36]	@ (80051ec <xTaskPriorityDisinherit+0xdc>)
 80051c6:	441a      	add	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe fba7 	bl	8003922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051d4:	2301      	movs	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051d8:	697b      	ldr	r3, [r7, #20]
	}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	2000098c 	.word	0x2000098c
 80051e8:	20000e68 	.word	0x20000e68
 80051ec:	20000990 	.word	0x20000990

080051f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051fa:	4b21      	ldr	r3, [pc, #132]	@ (8005280 <prvAddCurrentTaskToDelayedList+0x90>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005200:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <prvAddCurrentTaskToDelayedList+0x94>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3304      	adds	r3, #4
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fbe8 	bl	80039dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d10a      	bne.n	800522a <prvAddCurrentTaskToDelayedList+0x3a>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800521a:	4b1a      	ldr	r3, [pc, #104]	@ (8005284 <prvAddCurrentTaskToDelayedList+0x94>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4819      	ldr	r0, [pc, #100]	@ (8005288 <prvAddCurrentTaskToDelayedList+0x98>)
 8005224:	f7fe fb7d 	bl	8003922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005228:	e026      	b.n	8005278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4413      	add	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005232:	4b14      	ldr	r3, [pc, #80]	@ (8005284 <prvAddCurrentTaskToDelayedList+0x94>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	429a      	cmp	r2, r3
 8005240:	d209      	bcs.n	8005256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <prvAddCurrentTaskToDelayedList+0x94>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7fe fb8b 	bl	800396a <vListInsert>
}
 8005254:	e010      	b.n	8005278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005256:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b0a      	ldr	r3, [pc, #40]	@ (8005284 <prvAddCurrentTaskToDelayedList+0x94>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3304      	adds	r3, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f7fe fb81 	bl	800396a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005268:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d202      	bcs.n	8005278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005272:	4a08      	ldr	r2, [pc, #32]	@ (8005294 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	6013      	str	r3, [r2, #0]
}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000e64 	.word	0x20000e64
 8005284:	2000098c 	.word	0x2000098c
 8005288:	20000e4c 	.word	0x20000e4c
 800528c:	20000e1c 	.word	0x20000e1c
 8005290:	20000e18 	.word	0x20000e18
 8005294:	20000e80 	.word	0x20000e80

08005298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80052a2:	f000 fb13 	bl	80058cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80052a6:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <xTimerCreateTimerTask+0x84>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d021      	beq.n	80052f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052b6:	1d3a      	adds	r2, r7, #4
 80052b8:	f107 0108 	add.w	r1, r7, #8
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe fae7 	bl	8003894 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	9202      	str	r2, [sp, #8]
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	2302      	movs	r3, #2
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	2300      	movs	r3, #0
 80052d6:	460a      	mov	r2, r1
 80052d8:	4911      	ldr	r1, [pc, #68]	@ (8005320 <xTimerCreateTimerTask+0x88>)
 80052da:	4812      	ldr	r0, [pc, #72]	@ (8005324 <xTimerCreateTimerTask+0x8c>)
 80052dc:	f7ff f8a2 	bl	8004424 <xTaskCreateStatic>
 80052e0:	4603      	mov	r3, r0
 80052e2:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <xTimerCreateTimerTask+0x90>)
 80052e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <xTimerCreateTimerTask+0x90>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052ee:	2301      	movs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	613b      	str	r3, [r7, #16]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005310:	697b      	ldr	r3, [r7, #20]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000ebc 	.word	0x20000ebc
 8005320:	08006c68 	.word	0x08006c68
 8005324:	08005465 	.word	0x08005465
 8005328:	20000ec0 	.word	0x20000ec0

0800532c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08a      	sub	sp, #40	@ 0x28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <xTimerGenericCommand+0x30>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	623b      	str	r3, [r7, #32]
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800535c:	4b19      	ldr	r3, [pc, #100]	@ (80053c4 <xTimerGenericCommand+0x98>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d02a      	beq.n	80053ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b05      	cmp	r3, #5
 8005374:	dc18      	bgt.n	80053a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005376:	f7ff fead 	bl	80050d4 <xTaskGetSchedulerState>
 800537a:	4603      	mov	r3, r0
 800537c:	2b02      	cmp	r3, #2
 800537e:	d109      	bne.n	8005394 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005380:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <xTimerGenericCommand+0x98>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	f107 0110 	add.w	r1, r7, #16
 8005388:	2300      	movs	r3, #0
 800538a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538c:	f7fe fc5a 	bl	8003c44 <xQueueGenericSend>
 8005390:	6278      	str	r0, [r7, #36]	@ 0x24
 8005392:	e012      	b.n	80053ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <xTimerGenericCommand+0x98>)
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	f107 0110 	add.w	r1, r7, #16
 800539c:	2300      	movs	r3, #0
 800539e:	2200      	movs	r2, #0
 80053a0:	f7fe fc50 	bl	8003c44 <xQueueGenericSend>
 80053a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80053a6:	e008      	b.n	80053ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <xTimerGenericCommand+0x98>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	f107 0110 	add.w	r1, r7, #16
 80053b0:	2300      	movs	r3, #0
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	f7fe fd48 	bl	8003e48 <xQueueGenericSendFromISR>
 80053b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3728      	adds	r7, #40	@ 0x28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000ebc 	.word	0x20000ebc

080053c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d2:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <prvProcessExpiredTimer+0x98>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3304      	adds	r3, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe fafb 	bl	80039dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d023      	beq.n	800543c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	18d1      	adds	r1, r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	6978      	ldr	r0, [r7, #20]
 8005402:	f000 f8d5 	bl	80055b0 <prvInsertTimerInActiveList>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d020      	beq.n	800544e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800540c:	2300      	movs	r3, #0
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	2300      	movs	r3, #0
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	2100      	movs	r1, #0
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f7ff ff88 	bl	800532c <xTimerGenericCommand>
 800541c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d114      	bne.n	800544e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60fb      	str	r3, [r7, #12]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	4798      	blx	r3
}
 8005456:	bf00      	nop
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000eb4 	.word	0x20000eb4

08005464 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	4618      	mov	r0, r3
 8005472:	f000 f859 	bl	8005528 <prvGetNextExpireTime>
 8005476:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4619      	mov	r1, r3
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f805 	bl	800548c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005482:	f000 f8d7 	bl	8005634 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005486:	bf00      	nop
 8005488:	e7f0      	b.n	800546c <prvTimerTask+0x8>
	...

0800548c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005496:	f7ff fa29 	bl	80048ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f866 	bl	8005570 <prvSampleTimeNow>
 80054a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d130      	bne.n	800550e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <prvProcessTimerOrBlockTask+0x3c>
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d806      	bhi.n	80054c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054ba:	f7ff fa25 	bl	8004908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff ff81 	bl	80053c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054c6:	e024      	b.n	8005512 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054ce:	4b13      	ldr	r3, [pc, #76]	@ (800551c <prvProcessTimerOrBlockTask+0x90>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <prvProcessTimerOrBlockTask+0x50>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <prvProcessTimerOrBlockTask+0x52>
 80054dc:	2300      	movs	r3, #0
 80054de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <prvProcessTimerOrBlockTask+0x94>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	4619      	mov	r1, r3
 80054ee:	f7fe ff65 	bl	80043bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054f2:	f7ff fa09 	bl	8004908 <xTaskResumeAll>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80054fc:	4b09      	ldr	r3, [pc, #36]	@ (8005524 <prvProcessTimerOrBlockTask+0x98>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
}
 800550c:	e001      	b.n	8005512 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800550e:	f7ff f9fb 	bl	8004908 <xTaskResumeAll>
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000eb8 	.word	0x20000eb8
 8005520:	20000ebc 	.word	0x20000ebc
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005530:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <prvGetNextExpireTime+0x44>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <prvGetNextExpireTime+0x16>
 800553a:	2201      	movs	r2, #1
 800553c:	e000      	b.n	8005540 <prvGetNextExpireTime+0x18>
 800553e:	2200      	movs	r2, #0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d105      	bne.n	8005558 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800554c:	4b07      	ldr	r3, [pc, #28]	@ (800556c <prvGetNextExpireTime+0x44>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e001      	b.n	800555c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000eb4 	.word	0x20000eb4

08005570 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005578:	f7ff fa64 	bl	8004a44 <xTaskGetTickCount>
 800557c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800557e:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <prvSampleTimeNow+0x3c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	429a      	cmp	r2, r3
 8005586:	d205      	bcs.n	8005594 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005588:	f000 f93a 	bl	8005800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e002      	b.n	800559a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800559a:	4a04      	ldr	r2, [pc, #16]	@ (80055ac <prvSampleTimeNow+0x3c>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000ec4 	.word	0x20000ec4

080055b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d812      	bhi.n	80055fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e01b      	b.n	8005622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055ea:	4b10      	ldr	r3, [pc, #64]	@ (800562c <prvInsertTimerInActiveList+0x7c>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3304      	adds	r3, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7fe f9b8 	bl	800396a <vListInsert>
 80055fa:	e012      	b.n	8005622 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d206      	bcs.n	8005612 <prvInsertTimerInActiveList+0x62>
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d302      	bcc.n	8005612 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e007      	b.n	8005622 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005612:	4b07      	ldr	r3, [pc, #28]	@ (8005630 <prvInsertTimerInActiveList+0x80>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3304      	adds	r3, #4
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f7fe f9a4 	bl	800396a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005622:	697b      	ldr	r3, [r7, #20]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000eb8 	.word	0x20000eb8
 8005630:	20000eb4 	.word	0x20000eb4

08005634 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	@ 0x38
 8005638:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800563a:	e0ce      	b.n	80057da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	da19      	bge.n	8005676 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	3304      	adds	r3, #4
 8005646:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	61fb      	str	r3, [r7, #28]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800566c:	6850      	ldr	r0, [r2, #4]
 800566e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005670:	6892      	ldr	r2, [r2, #8]
 8005672:	4611      	mov	r1, r2
 8005674:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f2c0 80ae 	blt.w	80057da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568c:	3304      	adds	r3, #4
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe f9a4 	bl	80039dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005694:	463b      	mov	r3, r7
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff ff6a 	bl	8005570 <prvSampleTimeNow>
 800569c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b09      	cmp	r3, #9
 80056a2:	f200 8097 	bhi.w	80057d4 <prvProcessReceivedCommands+0x1a0>
 80056a6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <prvProcessReceivedCommands+0x78>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	0800574b 	.word	0x0800574b
 80056bc:	0800575f 	.word	0x0800575f
 80056c0:	080057ab 	.word	0x080057ab
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056d5 	.word	0x080056d5
 80056cc:	0800574b 	.word	0x0800574b
 80056d0:	0800575f 	.word	0x0800575f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	18d1      	adds	r1, r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056f4:	f7ff ff5c 	bl	80055b0 <prvInsertTimerInActiveList>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d06c      	beq.n	80057d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005704:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d061      	beq.n	80057d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	441a      	add	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	2100      	movs	r1, #0
 8005724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005726:	f7ff fe01 	bl	800532c <xTimerGenericCommand>
 800572a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d152      	bne.n	80057d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	61bb      	str	r3, [r7, #24]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800575c:	e03d      	b.n	80057da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	18d1      	adds	r1, r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057a4:	f7ff ff04 	bl	80055b0 <prvInsertTimerInActiveList>
					break;
 80057a8:	e017      	b.n	80057da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80057b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057ba:	f000 fbe5 	bl	8005f88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057be:	e00c      	b.n	80057da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80057d2:	e002      	b.n	80057da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80057d4:	bf00      	nop
 80057d6:	e000      	b.n	80057da <prvProcessReceivedCommands+0x1a6>
					break;
 80057d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057da:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <prvProcessReceivedCommands+0x1c8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1d39      	adds	r1, r7, #4
 80057e0:	2200      	movs	r2, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fbce 	bl	8003f84 <xQueueReceive>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f47f af26 	bne.w	800563c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3730      	adds	r7, #48	@ 0x30
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000ebc 	.word	0x20000ebc

08005800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005806:	e049      	b.n	800589c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005808:	4b2e      	ldr	r3, [pc, #184]	@ (80058c4 <prvSwitchTimerLists+0xc4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005812:	4b2c      	ldr	r3, [pc, #176]	@ (80058c4 <prvSwitchTimerLists+0xc4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe f8db 	bl	80039dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02f      	beq.n	800589c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	429a      	cmp	r2, r3
 800584c:	d90e      	bls.n	800586c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800585a:	4b1a      	ldr	r3, [pc, #104]	@ (80058c4 <prvSwitchTimerLists+0xc4>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe f880 	bl	800396a <vListInsert>
 800586a:	e017      	b.n	800589c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	2300      	movs	r3, #0
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	2100      	movs	r1, #0
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fd58 	bl	800532c <xTimerGenericCommand>
 800587c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	603b      	str	r3, [r7, #0]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <prvSwitchTimerLists+0xc4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1b0      	bne.n	8005808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058a6:	4b07      	ldr	r3, [pc, #28]	@ (80058c4 <prvSwitchTimerLists+0xc4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058ac:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <prvSwitchTimerLists+0xc8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <prvSwitchTimerLists+0xc4>)
 80058b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058b4:	4a04      	ldr	r2, [pc, #16]	@ (80058c8 <prvSwitchTimerLists+0xc8>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6013      	str	r3, [r2, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000eb4 	.word	0x20000eb4
 80058c8:	20000eb8 	.word	0x20000eb8

080058cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058d2:	f000 f969 	bl	8005ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058d6:	4b15      	ldr	r3, [pc, #84]	@ (800592c <prvCheckForValidListAndQueue+0x60>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d120      	bne.n	8005920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058de:	4814      	ldr	r0, [pc, #80]	@ (8005930 <prvCheckForValidListAndQueue+0x64>)
 80058e0:	f7fd fff2 	bl	80038c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058e4:	4813      	ldr	r0, [pc, #76]	@ (8005934 <prvCheckForValidListAndQueue+0x68>)
 80058e6:	f7fd ffef 	bl	80038c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058ea:	4b13      	ldr	r3, [pc, #76]	@ (8005938 <prvCheckForValidListAndQueue+0x6c>)
 80058ec:	4a10      	ldr	r2, [pc, #64]	@ (8005930 <prvCheckForValidListAndQueue+0x64>)
 80058ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058f0:	4b12      	ldr	r3, [pc, #72]	@ (800593c <prvCheckForValidListAndQueue+0x70>)
 80058f2:	4a10      	ldr	r2, [pc, #64]	@ (8005934 <prvCheckForValidListAndQueue+0x68>)
 80058f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058f6:	2300      	movs	r3, #0
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4b11      	ldr	r3, [pc, #68]	@ (8005940 <prvCheckForValidListAndQueue+0x74>)
 80058fc:	4a11      	ldr	r2, [pc, #68]	@ (8005944 <prvCheckForValidListAndQueue+0x78>)
 80058fe:	2110      	movs	r1, #16
 8005900:	200a      	movs	r0, #10
 8005902:	f7fe f8ff 	bl	8003b04 <xQueueGenericCreateStatic>
 8005906:	4603      	mov	r3, r0
 8005908:	4a08      	ldr	r2, [pc, #32]	@ (800592c <prvCheckForValidListAndQueue+0x60>)
 800590a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800590c:	4b07      	ldr	r3, [pc, #28]	@ (800592c <prvCheckForValidListAndQueue+0x60>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <prvCheckForValidListAndQueue+0x60>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	490b      	ldr	r1, [pc, #44]	@ (8005948 <prvCheckForValidListAndQueue+0x7c>)
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fd24 	bl	8004368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005920:	f000 f974 	bl	8005c0c <vPortExitCritical>
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000ebc 	.word	0x20000ebc
 8005930:	20000e8c 	.word	0x20000e8c
 8005934:	20000ea0 	.word	0x20000ea0
 8005938:	20000eb4 	.word	0x20000eb4
 800593c:	20000eb8 	.word	0x20000eb8
 8005940:	20000f68 	.word	0x20000f68
 8005944:	20000ec8 	.word	0x20000ec8
 8005948:	08006c70 	.word	0x08006c70

0800594c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3b04      	subs	r3, #4
 800595c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3b04      	subs	r3, #4
 800596a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b04      	subs	r3, #4
 800597a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800597c:	4a0c      	ldr	r2, [pc, #48]	@ (80059b0 <pxPortInitialiseStack+0x64>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b14      	subs	r3, #20
 8005986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f06f 0202 	mvn.w	r2, #2
 800599a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3b20      	subs	r3, #32
 80059a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059a2:	68fb      	ldr	r3, [r7, #12]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	080059b5 	.word	0x080059b5

080059b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059be:	4b13      	ldr	r3, [pc, #76]	@ (8005a0c <prvTaskExitError+0x58>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d00b      	beq.n	80059e0 <prvTaskExitError+0x2c>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	e7fd      	b.n	80059dc <prvTaskExitError+0x28>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60bb      	str	r3, [r7, #8]
}
 80059f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059f4:	bf00      	nop
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0fc      	beq.n	80059f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000054 	.word	0x20000054

08005a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a10:	4b07      	ldr	r3, [pc, #28]	@ (8005a30 <pxCurrentTCBConst2>)
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	6808      	ldr	r0, [r1, #0]
 8005a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	f380 8809 	msr	PSP, r0
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8811 	msr	BASEPRI, r0
 8005a2a:	4770      	bx	lr
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst2>:
 8005a30:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a38:	4808      	ldr	r0, [pc, #32]	@ (8005a5c <prvPortStartFirstTask+0x24>)
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	f380 8808 	msr	MSP, r0
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8814 	msr	CONTROL, r0
 8005a4a:	b662      	cpsie	i
 8005a4c:	b661      	cpsie	f
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	df00      	svc	0
 8005a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a5a:	bf00      	nop
 8005a5c:	e000ed08 	.word	0xe000ed08

08005a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a66:	4b47      	ldr	r3, [pc, #284]	@ (8005b84 <xPortStartScheduler+0x124>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a47      	ldr	r2, [pc, #284]	@ (8005b88 <xPortStartScheduler+0x128>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10b      	bne.n	8005a88 <xPortStartScheduler+0x28>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	e7fd      	b.n	8005a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a88:	4b3e      	ldr	r3, [pc, #248]	@ (8005b84 <xPortStartScheduler+0x124>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b8c <xPortStartScheduler+0x12c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10b      	bne.n	8005aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aaa:	4b39      	ldr	r3, [pc, #228]	@ (8005b90 <xPortStartScheduler+0x130>)
 8005aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	22ff      	movs	r2, #255	@ 0xff
 8005aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4b31      	ldr	r3, [pc, #196]	@ (8005b94 <xPortStartScheduler+0x134>)
 8005ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad8:	e009      	b.n	8005aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005ada:	4b2f      	ldr	r3, [pc, #188]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af6:	2b80      	cmp	r3, #128	@ 0x80
 8005af8:	d0ef      	beq.n	8005ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005afa:	4b27      	ldr	r3, [pc, #156]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f1c3 0307 	rsb	r3, r3, #7
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d00b      	beq.n	8005b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60bb      	str	r3, [r7, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	4a1c      	ldr	r2, [pc, #112]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b28:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b30:	4a19      	ldr	r2, [pc, #100]	@ (8005b98 <xPortStartScheduler+0x138>)
 8005b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b3c:	4b17      	ldr	r3, [pc, #92]	@ (8005b9c <xPortStartScheduler+0x13c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <xPortStartScheduler+0x13c>)
 8005b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b48:	4b14      	ldr	r3, [pc, #80]	@ (8005b9c <xPortStartScheduler+0x13c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <xPortStartScheduler+0x13c>)
 8005b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b54:	f000 f8da 	bl	8005d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b58:	4b11      	ldr	r3, [pc, #68]	@ (8005ba0 <xPortStartScheduler+0x140>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b5e:	f000 f8f9 	bl	8005d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b62:	4b10      	ldr	r3, [pc, #64]	@ (8005ba4 <xPortStartScheduler+0x144>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a0f      	ldr	r2, [pc, #60]	@ (8005ba4 <xPortStartScheduler+0x144>)
 8005b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b6e:	f7ff ff63 	bl	8005a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b72:	f7ff f831 	bl	8004bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b76:	f7ff ff1d 	bl	80059b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	e000ed00 	.word	0xe000ed00
 8005b88:	410fc271 	.word	0x410fc271
 8005b8c:	410fc270 	.word	0x410fc270
 8005b90:	e000e400 	.word	0xe000e400
 8005b94:	20000fb8 	.word	0x20000fb8
 8005b98:	20000fbc 	.word	0x20000fbc
 8005b9c:	e000ed20 	.word	0xe000ed20
 8005ba0:	20000054 	.word	0x20000054
 8005ba4:	e000ef34 	.word	0xe000ef34

08005ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	607b      	str	r3, [r7, #4]
}
 8005bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <vPortEnterCritical+0x5c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8005c04 <vPortEnterCritical+0x5c>)
 8005bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <vPortEnterCritical+0x5c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d110      	bne.n	8005bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005c08 <vPortEnterCritical+0x60>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	603b      	str	r3, [r7, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <vPortEnterCritical+0x4a>
	}
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000054 	.word	0x20000054
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c12:	4b12      	ldr	r3, [pc, #72]	@ (8005c5c <vPortExitCritical+0x50>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <vPortExitCritical+0x26>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	607b      	str	r3, [r7, #4]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c32:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <vPortExitCritical+0x50>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	4a08      	ldr	r2, [pc, #32]	@ (8005c5c <vPortExitCritical+0x50>)
 8005c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c3c:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <vPortExitCritical+0x50>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <vPortExitCritical+0x44>
 8005c44:	2300      	movs	r3, #0
 8005c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f383 8811 	msr	BASEPRI, r3
}
 8005c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20000054 	.word	0x20000054

08005c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c60:	f3ef 8009 	mrs	r0, PSP
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4b15      	ldr	r3, [pc, #84]	@ (8005cc0 <pxCurrentTCBConst>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f01e 0f10 	tst.w	lr, #16
 8005c70:	bf08      	it	eq
 8005c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	6010      	str	r0, [r2, #0]
 8005c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c84:	f380 8811 	msr	BASEPRI, r0
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f7fe ffa2 	bl	8004bd8 <vTaskSwitchContext>
 8005c94:	f04f 0000 	mov.w	r0, #0
 8005c98:	f380 8811 	msr	BASEPRI, r0
 8005c9c:	bc09      	pop	{r0, r3}
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	6808      	ldr	r0, [r1, #0]
 8005ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca6:	f01e 0f10 	tst.w	lr, #16
 8005caa:	bf08      	it	eq
 8005cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cb0:	f380 8809 	msr	PSP, r0
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst>:
 8005cc0:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ce2:	f7fe febf 	bl	8004a64 <xTaskIncrementTick>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cec:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <xPortSysTickHandler+0x40>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f383 8811 	msr	BASEPRI, r3
}
 8005cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d10:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d16:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <vPortSetupTimerInterrupt+0x38>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <vPortSetupTimerInterrupt+0x3c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0a      	ldr	r2, [pc, #40]	@ (8005d4c <vPortSetupTimerInterrupt+0x40>)
 8005d22:	fba2 2303 	umull	r2, r3, r2, r3
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <vPortSetupTimerInterrupt+0x44>)
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d2e:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <vPortSetupTimerInterrupt+0x34>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010
 8005d44:	e000e018 	.word	0xe000e018
 8005d48:	20000048 	.word	0x20000048
 8005d4c:	10624dd3 	.word	0x10624dd3
 8005d50:	e000e014 	.word	0xe000e014

08005d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d64 <vPortEnableVFP+0x10>
 8005d58:	6801      	ldr	r1, [r0, #0]
 8005d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d5e:	6001      	str	r1, [r0, #0]
 8005d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d62:	bf00      	nop
 8005d64:	e000ed88 	.word	0xe000ed88

08005d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d6e:	f3ef 8305 	mrs	r3, IPSR
 8005d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b0f      	cmp	r3, #15
 8005d78:	d915      	bls.n	8005da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d7a:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <vPortValidateInterruptPriority+0x74>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d84:	4b16      	ldr	r3, [pc, #88]	@ (8005de0 <vPortValidateInterruptPriority+0x78>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	7afa      	ldrb	r2, [r7, #11]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d20b      	bcs.n	8005da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005da6:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <vPortValidateInterruptPriority+0x7c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005dae:	4b0e      	ldr	r3, [pc, #56]	@ (8005de8 <vPortValidateInterruptPriority+0x80>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d90b      	bls.n	8005dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	603b      	str	r3, [r7, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <vPortValidateInterruptPriority+0x62>
	}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	e000e3f0 	.word	0xe000e3f0
 8005de0:	20000fb8 	.word	0x20000fb8
 8005de4:	e000ed0c 	.word	0xe000ed0c
 8005de8:	20000fbc 	.word	0x20000fbc

08005dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b08a      	sub	sp, #40	@ 0x28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005df8:	f7fe fd78 	bl	80048ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8005f70 <pvPortMalloc+0x184>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e04:	f000 f924 	bl	8006050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e08:	4b5a      	ldr	r3, [pc, #360]	@ (8005f74 <pvPortMalloc+0x188>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f040 8095 	bne.w	8005f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01e      	beq.n	8005e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f023 0307 	bic.w	r3, r3, #7
 8005e34:	3308      	adds	r3, #8
 8005e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <pvPortMalloc+0x6e>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	617b      	str	r3, [r7, #20]
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	e7fd      	b.n	8005e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d06f      	beq.n	8005f40 <pvPortMalloc+0x154>
 8005e60:	4b45      	ldr	r3, [pc, #276]	@ (8005f78 <pvPortMalloc+0x18c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d86a      	bhi.n	8005f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e6a:	4b44      	ldr	r3, [pc, #272]	@ (8005f7c <pvPortMalloc+0x190>)
 8005e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e6e:	4b43      	ldr	r3, [pc, #268]	@ (8005f7c <pvPortMalloc+0x190>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e74:	e004      	b.n	8005e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d903      	bls.n	8005e92 <pvPortMalloc+0xa6>
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f1      	bne.n	8005e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e92:	4b37      	ldr	r3, [pc, #220]	@ (8005f70 <pvPortMalloc+0x184>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d051      	beq.n	8005f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	4413      	add	r3, r2
 8005ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	1ad2      	subs	r2, r2, r3
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d920      	bls.n	8005f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	613b      	str	r3, [r7, #16]
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	e7fd      	b.n	8005ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005efa:	69b8      	ldr	r0, [r7, #24]
 8005efc:	f000 f90a 	bl	8006114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f00:	4b1d      	ldr	r3, [pc, #116]	@ (8005f78 <pvPortMalloc+0x18c>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8005f78 <pvPortMalloc+0x18c>)
 8005f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f78 <pvPortMalloc+0x18c>)
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <pvPortMalloc+0x194>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d203      	bcs.n	8005f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f1a:	4b17      	ldr	r3, [pc, #92]	@ (8005f78 <pvPortMalloc+0x18c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <pvPortMalloc+0x194>)
 8005f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4b13      	ldr	r3, [pc, #76]	@ (8005f74 <pvPortMalloc+0x188>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f36:	4b13      	ldr	r3, [pc, #76]	@ (8005f84 <pvPortMalloc+0x198>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a11      	ldr	r2, [pc, #68]	@ (8005f84 <pvPortMalloc+0x198>)
 8005f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f40:	f7fe fce2 	bl	8004908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <pvPortMalloc+0x17a>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60fb      	str	r3, [r7, #12]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <pvPortMalloc+0x176>
	return pvReturn;
 8005f66:	69fb      	ldr	r3, [r7, #28]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20004bc8 	.word	0x20004bc8
 8005f74:	20004bdc 	.word	0x20004bdc
 8005f78:	20004bcc 	.word	0x20004bcc
 8005f7c:	20004bc0 	.word	0x20004bc0
 8005f80:	20004bd0 	.word	0x20004bd0
 8005f84:	20004bd4 	.word	0x20004bd4

08005f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04f      	beq.n	800603a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	425b      	negs	r3, r3
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	4b25      	ldr	r3, [pc, #148]	@ (8006044 <vPortFree+0xbc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <vPortFree+0x46>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	e7fd      	b.n	8005fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <vPortFree+0x66>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60bb      	str	r3, [r7, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <vPortFree+0xbc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01e      	beq.n	800603a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11a      	bne.n	800603a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	4b0e      	ldr	r3, [pc, #56]	@ (8006044 <vPortFree+0xbc>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	43db      	mvns	r3, r3
 800600e:	401a      	ands	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006014:	f7fe fc6a 	bl	80048ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4b0a      	ldr	r3, [pc, #40]	@ (8006048 <vPortFree+0xc0>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4413      	add	r3, r2
 8006022:	4a09      	ldr	r2, [pc, #36]	@ (8006048 <vPortFree+0xc0>)
 8006024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006026:	6938      	ldr	r0, [r7, #16]
 8006028:	f000 f874 	bl	8006114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800602c:	4b07      	ldr	r3, [pc, #28]	@ (800604c <vPortFree+0xc4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	4a06      	ldr	r2, [pc, #24]	@ (800604c <vPortFree+0xc4>)
 8006034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006036:	f7fe fc67 	bl	8004908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20004bdc 	.word	0x20004bdc
 8006048:	20004bcc 	.word	0x20004bcc
 800604c:	20004bd8 	.word	0x20004bd8

08006050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800605a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800605c:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <prvHeapInit+0xac>)
 800605e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00c      	beq.n	8006084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3307      	adds	r3, #7
 800606e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0307 	bic.w	r3, r3, #7
 8006076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	4a1f      	ldr	r2, [pc, #124]	@ (80060fc <prvHeapInit+0xac>)
 8006080:	4413      	add	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <prvHeapInit+0xb0>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800608e:	4b1c      	ldr	r3, [pc, #112]	@ (8006100 <prvHeapInit+0xb0>)
 8006090:	2200      	movs	r2, #0
 8006092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4413      	add	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800609c:	2208      	movs	r2, #8
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a15      	ldr	r2, [pc, #84]	@ (8006104 <prvHeapInit+0xb4>)
 80060b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060b2:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <prvHeapInit+0xb4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ba:	4b12      	ldr	r3, [pc, #72]	@ (8006104 <prvHeapInit+0xb4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006104 <prvHeapInit+0xb4>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006108 <prvHeapInit+0xb8>)
 80060de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4a09      	ldr	r2, [pc, #36]	@ (800610c <prvHeapInit+0xbc>)
 80060e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060e8:	4b09      	ldr	r3, [pc, #36]	@ (8006110 <prvHeapInit+0xc0>)
 80060ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20000fc0 	.word	0x20000fc0
 8006100:	20004bc0 	.word	0x20004bc0
 8006104:	20004bc8 	.word	0x20004bc8
 8006108:	20004bd0 	.word	0x20004bd0
 800610c:	20004bcc 	.word	0x20004bcc
 8006110:	20004bdc 	.word	0x20004bdc

08006114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800611c:	4b28      	ldr	r3, [pc, #160]	@ (80061c0 <prvInsertBlockIntoFreeList+0xac>)
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e002      	b.n	8006128 <prvInsertBlockIntoFreeList+0x14>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d8f7      	bhi.n	8006122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d108      	bne.n	8006156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d118      	bne.n	800619c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b15      	ldr	r3, [pc, #84]	@ (80061c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d00d      	beq.n	8006192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	441a      	add	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	e008      	b.n	80061a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006192:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	e003      	b.n	80061a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d002      	beq.n	80061b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20004bc0 	.word	0x20004bc0
 80061c4:	20004bc8 	.word	0x20004bc8

080061c8 <sniprintf>:
 80061c8:	b40c      	push	{r2, r3}
 80061ca:	b530      	push	{r4, r5, lr}
 80061cc:	4b17      	ldr	r3, [pc, #92]	@ (800622c <sniprintf+0x64>)
 80061ce:	1e0c      	subs	r4, r1, #0
 80061d0:	681d      	ldr	r5, [r3, #0]
 80061d2:	b09d      	sub	sp, #116	@ 0x74
 80061d4:	da08      	bge.n	80061e8 <sniprintf+0x20>
 80061d6:	238b      	movs	r3, #139	@ 0x8b
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	f04f 30ff 	mov.w	r0, #4294967295
 80061de:	b01d      	add	sp, #116	@ 0x74
 80061e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e4:	b002      	add	sp, #8
 80061e6:	4770      	bx	lr
 80061e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80061ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061f0:	bf14      	ite	ne
 80061f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061f6:	4623      	moveq	r3, r4
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006200:	9002      	str	r0, [sp, #8]
 8006202:	9006      	str	r0, [sp, #24]
 8006204:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006208:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800620a:	ab21      	add	r3, sp, #132	@ 0x84
 800620c:	a902      	add	r1, sp, #8
 800620e:	4628      	mov	r0, r5
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	f000 f9f9 	bl	8006608 <_svfiprintf_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	bfbc      	itt	lt
 800621a:	238b      	movlt	r3, #139	@ 0x8b
 800621c:	602b      	strlt	r3, [r5, #0]
 800621e:	2c00      	cmp	r4, #0
 8006220:	d0dd      	beq.n	80061de <sniprintf+0x16>
 8006222:	9b02      	ldr	r3, [sp, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e7d9      	b.n	80061de <sniprintf+0x16>
 800622a:	bf00      	nop
 800622c:	20000058 	.word	0x20000058

08006230 <memset>:
 8006230:	4402      	add	r2, r0
 8006232:	4603      	mov	r3, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <_reclaim_reent>:
 8006240:	4b29      	ldr	r3, [pc, #164]	@ (80062e8 <_reclaim_reent+0xa8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4283      	cmp	r3, r0
 8006246:	b570      	push	{r4, r5, r6, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	d04b      	beq.n	80062e4 <_reclaim_reent+0xa4>
 800624c:	69c3      	ldr	r3, [r0, #28]
 800624e:	b1ab      	cbz	r3, 800627c <_reclaim_reent+0x3c>
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	b16b      	cbz	r3, 8006270 <_reclaim_reent+0x30>
 8006254:	2500      	movs	r5, #0
 8006256:	69e3      	ldr	r3, [r4, #28]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	5959      	ldr	r1, [r3, r5]
 800625c:	2900      	cmp	r1, #0
 800625e:	d13b      	bne.n	80062d8 <_reclaim_reent+0x98>
 8006260:	3504      	adds	r5, #4
 8006262:	2d80      	cmp	r5, #128	@ 0x80
 8006264:	d1f7      	bne.n	8006256 <_reclaim_reent+0x16>
 8006266:	69e3      	ldr	r3, [r4, #28]
 8006268:	4620      	mov	r0, r4
 800626a:	68d9      	ldr	r1, [r3, #12]
 800626c:	f000 f878 	bl	8006360 <_free_r>
 8006270:	69e3      	ldr	r3, [r4, #28]
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	b111      	cbz	r1, 800627c <_reclaim_reent+0x3c>
 8006276:	4620      	mov	r0, r4
 8006278:	f000 f872 	bl	8006360 <_free_r>
 800627c:	6961      	ldr	r1, [r4, #20]
 800627e:	b111      	cbz	r1, 8006286 <_reclaim_reent+0x46>
 8006280:	4620      	mov	r0, r4
 8006282:	f000 f86d 	bl	8006360 <_free_r>
 8006286:	69e1      	ldr	r1, [r4, #28]
 8006288:	b111      	cbz	r1, 8006290 <_reclaim_reent+0x50>
 800628a:	4620      	mov	r0, r4
 800628c:	f000 f868 	bl	8006360 <_free_r>
 8006290:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006292:	b111      	cbz	r1, 800629a <_reclaim_reent+0x5a>
 8006294:	4620      	mov	r0, r4
 8006296:	f000 f863 	bl	8006360 <_free_r>
 800629a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800629c:	b111      	cbz	r1, 80062a4 <_reclaim_reent+0x64>
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f85e 	bl	8006360 <_free_r>
 80062a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80062a6:	b111      	cbz	r1, 80062ae <_reclaim_reent+0x6e>
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f859 	bl	8006360 <_free_r>
 80062ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80062b0:	b111      	cbz	r1, 80062b8 <_reclaim_reent+0x78>
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 f854 	bl	8006360 <_free_r>
 80062b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80062ba:	b111      	cbz	r1, 80062c2 <_reclaim_reent+0x82>
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 f84f 	bl	8006360 <_free_r>
 80062c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80062c4:	b111      	cbz	r1, 80062cc <_reclaim_reent+0x8c>
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f84a 	bl	8006360 <_free_r>
 80062cc:	6a23      	ldr	r3, [r4, #32]
 80062ce:	b14b      	cbz	r3, 80062e4 <_reclaim_reent+0xa4>
 80062d0:	4620      	mov	r0, r4
 80062d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062d6:	4718      	bx	r3
 80062d8:	680e      	ldr	r6, [r1, #0]
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 f840 	bl	8006360 <_free_r>
 80062e0:	4631      	mov	r1, r6
 80062e2:	e7bb      	b.n	800625c <_reclaim_reent+0x1c>
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
 80062e6:	bf00      	nop
 80062e8:	20000058 	.word	0x20000058

080062ec <__errno>:
 80062ec:	4b01      	ldr	r3, [pc, #4]	@ (80062f4 <__errno+0x8>)
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000058 	.word	0x20000058

080062f8 <__libc_init_array>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006330 <__libc_init_array+0x38>)
 80062fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006334 <__libc_init_array+0x3c>)
 80062fe:	1b64      	subs	r4, r4, r5
 8006300:	10a4      	asrs	r4, r4, #2
 8006302:	2600      	movs	r6, #0
 8006304:	42a6      	cmp	r6, r4
 8006306:	d109      	bne.n	800631c <__libc_init_array+0x24>
 8006308:	4d0b      	ldr	r5, [pc, #44]	@ (8006338 <__libc_init_array+0x40>)
 800630a:	4c0c      	ldr	r4, [pc, #48]	@ (800633c <__libc_init_array+0x44>)
 800630c:	f000 fc66 	bl	8006bdc <_init>
 8006310:	1b64      	subs	r4, r4, r5
 8006312:	10a4      	asrs	r4, r4, #2
 8006314:	2600      	movs	r6, #0
 8006316:	42a6      	cmp	r6, r4
 8006318:	d105      	bne.n	8006326 <__libc_init_array+0x2e>
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006320:	4798      	blx	r3
 8006322:	3601      	adds	r6, #1
 8006324:	e7ee      	b.n	8006304 <__libc_init_array+0xc>
 8006326:	f855 3b04 	ldr.w	r3, [r5], #4
 800632a:	4798      	blx	r3
 800632c:	3601      	adds	r6, #1
 800632e:	e7f2      	b.n	8006316 <__libc_init_array+0x1e>
 8006330:	08006d14 	.word	0x08006d14
 8006334:	08006d14 	.word	0x08006d14
 8006338:	08006d14 	.word	0x08006d14
 800633c:	08006d18 	.word	0x08006d18

08006340 <__retarget_lock_acquire_recursive>:
 8006340:	4770      	bx	lr

08006342 <__retarget_lock_release_recursive>:
 8006342:	4770      	bx	lr

08006344 <memcpy>:
 8006344:	440a      	add	r2, r1
 8006346:	4291      	cmp	r1, r2
 8006348:	f100 33ff 	add.w	r3, r0, #4294967295
 800634c:	d100      	bne.n	8006350 <memcpy+0xc>
 800634e:	4770      	bx	lr
 8006350:	b510      	push	{r4, lr}
 8006352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800635a:	4291      	cmp	r1, r2
 800635c:	d1f9      	bne.n	8006352 <memcpy+0xe>
 800635e:	bd10      	pop	{r4, pc}

08006360 <_free_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4605      	mov	r5, r0
 8006364:	2900      	cmp	r1, #0
 8006366:	d041      	beq.n	80063ec <_free_r+0x8c>
 8006368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636c:	1f0c      	subs	r4, r1, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfb8      	it	lt
 8006372:	18e4      	addlt	r4, r4, r3
 8006374:	f000 f8e0 	bl	8006538 <__malloc_lock>
 8006378:	4a1d      	ldr	r2, [pc, #116]	@ (80063f0 <_free_r+0x90>)
 800637a:	6813      	ldr	r3, [r2, #0]
 800637c:	b933      	cbnz	r3, 800638c <_free_r+0x2c>
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	6014      	str	r4, [r2, #0]
 8006382:	4628      	mov	r0, r5
 8006384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006388:	f000 b8dc 	b.w	8006544 <__malloc_unlock>
 800638c:	42a3      	cmp	r3, r4
 800638e:	d908      	bls.n	80063a2 <_free_r+0x42>
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	1821      	adds	r1, r4, r0
 8006394:	428b      	cmp	r3, r1
 8006396:	bf01      	itttt	eq
 8006398:	6819      	ldreq	r1, [r3, #0]
 800639a:	685b      	ldreq	r3, [r3, #4]
 800639c:	1809      	addeq	r1, r1, r0
 800639e:	6021      	streq	r1, [r4, #0]
 80063a0:	e7ed      	b.n	800637e <_free_r+0x1e>
 80063a2:	461a      	mov	r2, r3
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	b10b      	cbz	r3, 80063ac <_free_r+0x4c>
 80063a8:	42a3      	cmp	r3, r4
 80063aa:	d9fa      	bls.n	80063a2 <_free_r+0x42>
 80063ac:	6811      	ldr	r1, [r2, #0]
 80063ae:	1850      	adds	r0, r2, r1
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d10b      	bne.n	80063cc <_free_r+0x6c>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	4401      	add	r1, r0
 80063b8:	1850      	adds	r0, r2, r1
 80063ba:	4283      	cmp	r3, r0
 80063bc:	6011      	str	r1, [r2, #0]
 80063be:	d1e0      	bne.n	8006382 <_free_r+0x22>
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	6053      	str	r3, [r2, #4]
 80063c6:	4408      	add	r0, r1
 80063c8:	6010      	str	r0, [r2, #0]
 80063ca:	e7da      	b.n	8006382 <_free_r+0x22>
 80063cc:	d902      	bls.n	80063d4 <_free_r+0x74>
 80063ce:	230c      	movs	r3, #12
 80063d0:	602b      	str	r3, [r5, #0]
 80063d2:	e7d6      	b.n	8006382 <_free_r+0x22>
 80063d4:	6820      	ldr	r0, [r4, #0]
 80063d6:	1821      	adds	r1, r4, r0
 80063d8:	428b      	cmp	r3, r1
 80063da:	bf04      	itt	eq
 80063dc:	6819      	ldreq	r1, [r3, #0]
 80063de:	685b      	ldreq	r3, [r3, #4]
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	bf04      	itt	eq
 80063e4:	1809      	addeq	r1, r1, r0
 80063e6:	6021      	streq	r1, [r4, #0]
 80063e8:	6054      	str	r4, [r2, #4]
 80063ea:	e7ca      	b.n	8006382 <_free_r+0x22>
 80063ec:	bd38      	pop	{r3, r4, r5, pc}
 80063ee:	bf00      	nop
 80063f0:	20004d24 	.word	0x20004d24

080063f4 <sbrk_aligned>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006434 <sbrk_aligned+0x40>)
 80063f8:	460c      	mov	r4, r1
 80063fa:	6831      	ldr	r1, [r6, #0]
 80063fc:	4605      	mov	r5, r0
 80063fe:	b911      	cbnz	r1, 8006406 <sbrk_aligned+0x12>
 8006400:	f000 fba6 	bl	8006b50 <_sbrk_r>
 8006404:	6030      	str	r0, [r6, #0]
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f000 fba1 	bl	8006b50 <_sbrk_r>
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	d103      	bne.n	800641a <sbrk_aligned+0x26>
 8006412:	f04f 34ff 	mov.w	r4, #4294967295
 8006416:	4620      	mov	r0, r4
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	1cc4      	adds	r4, r0, #3
 800641c:	f024 0403 	bic.w	r4, r4, #3
 8006420:	42a0      	cmp	r0, r4
 8006422:	d0f8      	beq.n	8006416 <sbrk_aligned+0x22>
 8006424:	1a21      	subs	r1, r4, r0
 8006426:	4628      	mov	r0, r5
 8006428:	f000 fb92 	bl	8006b50 <_sbrk_r>
 800642c:	3001      	adds	r0, #1
 800642e:	d1f2      	bne.n	8006416 <sbrk_aligned+0x22>
 8006430:	e7ef      	b.n	8006412 <sbrk_aligned+0x1e>
 8006432:	bf00      	nop
 8006434:	20004d20 	.word	0x20004d20

08006438 <_malloc_r>:
 8006438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800643c:	1ccd      	adds	r5, r1, #3
 800643e:	f025 0503 	bic.w	r5, r5, #3
 8006442:	3508      	adds	r5, #8
 8006444:	2d0c      	cmp	r5, #12
 8006446:	bf38      	it	cc
 8006448:	250c      	movcc	r5, #12
 800644a:	2d00      	cmp	r5, #0
 800644c:	4606      	mov	r6, r0
 800644e:	db01      	blt.n	8006454 <_malloc_r+0x1c>
 8006450:	42a9      	cmp	r1, r5
 8006452:	d904      	bls.n	800645e <_malloc_r+0x26>
 8006454:	230c      	movs	r3, #12
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	2000      	movs	r0, #0
 800645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800645e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006534 <_malloc_r+0xfc>
 8006462:	f000 f869 	bl	8006538 <__malloc_lock>
 8006466:	f8d8 3000 	ldr.w	r3, [r8]
 800646a:	461c      	mov	r4, r3
 800646c:	bb44      	cbnz	r4, 80064c0 <_malloc_r+0x88>
 800646e:	4629      	mov	r1, r5
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff ffbf 	bl	80063f4 <sbrk_aligned>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	4604      	mov	r4, r0
 800647a:	d158      	bne.n	800652e <_malloc_r+0xf6>
 800647c:	f8d8 4000 	ldr.w	r4, [r8]
 8006480:	4627      	mov	r7, r4
 8006482:	2f00      	cmp	r7, #0
 8006484:	d143      	bne.n	800650e <_malloc_r+0xd6>
 8006486:	2c00      	cmp	r4, #0
 8006488:	d04b      	beq.n	8006522 <_malloc_r+0xea>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	4639      	mov	r1, r7
 800648e:	4630      	mov	r0, r6
 8006490:	eb04 0903 	add.w	r9, r4, r3
 8006494:	f000 fb5c 	bl	8006b50 <_sbrk_r>
 8006498:	4581      	cmp	r9, r0
 800649a:	d142      	bne.n	8006522 <_malloc_r+0xea>
 800649c:	6821      	ldr	r1, [r4, #0]
 800649e:	1a6d      	subs	r5, r5, r1
 80064a0:	4629      	mov	r1, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ffa6 	bl	80063f4 <sbrk_aligned>
 80064a8:	3001      	adds	r0, #1
 80064aa:	d03a      	beq.n	8006522 <_malloc_r+0xea>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	442b      	add	r3, r5
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	f8d8 3000 	ldr.w	r3, [r8]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	bb62      	cbnz	r2, 8006514 <_malloc_r+0xdc>
 80064ba:	f8c8 7000 	str.w	r7, [r8]
 80064be:	e00f      	b.n	80064e0 <_malloc_r+0xa8>
 80064c0:	6822      	ldr	r2, [r4, #0]
 80064c2:	1b52      	subs	r2, r2, r5
 80064c4:	d420      	bmi.n	8006508 <_malloc_r+0xd0>
 80064c6:	2a0b      	cmp	r2, #11
 80064c8:	d917      	bls.n	80064fa <_malloc_r+0xc2>
 80064ca:	1961      	adds	r1, r4, r5
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	6025      	str	r5, [r4, #0]
 80064d0:	bf18      	it	ne
 80064d2:	6059      	strne	r1, [r3, #4]
 80064d4:	6863      	ldr	r3, [r4, #4]
 80064d6:	bf08      	it	eq
 80064d8:	f8c8 1000 	streq.w	r1, [r8]
 80064dc:	5162      	str	r2, [r4, r5]
 80064de:	604b      	str	r3, [r1, #4]
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 f82f 	bl	8006544 <__malloc_unlock>
 80064e6:	f104 000b 	add.w	r0, r4, #11
 80064ea:	1d23      	adds	r3, r4, #4
 80064ec:	f020 0007 	bic.w	r0, r0, #7
 80064f0:	1ac2      	subs	r2, r0, r3
 80064f2:	bf1c      	itt	ne
 80064f4:	1a1b      	subne	r3, r3, r0
 80064f6:	50a3      	strne	r3, [r4, r2]
 80064f8:	e7af      	b.n	800645a <_malloc_r+0x22>
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	bf0c      	ite	eq
 8006500:	f8c8 2000 	streq.w	r2, [r8]
 8006504:	605a      	strne	r2, [r3, #4]
 8006506:	e7eb      	b.n	80064e0 <_malloc_r+0xa8>
 8006508:	4623      	mov	r3, r4
 800650a:	6864      	ldr	r4, [r4, #4]
 800650c:	e7ae      	b.n	800646c <_malloc_r+0x34>
 800650e:	463c      	mov	r4, r7
 8006510:	687f      	ldr	r7, [r7, #4]
 8006512:	e7b6      	b.n	8006482 <_malloc_r+0x4a>
 8006514:	461a      	mov	r2, r3
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	42a3      	cmp	r3, r4
 800651a:	d1fb      	bne.n	8006514 <_malloc_r+0xdc>
 800651c:	2300      	movs	r3, #0
 800651e:	6053      	str	r3, [r2, #4]
 8006520:	e7de      	b.n	80064e0 <_malloc_r+0xa8>
 8006522:	230c      	movs	r3, #12
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	4630      	mov	r0, r6
 8006528:	f000 f80c 	bl	8006544 <__malloc_unlock>
 800652c:	e794      	b.n	8006458 <_malloc_r+0x20>
 800652e:	6005      	str	r5, [r0, #0]
 8006530:	e7d6      	b.n	80064e0 <_malloc_r+0xa8>
 8006532:	bf00      	nop
 8006534:	20004d24 	.word	0x20004d24

08006538 <__malloc_lock>:
 8006538:	4801      	ldr	r0, [pc, #4]	@ (8006540 <__malloc_lock+0x8>)
 800653a:	f7ff bf01 	b.w	8006340 <__retarget_lock_acquire_recursive>
 800653e:	bf00      	nop
 8006540:	20004d1c 	.word	0x20004d1c

08006544 <__malloc_unlock>:
 8006544:	4801      	ldr	r0, [pc, #4]	@ (800654c <__malloc_unlock+0x8>)
 8006546:	f7ff befc 	b.w	8006342 <__retarget_lock_release_recursive>
 800654a:	bf00      	nop
 800654c:	20004d1c 	.word	0x20004d1c

08006550 <__ssputs_r>:
 8006550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006554:	688e      	ldr	r6, [r1, #8]
 8006556:	461f      	mov	r7, r3
 8006558:	42be      	cmp	r6, r7
 800655a:	680b      	ldr	r3, [r1, #0]
 800655c:	4682      	mov	sl, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4690      	mov	r8, r2
 8006562:	d82d      	bhi.n	80065c0 <__ssputs_r+0x70>
 8006564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800656c:	d026      	beq.n	80065bc <__ssputs_r+0x6c>
 800656e:	6965      	ldr	r5, [r4, #20]
 8006570:	6909      	ldr	r1, [r1, #16]
 8006572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006576:	eba3 0901 	sub.w	r9, r3, r1
 800657a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800657e:	1c7b      	adds	r3, r7, #1
 8006580:	444b      	add	r3, r9
 8006582:	106d      	asrs	r5, r5, #1
 8006584:	429d      	cmp	r5, r3
 8006586:	bf38      	it	cc
 8006588:	461d      	movcc	r5, r3
 800658a:	0553      	lsls	r3, r2, #21
 800658c:	d527      	bpl.n	80065de <__ssputs_r+0x8e>
 800658e:	4629      	mov	r1, r5
 8006590:	f7ff ff52 	bl	8006438 <_malloc_r>
 8006594:	4606      	mov	r6, r0
 8006596:	b360      	cbz	r0, 80065f2 <__ssputs_r+0xa2>
 8006598:	6921      	ldr	r1, [r4, #16]
 800659a:	464a      	mov	r2, r9
 800659c:	f7ff fed2 	bl	8006344 <memcpy>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	6126      	str	r6, [r4, #16]
 80065ae:	6165      	str	r5, [r4, #20]
 80065b0:	444e      	add	r6, r9
 80065b2:	eba5 0509 	sub.w	r5, r5, r9
 80065b6:	6026      	str	r6, [r4, #0]
 80065b8:	60a5      	str	r5, [r4, #8]
 80065ba:	463e      	mov	r6, r7
 80065bc:	42be      	cmp	r6, r7
 80065be:	d900      	bls.n	80065c2 <__ssputs_r+0x72>
 80065c0:	463e      	mov	r6, r7
 80065c2:	6820      	ldr	r0, [r4, #0]
 80065c4:	4632      	mov	r2, r6
 80065c6:	4641      	mov	r1, r8
 80065c8:	f000 faa8 	bl	8006b1c <memmove>
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	1b9b      	subs	r3, r3, r6
 80065d0:	60a3      	str	r3, [r4, #8]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	4433      	add	r3, r6
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	2000      	movs	r0, #0
 80065da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065de:	462a      	mov	r2, r5
 80065e0:	f000 fac6 	bl	8006b70 <_realloc_r>
 80065e4:	4606      	mov	r6, r0
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d1e0      	bne.n	80065ac <__ssputs_r+0x5c>
 80065ea:	6921      	ldr	r1, [r4, #16]
 80065ec:	4650      	mov	r0, sl
 80065ee:	f7ff feb7 	bl	8006360 <_free_r>
 80065f2:	230c      	movs	r3, #12
 80065f4:	f8ca 3000 	str.w	r3, [sl]
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e7e9      	b.n	80065da <__ssputs_r+0x8a>
	...

08006608 <_svfiprintf_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4698      	mov	r8, r3
 800660e:	898b      	ldrh	r3, [r1, #12]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	b09d      	sub	sp, #116	@ 0x74
 8006614:	4607      	mov	r7, r0
 8006616:	460d      	mov	r5, r1
 8006618:	4614      	mov	r4, r2
 800661a:	d510      	bpl.n	800663e <_svfiprintf_r+0x36>
 800661c:	690b      	ldr	r3, [r1, #16]
 800661e:	b973      	cbnz	r3, 800663e <_svfiprintf_r+0x36>
 8006620:	2140      	movs	r1, #64	@ 0x40
 8006622:	f7ff ff09 	bl	8006438 <_malloc_r>
 8006626:	6028      	str	r0, [r5, #0]
 8006628:	6128      	str	r0, [r5, #16]
 800662a:	b930      	cbnz	r0, 800663a <_svfiprintf_r+0x32>
 800662c:	230c      	movs	r3, #12
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b01d      	add	sp, #116	@ 0x74
 8006636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663a:	2340      	movs	r3, #64	@ 0x40
 800663c:	616b      	str	r3, [r5, #20]
 800663e:	2300      	movs	r3, #0
 8006640:	9309      	str	r3, [sp, #36]	@ 0x24
 8006642:	2320      	movs	r3, #32
 8006644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006648:	f8cd 800c 	str.w	r8, [sp, #12]
 800664c:	2330      	movs	r3, #48	@ 0x30
 800664e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067ec <_svfiprintf_r+0x1e4>
 8006652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006656:	f04f 0901 	mov.w	r9, #1
 800665a:	4623      	mov	r3, r4
 800665c:	469a      	mov	sl, r3
 800665e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006662:	b10a      	cbz	r2, 8006668 <_svfiprintf_r+0x60>
 8006664:	2a25      	cmp	r2, #37	@ 0x25
 8006666:	d1f9      	bne.n	800665c <_svfiprintf_r+0x54>
 8006668:	ebba 0b04 	subs.w	fp, sl, r4
 800666c:	d00b      	beq.n	8006686 <_svfiprintf_r+0x7e>
 800666e:	465b      	mov	r3, fp
 8006670:	4622      	mov	r2, r4
 8006672:	4629      	mov	r1, r5
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ff6b 	bl	8006550 <__ssputs_r>
 800667a:	3001      	adds	r0, #1
 800667c:	f000 80a7 	beq.w	80067ce <_svfiprintf_r+0x1c6>
 8006680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006682:	445a      	add	r2, fp
 8006684:	9209      	str	r2, [sp, #36]	@ 0x24
 8006686:	f89a 3000 	ldrb.w	r3, [sl]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 809f 	beq.w	80067ce <_svfiprintf_r+0x1c6>
 8006690:	2300      	movs	r3, #0
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800669a:	f10a 0a01 	add.w	sl, sl, #1
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	9307      	str	r3, [sp, #28]
 80066a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80066a8:	4654      	mov	r4, sl
 80066aa:	2205      	movs	r2, #5
 80066ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b0:	484e      	ldr	r0, [pc, #312]	@ (80067ec <_svfiprintf_r+0x1e4>)
 80066b2:	f7f9 fd9d 	bl	80001f0 <memchr>
 80066b6:	9a04      	ldr	r2, [sp, #16]
 80066b8:	b9d8      	cbnz	r0, 80066f2 <_svfiprintf_r+0xea>
 80066ba:	06d0      	lsls	r0, r2, #27
 80066bc:	bf44      	itt	mi
 80066be:	2320      	movmi	r3, #32
 80066c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066c4:	0711      	lsls	r1, r2, #28
 80066c6:	bf44      	itt	mi
 80066c8:	232b      	movmi	r3, #43	@ 0x2b
 80066ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ce:	f89a 3000 	ldrb.w	r3, [sl]
 80066d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066d4:	d015      	beq.n	8006702 <_svfiprintf_r+0xfa>
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	4654      	mov	r4, sl
 80066da:	2000      	movs	r0, #0
 80066dc:	f04f 0c0a 	mov.w	ip, #10
 80066e0:	4621      	mov	r1, r4
 80066e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e6:	3b30      	subs	r3, #48	@ 0x30
 80066e8:	2b09      	cmp	r3, #9
 80066ea:	d94b      	bls.n	8006784 <_svfiprintf_r+0x17c>
 80066ec:	b1b0      	cbz	r0, 800671c <_svfiprintf_r+0x114>
 80066ee:	9207      	str	r2, [sp, #28]
 80066f0:	e014      	b.n	800671c <_svfiprintf_r+0x114>
 80066f2:	eba0 0308 	sub.w	r3, r0, r8
 80066f6:	fa09 f303 	lsl.w	r3, r9, r3
 80066fa:	4313      	orrs	r3, r2
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	46a2      	mov	sl, r4
 8006700:	e7d2      	b.n	80066a8 <_svfiprintf_r+0xa0>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	1d19      	adds	r1, r3, #4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	9103      	str	r1, [sp, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfbb      	ittet	lt
 800670e:	425b      	neglt	r3, r3
 8006710:	f042 0202 	orrlt.w	r2, r2, #2
 8006714:	9307      	strge	r3, [sp, #28]
 8006716:	9307      	strlt	r3, [sp, #28]
 8006718:	bfb8      	it	lt
 800671a:	9204      	strlt	r2, [sp, #16]
 800671c:	7823      	ldrb	r3, [r4, #0]
 800671e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006720:	d10a      	bne.n	8006738 <_svfiprintf_r+0x130>
 8006722:	7863      	ldrb	r3, [r4, #1]
 8006724:	2b2a      	cmp	r3, #42	@ 0x2a
 8006726:	d132      	bne.n	800678e <_svfiprintf_r+0x186>
 8006728:	9b03      	ldr	r3, [sp, #12]
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	9203      	str	r2, [sp, #12]
 8006730:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006734:	3402      	adds	r4, #2
 8006736:	9305      	str	r3, [sp, #20]
 8006738:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067fc <_svfiprintf_r+0x1f4>
 800673c:	7821      	ldrb	r1, [r4, #0]
 800673e:	2203      	movs	r2, #3
 8006740:	4650      	mov	r0, sl
 8006742:	f7f9 fd55 	bl	80001f0 <memchr>
 8006746:	b138      	cbz	r0, 8006758 <_svfiprintf_r+0x150>
 8006748:	9b04      	ldr	r3, [sp, #16]
 800674a:	eba0 000a 	sub.w	r0, r0, sl
 800674e:	2240      	movs	r2, #64	@ 0x40
 8006750:	4082      	lsls	r2, r0
 8006752:	4313      	orrs	r3, r2
 8006754:	3401      	adds	r4, #1
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675c:	4824      	ldr	r0, [pc, #144]	@ (80067f0 <_svfiprintf_r+0x1e8>)
 800675e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006762:	2206      	movs	r2, #6
 8006764:	f7f9 fd44 	bl	80001f0 <memchr>
 8006768:	2800      	cmp	r0, #0
 800676a:	d036      	beq.n	80067da <_svfiprintf_r+0x1d2>
 800676c:	4b21      	ldr	r3, [pc, #132]	@ (80067f4 <_svfiprintf_r+0x1ec>)
 800676e:	bb1b      	cbnz	r3, 80067b8 <_svfiprintf_r+0x1b0>
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	3307      	adds	r3, #7
 8006774:	f023 0307 	bic.w	r3, r3, #7
 8006778:	3308      	adds	r3, #8
 800677a:	9303      	str	r3, [sp, #12]
 800677c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800677e:	4433      	add	r3, r6
 8006780:	9309      	str	r3, [sp, #36]	@ 0x24
 8006782:	e76a      	b.n	800665a <_svfiprintf_r+0x52>
 8006784:	fb0c 3202 	mla	r2, ip, r2, r3
 8006788:	460c      	mov	r4, r1
 800678a:	2001      	movs	r0, #1
 800678c:	e7a8      	b.n	80066e0 <_svfiprintf_r+0xd8>
 800678e:	2300      	movs	r3, #0
 8006790:	3401      	adds	r4, #1
 8006792:	9305      	str	r3, [sp, #20]
 8006794:	4619      	mov	r1, r3
 8006796:	f04f 0c0a 	mov.w	ip, #10
 800679a:	4620      	mov	r0, r4
 800679c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a0:	3a30      	subs	r2, #48	@ 0x30
 80067a2:	2a09      	cmp	r2, #9
 80067a4:	d903      	bls.n	80067ae <_svfiprintf_r+0x1a6>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0c6      	beq.n	8006738 <_svfiprintf_r+0x130>
 80067aa:	9105      	str	r1, [sp, #20]
 80067ac:	e7c4      	b.n	8006738 <_svfiprintf_r+0x130>
 80067ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80067b2:	4604      	mov	r4, r0
 80067b4:	2301      	movs	r3, #1
 80067b6:	e7f0      	b.n	800679a <_svfiprintf_r+0x192>
 80067b8:	ab03      	add	r3, sp, #12
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	462a      	mov	r2, r5
 80067be:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <_svfiprintf_r+0x1f0>)
 80067c0:	a904      	add	r1, sp, #16
 80067c2:	4638      	mov	r0, r7
 80067c4:	f3af 8000 	nop.w
 80067c8:	1c42      	adds	r2, r0, #1
 80067ca:	4606      	mov	r6, r0
 80067cc:	d1d6      	bne.n	800677c <_svfiprintf_r+0x174>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	065b      	lsls	r3, r3, #25
 80067d2:	f53f af2d 	bmi.w	8006630 <_svfiprintf_r+0x28>
 80067d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067d8:	e72c      	b.n	8006634 <_svfiprintf_r+0x2c>
 80067da:	ab03      	add	r3, sp, #12
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	462a      	mov	r2, r5
 80067e0:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <_svfiprintf_r+0x1f0>)
 80067e2:	a904      	add	r1, sp, #16
 80067e4:	4638      	mov	r0, r7
 80067e6:	f000 f879 	bl	80068dc <_printf_i>
 80067ea:	e7ed      	b.n	80067c8 <_svfiprintf_r+0x1c0>
 80067ec:	08006cd8 	.word	0x08006cd8
 80067f0:	08006ce2 	.word	0x08006ce2
 80067f4:	00000000 	.word	0x00000000
 80067f8:	08006551 	.word	0x08006551
 80067fc:	08006cde 	.word	0x08006cde

08006800 <_printf_common>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	4698      	mov	r8, r3
 8006808:	688a      	ldr	r2, [r1, #8]
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006810:	4293      	cmp	r3, r2
 8006812:	bfb8      	it	lt
 8006814:	4613      	movlt	r3, r2
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800681c:	4607      	mov	r7, r0
 800681e:	460c      	mov	r4, r1
 8006820:	b10a      	cbz	r2, 8006826 <_printf_common+0x26>
 8006822:	3301      	adds	r3, #1
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	0699      	lsls	r1, r3, #26
 800682a:	bf42      	ittt	mi
 800682c:	6833      	ldrmi	r3, [r6, #0]
 800682e:	3302      	addmi	r3, #2
 8006830:	6033      	strmi	r3, [r6, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	f015 0506 	ands.w	r5, r5, #6
 8006838:	d106      	bne.n	8006848 <_printf_common+0x48>
 800683a:	f104 0a19 	add.w	sl, r4, #25
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	6832      	ldr	r2, [r6, #0]
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ab      	cmp	r3, r5
 8006846:	dc26      	bgt.n	8006896 <_printf_common+0x96>
 8006848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800684c:	6822      	ldr	r2, [r4, #0]
 800684e:	3b00      	subs	r3, #0
 8006850:	bf18      	it	ne
 8006852:	2301      	movne	r3, #1
 8006854:	0692      	lsls	r2, r2, #26
 8006856:	d42b      	bmi.n	80068b0 <_printf_common+0xb0>
 8006858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800685c:	4641      	mov	r1, r8
 800685e:	4638      	mov	r0, r7
 8006860:	47c8      	blx	r9
 8006862:	3001      	adds	r0, #1
 8006864:	d01e      	beq.n	80068a4 <_printf_common+0xa4>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	f003 0306 	and.w	r3, r3, #6
 800686e:	2b04      	cmp	r3, #4
 8006870:	bf02      	ittt	eq
 8006872:	68e5      	ldreq	r5, [r4, #12]
 8006874:	6833      	ldreq	r3, [r6, #0]
 8006876:	1aed      	subeq	r5, r5, r3
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	bf0c      	ite	eq
 800687c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006880:	2500      	movne	r5, #0
 8006882:	4293      	cmp	r3, r2
 8006884:	bfc4      	itt	gt
 8006886:	1a9b      	subgt	r3, r3, r2
 8006888:	18ed      	addgt	r5, r5, r3
 800688a:	2600      	movs	r6, #0
 800688c:	341a      	adds	r4, #26
 800688e:	42b5      	cmp	r5, r6
 8006890:	d11a      	bne.n	80068c8 <_printf_common+0xc8>
 8006892:	2000      	movs	r0, #0
 8006894:	e008      	b.n	80068a8 <_printf_common+0xa8>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4641      	mov	r1, r8
 800689c:	4638      	mov	r0, r7
 800689e:	47c8      	blx	r9
 80068a0:	3001      	adds	r0, #1
 80068a2:	d103      	bne.n	80068ac <_printf_common+0xac>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ac:	3501      	adds	r5, #1
 80068ae:	e7c6      	b.n	800683e <_printf_common+0x3e>
 80068b0:	18e1      	adds	r1, r4, r3
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	2030      	movs	r0, #48	@ 0x30
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ba:	4422      	add	r2, r4
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c4:	3302      	adds	r3, #2
 80068c6:	e7c7      	b.n	8006858 <_printf_common+0x58>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4622      	mov	r2, r4
 80068cc:	4641      	mov	r1, r8
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c8      	blx	r9
 80068d2:	3001      	adds	r0, #1
 80068d4:	d0e6      	beq.n	80068a4 <_printf_common+0xa4>
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7d9      	b.n	800688e <_printf_common+0x8e>
	...

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	7e0f      	ldrb	r7, [r1, #24]
 80068e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068e4:	2f78      	cmp	r7, #120	@ 0x78
 80068e6:	4691      	mov	r9, r2
 80068e8:	4680      	mov	r8, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	469a      	mov	sl, r3
 80068ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	@ 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d2 	beq.w	8006aa2 <_printf_i+0x1c6>
 80068fe:	2f58      	cmp	r7, #88	@ 0x58
 8006900:	f000 80b9 	beq.w	8006a76 <_printf_i+0x19a>
 8006904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a101      	add	r1, pc, #4	@ (adr r1, 800691c <_printf_i+0x40>)
 8006918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a89 	.word	0x08006a89
 800694c:	080069b3 	.word	0x080069b3
 8006950:	08006a43 	.word	0x08006a43
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006aab 	.word	0x08006aab
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b3 	.word	0x080069b3
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a4b 	.word	0x08006a4b
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6032      	str	r2, [r6, #0]
 800697c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e09d      	b.n	8006ac4 <_printf_i+0x1e8>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	6031      	str	r1, [r6, #0]
 8006990:	0606      	lsls	r6, r0, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0xbc>
 8006994:	681d      	ldr	r5, [r3, #0]
 8006996:	e003      	b.n	80069a0 <_printf_i+0xc4>
 8006998:	0645      	lsls	r5, r0, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0xb8>
 800699c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	da03      	bge.n	80069ac <_printf_i+0xd0>
 80069a4:	232d      	movs	r3, #45	@ 0x2d
 80069a6:	426d      	negs	r5, r5
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ac:	4859      	ldr	r0, [pc, #356]	@ (8006b14 <_printf_i+0x238>)
 80069ae:	230a      	movs	r3, #10
 80069b0:	e011      	b.n	80069d6 <_printf_i+0xfa>
 80069b2:	6821      	ldr	r1, [r4, #0]
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	0608      	lsls	r0, r1, #24
 80069b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069bc:	d402      	bmi.n	80069c4 <_printf_i+0xe8>
 80069be:	0649      	lsls	r1, r1, #25
 80069c0:	bf48      	it	mi
 80069c2:	b2ad      	uxthmi	r5, r5
 80069c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069c6:	4853      	ldr	r0, [pc, #332]	@ (8006b14 <_printf_i+0x238>)
 80069c8:	6033      	str	r3, [r6, #0]
 80069ca:	bf14      	ite	ne
 80069cc:	230a      	movne	r3, #10
 80069ce:	2308      	moveq	r3, #8
 80069d0:	2100      	movs	r1, #0
 80069d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069d6:	6866      	ldr	r6, [r4, #4]
 80069d8:	60a6      	str	r6, [r4, #8]
 80069da:	2e00      	cmp	r6, #0
 80069dc:	bfa2      	ittt	ge
 80069de:	6821      	ldrge	r1, [r4, #0]
 80069e0:	f021 0104 	bicge.w	r1, r1, #4
 80069e4:	6021      	strge	r1, [r4, #0]
 80069e6:	b90d      	cbnz	r5, 80069ec <_printf_i+0x110>
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	d04b      	beq.n	8006a84 <_printf_i+0x1a8>
 80069ec:	4616      	mov	r6, r2
 80069ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80069f2:	fb03 5711 	mls	r7, r3, r1, r5
 80069f6:	5dc7      	ldrb	r7, [r0, r7]
 80069f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069fc:	462f      	mov	r7, r5
 80069fe:	42bb      	cmp	r3, r7
 8006a00:	460d      	mov	r5, r1
 8006a02:	d9f4      	bls.n	80069ee <_printf_i+0x112>
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d10b      	bne.n	8006a20 <_printf_i+0x144>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	07df      	lsls	r7, r3, #31
 8006a0c:	d508      	bpl.n	8006a20 <_printf_i+0x144>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	6861      	ldr	r1, [r4, #4]
 8006a12:	4299      	cmp	r1, r3
 8006a14:	bfde      	ittt	le
 8006a16:	2330      	movle	r3, #48	@ 0x30
 8006a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a20:	1b92      	subs	r2, r2, r6
 8006a22:	6122      	str	r2, [r4, #16]
 8006a24:	f8cd a000 	str.w	sl, [sp]
 8006a28:	464b      	mov	r3, r9
 8006a2a:	aa03      	add	r2, sp, #12
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f7ff fee6 	bl	8006800 <_printf_common>
 8006a34:	3001      	adds	r0, #1
 8006a36:	d14a      	bne.n	8006ace <_printf_i+0x1f2>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	b004      	add	sp, #16
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	4833      	ldr	r0, [pc, #204]	@ (8006b18 <_printf_i+0x23c>)
 8006a4c:	2778      	movs	r7, #120	@ 0x78
 8006a4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	6831      	ldr	r1, [r6, #0]
 8006a56:	061f      	lsls	r7, r3, #24
 8006a58:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a5c:	d402      	bmi.n	8006a64 <_printf_i+0x188>
 8006a5e:	065f      	lsls	r7, r3, #25
 8006a60:	bf48      	it	mi
 8006a62:	b2ad      	uxthmi	r5, r5
 8006a64:	6031      	str	r1, [r6, #0]
 8006a66:	07d9      	lsls	r1, r3, #31
 8006a68:	bf44      	itt	mi
 8006a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a6e:	6023      	strmi	r3, [r4, #0]
 8006a70:	b11d      	cbz	r5, 8006a7a <_printf_i+0x19e>
 8006a72:	2310      	movs	r3, #16
 8006a74:	e7ac      	b.n	80069d0 <_printf_i+0xf4>
 8006a76:	4827      	ldr	r0, [pc, #156]	@ (8006b14 <_printf_i+0x238>)
 8006a78:	e7e9      	b.n	8006a4e <_printf_i+0x172>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f023 0320 	bic.w	r3, r3, #32
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	e7f6      	b.n	8006a72 <_printf_i+0x196>
 8006a84:	4616      	mov	r6, r2
 8006a86:	e7bd      	b.n	8006a04 <_printf_i+0x128>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	6825      	ldr	r5, [r4, #0]
 8006a8c:	6961      	ldr	r1, [r4, #20]
 8006a8e:	1d18      	adds	r0, r3, #4
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	062e      	lsls	r6, r5, #24
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0x1c0>
 8006a98:	6019      	str	r1, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0x1c6>
 8006a9c:	0668      	lsls	r0, r5, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0x1bc>
 8006aa0:	8019      	strh	r1, [r3, #0]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	4616      	mov	r6, r2
 8006aa8:	e7bc      	b.n	8006a24 <_printf_i+0x148>
 8006aaa:	6833      	ldr	r3, [r6, #0]
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	6032      	str	r2, [r6, #0]
 8006ab0:	681e      	ldr	r6, [r3, #0]
 8006ab2:	6862      	ldr	r2, [r4, #4]
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7f9 fb9a 	bl	80001f0 <memchr>
 8006abc:	b108      	cbz	r0, 8006ac2 <_printf_i+0x1e6>
 8006abe:	1b80      	subs	r0, r0, r6
 8006ac0:	6060      	str	r0, [r4, #4]
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006acc:	e7aa      	b.n	8006a24 <_printf_i+0x148>
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	47d0      	blx	sl
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d0ad      	beq.n	8006a38 <_printf_i+0x15c>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	079b      	lsls	r3, r3, #30
 8006ae0:	d413      	bmi.n	8006b0a <_printf_i+0x22e>
 8006ae2:	68e0      	ldr	r0, [r4, #12]
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	4298      	cmp	r0, r3
 8006ae8:	bfb8      	it	lt
 8006aea:	4618      	movlt	r0, r3
 8006aec:	e7a6      	b.n	8006a3c <_printf_i+0x160>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4632      	mov	r2, r6
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	47d0      	blx	sl
 8006af8:	3001      	adds	r0, #1
 8006afa:	d09d      	beq.n	8006a38 <_printf_i+0x15c>
 8006afc:	3501      	adds	r5, #1
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9903      	ldr	r1, [sp, #12]
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dcf2      	bgt.n	8006aee <_printf_i+0x212>
 8006b08:	e7eb      	b.n	8006ae2 <_printf_i+0x206>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	f104 0619 	add.w	r6, r4, #25
 8006b10:	e7f5      	b.n	8006afe <_printf_i+0x222>
 8006b12:	bf00      	nop
 8006b14:	08006ce9 	.word	0x08006ce9
 8006b18:	08006cfa 	.word	0x08006cfa

08006b1c <memmove>:
 8006b1c:	4288      	cmp	r0, r1
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	eb01 0402 	add.w	r4, r1, r2
 8006b24:	d902      	bls.n	8006b2c <memmove+0x10>
 8006b26:	4284      	cmp	r4, r0
 8006b28:	4623      	mov	r3, r4
 8006b2a:	d807      	bhi.n	8006b3c <memmove+0x20>
 8006b2c:	1e43      	subs	r3, r0, #1
 8006b2e:	42a1      	cmp	r1, r4
 8006b30:	d008      	beq.n	8006b44 <memmove+0x28>
 8006b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b3a:	e7f8      	b.n	8006b2e <memmove+0x12>
 8006b3c:	4402      	add	r2, r0
 8006b3e:	4601      	mov	r1, r0
 8006b40:	428a      	cmp	r2, r1
 8006b42:	d100      	bne.n	8006b46 <memmove+0x2a>
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b4e:	e7f7      	b.n	8006b40 <memmove+0x24>

08006b50 <_sbrk_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d06      	ldr	r5, [pc, #24]	@ (8006b6c <_sbrk_r+0x1c>)
 8006b54:	2300      	movs	r3, #0
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	f7fb f858 	bl	8001c10 <_sbrk>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_sbrk_r+0x1a>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_sbrk_r+0x1a>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20004d18 	.word	0x20004d18

08006b70 <_realloc_r>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	4680      	mov	r8, r0
 8006b76:	4615      	mov	r5, r2
 8006b78:	460c      	mov	r4, r1
 8006b7a:	b921      	cbnz	r1, 8006b86 <_realloc_r+0x16>
 8006b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b80:	4611      	mov	r1, r2
 8006b82:	f7ff bc59 	b.w	8006438 <_malloc_r>
 8006b86:	b92a      	cbnz	r2, 8006b94 <_realloc_r+0x24>
 8006b88:	f7ff fbea 	bl	8006360 <_free_r>
 8006b8c:	2400      	movs	r4, #0
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	f000 f81a 	bl	8006bcc <_malloc_usable_size_r>
 8006b98:	4285      	cmp	r5, r0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	d802      	bhi.n	8006ba4 <_realloc_r+0x34>
 8006b9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006ba2:	d8f4      	bhi.n	8006b8e <_realloc_r+0x1e>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7ff fc46 	bl	8006438 <_malloc_r>
 8006bac:	4607      	mov	r7, r0
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d0ec      	beq.n	8006b8c <_realloc_r+0x1c>
 8006bb2:	42b5      	cmp	r5, r6
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	bf28      	it	cs
 8006bba:	4632      	movcs	r2, r6
 8006bbc:	f7ff fbc2 	bl	8006344 <memcpy>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fbcc 	bl	8006360 <_free_r>
 8006bc8:	463c      	mov	r4, r7
 8006bca:	e7e0      	b.n	8006b8e <_realloc_r+0x1e>

08006bcc <_malloc_usable_size_r>:
 8006bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd0:	1f18      	subs	r0, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bfbc      	itt	lt
 8006bd6:	580b      	ldrlt	r3, [r1, r0]
 8006bd8:	18c0      	addlt	r0, r0, r3
 8006bda:	4770      	bx	lr

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
