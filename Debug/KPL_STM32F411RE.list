
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005890  08005890  00006890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005940  08005940  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  08005940  08005940  00006940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005948  08005948  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005950  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c64  2000007c  080059cc  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ce0  080059cc  00007ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161ff  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003305  00000000  00000000  0001d2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000205b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f38  00000000  00000000  00021968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185b1  00000000  00000000  000228a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014df8  00000000  00000000  0003ae51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098128  00000000  00000000  0004fc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c0  00000000  00000000  000e7db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ed374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005878 	.word	0x08005878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005878 	.word	0x08005878

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <KeyPad_Scan>:
void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}


uint8_t KeyPad_Scan(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 80004d6:	f003 fd25 	bl	8003f24 <xTaskGetTickCount>
 80004da:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <KeyPad_Scan+0x9c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	2b63      	cmp	r3, #99	@ 0x63
 80004e6:	d801      	bhi.n	80004ec <KeyPad_Scan+0x1c>
        return 0xFF;
 80004e8:	23ff      	movs	r3, #255	@ 0xff
 80004ea:	e03b      	b.n	8000564 <KeyPad_Scan+0x94>
    }

    for (uint8_t row = 0; row < 4; row++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	e034      	b.n	800055c <KeyPad_Scan+0x8c>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80004f8:	481d      	ldr	r0, [pc, #116]	@ (8000570 <KeyPad_Scan+0xa0>)
 80004fa:	f001 f92b 	bl	8001754 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2240      	movs	r2, #64	@ 0x40
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	b29b      	uxth	r3, r3
 8000508:	2201      	movs	r2, #1
 800050a:	4619      	mov	r1, r3
 800050c:	4818      	ldr	r0, [pc, #96]	@ (8000570 <KeyPad_Scan+0xa0>)
 800050e:	f001 f921 	bl	8001754 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000512:	2300      	movs	r3, #0
 8000514:	71bb      	strb	r3, [r7, #6]
 8000516:	e01b      	b.n	8000550 <KeyPad_Scan+0x80>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2201      	movs	r2, #1
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	b29b      	uxth	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	4812      	ldr	r0, [pc, #72]	@ (8000570 <KeyPad_Scan+0xa0>)
 8000526:	f001 f8fd 	bl	8001724 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10c      	bne.n	800054a <KeyPad_Scan+0x7a>
                lastDebounceTime = currentMillis;
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <KeyPad_Scan+0x9c>)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	79b9      	ldrb	r1, [r7, #6]
 800053a:	480e      	ldr	r0, [pc, #56]	@ (8000574 <KeyPad_Scan+0xa4>)
 800053c:	4613      	mov	r3, r2
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	4403      	add	r3, r0
 8000544:	440b      	add	r3, r1
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	e00c      	b.n	8000564 <KeyPad_Scan+0x94>
        for (uint8_t col = 0; col < 5; col++) {
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	3301      	adds	r3, #1
 800054e:	71bb      	strb	r3, [r7, #6]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	2b04      	cmp	r3, #4
 8000554:	d9e0      	bls.n	8000518 <KeyPad_Scan+0x48>
    for (uint8_t row = 0; row < 4; row++) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	3301      	adds	r3, #1
 800055a:	71fb      	strb	r3, [r7, #7]
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d9c7      	bls.n	80004f2 <KeyPad_Scan+0x22>
            }
        }
    }

    return 0xFF;
 8000562:	23ff      	movs	r3, #255	@ 0xff
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000098 	.word	0x20000098
 8000570:	40020400 	.word	0x40020400
 8000574:	080058cc 	.word	0x080058cc

08000578 <ShiftOut_SPI>:

uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000588:	4823      	ldr	r0, [pc, #140]	@ (8000618 <ShiftOut_SPI+0xa0>)
 800058a:	f001 f8e3 	bl	8001754 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	4822      	ldr	r0, [pc, #136]	@ (800061c <ShiftOut_SPI+0xa4>)
 8000594:	f001 f8de 	bl	8001754 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e003      	b.n	80005a6 <ShiftOut_SPI+0x2e>
 800059e:	bf00      	nop
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005ac:	dbf7      	blt.n	800059e <ShiftOut_SPI+0x26>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005ae:	bf00      	nop
 80005b0:	481b      	ldr	r0, [pc, #108]	@ (8000620 <ShiftOut_SPI+0xa8>)
 80005b2:	f001 ff2b 	bl	800240c <HAL_SPI_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f9      	bne.n	80005b0 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4816      	ldr	r0, [pc, #88]	@ (8000620 <ShiftOut_SPI+0xa8>)
 80005c8:	f001 fddd 	bl	8002186 <HAL_SPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 80005d2:	f000 fc50 	bl	8000e76 <Error_Handler>
    }
//    osDelay(10);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	e003      	b.n	80005e4 <ShiftOut_SPI+0x6c>
 80005dc:	bf00      	nop
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005ea:	dbf7      	blt.n	80005dc <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005ec:	bf00      	nop
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <ShiftOut_SPI+0xa8>)
 80005f0:	f001 ff0c 	bl	800240c <HAL_SPI_GetState>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d1f9      	bne.n	80005ee <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <ShiftOut_SPI+0xa0>)
 8000602:	f001 f8a7 	bl	8001754 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <ShiftOut_SPI+0xa4>)
 800060c:	f001 f8a2 	bl	8001754 <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020400 	.word	0x40020400
 800061c:	40020800 	.word	0x40020800
 8000620:	2000009c 	.word	0x2000009c

08000624 <SevenSegLEDsHandler>:
uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b05      	cmp	r3, #5
 8000634:	f200 815d 	bhi.w	80008f2 <SevenSegLEDsHandler+0x2ce>
 8000638:	a201      	add	r2, pc, #4	@ (adr r2, 8000640 <SevenSegLEDsHandler+0x1c>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000659 	.word	0x08000659
 8000644:	080006b3 	.word	0x080006b3
 8000648:	08000725 	.word	0x08000725
 800064c:	08000797 	.word	0x08000797
 8000650:	08000809 	.word	0x08000809
 8000654:	0800087b 	.word	0x0800087b
        case 0:
            output[0] = buffer[0] % 10;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	4ba8      	ldr	r3, [pc, #672]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800065e:	fba3 2301 	umull	r2, r3, r3, r1
 8000662:	08da      	lsrs	r2, r3, #3
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	1aca      	subs	r2, r1, r3
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	4ba4      	ldr	r3, [pc, #656]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000672:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3304      	adds	r3, #4
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	4ba1      	ldr	r3, [pc, #644]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800067c:	fba3 2301 	umull	r2, r3, r3, r1
 8000680:	08da      	lsrs	r2, r3, #3
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	1aca      	subs	r2, r1, r3
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	4b9d      	ldr	r3, [pc, #628]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000690:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3308      	adds	r3, #8
 8000696:	6819      	ldr	r1, [r3, #0]
 8000698:	4b99      	ldr	r3, [pc, #612]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800069a:	fba3 2301 	umull	r2, r3, r3, r1
 800069e:	08da      	lsrs	r2, r3, #3
 80006a0:	4613      	mov	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	1aca      	subs	r2, r1, r3
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	4b95      	ldr	r3, [pc, #596]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80006ae:	709a      	strb	r2, [r3, #2]
            break;
 80006b0:	e11f      	b.n	80008f2 <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a92      	ldr	r2, [pc, #584]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80006b8:	fba2 2303 	umull	r2, r3, r2, r3
 80006bc:	08d9      	lsrs	r1, r3, #3
 80006be:	4b90      	ldr	r3, [pc, #576]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80006c0:	fba3 2301 	umull	r2, r3, r3, r1
 80006c4:	08da      	lsrs	r2, r3, #3
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	1aca      	subs	r2, r1, r3
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	4b8c      	ldr	r3, [pc, #560]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80006d4:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3304      	adds	r3, #4
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a88      	ldr	r2, [pc, #544]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	08d9      	lsrs	r1, r3, #3
 80006e4:	4b86      	ldr	r3, [pc, #536]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80006e6:	fba3 2301 	umull	r2, r3, r3, r1
 80006ea:	08da      	lsrs	r2, r3, #3
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	1aca      	subs	r2, r1, r3
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	4b82      	ldr	r3, [pc, #520]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80006fa:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3308      	adds	r3, #8
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a7f      	ldr	r2, [pc, #508]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 8000704:	fba2 2303 	umull	r2, r3, r2, r3
 8000708:	08d9      	lsrs	r1, r3, #3
 800070a:	4b7d      	ldr	r3, [pc, #500]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800070c:	fba3 2301 	umull	r2, r3, r3, r1
 8000710:	08da      	lsrs	r2, r3, #3
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	1aca      	subs	r2, r1, r3
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	4b79      	ldr	r3, [pc, #484]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000720:	709a      	strb	r2, [r3, #2]
            break;
 8000722:	e0e6      	b.n	80008f2 <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a77      	ldr	r2, [pc, #476]	@ (8000908 <SevenSegLEDsHandler+0x2e4>)
 800072a:	fba2 2303 	umull	r2, r3, r2, r3
 800072e:	0959      	lsrs	r1, r3, #5
 8000730:	4b73      	ldr	r3, [pc, #460]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 8000732:	fba3 2301 	umull	r2, r3, r3, r1
 8000736:	08da      	lsrs	r2, r3, #3
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	1aca      	subs	r2, r1, r3
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	4b6f      	ldr	r3, [pc, #444]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000746:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3304      	adds	r3, #4
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a6e      	ldr	r2, [pc, #440]	@ (8000908 <SevenSegLEDsHandler+0x2e4>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	0959      	lsrs	r1, r3, #5
 8000756:	4b6a      	ldr	r3, [pc, #424]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 8000758:	fba3 2301 	umull	r2, r3, r3, r1
 800075c:	08da      	lsrs	r2, r3, #3
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1aca      	subs	r2, r1, r3
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	4b66      	ldr	r3, [pc, #408]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 800076c:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3308      	adds	r3, #8
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a64      	ldr	r2, [pc, #400]	@ (8000908 <SevenSegLEDsHandler+0x2e4>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0959      	lsrs	r1, r3, #5
 800077c:	4b60      	ldr	r3, [pc, #384]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800077e:	fba3 2301 	umull	r2, r3, r3, r1
 8000782:	08da      	lsrs	r2, r3, #3
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	1aca      	subs	r2, r1, r3
 800078e:	b2d2      	uxtb	r2, r2
 8000790:	4b5c      	ldr	r3, [pc, #368]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000792:	709a      	strb	r2, [r3, #2]
            break;
 8000794:	e0ad      	b.n	80008f2 <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a5c      	ldr	r2, [pc, #368]	@ (800090c <SevenSegLEDsHandler+0x2e8>)
 800079c:	fba2 2303 	umull	r2, r3, r2, r3
 80007a0:	0999      	lsrs	r1, r3, #6
 80007a2:	4b57      	ldr	r3, [pc, #348]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80007a4:	fba3 2301 	umull	r2, r3, r3, r1
 80007a8:	08da      	lsrs	r2, r3, #3
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	1aca      	subs	r2, r1, r3
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	4b53      	ldr	r3, [pc, #332]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80007b8:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3304      	adds	r3, #4
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a52      	ldr	r2, [pc, #328]	@ (800090c <SevenSegLEDsHandler+0x2e8>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	0999      	lsrs	r1, r3, #6
 80007c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80007ca:	fba3 2301 	umull	r2, r3, r3, r1
 80007ce:	08da      	lsrs	r2, r3, #3
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1aca      	subs	r2, r1, r3
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	4b49      	ldr	r3, [pc, #292]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80007de:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3308      	adds	r3, #8
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a49      	ldr	r2, [pc, #292]	@ (800090c <SevenSegLEDsHandler+0x2e8>)
 80007e8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ec:	0999      	lsrs	r1, r3, #6
 80007ee:	4b44      	ldr	r3, [pc, #272]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80007f0:	fba3 2301 	umull	r2, r3, r3, r1
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	1aca      	subs	r2, r1, r3
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	4b40      	ldr	r3, [pc, #256]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000804:	709a      	strb	r2, [r3, #2]
            break;
 8000806:	e074      	b.n	80008f2 <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a40      	ldr	r2, [pc, #256]	@ (8000910 <SevenSegLEDsHandler+0x2ec>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0b59      	lsrs	r1, r3, #13
 8000814:	4b3a      	ldr	r3, [pc, #232]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 8000816:	fba3 2301 	umull	r2, r3, r3, r1
 800081a:	08da      	lsrs	r2, r3, #3
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	1aca      	subs	r2, r1, r3
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	4b36      	ldr	r3, [pc, #216]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 800082a:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a37      	ldr	r2, [pc, #220]	@ (8000910 <SevenSegLEDsHandler+0x2ec>)
 8000834:	fba2 2303 	umull	r2, r3, r2, r3
 8000838:	0b59      	lsrs	r1, r3, #13
 800083a:	4b31      	ldr	r3, [pc, #196]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800083c:	fba3 2301 	umull	r2, r3, r3, r1
 8000840:	08da      	lsrs	r2, r3, #3
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	1aca      	subs	r2, r1, r3
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	4b2d      	ldr	r3, [pc, #180]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000850:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3308      	adds	r3, #8
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a2d      	ldr	r2, [pc, #180]	@ (8000910 <SevenSegLEDsHandler+0x2ec>)
 800085a:	fba2 2303 	umull	r2, r3, r2, r3
 800085e:	0b59      	lsrs	r1, r3, #13
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 8000862:	fba3 2301 	umull	r2, r3, r3, r1
 8000866:	08da      	lsrs	r2, r3, #3
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	1aca      	subs	r2, r1, r3
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4b23      	ldr	r3, [pc, #140]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 8000876:	709a      	strb	r2, [r3, #2]
            break;
 8000878:	e03b      	b.n	80008f2 <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	4a24      	ldr	r2, [pc, #144]	@ (8000914 <SevenSegLEDsHandler+0x2f0>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	09d9      	lsrs	r1, r3, #7
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 800088a:	fba3 2301 	umull	r2, r3, r3, r1
 800088e:	08da      	lsrs	r2, r3, #3
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	1aca      	subs	r2, r1, r3
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 800089e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3304      	adds	r3, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000914 <SevenSegLEDsHandler+0x2f0>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	09d9      	lsrs	r1, r3, #7
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80008b2:	fba3 2301 	umull	r2, r3, r3, r1
 80008b6:	08da      	lsrs	r2, r3, #3
 80008b8:	4613      	mov	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1aca      	subs	r2, r1, r3
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80008c6:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3308      	adds	r3, #8
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <SevenSegLEDsHandler+0x2f0>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	09d9      	lsrs	r1, r3, #7
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <SevenSegLEDsHandler+0x2dc>)
 80008da:	fba3 2301 	umull	r2, r3, r3, r1
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1aca      	subs	r2, r1, r3
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
 80008ee:	709a      	strb	r2, [r3, #2]
            break;
 80008f0:	bf00      	nop
    }
    return output;
 80008f2:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <SevenSegLEDsHandler+0x2e0>)
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	cccccccd 	.word	0xcccccccd
 8000904:	20000168 	.word	0x20000168
 8000908:	51eb851f 	.word	0x51eb851f
 800090c:	10624dd3 	.word	0x10624dd3
 8000910:	d1b71759 	.word	0xd1b71759
 8000914:	0a7c5ac5 	.word	0x0a7c5ac5

08000918 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
 8000924:	4613      	mov	r3, r2
 8000926:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	4619      	mov	r1, r3
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fe79 	bl	8000624 <SevenSegLEDsHandler>
 8000932:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b05      	cmp	r3, #5
 8000938:	d820      	bhi.n	800097c <UpdateDisplayBuffer+0x64>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <UpdateDisplayBuffer+0x28>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000959 	.word	0x08000959
 8000944:	0800095f 	.word	0x0800095f
 8000948:	08000965 	.word	0x08000965
 800094c:	0800096b 	.word	0x0800096b
 8000950:	08000971 	.word	0x08000971
 8000954:	08000977 	.word	0x08000977
        case 0:
            curr_scan = 0b11111110;
 8000958:	23fe      	movs	r3, #254	@ 0xfe
 800095a:	73fb      	strb	r3, [r7, #15]
            break;
 800095c:	e011      	b.n	8000982 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 800095e:	23fd      	movs	r3, #253	@ 0xfd
 8000960:	73fb      	strb	r3, [r7, #15]
            break;
 8000962:	e00e      	b.n	8000982 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8000964:	23fb      	movs	r3, #251	@ 0xfb
 8000966:	73fb      	strb	r3, [r7, #15]
            break;
 8000968:	e00b      	b.n	8000982 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 800096a:	23f7      	movs	r3, #247	@ 0xf7
 800096c:	73fb      	strb	r3, [r7, #15]
            break;
 800096e:	e008      	b.n	8000982 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000970:	23ef      	movs	r3, #239	@ 0xef
 8000972:	73fb      	strb	r3, [r7, #15]
            break;
 8000974:	e005      	b.n	8000982 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8000976:	23df      	movs	r3, #223	@ 0xdf
 8000978:	73fb      	strb	r3, [r7, #15]
            break;
 800097a:	e002      	b.n	8000982 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 800097c:	23ff      	movs	r3, #255	@ 0xff
 800097e:	73fb      	strb	r3, [r7, #15]
            break;
 8000980:	bf00      	nop
    }
    displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 8000982:	78ba      	ldrb	r2, [r7, #2]
 8000984:	491f      	ldr	r1, [pc, #124]	@ (8000a04 <UpdateDisplayBuffer+0xec>)
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	440b      	add	r3, r1
 800098e:	22ff      	movs	r2, #255	@ 0xff
 8000990:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][1] = digitMapWithDP[curr_digit[2]];
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3302      	adds	r3, #2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	78ba      	ldrb	r2, [r7, #2]
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <UpdateDisplayBuffer+0xf0>)
 800099e:	5c58      	ldrb	r0, [r3, r1]
 80009a0:	4918      	ldr	r1, [pc, #96]	@ (8000a04 <UpdateDisplayBuffer+0xec>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	3301      	adds	r3, #1
 80009ac:	4602      	mov	r2, r0
 80009ae:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][2] = curr_scan;
 80009b0:	78ba      	ldrb	r2, [r7, #2]
 80009b2:	4914      	ldr	r1, [pc, #80]	@ (8000a04 <UpdateDisplayBuffer+0xec>)
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	440b      	add	r3, r1
 80009bc:	3302      	adds	r3, #2
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[1]];
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	78ba      	ldrb	r2, [r7, #2]
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <UpdateDisplayBuffer+0xf0>)
 80009ce:	5c58      	ldrb	r0, [r3, r1]
 80009d0:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <UpdateDisplayBuffer+0xec>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	440b      	add	r3, r1
 80009da:	3303      	adds	r3, #3
 80009dc:	4602      	mov	r2, r0
 80009de:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][4] = digitMapWithDP[curr_digit[0]];
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	78ba      	ldrb	r2, [r7, #2]
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <UpdateDisplayBuffer+0xf0>)
 80009ea:	5c58      	ldrb	r0, [r3, r1]
 80009ec:	4905      	ldr	r1, [pc, #20]	@ (8000a04 <UpdateDisplayBuffer+0xec>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	3304      	adds	r3, #4
 80009f8:	4602      	mov	r2, r0
 80009fa:	701a      	strb	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000015c 	.word	0x2000015c
 8000a08:	20000000 	.word	0x20000000

08000a0c <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <SevenSegLEDsScan+0x7c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <SevenSegLEDsScan+0x80>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <SevenSegLEDsScan+0x84>)
 8000a32:	f7ff ff71 	bl	8000918 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a36:	b672      	cpsid	i
}
 8000a38:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <SevenSegLEDsScan+0x7c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <SevenSegLEDsScan+0x88>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd92 	bl	8000578 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8000a54:	4a0c      	ldr	r2, [pc, #48]	@ (8000a88 <SevenSegLEDsScan+0x7c>)
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a5a:	b662      	cpsie	i
}
 8000a5c:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <SevenSegLEDsScan+0x80>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <SevenSegLEDsScan+0x8c>)
 8000a68:	fb83 3102 	smull	r3, r1, r3, r2
 8000a6c:	17d3      	asrs	r3, r2, #31
 8000a6e:	1ac9      	subs	r1, r1, r3
 8000a70:	460b      	mov	r3, r1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	440b      	add	r3, r1
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	1ad1      	subs	r1, r2, r3
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <SevenSegLEDsScan+0x80>)
 8000a7e:	701a      	strb	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000166 	.word	0x20000166
 8000a8c:	20000150 	.word	0x20000150
 8000a90:	2000000c 	.word	0x2000000c
 8000a94:	2000015c 	.word	0x2000015c
 8000a98:	2aaaaaab 	.word	0x2aaaaaab

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fb98 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f828 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f8fa 	bl	8000ca0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aac:	f000 f88c 	bl	8000bc8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ab0:	f000 f8c0 	bl	8000c34 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ab4:	f002 f84c 	bl	8002b50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8000ab8:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <main+0x44>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <main+0x48>)
 8000abe:	f002 f891 	bl	8002be4 <osThreadNew>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <main+0x4c>)
 8000ac6:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8000ac8:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <main+0x50>)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <main+0x54>)
 8000ace:	f002 f889 	bl	8002be4 <osThreadNew>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <main+0x58>)
 8000ad6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ad8:	f002 f85e 	bl	8002b98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <main+0x40>
 8000ae0:	080058e0 	.word	0x080058e0
 8000ae4:	08000da5 	.word	0x08000da5
 8000ae8:	20000154 	.word	0x20000154
 8000aec:	08005904 	.word	0x08005904
 8000af0:	08000de1 	.word	0x08000de1
 8000af4:	20000158 	.word	0x20000158

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	@ 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fdce 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <SystemClock_Config+0xc8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a26      	ldr	r2, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xc8>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <SystemClock_Config+0xc8>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a20      	ldr	r2, [pc, #128]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <SystemClock_Config+0xcc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b6c:	2364      	movs	r3, #100	@ 0x64
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fe03 	bl	8001788 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 f975 	bl	8000e76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 f865 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb4:	f000 f95f 	bl	8000e76 <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3750      	adds	r7, #80	@ 0x50
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <MX_SPI1_Init+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bfc:	2218      	movs	r2, #24
 8000bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c14:	220a      	movs	r2, #10
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c1a:	f001 fa2b 	bl	8002074 <HAL_SPI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c24:	f000 f927 	bl	8000e76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000009c 	.word	0x2000009c
 8000c30:	40013000 	.word	0x40013000

08000c34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c3a:	4a18      	ldr	r2, [pc, #96]	@ (8000c9c <MX_SPI2_Init+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c80:	220a      	movs	r2, #10
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_SPI2_Init+0x64>)
 8000c86:	f001 f9f5 	bl	8002074 <HAL_SPI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c90:	f000 f8f1 	bl	8000e76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000f4 	.word	0x200000f4
 8000c9c:	40003800 	.word	0x40003800

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a36      	ldr	r2, [pc, #216]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a2f      	ldr	r2, [pc, #188]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a28      	ldr	r2, [pc, #160]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a21      	ldr	r2, [pc, #132]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_GPIO_Init+0xf8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000d26:	2200      	movs	r2, #0
 8000d28:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000d2c:	481b      	ldr	r0, [pc, #108]	@ (8000d9c <MX_GPIO_Init+0xfc>)
 8000d2e:	f000 fd11 	bl	8001754 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2180      	movs	r1, #128	@ 0x80
 8000d36:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <MX_GPIO_Init+0x100>)
 8000d38:	f000 fd0c 	bl	8001754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000d3c:	231f      	movs	r3, #31
 8000d3e:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <MX_GPIO_Init+0xfc>)
 8000d50:	f000 fb64 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000d54:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8000d58:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <MX_GPIO_Init+0xfc>)
 8000d6e:	f000 fb55 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_GPIO_Init+0x100>)
 8000d8a:	f000 fb47 	bl	800141c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	@ 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40020800 	.word	0x40020800

08000da4 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8000dac:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <Led3x6Run+0x38>)
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db6:	6018      	str	r0, [r3, #0]
 8000db8:	3304      	adds	r3, #4
 8000dba:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8000dbc:	f7ff fe26 	bl	8000a0c <SevenSegLEDsScan>
	  osDelay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f001 ffa1 	bl	8002d08 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2105      	movs	r1, #5
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fbd3 	bl	8000578 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f001 ff98 	bl	8002d08 <osDelay>
	  SevenSegLEDsScan();
 8000dd8:	bf00      	nop
 8000dda:	e7ef      	b.n	8000dbc <Led3x6Run+0x18>
 8000ddc:	080058ac 	.word	0x080058ac

08000de0 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //////////////////////////////////////////////////TODO (1) IF USING LCD/////////////////////////////////////////////////////////
	  //////////////////////////////////////////////TODO (2) IF TESTING 3X6 LEDS//////////////////////////////////////////////////////
	  keyPressed = KeyPad_Scan();
 8000de8:	f7ff fb72 	bl	80004d0 <KeyPad_Scan>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <KeyPad4x5Run+0x68>)
 8000df2:	701a      	strb	r2, [r3, #0]
	  if(keyPressed<10){
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <KeyPad4x5Run+0x68>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	d815      	bhi.n	8000e28 <KeyPad4x5Run+0x48>
//			  uint32_t temp=lcd_num*10+keyPressed; //  			TODO (1) UNCOMMENT IF USING LCD
		  uint32_t temp=SevenSegBuffer[0]*10+keyPressed; //	TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <KeyPad4x5Run+0x6c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <KeyPad4x5Run+0x68>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
		  if(temp<=99999999){
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <KeyPad4x5Run+0x70>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d811      	bhi.n	8000e3e <KeyPad4x5Run+0x5e>
			  lcd_num=temp;
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <KeyPad4x5Run+0x74>)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6013      	str	r3, [r2, #0]
//				  Update_LCD(lcd_num); // 						TODO (1) UNCOMMENT IF USING LCD
			  SevenSegBuffer[0]=temp; //					TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 8000e20:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <KeyPad4x5Run+0x6c>)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e00a      	b.n	8000e3e <KeyPad4x5Run+0x5e>
		  }
	  }
	  else if(keyPressed>=10 &&keyPressed<100){
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <KeyPad4x5Run+0x68>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d906      	bls.n	8000e3e <KeyPad4x5Run+0x5e>
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <KeyPad4x5Run+0x68>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b63      	cmp	r3, #99	@ 0x63
 8000e36:	d802      	bhi.n	8000e3e <KeyPad4x5Run+0x5e>
//			  lcd_num=0; //										TODO (1) UNCOMMENT IF USING LCD
//			  Update_LCD(lcd_num); // 							TODO (1) UNCOMMENT IF USING LCD
		  SevenSegBuffer[0]=0; //							TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <KeyPad4x5Run+0x6c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]

	  }
    osDelay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 ff62 	bl	8002d08 <osDelay>
	  keyPressed = KeyPad_Scan();
 8000e44:	e7d0      	b.n	8000de8 <KeyPad4x5Run+0x8>
 8000e46:	bf00      	nop
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	2000000c 	.word	0x2000000c
 8000e50:	05f5e0ff 	.word	0x05f5e0ff
 8000e54:	2000014c 	.word	0x2000014c

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e68:	d101      	bne.n	8000e6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6a:	f000 f9d5 	bl	8001218 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7a:	b672      	cpsid	i
}
 8000e7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_MspInit+0x54>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a11      	ldr	r2, [pc, #68]	@ (8000ed8 <HAL_MspInit+0x54>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <HAL_MspInit+0x54>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_MspInit+0x54>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_MspInit+0x54>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb6:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_MspInit+0x54>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	f06f 0001 	mvn.w	r0, #1
 8000eca:	f000 fa7d 	bl	80013c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	@ 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a41      	ldr	r2, [pc, #260]	@ (8001000 <HAL_SPI_MspInit+0x124>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12c      	bne.n	8000f58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	4b40      	ldr	r3, [pc, #256]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	4a3f      	ldr	r2, [pc, #252]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b39      	ldr	r3, [pc, #228]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a38      	ldr	r2, [pc, #224]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f36:	23a0      	movs	r3, #160	@ 0xa0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f46:	2305      	movs	r3, #5
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	482d      	ldr	r0, [pc, #180]	@ (8001008 <HAL_SPI_MspInit+0x12c>)
 8000f52:	f000 fa63 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f56:	e04f      	b.n	8000ff8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800100c <HAL_SPI_MspInit+0x130>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d14a      	bne.n	8000ff8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_SPI_MspInit+0x128>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480f      	ldr	r0, [pc, #60]	@ (8001010 <HAL_SPI_MspInit+0x134>)
 8000fd2:	f000 fa23 	bl	800141c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4808      	ldr	r0, [pc, #32]	@ (8001014 <HAL_SPI_MspInit+0x138>)
 8000ff4:	f000 fa12 	bl	800141c <HAL_GPIO_Init>
}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	@ 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40013000 	.word	0x40013000
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000
 800100c:	40003800 	.word	0x40003800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <HAL_InitTick+0xe8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a33      	ldr	r2, [pc, #204]	@ (8001100 <HAL_InitTick+0xe8>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <HAL_InitTick+0xe8>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001044:	f107 0210 	add.w	r2, r7, #16
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 ffde 	bl	8002010 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800105e:	f000 ffc3 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8001062:	6378      	str	r0, [r7, #52]	@ 0x34
 8001064:	e004      	b.n	8001070 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001066:	f000 ffbf 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 800106a:	4603      	mov	r3, r0
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <HAL_InitTick+0xec>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9b      	lsrs	r3, r3, #18
 800107a:	3b01      	subs	r3, #1
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <HAL_InitTick+0xf0>)
 8001080:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001084:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <HAL_InitTick+0xf0>)
 8001088:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800108c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800108e:	4a1e      	ldr	r2, [pc, #120]	@ (8001108 <HAL_InitTick+0xf0>)
 8001090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001092:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001094:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <HAL_InitTick+0xf0>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <HAL_InitTick+0xf0>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_InitTick+0xf0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010a6:	4818      	ldr	r0, [pc, #96]	@ (8001108 <HAL_InitTick+0xf0>)
 80010a8:	f001 fa9a 	bl	80025e0 <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d11b      	bne.n	80010f2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80010ba:	4813      	ldr	r0, [pc, #76]	@ (8001108 <HAL_InitTick+0xf0>)
 80010bc:	f001 faea 	bl	8002694 <HAL_TIM_Base_Start_IT>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d111      	bne.n	80010f2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ce:	201c      	movs	r0, #28
 80010d0:	f000 f996 	bl	8001400 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d808      	bhi.n	80010ec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80010da:	2200      	movs	r2, #0
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	201c      	movs	r0, #28
 80010e0:	f000 f972 	bl	80013c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e4:	4a09      	ldr	r2, [pc, #36]	@ (800110c <HAL_InitTick+0xf4>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e002      	b.n	80010f2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3738      	adds	r7, #56	@ 0x38
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	431bde83 	.word	0x431bde83
 8001108:	2000016c 	.word	0x2000016c
 800110c:	20000020 	.word	0x20000020

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f001 fb03 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000016c 	.word	0x2000016c

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SystemInit+0x20>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SystemInit+0x20>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001184:	f7ff ffea 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f004 fad9 	bl	8005764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fc73 	bl	8000a9c <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011c4:	08005950 	.word	0x08005950
  ldr r2, =_sbss
 80011c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011cc:	20004ce0 	.word	0x20004ce0

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_Init+0x40>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_Init+0x40>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_Init+0x40>)
 80011f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f8d8 	bl	80013b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f7ff ff08 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fe3c 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000024 	.word	0x20000024
 800123c:	200001b4 	.word	0x200001b4

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200001b4 	.word	0x200001b4

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	@ (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	@ (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff4c 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013da:	f7ff ff61 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 80013de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	f7ff ffb1 	bl	800134c <NVIC_EncodePriority>
 80013ea:	4602      	mov	r2, r0
 80013ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff80 	bl	80012f8 <__NVIC_SetPriority>
}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff54 	bl	80012bc <__NVIC_EnableIRQ>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e159      	b.n	80016ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8148 	bne.w	80016e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	2b02      	cmp	r3, #2
 800146c:	d130      	bne.n	80014d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a2 	beq.w	80016e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a56      	ldr	r2, [pc, #344]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b54      	ldr	r3, [pc, #336]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x202>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a48      	ldr	r2, [pc, #288]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1fe>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a47      	ldr	r2, [pc, #284]	@ (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1fa>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_GPIO_Init+0x2fc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1f6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a45      	ldr	r2, [pc, #276]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1f2>
 800160a:	2304      	movs	r3, #4
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800160e:	2307      	movs	r3, #7
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f aea2 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e001      	b.n	8001746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001746:	7bfb      	ldrb	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	807b      	strh	r3, [r7, #2]
 8001760:	4613      	mov	r3, r2
 8001762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001764:	787b      	ldrb	r3, [r7, #1]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001770:	e003      	b.n	800177a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	041a      	lsls	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e267      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d075      	beq.n	8001892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a6:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d00c      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b2:	4b85      	ldr	r3, [pc, #532]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b82      	ldr	r3, [pc, #520]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b7e      	ldr	r3, [pc, #504]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05b      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d157      	bne.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e242      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ee:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b70      	ldr	r3, [pc, #448]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6c      	ldr	r2, [pc, #432]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 8001820:	4b69      	ldr	r3, [pc, #420]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a68      	ldr	r2, [pc, #416]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b66      	ldr	r3, [pc, #408]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fcfe 	bl	8001240 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fcfa 	bl	8001240 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e207      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5b      	ldr	r3, [pc, #364]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xc0>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fcea 	bl	8001240 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fce6 	bl	8001240 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1f3      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b51      	ldr	r3, [pc, #324]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189e:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b47      	ldr	r3, [pc, #284]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b44      	ldr	r3, [pc, #272]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c7      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3b      	ldr	r3, [pc, #236]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4937      	ldr	r1, [pc, #220]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <HAL_RCC_OscConfig+0x244>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff fc9f 	bl	8001240 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fc9b 	bl	8001240 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a8      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4925      	ldr	r1, [pc, #148]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <HAL_RCC_OscConfig+0x244>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fc7e 	bl	8001240 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fc7a 	bl	8001240 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e187      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d036      	beq.n	80019e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_RCC_OscConfig+0x248>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fc5e 	bl	8001240 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fc5a 	bl	8001240 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e167      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <HAL_RCC_OscConfig+0x240>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x200>
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_RCC_OscConfig+0x248>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fc47 	bl	8001240 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	e00e      	b.n	80019d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fc43 	bl	8001240 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d907      	bls.n	80019d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e150      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b88      	ldr	r3, [pc, #544]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ea      	bne.n	80019b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8097 	beq.w	8001b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b81      	ldr	r3, [pc, #516]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b77      	ldr	r3, [pc, #476]	@ (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b74      	ldr	r3, [pc, #464]	@ (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a73      	ldr	r2, [pc, #460]	@ (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fc03 	bl	8001240 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fbff 	bl	8001240 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e10c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b6a      	ldr	r3, [pc, #424]	@ (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ea>
 8001a64:	4b64      	ldr	r3, [pc, #400]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a63      	ldr	r2, [pc, #396]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x30c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a86:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a94:	4b58      	ldr	r3, [pc, #352]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a98:	4a57      	ldr	r2, [pc, #348]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa0:	4b55      	ldr	r3, [pc, #340]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa4:	4a54      	ldr	r2, [pc, #336]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0304 	bic.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fbc4 	bl	8001240 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fbc0 	bl	8001240 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0cb      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b49      	ldr	r3, [pc, #292]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fbae 	bl	8001240 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fbaa 	bl	8001240 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0b5      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	4a38      	ldr	r2, [pc, #224]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a1 	beq.w	8001c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b26:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d05c      	beq.n	8001bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d141      	bne.n	8001bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb7e 	bl	8001240 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff fb7a 	bl	8001240 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e087      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	491b      	ldr	r1, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb53 	bl	8001240 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb4f 	bl	8001240 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e05c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x416>
 8001bbc:	e054      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb3c 	bl	8001240 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fb38 	bl	8001240 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e045      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bea:	e03d      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e038      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d028      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d121      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11a      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	@ (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	@ (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	@ (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff fa6a 	bl	8001240 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff fa66 	bl	8001240 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f8fa 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08005928 	.word	0x08005928
 8001e3c:	2000001c 	.word	0x2000001c
 8001e40:	20000020 	.word	0x20000020

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e48:	b090      	sub	sp, #64	@ 0x40
 8001e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e50:	2300      	movs	r3, #0
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5c:	4b59      	ldr	r3, [pc, #356]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d00d      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x40>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	f200 80a1 	bhi.w	8001fb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x34>
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e76:	e09b      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001e7c:	e09b      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e7e:	4b53      	ldr	r3, [pc, #332]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8001e80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e82:	e098      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e84:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d028      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001eac:	2100      	movs	r1, #0
 8001eae:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8001eb0:	fb03 f201 	mul.w	r2, r3, r1
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	fb00 f303 	mul.w	r3, r0, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a43      	ldr	r2, [pc, #268]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ebe:	fba0 1202 	umull	r1, r2, r0, r2
 8001ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eca:	4413      	add	r3, r2
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	61fa      	str	r2, [r7, #28]
 8001ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ede:	f7fe f97f 	bl	80001e0 <__aeabi_uldivmod>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eea:	e053      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eec:	4b35      	ldr	r3, [pc, #212]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	617a      	str	r2, [r7, #20]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001efe:	f04f 0b00 	mov.w	fp, #0
 8001f02:	4652      	mov	r2, sl
 8001f04:	465b      	mov	r3, fp
 8001f06:	f04f 0000 	mov.w	r0, #0
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	0159      	lsls	r1, r3, #5
 8001f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f14:	0150      	lsls	r0, r2, #5
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f1e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f36:	ebb2 0408 	subs.w	r4, r2, r8
 8001f3a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	00eb      	lsls	r3, r5, #3
 8001f48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4c:	00e2      	lsls	r2, r4, #3
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	eb14 030a 	adds.w	r3, r4, sl
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	eb45 030b 	adc.w	r3, r5, fp
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	028b      	lsls	r3, r1, #10
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f74:	4621      	mov	r1, r4
 8001f76:	028a      	lsls	r2, r1, #10
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	60fa      	str	r2, [r7, #12]
 8001f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f88:	f7fe f92a 	bl	80001e0 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001fa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3740      	adds	r7, #64	@ 0x40
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	017d7840 	.word	0x017d7840

08001fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000001c 	.word	0x2000001c

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	@ (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	08005938 	.word	0x08005938

08002010 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	220f      	movs	r2, #15
 800201e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_RCC_GetClockConfig+0x5c>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002052:	4b07      	ldr	r3, [pc, #28]	@ (8002070 <HAL_RCC_GetClockConfig+0x60>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0207 	and.w	r2, r3, #7
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	601a      	str	r2, [r3, #0]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e07b      	b.n	800217e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002096:	d009      	beq.n	80020ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
 800209e:	e005      	b.n	80020ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe ff08 	bl	8000edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	ea42 0103 	orr.w	r1, r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	f003 0104 	and.w	r1, r3, #4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	f003 0210 	and.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69da      	ldr	r2, [r3, #28]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800216c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4613      	mov	r3, r2
 8002194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_SPI_Transmit+0x22>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e12d      	b.n	8002404 <HAL_SPI_Transmit+0x27e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b0:	f7ff f846 	bl	8001240 <HAL_GetTick>
 80021b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d002      	beq.n	80021cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ca:	e116      	b.n	80023fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_SPI_Transmit+0x52>
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021dc:	e10d      	b.n	80023fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002224:	d10f      	bne.n	8002246 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002244:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002250:	2b40      	cmp	r3, #64	@ 0x40
 8002252:	d007      	beq.n	8002264 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800226c:	d14f      	bne.n	800230e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_SPI_Transmit+0xf6>
 8002276:	8afb      	ldrh	r3, [r7, #22]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d142      	bne.n	8002302 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022a0:	e02f      	b.n	8002302 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d112      	bne.n	80022d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	881a      	ldrh	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	1c9a      	adds	r2, r3, #2
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022d4:	e015      	b.n	8002302 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d6:	f7fe ffb3 	bl	8001240 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d803      	bhi.n	80022ee <HAL_SPI_Transmit+0x168>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022ec:	d102      	bne.n	80022f4 <HAL_SPI_Transmit+0x16e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002300:	e07b      	b.n	80023fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ca      	bne.n	80022a2 <HAL_SPI_Transmit+0x11c>
 800230c:	e050      	b.n	80023b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_SPI_Transmit+0x196>
 8002316:	8afb      	ldrh	r3, [r7, #22]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d144      	bne.n	80023a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002342:	e030      	b.n	80023a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d113      	bne.n	800237a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002378:	e015      	b.n	80023a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237a:	f7fe ff61 	bl	8001240 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d803      	bhi.n	8002392 <HAL_SPI_Transmit+0x20c>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002390:	d102      	bne.n	8002398 <HAL_SPI_Transmit+0x212>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023a4:	e029      	b.n	80023fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1c9      	bne.n	8002344 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8bf 	bl	8002538 <SPI_EndRxTxTransaction>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
 80023f0:	e003      	b.n	80023fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002402:	7ffb      	ldrb	r3, [r7, #31]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800241a:	b2db      	uxtb	r3, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002438:	f7fe ff02 	bl	8001240 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002448:	f7fe fefa 	bl	8001240 <HAL_GetTick>
 800244c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800244e:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	0d1b      	lsrs	r3, r3, #20
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245e:	e054      	b.n	800250a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002466:	d050      	beq.n	800250a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002468:	f7fe feea 	bl	8001240 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	429a      	cmp	r2, r3
 8002476:	d902      	bls.n	800247e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13d      	bne.n	80024fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800248c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002496:	d111      	bne.n	80024bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a0:	d004      	beq.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024aa:	d107      	bne.n	80024bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c4:	d10f      	bne.n	80024e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e017      	b.n	800252a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3b01      	subs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	bf0c      	ite	eq
 800251a:	2301      	moveq	r3, #1
 800251c:	2300      	movne	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	429a      	cmp	r2, r3
 8002526:	d19b      	bne.n	8002460 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000001c 	.word	0x2000001c

08002538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2201      	movs	r2, #1
 800254c:	2102      	movs	r1, #2
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff ff6a 	bl	8002428 <SPI_WaitFlagStateUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e032      	b.n	80025d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <SPI_EndRxTxTransaction+0xa0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	@ (80025dc <SPI_EndRxTxTransaction+0xa4>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	0d5b      	lsrs	r3, r3, #21
 8002576:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002588:	d112      	bne.n	80025b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	@ 0x80
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff ff47 	bl	8002428 <SPI_WaitFlagStateUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d016      	beq.n	80025ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e00f      	b.n	80025d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b80      	cmp	r3, #128	@ 0x80
 80025c8:	d0f2      	beq.n	80025b0 <SPI_EndRxTxTransaction+0x78>
 80025ca:	e000      	b.n	80025ce <SPI_EndRxTxTransaction+0x96>
        break;
 80025cc:	bf00      	nop
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	2000001c 	.word	0x2000001c
 80025dc:	165e9f81 	.word	0x165e9f81

080025e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e041      	b.n	8002676 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f839 	bl	800267e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f000 f9b2 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e044      	b.n	8002736 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <HAL_TIM_Base_Start_IT+0xb0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d018      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x6c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d6:	d013      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x6c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002748 <HAL_TIM_Base_Start_IT+0xb4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x6c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_TIM_Base_Start_IT+0xb8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x6c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_TIM_Base_Start_IT+0xbc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x6c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <HAL_TIM_Base_Start_IT+0xc0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d111      	bne.n	8002724 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b06      	cmp	r3, #6
 8002710:	d010      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002722:	e007      	b.n	8002734 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40000c00 	.word	0x40000c00
 8002754:	40014000 	.word	0x40014000

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d020      	beq.n	80027bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01b      	beq.n	80027bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0202 	mvn.w	r2, #2
 800278c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8d2 	bl	800294c <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8c4 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f8d5 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d020      	beq.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01b      	beq.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8ac 	bl	800294c <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f89e 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8af 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d020      	beq.n	8002854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0208 	mvn.w	r2, #8
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2204      	movs	r2, #4
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f886 	bl	800294c <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f878 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f889 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0210 	mvn.w	r2, #16
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2208      	movs	r2, #8
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f860 	bl	800294c <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f852 	bl	8002938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f863 	bl	8002960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0201 	mvn.w	r2, #1
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe faca 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8e6 	bl	8002ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f834 	bl	8002974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8b8 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a84 <TIM_Base_SetConfig+0xfc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00f      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a37      	ldr	r2, [pc, #220]	@ (8002a88 <TIM_Base_SetConfig+0x100>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a36      	ldr	r2, [pc, #216]	@ (8002a8c <TIM_Base_SetConfig+0x104>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a35      	ldr	r2, [pc, #212]	@ (8002a90 <TIM_Base_SetConfig+0x108>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a84 <TIM_Base_SetConfig+0xfc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01b      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e0:	d017      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a28      	ldr	r2, [pc, #160]	@ (8002a88 <TIM_Base_SetConfig+0x100>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a27      	ldr	r2, [pc, #156]	@ (8002a8c <TIM_Base_SetConfig+0x104>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00f      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a26      	ldr	r2, [pc, #152]	@ (8002a90 <TIM_Base_SetConfig+0x108>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a25      	ldr	r2, [pc, #148]	@ (8002a94 <TIM_Base_SetConfig+0x10c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <TIM_Base_SetConfig+0x110>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <TIM_Base_SetConfig+0x114>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <TIM_Base_SetConfig+0xfc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
  }
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <__NVIC_SetPriority>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <SysTick_Handler+0x1c>)
 8002b22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b24:	f001 fd46 	bl	80045b4 <xTaskGetSchedulerState>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d001      	beq.n	8002b32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b2e:	f002 fb3b 	bl	80051a8 <xPortSysTickHandler>
  }
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b40:	2100      	movs	r1, #0
 8002b42:	f06f 0004 	mvn.w	r0, #4
 8002b46:	f7ff ffbf 	bl	8002ac8 <__NVIC_SetPriority>
#endif
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b56:	f3ef 8305 	mrs	r3, IPSR
 8002b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b62:	f06f 0305 	mvn.w	r3, #5
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	e00c      	b.n	8002b84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <osKernelInitialize+0x44>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <osKernelInitialize+0x44>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	e002      	b.n	8002b84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b84:	687b      	ldr	r3, [r7, #4]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200001b8 	.word	0x200001b8

08002b98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b9e:	f3ef 8305 	mrs	r3, IPSR
 8002ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002baa:	f06f 0305 	mvn.w	r3, #5
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	e010      	b.n	8002bd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <osKernelStart+0x48>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d109      	bne.n	8002bce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002bba:	f7ff ffbf 	bl	8002b3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <osKernelStart+0x48>)
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bc4:	f001 f892 	bl	8003cec <vTaskStartScheduler>
      stat = osOK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	e002      	b.n	8002bd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bd4:	687b      	ldr	r3, [r7, #4]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200001b8 	.word	0x200001b8

08002be4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08e      	sub	sp, #56	@ 0x38
 8002be8:	af04      	add	r7, sp, #16
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf4:	f3ef 8305 	mrs	r3, IPSR
 8002bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d17e      	bne.n	8002cfe <osThreadNew+0x11a>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d07b      	beq.n	8002cfe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c0a:	2318      	movs	r3, #24
 8002c0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d045      	beq.n	8002caa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <osThreadNew+0x48>
        name = attr->name;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <osThreadNew+0x6e>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b38      	cmp	r3, #56	@ 0x38
 8002c44:	d805      	bhi.n	8002c52 <osThreadNew+0x6e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <osThreadNew+0x72>
        return (NULL);
 8002c52:	2300      	movs	r3, #0
 8002c54:	e054      	b.n	8002d00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <osThreadNew+0xa8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c74:	d90a      	bls.n	8002c8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <osThreadNew+0xa8>
        mem = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e010      	b.n	8002cae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <osThreadNew+0xca>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <osThreadNew+0xca>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <osThreadNew+0xca>
          mem = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e001      	b.n	8002cae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d110      	bne.n	8002cd6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cbc:	9202      	str	r2, [sp, #8]
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fe1a 	bl	8003904 <xTaskCreateStatic>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	e013      	b.n	8002cfe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d110      	bne.n	8002cfe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fe68 	bl	80039c4 <xTaskCreate>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <osThreadNew+0x11a>
            hTask = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cfe:	693b      	ldr	r3, [r7, #16]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3728      	adds	r7, #40	@ 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d10:	f3ef 8305 	mrs	r3, IPSR
 8002d14:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <osDelay+0x1c>
    stat = osErrorISR;
 8002d1c:	f06f 0305 	mvn.w	r3, #5
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e007      	b.n	8002d34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 ffa6 	bl	8003c80 <vTaskDelay>
    }
  }

  return (stat);
 8002d34:	68fb      	ldr	r3, [r7, #12]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <vApplicationGetIdleTaskMemory+0x2c>)
 8002d50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4a06      	ldr	r2, [pc, #24]	@ (8002d70 <vApplicationGetIdleTaskMemory+0x30>)
 8002d56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2280      	movs	r2, #128	@ 0x80
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200001bc 	.word	0x200001bc
 8002d70:	20000264 	.word	0x20000264

08002d74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4a06      	ldr	r2, [pc, #24]	@ (8002da4 <vApplicationGetTimerTaskMemory+0x30>)
 8002d8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20000464 	.word	0x20000464
 8002da4:	2000050c 	.word	0x2000050c

08002da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f103 0208 	add.w	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f103 0208 	add.w	r2, r3, #8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0208 	add.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e60:	d103      	bne.n	8002e6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e00c      	b.n	8002e84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e002      	b.n	8002e78 <vListInsert+0x2e>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d2f6      	bcs.n	8002e72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6852      	ldr	r2, [r2, #4]
 8002edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d103      	bne.n	8002ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1e5a      	subs	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f3c:	f002 f8a4 	bl	8005088 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	441a      	add	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	441a      	add	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	22ff      	movs	r2, #255	@ 0xff
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	22ff      	movs	r2, #255	@ 0xff
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d114      	bne.n	8002fbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01a      	beq.n	8002fd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3310      	adds	r3, #16
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f001 f942 	bl	8004228 <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002faa:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <xQueueGenericReset+0xd0>)
 8002fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	e009      	b.n	8002fd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3310      	adds	r3, #16
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fef1 	bl	8002da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3324      	adds	r3, #36	@ 0x24
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff feec 	bl	8002da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fd0:	f002 f88c 	bl	80050ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08e      	sub	sp, #56	@ 0x38
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	e7fd      	b.n	800302a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <xQueueGenericCreateStatic+0x56>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <xQueueGenericCreateStatic+0x5a>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <xQueueGenericCreateStatic+0x5c>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	623b      	str	r3, [r7, #32]
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d102      	bne.n	8003068 <xQueueGenericCreateStatic+0x84>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <xQueueGenericCreateStatic+0x88>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <xQueueGenericCreateStatic+0x8a>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	61fb      	str	r3, [r7, #28]
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	e7fd      	b.n	8003086 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800308a:	2350      	movs	r3, #80	@ 0x50
 800308c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b50      	cmp	r3, #80	@ 0x50
 8003092:	d00b      	beq.n	80030ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61bb      	str	r3, [r7, #24]
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80030c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f805 	bl	80030de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3730      	adds	r7, #48	@ 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e002      	b.n	8003100 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800310c:	2101      	movs	r1, #1
 800310e:	69b8      	ldr	r0, [r7, #24]
 8003110:	f7ff fefe 	bl	8002f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08e      	sub	sp, #56	@ 0x38
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <xQueueGenericSend+0x34>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueGenericSend+0x42>
 800315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueGenericSend+0x46>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueGenericSend+0x48>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <xQueueGenericSend+0x64>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d103      	bne.n	8003196 <xQueueGenericSend+0x72>
 800318e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <xQueueGenericSend+0x76>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueGenericSend+0x78>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <xQueueGenericSend+0x94>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	623b      	str	r3, [r7, #32]
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b8:	f001 f9fc 	bl	80045b4 <xTaskGetSchedulerState>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <xQueueGenericSend+0xa4>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <xQueueGenericSend+0xa8>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <xQueueGenericSend+0xaa>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <xQueueGenericSend+0xc6>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	61fb      	str	r3, [r7, #28]
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	e7fd      	b.n	80031e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ea:	f001 ff4d 	bl	8005088 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <xQueueGenericSend+0xdc>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d129      	bne.n	8003254 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003206:	f000 fa0f 	bl	8003628 <prvCopyDataToQueue>
 800320a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800320c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d010      	beq.n	8003236 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	3324      	adds	r3, #36	@ 0x24
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f805 	bl	8004228 <xTaskRemoveFromEventList>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003224:	4b3f      	ldr	r3, [pc, #252]	@ (8003324 <xQueueGenericSend+0x200>)
 8003226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	e00a      	b.n	800324c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800323c:	4b39      	ldr	r3, [pc, #228]	@ (8003324 <xQueueGenericSend+0x200>)
 800323e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800324c:	f001 ff4e 	bl	80050ec <vPortExitCritical>
				return pdPASS;
 8003250:	2301      	movs	r3, #1
 8003252:	e063      	b.n	800331c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800325a:	f001 ff47 	bl	80050ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800325e:	2300      	movs	r3, #0
 8003260:	e05c      	b.n	800331c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f83f 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003276:	f001 ff39 	bl	80050ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800327a:	f000 fda7 	bl	8003dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800327e:	f001 ff03 	bl	8005088 <vPortEnterCritical>
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003288:	b25b      	sxtb	r3, r3
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800328e:	d103      	bne.n	8003298 <xQueueGenericSend+0x174>
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a4:	d103      	bne.n	80032ae <xQueueGenericSend+0x18a>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ae:	f001 ff1d 	bl	80050ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b2:	1d3a      	adds	r2, r7, #4
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 f82e 	bl	800431c <xTaskCheckForTimeOut>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d124      	bne.n	8003310 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032c8:	f000 faa6 	bl	8003818 <prvIsQueueFull>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d4:	3310      	adds	r3, #16
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 ff52 	bl	8004184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032e2:	f000 fa31 	bl	8003748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032e6:	f000 fd7f 	bl	8003de8 <xTaskResumeAll>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f af7c 	bne.w	80031ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80032f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <xQueueGenericSend+0x200>)
 80032f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	e772      	b.n	80031ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003306:	f000 fa1f 	bl	8003748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800330a:	f000 fd6d 	bl	8003de8 <xTaskResumeAll>
 800330e:	e76c      	b.n	80031ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003312:	f000 fa19 	bl	8003748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003316:	f000 fd67 	bl	8003de8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800331a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800331c:	4618      	mov	r0, r3
 800331e:	3738      	adds	r7, #56	@ 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b090      	sub	sp, #64	@ 0x40
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800333a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <xQueueGenericSendFromISR+0x3e>
 800335e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <xQueueGenericSendFromISR+0x42>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <xQueueGenericSendFromISR+0x44>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d103      	bne.n	8003396 <xQueueGenericSendFromISR+0x6e>
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <xQueueGenericSendFromISR+0x72>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <xQueueGenericSendFromISR+0x74>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	623b      	str	r3, [r7, #32]
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033b8:	f001 ff46 	bl	8005248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033bc:	f3ef 8211 	mrs	r2, BASEPRI
 80033c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61fa      	str	r2, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <xQueueGenericSendFromISR+0xc2>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d12f      	bne.n	800344a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003400:	f000 f912 	bl	8003628 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003404:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800340c:	d112      	bne.n	8003434 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d016      	beq.n	8003444 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003418:	3324      	adds	r3, #36	@ 0x24
 800341a:	4618      	mov	r0, r3
 800341c:	f000 ff04 	bl	8004228 <xTaskRemoveFromEventList>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00e      	beq.n	8003444 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e007      	b.n	8003444 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003438:	3301      	adds	r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	b25a      	sxtb	r2, r3
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003444:	2301      	movs	r3, #1
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003448:	e001      	b.n	800344e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800344a:	2300      	movs	r3, #0
 800344c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003450:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003458:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800345a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800345c:	4618      	mov	r0, r3
 800345e:	3740      	adds	r7, #64	@ 0x40
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	@ 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <xQueueReceive+0x32>
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	623b      	str	r3, [r7, #32]
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <xQueueReceive+0x40>
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <xQueueReceive+0x44>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <xQueueReceive+0x46>
 80034a8:	2300      	movs	r3, #0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <xQueueReceive+0x62>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	61fb      	str	r3, [r7, #28]
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	e7fd      	b.n	80034c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034c6:	f001 f875 	bl	80045b4 <xTaskGetSchedulerState>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <xQueueReceive+0x72>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <xQueueReceive+0x76>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <xQueueReceive+0x78>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <xQueueReceive+0x94>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	61bb      	str	r3, [r7, #24]
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f8:	f001 fdc6 	bl	8005088 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01f      	beq.n	8003548 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800350c:	f000 f8f6 	bl	80036fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00f      	beq.n	8003540 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	3310      	adds	r3, #16
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fe7f 	bl	8004228 <xTaskRemoveFromEventList>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003530:	4b3c      	ldr	r3, [pc, #240]	@ (8003624 <xQueueReceive+0x1c0>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003540:	f001 fdd4 	bl	80050ec <vPortExitCritical>
				return pdPASS;
 8003544:	2301      	movs	r3, #1
 8003546:	e069      	b.n	800361c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800354e:	f001 fdcd 	bl	80050ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003552:	2300      	movs	r3, #0
 8003554:	e062      	b.n	800361c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fec5 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356a:	f001 fdbf 	bl	80050ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800356e:	f000 fc2d 	bl	8003dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003572:	f001 fd89 	bl	8005088 <vPortEnterCritical>
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800357c:	b25b      	sxtb	r3, r3
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003582:	d103      	bne.n	800358c <xQueueReceive+0x128>
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003592:	b25b      	sxtb	r3, r3
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003598:	d103      	bne.n	80035a2 <xQueueReceive+0x13e>
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035a2:	f001 fda3 	bl	80050ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a6:	1d3a      	adds	r2, r7, #4
 80035a8:	f107 0310 	add.w	r3, r7, #16
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 feb4 	bl	800431c <xTaskCheckForTimeOut>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d123      	bne.n	8003602 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035bc:	f000 f916 	bl	80037ec <prvIsQueueEmpty>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d017      	beq.n	80035f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	3324      	adds	r3, #36	@ 0x24
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fdd8 	bl	8004184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035d6:	f000 f8b7 	bl	8003748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035da:	f000 fc05 	bl	8003de8 <xTaskResumeAll>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d189      	bne.n	80034f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <xQueueReceive+0x1c0>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	e780      	b.n	80034f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f8:	f000 f8a6 	bl	8003748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035fc:	f000 fbf4 	bl	8003de8 <xTaskResumeAll>
 8003600:	e77a      	b.n	80034f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003604:	f000 f8a0 	bl	8003748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003608:	f000 fbee 	bl	8003de8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800360c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800360e:	f000 f8ed 	bl	80037ec <prvIsQueueEmpty>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	f43f af6f 	beq.w	80034f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800361a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800361c:	4618      	mov	r0, r3
 800361e:	3730      	adds	r7, #48	@ 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10d      	bne.n	8003662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d14d      	bne.n	80036ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ffcc 	bl	80045f0 <xTaskPriorityDisinherit>
 8003658:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e043      	b.n	80036ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d119      	bne.n	800369c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6858      	ldr	r0, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003670:	461a      	mov	r2, r3
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	f002 f89c 	bl	80057b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	441a      	add	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d32b      	bcc.n	80036ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e026      	b.n	80036ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68d8      	ldr	r0, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	461a      	mov	r2, r3
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	f002 f882 	bl	80057b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	425b      	negs	r3, r3
 80036b6:	441a      	add	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d207      	bcs.n	80036d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	425b      	negs	r3, r3
 80036d2:	441a      	add	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d105      	bne.n	80036ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036f2:	697b      	ldr	r3, [r7, #20]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d303      	bcc.n	8003730 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68d9      	ldr	r1, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	461a      	mov	r2, r3
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f002 f838 	bl	80057b0 <memcpy>
	}
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003750:	f001 fc9a 	bl	8005088 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800375a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800375c:	e011      	b.n	8003782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	d012      	beq.n	800378c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3324      	adds	r3, #36	@ 0x24
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fd5c 	bl	8004228 <xTaskRemoveFromEventList>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003776:	f000 fe35 	bl	80043e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	3b01      	subs	r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	dce9      	bgt.n	800375e <prvUnlockQueue+0x16>
 800378a:	e000      	b.n	800378e <prvUnlockQueue+0x46>
					break;
 800378c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	22ff      	movs	r2, #255	@ 0xff
 8003792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003796:	f001 fca9 	bl	80050ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800379a:	f001 fc75 	bl	8005088 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037a6:	e011      	b.n	80037cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d012      	beq.n	80037d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3310      	adds	r3, #16
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fd37 	bl	8004228 <xTaskRemoveFromEventList>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037c0:	f000 fe10 	bl	80043e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037c4:	7bbb      	ldrb	r3, [r7, #14]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	dce9      	bgt.n	80037a8 <prvUnlockQueue+0x60>
 80037d4:	e000      	b.n	80037d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	22ff      	movs	r2, #255	@ 0xff
 80037dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037e0:	f001 fc84 	bl	80050ec <vPortExitCritical>
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037f4:	f001 fc48 	bl	8005088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003800:	2301      	movs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e001      	b.n	800380a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800380a:	f001 fc6f 	bl	80050ec <vPortExitCritical>

	return xReturn;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003820:	f001 fc32 	bl	8005088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	429a      	cmp	r2, r3
 800382e:	d102      	bne.n	8003836 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e001      	b.n	800383a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800383a:	f001 fc57 	bl	80050ec <vPortExitCritical>

	return xReturn;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e014      	b.n	8003882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003858:	4a0f      	ldr	r2, [pc, #60]	@ (8003898 <vQueueAddToRegistry+0x50>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003864:	490c      	ldr	r1, [pc, #48]	@ (8003898 <vQueueAddToRegistry+0x50>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <vQueueAddToRegistry+0x50>)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800387a:	e006      	b.n	800388a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b07      	cmp	r3, #7
 8003886:	d9e7      	bls.n	8003858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	2000090c 	.word	0x2000090c

0800389c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038ac:	f001 fbec 	bl	8005088 <vPortEnterCritical>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038bc:	d103      	bne.n	80038c6 <vQueueWaitForMessageRestricted+0x2a>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d2:	d103      	bne.n	80038dc <vQueueWaitForMessageRestricted+0x40>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038dc:	f001 fc06 	bl	80050ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3324      	adds	r3, #36	@ 0x24
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fc6d 	bl	80041d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7ff ff26 	bl	8003748 <prvUnlockQueue>
	}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08e      	sub	sp, #56	@ 0x38
 8003908:	af04      	add	r7, sp, #16
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	623b      	str	r3, [r7, #32]
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	61fb      	str	r3, [r7, #28]
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800394e:	23a8      	movs	r3, #168	@ 0xa8
 8003950:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2ba8      	cmp	r3, #168	@ 0xa8
 8003956:	d00b      	beq.n	8003970 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	61bb      	str	r3, [r7, #24]
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003970:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01e      	beq.n	80039b6 <xTaskCreateStatic+0xb2>
 8003978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01b      	beq.n	80039b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	2202      	movs	r2, #2
 800398c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003990:	2300      	movs	r3, #0
 8003992:	9303      	str	r3, [sp, #12]
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	9302      	str	r3, [sp, #8]
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f851 	bl	8003a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039b0:	f000 f8f6 	bl	8003ba0 <prvAddNewTaskToReadyList>
 80039b4:	e001      	b.n	80039ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ba:	697b      	ldr	r3, [r7, #20]
	}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	@ 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08c      	sub	sp, #48	@ 0x30
 80039c8:	af04      	add	r7, sp, #16
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fc77 	bl	80052cc <pvPortMalloc>
 80039de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039e6:	20a8      	movs	r0, #168	@ 0xa8
 80039e8:	f001 fc70 	bl	80052cc <pvPortMalloc>
 80039ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80039fa:	e005      	b.n	8003a08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f001 fd33 	bl	8005468 <vPortFree>
 8003a02:	e001      	b.n	8003a08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d017      	beq.n	8003a3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9303      	str	r3, [sp, #12]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	9302      	str	r3, [sp, #8]
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f80f 	bl	8003a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a32:	69f8      	ldr	r0, [r7, #28]
 8003a34:	f000 f8b4 	bl	8003ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e002      	b.n	8003a44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a44:	69bb      	ldr	r3, [r7, #24]
	}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	461a      	mov	r2, r3
 8003a68:	21a5      	movs	r1, #165	@ 0xa5
 8003a6a:	f001 fe1d 	bl	80056a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	617b      	str	r3, [r7, #20]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01f      	beq.n	8003af0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e012      	b.n	8003adc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	7819      	ldrb	r1, [r3, #0]
 8003abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3334      	adds	r3, #52	@ 0x34
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d9e9      	bls.n	8003ab6 <prvInitialiseNewTask+0x66>
 8003ae2:	e000      	b.n	8003ae6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003ae4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aee:	e003      	b.n	8003af8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	2b37      	cmp	r3, #55	@ 0x37
 8003afc:	d901      	bls.n	8003b02 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003afe:	2337      	movs	r3, #55	@ 0x37
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b0c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	2200      	movs	r2, #0
 8003b12:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	3304      	adds	r3, #4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f965 	bl	8002de8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	3318      	adds	r3, #24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f960 	bl	8002de8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	3354      	adds	r3, #84	@ 0x54
 8003b52:	224c      	movs	r2, #76	@ 0x4c
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f001 fda6 	bl	80056a8 <memset>
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b94 <prvInitialiseNewTask+0x144>)
 8003b60:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	4a0c      	ldr	r2, [pc, #48]	@ (8003b98 <prvInitialiseNewTask+0x148>)
 8003b66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b9c <prvInitialiseNewTask+0x14c>)
 8003b6c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	68f9      	ldr	r1, [r7, #12]
 8003b72:	69b8      	ldr	r0, [r7, #24]
 8003b74:	f001 f95a 	bl	8004e2c <pxPortInitialiseStack>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20004ba0 	.word	0x20004ba0
 8003b98:	20004c08 	.word	0x20004c08
 8003b9c:	20004c70 	.word	0x20004c70

08003ba0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ba8:	f001 fa6e 	bl	8005088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bac:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <prvAddNewTaskToReadyList+0xc4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c64 <prvAddNewTaskToReadyList+0xc4>)
 8003bb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc4:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <prvAddNewTaskToReadyList+0xc4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d110      	bne.n	8003bee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bcc:	f000 fc2e 	bl	800442c <prvInitialiseTaskLists>
 8003bd0:	e00d      	b.n	8003bee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bd2:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <prvAddNewTaskToReadyList+0xcc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bda:	4b23      	ldr	r3, [pc, #140]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d802      	bhi.n	8003bee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003be8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <prvAddNewTaskToReadyList+0xd0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c70 <prvAddNewTaskToReadyList+0xd0>)
 8003bf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <prvAddNewTaskToReadyList+0xd0>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <prvAddNewTaskToReadyList+0xd4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d903      	bls.n	8003c14 <prvAddNewTaskToReadyList+0x74>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <prvAddNewTaskToReadyList+0xd4>)
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <prvAddNewTaskToReadyList+0xd8>)
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7ff f8e9 	bl	8002e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c30:	f001 fa5c 	bl	80050ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c34:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <prvAddNewTaskToReadyList+0xcc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d207      	bcs.n	8003c5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <prvAddNewTaskToReadyList+0xdc>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000e20 	.word	0x20000e20
 8003c68:	2000094c 	.word	0x2000094c
 8003c6c:	20000e2c 	.word	0x20000e2c
 8003c70:	20000e3c 	.word	0x20000e3c
 8003c74:	20000e28 	.word	0x20000e28
 8003c78:	20000950 	.word	0x20000950
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d018      	beq.n	8003cc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c92:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <vTaskDelay+0x64>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <vTaskDelay+0x32>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60bb      	str	r3, [r7, #8]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cb2:	f000 f88b 	bl	8003dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fd09 	bl	80046d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cbe:	f000 f893 	bl	8003de8 <xTaskResumeAll>
 8003cc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003cca:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <vTaskDelay+0x68>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000e48 	.word	0x20000e48
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	@ 0x28
 8003cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	1d39      	adds	r1, r7, #4
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f81c 	bl	8002d40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	4924      	ldr	r1, [pc, #144]	@ (8003dac <vTaskStartScheduler+0xc0>)
 8003d1c:	4824      	ldr	r0, [pc, #144]	@ (8003db0 <vTaskStartScheduler+0xc4>)
 8003d1e:	f7ff fdf1 	bl	8003904 <xTaskCreateStatic>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a23      	ldr	r2, [pc, #140]	@ (8003db4 <vTaskStartScheduler+0xc8>)
 8003d26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d28:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <vTaskStartScheduler+0xc8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e001      	b.n	8003d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d40:	f000 fd1a 	bl	8004778 <xTimerCreateTimerTask>
 8003d44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d11b      	bne.n	8003d84 <vTaskStartScheduler+0x98>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d60:	4b15      	ldr	r3, [pc, #84]	@ (8003db8 <vTaskStartScheduler+0xcc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3354      	adds	r3, #84	@ 0x54
 8003d66:	4a15      	ldr	r2, [pc, #84]	@ (8003dbc <vTaskStartScheduler+0xd0>)
 8003d68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d6a:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <vTaskStartScheduler+0xd4>)
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d72:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <vTaskStartScheduler+0xd8>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <vTaskStartScheduler+0xdc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d7e:	f001 f8df 	bl	8004f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d82:	e00f      	b.n	8003da4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d8a:	d10b      	bne.n	8003da4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	60fb      	str	r3, [r7, #12]
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <vTaskStartScheduler+0xb4>
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	080058b4 	.word	0x080058b4
 8003db0:	080043fd 	.word	0x080043fd
 8003db4:	20000e44 	.word	0x20000e44
 8003db8:	2000094c 	.word	0x2000094c
 8003dbc:	2000002c 	.word	0x2000002c
 8003dc0:	20000e40 	.word	0x20000e40
 8003dc4:	20000e2c 	.word	0x20000e2c
 8003dc8:	20000e24 	.word	0x20000e24

08003dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <vTaskSuspendAll+0x18>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	4a03      	ldr	r2, [pc, #12]	@ (8003de4 <vTaskSuspendAll+0x18>)
 8003dd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	20000e48 	.word	0x20000e48

08003de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003df6:	4b42      	ldr	r3, [pc, #264]	@ (8003f00 <xTaskResumeAll+0x118>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <xTaskResumeAll+0x2e>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	603b      	str	r3, [r7, #0]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e16:	f001 f937 	bl	8005088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e1a:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <xTaskResumeAll+0x118>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	4a37      	ldr	r2, [pc, #220]	@ (8003f00 <xTaskResumeAll+0x118>)
 8003e22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e24:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <xTaskResumeAll+0x118>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d162      	bne.n	8003ef2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e2c:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <xTaskResumeAll+0x11c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05e      	beq.n	8003ef2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e34:	e02f      	b.n	8003e96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e36:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <xTaskResumeAll+0x120>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3318      	adds	r3, #24
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f83a 	bl	8002ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff f835 	bl	8002ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e56:	4b2d      	ldr	r3, [pc, #180]	@ (8003f0c <xTaskResumeAll+0x124>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d903      	bls.n	8003e66 <xTaskResumeAll+0x7e>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	4a2a      	ldr	r2, [pc, #168]	@ (8003f0c <xTaskResumeAll+0x124>)
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4a27      	ldr	r2, [pc, #156]	@ (8003f10 <xTaskResumeAll+0x128>)
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fe ffc0 	bl	8002e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e86:	4b23      	ldr	r3, [pc, #140]	@ (8003f14 <xTaskResumeAll+0x12c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d302      	bcc.n	8003e96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e90:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <xTaskResumeAll+0x130>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e96:	4b1c      	ldr	r3, [pc, #112]	@ (8003f08 <xTaskResumeAll+0x120>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1cb      	bne.n	8003e36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ea4:	f000 fb66 	bl	8004574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <xTaskResumeAll+0x134>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eb4:	f000 f846 	bl	8003f44 <xTaskIncrementTick>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ebe:	4b16      	ldr	r3, [pc, #88]	@ (8003f18 <xTaskResumeAll+0x130>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f1      	bne.n	8003eb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <xTaskResumeAll+0x134>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ed6:	4b10      	ldr	r3, [pc, #64]	@ (8003f18 <xTaskResumeAll+0x130>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <xTaskResumeAll+0x138>)
 8003ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ef2:	f001 f8fb 	bl	80050ec <vPortExitCritical>

	return xAlreadyYielded;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000e48 	.word	0x20000e48
 8003f04:	20000e20 	.word	0x20000e20
 8003f08:	20000de0 	.word	0x20000de0
 8003f0c:	20000e28 	.word	0x20000e28
 8003f10:	20000950 	.word	0x20000950
 8003f14:	2000094c 	.word	0x2000094c
 8003f18:	20000e34 	.word	0x20000e34
 8003f1c:	20000e30 	.word	0x20000e30
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <xTaskGetTickCount+0x1c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f30:	687b      	ldr	r3, [r7, #4]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000e24 	.word	0x20000e24

08003f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <xTaskIncrementTick+0x148>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 8090 	bne.w	8004078 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f58:	4b4d      	ldr	r3, [pc, #308]	@ (8004090 <xTaskIncrementTick+0x14c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f60:	4a4b      	ldr	r2, [pc, #300]	@ (8004090 <xTaskIncrementTick+0x14c>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d121      	bne.n	8003fb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f6c:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <xTaskIncrementTick+0x150>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	603b      	str	r3, [r7, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <xTaskIncrementTick+0x46>
 8003f8e:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <xTaskIncrementTick+0x150>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4b40      	ldr	r3, [pc, #256]	@ (8004098 <xTaskIncrementTick+0x154>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a3e      	ldr	r2, [pc, #248]	@ (8004094 <xTaskIncrementTick+0x150>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4a3e      	ldr	r2, [pc, #248]	@ (8004098 <xTaskIncrementTick+0x154>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800409c <xTaskIncrementTick+0x158>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <xTaskIncrementTick+0x158>)
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	f000 fae2 	bl	8004574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80040a0 <xTaskIncrementTick+0x15c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d349      	bcc.n	800404e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fba:	4b36      	ldr	r3, [pc, #216]	@ (8004094 <xTaskIncrementTick+0x150>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc4:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <xTaskIncrementTick+0x15c>)
 8003fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fca:	601a      	str	r2, [r3, #0]
					break;
 8003fcc:	e03f      	b.n	800404e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fce:	4b31      	ldr	r3, [pc, #196]	@ (8004094 <xTaskIncrementTick+0x150>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d203      	bcs.n	8003fee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80040a0 <xTaskIncrementTick+0x15c>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fec:	e02f      	b.n	800404e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe ff62 	bl	8002ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	3318      	adds	r3, #24
 8004004:	4618      	mov	r0, r3
 8004006:	f7fe ff59 	bl	8002ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400e:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <xTaskIncrementTick+0x160>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d903      	bls.n	800401e <xTaskIncrementTick+0xda>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <xTaskIncrementTick+0x160>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <xTaskIncrementTick+0x164>)
 800402c:	441a      	add	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7fe fee4 	bl	8002e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <xTaskIncrementTick+0x168>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d3b8      	bcc.n	8003fba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800404c:	e7b5      	b.n	8003fba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800404e:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <xTaskIncrementTick+0x168>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004054:	4914      	ldr	r1, [pc, #80]	@ (80040a8 <xTaskIncrementTick+0x164>)
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d901      	bls.n	800406a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <xTaskIncrementTick+0x16c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e004      	b.n	8004082 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <xTaskIncrementTick+0x170>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a0d      	ldr	r2, [pc, #52]	@ (80040b4 <xTaskIncrementTick+0x170>)
 8004080:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004082:	697b      	ldr	r3, [r7, #20]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000e48 	.word	0x20000e48
 8004090:	20000e24 	.word	0x20000e24
 8004094:	20000dd8 	.word	0x20000dd8
 8004098:	20000ddc 	.word	0x20000ddc
 800409c:	20000e38 	.word	0x20000e38
 80040a0:	20000e40 	.word	0x20000e40
 80040a4:	20000e28 	.word	0x20000e28
 80040a8:	20000950 	.word	0x20000950
 80040ac:	2000094c 	.word	0x2000094c
 80040b0:	20000e34 	.word	0x20000e34
 80040b4:	20000e30 	.word	0x20000e30

080040b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040be:	4b2b      	ldr	r3, [pc, #172]	@ (800416c <vTaskSwitchContext+0xb4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004170 <vTaskSwitchContext+0xb8>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040cc:	e047      	b.n	800415e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80040ce:	4b28      	ldr	r3, [pc, #160]	@ (8004170 <vTaskSwitchContext+0xb8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <vTaskSwitchContext+0xbc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	e011      	b.n	8004100 <vTaskSwitchContext+0x48>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <vTaskSwitchContext+0x42>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	607b      	str	r3, [r7, #4]
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	e7fd      	b.n	80040f6 <vTaskSwitchContext+0x3e>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	491d      	ldr	r1, [pc, #116]	@ (8004178 <vTaskSwitchContext+0xc0>)
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0e3      	beq.n	80040dc <vTaskSwitchContext+0x24>
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4a16      	ldr	r2, [pc, #88]	@ (8004178 <vTaskSwitchContext+0xc0>)
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3308      	adds	r3, #8
 8004136:	429a      	cmp	r2, r3
 8004138:	d104      	bne.n	8004144 <vTaskSwitchContext+0x8c>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <vTaskSwitchContext+0xc4>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4a09      	ldr	r2, [pc, #36]	@ (8004174 <vTaskSwitchContext+0xbc>)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <vTaskSwitchContext+0xc4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3354      	adds	r3, #84	@ 0x54
 800415a:	4a09      	ldr	r2, [pc, #36]	@ (8004180 <vTaskSwitchContext+0xc8>)
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000e48 	.word	0x20000e48
 8004170:	20000e34 	.word	0x20000e34
 8004174:	20000e28 	.word	0x20000e28
 8004178:	20000950 	.word	0x20000950
 800417c:	2000094c 	.word	0x2000094c
 8004180:	2000002c 	.word	0x2000002c

08004184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <vTaskPlaceOnEventList+0x48>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3318      	adds	r3, #24
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fe fe48 	bl	8002e4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041ba:	2101      	movs	r1, #1
 80041bc:	6838      	ldr	r0, [r7, #0]
 80041be:	f000 fa87 	bl	80046d0 <prvAddCurrentTaskToDelayedList>
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	2000094c 	.word	0x2000094c

080041d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	617b      	str	r3, [r7, #20]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <vTaskPlaceOnEventListRestricted+0x54>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3318      	adds	r3, #24
 8004200:	4619      	mov	r1, r3
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7fe fdfd 	bl	8002e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004212:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f000 fa5a 	bl	80046d0 <prvAddCurrentTaskToDelayedList>
	}
 800421c:	bf00      	nop
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	2000094c 	.word	0x2000094c

08004228 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60fb      	str	r3, [r7, #12]
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	e7fd      	b.n	8004252 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	3318      	adds	r3, #24
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fe2e 	bl	8002ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004260:	4b1d      	ldr	r3, [pc, #116]	@ (80042d8 <xTaskRemoveFromEventList+0xb0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3304      	adds	r3, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fe25 	bl	8002ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <xTaskRemoveFromEventList+0xb4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d903      	bls.n	8004286 <xTaskRemoveFromEventList+0x5e>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004282:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <xTaskRemoveFromEventList+0xb4>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <xTaskRemoveFromEventList+0xb8>)
 8004294:	441a      	add	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe fdb0 	bl	8002e02 <vListInsertEnd>
 80042a2:	e005      	b.n	80042b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4619      	mov	r1, r3
 80042aa:	480e      	ldr	r0, [pc, #56]	@ (80042e4 <xTaskRemoveFromEventList+0xbc>)
 80042ac:	f7fe fda9 	bl	8002e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <xTaskRemoveFromEventList+0xc0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d905      	bls.n	80042ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <xTaskRemoveFromEventList+0xc4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e001      	b.n	80042ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042ce:	697b      	ldr	r3, [r7, #20]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000e48 	.word	0x20000e48
 80042dc:	20000e28 	.word	0x20000e28
 80042e0:	20000950 	.word	0x20000950
 80042e4:	20000de0 	.word	0x20000de0
 80042e8:	2000094c 	.word	0x2000094c
 80042ec:	20000e34 	.word	0x20000e34

080042f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <vTaskInternalSetTimeOutState+0x24>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004300:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <vTaskInternalSetTimeOutState+0x28>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000e38 	.word	0x20000e38
 8004318:	20000e24 	.word	0x20000e24

0800431c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	613b      	str	r3, [r7, #16]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60fb      	str	r3, [r7, #12]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004362:	f000 fe91 	bl	8005088 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004366:	4b1d      	ldr	r3, [pc, #116]	@ (80043dc <xTaskCheckForTimeOut+0xc0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800437e:	d102      	bne.n	8004386 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e023      	b.n	80043ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <xTaskCheckForTimeOut+0xc4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d007      	beq.n	80043a2 <xTaskCheckForTimeOut+0x86>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e015      	b.n	80043ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d20b      	bcs.n	80043c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff99 	bl	80042f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	e004      	b.n	80043ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ce:	f000 fe8d 	bl	80050ec <vPortExitCritical>

	return xReturn;
 80043d2:	69fb      	ldr	r3, [r7, #28]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000e24 	.word	0x20000e24
 80043e0:	20000e38 	.word	0x20000e38

080043e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <vTaskMissedYield+0x14>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000e34 	.word	0x20000e34

080043fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004404:	f000 f852 	bl	80044ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <prvIdleTask+0x28>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d9f9      	bls.n	8004404 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004410:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <prvIdleTask+0x2c>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004420:	e7f0      	b.n	8004404 <prvIdleTask+0x8>
 8004422:	bf00      	nop
 8004424:	20000950 	.word	0x20000950
 8004428:	e000ed04 	.word	0xe000ed04

0800442c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	e00c      	b.n	8004452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4a12      	ldr	r2, [pc, #72]	@ (800448c <prvInitialiseTaskLists+0x60>)
 8004444:	4413      	add	r3, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fcae 	bl	8002da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3301      	adds	r3, #1
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b37      	cmp	r3, #55	@ 0x37
 8004456:	d9ef      	bls.n	8004438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004458:	480d      	ldr	r0, [pc, #52]	@ (8004490 <prvInitialiseTaskLists+0x64>)
 800445a:	f7fe fca5 	bl	8002da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800445e:	480d      	ldr	r0, [pc, #52]	@ (8004494 <prvInitialiseTaskLists+0x68>)
 8004460:	f7fe fca2 	bl	8002da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004464:	480c      	ldr	r0, [pc, #48]	@ (8004498 <prvInitialiseTaskLists+0x6c>)
 8004466:	f7fe fc9f 	bl	8002da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800446a:	480c      	ldr	r0, [pc, #48]	@ (800449c <prvInitialiseTaskLists+0x70>)
 800446c:	f7fe fc9c 	bl	8002da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004470:	480b      	ldr	r0, [pc, #44]	@ (80044a0 <prvInitialiseTaskLists+0x74>)
 8004472:	f7fe fc99 	bl	8002da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <prvInitialiseTaskLists+0x78>)
 8004478:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <prvInitialiseTaskLists+0x64>)
 800447a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800447c:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <prvInitialiseTaskLists+0x7c>)
 800447e:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <prvInitialiseTaskLists+0x68>)
 8004480:	601a      	str	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000950 	.word	0x20000950
 8004490:	20000db0 	.word	0x20000db0
 8004494:	20000dc4 	.word	0x20000dc4
 8004498:	20000de0 	.word	0x20000de0
 800449c:	20000df4 	.word	0x20000df4
 80044a0:	20000e0c 	.word	0x20000e0c
 80044a4:	20000dd8 	.word	0x20000dd8
 80044a8:	20000ddc 	.word	0x20000ddc

080044ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044b2:	e019      	b.n	80044e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044b4:	f000 fde8 	bl	8005088 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b8:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <prvCheckTasksWaitingTermination+0x50>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe fcf9 	bl	8002ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <prvCheckTasksWaitingTermination+0x54>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004500 <prvCheckTasksWaitingTermination+0x54>)
 80044d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <prvCheckTasksWaitingTermination+0x58>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3b01      	subs	r3, #1
 80044da:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <prvCheckTasksWaitingTermination+0x58>)
 80044dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044de:	f000 fe05 	bl	80050ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f810 	bl	8004508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e8:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <prvCheckTasksWaitingTermination+0x58>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e1      	bne.n	80044b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000df4 	.word	0x20000df4
 8004500:	20000e20 	.word	0x20000e20
 8004504:	20000e08 	.word	0x20000e08

08004508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3354      	adds	r3, #84	@ 0x54
 8004514:	4618      	mov	r0, r3
 8004516:	f001 f8cf 	bl	80056b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004520:	2b00      	cmp	r3, #0
 8004522:	d108      	bne.n	8004536 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	4618      	mov	r0, r3
 800452a:	f000 ff9d 	bl	8005468 <vPortFree>
				vPortFree( pxTCB );
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 ff9a 	bl	8005468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004534:	e019      	b.n	800456a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800453c:	2b01      	cmp	r3, #1
 800453e:	d103      	bne.n	8004548 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 ff91 	bl	8005468 <vPortFree>
	}
 8004546:	e010      	b.n	800456a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800454e:	2b02      	cmp	r3, #2
 8004550:	d00b      	beq.n	800456a <prvDeleteTCB+0x62>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	60fb      	str	r3, [r7, #12]
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <prvDeleteTCB+0x5e>
	}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800457a:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <prvResetNextTaskUnblockTime+0x38>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004584:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800458a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800458c:	e008      	b.n	80045a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800458e:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <prvResetNextTaskUnblockTime+0x38>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a04      	ldr	r2, [pc, #16]	@ (80045b0 <prvResetNextTaskUnblockTime+0x3c>)
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000dd8 	.word	0x20000dd8
 80045b0:	20000e40 	.word	0x20000e40

080045b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <xTaskGetSchedulerState+0x34>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045c2:	2301      	movs	r3, #1
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	e008      	b.n	80045da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <xTaskGetSchedulerState+0x38>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045d0:	2302      	movs	r3, #2
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	e001      	b.n	80045da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045da:	687b      	ldr	r3, [r7, #4]
	}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	20000e2c 	.word	0x20000e2c
 80045ec:	20000e48 	.word	0x20000e48

080045f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d058      	beq.n	80046b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004606:	4b2f      	ldr	r3, [pc, #188]	@ (80046c4 <xTaskPriorityDisinherit+0xd4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	429a      	cmp	r2, r3
 800460e:	d00b      	beq.n	8004628 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60bb      	str	r3, [r7, #8]
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	1e5a      	subs	r2, r3, #1
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465a:	429a      	cmp	r2, r3
 800465c:	d02c      	beq.n	80046b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	d128      	bne.n	80046b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fc26 	bl	8002ebc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004688:	4b0f      	ldr	r3, [pc, #60]	@ (80046c8 <xTaskPriorityDisinherit+0xd8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d903      	bls.n	8004698 <xTaskPriorityDisinherit+0xa8>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	4a0c      	ldr	r2, [pc, #48]	@ (80046c8 <xTaskPriorityDisinherit+0xd8>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a09      	ldr	r2, [pc, #36]	@ (80046cc <xTaskPriorityDisinherit+0xdc>)
 80046a6:	441a      	add	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7fe fba7 	bl	8002e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046b8:	697b      	ldr	r3, [r7, #20]
	}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000094c 	.word	0x2000094c
 80046c8:	20000e28 	.word	0x20000e28
 80046cc:	20000950 	.word	0x20000950

080046d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046da:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <prvAddCurrentTaskToDelayedList+0x90>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046e0:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fbe8 	bl	8002ebc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f2:	d10a      	bne.n	800470a <prvAddCurrentTaskToDelayedList+0x3a>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4819      	ldr	r0, [pc, #100]	@ (8004768 <prvAddCurrentTaskToDelayedList+0x98>)
 8004704:	f7fe fb7d 	bl	8002e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004708:	e026      	b.n	8004758 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004712:	4b14      	ldr	r3, [pc, #80]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	429a      	cmp	r2, r3
 8004720:	d209      	bcs.n	8004736 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b0f      	ldr	r3, [pc, #60]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7fe fb8b 	bl	8002e4a <vListInsert>
}
 8004734:	e010      	b.n	8004758 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <prvAddCurrentTaskToDelayedList+0x94>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fe fb81 	bl	8002e4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004748:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d202      	bcs.n	8004758 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004752:	4a08      	ldr	r2, [pc, #32]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6013      	str	r3, [r2, #0]
}
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000e24 	.word	0x20000e24
 8004764:	2000094c 	.word	0x2000094c
 8004768:	20000e0c 	.word	0x20000e0c
 800476c:	20000ddc 	.word	0x20000ddc
 8004770:	20000dd8 	.word	0x20000dd8
 8004774:	20000e40 	.word	0x20000e40

08004778 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	@ 0x28
 800477c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004782:	f000 fb13 	bl	8004dac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004786:	4b1d      	ldr	r3, [pc, #116]	@ (80047fc <xTimerCreateTimerTask+0x84>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d021      	beq.n	80047d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004796:	1d3a      	adds	r2, r7, #4
 8004798:	f107 0108 	add.w	r1, r7, #8
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fae7 	bl	8002d74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	9202      	str	r2, [sp, #8]
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	2302      	movs	r3, #2
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2300      	movs	r3, #0
 80047b6:	460a      	mov	r2, r1
 80047b8:	4911      	ldr	r1, [pc, #68]	@ (8004800 <xTimerCreateTimerTask+0x88>)
 80047ba:	4812      	ldr	r0, [pc, #72]	@ (8004804 <xTimerCreateTimerTask+0x8c>)
 80047bc:	f7ff f8a2 	bl	8003904 <xTaskCreateStatic>
 80047c0:	4603      	mov	r3, r0
 80047c2:	4a11      	ldr	r2, [pc, #68]	@ (8004808 <xTimerCreateTimerTask+0x90>)
 80047c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <xTimerCreateTimerTask+0x90>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	613b      	str	r3, [r7, #16]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047f0:	697b      	ldr	r3, [r7, #20]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000e7c 	.word	0x20000e7c
 8004800:	080058bc 	.word	0x080058bc
 8004804:	08004945 	.word	0x08004945
 8004808:	20000e80 	.word	0x20000e80

0800480c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <xTimerGenericCommand+0x30>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	623b      	str	r3, [r7, #32]
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800483c:	4b19      	ldr	r3, [pc, #100]	@ (80048a4 <xTimerGenericCommand+0x98>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02a      	beq.n	800489a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	dc18      	bgt.n	8004888 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004856:	f7ff fead 	bl	80045b4 <xTaskGetSchedulerState>
 800485a:	4603      	mov	r3, r0
 800485c:	2b02      	cmp	r3, #2
 800485e:	d109      	bne.n	8004874 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004860:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <xTimerGenericCommand+0x98>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	f107 0110 	add.w	r1, r7, #16
 8004868:	2300      	movs	r3, #0
 800486a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486c:	f7fe fc5a 	bl	8003124 <xQueueGenericSend>
 8004870:	6278      	str	r0, [r7, #36]	@ 0x24
 8004872:	e012      	b.n	800489a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <xTimerGenericCommand+0x98>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	f107 0110 	add.w	r1, r7, #16
 800487c:	2300      	movs	r3, #0
 800487e:	2200      	movs	r2, #0
 8004880:	f7fe fc50 	bl	8003124 <xQueueGenericSend>
 8004884:	6278      	str	r0, [r7, #36]	@ 0x24
 8004886:	e008      	b.n	800489a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <xTimerGenericCommand+0x98>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	f107 0110 	add.w	r1, r7, #16
 8004890:	2300      	movs	r3, #0
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	f7fe fd48 	bl	8003328 <xQueueGenericSendFromISR>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	@ 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20000e7c 	.word	0x20000e7c

080048a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b2:	4b23      	ldr	r3, [pc, #140]	@ (8004940 <prvProcessExpiredTimer+0x98>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3304      	adds	r3, #4
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fafb 	bl	8002ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	18d1      	adds	r1, r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	6978      	ldr	r0, [r7, #20]
 80048e2:	f000 f8d5 	bl	8004a90 <prvInsertTimerInActiveList>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d020      	beq.n	800492e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048ec:	2300      	movs	r3, #0
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	2100      	movs	r1, #0
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f7ff ff88 	bl	800480c <xTimerGenericCommand>
 80048fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d114      	bne.n	800492e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60fb      	str	r3, [r7, #12]
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	4798      	blx	r3
}
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000e74 	.word	0x20000e74

08004944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800494c:	f107 0308 	add.w	r3, r7, #8
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f859 	bl	8004a08 <prvGetNextExpireTime>
 8004956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f805 	bl	800496c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004962:	f000 f8d7 	bl	8004b14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004966:	bf00      	nop
 8004968:	e7f0      	b.n	800494c <prvTimerTask+0x8>
	...

0800496c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004976:	f7ff fa29 	bl	8003dcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800497a:	f107 0308 	add.w	r3, r7, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f000 f866 	bl	8004a50 <prvSampleTimeNow>
 8004984:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d130      	bne.n	80049ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <prvProcessTimerOrBlockTask+0x3c>
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	429a      	cmp	r2, r3
 8004998:	d806      	bhi.n	80049a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800499a:	f7ff fa25 	bl	8003de8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff81 	bl	80048a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049a6:	e024      	b.n	80049f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049ae:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <prvProcessTimerOrBlockTask+0x90>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <prvProcessTimerOrBlockTask+0x50>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <prvProcessTimerOrBlockTask+0x52>
 80049bc:	2300      	movs	r3, #0
 80049be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a00 <prvProcessTimerOrBlockTask+0x94>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	f7fe ff65 	bl	800389c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049d2:	f7ff fa09 	bl	8003de8 <xTaskResumeAll>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049dc:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <prvProcessTimerOrBlockTask+0x98>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
}
 80049ec:	e001      	b.n	80049f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049ee:	f7ff f9fb 	bl	8003de8 <xTaskResumeAll>
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000e78 	.word	0x20000e78
 8004a00:	20000e7c 	.word	0x20000e7c
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a10:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <prvGetNextExpireTime+0x44>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <prvGetNextExpireTime+0x16>
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	e000      	b.n	8004a20 <prvGetNextExpireTime+0x18>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a2c:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <prvGetNextExpireTime+0x44>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e001      	b.n	8004a3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000e74 	.word	0x20000e74

08004a50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a58:	f7ff fa64 	bl	8003f24 <xTaskGetTickCount>
 8004a5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <prvSampleTimeNow+0x3c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d205      	bcs.n	8004a74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a68:	f000 f93a 	bl	8004ce0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e002      	b.n	8004a7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a7a:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <prvSampleTimeNow+0x3c>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000e84 	.word	0x20000e84

08004a90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d812      	bhi.n	8004adc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d302      	bcc.n	8004aca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	e01b      	b.n	8004b02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004aca:	4b10      	ldr	r3, [pc, #64]	@ (8004b0c <prvInsertTimerInActiveList+0x7c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7fe f9b8 	bl	8002e4a <vListInsert>
 8004ada:	e012      	b.n	8004b02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d206      	bcs.n	8004af2 <prvInsertTimerInActiveList+0x62>
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e007      	b.n	8004b02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004af2:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <prvInsertTimerInActiveList+0x80>)
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f7fe f9a4 	bl	8002e4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000e78 	.word	0x20000e78
 8004b10:	20000e74 	.word	0x20000e74

08004b14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08e      	sub	sp, #56	@ 0x38
 8004b18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b1a:	e0ce      	b.n	8004cba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da19      	bge.n	8004b56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	3304      	adds	r3, #4
 8004b26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	61fb      	str	r3, [r7, #28]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4c:	6850      	ldr	r0, [r2, #4]
 8004b4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	4611      	mov	r1, r2
 8004b54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f2c0 80ae 	blt.w	8004cba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d004      	beq.n	8004b74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f9a4 	bl	8002ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b74:	463b      	mov	r3, r7
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ff6a 	bl	8004a50 <prvSampleTimeNow>
 8004b7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	f200 8097 	bhi.w	8004cb4 <prvProcessReceivedCommands+0x1a0>
 8004b86:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <prvProcessReceivedCommands+0x78>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004bb5 	.word	0x08004bb5
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bb5 	.word	0x08004bb5
 8004b98:	08004c2b 	.word	0x08004c2b
 8004b9c:	08004c3f 	.word	0x08004c3f
 8004ba0:	08004c8b 	.word	0x08004c8b
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bb5 	.word	0x08004bb5
 8004bac:	08004c2b 	.word	0x08004c2b
 8004bb0:	08004c3f 	.word	0x08004c3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	18d1      	adds	r1, r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd4:	f7ff ff5c 	bl	8004a90 <prvInsertTimerInActiveList>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d06c      	beq.n	8004cb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d061      	beq.n	8004cb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	441a      	add	r2, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2300      	movs	r3, #0
 8004c02:	2100      	movs	r1, #0
 8004c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c06:	f7ff fe01 	bl	800480c <xTimerGenericCommand>
 8004c0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d152      	bne.n	8004cb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	61bb      	str	r3, [r7, #24]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c3c:	e03d      	b.n	8004cba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10b      	bne.n	8004c76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	617b      	str	r3, [r7, #20]
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	e7fd      	b.n	8004c72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	18d1      	adds	r1, r2, r3
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c84:	f7ff ff04 	bl	8004a90 <prvInsertTimerInActiveList>
					break;
 8004c88:	e017      	b.n	8004cba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c9a:	f000 fbe5 	bl	8005468 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c9e:	e00c      	b.n	8004cba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cb2:	e002      	b.n	8004cba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <prvProcessReceivedCommands+0x1a6>
					break;
 8004cb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <prvProcessReceivedCommands+0x1c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1d39      	adds	r1, r7, #4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fbce 	bl	8003464 <xQueueReceive>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f af26 	bne.w	8004b1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3730      	adds	r7, #48	@ 0x30
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000e7c 	.word	0x20000e7c

08004ce0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ce6:	e049      	b.n	8004d7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8004da4 <prvSwitchTimerLists+0xc4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004da4 <prvSwitchTimerLists+0xc4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe f8db 	bl	8002ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02f      	beq.n	8004d7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d90e      	bls.n	8004d4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004da4 <prvSwitchTimerLists+0xc4>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7fe f880 	bl	8002e4a <vListInsert>
 8004d4a:	e017      	b.n	8004d7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2300      	movs	r3, #0
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	2100      	movs	r1, #0
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fd58 	bl	800480c <xTimerGenericCommand>
 8004d5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	603b      	str	r3, [r7, #0]
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d7c:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <prvSwitchTimerLists+0xc4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1b0      	bne.n	8004ce8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d86:	4b07      	ldr	r3, [pc, #28]	@ (8004da4 <prvSwitchTimerLists+0xc4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d8c:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <prvSwitchTimerLists+0xc8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a04      	ldr	r2, [pc, #16]	@ (8004da4 <prvSwitchTimerLists+0xc4>)
 8004d92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d94:	4a04      	ldr	r2, [pc, #16]	@ (8004da8 <prvSwitchTimerLists+0xc8>)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6013      	str	r3, [r2, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000e74 	.word	0x20000e74
 8004da8:	20000e78 	.word	0x20000e78

08004dac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004db2:	f000 f969 	bl	8005088 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <prvCheckForValidListAndQueue+0x60>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d120      	bne.n	8004e00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dbe:	4814      	ldr	r0, [pc, #80]	@ (8004e10 <prvCheckForValidListAndQueue+0x64>)
 8004dc0:	f7fd fff2 	bl	8002da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dc4:	4813      	ldr	r0, [pc, #76]	@ (8004e14 <prvCheckForValidListAndQueue+0x68>)
 8004dc6:	f7fd ffef 	bl	8002da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dca:	4b13      	ldr	r3, [pc, #76]	@ (8004e18 <prvCheckForValidListAndQueue+0x6c>)
 8004dcc:	4a10      	ldr	r2, [pc, #64]	@ (8004e10 <prvCheckForValidListAndQueue+0x64>)
 8004dce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004dd0:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <prvCheckForValidListAndQueue+0x70>)
 8004dd2:	4a10      	ldr	r2, [pc, #64]	@ (8004e14 <prvCheckForValidListAndQueue+0x68>)
 8004dd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <prvCheckForValidListAndQueue+0x74>)
 8004ddc:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <prvCheckForValidListAndQueue+0x78>)
 8004dde:	2110      	movs	r1, #16
 8004de0:	200a      	movs	r0, #10
 8004de2:	f7fe f8ff 	bl	8002fe4 <xQueueGenericCreateStatic>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <prvCheckForValidListAndQueue+0x60>)
 8004dea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <prvCheckForValidListAndQueue+0x60>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004df4:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <prvCheckForValidListAndQueue+0x60>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	490b      	ldr	r1, [pc, #44]	@ (8004e28 <prvCheckForValidListAndQueue+0x7c>)
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fd24 	bl	8003848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e00:	f000 f974 	bl	80050ec <vPortExitCritical>
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000e7c 	.word	0x20000e7c
 8004e10:	20000e4c 	.word	0x20000e4c
 8004e14:	20000e60 	.word	0x20000e60
 8004e18:	20000e74 	.word	0x20000e74
 8004e1c:	20000e78 	.word	0x20000e78
 8004e20:	20000f28 	.word	0x20000f28
 8004e24:	20000e88 	.word	0x20000e88
 8004e28:	080058c4 	.word	0x080058c4

08004e2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b04      	subs	r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <pxPortInitialiseStack+0x64>)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3b14      	subs	r3, #20
 8004e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f06f 0202 	mvn.w	r2, #2
 8004e7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3b20      	subs	r3, #32
 8004e80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	08004e95 	.word	0x08004e95

08004e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e9e:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <prvTaskExitError+0x58>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea6:	d00b      	beq.n	8004ec0 <prvTaskExitError+0x2c>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <prvTaskExitError+0x28>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60bb      	str	r3, [r7, #8]
}
 8004ed2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ed4:	bf00      	nop
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0fc      	beq.n	8004ed6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000028 	.word	0x20000028

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	4770      	bx	lr
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst2>:
 8004f10:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f18:	4808      	ldr	r0, [pc, #32]	@ (8004f3c <prvPortStartFirstTask+0x24>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8814 	msr	CONTROL, r0
 8004f2a:	b662      	cpsie	i
 8004f2c:	b661      	cpsie	f
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	df00      	svc	0
 8004f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed08 	.word	0xe000ed08

08004f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f46:	4b47      	ldr	r3, [pc, #284]	@ (8005064 <xPortStartScheduler+0x124>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a47      	ldr	r2, [pc, #284]	@ (8005068 <xPortStartScheduler+0x128>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10b      	bne.n	8004f68 <xPortStartScheduler+0x28>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f68:	4b3e      	ldr	r3, [pc, #248]	@ (8005064 <xPortStartScheduler+0x124>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800506c <xPortStartScheduler+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10b      	bne.n	8004f8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f8a:	4b39      	ldr	r3, [pc, #228]	@ (8005070 <xPortStartScheduler+0x130>)
 8004f8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	22ff      	movs	r2, #255	@ 0xff
 8004f9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	4b31      	ldr	r3, [pc, #196]	@ (8005074 <xPortStartScheduler+0x134>)
 8004fb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fb2:	4b31      	ldr	r3, [pc, #196]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb8:	e009      	b.n	8004fce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004fba:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b80      	cmp	r3, #128	@ 0x80
 8004fd8:	d0ef      	beq.n	8004fba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fda:	4b27      	ldr	r3, [pc, #156]	@ (8005078 <xPortStartScheduler+0x138>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1c3 0307 	rsb	r3, r3, #7
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d00b      	beq.n	8004ffe <xPortStartScheduler+0xbe>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	60bb      	str	r3, [r7, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8005078 <xPortStartScheduler+0x138>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <xPortStartScheduler+0x138>)
 8005006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005008:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <xPortStartScheduler+0x138>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <xPortStartScheduler+0x138>)
 8005012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800501c:	4b17      	ldr	r3, [pc, #92]	@ (800507c <xPortStartScheduler+0x13c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a16      	ldr	r2, [pc, #88]	@ (800507c <xPortStartScheduler+0x13c>)
 8005022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005028:	4b14      	ldr	r3, [pc, #80]	@ (800507c <xPortStartScheduler+0x13c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a13      	ldr	r2, [pc, #76]	@ (800507c <xPortStartScheduler+0x13c>)
 800502e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005034:	f000 f8da 	bl	80051ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <xPortStartScheduler+0x140>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800503e:	f000 f8f9 	bl	8005234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <xPortStartScheduler+0x144>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a0f      	ldr	r2, [pc, #60]	@ (8005084 <xPortStartScheduler+0x144>)
 8005048:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800504c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800504e:	f7ff ff63 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005052:	f7ff f831 	bl	80040b8 <vTaskSwitchContext>
	prvTaskExitError();
 8005056:	f7ff ff1d 	bl	8004e94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	e000ed00 	.word	0xe000ed00
 8005068:	410fc271 	.word	0x410fc271
 800506c:	410fc270 	.word	0x410fc270
 8005070:	e000e400 	.word	0xe000e400
 8005074:	20000f78 	.word	0x20000f78
 8005078:	20000f7c 	.word	0x20000f7c
 800507c:	e000ed20 	.word	0xe000ed20
 8005080:	20000028 	.word	0x20000028
 8005084:	e000ef34 	.word	0xe000ef34

08005088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
}
 80050a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050a2:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <vPortEnterCritical+0x5c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a0e      	ldr	r2, [pc, #56]	@ (80050e4 <vPortEnterCritical+0x5c>)
 80050aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050ac:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <vPortEnterCritical+0x5c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d110      	bne.n	80050d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050b4:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <vPortEnterCritical+0x60>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	603b      	str	r3, [r7, #0]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <vPortEnterCritical+0x4a>
	}
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000028 	.word	0x20000028
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050f2:	4b12      	ldr	r3, [pc, #72]	@ (800513c <vPortExitCritical+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <vPortExitCritical+0x26>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	607b      	str	r3, [r7, #4]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <vPortExitCritical+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a08      	ldr	r2, [pc, #32]	@ (800513c <vPortExitCritical+0x50>)
 800511a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800511c:	4b07      	ldr	r3, [pc, #28]	@ (800513c <vPortExitCritical+0x50>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <vPortExitCritical+0x44>
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000028 	.word	0x20000028

08005140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005140:	f3ef 8009 	mrs	r0, PSP
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <pxCurrentTCBConst>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f01e 0f10 	tst.w	lr, #16
 8005150:	bf08      	it	eq
 8005152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005164:	f380 8811 	msr	BASEPRI, r0
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f7fe ffa2 	bl	80040b8 <vTaskSwitchContext>
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f380 8811 	msr	BASEPRI, r0
 800517c:	bc09      	pop	{r0, r3}
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6808      	ldr	r0, [r1, #0]
 8005182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005186:	f01e 0f10 	tst.w	lr, #16
 800518a:	bf08      	it	eq
 800518c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005190:	f380 8809 	msr	PSP, r0
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst>:
 80051a0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c2:	f7fe febf 	bl	8003f44 <xTaskIncrementTick>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <xPortSysTickHandler+0x40>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
}
 80051de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <vPortSetupTimerInterrupt+0x34>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <vPortSetupTimerInterrupt+0x38>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <vPortSetupTimerInterrupt+0x3c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <vPortSetupTimerInterrupt+0x40>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	4a09      	ldr	r2, [pc, #36]	@ (8005230 <vPortSetupTimerInterrupt+0x44>)
 800520a:	3b01      	subs	r3, #1
 800520c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800520e:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <vPortSetupTimerInterrupt+0x34>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e010 	.word	0xe000e010
 8005224:	e000e018 	.word	0xe000e018
 8005228:	2000001c 	.word	0x2000001c
 800522c:	10624dd3 	.word	0x10624dd3
 8005230:	e000e014 	.word	0xe000e014

08005234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005244 <vPortEnableVFP+0x10>
 8005238:	6801      	ldr	r1, [r0, #0]
 800523a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800523e:	6001      	str	r1, [r0, #0]
 8005240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005242:	bf00      	nop
 8005244:	e000ed88 	.word	0xe000ed88

08005248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800524e:	f3ef 8305 	mrs	r3, IPSR
 8005252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d915      	bls.n	8005286 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800525a:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <vPortValidateInterruptPriority+0x74>)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005264:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <vPortValidateInterruptPriority+0x78>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	7afa      	ldrb	r2, [r7, #11]
 800526a:	429a      	cmp	r2, r3
 800526c:	d20b      	bcs.n	8005286 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <vPortValidateInterruptPriority+0x7c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800528e:	4b0e      	ldr	r3, [pc, #56]	@ (80052c8 <vPortValidateInterruptPriority+0x80>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d90b      	bls.n	80052ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	603b      	str	r3, [r7, #0]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <vPortValidateInterruptPriority+0x62>
	}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	e000e3f0 	.word	0xe000e3f0
 80052c0:	20000f78 	.word	0x20000f78
 80052c4:	e000ed0c 	.word	0xe000ed0c
 80052c8:	20000f7c 	.word	0x20000f7c

080052cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	@ 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052d8:	f7fe fd78 	bl	8003dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005450 <pvPortMalloc+0x184>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052e4:	f000 f924 	bl	8005530 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005454 <pvPortMalloc+0x188>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f040 8095 	bne.w	8005420 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01e      	beq.n	800533a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052fc:	2208      	movs	r2, #8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4413      	add	r3, r2
 8005302:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f023 0307 	bic.w	r3, r3, #7
 8005314:	3308      	adds	r3, #8
 8005316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <pvPortMalloc+0x6e>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	617b      	str	r3, [r7, #20]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d06f      	beq.n	8005420 <pvPortMalloc+0x154>
 8005340:	4b45      	ldr	r3, [pc, #276]	@ (8005458 <pvPortMalloc+0x18c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d86a      	bhi.n	8005420 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800534a:	4b44      	ldr	r3, [pc, #272]	@ (800545c <pvPortMalloc+0x190>)
 800534c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800534e:	4b43      	ldr	r3, [pc, #268]	@ (800545c <pvPortMalloc+0x190>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005354:	e004      	b.n	8005360 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d903      	bls.n	8005372 <pvPortMalloc+0xa6>
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f1      	bne.n	8005356 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005372:	4b37      	ldr	r3, [pc, #220]	@ (8005450 <pvPortMalloc+0x184>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005378:	429a      	cmp	r2, r3
 800537a:	d051      	beq.n	8005420 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2208      	movs	r2, #8
 8005382:	4413      	add	r3, r2
 8005384:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	2308      	movs	r3, #8
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	429a      	cmp	r2, r3
 800539c:	d920      	bls.n	80053e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800539e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <pvPortMalloc+0xfc>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053da:	69b8      	ldr	r0, [r7, #24]
 80053dc:	f000 f90a 	bl	80055f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <pvPortMalloc+0x18c>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005458 <pvPortMalloc+0x18c>)
 80053ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005458 <pvPortMalloc+0x18c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005460 <pvPortMalloc+0x194>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d203      	bcs.n	8005402 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053fa:	4b17      	ldr	r3, [pc, #92]	@ (8005458 <pvPortMalloc+0x18c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <pvPortMalloc+0x194>)
 8005400:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	4b13      	ldr	r3, [pc, #76]	@ (8005454 <pvPortMalloc+0x188>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	431a      	orrs	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005416:	4b13      	ldr	r3, [pc, #76]	@ (8005464 <pvPortMalloc+0x198>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3301      	adds	r3, #1
 800541c:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <pvPortMalloc+0x198>)
 800541e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005420:	f7fe fce2 	bl	8003de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <pvPortMalloc+0x17a>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <pvPortMalloc+0x176>
	return pvReturn;
 8005446:	69fb      	ldr	r3, [r7, #28]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3728      	adds	r7, #40	@ 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20004b88 	.word	0x20004b88
 8005454:	20004b9c 	.word	0x20004b9c
 8005458:	20004b8c 	.word	0x20004b8c
 800545c:	20004b80 	.word	0x20004b80
 8005460:	20004b90 	.word	0x20004b90
 8005464:	20004b94 	.word	0x20004b94

08005468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d04f      	beq.n	800551a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800547a:	2308      	movs	r3, #8
 800547c:	425b      	negs	r3, r3
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4413      	add	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b25      	ldr	r3, [pc, #148]	@ (8005524 <vPortFree+0xbc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <vPortFree+0x46>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60fb      	str	r3, [r7, #12]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <vPortFree+0x66>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60bb      	str	r3, [r7, #8]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	4b14      	ldr	r3, [pc, #80]	@ (8005524 <vPortFree+0xbc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01e      	beq.n	800551a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11a      	bne.n	800551a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <vPortFree+0xbc>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	401a      	ands	r2, r3
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054f4:	f7fe fc6a 	bl	8003dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <vPortFree+0xc0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4413      	add	r3, r2
 8005502:	4a09      	ldr	r2, [pc, #36]	@ (8005528 <vPortFree+0xc0>)
 8005504:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005506:	6938      	ldr	r0, [r7, #16]
 8005508:	f000 f874 	bl	80055f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <vPortFree+0xc4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	4a06      	ldr	r2, [pc, #24]	@ (800552c <vPortFree+0xc4>)
 8005514:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005516:	f7fe fc67 	bl	8003de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20004b9c 	.word	0x20004b9c
 8005528:	20004b8c 	.word	0x20004b8c
 800552c:	20004b98 	.word	0x20004b98

08005530 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005536:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800553a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800553c:	4b27      	ldr	r3, [pc, #156]	@ (80055dc <prvHeapInit+0xac>)
 800553e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3307      	adds	r3, #7
 800554e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	4a1f      	ldr	r2, [pc, #124]	@ (80055dc <prvHeapInit+0xac>)
 8005560:	4413      	add	r3, r2
 8005562:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005568:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <prvHeapInit+0xb0>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800556e:	4b1c      	ldr	r3, [pc, #112]	@ (80055e0 <prvHeapInit+0xb0>)
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800557c:	2208      	movs	r2, #8
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a15      	ldr	r2, [pc, #84]	@ (80055e4 <prvHeapInit+0xb4>)
 8005590:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005592:	4b14      	ldr	r3, [pc, #80]	@ (80055e4 <prvHeapInit+0xb4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800559a:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <prvHeapInit+0xb4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <prvHeapInit+0xb4>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4a0a      	ldr	r2, [pc, #40]	@ (80055e8 <prvHeapInit+0xb8>)
 80055be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <prvHeapInit+0xbc>)
 80055c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <prvHeapInit+0xc0>)
 80055ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055ce:	601a      	str	r2, [r3, #0]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000f80 	.word	0x20000f80
 80055e0:	20004b80 	.word	0x20004b80
 80055e4:	20004b88 	.word	0x20004b88
 80055e8:	20004b90 	.word	0x20004b90
 80055ec:	20004b8c 	.word	0x20004b8c
 80055f0:	20004b9c 	.word	0x20004b9c

080055f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055fc:	4b28      	ldr	r3, [pc, #160]	@ (80056a0 <prvInsertBlockIntoFreeList+0xac>)
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e002      	b.n	8005608 <prvInsertBlockIntoFreeList+0x14>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d8f7      	bhi.n	8005602 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	4413      	add	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d108      	bne.n	8005636 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	441a      	add	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d118      	bne.n	800567c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b15      	ldr	r3, [pc, #84]	@ (80056a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d00d      	beq.n	8005672 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	441a      	add	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e008      	b.n	8005684 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e003      	b.n	8005684 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d002      	beq.n	8005692 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20004b80 	.word	0x20004b80
 80056a4:	20004b88 	.word	0x20004b88

080056a8 <memset>:
 80056a8:	4402      	add	r2, r0
 80056aa:	4603      	mov	r3, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <_reclaim_reent>:
 80056b8:	4b29      	ldr	r3, [pc, #164]	@ (8005760 <_reclaim_reent+0xa8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4283      	cmp	r3, r0
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	d04b      	beq.n	800575c <_reclaim_reent+0xa4>
 80056c4:	69c3      	ldr	r3, [r0, #28]
 80056c6:	b1ab      	cbz	r3, 80056f4 <_reclaim_reent+0x3c>
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	b16b      	cbz	r3, 80056e8 <_reclaim_reent+0x30>
 80056cc:	2500      	movs	r5, #0
 80056ce:	69e3      	ldr	r3, [r4, #28]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	5959      	ldr	r1, [r3, r5]
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d13b      	bne.n	8005750 <_reclaim_reent+0x98>
 80056d8:	3504      	adds	r5, #4
 80056da:	2d80      	cmp	r5, #128	@ 0x80
 80056dc:	d1f7      	bne.n	80056ce <_reclaim_reent+0x16>
 80056de:	69e3      	ldr	r3, [r4, #28]
 80056e0:	4620      	mov	r0, r4
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	f000 f872 	bl	80057cc <_free_r>
 80056e8:	69e3      	ldr	r3, [r4, #28]
 80056ea:	6819      	ldr	r1, [r3, #0]
 80056ec:	b111      	cbz	r1, 80056f4 <_reclaim_reent+0x3c>
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f86c 	bl	80057cc <_free_r>
 80056f4:	6961      	ldr	r1, [r4, #20]
 80056f6:	b111      	cbz	r1, 80056fe <_reclaim_reent+0x46>
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 f867 	bl	80057cc <_free_r>
 80056fe:	69e1      	ldr	r1, [r4, #28]
 8005700:	b111      	cbz	r1, 8005708 <_reclaim_reent+0x50>
 8005702:	4620      	mov	r0, r4
 8005704:	f000 f862 	bl	80057cc <_free_r>
 8005708:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800570a:	b111      	cbz	r1, 8005712 <_reclaim_reent+0x5a>
 800570c:	4620      	mov	r0, r4
 800570e:	f000 f85d 	bl	80057cc <_free_r>
 8005712:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005714:	b111      	cbz	r1, 800571c <_reclaim_reent+0x64>
 8005716:	4620      	mov	r0, r4
 8005718:	f000 f858 	bl	80057cc <_free_r>
 800571c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800571e:	b111      	cbz	r1, 8005726 <_reclaim_reent+0x6e>
 8005720:	4620      	mov	r0, r4
 8005722:	f000 f853 	bl	80057cc <_free_r>
 8005726:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005728:	b111      	cbz	r1, 8005730 <_reclaim_reent+0x78>
 800572a:	4620      	mov	r0, r4
 800572c:	f000 f84e 	bl	80057cc <_free_r>
 8005730:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005732:	b111      	cbz	r1, 800573a <_reclaim_reent+0x82>
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f849 	bl	80057cc <_free_r>
 800573a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800573c:	b111      	cbz	r1, 8005744 <_reclaim_reent+0x8c>
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f844 	bl	80057cc <_free_r>
 8005744:	6a23      	ldr	r3, [r4, #32]
 8005746:	b14b      	cbz	r3, 800575c <_reclaim_reent+0xa4>
 8005748:	4620      	mov	r0, r4
 800574a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800574e:	4718      	bx	r3
 8005750:	680e      	ldr	r6, [r1, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	f000 f83a 	bl	80057cc <_free_r>
 8005758:	4631      	mov	r1, r6
 800575a:	e7bb      	b.n	80056d4 <_reclaim_reent+0x1c>
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	bf00      	nop
 8005760:	2000002c 	.word	0x2000002c

08005764 <__libc_init_array>:
 8005764:	b570      	push	{r4, r5, r6, lr}
 8005766:	4d0d      	ldr	r5, [pc, #52]	@ (800579c <__libc_init_array+0x38>)
 8005768:	4c0d      	ldr	r4, [pc, #52]	@ (80057a0 <__libc_init_array+0x3c>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	2600      	movs	r6, #0
 8005770:	42a6      	cmp	r6, r4
 8005772:	d109      	bne.n	8005788 <__libc_init_array+0x24>
 8005774:	4d0b      	ldr	r5, [pc, #44]	@ (80057a4 <__libc_init_array+0x40>)
 8005776:	4c0c      	ldr	r4, [pc, #48]	@ (80057a8 <__libc_init_array+0x44>)
 8005778:	f000 f87e 	bl	8005878 <_init>
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	2600      	movs	r6, #0
 8005782:	42a6      	cmp	r6, r4
 8005784:	d105      	bne.n	8005792 <__libc_init_array+0x2e>
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	f855 3b04 	ldr.w	r3, [r5], #4
 800578c:	4798      	blx	r3
 800578e:	3601      	adds	r6, #1
 8005790:	e7ee      	b.n	8005770 <__libc_init_array+0xc>
 8005792:	f855 3b04 	ldr.w	r3, [r5], #4
 8005796:	4798      	blx	r3
 8005798:	3601      	adds	r6, #1
 800579a:	e7f2      	b.n	8005782 <__libc_init_array+0x1e>
 800579c:	08005948 	.word	0x08005948
 80057a0:	08005948 	.word	0x08005948
 80057a4:	08005948 	.word	0x08005948
 80057a8:	0800594c 	.word	0x0800594c

080057ac <__retarget_lock_acquire_recursive>:
 80057ac:	4770      	bx	lr

080057ae <__retarget_lock_release_recursive>:
 80057ae:	4770      	bx	lr

080057b0 <memcpy>:
 80057b0:	440a      	add	r2, r1
 80057b2:	4291      	cmp	r1, r2
 80057b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057b8:	d100      	bne.n	80057bc <memcpy+0xc>
 80057ba:	4770      	bx	lr
 80057bc:	b510      	push	{r4, lr}
 80057be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c6:	4291      	cmp	r1, r2
 80057c8:	d1f9      	bne.n	80057be <memcpy+0xe>
 80057ca:	bd10      	pop	{r4, pc}

080057cc <_free_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4605      	mov	r5, r0
 80057d0:	2900      	cmp	r1, #0
 80057d2:	d041      	beq.n	8005858 <_free_r+0x8c>
 80057d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d8:	1f0c      	subs	r4, r1, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bfb8      	it	lt
 80057de:	18e4      	addlt	r4, r4, r3
 80057e0:	f000 f83e 	bl	8005860 <__malloc_lock>
 80057e4:	4a1d      	ldr	r2, [pc, #116]	@ (800585c <_free_r+0x90>)
 80057e6:	6813      	ldr	r3, [r2, #0]
 80057e8:	b933      	cbnz	r3, 80057f8 <_free_r+0x2c>
 80057ea:	6063      	str	r3, [r4, #4]
 80057ec:	6014      	str	r4, [r2, #0]
 80057ee:	4628      	mov	r0, r5
 80057f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057f4:	f000 b83a 	b.w	800586c <__malloc_unlock>
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	d908      	bls.n	800580e <_free_r+0x42>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	1821      	adds	r1, r4, r0
 8005800:	428b      	cmp	r3, r1
 8005802:	bf01      	itttt	eq
 8005804:	6819      	ldreq	r1, [r3, #0]
 8005806:	685b      	ldreq	r3, [r3, #4]
 8005808:	1809      	addeq	r1, r1, r0
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	e7ed      	b.n	80057ea <_free_r+0x1e>
 800580e:	461a      	mov	r2, r3
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b10b      	cbz	r3, 8005818 <_free_r+0x4c>
 8005814:	42a3      	cmp	r3, r4
 8005816:	d9fa      	bls.n	800580e <_free_r+0x42>
 8005818:	6811      	ldr	r1, [r2, #0]
 800581a:	1850      	adds	r0, r2, r1
 800581c:	42a0      	cmp	r0, r4
 800581e:	d10b      	bne.n	8005838 <_free_r+0x6c>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	4401      	add	r1, r0
 8005824:	1850      	adds	r0, r2, r1
 8005826:	4283      	cmp	r3, r0
 8005828:	6011      	str	r1, [r2, #0]
 800582a:	d1e0      	bne.n	80057ee <_free_r+0x22>
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	6053      	str	r3, [r2, #4]
 8005832:	4408      	add	r0, r1
 8005834:	6010      	str	r0, [r2, #0]
 8005836:	e7da      	b.n	80057ee <_free_r+0x22>
 8005838:	d902      	bls.n	8005840 <_free_r+0x74>
 800583a:	230c      	movs	r3, #12
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	e7d6      	b.n	80057ee <_free_r+0x22>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	1821      	adds	r1, r4, r0
 8005844:	428b      	cmp	r3, r1
 8005846:	bf04      	itt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	6063      	str	r3, [r4, #4]
 800584e:	bf04      	itt	eq
 8005850:	1809      	addeq	r1, r1, r0
 8005852:	6021      	streq	r1, [r4, #0]
 8005854:	6054      	str	r4, [r2, #4]
 8005856:	e7ca      	b.n	80057ee <_free_r+0x22>
 8005858:	bd38      	pop	{r3, r4, r5, pc}
 800585a:	bf00      	nop
 800585c:	20004cdc 	.word	0x20004cdc

08005860 <__malloc_lock>:
 8005860:	4801      	ldr	r0, [pc, #4]	@ (8005868 <__malloc_lock+0x8>)
 8005862:	f7ff bfa3 	b.w	80057ac <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	20004cd8 	.word	0x20004cd8

0800586c <__malloc_unlock>:
 800586c:	4801      	ldr	r0, [pc, #4]	@ (8005874 <__malloc_unlock+0x8>)
 800586e:	f7ff bf9e 	b.w	80057ae <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	20004cd8 	.word	0x20004cd8

08005878 <_init>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr

08005884 <_fini>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr
