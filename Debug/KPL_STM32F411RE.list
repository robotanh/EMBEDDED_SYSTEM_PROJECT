
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080087b4  080087b4  000097b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  0000a0e4  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000099b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  0000a0e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  080089c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf8  200000e4  08008aa4  0000a0e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ddc  08008aa4  0000addc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c78  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388c  00000000  00000000  00021d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00025618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdf  00000000  00000000  00026ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019419  00000000  00000000  00027a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a3a  00000000  00000000  00040eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a4e  00000000  00000000  000588ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  000f137c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f6f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e4 	.word	0x200000e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800879c 	.word	0x0800879c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	0800879c 	.word	0x0800879c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <vBlinkTimerCallback>:
//												HELPER FUNCTIONS													//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Timer callback function
void vBlinkTimerCallback(TimerHandle_t xTimer) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    static int toggle = 0;
    toggle = !toggle;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dd6:	601a      	str	r2, [r3, #0]
    if (toggle) {
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d018      	beq.n	8000e12 <vBlinkTimerCallback+0x56>
    	if(numBlinkRow == 1) snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), blinkText);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <vBlinkTimerCallback+0x38>
 8000de8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e54 <vBlinkTimerCallback+0x98>)
 8000dea:	2107      	movs	r1, #7
 8000dec:	481a      	ldr	r0, [pc, #104]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000dee:	f006 ffcb 	bl	8007d88 <sniprintf>
    	else if (numBlinkRow == 2){
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
    	}
    }
}
 8000df2:	e026      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	else if (numBlinkRow == 2){
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d122      	bne.n	8000e42 <vBlinkTimerCallback+0x86>
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), blinkText);
 8000dfc:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <vBlinkTimerCallback+0x98>)
 8000dfe:	2107      	movs	r1, #7
 8000e00:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e02:	f006 ffc1 	bl	8007d88 <sniprintf>
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), blinkText1);
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <vBlinkTimerCallback+0xa0>)
 8000e08:	2107      	movs	r1, #7
 8000e0a:	4815      	ldr	r0, [pc, #84]	@ (8000e60 <vBlinkTimerCallback+0xa4>)
 8000e0c:	f006 ffbc 	bl	8007d88 <sniprintf>
}
 8000e10:	e017      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	if(numBlinkRow == 1) snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d105      	bne.n	8000e26 <vBlinkTimerCallback+0x6a>
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e1c:	2107      	movs	r1, #7
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e20:	f006 ffb2 	bl	8007d88 <sniprintf>
}
 8000e24:	e00d      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	else if (numBlinkRow == 2){
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d109      	bne.n	8000e42 <vBlinkTimerCallback+0x86>
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e34:	f006 ffa8 	bl	8007d88 <sniprintf>
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e3a:	2107      	movs	r1, #7
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <vBlinkTimerCallback+0xa4>)
 8000e3e:	f006 ffa3 	bl	8007d88 <sniprintf>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000130 	.word	0x20000130
 8000e50:	20000004 	.word	0x20000004
 8000e54:	20000120 	.word	0x20000120
 8000e58:	20000036 	.word	0x20000036
 8000e5c:	20000128 	.word	0x20000128
 8000e60:	2000002f 	.word	0x2000002f
 8000e64:	080087b4 	.word	0x080087b4

08000e68 <ScanColumns>:
}
void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	f200 80c0 	bhi.w	8000ffa <ScanColumns+0x192>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <ScanColumns+0x18>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000eed 	.word	0x08000eed
 8000e88:	08000f47 	.word	0x08000f47
 8000e8c:	08000fa1 	.word	0x08000fa1
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 8000e90:	2101      	movs	r1, #1
 8000e92:	4861      	ldr	r0, [pc, #388]	@ (8001018 <ScanColumns+0x1b0>)
 8000e94:	f002 fd68 	bl	8003968 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <ScanColumns+0x3a>
 8000e9e:	2343      	movs	r3, #67	@ 0x43
 8000ea0:	e0b5      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	485c      	ldr	r0, [pc, #368]	@ (8001018 <ScanColumns+0x1b0>)
 8000ea6:	f002 fd5f 	bl	8003968 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <ScanColumns+0x4c>
 8000eb0:	2337      	movs	r3, #55	@ 0x37
 8000eb2:	e0ac      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4858      	ldr	r0, [pc, #352]	@ (8001018 <ScanColumns+0x1b0>)
 8000eb8:	f002 fd56 	bl	8003968 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <ScanColumns+0x5e>
 8000ec2:	2334      	movs	r3, #52	@ 0x34
 8000ec4:	e0a3      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4853      	ldr	r0, [pc, #332]	@ (8001018 <ScanColumns+0x1b0>)
 8000eca:	f002 fd4d 	bl	8003968 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <ScanColumns+0x70>
 8000ed4:	2331      	movs	r3, #49	@ 0x31
 8000ed6:	e09a      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 8000ed8:	2110      	movs	r1, #16
 8000eda:	484f      	ldr	r0, [pc, #316]	@ (8001018 <ScanColumns+0x1b0>)
 8000edc:	f002 fd44 	bl	8003968 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 808b 	bne.w	8000ffe <ScanColumns+0x196>
 8000ee8:	2341      	movs	r3, #65	@ 0x41
 8000eea:	e090      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000eec:	2101      	movs	r1, #1
 8000eee:	484a      	ldr	r0, [pc, #296]	@ (8001018 <ScanColumns+0x1b0>)
 8000ef0:	f002 fd3a 	bl	8003968 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <ScanColumns+0x96>
 8000efa:	2330      	movs	r3, #48	@ 0x30
 8000efc:	e087      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000efe:	2102      	movs	r1, #2
 8000f00:	4845      	ldr	r0, [pc, #276]	@ (8001018 <ScanColumns+0x1b0>)
 8000f02:	f002 fd31 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <ScanColumns+0xa8>
 8000f0c:	2338      	movs	r3, #56	@ 0x38
 8000f0e:	e07e      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000f10:	2104      	movs	r1, #4
 8000f12:	4841      	ldr	r0, [pc, #260]	@ (8001018 <ScanColumns+0x1b0>)
 8000f14:	f002 fd28 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <ScanColumns+0xba>
 8000f1e:	2335      	movs	r3, #53	@ 0x35
 8000f20:	e075      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 8000f22:	2108      	movs	r1, #8
 8000f24:	483c      	ldr	r0, [pc, #240]	@ (8001018 <ScanColumns+0x1b0>)
 8000f26:	f002 fd1f 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <ScanColumns+0xcc>
 8000f30:	2332      	movs	r3, #50	@ 0x32
 8000f32:	e06c      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 8000f34:	2110      	movs	r1, #16
 8000f36:	4838      	ldr	r0, [pc, #224]	@ (8001018 <ScanColumns+0x1b0>)
 8000f38:	f002 fd16 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d15f      	bne.n	8001002 <ScanColumns+0x19a>
 8000f42:	2342      	movs	r3, #66	@ 0x42
 8000f44:	e063      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 8000f46:	2101      	movs	r1, #1
 8000f48:	4833      	ldr	r0, [pc, #204]	@ (8001018 <ScanColumns+0x1b0>)
 8000f4a:	f002 fd0d 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <ScanColumns+0xf0>
 8000f54:	2345      	movs	r3, #69	@ 0x45
 8000f56:	e05a      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000f58:	2102      	movs	r1, #2
 8000f5a:	482f      	ldr	r0, [pc, #188]	@ (8001018 <ScanColumns+0x1b0>)
 8000f5c:	f002 fd04 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <ScanColumns+0x102>
 8000f66:	2339      	movs	r3, #57	@ 0x39
 8000f68:	e051      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	482a      	ldr	r0, [pc, #168]	@ (8001018 <ScanColumns+0x1b0>)
 8000f6e:	f002 fcfb 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <ScanColumns+0x114>
 8000f78:	2336      	movs	r3, #54	@ 0x36
 8000f7a:	e048      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4826      	ldr	r0, [pc, #152]	@ (8001018 <ScanColumns+0x1b0>)
 8000f80:	f002 fcf2 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <ScanColumns+0x126>
 8000f8a:	2333      	movs	r3, #51	@ 0x33
 8000f8c:	e03f      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4821      	ldr	r0, [pc, #132]	@ (8001018 <ScanColumns+0x1b0>)
 8000f92:	f002 fce9 	bl	8003968 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d134      	bne.n	8001006 <ScanColumns+0x19e>
 8000f9c:	2344      	movs	r3, #68	@ 0x44
 8000f9e:	e036      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	481d      	ldr	r0, [pc, #116]	@ (8001018 <ScanColumns+0x1b0>)
 8000fa4:	f002 fce0 	bl	8003968 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <ScanColumns+0x14a>
 8000fae:	2354      	movs	r3, #84	@ 0x54
 8000fb0:	e02d      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4818      	ldr	r0, [pc, #96]	@ (8001018 <ScanColumns+0x1b0>)
 8000fb6:	f002 fcd7 	bl	8003968 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <ScanColumns+0x15c>
 8000fc0:	2350      	movs	r3, #80	@ 0x50
 8000fc2:	e024      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <ScanColumns+0x1b0>)
 8000fc8:	f002 fcce 	bl	8003968 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <ScanColumns+0x16e>
 8000fd2:	2324      	movs	r3, #36	@ 0x24
 8000fd4:	e01b      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <ScanColumns+0x1b0>)
 8000fda:	f002 fcc5 	bl	8003968 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <ScanColumns+0x180>
 8000fe4:	234c      	movs	r3, #76	@ 0x4c
 8000fe6:	e012      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000fe8:	2110      	movs	r1, #16
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <ScanColumns+0x1b0>)
 8000fec:	f002 fcbc 	bl	8003968 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <ScanColumns+0x1a2>
 8000ff6:	2346      	movs	r3, #70	@ 0x46
 8000ff8:	e009      	b.n	800100e <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000ffa:	23ff      	movs	r3, #255	@ 0xff
 8000ffc:	e007      	b.n	800100e <ScanColumns+0x1a6>
            break;
 8000ffe:	bf00      	nop
 8001000:	e004      	b.n	800100c <ScanColumns+0x1a4>
            break;
 8001002:	bf00      	nop
 8001004:	e002      	b.n	800100c <ScanColumns+0x1a4>
            break;
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <ScanColumns+0x1a4>
            break;
 800100a:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 800100c:	23ff      	movs	r3, #255	@ 0xff
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020400 	.word	0x40020400

0800101c <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	@ 0x40
 8001026:	482c      	ldr	r0, [pc, #176]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001028:	f002 fcb6 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001032:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001034:	f002 fcb0 	bl	8003998 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ff15 	bl	8000e68 <ScanColumns>
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2bff      	cmp	r3, #255	@ 0xff
 8001046:	d001      	beq.n	800104c <KeyPad_Scan+0x30>
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	e041      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	4821      	ldr	r0, [pc, #132]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001052:	f002 fca1 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7150 	mov.w	r1, #832	@ 0x340
 800105c:	481e      	ldr	r0, [pc, #120]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800105e:	f002 fc9b 	bl	8003998 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff00 	bl	8000e68 <ScanColumns>
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2bff      	cmp	r3, #255	@ 0xff
 8001070:	d001      	beq.n	8001076 <KeyPad_Scan+0x5a>
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	e02c      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107c:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800107e:	f002 fc8b 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800108a:	f002 fc85 	bl	8003998 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff feea 	bl	8000e68 <ScanColumns>
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2bff      	cmp	r3, #255	@ 0xff
 800109c:	d001      	beq.n	80010a2 <KeyPad_Scan+0x86>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	e016      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <KeyPad_Scan+0xbc>)
 80010aa:	f002 fc75 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <KeyPad_Scan+0xbc>)
 80010b6:	f002 fc6f 	bl	8003998 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fed4 	bl	8000e68 <ScanColumns>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d001      	beq.n	80010ce <KeyPad_Scan+0xb2>
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	e000      	b.n	80010d0 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80010ce:	23ff      	movs	r3, #255	@ 0xff
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400

080010dc <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <formatTotalLiters+0x80>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d815      	bhi.n	800111c <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <formatTotalLiters+0x84>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9a      	lsrs	r2, r3, #18
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <formatTotalLiters+0x84>)
 8001102:	fba3 1302 	umull	r1, r3, r3, r2
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	4916      	ldr	r1, [pc, #88]	@ (8001164 <formatTotalLiters+0x88>)
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <formatTotalLiters+0x8c>)
 8001116:	2203      	movs	r2, #3
 8001118:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 800111a:	e018      	b.n	800114e <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <formatTotalLiters+0x90>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0e5a      	lsrs	r2, r3, #25
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <formatTotalLiters+0x90>)
 800112e:	fba3 1302 	umull	r1, r3, r3, r2
 8001132:	0e5b      	lsrs	r3, r3, #25
 8001134:	490e      	ldr	r1, [pc, #56]	@ (8001170 <formatTotalLiters+0x94>)
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <formatTotalLiters+0x98>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	095a      	lsrs	r2, r3, #5
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <formatTotalLiters+0x8c>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	05f5e0ff 	.word	0x05f5e0ff
 8001160:	431bde83 	.word	0x431bde83
 8001164:	000f4240 	.word	0x000f4240
 8001168:	2000007c 	.word	0x2000007c
 800116c:	55e63b89 	.word	0x55e63b89
 8001170:	05f5e100 	.word	0x05f5e100
 8001174:	51eb851f 	.word	0x51eb851f

08001178 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <formatTotalLitersShift+0x60>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d815      	bhi.n	80011b8 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <formatTotalLitersShift+0x64>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <formatTotalLitersShift+0x64>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	490e      	ldr	r1, [pc, #56]	@ (80011e0 <formatTotalLitersShift+0x68>)
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <formatTotalLitersShift+0x6c>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80011b6:	e009      	b.n	80011cc <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <formatTotalLitersShift+0x6c>)
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	3b9ac9ff 	.word	0x3b9ac9ff
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	000f4240 	.word	0x000f4240
 80011e4:	2000007c 	.word	0x2000007c

080011e8 <setOrderPrice>:

    snprintf(buffer, 7, "%03d.%02d", integerPart, decimalPart);
}

void setOrderPrice (uint32_t inputPrice)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	orderPrice=inputPrice;
 80011f0:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <setOrderPrice+0x4c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
	orderLiter=(double)orderPrice/(double)roundedPrice;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <setOrderPrice+0x4c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f98a 	bl	8000514 <__aeabi_ui2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <setOrderPrice+0x50>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f983 	bl	8000514 <__aeabi_ui2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7ff fb21 	bl	800085c <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fc03 	bl	8000a2c <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <setOrderPrice+0x54>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	2000024c 	.word	0x2000024c
 8001238:	20000064 	.word	0x20000064
 800123c:	20000250 	.word	0x20000250

08001240 <setOrderLiter>:
void setOrderLiter(uint32_t inputLiter){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	orderLiter=inputLiter;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <setOrderLiter+0x48>)
 8001254:	edc3 7a00 	vstr	s15, [r3]
	orderPrice=orderLiter*roundedPrice;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <setOrderLiter+0x4c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <setOrderLiter+0x48>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001272:	ee17 2a90 	vmov	r2, s15
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <setOrderLiter+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000250 	.word	0x20000250
 800128c:	20000064 	.word	0x20000064
 8001290:	2000024c 	.word	0x2000024c

08001294 <IdleEnv>:
void IdleEnv(){
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	numberOfDigits = 0;
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <IdleEnv+0x1c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	accumulatedNumber = 0;
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <IdleEnv+0x20>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000010c 	.word	0x2000010c
 80012b4:	20000108 	.word	0x20000108

080012b8 <setIdle>:
void setIdle(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	seqState=SEQ_IDLE;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <setIdle+0x14>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	IdleEnv();
 80012c2:	f7ff ffe7 	bl	8001294 <IdleEnv>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000011a 	.word	0x2000011a

080012d0 <KeyLogic>:
//																													//
//													KEY LOGIC FSM													//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void KeyLogic() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 80012d6:	f005 f851 	bl	800637c <xTaskGetTickCount>
 80012da:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 80012dc:	f7ff fe9e 	bl	800101c <KeyPad_Scan>
 80012e0:	4603      	mov	r3, r0
 80012e2:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 80012e4:	4bb0      	ldr	r3, [pc, #704]	@ (80015a8 <KeyLogic+0x2d8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d85a      	bhi.n	80013a2 <KeyLogic+0xd2>
 80012ec:	a201      	add	r2, pc, #4	@ (adr r2, 80012f4 <KeyLogic+0x24>)
 80012ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f2:	bf00      	nop
 80012f4:	08001305 	.word	0x08001305
 80012f8:	0800131f 	.word	0x0800131f
 80012fc:	0800134b 	.word	0x0800134b
 8001300:	0800137b 	.word	0x0800137b
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2bff      	cmp	r3, #255	@ 0xff
 8001308:	d044      	beq.n	8001394 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800130a:	4aa8      	ldr	r2, [pc, #672]	@ (80015ac <KeyLogic+0x2dc>)
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8001310:	4aa7      	ldr	r2, [pc, #668]	@ (80015b0 <KeyLogic+0x2e0>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8001316:	4ba4      	ldr	r3, [pc, #656]	@ (80015a8 <KeyLogic+0x2d8>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800131c:	e03a      	b.n	8001394 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800131e:	4ba4      	ldr	r3, [pc, #656]	@ (80015b0 <KeyLogic+0x2e0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b31      	cmp	r3, #49	@ 0x31
 8001328:	d936      	bls.n	8001398 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800132a:	4ba0      	ldr	r3, [pc, #640]	@ (80015ac <KeyLogic+0x2dc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	429a      	cmp	r2, r3
 8001332:	d106      	bne.n	8001342 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8001334:	4b9c      	ldr	r3, [pc, #624]	@ (80015a8 <KeyLogic+0x2d8>)
 8001336:	2202      	movs	r2, #2
 8001338:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800133a:	4a9e      	ldr	r2, [pc, #632]	@ (80015b4 <KeyLogic+0x2e4>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8001340:	e02a      	b.n	8001398 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8001342:	4b99      	ldr	r3, [pc, #612]	@ (80015a8 <KeyLogic+0x2d8>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
            break;
 8001348:	e026      	b.n	8001398 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800134a:	4b98      	ldr	r3, [pc, #608]	@ (80015ac <KeyLogic+0x2dc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	429a      	cmp	r2, r3
 8001352:	d10a      	bne.n	800136a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8001354:	4b97      	ldr	r3, [pc, #604]	@ (80015b4 <KeyLogic+0x2e4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001360:	d31c      	bcc.n	800139c <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8001362:	4b91      	ldr	r3, [pc, #580]	@ (80015a8 <KeyLogic+0x2d8>)
 8001364:	2203      	movs	r2, #3
 8001366:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8001368:	e018      	b.n	800139c <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800136a:	4b90      	ldr	r3, [pc, #576]	@ (80015ac <KeyLogic+0x2dc>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	4b92      	ldr	r3, [pc, #584]	@ (80015b8 <KeyLogic+0x2e8>)
 8001370:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 8001372:	4b8d      	ldr	r3, [pc, #564]	@ (80015a8 <KeyLogic+0x2d8>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
            break;
 8001378:	e010      	b.n	800139c <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 800137a:	4b8c      	ldr	r3, [pc, #560]	@ (80015ac <KeyLogic+0x2dc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	429a      	cmp	r2, r3
 8001382:	d00d      	beq.n	80013a0 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 8001384:	4b89      	ldr	r3, [pc, #548]	@ (80015ac <KeyLogic+0x2dc>)
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	4b8b      	ldr	r3, [pc, #556]	@ (80015b8 <KeyLogic+0x2e8>)
 800138a:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 800138c:	4b86      	ldr	r3, [pc, #536]	@ (80015a8 <KeyLogic+0x2d8>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001392:	e005      	b.n	80013a0 <KeyLogic+0xd0>
            break;
 8001394:	bf00      	nop
 8001396:	e004      	b.n	80013a2 <KeyLogic+0xd2>
            break;
 8001398:	bf00      	nop
 800139a:	e002      	b.n	80013a2 <KeyLogic+0xd2>
            break;
 800139c:	bf00      	nop
 800139e:	e000      	b.n	80013a2 <KeyLogic+0xd2>
            break;
 80013a0:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 80013a2:	4b85      	ldr	r3, [pc, #532]	@ (80015b8 <KeyLogic+0x2e8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2bff      	cmp	r3, #255	@ 0xff
 80013a8:	f000 8456 	beq.w	8001c58 <KeyLogic+0x988>
		switch (keyPressed) {
 80013ac:	4b82      	ldr	r3, [pc, #520]	@ (80015b8 <KeyLogic+0x2e8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3b24      	subs	r3, #36	@ 0x24
 80013b2:	2b30      	cmp	r3, #48	@ 0x30
 80013b4:	f200 83a8 	bhi.w	8001b08 <KeyLogic+0x838>
 80013b8:	a201      	add	r2, pc, #4	@ (adr r2, 80013c0 <KeyLogic+0xf0>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	08001a9b 	.word	0x08001a9b
 80013c4:	08001b09 	.word	0x08001b09
 80013c8:	08001b09 	.word	0x08001b09
 80013cc:	08001b09 	.word	0x08001b09
 80013d0:	08001b09 	.word	0x08001b09
 80013d4:	08001b09 	.word	0x08001b09
 80013d8:	08001b09 	.word	0x08001b09
 80013dc:	08001b09 	.word	0x08001b09
 80013e0:	08001b09 	.word	0x08001b09
 80013e4:	08001b09 	.word	0x08001b09
 80013e8:	08001b09 	.word	0x08001b09
 80013ec:	08001b09 	.word	0x08001b09
 80013f0:	08001b09 	.word	0x08001b09
 80013f4:	08001b09 	.word	0x08001b09
 80013f8:	08001b09 	.word	0x08001b09
 80013fc:	08001b09 	.word	0x08001b09
 8001400:	08001b09 	.word	0x08001b09
 8001404:	08001b09 	.word	0x08001b09
 8001408:	08001b09 	.word	0x08001b09
 800140c:	08001b09 	.word	0x08001b09
 8001410:	08001b09 	.word	0x08001b09
 8001414:	08001b09 	.word	0x08001b09
 8001418:	08001b09 	.word	0x08001b09
 800141c:	08001b09 	.word	0x08001b09
 8001420:	08001b09 	.word	0x08001b09
 8001424:	08001b09 	.word	0x08001b09
 8001428:	08001b09 	.word	0x08001b09
 800142c:	08001b09 	.word	0x08001b09
 8001430:	08001b09 	.word	0x08001b09
 8001434:	08001485 	.word	0x08001485
 8001438:	080014b3 	.word	0x080014b3
 800143c:	08001571 	.word	0x08001571
 8001440:	080014f1 	.word	0x080014f1
 8001444:	08001597 	.word	0x08001597
 8001448:	08001533 	.word	0x08001533
 800144c:	08001b09 	.word	0x08001b09
 8001450:	08001b09 	.word	0x08001b09
 8001454:	08001b09 	.word	0x08001b09
 8001458:	08001b09 	.word	0x08001b09
 800145c:	08001b09 	.word	0x08001b09
 8001460:	08001ac1 	.word	0x08001ac1
 8001464:	08001b09 	.word	0x08001b09
 8001468:	08001b09 	.word	0x08001b09
 800146c:	08001b09 	.word	0x08001b09
 8001470:	08001a6f 	.word	0x08001a6f
 8001474:	08001b09 	.word	0x08001b09
 8001478:	08001b09 	.word	0x08001b09
 800147c:	08001b09 	.word	0x08001b09
 8001480:	08001a85 	.word	0x08001a85
/////////////////////////////////////////////////////KEY F1/////////////////////////////////////////////////////////
			case 'A':
				if(seqState==SEQ_IDLE){					// F1
 8001484:	4b4d      	ldr	r3, [pc, #308]	@ (80015bc <KeyLogic+0x2ec>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <KeyLogic+0x1c8>
					setOrderPrice(F1Price);
 800148c:	4b4c      	ldr	r3, [pc, #304]	@ (80015c0 <KeyLogic+0x2f0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fea9 	bl	80011e8 <setOrderPrice>
					setOrderLiter(1);
					setIdle();
				}else{
					setIdle();
				}
				break;
 8001496:	e3df      	b.n	8001c58 <KeyLogic+0x988>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F1
 8001498:	4b48      	ldr	r3, [pc, #288]	@ (80015bc <KeyLogic+0x2ec>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b16      	cmp	r3, #22
 800149e:	d105      	bne.n	80014ac <KeyLogic+0x1dc>
					setOrderLiter(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fecd 	bl	8001240 <setOrderLiter>
					setIdle();
 80014a6:	f7ff ff07 	bl	80012b8 <setIdle>
				break;
 80014aa:	e3d5      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 80014ac:	f7ff ff04 	bl	80012b8 <setIdle>
				break;
 80014b0:	e3d2      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY F2/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_IDLE){					// F2
 80014b2:	4b42      	ldr	r3, [pc, #264]	@ (80015bc <KeyLogic+0x2ec>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <KeyLogic+0x1f6>
					setOrderPrice(F2Price);
 80014ba:	4b42      	ldr	r3, [pc, #264]	@ (80015c4 <KeyLogic+0x2f4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe92 	bl	80011e8 <setOrderPrice>
				}else if(seqState==SEQ_PRESSED_P){		// P -> F2
					seqState=SEQ_PRESSED_P_F2_PSWRD;
				}else{
					setIdle();
				}
				break;
 80014c4:	e3c8      	b.n	8001c58 <KeyLogic+0x988>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F2
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <KeyLogic+0x2ec>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b16      	cmp	r3, #22
 80014cc:	d105      	bne.n	80014da <KeyLogic+0x20a>
					setOrderLiter(2);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff feb6 	bl	8001240 <setOrderLiter>
					setIdle();
 80014d4:	f7ff fef0 	bl	80012b8 <setIdle>
				break;
 80014d8:	e3be      	b.n	8001c58 <KeyLogic+0x988>
				}else if(seqState==SEQ_PRESSED_P){		// P -> F2
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <KeyLogic+0x2ec>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d103      	bne.n	80014ea <KeyLogic+0x21a>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 80014e2:	4b36      	ldr	r3, [pc, #216]	@ (80015bc <KeyLogic+0x2ec>)
 80014e4:	2206      	movs	r2, #6
 80014e6:	701a      	strb	r2, [r3, #0]
				break;
 80014e8:	e3b6      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 80014ea:	f7ff fee5 	bl	80012b8 <setIdle>
				break;
 80014ee:	e3b3      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY F3/////////////////////////////////////////////////////////
			case 'D':
				if(seqState==SEQ_IDLE){					// F3
 80014f0:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <KeyLogic+0x2ec>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <KeyLogic+0x234>
					setOrderPrice(F3Price);
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <KeyLogic+0x2f8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fe73 	bl	80011e8 <setOrderPrice>
					seqState = SEQ_ENTER_OLD_PASSWORD;
					IdleEnv();
				} else {
					setIdle();
				}
				break;
 8001502:	e3a9      	b.n	8001c58 <KeyLogic+0x988>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F3
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <KeyLogic+0x2ec>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b16      	cmp	r3, #22
 800150a:	d105      	bne.n	8001518 <KeyLogic+0x248>
					setOrderLiter(5);
 800150c:	2005      	movs	r0, #5
 800150e:	f7ff fe97 	bl	8001240 <setOrderLiter>
					setIdle();
 8001512:	f7ff fed1 	bl	80012b8 <setIdle>
				break;
 8001516:	e39f      	b.n	8001c58 <KeyLogic+0x988>
				}else if (seqState == SEQ_PRESSED_T) {	// T -> F3
 8001518:	4b28      	ldr	r3, [pc, #160]	@ (80015bc <KeyLogic+0x2ec>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b10      	cmp	r3, #16
 800151e:	d105      	bne.n	800152c <KeyLogic+0x25c>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8001520:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <KeyLogic+0x2ec>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001526:	f7ff feb5 	bl	8001294 <IdleEnv>
				break;
 800152a:	e395      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 800152c:	f7ff fec4 	bl	80012b8 <setIdle>
				break;
 8001530:	e392      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY F4/////////////////////////////////////////////////////////
			case 'F':
				if(seqState==SEQ_IDLE){					// F4
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <KeyLogic+0x2ec>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d105      	bne.n	8001546 <KeyLogic+0x276>
					setOrderPrice(F4Price);
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <KeyLogic+0x2fc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe52 	bl	80011e8 <setOrderPrice>
				}else if (seqState == SEQ_PRESSED_T) {	// T -> F4
					seqState = SEQ_PRESSED_T_F4;
				} else {
					setIdle();
				}
				break;
 8001544:	e388      	b.n	8001c58 <KeyLogic+0x988>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F4
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <KeyLogic+0x2ec>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b16      	cmp	r3, #22
 800154c:	d105      	bne.n	800155a <KeyLogic+0x28a>
					setOrderLiter(10);
 800154e:	200a      	movs	r0, #10
 8001550:	f7ff fe76 	bl	8001240 <setOrderLiter>
					setIdle();
 8001554:	f7ff feb0 	bl	80012b8 <setIdle>
				break;
 8001558:	e37e      	b.n	8001c58 <KeyLogic+0x988>
				}else if (seqState == SEQ_PRESSED_T) {	// T -> F4
 800155a:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <KeyLogic+0x2ec>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d103      	bne.n	800156a <KeyLogic+0x29a>
					seqState = SEQ_PRESSED_T_F4;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <KeyLogic+0x2ec>)
 8001564:	2214      	movs	r2, #20
 8001566:	701a      	strb	r2, [r3, #0]
				break;
 8001568:	e376      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 800156a:	f7ff fea5 	bl	80012b8 <setIdle>
				break;
 800156e:	e373      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001570:	2300      	movs	r3, #0
 8001572:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <KeyLogic+0x300>)
 8001574:	2107      	movs	r1, #7
 8001576:	4817      	ldr	r0, [pc, #92]	@ (80015d4 <KeyLogic+0x304>)
 8001578:	f006 fc06 	bl	8007d88 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800157c:	2300      	movs	r3, #0
 800157e:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <KeyLogic+0x300>)
 8001580:	2107      	movs	r1, #7
 8001582:	4815      	ldr	r0, [pc, #84]	@ (80015d8 <KeyLogic+0x308>)
 8001584:	f006 fc00 	bl	8007d88 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8001588:	2301      	movs	r3, #1
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <KeyLogic+0x300>)
 800158c:	2107      	movs	r1, #7
 800158e:	4813      	ldr	r0, [pc, #76]	@ (80015dc <KeyLogic+0x30c>)
 8001590:	f006 fbfa 	bl	8007d88 <sniprintf>
				break;
 8001594:	e360      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){											// {SEQ_IDLE}: 						E to display roundPrice
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <KeyLogic+0x2ec>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d120      	bne.n	80015e0 <KeyLogic+0x310>
					seqState = SEQ_DISP_PRICE;
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <KeyLogic+0x2ec>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
					password = accumulatedNumber;
					setIdle();
				}else {
					setIdle();
				}
				break;
 80015a4:	e358      	b.n	8001c58 <KeyLogic+0x988>
 80015a6:	bf00      	nop
 80015a8:	20000119 	.word	0x20000119
 80015ac:	20000001 	.word	0x20000001
 80015b0:	20000100 	.word	0x20000100
 80015b4:	20000104 	.word	0x20000104
 80015b8:	20000000 	.word	0x20000000
 80015bc:	2000011a 	.word	0x2000011a
 80015c0:	2000006c 	.word	0x2000006c
 80015c4:	20000070 	.word	0x20000070
 80015c8:	20000074 	.word	0x20000074
 80015cc:	20000078 	.word	0x20000078
 80015d0:	080087c4 	.word	0x080087c4
 80015d4:	20000028 	.word	0x20000028
 80015d8:	2000002f 	.word	0x2000002f
 80015dc:	20000036 	.word	0x20000036
				}else if (seqState == SEQ_PRESSED_$){								// {SEQ_PRESSED_$}: 				$ -> [OrderPrice] -> E to set Order Price
 80015e0:	4b8e      	ldr	r3, [pc, #568]	@ (800181c <KeyLogic+0x54c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b17      	cmp	r3, #23
 80015e6:	d107      	bne.n	80015f8 <KeyLogic+0x328>
					setOrderPrice(accumulatedNumber);
 80015e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001820 <KeyLogic+0x550>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fdfb 	bl	80011e8 <setOrderPrice>
					setIdle();
 80015f2:	f7ff fe61 	bl	80012b8 <setIdle>
				break;
 80015f6:	e32f      	b.n	8001c58 <KeyLogic+0x988>
				}else if (seqState == SEQ_PRESSED_L){								// {SEQ_PRESSED_L}: 				L -> [OrderLiter] -> E to set Order Liter
 80015f8:	4b88      	ldr	r3, [pc, #544]	@ (800181c <KeyLogic+0x54c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b16      	cmp	r3, #22
 80015fe:	d107      	bne.n	8001610 <KeyLogic+0x340>
					setOrderLiter(accumulatedNumber);
 8001600:	4b87      	ldr	r3, [pc, #540]	@ (8001820 <KeyLogic+0x550>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fe1b 	bl	8001240 <setOrderLiter>
					setIdle();
 800160a:	f7ff fe55 	bl	80012b8 <setIdle>
				break;
 800160e:	e323      	b.n	8001c58 <KeyLogic+0x988>
				}else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [997979] -> E to go to show history
 8001610:	4b82      	ldr	r3, [pc, #520]	@ (800181c <KeyLogic+0x54c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d10a      	bne.n	800162e <KeyLogic+0x35e>
					accumulatedNumber==997979) {
 8001618:	4b81      	ldr	r3, [pc, #516]	@ (8001820 <KeyLogic+0x550>)
 800161a:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [997979] -> E to go to show history
 800161c:	4a81      	ldr	r2, [pc, #516]	@ (8001824 <KeyLogic+0x554>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d105      	bne.n	800162e <KeyLogic+0x35e>
					seqState = SEQ_PRESSED_P_NUM_SHOWHIST;
 8001622:	4b7e      	ldr	r3, [pc, #504]	@ (800181c <KeyLogic+0x54c>)
 8001624:	2209      	movs	r2, #9
 8001626:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001628:	f7ff fe34 	bl	8001294 <IdleEnv>
 800162c:	e21e      	b.n	8001a6c <KeyLogic+0x79c>
				}else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [999032] -> E to set ID gaspump
 800162e:	4b7b      	ldr	r3, [pc, #492]	@ (800181c <KeyLogic+0x54c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b08      	cmp	r3, #8
 8001634:	d10a      	bne.n	800164c <KeyLogic+0x37c>
						accumulatedNumber==999032){
 8001636:	4b7a      	ldr	r3, [pc, #488]	@ (8001820 <KeyLogic+0x550>)
 8001638:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [999032] -> E to set ID gaspump
 800163a:	4a7b      	ldr	r2, [pc, #492]	@ (8001828 <KeyLogic+0x558>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d105      	bne.n	800164c <KeyLogic+0x37c>
					seqState = SEQ_PRESSED_P_NUM_SETIDVOI;
 8001640:	4b76      	ldr	r3, [pc, #472]	@ (800181c <KeyLogic+0x54c>)
 8001642:	220a      	movs	r2, #10
 8001644:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001646:	f7ff fe25 	bl	8001294 <IdleEnv>
 800164a:	e20f      	b.n	8001a6c <KeyLogic+0x79c>
				}else if (seqState == SEQ_PRESSED_P_NUM_SETIDVOI){
 800164c:	4b73      	ldr	r3, [pc, #460]	@ (800181c <KeyLogic+0x54c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b0a      	cmp	r3, #10
 8001652:	d112      	bne.n	800167a <KeyLogic+0x3aa>
					if ( 11 <= accumulatedNumber  && accumulatedNumber <= 47){
 8001654:	4b72      	ldr	r3, [pc, #456]	@ (8001820 <KeyLogic+0x550>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b0a      	cmp	r3, #10
 800165a:	d908      	bls.n	800166e <KeyLogic+0x39e>
 800165c:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <KeyLogic+0x550>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b2f      	cmp	r3, #47	@ 0x2f
 8001662:	d804      	bhi.n	800166e <KeyLogic+0x39e>
						IDvoi = accumulatedNumber;
 8001664:	4b6e      	ldr	r3, [pc, #440]	@ (8001820 <KeyLogic+0x550>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b70      	ldr	r3, [pc, #448]	@ (800182c <KeyLogic+0x55c>)
 800166c:	701a      	strb	r2, [r3, #0]
					seqState = SEQ_IDLE;
 800166e:	4b6b      	ldr	r3, [pc, #428]	@ (800181c <KeyLogic+0x54c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001674:	f7ff fe0e 	bl	8001294 <IdleEnv>
				break;
 8001678:	e2ee      	b.n	8001c58 <KeyLogic+0x988>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 800167a:	4b68      	ldr	r3, [pc, #416]	@ (800181c <KeyLogic+0x54c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d10e      	bne.n	80016a0 <KeyLogic+0x3d0>
					accumulatedNumber==995591) {
 8001682:	4b67      	ldr	r3, [pc, #412]	@ (8001820 <KeyLogic+0x550>)
 8001684:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001686:	4a6a      	ldr	r2, [pc, #424]	@ (8001830 <KeyLogic+0x560>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d109      	bne.n	80016a0 <KeyLogic+0x3d0>
					seqState = SEQ_PRESSED_P_SET_F1_PRICE;
 800168c:	4b63      	ldr	r3, [pc, #396]	@ (800181c <KeyLogic+0x54c>)
 800168e:	220b      	movs	r2, #11
 8001690:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001692:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <KeyLogic+0x564>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001698:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <KeyLogic+0x550>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e1e5      	b.n	8001a6c <KeyLogic+0x79c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80016a0:	4b5e      	ldr	r3, [pc, #376]	@ (800181c <KeyLogic+0x54c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d10e      	bne.n	80016c6 <KeyLogic+0x3f6>
					accumulatedNumber==995592) {
 80016a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001820 <KeyLogic+0x550>)
 80016aa:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80016ac:	4a62      	ldr	r2, [pc, #392]	@ (8001838 <KeyLogic+0x568>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d109      	bne.n	80016c6 <KeyLogic+0x3f6>
					seqState = SEQ_PRESSED_P_SET_F2_PRICE;
 80016b2:	4b5a      	ldr	r3, [pc, #360]	@ (800181c <KeyLogic+0x54c>)
 80016b4:	220c      	movs	r2, #12
 80016b6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80016b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001834 <KeyLogic+0x564>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80016be:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <KeyLogic+0x550>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e1d2      	b.n	8001a6c <KeyLogic+0x79c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80016c6:	4b55      	ldr	r3, [pc, #340]	@ (800181c <KeyLogic+0x54c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d10e      	bne.n	80016ec <KeyLogic+0x41c>
					accumulatedNumber==995593) {
 80016ce:	4b54      	ldr	r3, [pc, #336]	@ (8001820 <KeyLogic+0x550>)
 80016d0:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80016d2:	4a5a      	ldr	r2, [pc, #360]	@ (800183c <KeyLogic+0x56c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d109      	bne.n	80016ec <KeyLogic+0x41c>
					seqState = SEQ_PRESSED_P_SET_F3_PRICE;
 80016d8:	4b50      	ldr	r3, [pc, #320]	@ (800181c <KeyLogic+0x54c>)
 80016da:	220d      	movs	r2, #13
 80016dc:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80016de:	4b55      	ldr	r3, [pc, #340]	@ (8001834 <KeyLogic+0x564>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80016e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001820 <KeyLogic+0x550>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e1bf      	b.n	8001a6c <KeyLogic+0x79c>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80016ec:	4b4b      	ldr	r3, [pc, #300]	@ (800181c <KeyLogic+0x54c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d10e      	bne.n	8001712 <KeyLogic+0x442>
					accumulatedNumber==995594) {
 80016f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <KeyLogic+0x550>)
 80016f6:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 80016f8:	4a51      	ldr	r2, [pc, #324]	@ (8001840 <KeyLogic+0x570>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d109      	bne.n	8001712 <KeyLogic+0x442>
					seqState = SEQ_PRESSED_P_SET_F4_PRICE;
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <KeyLogic+0x54c>)
 8001700:	220e      	movs	r2, #14
 8001702:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001704:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <KeyLogic+0x564>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800170a:	4b45      	ldr	r3, [pc, #276]	@ (8001820 <KeyLogic+0x550>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e1ac      	b.n	8001a6c <KeyLogic+0x79c>
				else if (seqState == SEQ_PRESSED_P_SET_F1_PRICE) {
 8001712:	4b42      	ldr	r3, [pc, #264]	@ (800181c <KeyLogic+0x54c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b0b      	cmp	r3, #11
 8001718:	d10d      	bne.n	8001736 <KeyLogic+0x466>
					F1Price=accumulatedNumber;
 800171a:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <KeyLogic+0x550>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a49      	ldr	r2, [pc, #292]	@ (8001844 <KeyLogic+0x574>)
 8001720:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <KeyLogic+0x54c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001728:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <KeyLogic+0x564>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <KeyLogic+0x550>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
				break;
 8001734:	e290      	b.n	8001c58 <KeyLogic+0x988>
				else if (seqState == SEQ_PRESSED_P_SET_F2_PRICE) {
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <KeyLogic+0x54c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d10d      	bne.n	800175a <KeyLogic+0x48a>
					F2Price=accumulatedNumber;
 800173e:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <KeyLogic+0x550>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a41      	ldr	r2, [pc, #260]	@ (8001848 <KeyLogic+0x578>)
 8001744:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 8001746:	4b35      	ldr	r3, [pc, #212]	@ (800181c <KeyLogic+0x54c>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <KeyLogic+0x564>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001752:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <KeyLogic+0x550>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
				break;
 8001758:	e27e      	b.n	8001c58 <KeyLogic+0x988>
				else if (seqState == SEQ_PRESSED_P_SET_F3_PRICE) {
 800175a:	4b30      	ldr	r3, [pc, #192]	@ (800181c <KeyLogic+0x54c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0d      	cmp	r3, #13
 8001760:	d10d      	bne.n	800177e <KeyLogic+0x4ae>
					F3Price=accumulatedNumber;
 8001762:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <KeyLogic+0x550>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a39      	ldr	r2, [pc, #228]	@ (800184c <KeyLogic+0x57c>)
 8001768:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <KeyLogic+0x54c>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001770:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <KeyLogic+0x564>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001776:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <KeyLogic+0x550>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
				break;
 800177c:	e26c      	b.n	8001c58 <KeyLogic+0x988>
				else if (seqState == SEQ_PRESSED_P_SET_F4_PRICE) {
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <KeyLogic+0x54c>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b0e      	cmp	r3, #14
 8001784:	d10d      	bne.n	80017a2 <KeyLogic+0x4d2>
					F4Price=accumulatedNumber;
 8001786:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <KeyLogic+0x550>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a31      	ldr	r2, [pc, #196]	@ (8001850 <KeyLogic+0x580>)
 800178c:	6013      	str	r3, [r2, #0]
					seqState=SEQ_IDLE;
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <KeyLogic+0x54c>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <KeyLogic+0x564>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <KeyLogic+0x550>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
				break;
 80017a0:	e25a      	b.n	8001c58 <KeyLogic+0x988>
				else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_PSWRD_SETPRICE}
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <KeyLogic+0x54c>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d10b      	bne.n	80017c2 <KeyLogic+0x4f2>
					accumulatedNumber==password) {
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <KeyLogic+0x550>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <KeyLogic+0x584>)
 80017b0:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_PSWRD_SETPRICE}
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d105      	bne.n	80017c2 <KeyLogic+0x4f2>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	@ (800181c <KeyLogic+0x54c>)
 80017b8:	220f      	movs	r2, #15
 80017ba:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 80017bc:	f7ff fd6a 	bl	8001294 <IdleEnv>
 80017c0:	e154      	b.n	8001a6c <KeyLogic+0x79c>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){					//  {SEQ_PRESSED_P_PSWRD_SETPRICE}: P -> [PSSWRD] -> E -> [PRICE] -> E to set currPrice and apply roundPrice settings
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <KeyLogic+0x54c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	f040 8094 	bne.w	80018f4 <KeyLogic+0x624>
					currPrice = accumulatedNumber;
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <KeyLogic+0x550>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <KeyLogic+0x588>)
 80017d2:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <KeyLogic+0x58c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <KeyLogic+0x512>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d054      	beq.n	800188a <KeyLogic+0x5ba>
 80017e0:	e080      	b.n	80018e4 <KeyLogic+0x614>
							if(currPrice%50<25){
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <KeyLogic+0x588>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <KeyLogic+0x590>)
 80017e8:	fba3 1302 	umull	r1, r3, r3, r2
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	2132      	movs	r1, #50	@ 0x32
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b18      	cmp	r3, #24
 80017f8:	d836      	bhi.n	8001868 <KeyLogic+0x598>
								roundedPrice=currPrice-(currPrice%50);
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <KeyLogic+0x588>)
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <KeyLogic+0x588>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <KeyLogic+0x590>)
 8001804:	fba3 0302 	umull	r0, r3, r3, r2
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	2032      	movs	r0, #50	@ 0x32
 800180c:	fb00 f303 	mul.w	r3, r0, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	1acb      	subs	r3, r1, r3
 8001814:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <KeyLogic+0x594>)
 8001816:	6013      	str	r3, [r2, #0]
							break;
 8001818:	e069      	b.n	80018ee <KeyLogic+0x61e>
 800181a:	bf00      	nop
 800181c:	2000011a 	.word	0x2000011a
 8001820:	20000108 	.word	0x20000108
 8001824:	000f3a5b 	.word	0x000f3a5b
 8001828:	000f3e78 	.word	0x000f3e78
 800182c:	20000068 	.word	0x20000068
 8001830:	000f3107 	.word	0x000f3107
 8001834:	2000010c 	.word	0x2000010c
 8001838:	000f3108 	.word	0x000f3108
 800183c:	000f3109 	.word	0x000f3109
 8001840:	000f310a 	.word	0x000f310a
 8001844:	2000006c 	.word	0x2000006c
 8001848:	20000070 	.word	0x20000070
 800184c:	20000074 	.word	0x20000074
 8001850:	20000078 	.word	0x20000078
 8001854:	20000040 	.word	0x20000040
 8001858:	20000060 	.word	0x20000060
 800185c:	20000118 	.word	0x20000118
 8001860:	51eb851f 	.word	0x51eb851f
 8001864:	20000064 	.word	0x20000064
								roundedPrice=currPrice-(currPrice%50)+50;
 8001868:	4b9f      	ldr	r3, [pc, #636]	@ (8001ae8 <KeyLogic+0x818>)
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	4b9e      	ldr	r3, [pc, #632]	@ (8001ae8 <KeyLogic+0x818>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b9e      	ldr	r3, [pc, #632]	@ (8001aec <KeyLogic+0x81c>)
 8001872:	fba3 0302 	umull	r0, r3, r3, r2
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	2032      	movs	r0, #50	@ 0x32
 800187a:	fb00 f303 	mul.w	r3, r0, r3
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	1acb      	subs	r3, r1, r3
 8001882:	3332      	adds	r3, #50	@ 0x32
 8001884:	4a9a      	ldr	r2, [pc, #616]	@ (8001af0 <KeyLogic+0x820>)
 8001886:	6013      	str	r3, [r2, #0]
							break;
 8001888:	e031      	b.n	80018ee <KeyLogic+0x61e>
							if(currPrice%100<50){
 800188a:	4b97      	ldr	r3, [pc, #604]	@ (8001ae8 <KeyLogic+0x818>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b97      	ldr	r3, [pc, #604]	@ (8001aec <KeyLogic+0x81c>)
 8001890:	fba3 1302 	umull	r1, r3, r3, r2
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	2164      	movs	r1, #100	@ 0x64
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b31      	cmp	r3, #49	@ 0x31
 80018a0:	d80f      	bhi.n	80018c2 <KeyLogic+0x5f2>
								roundedPrice=currPrice-(currPrice%100);
 80018a2:	4b91      	ldr	r3, [pc, #580]	@ (8001ae8 <KeyLogic+0x818>)
 80018a4:	6819      	ldr	r1, [r3, #0]
 80018a6:	4b90      	ldr	r3, [pc, #576]	@ (8001ae8 <KeyLogic+0x818>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b90      	ldr	r3, [pc, #576]	@ (8001aec <KeyLogic+0x81c>)
 80018ac:	fba3 0302 	umull	r0, r3, r3, r2
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	2064      	movs	r0, #100	@ 0x64
 80018b4:	fb00 f303 	mul.w	r3, r0, r3
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	1acb      	subs	r3, r1, r3
 80018bc:	4a8c      	ldr	r2, [pc, #560]	@ (8001af0 <KeyLogic+0x820>)
 80018be:	6013      	str	r3, [r2, #0]
							break;
 80018c0:	e015      	b.n	80018ee <KeyLogic+0x61e>
								roundedPrice=currPrice-(currPrice%100)+100;
 80018c2:	4b89      	ldr	r3, [pc, #548]	@ (8001ae8 <KeyLogic+0x818>)
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	4b88      	ldr	r3, [pc, #544]	@ (8001ae8 <KeyLogic+0x818>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b88      	ldr	r3, [pc, #544]	@ (8001aec <KeyLogic+0x81c>)
 80018cc:	fba3 0302 	umull	r0, r3, r3, r2
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	2064      	movs	r0, #100	@ 0x64
 80018d4:	fb00 f303 	mul.w	r3, r0, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	1acb      	subs	r3, r1, r3
 80018dc:	3364      	adds	r3, #100	@ 0x64
 80018de:	4a84      	ldr	r2, [pc, #528]	@ (8001af0 <KeyLogic+0x820>)
 80018e0:	6013      	str	r3, [r2, #0]
							break;
 80018e2:	e004      	b.n	80018ee <KeyLogic+0x61e>
							roundedPrice=currPrice;
 80018e4:	4b80      	ldr	r3, [pc, #512]	@ (8001ae8 <KeyLogic+0x818>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a81      	ldr	r2, [pc, #516]	@ (8001af0 <KeyLogic+0x820>)
 80018ea:	6013      	str	r3, [r2, #0]
							break;
 80018ec:	bf00      	nop
					setIdle();
 80018ee:	f7ff fce3 	bl	80012b8 <setIdle>
				break;
 80018f2:	e1b1      	b.n	8001c58 <KeyLogic+0x988>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&						// {SEQ_PRESSED_P_F2_PSWRD}:		P -> F2 -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_F2_PSWRD_ROUND}
 80018f4:	4b7f      	ldr	r3, [pc, #508]	@ (8001af4 <KeyLogic+0x824>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d10b      	bne.n	8001914 <KeyLogic+0x644>
						accumulatedNumber==password){
 80018fc:	4b7e      	ldr	r3, [pc, #504]	@ (8001af8 <KeyLogic+0x828>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b7e      	ldr	r3, [pc, #504]	@ (8001afc <KeyLogic+0x82c>)
 8001902:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&						// {SEQ_PRESSED_P_F2_PSWRD}:		P -> F2 -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_F2_PSWRD_ROUND}
 8001904:	429a      	cmp	r2, r3
 8001906:	d105      	bne.n	8001914 <KeyLogic+0x644>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 8001908:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <KeyLogic+0x824>)
 800190a:	2207      	movs	r2, #7
 800190c:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 800190e:	f7ff fcc1 	bl	8001294 <IdleEnv>
 8001912:	e0ab      	b.n	8001a6c <KeyLogic+0x79c>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){				// {SEQ_PRESSED_P_F2_PSWRD_ROUND}:	P -> F2 -> [PSSWRD] -> E -> [0|1|2] -> E to confirm roundPrice
 8001914:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <KeyLogic+0x824>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b07      	cmp	r3, #7
 800191a:	d176      	bne.n	8001a0a <KeyLogic+0x73a>
					switch(accumulatedNumber){
 800191c:	4b76      	ldr	r3, [pc, #472]	@ (8001af8 <KeyLogic+0x828>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d066      	beq.n	80019f2 <KeyLogic+0x722>
 8001924:	2b02      	cmp	r3, #2
 8001926:	d86c      	bhi.n	8001a02 <KeyLogic+0x732>
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <KeyLogic+0x662>
 800192c:	2b01      	cmp	r3, #1
 800192e:	d030      	beq.n	8001992 <KeyLogic+0x6c2>
							break;
 8001930:	e067      	b.n	8001a02 <KeyLogic+0x732>
							if(currPrice%50<25){
 8001932:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae8 <KeyLogic+0x818>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b6d      	ldr	r3, [pc, #436]	@ (8001aec <KeyLogic+0x81c>)
 8001938:	fba3 1302 	umull	r1, r3, r3, r2
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	2132      	movs	r1, #50	@ 0x32
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b18      	cmp	r3, #24
 8001948:	d80f      	bhi.n	800196a <KeyLogic+0x69a>
								roundedPrice=currPrice-(currPrice%50);
 800194a:	4b67      	ldr	r3, [pc, #412]	@ (8001ae8 <KeyLogic+0x818>)
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	4b66      	ldr	r3, [pc, #408]	@ (8001ae8 <KeyLogic+0x818>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b66      	ldr	r3, [pc, #408]	@ (8001aec <KeyLogic+0x81c>)
 8001954:	fba3 0302 	umull	r0, r3, r3, r2
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	2032      	movs	r0, #50	@ 0x32
 800195c:	fb00 f303 	mul.w	r3, r0, r3
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	1acb      	subs	r3, r1, r3
 8001964:	4a62      	ldr	r2, [pc, #392]	@ (8001af0 <KeyLogic+0x820>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e00f      	b.n	800198a <KeyLogic+0x6ba>
								roundedPrice=currPrice-(currPrice%50)+50;
 800196a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae8 <KeyLogic+0x818>)
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae8 <KeyLogic+0x818>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <KeyLogic+0x81c>)
 8001974:	fba3 0302 	umull	r0, r3, r3, r2
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	2032      	movs	r0, #50	@ 0x32
 800197c:	fb00 f303 	mul.w	r3, r0, r3
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	1acb      	subs	r3, r1, r3
 8001984:	3332      	adds	r3, #50	@ 0x32
 8001986:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <KeyLogic+0x820>)
 8001988:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 800198a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b00 <KeyLogic+0x830>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
							break;
 8001990:	e038      	b.n	8001a04 <KeyLogic+0x734>
							if(currPrice%100<50){
 8001992:	4b55      	ldr	r3, [pc, #340]	@ (8001ae8 <KeyLogic+0x818>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <KeyLogic+0x81c>)
 8001998:	fba3 1302 	umull	r1, r3, r3, r2
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	2164      	movs	r1, #100	@ 0x64
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b31      	cmp	r3, #49	@ 0x31
 80019a8:	d80f      	bhi.n	80019ca <KeyLogic+0x6fa>
								roundedPrice=currPrice-(currPrice%100);
 80019aa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <KeyLogic+0x818>)
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae8 <KeyLogic+0x818>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <KeyLogic+0x81c>)
 80019b4:	fba3 0302 	umull	r0, r3, r3, r2
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	2064      	movs	r0, #100	@ 0x64
 80019bc:	fb00 f303 	mul.w	r3, r0, r3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	1acb      	subs	r3, r1, r3
 80019c4:	4a4a      	ldr	r2, [pc, #296]	@ (8001af0 <KeyLogic+0x820>)
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e00f      	b.n	80019ea <KeyLogic+0x71a>
								roundedPrice=currPrice-(currPrice%100)+100;
 80019ca:	4b47      	ldr	r3, [pc, #284]	@ (8001ae8 <KeyLogic+0x818>)
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <KeyLogic+0x818>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b46      	ldr	r3, [pc, #280]	@ (8001aec <KeyLogic+0x81c>)
 80019d4:	fba3 0302 	umull	r0, r3, r3, r2
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	2064      	movs	r0, #100	@ 0x64
 80019dc:	fb00 f303 	mul.w	r3, r0, r3
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	1acb      	subs	r3, r1, r3
 80019e4:	3364      	adds	r3, #100	@ 0x64
 80019e6:	4a42      	ldr	r2, [pc, #264]	@ (8001af0 <KeyLogic+0x820>)
 80019e8:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 80019ea:	4b45      	ldr	r3, [pc, #276]	@ (8001b00 <KeyLogic+0x830>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
							break;
 80019f0:	e008      	b.n	8001a04 <KeyLogic+0x734>
							roundedPrice=currPrice;
 80019f2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae8 <KeyLogic+0x818>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a3e      	ldr	r2, [pc, #248]	@ (8001af0 <KeyLogic+0x820>)
 80019f8:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 80019fa:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <KeyLogic+0x830>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
							break;
 8001a00:	e000      	b.n	8001a04 <KeyLogic+0x734>
							break;
 8001a02:	bf00      	nop
					setIdle();
 8001a04:	f7ff fc58 	bl	80012b8 <setIdle>
				break;
 8001a08:	e126      	b.n	8001c58 <KeyLogic+0x988>
				}else if(seqState == SEQ_PRESSED_T_F4&&    							// {SEQ_PRESSED_T_F4}: T -> F4 -> [PSSWRD] -> E to delete totalLitersShift
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <KeyLogic+0x824>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b14      	cmp	r3, #20
 8001a10:	d10e      	bne.n	8001a30 <KeyLogic+0x760>
						accumulatedNumber == password){
 8001a12:	4b39      	ldr	r3, [pc, #228]	@ (8001af8 <KeyLogic+0x828>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <KeyLogic+0x82c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
				}else if(seqState == SEQ_PRESSED_T_F4&&    							// {SEQ_PRESSED_T_F4}: T -> F4 -> [PSSWRD] -> E to delete totalLitersShift
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d108      	bne.n	8001a30 <KeyLogic+0x760>
					seqState = SEQ_PRESSED_T_F4_PASSWORD;
 8001a1e:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <KeyLogic+0x824>)
 8001a20:	2215      	movs	r2, #21
 8001a22:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001a24:	f7ff fc36 	bl	8001294 <IdleEnv>
					totalLitersShift = 0;
 8001a28:	4b36      	ldr	r3, [pc, #216]	@ (8001b04 <KeyLogic+0x834>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e01d      	b.n	8001a6c <KeyLogic+0x79c>
				}else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <KeyLogic+0x824>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d10b      	bne.n	8001a50 <KeyLogic+0x780>
						accumulatedNumber == password){
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <KeyLogic+0x828>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <KeyLogic+0x82c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
				}else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d105      	bne.n	8001a50 <KeyLogic+0x780>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 8001a44:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <KeyLogic+0x824>)
 8001a46:	2203      	movs	r2, #3
 8001a48:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001a4a:	f7ff fc23 	bl	8001294 <IdleEnv>
 8001a4e:	e00d      	b.n	8001a6c <KeyLogic+0x79c>
				}else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8001a50:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <KeyLogic+0x824>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d106      	bne.n	8001a66 <KeyLogic+0x796>
					password = accumulatedNumber;
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <KeyLogic+0x828>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <KeyLogic+0x82c>)
 8001a5e:	6013      	str	r3, [r2, #0]
					setIdle();
 8001a60:	f7ff fc2a 	bl	80012b8 <setIdle>
				break;
 8001a64:	e0f8      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 8001a66:	f7ff fc27 	bl	80012b8 <setIdle>
				break;
 8001a6a:	e0f5      	b.n	8001c58 <KeyLogic+0x988>
 8001a6c:	e0f4      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <KeyLogic+0x824>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d103      	bne.n	8001a7e <KeyLogic+0x7ae>
					seqState = SEQ_PRESSED_P;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <KeyLogic+0x824>)
 8001a78:	2205      	movs	r2, #5
 8001a7a:	701a      	strb	r2, [r3, #0]
				} else {
					setIdle();
				}
				break;
 8001a7c:	e0ec      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 8001a7e:	f7ff fc1b 	bl	80012b8 <setIdle>
				break;
 8001a82:	e0e9      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <KeyLogic+0x824>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <KeyLogic+0x7c4>
					seqState = SEQ_PRESSED_T;
 8001a8c:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <KeyLogic+0x824>)
 8001a8e:	2210      	movs	r2, #16
 8001a90:	701a      	strb	r2, [r3, #0]
				} else {
					setIdle();
				}
				break;
 8001a92:	e0e1      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 8001a94:	f7ff fc10 	bl	80012b8 <setIdle>
				break;
 8001a98:	e0de      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_IDLE) {
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <KeyLogic+0x824>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <KeyLogic+0x7da>
					seqState = SEQ_PRESSED_$;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <KeyLogic+0x824>)
 8001aa4:	2217      	movs	r2, #23
 8001aa6:	701a      	strb	r2, [r3, #0]
				}else if (seqState == SEQ_PRESSED_T) {
					seqState = SEQ_PRESSED_T_$;
				} else {
					setIdle();
				}
				break;
 8001aa8:	e0d6      	b.n	8001c58 <KeyLogic+0x988>
				}else if (seqState == SEQ_PRESSED_T) {
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <KeyLogic+0x824>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d103      	bne.n	8001aba <KeyLogic+0x7ea>
					seqState = SEQ_PRESSED_T_$;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <KeyLogic+0x824>)
 8001ab4:	2212      	movs	r2, #18
 8001ab6:	701a      	strb	r2, [r3, #0]
				break;
 8001ab8:	e0ce      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 8001aba:	f7ff fbfd 	bl	80012b8 <setIdle>
				break;
 8001abe:	e0cb      	b.n	8001c58 <KeyLogic+0x988>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_IDLE) {
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <KeyLogic+0x824>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <KeyLogic+0x800>
					seqState = SEQ_PRESSED_L;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <KeyLogic+0x824>)
 8001aca:	2216      	movs	r2, #22
 8001acc:	701a      	strb	r2, [r3, #0]
				} else if (seqState == SEQ_PRESSED_T) {
					seqState = SEQ_PRESSED_T_L;
				} else {
					setIdle();
				}
				break;
 8001ace:	e0c3      	b.n	8001c58 <KeyLogic+0x988>
				} else if (seqState == SEQ_PRESSED_T) {
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <KeyLogic+0x824>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d103      	bne.n	8001ae0 <KeyLogic+0x810>
					seqState = SEQ_PRESSED_T_L;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <KeyLogic+0x824>)
 8001ada:	2211      	movs	r2, #17
 8001adc:	701a      	strb	r2, [r3, #0]
				break;
 8001ade:	e0bb      	b.n	8001c58 <KeyLogic+0x988>
					setIdle();
 8001ae0:	f7ff fbea 	bl	80012b8 <setIdle>
				break;
 8001ae4:	e0b8      	b.n	8001c58 <KeyLogic+0x988>
 8001ae6:	bf00      	nop
 8001ae8:	20000060 	.word	0x20000060
 8001aec:	51eb851f 	.word	0x51eb851f
 8001af0:	20000064 	.word	0x20000064
 8001af4:	2000011a 	.word	0x2000011a
 8001af8:	20000108 	.word	0x20000108
 8001afc:	20000040 	.word	0x20000040
 8001b00:	20000118 	.word	0x20000118
 8001b04:	20000048 	.word	0x20000048
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9')
 8001b08:	4b57      	ldr	r3, [pc, #348]	@ (8001c68 <KeyLogic+0x998>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b0e:	f240 809e 	bls.w	8001c4e <KeyLogic+0x97e>
 8001b12:	4b55      	ldr	r3, [pc, #340]	@ (8001c68 <KeyLogic+0x998>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b39      	cmp	r3, #57	@ 0x39
 8001b18:	f200 8099 	bhi.w	8001c4e <KeyLogic+0x97e>
				{
					if(seqState==SEQ_PRESSED_P)
 8001b1c:	4b53      	ldr	r3, [pc, #332]	@ (8001c6c <KeyLogic+0x99c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d10c      	bne.n	8001b3e <KeyLogic+0x86e>
					{
						seqState=SEQ_PRESSED_P_NUM;
 8001b24:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <KeyLogic+0x99c>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c68 <KeyLogic+0x998>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	3b30      	subs	r3, #48	@ 0x30
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b4f      	ldr	r3, [pc, #316]	@ (8001c70 <KeyLogic+0x9a0>)
 8001b34:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001b36:	4b4f      	ldr	r3, [pc, #316]	@ (8001c74 <KeyLogic+0x9a4>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P)
 8001b3c:	e08a      	b.n	8001c54 <KeyLogic+0x984>
					}
					else if (seqState == SEQ_PRESSED_P_NUM ||
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <KeyLogic+0x99c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d033      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001b46:	4b49      	ldr	r3, [pc, #292]	@ (8001c6c <KeyLogic+0x99c>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
					else if (seqState == SEQ_PRESSED_P_NUM ||
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d02f      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_SET_F1_PRICE||
 8001b4e:	4b47      	ldr	r3, [pc, #284]	@ (8001c6c <KeyLogic+0x99c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001b52:	2b0b      	cmp	r3, #11
 8001b54:	d02b      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_SET_F2_PRICE||
 8001b56:	4b45      	ldr	r3, [pc, #276]	@ (8001c6c <KeyLogic+0x99c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F1_PRICE||
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d027      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_SET_F3_PRICE||
 8001b5e:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <KeyLogic+0x99c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F2_PRICE||
 8001b62:	2b0d      	cmp	r3, #13
 8001b64:	d023      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_SET_F4_PRICE||
 8001b66:	4b41      	ldr	r3, [pc, #260]	@ (8001c6c <KeyLogic+0x99c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F3_PRICE||
 8001b6a:	2b0e      	cmp	r3, #14
 8001b6c:	d01f      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c6c <KeyLogic+0x99c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_SET_F4_PRICE||
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d01b      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_P_NUM_SETIDVOI||
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <KeyLogic+0x99c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d017      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_T_F4||
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <KeyLogic+0x99c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_NUM_SETIDVOI||
 8001b82:	2b14      	cmp	r3, #20
 8001b84:	d013      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8001b86:	4b39      	ldr	r3, [pc, #228]	@ (8001c6c <KeyLogic+0x99c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_T_F4||
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d00f      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8001b8e:	4b37      	ldr	r3, [pc, #220]	@ (8001c6c <KeyLogic+0x99c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d00b      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_NUMBER ||
 8001b96:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <KeyLogic+0x99c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d007      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_$||
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <KeyLogic+0x99c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_NUMBER ||
 8001ba2:	2b17      	cmp	r3, #23
 8001ba4:	d003      	beq.n	8001bae <KeyLogic+0x8de>
							seqState == SEQ_PRESSED_L
 8001ba6:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <KeyLogic+0x99c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_$||
 8001baa:	2b16      	cmp	r3, #22
 8001bac:	d117      	bne.n	8001bde <KeyLogic+0x90e>
							)
					{
						if (numberOfDigits < 6) {
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <KeyLogic+0x9a4>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d84a      	bhi.n	8001c4c <KeyLogic+0x97c>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c70 <KeyLogic+0x9a0>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <KeyLogic+0x998>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b30      	subs	r3, #48	@ 0x30
 8001bcc:	4a28      	ldr	r2, [pc, #160]	@ (8001c70 <KeyLogic+0x9a0>)
 8001bce:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <KeyLogic+0x9a4>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <KeyLogic+0x9a4>)
 8001bda:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8001bdc:	e036      	b.n	8001c4c <KeyLogic+0x97c>
						}
					}
					else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND)
 8001bde:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <KeyLogic+0x99c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b07      	cmp	r3, #7
 8001be4:	d117      	bne.n	8001c16 <KeyLogic+0x946>
					{
						if (numberOfDigits < 1) {
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <KeyLogic+0x9a4>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d132      	bne.n	8001c54 <KeyLogic+0x984>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8001bee:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <KeyLogic+0x9a0>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c68 <KeyLogic+0x998>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	3b30      	subs	r3, #48	@ 0x30
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <KeyLogic+0x9a0>)
 8001c06:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <KeyLogic+0x9a4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <KeyLogic+0x9a4>)
 8001c12:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P)
 8001c14:	e01e      	b.n	8001c54 <KeyLogic+0x984>
						}
					}
					else if(seqState == SEQ_PRESSED_P_NUM_SHOWHIST) 	//// {SEQ_PRESSED_P_NUM}:				P -> [997979] -> E -> number
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <KeyLogic+0x99c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b09      	cmp	r3, #9
 8001c1c:	d109      	bne.n	8001c32 <KeyLogic+0x962>
					{
						accumulatedNumber = keyPressed - '0';
 8001c1e:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <KeyLogic+0x998>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	3b30      	subs	r3, #48	@ 0x30
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <KeyLogic+0x9a0>)
 8001c28:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <KeyLogic+0x9a4>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P)
 8001c30:	e010      	b.n	8001c54 <KeyLogic+0x984>
					}
					else
					{
						seqState = SEQ_NUMBER;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <KeyLogic+0x99c>)
 8001c34:	2204      	movs	r2, #4
 8001c36:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <KeyLogic+0x998>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3b30      	subs	r3, #48	@ 0x30
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <KeyLogic+0x9a0>)
 8001c42:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <KeyLogic+0x9a4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P)
 8001c4a:	e003      	b.n	8001c54 <KeyLogic+0x984>
 8001c4c:	e002      	b.n	8001c54 <KeyLogic+0x984>
					}
				}else{
					setIdle();
 8001c4e:	f7ff fb33 	bl	80012b8 <setIdle>
				}
				break;
 8001c52:	e000      	b.n	8001c56 <KeyLogic+0x986>
					if(seqState==SEQ_PRESSED_P)
 8001c54:	bf00      	nop
				break;
 8001c56:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <KeyLogic+0x998>)
 8001c5a:	22ff      	movs	r2, #255	@ 0xff
 8001c5c:	701a      	strb	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	2000011a 	.word	0x2000011a
 8001c70:	20000108 	.word	0x20000108
 8001c74:	2000010c 	.word	0x2000010c

08001c78 <KeyLogic_Action>:
//																													//
//												KEY LOGIC ACTION FSM												//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void KeyLogic_Action() {
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b095      	sub	sp, #84	@ 0x54
 8001c7c:	af02      	add	r7, sp, #8
    char buffer[7];
    switch (seqState) {
 8001c7e:	4b9f      	ldr	r3, [pc, #636]	@ (8001efc <KeyLogic_Action+0x284>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b17      	cmp	r3, #23
 8001c84:	f200 8480 	bhi.w	8002588 <KeyLogic_Action+0x910>
 8001c88:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <KeyLogic_Action+0x18>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001cf1 	.word	0x08001cf1
 8001c94:	08001d25 	.word	0x08001d25
 8001c98:	08001d4d 	.word	0x08001d4d
 8001c9c:	08001d8d 	.word	0x08001d8d
 8001ca0:	080023d5 	.word	0x080023d5
 8001ca4:	08001dcb 	.word	0x08001dcb
 8001ca8:	08001df1 	.word	0x08001df1
 8001cac:	08001e17 	.word	0x08001e17
 8001cb0:	08001e37 	.word	0x08001e37
 8001cb4:	08001fdf 	.word	0x08001fdf
 8001cb8:	08001f71 	.word	0x08001f71
 8001cbc:	08001e5d 	.word	0x08001e5d
 8001cc0:	08001e85 	.word	0x08001e85
 8001cc4:	08001ead 	.word	0x08001ead
 8001cc8:	08001ed5 	.word	0x08001ed5
 8001ccc:	080020e9 	.word	0x080020e9
 8001cd0:	0800210f 	.word	0x0800210f
 8001cd4:	08002281 	.word	0x08002281
 8001cd8:	08002135 	.word	0x08002135
 8001cdc:	08002369 	.word	0x08002369
 8001ce0:	0800238f 	.word	0x0800238f
 8001ce4:	080023b5 	.word	0x080023b5
 8001ce8:	0800249b 	.word	0x0800249b
 8001cec:	08002415 	.word	0x08002415
        case SEQ_IDLE:
        	LEDPointFlag = -1;
 8001cf0:	4b83      	ldr	r3, [pc, #524]	@ (8001f00 <KeyLogic_Action+0x288>)
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	601a      	str	r2, [r3, #0]
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4a82      	ldr	r2, [pc, #520]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001cfc:	2107      	movs	r1, #7
 8001cfe:	4882      	ldr	r0, [pc, #520]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001d00:	f006 f842 	bl	8007d88 <sniprintf>
        	snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", orderPrice);
 8001d04:	4b81      	ldr	r3, [pc, #516]	@ (8001f0c <KeyLogic_Action+0x294>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a81      	ldr	r2, [pc, #516]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001d0a:	2107      	movs	r1, #7
 8001d0c:	4881      	ldr	r0, [pc, #516]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001d0e:	f006 f83b 	bl	8007d88 <sniprintf>
        	snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06ld", roundedPrice);
 8001d12:	4b81      	ldr	r3, [pc, #516]	@ (8001f18 <KeyLogic_Action+0x2a0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7e      	ldr	r2, [pc, #504]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001d18:	2107      	movs	r1, #7
 8001d1a:	4880      	ldr	r0, [pc, #512]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001d1c:	f006 f834 	bl	8007d88 <sniprintf>
            break;
 8001d20:	f000 bc52 	b.w	80025c8 <KeyLogic_Action+0x950>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8001d24:	4a7e      	ldr	r2, [pc, #504]	@ (8001f20 <KeyLogic_Action+0x2a8>)
 8001d26:	2107      	movs	r1, #7
 8001d28:	4877      	ldr	r0, [pc, #476]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001d2a:	f006 f82d 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", IDvoi);
 8001d2e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f24 <KeyLogic_Action+0x2ac>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4a74      	ldr	r2, [pc, #464]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001d34:	2107      	movs	r1, #7
 8001d36:	4877      	ldr	r0, [pc, #476]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001d38:	f006 f826 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4a71      	ldr	r2, [pc, #452]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001d40:	2107      	movs	r1, #7
 8001d42:	4876      	ldr	r0, [pc, #472]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001d44:	f006 f820 	bl	8007d88 <sniprintf>
			break;
 8001d48:	f000 bc3e 	b.w	80025c8 <KeyLogic_Action+0x950>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001d4c:	4b76      	ldr	r3, [pc, #472]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001d54:	4a6e      	ldr	r2, [pc, #440]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001d56:	2107      	movs	r1, #7
 8001d58:	f006 f816 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001d5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d60:	4a72      	ldr	r2, [pc, #456]	@ (8001f2c <KeyLogic_Action+0x2b4>)
 8001d62:	2107      	movs	r1, #7
 8001d64:	4868      	ldr	r0, [pc, #416]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001d66:	f006 f80f 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8001d6a:	4a71      	ldr	r2, [pc, #452]	@ (8001f30 <KeyLogic_Action+0x2b8>)
 8001d6c:	2107      	movs	r1, #7
 8001d6e:	4869      	ldr	r0, [pc, #420]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001d70:	f006 f80a 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001d74:	2300      	movs	r3, #0
 8001d76:	4a63      	ldr	r2, [pc, #396]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001d78:	2107      	movs	r1, #7
 8001d7a:	4868      	ldr	r0, [pc, #416]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001d7c:	f006 f804 	bl	8007d88 <sniprintf>
            LEDPointFlag = -1;
 8001d80:	4b5f      	ldr	r3, [pc, #380]	@ (8001f00 <KeyLogic_Action+0x288>)
 8001d82:	f04f 32ff 	mov.w	r2, #4294967295
 8001d86:	601a      	str	r2, [r3, #0]
            break;
 8001d88:	f000 bc1e 	b.w	80025c8 <KeyLogic_Action+0x950>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001d8c:	4b66      	ldr	r3, [pc, #408]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001d94:	4a5e      	ldr	r2, [pc, #376]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001d96:	2107      	movs	r1, #7
 8001d98:	f005 fff6 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001d9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001da0:	4a62      	ldr	r2, [pc, #392]	@ (8001f2c <KeyLogic_Action+0x2b4>)
 8001da2:	2107      	movs	r1, #7
 8001da4:	4858      	ldr	r0, [pc, #352]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001da6:	f005 ffef 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001daa:	2300      	movs	r3, #0
 8001dac:	4a55      	ldr	r2, [pc, #340]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001dae:	2107      	movs	r1, #7
 8001db0:	4858      	ldr	r0, [pc, #352]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001db2:	f005 ffe9 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8001db6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f34 <KeyLogic_Action+0x2bc>)
 8001db8:	2107      	movs	r1, #7
 8001dba:	4858      	ldr	r0, [pc, #352]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001dbc:	f005 ffe4 	bl	8007d88 <sniprintf>
            LEDPointFlag = -1;
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f00 <KeyLogic_Action+0x288>)
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc6:	601a      	str	r2, [r3, #0]
            break;
 8001dc8:	e3fe      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001dca:	4b57      	ldr	r3, [pc, #348]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a50      	ldr	r2, [pc, #320]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001dd0:	2107      	movs	r1, #7
 8001dd2:	484d      	ldr	r0, [pc, #308]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001dd4:	f005 ffd8 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	4a4a      	ldr	r2, [pc, #296]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001ddc:	2107      	movs	r1, #7
 8001dde:	484d      	ldr	r0, [pc, #308]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001de0:	f005 ffd2 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8001de4:	4a54      	ldr	r2, [pc, #336]	@ (8001f38 <KeyLogic_Action+0x2c0>)
 8001de6:	2107      	movs	r1, #7
 8001de8:	484c      	ldr	r0, [pc, #304]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001dea:	f005 ffcd 	bl	8007d88 <sniprintf>
			break;
 8001dee:	e3eb      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001df0:	4b4d      	ldr	r3, [pc, #308]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001df6:	2107      	movs	r1, #7
 8001df8:	4843      	ldr	r0, [pc, #268]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001dfa:	f005 ffc5 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4a40      	ldr	r2, [pc, #256]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001e02:	2107      	movs	r1, #7
 8001e04:	4843      	ldr	r0, [pc, #268]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001e06:	f005 ffbf 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f3c <KeyLogic_Action+0x2c4>)
 8001e0c:	2107      	movs	r1, #7
 8001e0e:	4843      	ldr	r0, [pc, #268]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001e10:	f005 ffba 	bl	8007d88 <sniprintf>
			break;
 8001e14:	e3d8      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 8001e16:	4a4a      	ldr	r2, [pc, #296]	@ (8001f40 <KeyLogic_Action+0x2c8>)
 8001e18:	2107      	movs	r1, #7
 8001e1a:	483b      	ldr	r0, [pc, #236]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001e1c:	f005 ffb4 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 8001e20:	4a48      	ldr	r2, [pc, #288]	@ (8001f44 <KeyLogic_Action+0x2cc>)
 8001e22:	2107      	movs	r1, #7
 8001e24:	483b      	ldr	r0, [pc, #236]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001e26:	f005 ffaf 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 8001e2a:	4a47      	ldr	r2, [pc, #284]	@ (8001f48 <KeyLogic_Action+0x2d0>)
 8001e2c:	2107      	movs	r1, #7
 8001e2e:	483b      	ldr	r0, [pc, #236]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001e30:	f005 ffaa 	bl	8007d88 <sniprintf>
			break;
 8001e34:	e3c8      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001e36:	4b3c      	ldr	r3, [pc, #240]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001e3c:	2107      	movs	r1, #7
 8001e3e:	4832      	ldr	r0, [pc, #200]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001e40:	f005 ffa2 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001e44:	2300      	movs	r3, #0
 8001e46:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <KeyLogic_Action+0x28c>)
 8001e48:	2107      	movs	r1, #7
 8001e4a:	4832      	ldr	r0, [pc, #200]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001e4c:	f005 ff9c 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8001e50:	4a3e      	ldr	r2, [pc, #248]	@ (8001f4c <KeyLogic_Action+0x2d4>)
 8001e52:	2107      	movs	r1, #7
 8001e54:	4831      	ldr	r0, [pc, #196]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001e56:	f005 ff97 	bl	8007d88 <sniprintf>
            break;
 8001e5a:	e3b5      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_P_SET_F1_PRICE:
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001e5c:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2b      	ldr	r2, [pc, #172]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001e62:	2107      	movs	r1, #7
 8001e64:	4828      	ldr	r0, [pc, #160]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001e66:	f005 ff8f 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", F1Price);
 8001e6a:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <KeyLogic_Action+0x2d8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001e70:	2107      	movs	r1, #7
 8001e72:	4828      	ldr	r0, [pc, #160]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001e74:	f005 ff88 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F1");
 8001e78:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <KeyLogic_Action+0x2dc>)
 8001e7a:	2107      	movs	r1, #7
 8001e7c:	4827      	ldr	r0, [pc, #156]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001e7e:	f005 ff83 	bl	8007d88 <sniprintf>
			break;
 8001e82:	e3a1      	b.n	80025c8 <KeyLogic_Action+0x950>
		case SEQ_PRESSED_P_SET_F2_PRICE:
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001e84:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a21      	ldr	r2, [pc, #132]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001e8a:	2107      	movs	r1, #7
 8001e8c:	481e      	ldr	r0, [pc, #120]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001e8e:	f005 ff7b 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", F2Price);
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <KeyLogic_Action+0x2e0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001e98:	2107      	movs	r1, #7
 8001e9a:	481e      	ldr	r0, [pc, #120]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001e9c:	f005 ff74 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F2");
 8001ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <KeyLogic_Action+0x2e4>)
 8001ea2:	2107      	movs	r1, #7
 8001ea4:	481d      	ldr	r0, [pc, #116]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001ea6:	f005 ff6f 	bl	8007d88 <sniprintf>
			break;
 8001eaa:	e38d      	b.n	80025c8 <KeyLogic_Action+0x950>
		case SEQ_PRESSED_P_SET_F3_PRICE:
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001eac:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001eb2:	2107      	movs	r1, #7
 8001eb4:	4814      	ldr	r0, [pc, #80]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001eb6:	f005 ff67 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", F3Price);
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <KeyLogic_Action+0x2e8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001ec0:	2107      	movs	r1, #7
 8001ec2:	4814      	ldr	r0, [pc, #80]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001ec4:	f005 ff60 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F3");
 8001ec8:	4a26      	ldr	r2, [pc, #152]	@ (8001f64 <KeyLogic_Action+0x2ec>)
 8001eca:	2107      	movs	r1, #7
 8001ecc:	4813      	ldr	r0, [pc, #76]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001ece:	f005 ff5b 	bl	8007d88 <sniprintf>
			break;
 8001ed2:	e379      	b.n	80025c8 <KeyLogic_Action+0x950>
		case SEQ_PRESSED_P_SET_F4_PRICE:
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <KeyLogic_Action+0x2b0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001eda:	2107      	movs	r1, #7
 8001edc:	480a      	ldr	r0, [pc, #40]	@ (8001f08 <KeyLogic_Action+0x290>)
 8001ede:	f005 ff53 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", F4Price);
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <KeyLogic_Action+0x2f0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <KeyLogic_Action+0x298>)
 8001ee8:	2107      	movs	r1, #7
 8001eea:	480a      	ldr	r0, [pc, #40]	@ (8001f14 <KeyLogic_Action+0x29c>)
 8001eec:	f005 ff4c 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SET F4");
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <KeyLogic_Action+0x2f4>)
 8001ef2:	2107      	movs	r1, #7
 8001ef4:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <KeyLogic_Action+0x2a4>)
 8001ef6:	f005 ff47 	bl	8007d88 <sniprintf>
			break;
 8001efa:	e365      	b.n	80025c8 <KeyLogic_Action+0x950>
 8001efc:	2000011a 	.word	0x2000011a
 8001f00:	2000007c 	.word	0x2000007c
 8001f04:	080087c4 	.word	0x080087c4
 8001f08:	20000028 	.word	0x20000028
 8001f0c:	2000024c 	.word	0x2000024c
 8001f10:	080087cc 	.word	0x080087cc
 8001f14:	2000002f 	.word	0x2000002f
 8001f18:	20000064 	.word	0x20000064
 8001f1c:	20000036 	.word	0x20000036
 8001f20:	080087d4 	.word	0x080087d4
 8001f24:	20000068 	.word	0x20000068
 8001f28:	20000108 	.word	0x20000108
 8001f2c:	080087dc 	.word	0x080087dc
 8001f30:	080087e0 	.word	0x080087e0
 8001f34:	080087e8 	.word	0x080087e8
 8001f38:	080087f0 	.word	0x080087f0
 8001f3c:	080087f8 	.word	0x080087f8
 8001f40:	08008800 	.word	0x08008800
 8001f44:	08008808 	.word	0x08008808
 8001f48:	08008810 	.word	0x08008810
 8001f4c:	08008818 	.word	0x08008818
 8001f50:	2000006c 	.word	0x2000006c
 8001f54:	08008820 	.word	0x08008820
 8001f58:	20000070 	.word	0x20000070
 8001f5c:	08008828 	.word	0x08008828
 8001f60:	20000074 	.word	0x20000074
 8001f64:	08008830 	.word	0x08008830
 8001f68:	20000078 	.word	0x20000078
 8001f6c:	08008838 	.word	0x08008838
        case SEQ_PRESSED_P_NUM_SETIDVOI:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001f70:	4baa      	ldr	r3, [pc, #680]	@ (800221c <KeyLogic_Action+0x5a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4aaa      	ldr	r2, [pc, #680]	@ (8002220 <KeyLogic_Action+0x5a8>)
 8001f76:	2107      	movs	r1, #7
 8001f78:	48aa      	ldr	r0, [pc, #680]	@ (8002224 <KeyLogic_Action+0x5ac>)
 8001f7a:	f005 ff05 	bl	8007d88 <sniprintf>
        	snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "......");
 8001f7e:	4aaa      	ldr	r2, [pc, #680]	@ (8002228 <KeyLogic_Action+0x5b0>)
 8001f80:	2107      	movs	r1, #7
 8001f82:	48aa      	ldr	r0, [pc, #680]	@ (800222c <KeyLogic_Action+0x5b4>)
 8001f84:	f005 ff00 	bl	8007d88 <sniprintf>
        	numBlinkRow =1;
 8001f88:	4ba9      	ldr	r3, [pc, #676]	@ (8002230 <KeyLogic_Action+0x5b8>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "SET ID"); // Set blink text
 8001f8e:	4aa9      	ldr	r2, [pc, #676]	@ (8002234 <KeyLogic_Action+0x5bc>)
 8001f90:	2107      	movs	r1, #7
 8001f92:	48a9      	ldr	r0, [pc, #676]	@ (8002238 <KeyLogic_Action+0x5c0>)
 8001f94:	f005 fef8 	bl	8007d88 <sniprintf>
			if (xBlinkTimer == NULL) {
 8001f98:	4ba8      	ldr	r3, [pc, #672]	@ (800223c <KeyLogic_Action+0x5c4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 830a 	bne.w	80025b6 <KeyLogic_Action+0x93e>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 8001fa2:	4ba7      	ldr	r3, [pc, #668]	@ (8002240 <KeyLogic_Action+0x5c8>)
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001fae:	48a5      	ldr	r0, [pc, #660]	@ (8002244 <KeyLogic_Action+0x5cc>)
 8001fb0:	f004 ff3a 	bl	8006e28 <xTimerCreate>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4aa1      	ldr	r2, [pc, #644]	@ (800223c <KeyLogic_Action+0x5c4>)
 8001fb8:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8001fba:	4ba0      	ldr	r3, [pc, #640]	@ (800223c <KeyLogic_Action+0x5c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 82f9 	beq.w	80025b6 <KeyLogic_Action+0x93e>
					xTimerStart(xBlinkTimer, 0);
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	@ (800223c <KeyLogic_Action+0x5c4>)
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	f004 f9d8 	bl	800637c <xTaskGetTickCount>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	2300      	movs	r3, #0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f004 ff84 	bl	8006ee4 <xTimerGenericCommand>
				}
			}
        	break;
 8001fdc:	e2eb      	b.n	80025b6 <KeyLogic_Action+0x93e>
        case SEQ_PRESSED_P_NUM_SHOWHIST:
        	LEDPointFlag = -1;
 8001fde:	4b9a      	ldr	r3, [pc, #616]	@ (8002248 <KeyLogic_Action+0x5d0>)
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	601a      	str	r2, [r3, #0]
        	if(1<=accumulatedNumber && accumulatedNumber <=5){
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800221c <KeyLogic_Action+0x5a4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d076      	beq.n	80020dc <KeyLogic_Action+0x464>
 8001fee:	4b8b      	ldr	r3, [pc, #556]	@ (800221c <KeyLogic_Action+0x5a4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d872      	bhi.n	80020dc <KeyLogic_Action+0x464>
				// Format the total liters into two parts
				formatTotalLiters(histTotalLiters[accumulatedNumber-1], &row1, &row2);
 8001ff6:	4b89      	ldr	r3, [pc, #548]	@ (800221c <KeyLogic_Action+0x5a4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	4a93      	ldr	r2, [pc, #588]	@ (800224c <KeyLogic_Action+0x5d4>)
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	4a93      	ldr	r2, [pc, #588]	@ (8002250 <KeyLogic_Action+0x5d8>)
 8002004:	4993      	ldr	r1, [pc, #588]	@ (8002254 <KeyLogic_Action+0x5dc>)
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f868 	bl	80010dc <formatTotalLiters>

				// Ensure the combined string fits into the buffer
				char row1StrHist[7]; // Buffer to hold formatted row1 string
				snprintf(row1StrHist, sizeof(row1StrHist), "%06ld", row1);
 800200c:	4b91      	ldr	r3, [pc, #580]	@ (8002254 <KeyLogic_Action+0x5dc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f107 000c 	add.w	r0, r7, #12
 8002014:	4a82      	ldr	r2, [pc, #520]	@ (8002220 <KeyLogic_Action+0x5a8>)
 8002016:	2107      	movs	r1, #7
 8002018:	f005 feb6 	bl	8007d88 <sniprintf>

				// Combine "L.. " with the last two digits of row1
				char combinedStrHist[8]; // Buffer to hold combined string "L.. " and last two digits of row1
				snprintf(combinedStrHist, sizeof(combinedStrHist), "1.%04ld", row1 % 10000); // Extract last two digits of row1
 800201c:	4b8d      	ldr	r3, [pc, #564]	@ (8002254 <KeyLogic_Action+0x5dc>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b8d      	ldr	r3, [pc, #564]	@ (8002258 <KeyLogic_Action+0x5e0>)
 8002022:	fba3 1302 	umull	r1, r3, r3, r2
 8002026:	0b5b      	lsrs	r3, r3, #13
 8002028:	f242 7110 	movw	r1, #10000	@ 0x2710
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	1d38      	adds	r0, r7, #4
 8002034:	4a89      	ldr	r2, [pc, #548]	@ (800225c <KeyLogic_Action+0x5e4>)
 8002036:	2108      	movs	r1, #8
 8002038:	f005 fea6 	bl	8007d88 <sniprintf>

				// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
				for (int i = 0; i < 6; ++i) {
 800203c:	2300      	movs	r3, #0
 800203e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002040:	e019      	b.n	8002076 <KeyLogic_Action+0x3fe>
					if (i < strlen(combinedStrHist)) {
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f8cb 	bl	80001e0 <strlen>
 800204a:	4602      	mov	r2, r0
 800204c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800204e:	429a      	cmp	r2, r3
 8002050:	d909      	bls.n	8002066 <KeyLogic_Action+0x3ee>
						SevenSegBuffer[0][i] = combinedStrHist[i];
 8002052:	1d3a      	adds	r2, r7, #4
 8002054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002056:	4413      	add	r3, r2
 8002058:	7819      	ldrb	r1, [r3, #0]
 800205a:	4a72      	ldr	r2, [pc, #456]	@ (8002224 <KeyLogic_Action+0x5ac>)
 800205c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800205e:	4413      	add	r3, r2
 8002060:	460a      	mov	r2, r1
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e004      	b.n	8002070 <KeyLogic_Action+0x3f8>
					} else {
						SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8002066:	4a6f      	ldr	r2, [pc, #444]	@ (8002224 <KeyLogic_Action+0x5ac>)
 8002068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800206a:	4413      	add	r3, r2
 800206c:	2220      	movs	r2, #32
 800206e:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 6; ++i) {
 8002070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002072:	3301      	adds	r3, #1
 8002074:	647b      	str	r3, [r7, #68]	@ 0x44
 8002076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002078:	2b05      	cmp	r3, #5
 800207a:	dde2      	ble.n	8002042 <KeyLogic_Action+0x3ca>
					}
				}


				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 800207c:	4b74      	ldr	r3, [pc, #464]	@ (8002250 <KeyLogic_Action+0x5d8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a67      	ldr	r2, [pc, #412]	@ (8002220 <KeyLogic_Action+0x5a8>)
 8002082:	2107      	movs	r1, #7
 8002084:	4869      	ldr	r0, [pc, #420]	@ (800222c <KeyLogic_Action+0x5b4>)
 8002086:	f005 fe7f 	bl	8007d88 <sniprintf>

				numBlinkRow =1;
 800208a:	4b69      	ldr	r3, [pc, #420]	@ (8002230 <KeyLogic_Action+0x5b8>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]
				snprintf(blinkText, sizeof(blinkText), "HIST "); // Set blink text
 8002090:	4a73      	ldr	r2, [pc, #460]	@ (8002260 <KeyLogic_Action+0x5e8>)
 8002092:	2107      	movs	r1, #7
 8002094:	4868      	ldr	r0, [pc, #416]	@ (8002238 <KeyLogic_Action+0x5c0>)
 8002096:	f005 fe77 	bl	8007d88 <sniprintf>
				if (xBlinkTimer == NULL) {
 800209a:	4b68      	ldr	r3, [pc, #416]	@ (800223c <KeyLogic_Action+0x5c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d120      	bne.n	80020e4 <KeyLogic_Action+0x46c>
					xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 80020a2:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <KeyLogic_Action+0x5c8>)
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80020ae:	4865      	ldr	r0, [pc, #404]	@ (8002244 <KeyLogic_Action+0x5cc>)
 80020b0:	f004 feba 	bl	8006e28 <xTimerCreate>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a61      	ldr	r2, [pc, #388]	@ (800223c <KeyLogic_Action+0x5c4>)
 80020b8:	6013      	str	r3, [r2, #0]
					if (xBlinkTimer != NULL) {
 80020ba:	4b60      	ldr	r3, [pc, #384]	@ (800223c <KeyLogic_Action+0x5c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <KeyLogic_Action+0x46c>
						xTimerStart(xBlinkTimer, 0);
 80020c2:	4b5e      	ldr	r3, [pc, #376]	@ (800223c <KeyLogic_Action+0x5c4>)
 80020c4:	681c      	ldr	r4, [r3, #0]
 80020c6:	f004 f959 	bl	800637c <xTaskGetTickCount>
 80020ca:	4602      	mov	r2, r0
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2300      	movs	r3, #0
 80020d2:	2101      	movs	r1, #1
 80020d4:	4620      	mov	r0, r4
 80020d6:	f004 ff05 	bl	8006ee4 <xTimerGenericCommand>
        	if(1<=accumulatedNumber && accumulatedNumber <=5){
 80020da:	e003      	b.n	80020e4 <KeyLogic_Action+0x46c>
					}
				}
        	}
        	else{
        		accumulatedNumber = 1;
 80020dc:	4b4f      	ldr	r3, [pc, #316]	@ (800221c <KeyLogic_Action+0x5a4>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
        	}

        	break;
 80020e2:	e271      	b.n	80025c8 <KeyLogic_Action+0x950>
        	if(1<=accumulatedNumber && accumulatedNumber <=5){
 80020e4:	bf00      	nop
        	break;
 80020e6:	e26f      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80020e8:	4b4c      	ldr	r3, [pc, #304]	@ (800221c <KeyLogic_Action+0x5a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002220 <KeyLogic_Action+0x5a8>)
 80020ee:	2107      	movs	r1, #7
 80020f0:	484c      	ldr	r0, [pc, #304]	@ (8002224 <KeyLogic_Action+0x5ac>)
 80020f2:	f005 fe49 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80020f6:	2300      	movs	r3, #0
 80020f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002264 <KeyLogic_Action+0x5ec>)
 80020fa:	2107      	movs	r1, #7
 80020fc:	484b      	ldr	r0, [pc, #300]	@ (800222c <KeyLogic_Action+0x5b4>)
 80020fe:	f005 fe43 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8002102:	4a59      	ldr	r2, [pc, #356]	@ (8002268 <KeyLogic_Action+0x5f0>)
 8002104:	2107      	movs	r1, #7
 8002106:	4859      	ldr	r0, [pc, #356]	@ (800226c <KeyLogic_Action+0x5f4>)
 8002108:	f005 fe3e 	bl	8007d88 <sniprintf>
            break;
 800210c:	e25c      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800210e:	2300      	movs	r3, #0
 8002110:	4a54      	ldr	r2, [pc, #336]	@ (8002264 <KeyLogic_Action+0x5ec>)
 8002112:	2107      	movs	r1, #7
 8002114:	4843      	ldr	r0, [pc, #268]	@ (8002224 <KeyLogic_Action+0x5ac>)
 8002116:	f005 fe37 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800211a:	2300      	movs	r3, #0
 800211c:	4a51      	ldr	r2, [pc, #324]	@ (8002264 <KeyLogic_Action+0x5ec>)
 800211e:	2107      	movs	r1, #7
 8002120:	4842      	ldr	r0, [pc, #264]	@ (800222c <KeyLogic_Action+0x5b4>)
 8002122:	f005 fe31 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8002126:	4b52      	ldr	r3, [pc, #328]	@ (8002270 <KeyLogic_Action+0x5f8>)
 8002128:	4a4e      	ldr	r2, [pc, #312]	@ (8002264 <KeyLogic_Action+0x5ec>)
 800212a:	2107      	movs	r1, #7
 800212c:	484f      	ldr	r0, [pc, #316]	@ (800226c <KeyLogic_Action+0x5f4>)
 800212e:	f005 fe2b 	bl	8007d88 <sniprintf>
            break;
 8002132:	e249      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <KeyLogic_Action+0x5fc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a45      	ldr	r2, [pc, #276]	@ (8002250 <KeyLogic_Action+0x5d8>)
 800213a:	4946      	ldr	r1, [pc, #280]	@ (8002254 <KeyLogic_Action+0x5dc>)
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f81b 	bl	8001178 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8002142:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <KeyLogic_Action+0x5dc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800214a:	4a35      	ldr	r2, [pc, #212]	@ (8002220 <KeyLogic_Action+0x5a8>)
 800214c:	2107      	movs	r1, #7
 800214e:	f005 fe1b 	bl	8007d88 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8002152:	4b40      	ldr	r3, [pc, #256]	@ (8002254 <KeyLogic_Action+0x5dc>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <KeyLogic_Action+0x5e0>)
 8002158:	fba3 1302 	umull	r1, r3, r3, r2
 800215c:	0b5b      	lsrs	r3, r3, #13
 800215e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800216c:	4a42      	ldr	r2, [pc, #264]	@ (8002278 <KeyLogic_Action+0x600>)
 800216e:	2108      	movs	r1, #8
 8002170:	f005 fe0a 	bl	8007d88 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8002174:	2300      	movs	r3, #0
 8002176:	643b      	str	r3, [r7, #64]	@ 0x40
 8002178:	e01b      	b.n	80021b2 <KeyLogic_Action+0x53a>
				if (i < strlen(combinedStrShift)) {
 800217a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f82e 	bl	80001e0 <strlen>
 8002184:	4602      	mov	r2, r0
 8002186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002188:	429a      	cmp	r2, r3
 800218a:	d90a      	bls.n	80021a2 <KeyLogic_Action+0x52a>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 800218c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002192:	4413      	add	r3, r2
 8002194:	7819      	ldrb	r1, [r3, #0]
 8002196:	4a23      	ldr	r2, [pc, #140]	@ (8002224 <KeyLogic_Action+0x5ac>)
 8002198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800219a:	4413      	add	r3, r2
 800219c:	460a      	mov	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e004      	b.n	80021ac <KeyLogic_Action+0x534>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80021a2:	4a20      	ldr	r2, [pc, #128]	@ (8002224 <KeyLogic_Action+0x5ac>)
 80021a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a6:	4413      	add	r3, r2
 80021a8:	2220      	movs	r2, #32
 80021aa:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 80021ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ae:	3301      	adds	r3, #1
 80021b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80021b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	dde0      	ble.n	800217a <KeyLogic_Action+0x502>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80021b8:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <KeyLogic_Action+0x5d8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a18      	ldr	r2, [pc, #96]	@ (8002220 <KeyLogic_Action+0x5a8>)
 80021be:	2107      	movs	r1, #7
 80021c0:	481a      	ldr	r0, [pc, #104]	@ (800222c <KeyLogic_Action+0x5b4>)
 80021c2:	f005 fde1 	bl	8007d88 <sniprintf>

			numBlinkRow =1;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <KeyLogic_Action+0x5b8>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "SHIFT "); // Set blink text
 80021cc:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <KeyLogic_Action+0x604>)
 80021ce:	2107      	movs	r1, #7
 80021d0:	4819      	ldr	r0, [pc, #100]	@ (8002238 <KeyLogic_Action+0x5c0>)
 80021d2:	f005 fdd9 	bl	8007d88 <sniprintf>
			if (xBlinkTimer == NULL) {
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <KeyLogic_Action+0x5c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 81ed 	bne.w	80025ba <KeyLogic_Action+0x942>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 80021e0:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <KeyLogic_Action+0x5c8>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80021ec:	4815      	ldr	r0, [pc, #84]	@ (8002244 <KeyLogic_Action+0x5cc>)
 80021ee:	f004 fe1b 	bl	8006e28 <xTimerCreate>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a11      	ldr	r2, [pc, #68]	@ (800223c <KeyLogic_Action+0x5c4>)
 80021f6:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <KeyLogic_Action+0x5c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 81dc 	beq.w	80025ba <KeyLogic_Action+0x942>
					xTimerStart(xBlinkTimer, 0);
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <KeyLogic_Action+0x5c4>)
 8002204:	681c      	ldr	r4, [r3, #0]
 8002206:	f004 f8b9 	bl	800637c <xTaskGetTickCount>
 800220a:	4602      	mov	r2, r0
 800220c:	2300      	movs	r3, #0
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	2101      	movs	r1, #1
 8002214:	4620      	mov	r0, r4
 8002216:	f004 fe65 	bl	8006ee4 <xTimerGenericCommand>
				}
			}

            break;
 800221a:	e1ce      	b.n	80025ba <KeyLogic_Action+0x942>
 800221c:	20000108 	.word	0x20000108
 8002220:	080087cc 	.word	0x080087cc
 8002224:	20000028 	.word	0x20000028
 8002228:	08008840 	.word	0x08008840
 800222c:	2000002f 	.word	0x2000002f
 8002230:	20000004 	.word	0x20000004
 8002234:	08008848 	.word	0x08008848
 8002238:	20000120 	.word	0x20000120
 800223c:	2000011c 	.word	0x2000011c
 8002240:	08000dbd 	.word	0x08000dbd
 8002244:	08008850 	.word	0x08008850
 8002248:	2000007c 	.word	0x2000007c
 800224c:	2000004c 	.word	0x2000004c
 8002250:	20000114 	.word	0x20000114
 8002254:	20000110 	.word	0x20000110
 8002258:	d1b71759 	.word	0xd1b71759
 800225c:	0800885c 	.word	0x0800885c
 8002260:	08008864 	.word	0x08008864
 8002264:	080087c4 	.word	0x080087c4
 8002268:	080087d4 	.word	0x080087d4
 800226c:	20000036 	.word	0x20000036
 8002270:	000f423f 	.word	0x000f423f
 8002274:	20000048 	.word	0x20000048
 8002278:	0800886c 	.word	0x0800886c
 800227c:	08008878 	.word	0x08008878
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8002280:	4ba6      	ldr	r3, [pc, #664]	@ (800251c <KeyLogic_Action+0x8a4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4aa6      	ldr	r2, [pc, #664]	@ (8002520 <KeyLogic_Action+0x8a8>)
 8002286:	49a7      	ldr	r1, [pc, #668]	@ (8002524 <KeyLogic_Action+0x8ac>)
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe ff27 	bl	80010dc <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 800228e:	4ba5      	ldr	r3, [pc, #660]	@ (8002524 <KeyLogic_Action+0x8ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f107 001c 	add.w	r0, r7, #28
 8002296:	4aa4      	ldr	r2, [pc, #656]	@ (8002528 <KeyLogic_Action+0x8b0>)
 8002298:	2107      	movs	r1, #7
 800229a:	f005 fd75 	bl	8007d88 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 800229e:	4ba1      	ldr	r3, [pc, #644]	@ (8002524 <KeyLogic_Action+0x8ac>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4ba2      	ldr	r3, [pc, #648]	@ (800252c <KeyLogic_Action+0x8b4>)
 80022a4:	fba3 1302 	umull	r1, r3, r3, r2
 80022a8:	0b5b      	lsrs	r3, r3, #13
 80022aa:	f242 7110 	movw	r1, #10000	@ 0x2710
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f107 0014 	add.w	r0, r7, #20
 80022b8:	4a9d      	ldr	r2, [pc, #628]	@ (8002530 <KeyLogic_Action+0x8b8>)
 80022ba:	2108      	movs	r1, #8
 80022bc:	f005 fd64 	bl	8007d88 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 80022c0:	2300      	movs	r3, #0
 80022c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c4:	e01b      	b.n	80022fe <KeyLogic_Action+0x686>
                if (i < strlen(combinedStr)) {
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ff88 	bl	80001e0 <strlen>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d90a      	bls.n	80022ee <KeyLogic_Action+0x676>
                    SevenSegBuffer[0][i] = combinedStr[i];
 80022d8:	f107 0214 	add.w	r2, r7, #20
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022de:	4413      	add	r3, r2
 80022e0:	7819      	ldrb	r1, [r3, #0]
 80022e2:	4a94      	ldr	r2, [pc, #592]	@ (8002534 <KeyLogic_Action+0x8bc>)
 80022e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e6:	4413      	add	r3, r2
 80022e8:	460a      	mov	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e004      	b.n	80022f8 <KeyLogic_Action+0x680>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80022ee:	4a91      	ldr	r2, [pc, #580]	@ (8002534 <KeyLogic_Action+0x8bc>)
 80022f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f2:	4413      	add	r3, r2
 80022f4:	2220      	movs	r2, #32
 80022f6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 80022f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fa:	3301      	adds	r3, #1
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002300:	2b05      	cmp	r3, #5
 8002302:	dde0      	ble.n	80022c6 <KeyLogic_Action+0x64e>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8002304:	4b86      	ldr	r3, [pc, #536]	@ (8002520 <KeyLogic_Action+0x8a8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a87      	ldr	r2, [pc, #540]	@ (8002528 <KeyLogic_Action+0x8b0>)
 800230a:	2107      	movs	r1, #7
 800230c:	488a      	ldr	r0, [pc, #552]	@ (8002538 <KeyLogic_Action+0x8c0>)
 800230e:	f005 fd3b 	bl	8007d88 <sniprintf>

            numBlinkRow =1;
 8002312:	4b8a      	ldr	r3, [pc, #552]	@ (800253c <KeyLogic_Action+0x8c4>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "TOTAL "); // Set blink text
 8002318:	4a89      	ldr	r2, [pc, #548]	@ (8002540 <KeyLogic_Action+0x8c8>)
 800231a:	2107      	movs	r1, #7
 800231c:	4889      	ldr	r0, [pc, #548]	@ (8002544 <KeyLogic_Action+0x8cc>)
 800231e:	f005 fd33 	bl	8007d88 <sniprintf>
			if (xBlinkTimer == NULL) {
 8002322:	4b89      	ldr	r3, [pc, #548]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8149 	bne.w	80025be <KeyLogic_Action+0x946>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 800232c:	4b87      	ldr	r3, [pc, #540]	@ (800254c <KeyLogic_Action+0x8d4>)
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2300      	movs	r3, #0
 8002332:	2201      	movs	r2, #1
 8002334:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002338:	4885      	ldr	r0, [pc, #532]	@ (8002550 <KeyLogic_Action+0x8d8>)
 800233a:	f004 fd75 	bl	8006e28 <xTimerCreate>
 800233e:	4603      	mov	r3, r0
 8002340:	4a81      	ldr	r2, [pc, #516]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002342:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8002344:	4b80      	ldr	r3, [pc, #512]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8138 	beq.w	80025be <KeyLogic_Action+0x946>
					xTimerStart(xBlinkTimer, 0);
 800234e:	4b7e      	ldr	r3, [pc, #504]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002350:	681c      	ldr	r4, [r3, #0]
 8002352:	f004 f813 	bl	800637c <xTaskGetTickCount>
 8002356:	4602      	mov	r2, r0
 8002358:	2300      	movs	r3, #0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	2101      	movs	r1, #1
 8002360:	4620      	mov	r0, r4
 8002362:	f004 fdbf 	bl	8006ee4 <xTimerGenericCommand>
				}
			}



            break;
 8002366:	e12a      	b.n	80025be <KeyLogic_Action+0x946>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8002368:	4b7a      	ldr	r3, [pc, #488]	@ (8002554 <KeyLogic_Action+0x8dc>)
 800236a:	4a7b      	ldr	r2, [pc, #492]	@ (8002558 <KeyLogic_Action+0x8e0>)
 800236c:	2107      	movs	r1, #7
 800236e:	4871      	ldr	r0, [pc, #452]	@ (8002534 <KeyLogic_Action+0x8bc>)
 8002370:	f005 fd0a 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8002374:	2300      	movs	r3, #0
 8002376:	4a78      	ldr	r2, [pc, #480]	@ (8002558 <KeyLogic_Action+0x8e0>)
 8002378:	2107      	movs	r1, #7
 800237a:	486f      	ldr	r0, [pc, #444]	@ (8002538 <KeyLogic_Action+0x8c0>)
 800237c:	f005 fd04 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8002380:	2300      	movs	r3, #0
 8002382:	4a75      	ldr	r2, [pc, #468]	@ (8002558 <KeyLogic_Action+0x8e0>)
 8002384:	2107      	movs	r1, #7
 8002386:	4875      	ldr	r0, [pc, #468]	@ (800255c <KeyLogic_Action+0x8e4>)
 8002388:	f005 fcfe 	bl	8007d88 <sniprintf>
            break;
 800238c:	e11c      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_T_F4:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 800238e:	4b74      	ldr	r3, [pc, #464]	@ (8002560 <KeyLogic_Action+0x8e8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <KeyLogic_Action+0x8b0>)
 8002394:	2107      	movs	r1, #7
 8002396:	4867      	ldr	r0, [pc, #412]	@ (8002534 <KeyLogic_Action+0x8bc>)
 8002398:	f005 fcf6 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800239c:	2300      	movs	r3, #0
 800239e:	4a6e      	ldr	r2, [pc, #440]	@ (8002558 <KeyLogic_Action+0x8e0>)
 80023a0:	2107      	movs	r1, #7
 80023a2:	4865      	ldr	r0, [pc, #404]	@ (8002538 <KeyLogic_Action+0x8c0>)
 80023a4:	f005 fcf0 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DELETE");
 80023a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002564 <KeyLogic_Action+0x8ec>)
 80023aa:	2107      	movs	r1, #7
 80023ac:	486b      	ldr	r0, [pc, #428]	@ (800255c <KeyLogic_Action+0x8e4>)
 80023ae:	f005 fceb 	bl	8007d88 <sniprintf>
            break;
 80023b2:	e109      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_T_F4_PASSWORD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), " ");
 80023b4:	4a6c      	ldr	r2, [pc, #432]	@ (8002568 <KeyLogic_Action+0x8f0>)
 80023b6:	2107      	movs	r1, #7
 80023b8:	485e      	ldr	r0, [pc, #376]	@ (8002534 <KeyLogic_Action+0x8bc>)
 80023ba:	f005 fce5 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 80023be:	4a6a      	ldr	r2, [pc, #424]	@ (8002568 <KeyLogic_Action+0x8f0>)
 80023c0:	2107      	movs	r1, #7
 80023c2:	485d      	ldr	r0, [pc, #372]	@ (8002538 <KeyLogic_Action+0x8c0>)
 80023c4:	f005 fce0 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DONE ");
 80023c8:	4a68      	ldr	r2, [pc, #416]	@ (800256c <KeyLogic_Action+0x8f4>)
 80023ca:	2107      	movs	r1, #7
 80023cc:	4863      	ldr	r0, [pc, #396]	@ (800255c <KeyLogic_Action+0x8e4>)
 80023ce:	f005 fcdb 	bl	8007d88 <sniprintf>
			break;
 80023d2:	e0f9      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80023d4:	4b62      	ldr	r3, [pc, #392]	@ (8002560 <KeyLogic_Action+0x8e8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80023dc:	4a52      	ldr	r2, [pc, #328]	@ (8002528 <KeyLogic_Action+0x8b0>)
 80023de:	2107      	movs	r1, #7
 80023e0:	f005 fcd2 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80023e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023e8:	4a61      	ldr	r2, [pc, #388]	@ (8002570 <KeyLogic_Action+0x8f8>)
 80023ea:	2107      	movs	r1, #7
 80023ec:	4851      	ldr	r0, [pc, #324]	@ (8002534 <KeyLogic_Action+0x8bc>)
 80023ee:	f005 fccb 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80023f2:	2300      	movs	r3, #0
 80023f4:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <KeyLogic_Action+0x8e0>)
 80023f6:	2107      	movs	r1, #7
 80023f8:	484f      	ldr	r0, [pc, #316]	@ (8002538 <KeyLogic_Action+0x8c0>)
 80023fa:	f005 fcc5 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80023fe:	2300      	movs	r3, #0
 8002400:	4a55      	ldr	r2, [pc, #340]	@ (8002558 <KeyLogic_Action+0x8e0>)
 8002402:	2107      	movs	r1, #7
 8002404:	4855      	ldr	r0, [pc, #340]	@ (800255c <KeyLogic_Action+0x8e4>)
 8002406:	f005 fcbf 	bl	8007d88 <sniprintf>
			LEDPointFlag = -1;
 800240a:	4b5a      	ldr	r3, [pc, #360]	@ (8002574 <KeyLogic_Action+0x8fc>)
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	601a      	str	r2, [r3, #0]
			break;
 8002412:	e0d9      	b.n	80025c8 <KeyLogic_Action+0x950>
        case SEQ_PRESSED_$:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8002414:	4b52      	ldr	r3, [pc, #328]	@ (8002560 <KeyLogic_Action+0x8e8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800241c:	4a42      	ldr	r2, [pc, #264]	@ (8002528 <KeyLogic_Action+0x8b0>)
 800241e:	2107      	movs	r1, #7
 8002420:	f005 fcb2 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8002424:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002428:	4a51      	ldr	r2, [pc, #324]	@ (8002570 <KeyLogic_Action+0x8f8>)
 800242a:	2107      	movs	r1, #7
 800242c:	4841      	ldr	r0, [pc, #260]	@ (8002534 <KeyLogic_Action+0x8bc>)
 800242e:	f005 fcab 	bl	8007d88 <sniprintf>

			LEDPointFlag = -1;
 8002432:	4b50      	ldr	r3, [pc, #320]	@ (8002574 <KeyLogic_Action+0x8fc>)
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	601a      	str	r2, [r3, #0]
			numBlinkRow =2;
 800243a:	4b40      	ldr	r3, [pc, #256]	@ (800253c <KeyLogic_Action+0x8c4>)
 800243c:	2202      	movs	r2, #2
 800243e:	601a      	str	r2, [r3, #0]
			snprintf(blinkText1, sizeof(blinkText1), "SET   "); // Set blink text
 8002440:	4a4d      	ldr	r2, [pc, #308]	@ (8002578 <KeyLogic_Action+0x900>)
 8002442:	2107      	movs	r1, #7
 8002444:	484d      	ldr	r0, [pc, #308]	@ (800257c <KeyLogic_Action+0x904>)
 8002446:	f005 fc9f 	bl	8007d88 <sniprintf>
			snprintf(blinkText, sizeof(blinkText), "GIA   ");
 800244a:	4a4d      	ldr	r2, [pc, #308]	@ (8002580 <KeyLogic_Action+0x908>)
 800244c:	2107      	movs	r1, #7
 800244e:	483d      	ldr	r0, [pc, #244]	@ (8002544 <KeyLogic_Action+0x8cc>)
 8002450:	f005 fc9a 	bl	8007d88 <sniprintf>
			if (xBlinkTimer == NULL) {
 8002454:	4b3c      	ldr	r3, [pc, #240]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f040 80b2 	bne.w	80025c2 <KeyLogic_Action+0x94a>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <KeyLogic_Action+0x8d4>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800246a:	4839      	ldr	r0, [pc, #228]	@ (8002550 <KeyLogic_Action+0x8d8>)
 800246c:	f004 fcdc 	bl	8006e28 <xTimerCreate>
 8002470:	4603      	mov	r3, r0
 8002472:	4a35      	ldr	r2, [pc, #212]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002474:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8002476:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a1 	beq.w	80025c2 <KeyLogic_Action+0x94a>
					xTimerStart(xBlinkTimer, 0);
 8002480:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002482:	681c      	ldr	r4, [r3, #0]
 8002484:	f003 ff7a 	bl	800637c <xTaskGetTickCount>
 8002488:	4602      	mov	r2, r0
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	2101      	movs	r1, #1
 8002492:	4620      	mov	r0, r4
 8002494:	f004 fd26 	bl	8006ee4 <xTimerGenericCommand>
				}
			}

//			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
//			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
			break;
 8002498:	e093      	b.n	80025c2 <KeyLogic_Action+0x94a>
        case SEQ_PRESSED_L:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <KeyLogic_Action+0x8e8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80024a2:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <KeyLogic_Action+0x8b0>)
 80024a4:	2107      	movs	r1, #7
 80024a6:	f005 fc6f 	bl	8007d88 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80024aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024ae:	4a30      	ldr	r2, [pc, #192]	@ (8002570 <KeyLogic_Action+0x8f8>)
 80024b0:	2107      	movs	r1, #7
 80024b2:	4820      	ldr	r0, [pc, #128]	@ (8002534 <KeyLogic_Action+0x8bc>)
 80024b4:	f005 fc68 	bl	8007d88 <sniprintf>

			LEDPointFlag = -1;
 80024b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <KeyLogic_Action+0x8fc>)
 80024ba:	f04f 32ff 	mov.w	r2, #4294967295
 80024be:	601a      	str	r2, [r3, #0]
			numBlinkRow =2;
 80024c0:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <KeyLogic_Action+0x8c4>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	601a      	str	r2, [r3, #0]
			snprintf(blinkText1, sizeof(blinkText1), "SET   "); // Set blink text
 80024c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002578 <KeyLogic_Action+0x900>)
 80024c8:	2107      	movs	r1, #7
 80024ca:	482c      	ldr	r0, [pc, #176]	@ (800257c <KeyLogic_Action+0x904>)
 80024cc:	f005 fc5c 	bl	8007d88 <sniprintf>
			snprintf(blinkText, sizeof(blinkText), "LIT   ");
 80024d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002584 <KeyLogic_Action+0x90c>)
 80024d2:	2107      	movs	r1, #7
 80024d4:	481b      	ldr	r0, [pc, #108]	@ (8002544 <KeyLogic_Action+0x8cc>)
 80024d6:	f005 fc57 	bl	8007d88 <sniprintf>
			if (xBlinkTimer == NULL) {
 80024da:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <KeyLogic_Action+0x8d0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d171      	bne.n	80025c6 <KeyLogic_Action+0x94e>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <KeyLogic_Action+0x8d4>)
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2300      	movs	r3, #0
 80024e8:	2201      	movs	r2, #1
 80024ea:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80024ee:	4818      	ldr	r0, [pc, #96]	@ (8002550 <KeyLogic_Action+0x8d8>)
 80024f0:	f004 fc9a 	bl	8006e28 <xTimerCreate>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a14      	ldr	r2, [pc, #80]	@ (8002548 <KeyLogic_Action+0x8d0>)
 80024f8:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 80024fa:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <KeyLogic_Action+0x8d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d061      	beq.n	80025c6 <KeyLogic_Action+0x94e>
					xTimerStart(xBlinkTimer, 0);
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <KeyLogic_Action+0x8d0>)
 8002504:	681c      	ldr	r4, [r3, #0]
 8002506:	f003 ff39 	bl	800637c <xTaskGetTickCount>
 800250a:	4602      	mov	r2, r0
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2300      	movs	r3, #0
 8002512:	2101      	movs	r1, #1
 8002514:	4620      	mov	r0, r4
 8002516:	f004 fce5 	bl	8006ee4 <xTimerGenericCommand>
				}
			}

//			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
//			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "LIT   ");
			break;
 800251a:	e054      	b.n	80025c6 <KeyLogic_Action+0x94e>
 800251c:	20000044 	.word	0x20000044
 8002520:	20000114 	.word	0x20000114
 8002524:	20000110 	.word	0x20000110
 8002528:	080087cc 	.word	0x080087cc
 800252c:	d1b71759 	.word	0xd1b71759
 8002530:	08008880 	.word	0x08008880
 8002534:	20000028 	.word	0x20000028
 8002538:	2000002f 	.word	0x2000002f
 800253c:	20000004 	.word	0x20000004
 8002540:	08008888 	.word	0x08008888
 8002544:	20000120 	.word	0x20000120
 8002548:	2000011c 	.word	0x2000011c
 800254c:	08000dbd 	.word	0x08000dbd
 8002550:	08008850 	.word	0x08008850
 8002554:	00051615 	.word	0x00051615
 8002558:	080087c4 	.word	0x080087c4
 800255c:	20000036 	.word	0x20000036
 8002560:	20000108 	.word	0x20000108
 8002564:	08008890 	.word	0x08008890
 8002568:	080087b4 	.word	0x080087b4
 800256c:	08008898 	.word	0x08008898
 8002570:	080087dc 	.word	0x080087dc
 8002574:	2000007c 	.word	0x2000007c
 8002578:	080088a0 	.word	0x080088a0
 800257c:	20000128 	.word	0x20000128
 8002580:	080087d4 	.word	0x080087d4
 8002584:	080088a8 	.word	0x080088a8
        default:
        	LEDPointFlag = -1;
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <KeyLogic_Action+0x958>)
 800258a:	f04f 32ff 	mov.w	r2, #4294967295
 800258e:	601a      	str	r2, [r3, #0]
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8002590:	2300      	movs	r3, #0
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <KeyLogic_Action+0x95c>)
 8002594:	2107      	movs	r1, #7
 8002596:	4810      	ldr	r0, [pc, #64]	@ (80025d8 <KeyLogic_Action+0x960>)
 8002598:	f005 fbf6 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800259c:	2300      	movs	r3, #0
 800259e:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <KeyLogic_Action+0x95c>)
 80025a0:	2107      	movs	r1, #7
 80025a2:	480e      	ldr	r0, [pc, #56]	@ (80025dc <KeyLogic_Action+0x964>)
 80025a4:	f005 fbf0 	bl	8007d88 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80025a8:	2300      	movs	r3, #0
 80025aa:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <KeyLogic_Action+0x95c>)
 80025ac:	2107      	movs	r1, #7
 80025ae:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <KeyLogic_Action+0x968>)
 80025b0:	f005 fbea 	bl	8007d88 <sniprintf>
            break;
 80025b4:	e008      	b.n	80025c8 <KeyLogic_Action+0x950>
        	break;
 80025b6:	bf00      	nop
 80025b8:	e006      	b.n	80025c8 <KeyLogic_Action+0x950>
            break;
 80025ba:	bf00      	nop
 80025bc:	e004      	b.n	80025c8 <KeyLogic_Action+0x950>
            break;
 80025be:	bf00      	nop
 80025c0:	e002      	b.n	80025c8 <KeyLogic_Action+0x950>
			break;
 80025c2:	bf00      	nop
 80025c4:	e000      	b.n	80025c8 <KeyLogic_Action+0x950>
			break;
 80025c6:	bf00      	nop
    }
}
 80025c8:	bf00      	nop
 80025ca:	374c      	adds	r7, #76	@ 0x4c
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	2000007c 	.word	0x2000007c
 80025d4:	080087c4 	.word	0x080087c4
 80025d8:	20000028 	.word	0x20000028
 80025dc:	2000002f 	.word	0x2000002f
 80025e0:	20000036 	.word	0x20000036

080025e4 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80025f2:	d907      	bls.n	8002604 <CharToSegment+0x20>
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b39      	cmp	r3, #57	@ 0x39
 80025f8:	d804      	bhi.n	8002604 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	3b30      	subs	r3, #48	@ 0x30
 80025fe:	4a38      	ldr	r2, [pc, #224]	@ (80026e0 <CharToSegment+0xfc>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	e066      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'L') {
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	2b4c      	cmp	r3, #76	@ 0x4c
 8002608:	d102      	bne.n	8002610 <CharToSegment+0x2c>
        return specialCharMap[0];
 800260a:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <CharToSegment+0x100>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	e060      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == '.') {
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	2b2e      	cmp	r3, #46	@ 0x2e
 8002614:	d102      	bne.n	800261c <CharToSegment+0x38>
        return specialCharMap[1];
 8002616:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <CharToSegment+0x100>)
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	e05a      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'T') {
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b54      	cmp	r3, #84	@ 0x54
 8002620:	d102      	bne.n	8002628 <CharToSegment+0x44>
        return specialCharMap[2];
 8002622:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <CharToSegment+0x100>)
 8002624:	789b      	ldrb	r3, [r3, #2]
 8002626:	e054      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'O') {
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	2b4f      	cmp	r3, #79	@ 0x4f
 800262c:	d102      	bne.n	8002634 <CharToSegment+0x50>
        return specialCharMap[3];
 800262e:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <CharToSegment+0x100>)
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	e04e      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'A') {
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	2b41      	cmp	r3, #65	@ 0x41
 8002638:	d102      	bne.n	8002640 <CharToSegment+0x5c>
        return specialCharMap[4];
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <CharToSegment+0x100>)
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	e048      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'S') {
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	2b53      	cmp	r3, #83	@ 0x53
 8002644:	d102      	bne.n	800264c <CharToSegment+0x68>
        return specialCharMap[5];
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <CharToSegment+0x100>)
 8002648:	795b      	ldrb	r3, [r3, #5]
 800264a:	e042      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'H') {
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	2b48      	cmp	r3, #72	@ 0x48
 8002650:	d102      	bne.n	8002658 <CharToSegment+0x74>
        return specialCharMap[6];
 8002652:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <CharToSegment+0x100>)
 8002654:	799b      	ldrb	r3, [r3, #6]
 8002656:	e03c      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'I') {
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b49      	cmp	r3, #73	@ 0x49
 800265c:	d102      	bne.n	8002664 <CharToSegment+0x80>
        return specialCharMap[7];
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <CharToSegment+0x100>)
 8002660:	79db      	ldrb	r3, [r3, #7]
 8002662:	e036      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'F') {
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b46      	cmp	r3, #70	@ 0x46
 8002668:	d102      	bne.n	8002670 <CharToSegment+0x8c>
        return specialCharMap[8];
 800266a:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <CharToSegment+0x100>)
 800266c:	7a1b      	ldrb	r3, [r3, #8]
 800266e:	e030      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'G') {
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b47      	cmp	r3, #71	@ 0x47
 8002674:	d102      	bne.n	800267c <CharToSegment+0x98>
        return specialCharMap[9];
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <CharToSegment+0x100>)
 8002678:	7a5b      	ldrb	r3, [r3, #9]
 800267a:	e02a      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'P') {
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b50      	cmp	r3, #80	@ 0x50
 8002680:	d102      	bne.n	8002688 <CharToSegment+0xa4>
        return specialCharMap[10];
 8002682:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <CharToSegment+0x100>)
 8002684:	7a9b      	ldrb	r3, [r3, #10]
 8002686:	e024      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'C') {
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2b43      	cmp	r3, #67	@ 0x43
 800268c:	d102      	bne.n	8002694 <CharToSegment+0xb0>
        return specialCharMap[11];
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <CharToSegment+0x100>)
 8002690:	7adb      	ldrb	r3, [r3, #11]
 8002692:	e01e      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'E') {
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2b45      	cmp	r3, #69	@ 0x45
 8002698:	d102      	bne.n	80026a0 <CharToSegment+0xbc>
        return specialCharMap[12];
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <CharToSegment+0x100>)
 800269c:	7b1b      	ldrb	r3, [r3, #12]
 800269e:	e018      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'U') {
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b55      	cmp	r3, #85	@ 0x55
 80026a4:	d102      	bne.n	80026ac <CharToSegment+0xc8>
        return specialCharMap[13];
 80026a6:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <CharToSegment+0x100>)
 80026a8:	7b5b      	ldrb	r3, [r3, #13]
 80026aa:	e012      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'N') {
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	2b4e      	cmp	r3, #78	@ 0x4e
 80026b0:	d102      	bne.n	80026b8 <CharToSegment+0xd4>
        return specialCharMap[14];
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <CharToSegment+0x100>)
 80026b4:	7b9b      	ldrb	r3, [r3, #14]
 80026b6:	e00c      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'R') {
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	2b52      	cmp	r3, #82	@ 0x52
 80026bc:	d102      	bne.n	80026c4 <CharToSegment+0xe0>
        return specialCharMap[15];
 80026be:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <CharToSegment+0x100>)
 80026c0:	7bdb      	ldrb	r3, [r3, #15]
 80026c2:	e006      	b.n	80026d2 <CharToSegment+0xee>
    } else if (c == 'D') {
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2b44      	cmp	r3, #68	@ 0x44
 80026c8:	d102      	bne.n	80026d0 <CharToSegment+0xec>
        return specialCharMap[16];
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <CharToSegment+0x100>)
 80026cc:	7c1b      	ldrb	r3, [r3, #16]
 80026ce:	e000      	b.n	80026d2 <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 80026d0:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000008 	.word	0x20000008
 80026e4:	20000014 	.word	0x20000014

080026e8 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e035      	b.n	8002766 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd6a 	bl	80001e0 <strlen>
 800270c:	4603      	mov	r3, r0
 800270e:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	2b05      	cmp	r3, #5
 8002714:	d81f      	bhi.n	8002756 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	dd15      	ble.n	800274a <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	441a      	add	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1e59      	subs	r1, r3, #1
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	1acb      	subs	r3, r1, r3
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff55 	bl	80025e4 <CharToSegment>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	4a0e      	ldr	r2, [pc, #56]	@ (8002778 <SevenSegLEDsHandler+0x90>)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	460a      	mov	r2, r1
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e00a      	b.n	8002760 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 800274a:	4a0b      	ldr	r2, [pc, #44]	@ (8002778 <SevenSegLEDsHandler+0x90>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	22ff      	movs	r2, #255	@ 0xff
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e004      	b.n	8002760 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8002756:	4a08      	ldr	r2, [pc, #32]	@ (8002778 <SevenSegLEDsHandler+0x90>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	22ff      	movs	r2, #255	@ 0xff
 800275e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3301      	adds	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b02      	cmp	r3, #2
 800276a:	ddc6      	ble.n	80026fa <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 800276c:	4b02      	ldr	r3, [pc, #8]	@ (8002778 <SevenSegLEDsHandler+0x90>)
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000144 	.word	0x20000144

0800277c <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
 8002788:	4613      	mov	r3, r2
 800278a:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffa9 	bl	80026e8 <SevenSegLEDsHandler>
 8002796:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d820      	bhi.n	80027e0 <UpdateDisplayBuffer+0x64>
 800279e:	a201      	add	r2, pc, #4	@ (adr r2, 80027a4 <UpdateDisplayBuffer+0x28>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027bd 	.word	0x080027bd
 80027a8:	080027c3 	.word	0x080027c3
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	080027cf 	.word	0x080027cf
 80027b4:	080027d5 	.word	0x080027d5
 80027b8:	080027db 	.word	0x080027db
        case 0:
            curr_scan = 0b11111110;
 80027bc:	23fe      	movs	r3, #254	@ 0xfe
 80027be:	73fb      	strb	r3, [r7, #15]
            break;
 80027c0:	e011      	b.n	80027e6 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 80027c2:	23fd      	movs	r3, #253	@ 0xfd
 80027c4:	73fb      	strb	r3, [r7, #15]
            break;
 80027c6:	e00e      	b.n	80027e6 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 80027c8:	23fb      	movs	r3, #251	@ 0xfb
 80027ca:	73fb      	strb	r3, [r7, #15]
            break;
 80027cc:	e00b      	b.n	80027e6 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 80027ce:	23f7      	movs	r3, #247	@ 0xf7
 80027d0:	73fb      	strb	r3, [r7, #15]
            break;
 80027d2:	e008      	b.n	80027e6 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 80027d4:	23ef      	movs	r3, #239	@ 0xef
 80027d6:	73fb      	strb	r3, [r7, #15]
            break;
 80027d8:	e005      	b.n	80027e6 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 80027da:	23df      	movs	r3, #223	@ 0xdf
 80027dc:	73fb      	strb	r3, [r7, #15]
            break;
 80027de:	e002      	b.n	80027e6 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 80027e0:	23ff      	movs	r3, #255	@ 0xff
 80027e2:	73fb      	strb	r3, [r7, #15]
            break;
 80027e4:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 80027e6:	4b57      	ldr	r3, [pc, #348]	@ (8002944 <UpdateDisplayBuffer+0x1c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db72      	blt.n	80028d4 <UpdateDisplayBuffer+0x158>
 80027ee:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <UpdateDisplayBuffer+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	dc6e      	bgt.n	80028d4 <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	4b52      	ldr	r3, [pc, #328]	@ (8002944 <UpdateDisplayBuffer+0x1c8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d136      	bne.n	800286e <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8002800:	78ba      	ldrb	r2, [r7, #2]
 8002802:	4951      	ldr	r1, [pc, #324]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	440b      	add	r3, r1
 800280c:	22ff      	movs	r2, #255	@ 0xff
 800280e:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8002810:	78ba      	ldrb	r2, [r7, #2]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	7898      	ldrb	r0, [r3, #2]
 8002816:	494c      	ldr	r1, [pc, #304]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	440b      	add	r3, r1
 8002820:	3301      	adds	r3, #1
 8002822:	4602      	mov	r2, r0
 8002824:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 8002826:	78ba      	ldrb	r2, [r7, #2]
 8002828:	4947      	ldr	r1, [pc, #284]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	440b      	add	r3, r1
 8002832:	3302      	adds	r3, #2
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3301      	adds	r3, #1
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	78ba      	ldrb	r2, [r7, #2]
 8002840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002844:	b2d8      	uxtb	r0, r3
 8002846:	4940      	ldr	r1, [pc, #256]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	440b      	add	r3, r1
 8002850:	3303      	adds	r3, #3
 8002852:	4602      	mov	r2, r0
 8002854:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 8002856:	78ba      	ldrb	r2, [r7, #2]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	7818      	ldrb	r0, [r3, #0]
 800285c:	493a      	ldr	r1, [pc, #232]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	440b      	add	r3, r1
 8002866:	3304      	adds	r3, #4
 8002868:	4602      	mov	r2, r0
 800286a:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 800286c:	e065      	b.n	800293a <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800286e:	78ba      	ldrb	r2, [r7, #2]
 8002870:	4935      	ldr	r1, [pc, #212]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	440b      	add	r3, r1
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 800287e:	78ba      	ldrb	r2, [r7, #2]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	7898      	ldrb	r0, [r3, #2]
 8002884:	4930      	ldr	r1, [pc, #192]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	440b      	add	r3, r1
 800288e:	3301      	adds	r3, #1
 8002890:	4602      	mov	r2, r0
 8002892:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 8002894:	78ba      	ldrb	r2, [r7, #2]
 8002896:	492c      	ldr	r1, [pc, #176]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	440b      	add	r3, r1
 80028a0:	3302      	adds	r3, #2
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 80028a6:	78ba      	ldrb	r2, [r7, #2]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	7858      	ldrb	r0, [r3, #1]
 80028ac:	4926      	ldr	r1, [pc, #152]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	3303      	adds	r3, #3
 80028b8:	4602      	mov	r2, r0
 80028ba:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 80028bc:	78ba      	ldrb	r2, [r7, #2]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	7818      	ldrb	r0, [r3, #0]
 80028c2:	4921      	ldr	r1, [pc, #132]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	3304      	adds	r3, #4
 80028ce:	4602      	mov	r2, r0
 80028d0:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80028d2:	e032      	b.n	800293a <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80028d4:	78ba      	ldrb	r2, [r7, #2]
 80028d6:	491c      	ldr	r1, [pc, #112]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	440b      	add	r3, r1
 80028e0:	22ff      	movs	r2, #255	@ 0xff
 80028e2:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 80028e4:	78ba      	ldrb	r2, [r7, #2]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	7898      	ldrb	r0, [r3, #2]
 80028ea:	4917      	ldr	r1, [pc, #92]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	3301      	adds	r3, #1
 80028f6:	4602      	mov	r2, r0
 80028f8:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 80028fa:	78ba      	ldrb	r2, [r7, #2]
 80028fc:	4912      	ldr	r1, [pc, #72]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	440b      	add	r3, r1
 8002906:	3302      	adds	r3, #2
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 800290c:	78ba      	ldrb	r2, [r7, #2]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	7858      	ldrb	r0, [r3, #1]
 8002912:	490d      	ldr	r1, [pc, #52]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	440b      	add	r3, r1
 800291c:	3303      	adds	r3, #3
 800291e:	4602      	mov	r2, r0
 8002920:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 8002922:	78ba      	ldrb	r2, [r7, #2]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	7818      	ldrb	r0, [r3, #0]
 8002928:	4907      	ldr	r1, [pc, #28]	@ (8002948 <UpdateDisplayBuffer+0x1cc>)
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	440b      	add	r3, r1
 8002932:	3304      	adds	r3, #4
 8002934:	4602      	mov	r2, r0
 8002936:	701a      	strb	r2, [r3, #0]
    }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000007c 	.word	0x2000007c
 8002948:	20000138 	.word	0x20000138

0800294c <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <SevenSegLEDsScan+0x7c>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3301      	adds	r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	bfb8      	it	lt
 8002962:	425b      	neglt	r3, r3
 8002964:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8002966:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <SevenSegLEDsScan+0x80>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	4619      	mov	r1, r3
 8002970:	4817      	ldr	r0, [pc, #92]	@ (80029d0 <SevenSegLEDsScan+0x84>)
 8002972:	f7ff ff03 	bl	800277c <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002976:	b672      	cpsid	i
}
 8002978:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 800297a:	4b13      	ldr	r3, [pc, #76]	@ (80029c8 <SevenSegLEDsScan+0x7c>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <SevenSegLEDsScan+0x88>)
 800298a:	4413      	add	r3, r2
 800298c:	2105      	movs	r1, #5
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f824 	bl	80029dc <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8002994:	4a0c      	ldr	r2, [pc, #48]	@ (80029c8 <SevenSegLEDsScan+0x7c>)
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800299a:	b662      	cpsie	i
}
 800299c:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 800299e:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <SevenSegLEDsScan+0x80>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <SevenSegLEDsScan+0x8c>)
 80029a8:	fb83 3102 	smull	r3, r1, r3, r2
 80029ac:	17d3      	asrs	r3, r2, #31
 80029ae:	1ac9      	subs	r1, r1, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	440b      	add	r3, r1
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	1ad1      	subs	r1, r2, r3
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <SevenSegLEDsScan+0x80>)
 80029be:	701a      	strb	r2, [r3, #0]
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000142 	.word	0x20000142
 80029cc:	20000134 	.word	0x20000134
 80029d0:	20000028 	.word	0x20000028
 80029d4:	20000138 	.word	0x20000138
 80029d8:	2aaaaaab 	.word	0x2aaaaaab

080029dc <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80029e6:	2200      	movs	r2, #0
 80029e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029ec:	4823      	ldr	r0, [pc, #140]	@ (8002a7c <ShiftOut_SPI+0xa0>)
 80029ee:	f000 ffd3 	bl	8003998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80029f2:	2201      	movs	r2, #1
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	4822      	ldr	r0, [pc, #136]	@ (8002a80 <ShiftOut_SPI+0xa4>)
 80029f8:	f000 ffce 	bl	8003998 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e003      	b.n	8002a0a <ShiftOut_SPI+0x2e>
 8002a02:	bf00      	nop
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a10:	dbf7      	blt.n	8002a02 <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002a12:	bf00      	nop
 8002a14:	481b      	ldr	r0, [pc, #108]	@ (8002a84 <ShiftOut_SPI+0xa8>)
 8002a16:	f001 fe1b 	bl	8004650 <HAL_SPI_GetState>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d1f9      	bne.n	8002a14 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4816      	ldr	r0, [pc, #88]	@ (8002a84 <ShiftOut_SPI+0xa8>)
 8002a2c:	f001 fccd 	bl	80043ca <HAL_SPI_Transmit>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 8002a36:	f000 fab1 	bl	8002f9c <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	e003      	b.n	8002a48 <ShiftOut_SPI+0x6c>
 8002a40:	bf00      	nop
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a4e:	dbf7      	blt.n	8002a40 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002a50:	bf00      	nop
 8002a52:	480c      	ldr	r0, [pc, #48]	@ (8002a84 <ShiftOut_SPI+0xa8>)
 8002a54:	f001 fdfc 	bl	8004650 <HAL_SPI_GetState>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d1f9      	bne.n	8002a52 <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <ShiftOut_SPI+0xa0>)
 8002a66:	f000 ff97 	bl	8003998 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	@ 0x80
 8002a6e:	4804      	ldr	r0, [pc, #16]	@ (8002a80 <ShiftOut_SPI+0xa4>)
 8002a70:	f000 ff92 	bl	8003998 <HAL_GPIO_WritePin>

}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	20000148 	.word	0x20000148

08002a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a8c:	f000 fcc4 	bl	8003418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a90:	f000 f838 	bl	8002b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a94:	f000 f966 	bl	8002d64 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002a98:	f000 f89c 	bl	8002bd4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a9c:	f000 f8d0 	bl	8002c40 <MX_SPI2_Init>
  MX_TIM5_Init();
 8002aa0:	f000 f904 	bl	8002cac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002aa4:	f002 fa80 	bl	8004fa8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae0 <main+0x58>)
 8002aaa:	2100      	movs	r1, #0
 8002aac:	480d      	ldr	r0, [pc, #52]	@ (8002ae4 <main+0x5c>)
 8002aae:	f002 fac5 	bl	800503c <osThreadNew>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <main+0x60>)
 8002ab6:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <main+0x64>)
 8002aba:	2100      	movs	r1, #0
 8002abc:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <main+0x68>)
 8002abe:	f002 fabd 	bl	800503c <osThreadNew>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <main+0x6c>)
 8002ac6:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(EncoderRun, NULL, &EncoderTask_attributes);
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8002af8 <main+0x70>)
 8002aca:	2100      	movs	r1, #0
 8002acc:	480b      	ldr	r0, [pc, #44]	@ (8002afc <main+0x74>)
 8002ace:	f002 fab5 	bl	800503c <osThreadNew>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <main+0x78>)
 8002ad6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002ad8:	f002 fa8a 	bl	8004ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <main+0x54>
 8002ae0:	080088f8 	.word	0x080088f8
 8002ae4:	08002e69 	.word	0x08002e69
 8002ae8:	20000240 	.word	0x20000240
 8002aec:	0800891c 	.word	0x0800891c
 8002af0:	08002ea5 	.word	0x08002ea5
 8002af4:	20000244 	.word	0x20000244
 8002af8:	08008940 	.word	0x08008940
 8002afc:	08002ec1 	.word	0x08002ec1
 8002b00:	20000248 	.word	0x20000248

08002b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b094      	sub	sp, #80	@ 0x50
 8002b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b0a:	f107 0320 	add.w	r3, r7, #32
 8002b0e:	2230      	movs	r2, #48	@ 0x30
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 f96c 	bl	8007df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	4b27      	ldr	r3, [pc, #156]	@ (8002bcc <SystemClock_Config+0xc8>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	4a26      	ldr	r2, [pc, #152]	@ (8002bcc <SystemClock_Config+0xc8>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b38:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <SystemClock_Config+0xc8>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b44:	2300      	movs	r3, #0
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <SystemClock_Config+0xcc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	@ (8002bd0 <SystemClock_Config+0xcc>)
 8002b4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <SystemClock_Config+0xcc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b60:	2302      	movs	r3, #2
 8002b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b68:	2310      	movs	r3, #16
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b74:	2308      	movs	r3, #8
 8002b76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002b78:	2364      	movs	r3, #100	@ 0x64
 8002b7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b80:	2304      	movs	r3, #4
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 ff1f 	bl	80039cc <HAL_RCC_OscConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b94:	f000 fa02 	bl	8002f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b98:	230f      	movs	r3, #15
 8002b9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	2103      	movs	r1, #3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f981 	bl	8003ebc <HAL_RCC_ClockConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002bc0:	f000 f9ec 	bl	8002f9c <Error_Handler>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3750      	adds	r7, #80	@ 0x50
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002bda:	4a18      	ldr	r2, [pc, #96]	@ (8002c3c <MX_SPI1_Init+0x68>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bde:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002be6:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bec:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c06:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c08:	2220      	movs	r2, #32
 8002c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c20:	220a      	movs	r2, #10
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c24:	4804      	ldr	r0, [pc, #16]	@ (8002c38 <MX_SPI1_Init+0x64>)
 8002c26:	f001 fb47 	bl	80042b8 <HAL_SPI_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c30:	f000 f9b4 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000148 	.word	0x20000148
 8002c3c:	40013000 	.word	0x40013000

08002c40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c46:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <MX_SPI2_Init+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	@ (8002ca4 <MX_SPI2_Init+0x64>)
 8002c92:	f001 fb11 	bl	80042b8 <HAL_SPI_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c9c:	f000 f97e 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200001a0 	.word	0x200001a0
 8002ca8:	40003800 	.word	0x40003800

08002cac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	@ 0x30
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	2224      	movs	r2, #36	@ 0x24
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f005 f898 	bl	8007df0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cc8:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002cca:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <MX_TIM5_Init+0xb4>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002cce:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b21      	ldr	r3, [pc, #132]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002d02:	2302      	movs	r3, #2
 8002d04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d06:	2301      	movs	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	4619      	mov	r1, r3
 8002d18:	4810      	ldr	r0, [pc, #64]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002d1a:	f001 fe3f 	bl	800499c <HAL_TIM_Encoder_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d24:	f000 f93a 	bl	8002f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d30:	1d3b      	adds	r3, r7, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4809      	ldr	r0, [pc, #36]	@ (8002d5c <MX_TIM5_Init+0xb0>)
 8002d36:	f002 f871 	bl	8004e1c <HAL_TIMEx_MasterConfigSynchronization>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002d40:	f000 f92c 	bl	8002f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2105      	movs	r1, #5
 8002d48:	2032      	movs	r0, #50	@ 0x32
 8002d4a:	f000 fc5f 	bl	800360c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d4e:	2032      	movs	r0, #50	@ 0x32
 8002d50:	f000 fc78 	bl	8003644 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM5_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	3730      	adds	r7, #48	@ 0x30
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200001f8 	.word	0x200001f8
 8002d60:	40000c00 	.word	0x40000c00

08002d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	4b37      	ldr	r3, [pc, #220]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	4a36      	ldr	r2, [pc, #216]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8a:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b30      	ldr	r3, [pc, #192]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	4a28      	ldr	r2, [pc, #160]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc2:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a21      	ldr	r2, [pc, #132]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <MX_GPIO_Init+0xf8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8002dea:	2200      	movs	r2, #0
 8002dec:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8002df0:	481b      	ldr	r0, [pc, #108]	@ (8002e60 <MX_GPIO_Init+0xfc>)
 8002df2:	f000 fdd1 	bl	8003998 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	@ 0x80
 8002dfa:	481a      	ldr	r0, [pc, #104]	@ (8002e64 <MX_GPIO_Init+0x100>)
 8002dfc:	f000 fdcc 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002e00:	231f      	movs	r3, #31
 8002e02:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4813      	ldr	r0, [pc, #76]	@ (8002e60 <MX_GPIO_Init+0xfc>)
 8002e14:	f000 fc24 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8002e18:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8002e1c:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4619      	mov	r1, r3
 8002e30:	480b      	ldr	r0, [pc, #44]	@ (8002e60 <MX_GPIO_Init+0xfc>)
 8002e32:	f000 fc15 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4805      	ldr	r0, [pc, #20]	@ (8002e64 <MX_GPIO_Init+0x100>)
 8002e4e:	f000 fc07 	bl	8003660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e52:	bf00      	nop
 8002e54:	3728      	adds	r7, #40	@ 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40020400 	.word	0x40020400
 8002e64:	40020800 	.word	0x40020800

08002e68 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8002e70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea0 <Led3x6Run+0x38>)
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7a:	6018      	str	r0, [r3, #0]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8002e80:	f7ff fd64 	bl	800294c <SevenSegLEDsScan>
	  osDelay(1);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f002 f96b 	bl	8005160 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	2105      	movs	r1, #5
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fda3 	bl	80029dc <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f002 f962 	bl	8005160 <osDelay>
	  SevenSegLEDsScan();
 8002e9c:	bf00      	nop
 8002e9e:	e7ef      	b.n	8002e80 <Led3x6Run+0x18>
 8002ea0:	080088d8 	.word	0x080088d8

08002ea4 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 8002eac:	f7fe fa10 	bl	80012d0 <KeyLogic>
	 KeyLogic_Action();
 8002eb0:	f7fe fee2 	bl	8001c78 <KeyLogic_Action>
	 osDelay(1);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f002 f953 	bl	8005160 <osDelay>
	 KeyLogic();
 8002eba:	bf00      	nop
 8002ebc:	e7f6      	b.n	8002eac <KeyPad4x5Run+0x8>
	...

08002ec0 <EncoderRun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderRun */
void EncoderRun(void *argument)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderRun */
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f003 fe2b 	bl	8006b28 <ulTaskNotifyTake>
	  	      uint32_t current_value = __HAL_TIM_GET_COUNTER(&htim5);
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <EncoderRun+0x5c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	60fb      	str	r3, [r7, #12]

	  	      if (current_value == last_encoder_value)
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <EncoderRun+0x60>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d110      	bne.n	8002f06 <EncoderRun+0x46>
	  	      {
	  	        stable_count++;
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <EncoderRun+0x64>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <EncoderRun+0x64>)
 8002eec:	6013      	str	r3, [r2, #0]
	  	        if (stable_count >= debounce_threshold)
 8002eee:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <EncoderRun+0x64>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d309      	bcc.n	8002f0c <EncoderRun+0x4c>
	  	        {
	  	          encoder_value = current_value;
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f28 <EncoderRun+0x68>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6013      	str	r3, [r2, #0]
	  	          stable_count = 0;
 8002efe:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <EncoderRun+0x64>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e002      	b.n	8002f0c <EncoderRun+0x4c>
	  	        }
	  	      }
	  	      else
	  	      {
	  	        stable_count = 0;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <EncoderRun+0x64>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
	  	      }
	  	      last_encoder_value = current_value;
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <EncoderRun+0x60>)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6013      	str	r3, [r2, #0]
	  	      osDelay(1);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f002 f924 	bl	8005160 <osDelay>
  {
 8002f18:	e7d6      	b.n	8002ec8 <EncoderRun+0x8>
 8002f1a:	bf00      	nop
 8002f1c:	200001f8 	.word	0x200001f8
 8002f20:	20000254 	.word	0x20000254
 8002f24:	20000258 	.word	0x20000258
 8002f28:	20000080 	.word	0x20000080

08002f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f3e:	f000 fa8d 	bl	800345c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM5) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d114      	bne.n	8002f88 <HAL_TIM_IC_CaptureCallback+0x3c>
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
	    vTaskNotifyGiveFromISR(EncoderTaskHandle, &xHigherPriorityTaskWoken);
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_TIM_IC_CaptureCallback+0x48>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f107 020c 	add.w	r2, r7, #12
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fe27 	bl	8006bc0 <vTaskNotifyGiveFromISR>
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_TIM_IC_CaptureCallback+0x3c>
 8002f78:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8002f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	f3bf 8f6f 	isb	sy
	  }
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	20000248 	.word	0x20000248
 8002f98:	e000ed04 	.word	0xe000ed04

08002f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <Error_Handler+0x8>

08002fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b12      	ldr	r3, [pc, #72]	@ (8002ffc <HAL_MspInit+0x54>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	4a11      	ldr	r2, [pc, #68]	@ (8002ffc <HAL_MspInit+0x54>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <HAL_MspInit+0x54>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <HAL_MspInit+0x54>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <HAL_MspInit+0x54>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_MspInit+0x54>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	210f      	movs	r1, #15
 8002fea:	f06f 0001 	mvn.w	r0, #1
 8002fee:	f000 fb0d 	bl	800360c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08c      	sub	sp, #48	@ 0x30
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a41      	ldr	r2, [pc, #260]	@ (8003124 <HAL_SPI_MspInit+0x124>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12c      	bne.n	800307c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	4b40      	ldr	r3, [pc, #256]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a3f      	ldr	r2, [pc, #252]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 800302c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	4a38      	ldr	r2, [pc, #224]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	@ 0x30
 800304e:	4b36      	ldr	r3, [pc, #216]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800305a:	23a0      	movs	r3, #160	@ 0xa0
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800306a:	2305      	movs	r3, #5
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 031c 	add.w	r3, r7, #28
 8003072:	4619      	mov	r1, r3
 8003074:	482d      	ldr	r0, [pc, #180]	@ (800312c <HAL_SPI_MspInit+0x12c>)
 8003076:	f000 faf3 	bl	8003660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800307a:	e04f      	b.n	800311c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <HAL_SPI_MspInit+0x130>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d14a      	bne.n	800311c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	4a26      	ldr	r2, [pc, #152]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003094:	6413      	str	r3, [r2, #64]	@ 0x40
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a18      	ldr	r2, [pc, #96]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <HAL_SPI_MspInit+0x128>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030da:	2308      	movs	r3, #8
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ea:	2305      	movs	r3, #5
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	480f      	ldr	r0, [pc, #60]	@ (8003134 <HAL_SPI_MspInit+0x134>)
 80030f6:	f000 fab3 	bl	8003660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800310c:	2305      	movs	r3, #5
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	4808      	ldr	r0, [pc, #32]	@ (8003138 <HAL_SPI_MspInit+0x138>)
 8003118:	f000 faa2 	bl	8003660 <HAL_GPIO_Init>
}
 800311c:	bf00      	nop
 800311e:	3730      	adds	r7, #48	@ 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40013000 	.word	0x40013000
 8003128:	40023800 	.word	0x40023800
 800312c:	40020000 	.word	0x40020000
 8003130:	40003800 	.word	0x40003800
 8003134:	40020800 	.word	0x40020800
 8003138:	40020400 	.word	0x40020400

0800313c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	@ 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1d      	ldr	r2, [pc, #116]	@ (80031d0 <HAL_TIM_Encoder_MspInit+0x94>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d133      	bne.n	80031c6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	4a1b      	ldr	r2, [pc, #108]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	6413      	str	r3, [r2, #64]	@ 0x40
 800316e:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	4a14      	ldr	r2, [pc, #80]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6313      	str	r3, [r2, #48]	@ 0x30
 800318a:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <HAL_TIM_Encoder_MspInit+0x98>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003196:	2303      	movs	r3, #3
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031a6:	2302      	movs	r3, #2
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	4809      	ldr	r0, [pc, #36]	@ (80031d8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80031b2:	f000 fa55 	bl	8003660 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2105      	movs	r1, #5
 80031ba:	2032      	movs	r0, #50	@ 0x32
 80031bc:	f000 fa26 	bl	800360c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031c0:	2032      	movs	r0, #50	@ 0x32
 80031c2:	f000 fa3f 	bl	8003644 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	@ 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40020000 	.word	0x40020000

080031dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	@ 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_InitTick+0xe8>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4a33      	ldr	r2, [pc, #204]	@ (80032c4 <HAL_InitTick+0xe8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fc:	4b31      	ldr	r3, [pc, #196]	@ (80032c4 <HAL_InitTick+0xe8>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003208:	f107 0210 	add.w	r2, r7, #16
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f81e 	bl	8004254 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003222:	f001 f803 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8003226:	6378      	str	r0, [r7, #52]	@ 0x34
 8003228:	e004      	b.n	8003234 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800322a:	f000 ffff 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 800322e:	4603      	mov	r3, r0
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <HAL_InitTick+0xec>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	3b01      	subs	r3, #1
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <HAL_InitTick+0xf0>)
 8003244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003248:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_InitTick+0xf0>)
 800324c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003250:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003252:	4a1e      	ldr	r2, [pc, #120]	@ (80032cc <HAL_InitTick+0xf0>)
 8003254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003256:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003258:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_InitTick+0xf0>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325e:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <HAL_InitTick+0xf0>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003264:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_InitTick+0xf0>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800326a:	4818      	ldr	r0, [pc, #96]	@ (80032cc <HAL_InitTick+0xf0>)
 800326c:	f001 fada 	bl	8004824 <HAL_TIM_Base_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003276:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11b      	bne.n	80032b6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800327e:	4813      	ldr	r0, [pc, #76]	@ (80032cc <HAL_InitTick+0xf0>)
 8003280:	f001 fb2a 	bl	80048d8 <HAL_TIM_Base_Start_IT>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800328a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800328e:	2b00      	cmp	r3, #0
 8003290:	d111      	bne.n	80032b6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003292:	201c      	movs	r0, #28
 8003294:	f000 f9d6 	bl	8003644 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	d808      	bhi.n	80032b0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800329e:	2200      	movs	r2, #0
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	201c      	movs	r0, #28
 80032a4:	f000 f9b2 	bl	800360c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032a8:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_InitTick+0xf4>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e002      	b.n	80032b6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3738      	adds	r7, #56	@ 0x38
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	2000025c 	.word	0x2000025c
 80032d0:	20000088 	.word	0x20000088

080032d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <NMI_Handler+0x4>

080032dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <HardFault_Handler+0x4>

080032e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <MemManage_Handler+0x4>

080032ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <BusFault_Handler+0x4>

080032f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <UsageFault_Handler+0x4>

080032fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003310:	4802      	ldr	r0, [pc, #8]	@ (800331c <TIM2_IRQHandler+0x10>)
 8003312:	f001 fbe9 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	2000025c 	.word	0x2000025c

08003320 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003324:	4802      	ldr	r0, [pc, #8]	@ (8003330 <TIM5_IRQHandler+0x10>)
 8003326:	f001 fbdf 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200001f8 	.word	0x200001f8

08003334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800333c:	4a14      	ldr	r2, [pc, #80]	@ (8003390 <_sbrk+0x5c>)
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <_sbrk+0x60>)
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003348:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <_sbrk+0x64>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <_sbrk+0x64>)
 8003352:	4a12      	ldr	r2, [pc, #72]	@ (800339c <_sbrk+0x68>)
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <_sbrk+0x64>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d207      	bcs.n	8003374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003364:	f004 fda2 	bl	8007eac <__errno>
 8003368:	4603      	mov	r3, r0
 800336a:	220c      	movs	r2, #12
 800336c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	e009      	b.n	8003388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003374:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <_sbrk+0x64>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800337a:	4b07      	ldr	r3, [pc, #28]	@ (8003398 <_sbrk+0x64>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <_sbrk+0x64>)
 8003384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003386:	68fb      	ldr	r3, [r7, #12]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20020000 	.word	0x20020000
 8003394:	00000400 	.word	0x00000400
 8003398:	200002a4 	.word	0x200002a4
 800339c:	20004de0 	.word	0x20004de0

080033a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <SystemInit+0x20>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <SystemInit+0x20>)
 80033ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80033c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033c8:	f7ff ffea 	bl	80033a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033cc:	480c      	ldr	r0, [pc, #48]	@ (8003400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033ce:	490d      	ldr	r1, [pc, #52]	@ (8003404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d4:	e002      	b.n	80033dc <LoopCopyDataInit>

080033d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033da:	3304      	adds	r3, #4

080033dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e0:	d3f9      	bcc.n	80033d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e8:	e001      	b.n	80033ee <LoopFillZerobss>

080033ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ec:	3204      	adds	r2, #4

080033ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f0:	d3fb      	bcc.n	80033ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033f2:	f004 fd61 	bl	8007eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033f6:	f7ff fb47 	bl	8002a88 <main>
  bx  lr    
 80033fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003404:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8003408:	080089c0 	.word	0x080089c0
  ldr r2, =_sbss
 800340c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8003410:	20004ddc 	.word	0x20004ddc

08003414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003414:	e7fe      	b.n	8003414 <ADC_IRQHandler>
	...

08003418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800341c:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <HAL_Init+0x40>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0d      	ldr	r2, [pc, #52]	@ (8003458 <HAL_Init+0x40>)
 8003422:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_Init+0x40>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_Init+0x40>)
 800342e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <HAL_Init+0x40>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a07      	ldr	r2, [pc, #28]	@ (8003458 <HAL_Init+0x40>)
 800343a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003440:	2003      	movs	r0, #3
 8003442:	f000 f8d8 	bl	80035f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003446:	200f      	movs	r0, #15
 8003448:	f7ff fec8 	bl	80031dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800344c:	f7ff fdac 	bl	8002fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023c00 	.word	0x40023c00

0800345c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003460:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_IncTick+0x20>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_IncTick+0x24>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4413      	add	r3, r2
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_IncTick+0x24>)
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000008c 	.word	0x2000008c
 8003480:	200002a8 	.word	0x200002a8

08003484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return uwTick;
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_GetTick+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	200002a8 	.word	0x200002a8

0800349c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ce:	4a04      	ldr	r2, [pc, #16]	@ (80034e0 <__NVIC_SetPriorityGrouping+0x44>)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	60d3      	str	r3, [r2, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <__NVIC_GetPriorityGrouping+0x18>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	f003 0307 	and.w	r3, r3, #7
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	2b00      	cmp	r3, #0
 8003510:	db0b      	blt.n	800352a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4907      	ldr	r1, [pc, #28]	@ (8003538 <__NVIC_EnableIRQ+0x38>)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2001      	movs	r0, #1
 8003522:	fa00 f202 	lsl.w	r2, r0, r2
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000e100 	.word	0xe000e100

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	@ (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	@ (800358c <__NVIC_SetPriority+0x50>)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	@ 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	bf28      	it	cs
 80035ae:	2304      	movcs	r3, #4
 80035b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d902      	bls.n	80035c0 <NVIC_EncodePriority+0x30>
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3b03      	subs	r3, #3
 80035be:	e000      	b.n	80035c2 <NVIC_EncodePriority+0x32>
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	401a      	ands	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d8:	f04f 31ff 	mov.w	r1, #4294967295
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43d9      	mvns	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	4313      	orrs	r3, r2
         );
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3724      	adds	r7, #36	@ 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff4c 	bl	800349c <__NVIC_SetPriorityGrouping>
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800361e:	f7ff ff61 	bl	80034e4 <__NVIC_GetPriorityGrouping>
 8003622:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	6978      	ldr	r0, [r7, #20]
 800362a:	f7ff ffb1 	bl	8003590 <NVIC_EncodePriority>
 800362e:	4602      	mov	r2, r0
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff80 	bl	800353c <__NVIC_SetPriority>
}
 800363c:	bf00      	nop
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff54 	bl	8003500 <__NVIC_EnableIRQ>
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e159      	b.n	8003930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	f040 8148 	bne.w	800392a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d130      	bne.n	8003714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0201 	and.w	r2, r3, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b03      	cmp	r3, #3
 800371e:	d017      	beq.n	8003750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d123      	bne.n	80037a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a2 	beq.w	800392a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b57      	ldr	r3, [pc, #348]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a56      	ldr	r2, [pc, #344]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	4b54      	ldr	r3, [pc, #336]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003802:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_GPIO_Init+0x2ec>)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a49      	ldr	r2, [pc, #292]	@ (8003950 <HAL_GPIO_Init+0x2f0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d019      	beq.n	8003862 <HAL_GPIO_Init+0x202>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a48      	ldr	r2, [pc, #288]	@ (8003954 <HAL_GPIO_Init+0x2f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0x1fe>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a47      	ldr	r2, [pc, #284]	@ (8003958 <HAL_GPIO_Init+0x2f8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_GPIO_Init+0x1fa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a46      	ldr	r2, [pc, #280]	@ (800395c <HAL_GPIO_Init+0x2fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a45      	ldr	r2, [pc, #276]	@ (8003960 <HAL_GPIO_Init+0x300>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_GPIO_Init+0x1f2>
 800384e:	2304      	movs	r3, #4
 8003850:	e008      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003852:	2307      	movs	r3, #7
 8003854:	e006      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003856:	2303      	movs	r3, #3
 8003858:	e004      	b.n	8003864 <HAL_GPIO_Init+0x204>
 800385a:	2302      	movs	r3, #2
 800385c:	e002      	b.n	8003864 <HAL_GPIO_Init+0x204>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003862:	2300      	movs	r3, #0
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f002 0203 	and.w	r2, r2, #3
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	4093      	lsls	r3, r2
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003874:	4935      	ldr	r1, [pc, #212]	@ (800394c <HAL_GPIO_Init+0x2ec>)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003882:	4b38      	ldr	r3, [pc, #224]	@ (8003964 <HAL_GPIO_Init+0x304>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d0:	4a24      	ldr	r2, [pc, #144]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d6:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003900:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <HAL_GPIO_Init+0x304>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003924:	4a0f      	ldr	r2, [pc, #60]	@ (8003964 <HAL_GPIO_Init+0x304>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	f67f aea2 	bls.w	800367c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40013800 	.word	0x40013800
 8003950:	40020000 	.word	0x40020000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021000 	.word	0x40021000
 8003964:	40013c00 	.word	0x40013c00

08003968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e001      	b.n	800398a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b4:	e003      	b.n	80039be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e267      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d075      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	4b88      	ldr	r3, [pc, #544]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b85      	ldr	r3, [pc, #532]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b82      	ldr	r3, [pc, #520]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b7e      	ldr	r3, [pc, #504]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x108>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d157      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e242      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x74>
 8003a32:	4b76      	ldr	r3, [pc, #472]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6d      	ldr	r3, [pc, #436]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a64:	4b69      	ldr	r3, [pc, #420]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b66      	ldr	r3, [pc, #408]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a65      	ldr	r2, [pc, #404]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7ff fcfe 	bl	8003484 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7ff fcfa 	bl	8003484 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	@ 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e207      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xc0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7ff fcea 	bl	8003484 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7ff fce6 	bl	8003484 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	@ 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1f3      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b51      	ldr	r3, [pc, #324]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xe8>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b47      	ldr	r3, [pc, #284]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b41      	ldr	r3, [pc, #260]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c7      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4937      	ldr	r1, [pc, #220]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	@ (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7ff fc9f 	bl	8003484 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7ff fc9b 	bl	8003484 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a8      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b28      	ldr	r3, [pc, #160]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4925      	ldr	r1, [pc, #148]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7ff fc7e 	bl	8003484 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7ff fc7a 	bl	8003484 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e187      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7ff fc5e 	bl	8003484 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7ff fc5a 	bl	8003484 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e167      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x200>
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7ff fc47 	bl	8003484 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7ff fc43 	bl	8003484 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e150      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470000 	.word	0x42470000
 8003c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b88      	ldr	r3, [pc, #544]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8097 	beq.w	8003d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c36:	4b81      	ldr	r3, [pc, #516]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b7d      	ldr	r3, [pc, #500]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b7a      	ldr	r3, [pc, #488]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b77      	ldr	r3, [pc, #476]	@ (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b74      	ldr	r3, [pc, #464]	@ (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	@ (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7ff fc03 	bl	8003484 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7ff fbff 	bl	8003484 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b6a      	ldr	r3, [pc, #424]	@ (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2ea>
 8003ca8:	4b64      	ldr	r3, [pc, #400]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	4a63      	ldr	r2, [pc, #396]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x30c>
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cca:	4b5c      	ldr	r3, [pc, #368]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a5b      	ldr	r2, [pc, #364]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cd8:	4b58      	ldr	r3, [pc, #352]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	4a57      	ldr	r2, [pc, #348]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce4:	4b55      	ldr	r3, [pc, #340]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	4a54      	ldr	r2, [pc, #336]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7ff fbc4 	bl	8003484 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7ff fbc0 	bl	8003484 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0cb      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7ff fbae 	bl	8003484 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7ff fbaa 	bl	8003484 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0b5      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	4b3e      	ldr	r3, [pc, #248]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b39      	ldr	r3, [pc, #228]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	4a38      	ldr	r2, [pc, #224]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a1 	beq.w	8003eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6a:	4b34      	ldr	r3, [pc, #208]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d05c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d141      	bne.n	8003e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b31      	ldr	r3, [pc, #196]	@ (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7ff fb7e 	bl	8003484 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7ff fb7a 	bl	8003484 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e087      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b27      	ldr	r3, [pc, #156]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	491b      	ldr	r1, [pc, #108]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7ff fb53 	bl	8003484 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7ff fb4f 	bl	8003484 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e05c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x416>
 8003e00:	e054      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7ff fb3c 	bl	8003484 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7ff fb38 	bl	8003484 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e045      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e038      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d121      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7ff fa6a 	bl	8003484 <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7ff fa66 	bl	8003484 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	@ (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff f8ba 	bl	80031dc <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	08008964 	.word	0x08008964
 8004080:	20000084 	.word	0x20000084
 8004084:	20000088 	.word	0x20000088

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b090      	sub	sp, #64	@ 0x40
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004098:	2300      	movs	r3, #0
 800409a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80a1 	bhi.w	80041f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e09b      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b53      	ldr	r3, [pc, #332]	@ (800420c <HAL_RCC_GetSysClockFreq+0x184>)
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80040c0:	e09b      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040c6:	e098      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d028      	beq.n	8004130 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040f0:	2100      	movs	r1, #0
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 80040f4:	fb03 f201 	mul.w	r2, r3, r1
 80040f8:	2300      	movs	r3, #0
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	4413      	add	r3, r2
 8004100:	4a43      	ldr	r2, [pc, #268]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x188>)
 8004102:	fba0 1202 	umull	r1, r2, r0, r2
 8004106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004108:	460a      	mov	r2, r1
 800410a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800410c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800410e:	4413      	add	r3, r2
 8004110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004114:	2200      	movs	r2, #0
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004122:	f7fc fcd3 	bl	8000acc <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4613      	mov	r3, r2
 800412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800412e:	e053      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004130:	4b35      	ldr	r3, [pc, #212]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	2200      	movs	r2, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	617a      	str	r2, [r7, #20]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004142:	f04f 0b00 	mov.w	fp, #0
 8004146:	4652      	mov	r2, sl
 8004148:	465b      	mov	r3, fp
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004158:	0150      	lsls	r0, r2, #5
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	ebb2 080a 	subs.w	r8, r2, sl
 8004162:	eb63 090b 	sbc.w	r9, r3, fp
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004172:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004176:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800417a:	ebb2 0408 	subs.w	r4, r2, r8
 800417e:	eb63 0509 	sbc.w	r5, r3, r9
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	00eb      	lsls	r3, r5, #3
 800418c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004190:	00e2      	lsls	r2, r4, #3
 8004192:	4614      	mov	r4, r2
 8004194:	461d      	mov	r5, r3
 8004196:	eb14 030a 	adds.w	r3, r4, sl
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	eb45 030b 	adc.w	r3, r5, fp
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ae:	4629      	mov	r1, r5
 80041b0:	028b      	lsls	r3, r1, #10
 80041b2:	4621      	mov	r1, r4
 80041b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b8:	4621      	mov	r1, r4
 80041ba:	028a      	lsls	r2, r1, #10
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c2:	2200      	movs	r2, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	60fa      	str	r2, [r7, #12]
 80041c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041cc:	f7fc fc7e 	bl	8000acc <__aeabi_uldivmod>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4613      	mov	r3, r2
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x180>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0c1b      	lsrs	r3, r3, #16
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041f2:	e002      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RCC_GetSysClockFreq+0x184>)
 80041f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3740      	adds	r7, #64	@ 0x40
 8004200:	46bd      	mov	sp, r7
 8004202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400
 8004210:	017d7840 	.word	0x017d7840

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	@ (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000084 	.word	0x20000084

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	@ (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	@ (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	08008974 	.word	0x08008974

08004254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	220f      	movs	r2, #15
 8004262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004270:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004296:	4b07      	ldr	r3, [pc, #28]	@ (80042b4 <HAL_RCC_GetClockConfig+0x60>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40023c00 	.word	0x40023c00

080042b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07b      	b.n	80043c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d108      	bne.n	80042e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042da:	d009      	beq.n	80042f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
 80042e2:	e005      	b.n	80042f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe fe78 	bl	8003000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	ea42 0103 	orr.w	r1, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0104 	and.w	r1, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	f003 0210 	and.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_SPI_Transmit+0x22>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e12d      	b.n	8004648 <HAL_SPI_Transmit+0x27e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f4:	f7ff f846 	bl	8003484 <HAL_GetTick>
 80043f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800440a:	2302      	movs	r3, #2
 800440c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800440e:	e116      	b.n	800463e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_SPI_Transmit+0x52>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004420:	e10d      	b.n	800463e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004468:	d10f      	bne.n	800448a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004478:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004488:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b40      	cmp	r3, #64	@ 0x40
 8004496:	d007      	beq.n	80044a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b0:	d14f      	bne.n	8004552 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_SPI_Transmit+0xf6>
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d142      	bne.n	8004546 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	1c9a      	adds	r2, r3, #2
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e4:	e02f      	b.n	8004546 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d112      	bne.n	800451a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004518:	e015      	b.n	8004546 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800451a:	f7fe ffb3 	bl	8003484 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d803      	bhi.n	8004532 <HAL_SPI_Transmit+0x168>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Transmit+0x16e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004544:	e07b      	b.n	800463e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ca      	bne.n	80044e6 <HAL_SPI_Transmit+0x11c>
 8004550:	e050      	b.n	80045f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_SPI_Transmit+0x196>
 800455a:	8afb      	ldrh	r3, [r7, #22]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d144      	bne.n	80045ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004586:	e030      	b.n	80045ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d113      	bne.n	80045be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045bc:	e015      	b.n	80045ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045be:	f7fe ff61 	bl	8003484 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d803      	bhi.n	80045d6 <HAL_SPI_Transmit+0x20c>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d102      	bne.n	80045dc <HAL_SPI_Transmit+0x212>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80045e8:	e029      	b.n	800463e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1c9      	bne.n	8004588 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f8bf 	bl	800477c <SPI_EndRxTxTransaction>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e003      	b.n	800463e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004646:	7ffb      	ldrb	r3, [r7, #31]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800465e:	b2db      	uxtb	r3, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800467c:	f7fe ff02 	bl	8003484 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4413      	add	r3, r2
 800468a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800468c:	f7fe fefa 	bl	8003484 <HAL_GetTick>
 8004690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004692:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	015b      	lsls	r3, r3, #5
 8004698:	0d1b      	lsrs	r3, r3, #20
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a2:	e054      	b.n	800474e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d050      	beq.n	800474e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ac:	f7fe feea 	bl	8003484 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d902      	bls.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d13d      	bne.n	800473e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046da:	d111      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e4:	d004      	beq.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ee:	d107      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004708:	d10f      	bne.n	800472a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e017      	b.n	800476e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3b01      	subs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d19b      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000084 	.word	0x20000084

0800477c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2201      	movs	r2, #1
 8004790:	2102      	movs	r1, #2
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff ff6a 	bl	800466c <SPI_WaitFlagStateUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e032      	b.n	8004814 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047ae:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <SPI_EndRxTxTransaction+0xa0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <SPI_EndRxTxTransaction+0xa4>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	0d5b      	lsrs	r3, r3, #21
 80047ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047cc:	d112      	bne.n	80047f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	@ 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff ff47 	bl	800466c <SPI_WaitFlagStateUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d016      	beq.n	8004812 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e00f      	b.n	8004814 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b80      	cmp	r3, #128	@ 0x80
 800480c:	d0f2      	beq.n	80047f4 <SPI_EndRxTxTransaction+0x78>
 800480e:	e000      	b.n	8004812 <SPI_EndRxTxTransaction+0x96>
        break;
 8004810:	bf00      	nop
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20000084 	.word	0x20000084
 8004820:	165e9f81 	.word	0x165e9f81

08004824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e041      	b.n	80048ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f839 	bl	80048c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f000 fa4e 	bl	8004d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e044      	b.n	800497a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_TIM_Base_Start_IT+0xb0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491a:	d013      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1a      	ldr	r2, [pc, #104]	@ (800498c <HAL_TIM_Base_Start_IT+0xb4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a19      	ldr	r2, [pc, #100]	@ (8004990 <HAL_TIM_Base_Start_IT+0xb8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a17      	ldr	r2, [pc, #92]	@ (8004994 <HAL_TIM_Base_Start_IT+0xbc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x6c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a16      	ldr	r2, [pc, #88]	@ (8004998 <HAL_TIM_Base_Start_IT+0xc0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d111      	bne.n	8004968 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d010      	beq.n	8004978 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004966:	e007      	b.n	8004978 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40010000 	.word	0x40010000
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40014000 	.word	0x40014000

0800499c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e097      	b.n	8004ae0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fe fbb9 	bl	800313c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 f987 	bl	8004d04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a3c:	f023 030c 	bic.w	r3, r3, #12
 8004a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	031b      	lsls	r3, r3, #12
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0202 	mvn.w	r2, #2
 8004b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fe fa0a 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8c4 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8cb 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0204 	mvn.w	r2, #4
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fe f9e4 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f89e 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f8a5 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d020      	beq.n	8004be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01b      	beq.n	8004be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0208 	mvn.w	r2, #8
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fe f9be 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f878 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f87f 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d020      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01b      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0210 	mvn.w	r2, #16
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2208      	movs	r2, #8
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe f998 	bl	8002f4c <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f852 	bl	8004cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f859 	bl	8004cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00c      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0201 	mvn.w	r2, #1
 8004c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe f96c 	bl	8002f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f94a 	bl	8004f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f82a 	bl	8004cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0220 	mvn.w	r2, #32
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f91c 	bl	8004ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3a      	ldr	r2, [pc, #232]	@ (8004e00 <TIM_Base_SetConfig+0xfc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00f      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d22:	d00b      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a37      	ldr	r2, [pc, #220]	@ (8004e04 <TIM_Base_SetConfig+0x100>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d007      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a36      	ldr	r2, [pc, #216]	@ (8004e08 <TIM_Base_SetConfig+0x104>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a35      	ldr	r2, [pc, #212]	@ (8004e0c <TIM_Base_SetConfig+0x108>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d108      	bne.n	8004d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2b      	ldr	r2, [pc, #172]	@ (8004e00 <TIM_Base_SetConfig+0xfc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01b      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d5c:	d017      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a28      	ldr	r2, [pc, #160]	@ (8004e04 <TIM_Base_SetConfig+0x100>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a27      	ldr	r2, [pc, #156]	@ (8004e08 <TIM_Base_SetConfig+0x104>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00f      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a26      	ldr	r2, [pc, #152]	@ (8004e0c <TIM_Base_SetConfig+0x108>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a25      	ldr	r2, [pc, #148]	@ (8004e10 <TIM_Base_SetConfig+0x10c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a24      	ldr	r2, [pc, #144]	@ (8004e14 <TIM_Base_SetConfig+0x110>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a23      	ldr	r2, [pc, #140]	@ (8004e18 <TIM_Base_SetConfig+0x114>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e00 <TIM_Base_SetConfig+0xfc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	611a      	str	r2, [r3, #16]
  }
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e050      	b.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d013      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a18      	ldr	r2, [pc, #96]	@ (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a13      	ldr	r2, [pc, #76]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40014000 	.word	0x40014000

08004ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <__NVIC_SetPriority>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	db0a      	blt.n	8004f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	490c      	ldr	r1, [pc, #48]	@ (8004f6c <__NVIC_SetPriority+0x4c>)
 8004f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3e:	0112      	lsls	r2, r2, #4
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	440b      	add	r3, r1
 8004f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f48:	e00a      	b.n	8004f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4908      	ldr	r1, [pc, #32]	@ (8004f70 <__NVIC_SetPriority+0x50>)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	3b04      	subs	r3, #4
 8004f58:	0112      	lsls	r2, r2, #4
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	761a      	strb	r2, [r3, #24]
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000e100 	.word	0xe000e100
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f78:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <SysTick_Handler+0x1c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f7c:	f001 fd46 	bl	8006a0c <xTaskGetSchedulerState>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f86:	f002 fc7f 	bl	8007888 <xPortSysTickHandler>
  }
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	e000e010 	.word	0xe000e010

08004f94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f06f 0004 	mvn.w	r0, #4
 8004f9e:	f7ff ffbf 	bl	8004f20 <__NVIC_SetPriority>
#endif
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fae:	f3ef 8305 	mrs	r3, IPSR
 8004fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fba:	f06f 0305 	mvn.w	r3, #5
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e00c      	b.n	8004fdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <osKernelInitialize+0x44>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fca:	4b08      	ldr	r3, [pc, #32]	@ (8004fec <osKernelInitialize+0x44>)
 8004fcc:	2201      	movs	r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	e002      	b.n	8004fdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fdc:	687b      	ldr	r3, [r7, #4]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	200002ac 	.word	0x200002ac

08004ff0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff6:	f3ef 8305 	mrs	r3, IPSR
 8004ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8004ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005002:	f06f 0305 	mvn.w	r3, #5
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	e010      	b.n	800502c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800500a:	4b0b      	ldr	r3, [pc, #44]	@ (8005038 <osKernelStart+0x48>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d109      	bne.n	8005026 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005012:	f7ff ffbf 	bl	8004f94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005016:	4b08      	ldr	r3, [pc, #32]	@ (8005038 <osKernelStart+0x48>)
 8005018:	2202      	movs	r2, #2
 800501a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800501c:	f001 f892 	bl	8006144 <vTaskStartScheduler>
      stat = osOK;
 8005020:	2300      	movs	r3, #0
 8005022:	607b      	str	r3, [r7, #4]
 8005024:	e002      	b.n	800502c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800502c:	687b      	ldr	r3, [r7, #4]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200002ac 	.word	0x200002ac

0800503c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	@ 0x38
 8005040:	af04      	add	r7, sp, #16
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504c:	f3ef 8305 	mrs	r3, IPSR
 8005050:	617b      	str	r3, [r7, #20]
  return(result);
 8005052:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005054:	2b00      	cmp	r3, #0
 8005056:	d17e      	bne.n	8005156 <osThreadNew+0x11a>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d07b      	beq.n	8005156 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005062:	2318      	movs	r3, #24
 8005064:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
 800506e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d045      	beq.n	8005102 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <osThreadNew+0x48>
        name = attr->name;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <osThreadNew+0x6e>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b38      	cmp	r3, #56	@ 0x38
 800509c:	d805      	bhi.n	80050aa <osThreadNew+0x6e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <osThreadNew+0x72>
        return (NULL);
 80050aa:	2300      	movs	r3, #0
 80050ac:	e054      	b.n	8005158 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00e      	beq.n	80050e4 <osThreadNew+0xa8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2ba7      	cmp	r3, #167	@ 0xa7
 80050cc:	d90a      	bls.n	80050e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <osThreadNew+0xa8>
        mem = 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e010      	b.n	8005106 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <osThreadNew+0xca>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d108      	bne.n	8005106 <osThreadNew+0xca>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <osThreadNew+0xca>
          mem = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	e001      	b.n	8005106 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d110      	bne.n	800512e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005114:	9202      	str	r2, [sp, #8]
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fe1a 	bl	8005d5c <xTaskCreateStatic>
 8005128:	4603      	mov	r3, r0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e013      	b.n	8005156 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	b29a      	uxth	r2, r3
 8005138:	f107 0310 	add.w	r3, r7, #16
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 fe68 	bl	8005e1c <xTaskCreate>
 800514c:	4603      	mov	r3, r0
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <osThreadNew+0x11a>
            hTask = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005156:	693b      	ldr	r3, [r7, #16]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3728      	adds	r7, #40	@ 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005168:	f3ef 8305 	mrs	r3, IPSR
 800516c:	60bb      	str	r3, [r7, #8]
  return(result);
 800516e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <osDelay+0x1c>
    stat = osErrorISR;
 8005174:	f06f 0305 	mvn.w	r3, #5
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e007      	b.n	800518c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 ffa6 	bl	80060d8 <vTaskDelay>
    }
  }

  return (stat);
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a07      	ldr	r2, [pc, #28]	@ (80051c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80051a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4a06      	ldr	r2, [pc, #24]	@ (80051c8 <vApplicationGetIdleTaskMemory+0x30>)
 80051ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2280      	movs	r2, #128	@ 0x80
 80051b4:	601a      	str	r2, [r3, #0]
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	200002b0 	.word	0x200002b0
 80051c8:	20000358 	.word	0x20000358

080051cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a07      	ldr	r2, [pc, #28]	@ (80051f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80051dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a06      	ldr	r2, [pc, #24]	@ (80051fc <vApplicationGetTimerTaskMemory+0x30>)
 80051e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051ea:	601a      	str	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000558 	.word	0x20000558
 80051fc:	20000600 	.word	0x20000600

08005200 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f103 0208 	add.w	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f04f 32ff 	mov.w	r2, #4294967295
 8005218:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f103 0208 	add.w	r2, r3, #8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f103 0208 	add.w	r2, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d103      	bne.n	80052c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e00c      	b.n	80052dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3308      	adds	r3, #8
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e002      	b.n	80052d0 <vListInsert+0x2e>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d2f6      	bcs.n	80052ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6852      	ldr	r2, [r2, #4]
 8005334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	d103      	bne.n	8005348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	e7fd      	b.n	8005390 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005394:	f002 f9e8 	bl	8007768 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c4:	3b01      	subs	r3, #1
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	22ff      	movs	r2, #255	@ 0xff
 80053d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	22ff      	movs	r2, #255	@ 0xff
 80053e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d114      	bne.n	8005414 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3310      	adds	r3, #16
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 f942 	bl	8006680 <xTaskRemoveFromEventList>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d012      	beq.n	8005428 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005402:	4b0d      	ldr	r3, [pc, #52]	@ (8005438 <xQueueGenericReset+0xd0>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	e009      	b.n	8005428 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3310      	adds	r3, #16
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fef1 	bl	8005200 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3324      	adds	r3, #36	@ 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff feec 	bl	8005200 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005428:	f002 f9d0 	bl	80077cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800542c:	2301      	movs	r3, #1
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	@ 0x38
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	e7fd      	b.n	8005482 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <xQueueGenericCreateStatic+0x56>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <xQueueGenericCreateStatic+0x5a>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueGenericCreateStatic+0x5c>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10b      	bne.n	80054b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	623b      	str	r3, [r7, #32]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <xQueueGenericCreateStatic+0x84>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <xQueueGenericCreateStatic+0x88>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <xQueueGenericCreateStatic+0x8a>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61fb      	str	r3, [r7, #28]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054e2:	2350      	movs	r3, #80	@ 0x50
 80054e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b50      	cmp	r3, #80	@ 0x50
 80054ea:	d00b      	beq.n	8005504 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61bb      	str	r3, [r7, #24]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005504:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800550a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005518:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f805 	bl	8005536 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800552e:	4618      	mov	r0, r3
 8005530:	3730      	adds	r7, #48	@ 0x30
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e002      	b.n	8005558 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005564:	2101      	movs	r1, #1
 8005566:	69b8      	ldr	r0, [r7, #24]
 8005568:	f7ff fefe 	bl	8005368 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08e      	sub	sp, #56	@ 0x38
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800558a:	2300      	movs	r3, #0
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <xQueueGenericSend+0x34>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
 80055ae:	e7fd      	b.n	80055ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <xQueueGenericSend+0x42>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <xQueueGenericSend+0x46>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericSend+0x48>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <xQueueGenericSend+0x64>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSend+0x72>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <xQueueGenericSend+0x76>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericSend+0x78>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <xQueueGenericSend+0x94>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	623b      	str	r3, [r7, #32]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005610:	f001 f9fc 	bl	8006a0c <xTaskGetSchedulerState>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <xQueueGenericSend+0xa4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <xQueueGenericSend+0xa8>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <xQueueGenericSend+0xaa>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <xQueueGenericSend+0xc6>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	61fb      	str	r3, [r7, #28]
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	e7fd      	b.n	800563e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005642:	f002 f891 	bl	8007768 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <xQueueGenericSend+0xdc>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d129      	bne.n	80056ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800565e:	f000 fa0f 	bl	8005a80 <prvCopyDataToQueue>
 8005662:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d010      	beq.n	800568e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	3324      	adds	r3, #36	@ 0x24
 8005670:	4618      	mov	r0, r3
 8005672:	f001 f805 	bl	8006680 <xTaskRemoveFromEventList>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d013      	beq.n	80056a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800567c:	4b3f      	ldr	r3, [pc, #252]	@ (800577c <xQueueGenericSend+0x200>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	e00a      	b.n	80056a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005694:	4b39      	ldr	r3, [pc, #228]	@ (800577c <xQueueGenericSend+0x200>)
 8005696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056a4:	f002 f892 	bl	80077cc <vPortExitCritical>
				return pdPASS;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e063      	b.n	8005774 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056b2:	f002 f88b 	bl	80077cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e05c      	b.n	8005774 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 f83f 	bl	8006748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056ce:	f002 f87d 	bl	80077cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056d2:	f000 fda7 	bl	8006224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056d6:	f002 f847 	bl	8007768 <vPortEnterCritical>
 80056da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d103      	bne.n	80056f0 <xQueueGenericSend+0x174>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056f6:	b25b      	sxtb	r3, r3
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d103      	bne.n	8005706 <xQueueGenericSend+0x18a>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005706:	f002 f861 	bl	80077cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800570a:	1d3a      	adds	r2, r7, #4
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f001 f82e 	bl	8006774 <xTaskCheckForTimeOut>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d124      	bne.n	8005768 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800571e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005720:	f000 faa6 	bl	8005c70 <prvIsQueueFull>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	3310      	adds	r3, #16
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4611      	mov	r1, r2
 8005732:	4618      	mov	r0, r3
 8005734:	f000 ff52 	bl	80065dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800573a:	f000 fa31 	bl	8005ba0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800573e:	f000 fd7f 	bl	8006240 <xTaskResumeAll>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	f47f af7c 	bne.w	8005642 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800574a:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <xQueueGenericSend+0x200>)
 800574c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	e772      	b.n	8005642 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800575c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800575e:	f000 fa1f 	bl	8005ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005762:	f000 fd6d 	bl	8006240 <xTaskResumeAll>
 8005766:	e76c      	b.n	8005642 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800576a:	f000 fa19 	bl	8005ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800576e:	f000 fd67 	bl	8006240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005772:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005774:	4618      	mov	r0, r3
 8005776:	3738      	adds	r7, #56	@ 0x38
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b090      	sub	sp, #64	@ 0x40
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <xQueueGenericSendFromISR+0x3e>
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <xQueueGenericSendFromISR+0x42>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <xQueueGenericSendFromISR+0x44>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10b      	bne.n	80057e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	e7fd      	b.n	80057dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d103      	bne.n	80057ee <xQueueGenericSendFromISR+0x6e>
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <xQueueGenericSendFromISR+0x72>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueGenericSendFromISR+0x74>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	623b      	str	r3, [r7, #32]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005810:	f002 f88a 	bl	8007928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005814:	f3ef 8211 	mrs	r2, BASEPRI
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800582c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <xQueueGenericSendFromISR+0xc2>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d12f      	bne.n	80058a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005858:	f000 f912 	bl	8005a80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800585c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d112      	bne.n	800588c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	3324      	adds	r3, #36	@ 0x24
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff04 	bl	8006680 <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e007      	b.n	800589c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800588c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005890:	3301      	adds	r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	b25a      	sxtb	r2, r3
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80058a0:	e001      	b.n	80058a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3740      	adds	r7, #64	@ 0x40
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	@ 0x30
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <xQueueReceive+0x32>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	623b      	str	r3, [r7, #32]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <xQueueReceive+0x40>
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <xQueueReceive+0x44>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <xQueueReceive+0x46>
 8005900:	2300      	movs	r3, #0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <xQueueReceive+0x62>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	61fb      	str	r3, [r7, #28]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800591e:	f001 f875 	bl	8006a0c <xTaskGetSchedulerState>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <xQueueReceive+0x72>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <xQueueReceive+0x76>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <xQueueReceive+0x78>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <xQueueReceive+0x94>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	61bb      	str	r3, [r7, #24]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005950:	f001 ff0a 	bl	8007768 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01f      	beq.n	80059a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005964:	f000 f8f6 	bl	8005b54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	1e5a      	subs	r2, r3, #1
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00f      	beq.n	8005998 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	3310      	adds	r3, #16
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fe7f 	bl	8006680 <xTaskRemoveFromEventList>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005988:	4b3c      	ldr	r3, [pc, #240]	@ (8005a7c <xQueueReceive+0x1c0>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005998:	f001 ff18 	bl	80077cc <vPortExitCritical>
				return pdPASS;
 800599c:	2301      	movs	r3, #1
 800599e:	e069      	b.n	8005a74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d103      	bne.n	80059ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059a6:	f001 ff11 	bl	80077cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e062      	b.n	8005a74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059b4:	f107 0310 	add.w	r3, r7, #16
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fec5 	bl	8006748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059c2:	f001 ff03 	bl	80077cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059c6:	f000 fc2d 	bl	8006224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ca:	f001 fecd 	bl	8007768 <vPortEnterCritical>
 80059ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d103      	bne.n	80059e4 <xQueueReceive+0x128>
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059ea:	b25b      	sxtb	r3, r3
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d103      	bne.n	80059fa <xQueueReceive+0x13e>
 80059f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059fa:	f001 fee7 	bl	80077cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059fe:	1d3a      	adds	r2, r7, #4
 8005a00:	f107 0310 	add.w	r3, r7, #16
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 feb4 	bl	8006774 <xTaskCheckForTimeOut>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d123      	bne.n	8005a5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a14:	f000 f916 	bl	8005c44 <prvIsQueueEmpty>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d017      	beq.n	8005a4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	3324      	adds	r3, #36	@ 0x24
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fdd8 	bl	80065dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a2e:	f000 f8b7 	bl	8005ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a32:	f000 fc05 	bl	8006240 <xTaskResumeAll>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d189      	bne.n	8005950 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a7c <xQueueReceive+0x1c0>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	e780      	b.n	8005950 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a50:	f000 f8a6 	bl	8005ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a54:	f000 fbf4 	bl	8006240 <xTaskResumeAll>
 8005a58:	e77a      	b.n	8005950 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a5c:	f000 f8a0 	bl	8005ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a60:	f000 fbee 	bl	8006240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a66:	f000 f8ed 	bl	8005c44 <prvIsQueueEmpty>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f43f af6f 	beq.w	8005950 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	@ 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10d      	bne.n	8005aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d14d      	bne.n	8005b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 ffcc 	bl	8006a48 <xTaskPriorityDisinherit>
 8005ab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	e043      	b.n	8005b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d119      	bne.n	8005af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6858      	ldr	r0, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	f002 fa1a 	bl	8007f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	441a      	add	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d32b      	bcc.n	8005b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	e026      	b.n	8005b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68d8      	ldr	r0, [r3, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	461a      	mov	r2, r3
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	f002 fa00 	bl	8007f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	425b      	negs	r3, r3
 8005b0e:	441a      	add	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d207      	bcs.n	8005b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	425b      	negs	r3, r3
 8005b2a:	441a      	add	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d105      	bne.n	8005b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b4a:	697b      	ldr	r3, [r7, #20]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d018      	beq.n	8005b98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	441a      	add	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d303      	bcc.n	8005b88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68d9      	ldr	r1, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b90:	461a      	mov	r2, r3
 8005b92:	6838      	ldr	r0, [r7, #0]
 8005b94:	f002 f9b6 	bl	8007f04 <memcpy>
	}
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ba8:	f001 fdde 	bl	8007768 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bb4:	e011      	b.n	8005bda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3324      	adds	r3, #36	@ 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fd5c 	bl	8006680 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bce:	f000 fe35 	bl	800683c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dce9      	bgt.n	8005bb6 <prvUnlockQueue+0x16>
 8005be2:	e000      	b.n	8005be6 <prvUnlockQueue+0x46>
					break;
 8005be4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	22ff      	movs	r2, #255	@ 0xff
 8005bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005bee:	f001 fded 	bl	80077cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bf2:	f001 fdb9 	bl	8007768 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bfe:	e011      	b.n	8005c24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d012      	beq.n	8005c2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3310      	adds	r3, #16
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fd37 	bl	8006680 <xTaskRemoveFromEventList>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c18:	f000 fe10 	bl	800683c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dce9      	bgt.n	8005c00 <prvUnlockQueue+0x60>
 8005c2c:	e000      	b.n	8005c30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	22ff      	movs	r2, #255	@ 0xff
 8005c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005c38:	f001 fdc8 	bl	80077cc <vPortExitCritical>
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c4c:	f001 fd8c 	bl	8007768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e001      	b.n	8005c62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c62:	f001 fdb3 	bl	80077cc <vPortExitCritical>

	return xReturn;
 8005c66:	68fb      	ldr	r3, [r7, #12]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c78:	f001 fd76 	bl	8007768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d102      	bne.n	8005c8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	e001      	b.n	8005c92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c92:	f001 fd9b 	bl	80077cc <vPortExitCritical>

	return xReturn;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	e014      	b.n	8005cda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8005cf0 <vQueueAddToRegistry+0x50>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cbc:	490c      	ldr	r1, [pc, #48]	@ (8005cf0 <vQueueAddToRegistry+0x50>)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005cf0 <vQueueAddToRegistry+0x50>)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4413      	add	r3, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cd2:	e006      	b.n	8005ce2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b07      	cmp	r3, #7
 8005cde:	d9e7      	bls.n	8005cb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000a00 	.word	0x20000a00

08005cf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d04:	f001 fd30 	bl	8007768 <vPortEnterCritical>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d0e:	b25b      	sxtb	r3, r3
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d103      	bne.n	8005d1e <vQueueWaitForMessageRestricted+0x2a>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d24:	b25b      	sxtb	r3, r3
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d103      	bne.n	8005d34 <vQueueWaitForMessageRestricted+0x40>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d34:	f001 fd4a 	bl	80077cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	3324      	adds	r3, #36	@ 0x24
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fc6d 	bl	8006628 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d4e:	6978      	ldr	r0, [r7, #20]
 8005d50:	f7ff ff26 	bl	8005ba0 <prvUnlockQueue>
	}
 8005d54:	bf00      	nop
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	@ 0x38
 8005d60:	af04      	add	r7, sp, #16
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	623b      	str	r3, [r7, #32]
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10b      	bne.n	8005da6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61fb      	str	r3, [r7, #28]
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005da6:	23a8      	movs	r3, #168	@ 0xa8
 8005da8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2ba8      	cmp	r3, #168	@ 0xa8
 8005dae:	d00b      	beq.n	8005dc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61bb      	str	r3, [r7, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01e      	beq.n	8005e0e <xTaskCreateStatic+0xb2>
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01b      	beq.n	8005e0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dde:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005de8:	2300      	movs	r3, #0
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	9302      	str	r3, [sp, #8]
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f851 	bl	8005ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e08:	f000 f8f6 	bl	8005ff8 <prvAddNewTaskToReadyList>
 8005e0c:	e001      	b.n	8005e12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e12:	697b      	ldr	r3, [r7, #20]
	}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	@ 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	@ 0x30
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e2c:	88fb      	ldrh	r3, [r7, #6]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fdbb 	bl	80079ac <pvPortMalloc>
 8005e36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00e      	beq.n	8005e5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e3e:	20a8      	movs	r0, #168	@ 0xa8
 8005e40:	f001 fdb4 	bl	80079ac <pvPortMalloc>
 8005e44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e52:	e005      	b.n	8005e60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e54:	6978      	ldr	r0, [r7, #20]
 8005e56:	f001 fe77 	bl	8007b48 <vPortFree>
 8005e5a:	e001      	b.n	8005e60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d017      	beq.n	8005e96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	2300      	movs	r3, #0
 8005e72:	9303      	str	r3, [sp, #12]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	9302      	str	r3, [sp, #8]
 8005e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f80f 	bl	8005ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e8a:	69f8      	ldr	r0, [r7, #28]
 8005e8c:	f000 f8b4 	bl	8005ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e90:	2301      	movs	r3, #1
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	e002      	b.n	8005e9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
	}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	21a5      	movs	r1, #165	@ 0xa5
 8005ec2:	f001 ff95 	bl	8007df0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	617b      	str	r3, [r7, #20]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01f      	beq.n	8005f48 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e012      	b.n	8005f34 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3334      	adds	r3, #52	@ 0x34
 8005f1e:	460a      	mov	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d9e9      	bls.n	8005f0e <prvInitialiseNewTask+0x66>
 8005f3a:	e000      	b.n	8005f3e <prvInitialiseNewTask+0x96>
			{
				break;
 8005f3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f46:	e003      	b.n	8005f50 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	2b37      	cmp	r3, #55	@ 0x37
 8005f54:	d901      	bls.n	8005f5a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f56:	2337      	movs	r3, #55	@ 0x37
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	2200      	movs	r2, #0
 8005f6a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	3304      	adds	r3, #4
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff f965 	bl	8005240 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff f960 	bl	8005240 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa8:	3354      	adds	r3, #84	@ 0x54
 8005faa:	224c      	movs	r2, #76	@ 0x4c
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 ff1e 	bl	8007df0 <memset>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8005fec <prvInitialiseNewTask+0x144>)
 8005fb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff0 <prvInitialiseNewTask+0x148>)
 8005fbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff4 <prvInitialiseNewTask+0x14c>)
 8005fc4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	69b8      	ldr	r0, [r7, #24]
 8005fcc:	f001 fa9a 	bl	8007504 <pxPortInitialiseStack>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe2:	bf00      	nop
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20004c94 	.word	0x20004c94
 8005ff0:	20004cfc 	.word	0x20004cfc
 8005ff4:	20004d64 	.word	0x20004d64

08005ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006000:	f001 fbb2 	bl	8007768 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006004:	4b2d      	ldr	r3, [pc, #180]	@ (80060bc <prvAddNewTaskToReadyList+0xc4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a2c      	ldr	r2, [pc, #176]	@ (80060bc <prvAddNewTaskToReadyList+0xc4>)
 800600c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800600e:	4b2c      	ldr	r3, [pc, #176]	@ (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006016:	4a2a      	ldr	r2, [pc, #168]	@ (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800601c:	4b27      	ldr	r3, [pc, #156]	@ (80060bc <prvAddNewTaskToReadyList+0xc4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d110      	bne.n	8006046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006024:	f000 fc2e 	bl	8006884 <prvInitialiseTaskLists>
 8006028:	e00d      	b.n	8006046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800602a:	4b26      	ldr	r3, [pc, #152]	@ (80060c4 <prvAddNewTaskToReadyList+0xcc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006032:	4b23      	ldr	r3, [pc, #140]	@ (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	429a      	cmp	r2, r3
 800603e:	d802      	bhi.n	8006046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006040:	4a1f      	ldr	r2, [pc, #124]	@ (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <prvAddNewTaskToReadyList+0xd0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	4a1e      	ldr	r2, [pc, #120]	@ (80060c8 <prvAddNewTaskToReadyList+0xd0>)
 800604e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006050:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <prvAddNewTaskToReadyList+0xd0>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605c:	4b1b      	ldr	r3, [pc, #108]	@ (80060cc <prvAddNewTaskToReadyList+0xd4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d903      	bls.n	800606c <prvAddNewTaskToReadyList+0x74>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006068:	4a18      	ldr	r2, [pc, #96]	@ (80060cc <prvAddNewTaskToReadyList+0xd4>)
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4a15      	ldr	r2, [pc, #84]	@ (80060d0 <prvAddNewTaskToReadyList+0xd8>)
 800607a:	441a      	add	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7ff f8e9 	bl	800525a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006088:	f001 fba0 	bl	80077cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800608c:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <prvAddNewTaskToReadyList+0xcc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006094:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <prvAddNewTaskToReadyList+0xc8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d207      	bcs.n	80060b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060a2:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <prvAddNewTaskToReadyList+0xdc>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000f14 	.word	0x20000f14
 80060c0:	20000a40 	.word	0x20000a40
 80060c4:	20000f20 	.word	0x20000f20
 80060c8:	20000f30 	.word	0x20000f30
 80060cc:	20000f1c 	.word	0x20000f1c
 80060d0:	20000a44 	.word	0x20000a44
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d018      	beq.n	800611c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ea:	4b14      	ldr	r3, [pc, #80]	@ (800613c <vTaskDelay+0x64>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <vTaskDelay+0x32>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60bb      	str	r3, [r7, #8]
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	e7fd      	b.n	8006106 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800610a:	f000 f88b 	bl	8006224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800610e:	2100      	movs	r1, #0
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fdeb 	bl	8006cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006116:	f000 f893 	bl	8006240 <xTaskResumeAll>
 800611a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d107      	bne.n	8006132 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006122:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <vTaskDelay+0x68>)
 8006124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000f3c 	.word	0x20000f3c
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	@ 0x28
 8006148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006152:	463a      	mov	r2, r7
 8006154:	1d39      	adds	r1, r7, #4
 8006156:	f107 0308 	add.w	r3, r7, #8
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff f81c 	bl	8005198 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2300      	movs	r3, #0
 8006170:	460a      	mov	r2, r1
 8006172:	4924      	ldr	r1, [pc, #144]	@ (8006204 <vTaskStartScheduler+0xc0>)
 8006174:	4824      	ldr	r0, [pc, #144]	@ (8006208 <vTaskStartScheduler+0xc4>)
 8006176:	f7ff fdf1 	bl	8005d5c <xTaskCreateStatic>
 800617a:	4603      	mov	r3, r0
 800617c:	4a23      	ldr	r2, [pc, #140]	@ (800620c <vTaskStartScheduler+0xc8>)
 800617e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006180:	4b22      	ldr	r3, [pc, #136]	@ (800620c <vTaskStartScheduler+0xc8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	e001      	b.n	8006192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d102      	bne.n	800619e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006198:	f000 fdfc 	bl	8006d94 <xTimerCreateTimerTask>
 800619c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d11b      	bne.n	80061dc <vTaskStartScheduler+0x98>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
}
 80061b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061b8:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <vTaskStartScheduler+0xcc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3354      	adds	r3, #84	@ 0x54
 80061be:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <vTaskStartScheduler+0xd0>)
 80061c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <vTaskStartScheduler+0xd4>)
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ca:	4b14      	ldr	r3, [pc, #80]	@ (800621c <vTaskStartScheduler+0xd8>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061d0:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <vTaskStartScheduler+0xdc>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061d6:	f001 fa23 	bl	8007620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061da:	e00f      	b.n	80061fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d10b      	bne.n	80061fc <vTaskStartScheduler+0xb8>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60fb      	str	r3, [r7, #12]
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	e7fd      	b.n	80061f8 <vTaskStartScheduler+0xb4>
}
 80061fc:	bf00      	nop
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	080088e0 	.word	0x080088e0
 8006208:	08006855 	.word	0x08006855
 800620c:	20000f38 	.word	0x20000f38
 8006210:	20000a40 	.word	0x20000a40
 8006214:	20000094 	.word	0x20000094
 8006218:	20000f34 	.word	0x20000f34
 800621c:	20000f20 	.word	0x20000f20
 8006220:	20000f18 	.word	0x20000f18

08006224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006228:	4b04      	ldr	r3, [pc, #16]	@ (800623c <vTaskSuspendAll+0x18>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	4a03      	ldr	r2, [pc, #12]	@ (800623c <vTaskSuspendAll+0x18>)
 8006230:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000f3c 	.word	0x20000f3c

08006240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800624e:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <xTaskResumeAll+0x118>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <xTaskResumeAll+0x2e>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	603b      	str	r3, [r7, #0]
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	e7fd      	b.n	800626a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800626e:	f001 fa7b 	bl	8007768 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006272:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <xTaskResumeAll+0x118>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3b01      	subs	r3, #1
 8006278:	4a37      	ldr	r2, [pc, #220]	@ (8006358 <xTaskResumeAll+0x118>)
 800627a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800627c:	4b36      	ldr	r3, [pc, #216]	@ (8006358 <xTaskResumeAll+0x118>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d162      	bne.n	800634a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006284:	4b35      	ldr	r3, [pc, #212]	@ (800635c <xTaskResumeAll+0x11c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05e      	beq.n	800634a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800628c:	e02f      	b.n	80062ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <xTaskResumeAll+0x120>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3318      	adds	r3, #24
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f83a 	bl	8005314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f835 	bl	8005314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006364 <xTaskResumeAll+0x124>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d903      	bls.n	80062be <xTaskResumeAll+0x7e>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006364 <xTaskResumeAll+0x124>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4a27      	ldr	r2, [pc, #156]	@ (8006368 <xTaskResumeAll+0x128>)
 80062cc:	441a      	add	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7fe ffc0 	bl	800525a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4b23      	ldr	r3, [pc, #140]	@ (800636c <xTaskResumeAll+0x12c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062e8:	4b21      	ldr	r3, [pc, #132]	@ (8006370 <xTaskResumeAll+0x130>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006360 <xTaskResumeAll+0x120>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1cb      	bne.n	800628e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062fc:	f000 fb66 	bl	80069cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006300:	4b1c      	ldr	r3, [pc, #112]	@ (8006374 <xTaskResumeAll+0x134>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d010      	beq.n	800632e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800630c:	f000 f846 	bl	800639c <xTaskIncrementTick>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006316:	4b16      	ldr	r3, [pc, #88]	@ (8006370 <xTaskResumeAll+0x130>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3b01      	subs	r3, #1
 8006320:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f1      	bne.n	800630c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006328:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <xTaskResumeAll+0x134>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800632e:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <xTaskResumeAll+0x130>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800633a:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <xTaskResumeAll+0x138>)
 800633c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800634a:	f001 fa3f 	bl	80077cc <vPortExitCritical>

	return xAlreadyYielded;
 800634e:	68bb      	ldr	r3, [r7, #8]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000f3c 	.word	0x20000f3c
 800635c:	20000f14 	.word	0x20000f14
 8006360:	20000ed4 	.word	0x20000ed4
 8006364:	20000f1c 	.word	0x20000f1c
 8006368:	20000a44 	.word	0x20000a44
 800636c:	20000a40 	.word	0x20000a40
 8006370:	20000f28 	.word	0x20000f28
 8006374:	20000f24 	.word	0x20000f24
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006382:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <xTaskGetTickCount+0x1c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006388:	687b      	ldr	r3, [r7, #4]
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000f18 	.word	0x20000f18

0800639c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a6:	4b4f      	ldr	r3, [pc, #316]	@ (80064e4 <xTaskIncrementTick+0x148>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f040 8090 	bne.w	80064d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063b0:	4b4d      	ldr	r3, [pc, #308]	@ (80064e8 <xTaskIncrementTick+0x14c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b8:	4a4b      	ldr	r2, [pc, #300]	@ (80064e8 <xTaskIncrementTick+0x14c>)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d121      	bne.n	8006408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063c4:	4b49      	ldr	r3, [pc, #292]	@ (80064ec <xTaskIncrementTick+0x150>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	603b      	str	r3, [r7, #0]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xTaskIncrementTick+0x46>
 80063e6:	4b41      	ldr	r3, [pc, #260]	@ (80064ec <xTaskIncrementTick+0x150>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	4b40      	ldr	r3, [pc, #256]	@ (80064f0 <xTaskIncrementTick+0x154>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a3e      	ldr	r2, [pc, #248]	@ (80064ec <xTaskIncrementTick+0x150>)
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4a3e      	ldr	r2, [pc, #248]	@ (80064f0 <xTaskIncrementTick+0x154>)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	4b3e      	ldr	r3, [pc, #248]	@ (80064f4 <xTaskIncrementTick+0x158>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3301      	adds	r3, #1
 8006400:	4a3c      	ldr	r2, [pc, #240]	@ (80064f4 <xTaskIncrementTick+0x158>)
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	f000 fae2 	bl	80069cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006408:	4b3b      	ldr	r3, [pc, #236]	@ (80064f8 <xTaskIncrementTick+0x15c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	429a      	cmp	r2, r3
 8006410:	d349      	bcc.n	80064a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006412:	4b36      	ldr	r3, [pc, #216]	@ (80064ec <xTaskIncrementTick+0x150>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641c:	4b36      	ldr	r3, [pc, #216]	@ (80064f8 <xTaskIncrementTick+0x15c>)
 800641e:	f04f 32ff 	mov.w	r2, #4294967295
 8006422:	601a      	str	r2, [r3, #0]
					break;
 8006424:	e03f      	b.n	80064a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006426:	4b31      	ldr	r3, [pc, #196]	@ (80064ec <xTaskIncrementTick+0x150>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	d203      	bcs.n	8006446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800643e:	4a2e      	ldr	r2, [pc, #184]	@ (80064f8 <xTaskIncrementTick+0x15c>)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006444:	e02f      	b.n	80064a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	3304      	adds	r3, #4
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe ff62 	bl	8005314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	3318      	adds	r3, #24
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe ff59 	bl	8005314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006466:	4b25      	ldr	r3, [pc, #148]	@ (80064fc <xTaskIncrementTick+0x160>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d903      	bls.n	8006476 <xTaskIncrementTick+0xda>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	4a22      	ldr	r2, [pc, #136]	@ (80064fc <xTaskIncrementTick+0x160>)
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4a1f      	ldr	r2, [pc, #124]	@ (8006500 <xTaskIncrementTick+0x164>)
 8006484:	441a      	add	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fe fee4 	bl	800525a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006496:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <xTaskIncrementTick+0x168>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	429a      	cmp	r2, r3
 800649e:	d3b8      	bcc.n	8006412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a4:	e7b5      	b.n	8006412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064a6:	4b17      	ldr	r3, [pc, #92]	@ (8006504 <xTaskIncrementTick+0x168>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ac:	4914      	ldr	r1, [pc, #80]	@ (8006500 <xTaskIncrementTick+0x164>)
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d901      	bls.n	80064c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064c2:	4b11      	ldr	r3, [pc, #68]	@ (8006508 <xTaskIncrementTick+0x16c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80064ca:	2301      	movs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e004      	b.n	80064da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064d0:	4b0e      	ldr	r3, [pc, #56]	@ (800650c <xTaskIncrementTick+0x170>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	4a0d      	ldr	r2, [pc, #52]	@ (800650c <xTaskIncrementTick+0x170>)
 80064d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064da:	697b      	ldr	r3, [r7, #20]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000f3c 	.word	0x20000f3c
 80064e8:	20000f18 	.word	0x20000f18
 80064ec:	20000ecc 	.word	0x20000ecc
 80064f0:	20000ed0 	.word	0x20000ed0
 80064f4:	20000f2c 	.word	0x20000f2c
 80064f8:	20000f34 	.word	0x20000f34
 80064fc:	20000f1c 	.word	0x20000f1c
 8006500:	20000a44 	.word	0x20000a44
 8006504:	20000a40 	.word	0x20000a40
 8006508:	20000f28 	.word	0x20000f28
 800650c:	20000f24 	.word	0x20000f24

08006510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006516:	4b2b      	ldr	r3, [pc, #172]	@ (80065c4 <vTaskSwitchContext+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800651e:	4b2a      	ldr	r3, [pc, #168]	@ (80065c8 <vTaskSwitchContext+0xb8>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006524:	e047      	b.n	80065b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006526:	4b28      	ldr	r3, [pc, #160]	@ (80065c8 <vTaskSwitchContext+0xb8>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652c:	4b27      	ldr	r3, [pc, #156]	@ (80065cc <vTaskSwitchContext+0xbc>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e011      	b.n	8006558 <vTaskSwitchContext+0x48>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <vTaskSwitchContext+0x42>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	607b      	str	r3, [r7, #4]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <vTaskSwitchContext+0x3e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b01      	subs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	491d      	ldr	r1, [pc, #116]	@ (80065d0 <vTaskSwitchContext+0xc0>)
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0e3      	beq.n	8006534 <vTaskSwitchContext+0x24>
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a16      	ldr	r2, [pc, #88]	@ (80065d0 <vTaskSwitchContext+0xc0>)
 8006578:	4413      	add	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	3308      	adds	r3, #8
 800658e:	429a      	cmp	r2, r3
 8006590:	d104      	bne.n	800659c <vTaskSwitchContext+0x8c>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	605a      	str	r2, [r3, #4]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	4a0c      	ldr	r2, [pc, #48]	@ (80065d4 <vTaskSwitchContext+0xc4>)
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	4a09      	ldr	r2, [pc, #36]	@ (80065cc <vTaskSwitchContext+0xbc>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ac:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <vTaskSwitchContext+0xc4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3354      	adds	r3, #84	@ 0x54
 80065b2:	4a09      	ldr	r2, [pc, #36]	@ (80065d8 <vTaskSwitchContext+0xc8>)
 80065b4:	6013      	str	r3, [r2, #0]
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000f3c 	.word	0x20000f3c
 80065c8:	20000f28 	.word	0x20000f28
 80065cc:	20000f1c 	.word	0x20000f1c
 80065d0:	20000a44 	.word	0x20000a44
 80065d4:	20000a40 	.word	0x20000a40
 80065d8:	20000094 	.word	0x20000094

080065dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006604:	4b07      	ldr	r3, [pc, #28]	@ (8006624 <vTaskPlaceOnEventList+0x48>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3318      	adds	r3, #24
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7fe fe48 	bl	80052a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006612:	2101      	movs	r1, #1
 8006614:	6838      	ldr	r0, [r7, #0]
 8006616:	f000 fb69 	bl	8006cec <prvAddCurrentTaskToDelayedList>
}
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000a40 	.word	0x20000a40

08006628 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	617b      	str	r3, [r7, #20]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <vTaskPlaceOnEventListRestricted+0x54>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3318      	adds	r3, #24
 8006658:	4619      	mov	r1, r3
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7fe fdfd 	bl	800525a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
 800666a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	68b8      	ldr	r0, [r7, #8]
 8006670:	f000 fb3c 	bl	8006cec <prvAddCurrentTaskToDelayedList>
	}
 8006674:	bf00      	nop
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	20000a40 	.word	0x20000a40

08006680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10b      	bne.n	80066ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3318      	adds	r3, #24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe fe2e 	bl	8005314 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006730 <xTaskRemoveFromEventList+0xb0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11d      	bne.n	80066fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fe25 	bl	8005314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ce:	4b19      	ldr	r3, [pc, #100]	@ (8006734 <xTaskRemoveFromEventList+0xb4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d903      	bls.n	80066de <xTaskRemoveFromEventList+0x5e>
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <xTaskRemoveFromEventList+0xb4>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4a13      	ldr	r2, [pc, #76]	@ (8006738 <xTaskRemoveFromEventList+0xb8>)
 80066ec:	441a      	add	r2, r3
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fe fdb0 	bl	800525a <vListInsertEnd>
 80066fa:	e005      	b.n	8006708 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3318      	adds	r3, #24
 8006700:	4619      	mov	r1, r3
 8006702:	480e      	ldr	r0, [pc, #56]	@ (800673c <xTaskRemoveFromEventList+0xbc>)
 8006704:	f7fe fda9 	bl	800525a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670c:	4b0c      	ldr	r3, [pc, #48]	@ (8006740 <xTaskRemoveFromEventList+0xc0>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	429a      	cmp	r2, r3
 8006714:	d905      	bls.n	8006722 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006716:	2301      	movs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <xTaskRemoveFromEventList+0xc4>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e001      	b.n	8006726 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006726:	697b      	ldr	r3, [r7, #20]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000f3c 	.word	0x20000f3c
 8006734:	20000f1c 	.word	0x20000f1c
 8006738:	20000a44 	.word	0x20000a44
 800673c:	20000ed4 	.word	0x20000ed4
 8006740:	20000a40 	.word	0x20000a40
 8006744:	20000f28 	.word	0x20000f28

08006748 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <vTaskInternalSetTimeOutState+0x24>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006758:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <vTaskInternalSetTimeOutState+0x28>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	605a      	str	r2, [r3, #4]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000f2c 	.word	0x20000f2c
 8006770:	20000f18 	.word	0x20000f18

08006774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	613b      	str	r3, [r7, #16]
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	e7fd      	b.n	8006798 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60fb      	str	r3, [r7, #12]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80067ba:	f000 ffd5 	bl	8007768 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067be:	4b1d      	ldr	r3, [pc, #116]	@ (8006834 <xTaskCheckForTimeOut+0xc0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d102      	bne.n	80067de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e023      	b.n	8006826 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4b15      	ldr	r3, [pc, #84]	@ (8006838 <xTaskCheckForTimeOut+0xc4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d007      	beq.n	80067fa <xTaskCheckForTimeOut+0x86>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e015      	b.n	8006826 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	d20b      	bcs.n	800681c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff99 	bl	8006748 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e004      	b.n	8006826 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006826:	f000 ffd1 	bl	80077cc <vPortExitCritical>

	return xReturn;
 800682a:	69fb      	ldr	r3, [r7, #28]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20000f18 	.word	0x20000f18
 8006838:	20000f2c 	.word	0x20000f2c

0800683c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006840:	4b03      	ldr	r3, [pc, #12]	@ (8006850 <vTaskMissedYield+0x14>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20000f28 	.word	0x20000f28

08006854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800685c:	f000 f852 	bl	8006904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006860:	4b06      	ldr	r3, [pc, #24]	@ (800687c <prvIdleTask+0x28>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d9f9      	bls.n	800685c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <prvIdleTask+0x2c>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006878:	e7f0      	b.n	800685c <prvIdleTask+0x8>
 800687a:	bf00      	nop
 800687c:	20000a44 	.word	0x20000a44
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	e00c      	b.n	80068aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a12      	ldr	r2, [pc, #72]	@ (80068e4 <prvInitialiseTaskLists+0x60>)
 800689c:	4413      	add	r3, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fcae 	bl	8005200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3301      	adds	r3, #1
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b37      	cmp	r3, #55	@ 0x37
 80068ae:	d9ef      	bls.n	8006890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068b0:	480d      	ldr	r0, [pc, #52]	@ (80068e8 <prvInitialiseTaskLists+0x64>)
 80068b2:	f7fe fca5 	bl	8005200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068b6:	480d      	ldr	r0, [pc, #52]	@ (80068ec <prvInitialiseTaskLists+0x68>)
 80068b8:	f7fe fca2 	bl	8005200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068bc:	480c      	ldr	r0, [pc, #48]	@ (80068f0 <prvInitialiseTaskLists+0x6c>)
 80068be:	f7fe fc9f 	bl	8005200 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068c2:	480c      	ldr	r0, [pc, #48]	@ (80068f4 <prvInitialiseTaskLists+0x70>)
 80068c4:	f7fe fc9c 	bl	8005200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068c8:	480b      	ldr	r0, [pc, #44]	@ (80068f8 <prvInitialiseTaskLists+0x74>)
 80068ca:	f7fe fc99 	bl	8005200 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ce:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <prvInitialiseTaskLists+0x78>)
 80068d0:	4a05      	ldr	r2, [pc, #20]	@ (80068e8 <prvInitialiseTaskLists+0x64>)
 80068d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006900 <prvInitialiseTaskLists+0x7c>)
 80068d6:	4a05      	ldr	r2, [pc, #20]	@ (80068ec <prvInitialiseTaskLists+0x68>)
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000a44 	.word	0x20000a44
 80068e8:	20000ea4 	.word	0x20000ea4
 80068ec:	20000eb8 	.word	0x20000eb8
 80068f0:	20000ed4 	.word	0x20000ed4
 80068f4:	20000ee8 	.word	0x20000ee8
 80068f8:	20000f00 	.word	0x20000f00
 80068fc:	20000ecc 	.word	0x20000ecc
 8006900:	20000ed0 	.word	0x20000ed0

08006904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800690a:	e019      	b.n	8006940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800690c:	f000 ff2c 	bl	8007768 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <prvCheckTasksWaitingTermination+0x50>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fcf9 	bl	8005314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006922:	4b0d      	ldr	r3, [pc, #52]	@ (8006958 <prvCheckTasksWaitingTermination+0x54>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	4a0b      	ldr	r2, [pc, #44]	@ (8006958 <prvCheckTasksWaitingTermination+0x54>)
 800692a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800692c:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <prvCheckTasksWaitingTermination+0x58>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <prvCheckTasksWaitingTermination+0x58>)
 8006934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006936:	f000 ff49 	bl	80077cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f810 	bl	8006960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <prvCheckTasksWaitingTermination+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e1      	bne.n	800690c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000ee8 	.word	0x20000ee8
 8006958:	20000f14 	.word	0x20000f14
 800695c:	20000efc 	.word	0x20000efc

08006960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3354      	adds	r3, #84	@ 0x54
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fa47 	bl	8007e00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006978:	2b00      	cmp	r3, #0
 800697a:	d108      	bne.n	800698e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f8e1 	bl	8007b48 <vPortFree>
				vPortFree( pxTCB );
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 f8de 	bl	8007b48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800698c:	e019      	b.n	80069c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006994:	2b01      	cmp	r3, #1
 8006996:	d103      	bne.n	80069a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f8d5 	bl	8007b48 <vPortFree>
	}
 800699e:	e010      	b.n	80069c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d00b      	beq.n	80069c2 <prvDeleteTCB+0x62>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60fb      	str	r3, [r7, #12]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <prvDeleteTCB+0x5e>
	}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <prvResetNextTaskUnblockTime+0x38>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <prvResetNextTaskUnblockTime+0x3c>)
 80069de:	f04f 32ff 	mov.w	r2, #4294967295
 80069e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069e4:	e008      	b.n	80069f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e6:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <prvResetNextTaskUnblockTime+0x38>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4a04      	ldr	r2, [pc, #16]	@ (8006a08 <prvResetNextTaskUnblockTime+0x3c>)
 80069f6:	6013      	str	r3, [r2, #0]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000ecc 	.word	0x20000ecc
 8006a08:	20000f34 	.word	0x20000f34

08006a0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a12:	4b0b      	ldr	r3, [pc, #44]	@ (8006a40 <xTaskGetSchedulerState+0x34>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	e008      	b.n	8006a32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a20:	4b08      	ldr	r3, [pc, #32]	@ (8006a44 <xTaskGetSchedulerState+0x38>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	e001      	b.n	8006a32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a32:	687b      	ldr	r3, [r7, #4]
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	20000f20 	.word	0x20000f20
 8006a44:	20000f3c 	.word	0x20000f3c

08006a48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d058      	beq.n	8006b10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b1c <xTaskPriorityDisinherit+0xd4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d00b      	beq.n	8006a80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60fb      	str	r3, [r7, #12]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60bb      	str	r3, [r7, #8]
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d02c      	beq.n	8006b10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d128      	bne.n	8006b10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fc26 	bl	8005314 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <xTaskPriorityDisinherit+0xd8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d903      	bls.n	8006af0 <xTaskPriorityDisinherit+0xa8>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aec:	4a0c      	ldr	r2, [pc, #48]	@ (8006b20 <xTaskPriorityDisinherit+0xd8>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4a09      	ldr	r2, [pc, #36]	@ (8006b24 <xTaskPriorityDisinherit+0xdc>)
 8006afe:	441a      	add	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fba7 	bl	800525a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b10:	697b      	ldr	r3, [r7, #20]
	}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000a40 	.word	0x20000a40
 8006b20:	20000f1c 	.word	0x20000f1c
 8006b24:	20000a44 	.word	0x20000a44

08006b28 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006b32:	f000 fe19 	bl	8007768 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006b36:	4b20      	ldr	r3, [pc, #128]	@ (8006bb8 <ulTaskNotifyTake+0x90>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d113      	bne.n	8006b6a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006b42:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb8 <ulTaskNotifyTake+0x90>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b52:	2101      	movs	r1, #1
 8006b54:	6838      	ldr	r0, [r7, #0]
 8006b56:	f000 f8c9 	bl	8006cec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006b5a:	4b18      	ldr	r3, [pc, #96]	@ (8006bbc <ulTaskNotifyTake+0x94>)
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b6a:	f000 fe2f 	bl	80077cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006b6e:	f000 fdfb 	bl	8007768 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006b72:	4b11      	ldr	r3, [pc, #68]	@ (8006bb8 <ulTaskNotifyTake+0x90>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b7a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006b88:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb8 <ulTaskNotifyTake+0x90>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8006b92:	e005      	b.n	8006ba0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006b94:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <ulTaskNotifyTake+0x90>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	3a01      	subs	r2, #1
 8006b9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <ulTaskNotifyTake+0x90>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006baa:	f000 fe0f 	bl	80077cc <vPortExitCritical>

		return ulReturn;
 8006bae:	68fb      	ldr	r3, [r7, #12]
	}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000a40 	.word	0x20000a40
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08a      	sub	sp, #40	@ 0x28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61bb      	str	r3, [r7, #24]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006be8:	f000 fe9e 	bl	8007928 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006bf0:	f3ef 8211 	mrs	r2, BASEPRI
 8006bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	617a      	str	r2, [r7, #20]
 8006c06:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c08:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c0a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8006c12:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006c2a:	7ffb      	ldrb	r3, [r7, #31]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d147      	bne.n	8006cc0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	60fb      	str	r3, [r7, #12]
}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	e7fd      	b.n	8006c4c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c50:	4b20      	ldr	r3, [pc, #128]	@ (8006cd4 <vTaskNotifyGiveFromISR+0x114>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11d      	bne.n	8006c94 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fb59 	bl	8005314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd8 <vTaskNotifyGiveFromISR+0x118>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d903      	bls.n	8006c76 <vTaskNotifyGiveFromISR+0xb6>
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	4a19      	ldr	r2, [pc, #100]	@ (8006cd8 <vTaskNotifyGiveFromISR+0x118>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <vTaskNotifyGiveFromISR+0x11c>)
 8006c84:	441a      	add	r2, r3
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f7fe fae4 	bl	800525a <vListInsertEnd>
 8006c92:	e005      	b.n	8006ca0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	3318      	adds	r3, #24
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4811      	ldr	r0, [pc, #68]	@ (8006ce0 <vTaskNotifyGiveFromISR+0x120>)
 8006c9c:	f7fe fadd 	bl	800525a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <vTaskNotifyGiveFromISR+0x124>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d908      	bls.n	8006cc0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <vTaskNotifyGiveFromISR+0x128>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f383 8811 	msr	BASEPRI, r3
}
 8006cca:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006ccc:	bf00      	nop
 8006cce:	3728      	adds	r7, #40	@ 0x28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000f3c 	.word	0x20000f3c
 8006cd8:	20000f1c 	.word	0x20000f1c
 8006cdc:	20000a44 	.word	0x20000a44
 8006ce0:	20000ed4 	.word	0x20000ed4
 8006ce4:	20000a40 	.word	0x20000a40
 8006ce8:	20000f28 	.word	0x20000f28

08006cec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cf6:	4b21      	ldr	r3, [pc, #132]	@ (8006d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cfc:	4b20      	ldr	r3, [pc, #128]	@ (8006d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fb06 	bl	8005314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d10a      	bne.n	8006d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d007      	beq.n	8006d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d16:	4b1a      	ldr	r3, [pc, #104]	@ (8006d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4819      	ldr	r0, [pc, #100]	@ (8006d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d20:	f7fe fa9b 	bl	800525a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d24:	e026      	b.n	8006d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d2e:	4b14      	ldr	r3, [pc, #80]	@ (8006d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d209      	bcs.n	8006d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d3e:	4b12      	ldr	r3, [pc, #72]	@ (8006d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b0f      	ldr	r3, [pc, #60]	@ (8006d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f7fe faa9 	bl	80052a2 <vListInsert>
}
 8006d50:	e010      	b.n	8006d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d52:	4b0e      	ldr	r3, [pc, #56]	@ (8006d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	4b0a      	ldr	r3, [pc, #40]	@ (8006d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	f7fe fa9f 	bl	80052a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d64:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d202      	bcs.n	8006d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d6e:	4a08      	ldr	r2, [pc, #32]	@ (8006d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6013      	str	r3, [r2, #0]
}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000f18 	.word	0x20000f18
 8006d80:	20000a40 	.word	0x20000a40
 8006d84:	20000f00 	.word	0x20000f00
 8006d88:	20000ed0 	.word	0x20000ed0
 8006d8c:	20000ecc 	.word	0x20000ecc
 8006d90:	20000f34 	.word	0x20000f34

08006d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	@ 0x28
 8006d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d9e:	f000 fb71 	bl	8007484 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006da2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <xTimerCreateTimerTask+0x84>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d021      	beq.n	8006dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006db2:	1d3a      	adds	r2, r7, #4
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	f107 030c 	add.w	r3, r7, #12
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fa05 	bl	80051cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	9202      	str	r2, [sp, #8]
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	2302      	movs	r3, #2
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	460a      	mov	r2, r1
 8006dd4:	4911      	ldr	r1, [pc, #68]	@ (8006e1c <xTimerCreateTimerTask+0x88>)
 8006dd6:	4812      	ldr	r0, [pc, #72]	@ (8006e20 <xTimerCreateTimerTask+0x8c>)
 8006dd8:	f7fe ffc0 	bl	8005d5c <xTaskCreateStatic>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4a11      	ldr	r2, [pc, #68]	@ (8006e24 <xTimerCreateTimerTask+0x90>)
 8006de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006de2:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <xTimerCreateTimerTask+0x90>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dea:	2301      	movs	r3, #1
 8006dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	613b      	str	r3, [r7, #16]
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e0c:	697b      	ldr	r3, [r7, #20]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000f70 	.word	0x20000f70
 8006e1c:	080088e8 	.word	0x080088e8
 8006e20:	0800701d 	.word	0x0800701d
 8006e24:	20000f74 	.word	0x20000f74

08006e28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006e36:	202c      	movs	r0, #44	@ 0x2c
 8006e38:	f000 fdb8 	bl	80079ac <pvPortMalloc>
 8006e3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00d      	beq.n	8006e60 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f805 	bl	8006e6a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006e60:	697b      	ldr	r3, [r7, #20]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	617b      	str	r3, [r7, #20]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01e      	beq.n	8006eda <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006e9c:	f000 faf2 	bl	8007484 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fe f9bf 	bl	8005240 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ece:	f043 0304 	orr.w	r3, r3, #4
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006eda:	bf00      	nop
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	@ 0x28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10b      	bne.n	8006f14 <xTimerGenericCommand+0x30>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	623b      	str	r3, [r7, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f14:	4b19      	ldr	r3, [pc, #100]	@ (8006f7c <xTimerGenericCommand+0x98>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02a      	beq.n	8006f72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b05      	cmp	r3, #5
 8006f2c:	dc18      	bgt.n	8006f60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f2e:	f7ff fd6d 	bl	8006a0c <xTaskGetSchedulerState>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d109      	bne.n	8006f4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f38:	4b10      	ldr	r3, [pc, #64]	@ (8006f7c <xTimerGenericCommand+0x98>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	f107 0110 	add.w	r1, r7, #16
 8006f40:	2300      	movs	r3, #0
 8006f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f44:	f7fe fb1a 	bl	800557c <xQueueGenericSend>
 8006f48:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f4a:	e012      	b.n	8006f72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006f7c <xTimerGenericCommand+0x98>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	f107 0110 	add.w	r1, r7, #16
 8006f54:	2300      	movs	r3, #0
 8006f56:	2200      	movs	r2, #0
 8006f58:	f7fe fb10 	bl	800557c <xQueueGenericSend>
 8006f5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f5e:	e008      	b.n	8006f72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f60:	4b06      	ldr	r3, [pc, #24]	@ (8006f7c <xTimerGenericCommand+0x98>)
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	f107 0110 	add.w	r1, r7, #16
 8006f68:	2300      	movs	r3, #0
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	f7fe fc08 	bl	8005780 <xQueueGenericSendFromISR>
 8006f70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3728      	adds	r7, #40	@ 0x28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000f70 	.word	0x20000f70

08006f80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8a:	4b23      	ldr	r3, [pc, #140]	@ (8007018 <prvProcessExpiredTimer+0x98>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe f9bb 	bl	8005314 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d023      	beq.n	8006ff4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	18d1      	adds	r1, r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	6978      	ldr	r0, [r7, #20]
 8006fba:	f000 f8d5 	bl	8007168 <prvInsertTimerInActiveList>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d020      	beq.n	8007006 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	6978      	ldr	r0, [r7, #20]
 8006fd0:	f7ff ff88 	bl	8006ee4 <xTimerGenericCommand>
 8006fd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d114      	bne.n	8007006 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	60fb      	str	r3, [r7, #12]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	6978      	ldr	r0, [r7, #20]
 800700c:	4798      	blx	r3
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000f68 	.word	0x20000f68

0800701c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f859 	bl	80070e0 <prvGetNextExpireTime>
 800702e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4619      	mov	r1, r3
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f805 	bl	8007044 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800703a:	f000 f8d7 	bl	80071ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800703e:	bf00      	nop
 8007040:	e7f0      	b.n	8007024 <prvTimerTask+0x8>
	...

08007044 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800704e:	f7ff f8e9 	bl	8006224 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007052:	f107 0308 	add.w	r3, r7, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f866 	bl	8007128 <prvSampleTimeNow>
 800705c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d130      	bne.n	80070c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <prvProcessTimerOrBlockTask+0x3c>
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	429a      	cmp	r2, r3
 8007070:	d806      	bhi.n	8007080 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007072:	f7ff f8e5 	bl	8006240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ff81 	bl	8006f80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800707e:	e024      	b.n	80070ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007086:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <prvProcessTimerOrBlockTask+0x90>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <prvProcessTimerOrBlockTask+0x50>
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <prvProcessTimerOrBlockTask+0x52>
 8007094:	2300      	movs	r3, #0
 8007096:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007098:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <prvProcessTimerOrBlockTask+0x94>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	f7fe fe25 	bl	8005cf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070aa:	f7ff f8c9 	bl	8006240 <xTaskResumeAll>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070b4:	4b09      	ldr	r3, [pc, #36]	@ (80070dc <prvProcessTimerOrBlockTask+0x98>)
 80070b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	f3bf 8f6f 	isb	sy
}
 80070c4:	e001      	b.n	80070ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070c6:	f7ff f8bb 	bl	8006240 <xTaskResumeAll>
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000f6c 	.word	0x20000f6c
 80070d8:	20000f70 	.word	0x20000f70
 80070dc:	e000ed04 	.word	0xe000ed04

080070e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007124 <prvGetNextExpireTime+0x44>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <prvGetNextExpireTime+0x16>
 80070f2:	2201      	movs	r2, #1
 80070f4:	e000      	b.n	80070f8 <prvGetNextExpireTime+0x18>
 80070f6:	2200      	movs	r2, #0
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007104:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <prvGetNextExpireTime+0x44>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	e001      	b.n	8007114 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007114:	68fb      	ldr	r3, [r7, #12]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20000f68 	.word	0x20000f68

08007128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007130:	f7ff f924 	bl	800637c <xTaskGetTickCount>
 8007134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007136:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <prvSampleTimeNow+0x3c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d205      	bcs.n	800714c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007140:	f000 f93a 	bl	80073b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e002      	b.n	8007152 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007152:	4a04      	ldr	r2, [pc, #16]	@ (8007164 <prvSampleTimeNow+0x3c>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007158:	68fb      	ldr	r3, [r7, #12]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000f78 	.word	0x20000f78

08007168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d812      	bhi.n	80071b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e01b      	b.n	80071da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071a2:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <prvInsertTimerInActiveList+0x7c>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7fe f878 	bl	80052a2 <vListInsert>
 80071b2:	e012      	b.n	80071da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d206      	bcs.n	80071ca <prvInsertTimerInActiveList+0x62>
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e007      	b.n	80071da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ca:	4b07      	ldr	r3, [pc, #28]	@ (80071e8 <prvInsertTimerInActiveList+0x80>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f7fe f864 	bl	80052a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000f6c 	.word	0x20000f6c
 80071e8:	20000f68 	.word	0x20000f68

080071ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	@ 0x38
 80071f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071f2:	e0ce      	b.n	8007392 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da19      	bge.n	800722e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071fa:	1d3b      	adds	r3, r7, #4
 80071fc:	3304      	adds	r3, #4
 80071fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	61fb      	str	r3, [r7, #28]
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007224:	6850      	ldr	r0, [r2, #4]
 8007226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007228:	6892      	ldr	r2, [r2, #8]
 800722a:	4611      	mov	r1, r2
 800722c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f2c0 80ae 	blt.w	8007392 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800723a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007244:	3304      	adds	r3, #4
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe f864 	bl	8005314 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800724c:	463b      	mov	r3, r7
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff ff6a 	bl	8007128 <prvSampleTimeNow>
 8007254:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b09      	cmp	r3, #9
 800725a:	f200 8097 	bhi.w	800738c <prvProcessReceivedCommands+0x1a0>
 800725e:	a201      	add	r2, pc, #4	@ (adr r2, 8007264 <prvProcessReceivedCommands+0x78>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	0800728d 	.word	0x0800728d
 8007268:	0800728d 	.word	0x0800728d
 800726c:	0800728d 	.word	0x0800728d
 8007270:	08007303 	.word	0x08007303
 8007274:	08007317 	.word	0x08007317
 8007278:	08007363 	.word	0x08007363
 800727c:	0800728d 	.word	0x0800728d
 8007280:	0800728d 	.word	0x0800728d
 8007284:	08007303 	.word	0x08007303
 8007288:	08007317 	.word	0x08007317
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	18d1      	adds	r1, r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072ac:	f7ff ff5c 	bl	8007168 <prvInsertTimerInActiveList>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d06c      	beq.n	8007390 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d061      	beq.n	8007390 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	441a      	add	r2, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	2300      	movs	r3, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072de:	f7ff fe01 	bl	8006ee4 <xTimerGenericCommand>
 80072e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d152      	bne.n	8007390 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	61bb      	str	r3, [r7, #24]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	b2da      	uxtb	r2, r3
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007314:	e03d      	b.n	8007392 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	b2da      	uxtb	r2, r3
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	617b      	str	r3, [r7, #20]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	18d1      	adds	r1, r2, r3
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800735a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800735c:	f7ff ff04 	bl	8007168 <prvInsertTimerInActiveList>
					break;
 8007360:	e017      	b.n	8007392 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d103      	bne.n	8007378 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007372:	f000 fbe9 	bl	8007b48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007376:	e00c      	b.n	8007392 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800738a:	e002      	b.n	8007392 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800738c:	bf00      	nop
 800738e:	e000      	b.n	8007392 <prvProcessReceivedCommands+0x1a6>
					break;
 8007390:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007392:	4b08      	ldr	r3, [pc, #32]	@ (80073b4 <prvProcessReceivedCommands+0x1c8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1d39      	adds	r1, r7, #4
 8007398:	2200      	movs	r2, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fa8e 	bl	80058bc <xQueueReceive>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f47f af26 	bne.w	80071f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	3730      	adds	r7, #48	@ 0x30
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000f70 	.word	0x20000f70

080073b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073be:	e049      	b.n	8007454 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073c0:	4b2e      	ldr	r3, [pc, #184]	@ (800747c <prvSwitchTimerLists+0xc4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ca:	4b2c      	ldr	r3, [pc, #176]	@ (800747c <prvSwitchTimerLists+0xc4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fd ff9b 	bl	8005314 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d02f      	beq.n	8007454 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	429a      	cmp	r2, r3
 8007404:	d90e      	bls.n	8007424 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007412:	4b1a      	ldr	r3, [pc, #104]	@ (800747c <prvSwitchTimerLists+0xc4>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3304      	adds	r3, #4
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7fd ff40 	bl	80052a2 <vListInsert>
 8007422:	e017      	b.n	8007454 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007424:	2300      	movs	r3, #0
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	2100      	movs	r1, #0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff fd58 	bl	8006ee4 <xTimerGenericCommand>
 8007434:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10b      	bne.n	8007454 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	603b      	str	r3, [r7, #0]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007454:	4b09      	ldr	r3, [pc, #36]	@ (800747c <prvSwitchTimerLists+0xc4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1b0      	bne.n	80073c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800745e:	4b07      	ldr	r3, [pc, #28]	@ (800747c <prvSwitchTimerLists+0xc4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007464:	4b06      	ldr	r3, [pc, #24]	@ (8007480 <prvSwitchTimerLists+0xc8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a04      	ldr	r2, [pc, #16]	@ (800747c <prvSwitchTimerLists+0xc4>)
 800746a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800746c:	4a04      	ldr	r2, [pc, #16]	@ (8007480 <prvSwitchTimerLists+0xc8>)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6013      	str	r3, [r2, #0]
}
 8007472:	bf00      	nop
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000f68 	.word	0x20000f68
 8007480:	20000f6c 	.word	0x20000f6c

08007484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800748a:	f000 f96d 	bl	8007768 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800748e:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <prvCheckForValidListAndQueue+0x60>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d120      	bne.n	80074d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007496:	4814      	ldr	r0, [pc, #80]	@ (80074e8 <prvCheckForValidListAndQueue+0x64>)
 8007498:	f7fd feb2 	bl	8005200 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800749c:	4813      	ldr	r0, [pc, #76]	@ (80074ec <prvCheckForValidListAndQueue+0x68>)
 800749e:	f7fd feaf 	bl	8005200 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074a2:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <prvCheckForValidListAndQueue+0x6c>)
 80074a4:	4a10      	ldr	r2, [pc, #64]	@ (80074e8 <prvCheckForValidListAndQueue+0x64>)
 80074a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074a8:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <prvCheckForValidListAndQueue+0x70>)
 80074aa:	4a10      	ldr	r2, [pc, #64]	@ (80074ec <prvCheckForValidListAndQueue+0x68>)
 80074ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074ae:	2300      	movs	r3, #0
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <prvCheckForValidListAndQueue+0x74>)
 80074b4:	4a11      	ldr	r2, [pc, #68]	@ (80074fc <prvCheckForValidListAndQueue+0x78>)
 80074b6:	2110      	movs	r1, #16
 80074b8:	200a      	movs	r0, #10
 80074ba:	f7fd ffbf 	bl	800543c <xQueueGenericCreateStatic>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a08      	ldr	r2, [pc, #32]	@ (80074e4 <prvCheckForValidListAndQueue+0x60>)
 80074c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074c4:	4b07      	ldr	r3, [pc, #28]	@ (80074e4 <prvCheckForValidListAndQueue+0x60>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074cc:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <prvCheckForValidListAndQueue+0x60>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	490b      	ldr	r1, [pc, #44]	@ (8007500 <prvCheckForValidListAndQueue+0x7c>)
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fbe4 	bl	8005ca0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074d8:	f000 f978 	bl	80077cc <vPortExitCritical>
}
 80074dc:	bf00      	nop
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000f70 	.word	0x20000f70
 80074e8:	20000f40 	.word	0x20000f40
 80074ec:	20000f54 	.word	0x20000f54
 80074f0:	20000f68 	.word	0x20000f68
 80074f4:	20000f6c 	.word	0x20000f6c
 80074f8:	2000101c 	.word	0x2000101c
 80074fc:	20000f7c 	.word	0x20000f7c
 8007500:	080088f0 	.word	0x080088f0

08007504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3b04      	subs	r3, #4
 8007514:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800751c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3b04      	subs	r3, #4
 8007522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f023 0201 	bic.w	r2, r3, #1
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3b04      	subs	r3, #4
 8007532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007534:	4a0c      	ldr	r2, [pc, #48]	@ (8007568 <pxPortInitialiseStack+0x64>)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3b14      	subs	r3, #20
 800753e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3b04      	subs	r3, #4
 800754a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f06f 0202 	mvn.w	r2, #2
 8007552:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3b20      	subs	r3, #32
 8007558:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800755a:	68fb      	ldr	r3, [r7, #12]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	0800756d 	.word	0x0800756d

0800756c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007576:	4b13      	ldr	r3, [pc, #76]	@ (80075c4 <prvTaskExitError+0x58>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d00b      	beq.n	8007598 <prvTaskExitError+0x2c>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60fb      	str	r3, [r7, #12]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <prvTaskExitError+0x28>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	60bb      	str	r3, [r7, #8]
}
 80075aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075ac:	bf00      	nop
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0fc      	beq.n	80075ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000090 	.word	0x20000090
	...

080075d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075d0:	4b07      	ldr	r3, [pc, #28]	@ (80075f0 <pxCurrentTCBConst2>)
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	6808      	ldr	r0, [r1, #0]
 80075d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075da:	f380 8809 	msr	PSP, r0
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f04f 0000 	mov.w	r0, #0
 80075e6:	f380 8811 	msr	BASEPRI, r0
 80075ea:	4770      	bx	lr
 80075ec:	f3af 8000 	nop.w

080075f0 <pxCurrentTCBConst2>:
 80075f0:	20000a40 	.word	0x20000a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop

080075f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075f8:	4808      	ldr	r0, [pc, #32]	@ (800761c <prvPortStartFirstTask+0x24>)
 80075fa:	6800      	ldr	r0, [r0, #0]
 80075fc:	6800      	ldr	r0, [r0, #0]
 80075fe:	f380 8808 	msr	MSP, r0
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8814 	msr	CONTROL, r0
 800760a:	b662      	cpsie	i
 800760c:	b661      	cpsie	f
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	df00      	svc	0
 8007618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800761a:	bf00      	nop
 800761c:	e000ed08 	.word	0xe000ed08

08007620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007626:	4b47      	ldr	r3, [pc, #284]	@ (8007744 <xPortStartScheduler+0x124>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a47      	ldr	r2, [pc, #284]	@ (8007748 <xPortStartScheduler+0x128>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10b      	bne.n	8007648 <xPortStartScheduler+0x28>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	613b      	str	r3, [r7, #16]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007648:	4b3e      	ldr	r3, [pc, #248]	@ (8007744 <xPortStartScheduler+0x124>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a3f      	ldr	r2, [pc, #252]	@ (800774c <xPortStartScheduler+0x12c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10b      	bne.n	800766a <xPortStartScheduler+0x4a>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60fb      	str	r3, [r7, #12]
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	e7fd      	b.n	8007666 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800766a:	4b39      	ldr	r3, [pc, #228]	@ (8007750 <xPortStartScheduler+0x130>)
 800766c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	22ff      	movs	r2, #255	@ 0xff
 800767a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800768c:	b2da      	uxtb	r2, r3
 800768e:	4b31      	ldr	r3, [pc, #196]	@ (8007754 <xPortStartScheduler+0x134>)
 8007690:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007692:	4b31      	ldr	r3, [pc, #196]	@ (8007758 <xPortStartScheduler+0x138>)
 8007694:	2207      	movs	r2, #7
 8007696:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007698:	e009      	b.n	80076ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800769a:	4b2f      	ldr	r3, [pc, #188]	@ (8007758 <xPortStartScheduler+0x138>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007758 <xPortStartScheduler+0x138>)
 80076a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b6:	2b80      	cmp	r3, #128	@ 0x80
 80076b8:	d0ef      	beq.n	800769a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076ba:	4b27      	ldr	r3, [pc, #156]	@ (8007758 <xPortStartScheduler+0x138>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1c3 0307 	rsb	r3, r3, #7
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d00b      	beq.n	80076de <xPortStartScheduler+0xbe>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60bb      	str	r3, [r7, #8]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076de:	4b1e      	ldr	r3, [pc, #120]	@ (8007758 <xPortStartScheduler+0x138>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007758 <xPortStartScheduler+0x138>)
 80076e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <xPortStartScheduler+0x138>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076f0:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <xPortStartScheduler+0x138>)
 80076f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076fc:	4b17      	ldr	r3, [pc, #92]	@ (800775c <xPortStartScheduler+0x13c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a16      	ldr	r2, [pc, #88]	@ (800775c <xPortStartScheduler+0x13c>)
 8007702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007706:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007708:	4b14      	ldr	r3, [pc, #80]	@ (800775c <xPortStartScheduler+0x13c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a13      	ldr	r2, [pc, #76]	@ (800775c <xPortStartScheduler+0x13c>)
 800770e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007712:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007714:	f000 f8da 	bl	80078cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007718:	4b11      	ldr	r3, [pc, #68]	@ (8007760 <xPortStartScheduler+0x140>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800771e:	f000 f8f9 	bl	8007914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007722:	4b10      	ldr	r3, [pc, #64]	@ (8007764 <xPortStartScheduler+0x144>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a0f      	ldr	r2, [pc, #60]	@ (8007764 <xPortStartScheduler+0x144>)
 8007728:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800772c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800772e:	f7ff ff63 	bl	80075f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007732:	f7fe feed 	bl	8006510 <vTaskSwitchContext>
	prvTaskExitError();
 8007736:	f7ff ff19 	bl	800756c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	e000ed00 	.word	0xe000ed00
 8007748:	410fc271 	.word	0x410fc271
 800774c:	410fc270 	.word	0x410fc270
 8007750:	e000e400 	.word	0xe000e400
 8007754:	2000106c 	.word	0x2000106c
 8007758:	20001070 	.word	0x20001070
 800775c:	e000ed20 	.word	0xe000ed20
 8007760:	20000090 	.word	0x20000090
 8007764:	e000ef34 	.word	0xe000ef34

08007768 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007782:	4b10      	ldr	r3, [pc, #64]	@ (80077c4 <vPortEnterCritical+0x5c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	4a0e      	ldr	r2, [pc, #56]	@ (80077c4 <vPortEnterCritical+0x5c>)
 800778a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800778c:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <vPortEnterCritical+0x5c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d110      	bne.n	80077b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <vPortEnterCritical+0x60>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	603b      	str	r3, [r7, #0]
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	e7fd      	b.n	80077b2 <vPortEnterCritical+0x4a>
	}
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000090 	.word	0x20000090
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077d2:	4b12      	ldr	r3, [pc, #72]	@ (800781c <vPortExitCritical+0x50>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <vPortExitCritical+0x26>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	607b      	str	r3, [r7, #4]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077f2:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <vPortExitCritical+0x50>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	4a08      	ldr	r2, [pc, #32]	@ (800781c <vPortExitCritical+0x50>)
 80077fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077fc:	4b07      	ldr	r3, [pc, #28]	@ (800781c <vPortExitCritical+0x50>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d105      	bne.n	8007810 <vPortExitCritical+0x44>
 8007804:	2300      	movs	r3, #0
 8007806:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	f383 8811 	msr	BASEPRI, r3
}
 800780e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20000090 	.word	0x20000090

08007820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007820:	f3ef 8009 	mrs	r0, PSP
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <pxCurrentTCBConst>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	f01e 0f10 	tst.w	lr, #16
 8007830:	bf08      	it	eq
 8007832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783a:	6010      	str	r0, [r2, #0]
 800783c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007844:	f380 8811 	msr	BASEPRI, r0
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f7fe fe5e 	bl	8006510 <vTaskSwitchContext>
 8007854:	f04f 0000 	mov.w	r0, #0
 8007858:	f380 8811 	msr	BASEPRI, r0
 800785c:	bc09      	pop	{r0, r3}
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	6808      	ldr	r0, [r1, #0]
 8007862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007866:	f01e 0f10 	tst.w	lr, #16
 800786a:	bf08      	it	eq
 800786c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007870:	f380 8809 	msr	PSP, r0
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst>:
 8007880:	20000a40 	.word	0x20000a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	607b      	str	r3, [r7, #4]
}
 80078a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078a2:	f7fe fd7b 	bl	800639c <xTaskIncrementTick>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078ac:	4b06      	ldr	r3, [pc, #24]	@ (80078c8 <xPortSysTickHandler+0x40>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	2300      	movs	r3, #0
 80078b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	f383 8811 	msr	BASEPRI, r3
}
 80078be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007900 <vPortSetupTimerInterrupt+0x34>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007904 <vPortSetupTimerInterrupt+0x38>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007908 <vPortSetupTimerInterrupt+0x3c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	@ (800790c <vPortSetupTimerInterrupt+0x40>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	099b      	lsrs	r3, r3, #6
 80078e8:	4a09      	ldr	r2, [pc, #36]	@ (8007910 <vPortSetupTimerInterrupt+0x44>)
 80078ea:	3b01      	subs	r3, #1
 80078ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ee:	4b04      	ldr	r3, [pc, #16]	@ (8007900 <vPortSetupTimerInterrupt+0x34>)
 80078f0:	2207      	movs	r2, #7
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	bf00      	nop
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	e000e010 	.word	0xe000e010
 8007904:	e000e018 	.word	0xe000e018
 8007908:	20000084 	.word	0x20000084
 800790c:	10624dd3 	.word	0x10624dd3
 8007910:	e000e014 	.word	0xe000e014

08007914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007914:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007924 <vPortEnableVFP+0x10>
 8007918:	6801      	ldr	r1, [r0, #0]
 800791a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800791e:	6001      	str	r1, [r0, #0]
 8007920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007922:	bf00      	nop
 8007924:	e000ed88 	.word	0xe000ed88

08007928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800792e:	f3ef 8305 	mrs	r3, IPSR
 8007932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b0f      	cmp	r3, #15
 8007938:	d915      	bls.n	8007966 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800793a:	4a18      	ldr	r2, [pc, #96]	@ (800799c <vPortValidateInterruptPriority+0x74>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007944:	4b16      	ldr	r3, [pc, #88]	@ (80079a0 <vPortValidateInterruptPriority+0x78>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	7afa      	ldrb	r2, [r7, #11]
 800794a:	429a      	cmp	r2, r3
 800794c:	d20b      	bcs.n	8007966 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007966:	4b0f      	ldr	r3, [pc, #60]	@ (80079a4 <vPortValidateInterruptPriority+0x7c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800796e:	4b0e      	ldr	r3, [pc, #56]	@ (80079a8 <vPortValidateInterruptPriority+0x80>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d90b      	bls.n	800798e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	603b      	str	r3, [r7, #0]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <vPortValidateInterruptPriority+0x62>
	}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	e000e3f0 	.word	0xe000e3f0
 80079a0:	2000106c 	.word	0x2000106c
 80079a4:	e000ed0c 	.word	0xe000ed0c
 80079a8:	20001070 	.word	0x20001070

080079ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	@ 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079b8:	f7fe fc34 	bl	8006224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079bc:	4b5c      	ldr	r3, [pc, #368]	@ (8007b30 <pvPortMalloc+0x184>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079c4:	f000 f924 	bl	8007c10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079c8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b34 <pvPortMalloc+0x188>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f040 8095 	bne.w	8007b00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01e      	beq.n	8007a1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80079dc:	2208      	movs	r2, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d015      	beq.n	8007a1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f023 0307 	bic.w	r3, r3, #7
 80079f4:	3308      	adds	r3, #8
 80079f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <pvPortMalloc+0x6e>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	617b      	str	r3, [r7, #20]
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop
 8007a18:	e7fd      	b.n	8007a16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d06f      	beq.n	8007b00 <pvPortMalloc+0x154>
 8007a20:	4b45      	ldr	r3, [pc, #276]	@ (8007b38 <pvPortMalloc+0x18c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d86a      	bhi.n	8007b00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a2a:	4b44      	ldr	r3, [pc, #272]	@ (8007b3c <pvPortMalloc+0x190>)
 8007a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a2e:	4b43      	ldr	r3, [pc, #268]	@ (8007b3c <pvPortMalloc+0x190>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a34:	e004      	b.n	8007a40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d903      	bls.n	8007a52 <pvPortMalloc+0xa6>
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f1      	bne.n	8007a36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a52:	4b37      	ldr	r3, [pc, #220]	@ (8007b30 <pvPortMalloc+0x184>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d051      	beq.n	8007b00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2208      	movs	r2, #8
 8007a62:	4413      	add	r3, r2
 8007a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	1ad2      	subs	r2, r2, r3
 8007a76:	2308      	movs	r3, #8
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d920      	bls.n	8007ac0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4413      	add	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <pvPortMalloc+0xfc>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007aba:	69b8      	ldr	r0, [r7, #24]
 8007abc:	f000 f90a 	bl	8007cd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b38 <pvPortMalloc+0x18c>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <pvPortMalloc+0x18c>)
 8007acc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ace:	4b1a      	ldr	r3, [pc, #104]	@ (8007b38 <pvPortMalloc+0x18c>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b40 <pvPortMalloc+0x194>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d203      	bcs.n	8007ae2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ada:	4b17      	ldr	r3, [pc, #92]	@ (8007b38 <pvPortMalloc+0x18c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <pvPortMalloc+0x194>)
 8007ae0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	4b13      	ldr	r3, [pc, #76]	@ (8007b34 <pvPortMalloc+0x188>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007af6:	4b13      	ldr	r3, [pc, #76]	@ (8007b44 <pvPortMalloc+0x198>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	4a11      	ldr	r2, [pc, #68]	@ (8007b44 <pvPortMalloc+0x198>)
 8007afe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b00:	f7fe fb9e 	bl	8006240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <pvPortMalloc+0x17a>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	60fb      	str	r3, [r7, #12]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <pvPortMalloc+0x176>
	return pvReturn;
 8007b26:	69fb      	ldr	r3, [r7, #28]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3728      	adds	r7, #40	@ 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20004c7c 	.word	0x20004c7c
 8007b34:	20004c90 	.word	0x20004c90
 8007b38:	20004c80 	.word	0x20004c80
 8007b3c:	20004c74 	.word	0x20004c74
 8007b40:	20004c84 	.word	0x20004c84
 8007b44:	20004c88 	.word	0x20004c88

08007b48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d04f      	beq.n	8007bfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	425b      	negs	r3, r3
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	4413      	add	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	4b25      	ldr	r3, [pc, #148]	@ (8007c04 <vPortFree+0xbc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <vPortFree+0x46>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60fb      	str	r3, [r7, #12]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00b      	beq.n	8007bae <vPortFree+0x66>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60bb      	str	r3, [r7, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	4b14      	ldr	r3, [pc, #80]	@ (8007c04 <vPortFree+0xbc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01e      	beq.n	8007bfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d11a      	bne.n	8007bfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c04 <vPortFree+0xbc>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	401a      	ands	r2, r3
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bd4:	f7fe fb26 	bl	8006224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c08 <vPortFree+0xc0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4413      	add	r3, r2
 8007be2:	4a09      	ldr	r2, [pc, #36]	@ (8007c08 <vPortFree+0xc0>)
 8007be4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007be6:	6938      	ldr	r0, [r7, #16]
 8007be8:	f000 f874 	bl	8007cd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bec:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <vPortFree+0xc4>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	4a06      	ldr	r2, [pc, #24]	@ (8007c0c <vPortFree+0xc4>)
 8007bf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bf6:	f7fe fb23 	bl	8006240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bfa:	bf00      	nop
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20004c90 	.word	0x20004c90
 8007c08:	20004c80 	.word	0x20004c80
 8007c0c:	20004c8c 	.word	0x20004c8c

08007c10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c1c:	4b27      	ldr	r3, [pc, #156]	@ (8007cbc <prvHeapInit+0xac>)
 8007c1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00c      	beq.n	8007c44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3307      	adds	r3, #7
 8007c2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0307 	bic.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cbc <prvHeapInit+0xac>)
 8007c40:	4413      	add	r3, r2
 8007c42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c48:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc0 <prvHeapInit+0xb0>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc0 <prvHeapInit+0xb0>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	4413      	add	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c5c:	2208      	movs	r2, #8
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0307 	bic.w	r3, r3, #7
 8007c6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <prvHeapInit+0xb4>)
 8007c70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c72:	4b14      	ldr	r3, [pc, #80]	@ (8007cc4 <prvHeapInit+0xb4>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c7a:	4b12      	ldr	r3, [pc, #72]	@ (8007cc4 <prvHeapInit+0xb4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	1ad2      	subs	r2, r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c90:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc4 <prvHeapInit+0xb4>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007cc8 <prvHeapInit+0xb8>)
 8007c9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4a09      	ldr	r2, [pc, #36]	@ (8007ccc <prvHeapInit+0xbc>)
 8007ca6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ca8:	4b09      	ldr	r3, [pc, #36]	@ (8007cd0 <prvHeapInit+0xc0>)
 8007caa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cae:	601a      	str	r2, [r3, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20001074 	.word	0x20001074
 8007cc0:	20004c74 	.word	0x20004c74
 8007cc4:	20004c7c 	.word	0x20004c7c
 8007cc8:	20004c84 	.word	0x20004c84
 8007ccc:	20004c80 	.word	0x20004c80
 8007cd0:	20004c90 	.word	0x20004c90

08007cd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cdc:	4b28      	ldr	r3, [pc, #160]	@ (8007d80 <prvInsertBlockIntoFreeList+0xac>)
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e002      	b.n	8007ce8 <prvInsertBlockIntoFreeList+0x14>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d8f7      	bhi.n	8007ce2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d108      	bne.n	8007d16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d118      	bne.n	8007d5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b15      	ldr	r3, [pc, #84]	@ (8007d84 <prvInsertBlockIntoFreeList+0xb0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d00d      	beq.n	8007d52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	441a      	add	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e008      	b.n	8007d64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d52:	4b0c      	ldr	r3, [pc, #48]	@ (8007d84 <prvInsertBlockIntoFreeList+0xb0>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	e003      	b.n	8007d64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d002      	beq.n	8007d72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20004c74 	.word	0x20004c74
 8007d84:	20004c7c 	.word	0x20004c7c

08007d88 <sniprintf>:
 8007d88:	b40c      	push	{r2, r3}
 8007d8a:	b530      	push	{r4, r5, lr}
 8007d8c:	4b17      	ldr	r3, [pc, #92]	@ (8007dec <sniprintf+0x64>)
 8007d8e:	1e0c      	subs	r4, r1, #0
 8007d90:	681d      	ldr	r5, [r3, #0]
 8007d92:	b09d      	sub	sp, #116	@ 0x74
 8007d94:	da08      	bge.n	8007da8 <sniprintf+0x20>
 8007d96:	238b      	movs	r3, #139	@ 0x8b
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9e:	b01d      	add	sp, #116	@ 0x74
 8007da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da4:	b002      	add	sp, #8
 8007da6:	4770      	bx	lr
 8007da8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007dac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007db0:	bf14      	ite	ne
 8007db2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007db6:	4623      	moveq	r3, r4
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	9307      	str	r3, [sp, #28]
 8007dbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dc0:	9002      	str	r0, [sp, #8]
 8007dc2:	9006      	str	r0, [sp, #24]
 8007dc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dca:	ab21      	add	r3, sp, #132	@ 0x84
 8007dcc:	a902      	add	r1, sp, #8
 8007dce:	4628      	mov	r0, r5
 8007dd0:	9301      	str	r3, [sp, #4]
 8007dd2:	f000 f9f9 	bl	80081c8 <_svfiprintf_r>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	bfbc      	itt	lt
 8007dda:	238b      	movlt	r3, #139	@ 0x8b
 8007ddc:	602b      	strlt	r3, [r5, #0]
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	d0dd      	beq.n	8007d9e <sniprintf+0x16>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	e7d9      	b.n	8007d9e <sniprintf+0x16>
 8007dea:	bf00      	nop
 8007dec:	20000094 	.word	0x20000094

08007df0 <memset>:
 8007df0:	4402      	add	r2, r0
 8007df2:	4603      	mov	r3, r0
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d100      	bne.n	8007dfa <memset+0xa>
 8007df8:	4770      	bx	lr
 8007dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfe:	e7f9      	b.n	8007df4 <memset+0x4>

08007e00 <_reclaim_reent>:
 8007e00:	4b29      	ldr	r3, [pc, #164]	@ (8007ea8 <_reclaim_reent+0xa8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4283      	cmp	r3, r0
 8007e06:	b570      	push	{r4, r5, r6, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	d04b      	beq.n	8007ea4 <_reclaim_reent+0xa4>
 8007e0c:	69c3      	ldr	r3, [r0, #28]
 8007e0e:	b1ab      	cbz	r3, 8007e3c <_reclaim_reent+0x3c>
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	b16b      	cbz	r3, 8007e30 <_reclaim_reent+0x30>
 8007e14:	2500      	movs	r5, #0
 8007e16:	69e3      	ldr	r3, [r4, #28]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	5959      	ldr	r1, [r3, r5]
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d13b      	bne.n	8007e98 <_reclaim_reent+0x98>
 8007e20:	3504      	adds	r5, #4
 8007e22:	2d80      	cmp	r5, #128	@ 0x80
 8007e24:	d1f7      	bne.n	8007e16 <_reclaim_reent+0x16>
 8007e26:	69e3      	ldr	r3, [r4, #28]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	68d9      	ldr	r1, [r3, #12]
 8007e2c:	f000 f878 	bl	8007f20 <_free_r>
 8007e30:	69e3      	ldr	r3, [r4, #28]
 8007e32:	6819      	ldr	r1, [r3, #0]
 8007e34:	b111      	cbz	r1, 8007e3c <_reclaim_reent+0x3c>
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 f872 	bl	8007f20 <_free_r>
 8007e3c:	6961      	ldr	r1, [r4, #20]
 8007e3e:	b111      	cbz	r1, 8007e46 <_reclaim_reent+0x46>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 f86d 	bl	8007f20 <_free_r>
 8007e46:	69e1      	ldr	r1, [r4, #28]
 8007e48:	b111      	cbz	r1, 8007e50 <_reclaim_reent+0x50>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f868 	bl	8007f20 <_free_r>
 8007e50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007e52:	b111      	cbz	r1, 8007e5a <_reclaim_reent+0x5a>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f863 	bl	8007f20 <_free_r>
 8007e5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e5c:	b111      	cbz	r1, 8007e64 <_reclaim_reent+0x64>
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 f85e 	bl	8007f20 <_free_r>
 8007e64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007e66:	b111      	cbz	r1, 8007e6e <_reclaim_reent+0x6e>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 f859 	bl	8007f20 <_free_r>
 8007e6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007e70:	b111      	cbz	r1, 8007e78 <_reclaim_reent+0x78>
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f854 	bl	8007f20 <_free_r>
 8007e78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007e7a:	b111      	cbz	r1, 8007e82 <_reclaim_reent+0x82>
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 f84f 	bl	8007f20 <_free_r>
 8007e82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007e84:	b111      	cbz	r1, 8007e8c <_reclaim_reent+0x8c>
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 f84a 	bl	8007f20 <_free_r>
 8007e8c:	6a23      	ldr	r3, [r4, #32]
 8007e8e:	b14b      	cbz	r3, 8007ea4 <_reclaim_reent+0xa4>
 8007e90:	4620      	mov	r0, r4
 8007e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e96:	4718      	bx	r3
 8007e98:	680e      	ldr	r6, [r1, #0]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f840 	bl	8007f20 <_free_r>
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	e7bb      	b.n	8007e1c <_reclaim_reent+0x1c>
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000094 	.word	0x20000094

08007eac <__errno>:
 8007eac:	4b01      	ldr	r3, [pc, #4]	@ (8007eb4 <__errno+0x8>)
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000094 	.word	0x20000094

08007eb8 <__libc_init_array>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4d0d      	ldr	r5, [pc, #52]	@ (8007ef0 <__libc_init_array+0x38>)
 8007ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8007ef4 <__libc_init_array+0x3c>)
 8007ebe:	1b64      	subs	r4, r4, r5
 8007ec0:	10a4      	asrs	r4, r4, #2
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	d109      	bne.n	8007edc <__libc_init_array+0x24>
 8007ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ef8 <__libc_init_array+0x40>)
 8007eca:	4c0c      	ldr	r4, [pc, #48]	@ (8007efc <__libc_init_array+0x44>)
 8007ecc:	f000 fc66 	bl	800879c <_init>
 8007ed0:	1b64      	subs	r4, r4, r5
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	42a6      	cmp	r6, r4
 8007ed8:	d105      	bne.n	8007ee6 <__libc_init_array+0x2e>
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee0:	4798      	blx	r3
 8007ee2:	3601      	adds	r6, #1
 8007ee4:	e7ee      	b.n	8007ec4 <__libc_init_array+0xc>
 8007ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eea:	4798      	blx	r3
 8007eec:	3601      	adds	r6, #1
 8007eee:	e7f2      	b.n	8007ed6 <__libc_init_array+0x1e>
 8007ef0:	080089b8 	.word	0x080089b8
 8007ef4:	080089b8 	.word	0x080089b8
 8007ef8:	080089b8 	.word	0x080089b8
 8007efc:	080089bc 	.word	0x080089bc

08007f00 <__retarget_lock_acquire_recursive>:
 8007f00:	4770      	bx	lr

08007f02 <__retarget_lock_release_recursive>:
 8007f02:	4770      	bx	lr

08007f04 <memcpy>:
 8007f04:	440a      	add	r2, r1
 8007f06:	4291      	cmp	r1, r2
 8007f08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f0c:	d100      	bne.n	8007f10 <memcpy+0xc>
 8007f0e:	4770      	bx	lr
 8007f10:	b510      	push	{r4, lr}
 8007f12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f1a:	4291      	cmp	r1, r2
 8007f1c:	d1f9      	bne.n	8007f12 <memcpy+0xe>
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <_free_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4605      	mov	r5, r0
 8007f24:	2900      	cmp	r1, #0
 8007f26:	d041      	beq.n	8007fac <_free_r+0x8c>
 8007f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f2c:	1f0c      	subs	r4, r1, #4
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bfb8      	it	lt
 8007f32:	18e4      	addlt	r4, r4, r3
 8007f34:	f000 f8e0 	bl	80080f8 <__malloc_lock>
 8007f38:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <_free_r+0x90>)
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	b933      	cbnz	r3, 8007f4c <_free_r+0x2c>
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6014      	str	r4, [r2, #0]
 8007f42:	4628      	mov	r0, r5
 8007f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f48:	f000 b8dc 	b.w	8008104 <__malloc_unlock>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d908      	bls.n	8007f62 <_free_r+0x42>
 8007f50:	6820      	ldr	r0, [r4, #0]
 8007f52:	1821      	adds	r1, r4, r0
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf01      	itttt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	1809      	addeq	r1, r1, r0
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	e7ed      	b.n	8007f3e <_free_r+0x1e>
 8007f62:	461a      	mov	r2, r3
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b10b      	cbz	r3, 8007f6c <_free_r+0x4c>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d9fa      	bls.n	8007f62 <_free_r+0x42>
 8007f6c:	6811      	ldr	r1, [r2, #0]
 8007f6e:	1850      	adds	r0, r2, r1
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d10b      	bne.n	8007f8c <_free_r+0x6c>
 8007f74:	6820      	ldr	r0, [r4, #0]
 8007f76:	4401      	add	r1, r0
 8007f78:	1850      	adds	r0, r2, r1
 8007f7a:	4283      	cmp	r3, r0
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	d1e0      	bne.n	8007f42 <_free_r+0x22>
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	4408      	add	r0, r1
 8007f88:	6010      	str	r0, [r2, #0]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0x22>
 8007f8c:	d902      	bls.n	8007f94 <_free_r+0x74>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	e7d6      	b.n	8007f42 <_free_r+0x22>
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	1821      	adds	r1, r4, r0
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf04      	itt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	bf04      	itt	eq
 8007fa4:	1809      	addeq	r1, r1, r0
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	6054      	str	r4, [r2, #4]
 8007faa:	e7ca      	b.n	8007f42 <_free_r+0x22>
 8007fac:	bd38      	pop	{r3, r4, r5, pc}
 8007fae:	bf00      	nop
 8007fb0:	20004dd8 	.word	0x20004dd8

08007fb4 <sbrk_aligned>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ff4 <sbrk_aligned+0x40>)
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6831      	ldr	r1, [r6, #0]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b911      	cbnz	r1, 8007fc6 <sbrk_aligned+0x12>
 8007fc0:	f000 fba6 	bl	8008710 <_sbrk_r>
 8007fc4:	6030      	str	r0, [r6, #0]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 fba1 	bl	8008710 <_sbrk_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d103      	bne.n	8007fda <sbrk_aligned+0x26>
 8007fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	bd70      	pop	{r4, r5, r6, pc}
 8007fda:	1cc4      	adds	r4, r0, #3
 8007fdc:	f024 0403 	bic.w	r4, r4, #3
 8007fe0:	42a0      	cmp	r0, r4
 8007fe2:	d0f8      	beq.n	8007fd6 <sbrk_aligned+0x22>
 8007fe4:	1a21      	subs	r1, r4, r0
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 fb92 	bl	8008710 <_sbrk_r>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d1f2      	bne.n	8007fd6 <sbrk_aligned+0x22>
 8007ff0:	e7ef      	b.n	8007fd2 <sbrk_aligned+0x1e>
 8007ff2:	bf00      	nop
 8007ff4:	20004dd4 	.word	0x20004dd4

08007ff8 <_malloc_r>:
 8007ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ffc:	1ccd      	adds	r5, r1, #3
 8007ffe:	f025 0503 	bic.w	r5, r5, #3
 8008002:	3508      	adds	r5, #8
 8008004:	2d0c      	cmp	r5, #12
 8008006:	bf38      	it	cc
 8008008:	250c      	movcc	r5, #12
 800800a:	2d00      	cmp	r5, #0
 800800c:	4606      	mov	r6, r0
 800800e:	db01      	blt.n	8008014 <_malloc_r+0x1c>
 8008010:	42a9      	cmp	r1, r5
 8008012:	d904      	bls.n	800801e <_malloc_r+0x26>
 8008014:	230c      	movs	r3, #12
 8008016:	6033      	str	r3, [r6, #0]
 8008018:	2000      	movs	r0, #0
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080f4 <_malloc_r+0xfc>
 8008022:	f000 f869 	bl	80080f8 <__malloc_lock>
 8008026:	f8d8 3000 	ldr.w	r3, [r8]
 800802a:	461c      	mov	r4, r3
 800802c:	bb44      	cbnz	r4, 8008080 <_malloc_r+0x88>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff ffbf 	bl	8007fb4 <sbrk_aligned>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	4604      	mov	r4, r0
 800803a:	d158      	bne.n	80080ee <_malloc_r+0xf6>
 800803c:	f8d8 4000 	ldr.w	r4, [r8]
 8008040:	4627      	mov	r7, r4
 8008042:	2f00      	cmp	r7, #0
 8008044:	d143      	bne.n	80080ce <_malloc_r+0xd6>
 8008046:	2c00      	cmp	r4, #0
 8008048:	d04b      	beq.n	80080e2 <_malloc_r+0xea>
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	4639      	mov	r1, r7
 800804e:	4630      	mov	r0, r6
 8008050:	eb04 0903 	add.w	r9, r4, r3
 8008054:	f000 fb5c 	bl	8008710 <_sbrk_r>
 8008058:	4581      	cmp	r9, r0
 800805a:	d142      	bne.n	80080e2 <_malloc_r+0xea>
 800805c:	6821      	ldr	r1, [r4, #0]
 800805e:	1a6d      	subs	r5, r5, r1
 8008060:	4629      	mov	r1, r5
 8008062:	4630      	mov	r0, r6
 8008064:	f7ff ffa6 	bl	8007fb4 <sbrk_aligned>
 8008068:	3001      	adds	r0, #1
 800806a:	d03a      	beq.n	80080e2 <_malloc_r+0xea>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	442b      	add	r3, r5
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	f8d8 3000 	ldr.w	r3, [r8]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	bb62      	cbnz	r2, 80080d4 <_malloc_r+0xdc>
 800807a:	f8c8 7000 	str.w	r7, [r8]
 800807e:	e00f      	b.n	80080a0 <_malloc_r+0xa8>
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	1b52      	subs	r2, r2, r5
 8008084:	d420      	bmi.n	80080c8 <_malloc_r+0xd0>
 8008086:	2a0b      	cmp	r2, #11
 8008088:	d917      	bls.n	80080ba <_malloc_r+0xc2>
 800808a:	1961      	adds	r1, r4, r5
 800808c:	42a3      	cmp	r3, r4
 800808e:	6025      	str	r5, [r4, #0]
 8008090:	bf18      	it	ne
 8008092:	6059      	strne	r1, [r3, #4]
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	bf08      	it	eq
 8008098:	f8c8 1000 	streq.w	r1, [r8]
 800809c:	5162      	str	r2, [r4, r5]
 800809e:	604b      	str	r3, [r1, #4]
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 f82f 	bl	8008104 <__malloc_unlock>
 80080a6:	f104 000b 	add.w	r0, r4, #11
 80080aa:	1d23      	adds	r3, r4, #4
 80080ac:	f020 0007 	bic.w	r0, r0, #7
 80080b0:	1ac2      	subs	r2, r0, r3
 80080b2:	bf1c      	itt	ne
 80080b4:	1a1b      	subne	r3, r3, r0
 80080b6:	50a3      	strne	r3, [r4, r2]
 80080b8:	e7af      	b.n	800801a <_malloc_r+0x22>
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	42a3      	cmp	r3, r4
 80080be:	bf0c      	ite	eq
 80080c0:	f8c8 2000 	streq.w	r2, [r8]
 80080c4:	605a      	strne	r2, [r3, #4]
 80080c6:	e7eb      	b.n	80080a0 <_malloc_r+0xa8>
 80080c8:	4623      	mov	r3, r4
 80080ca:	6864      	ldr	r4, [r4, #4]
 80080cc:	e7ae      	b.n	800802c <_malloc_r+0x34>
 80080ce:	463c      	mov	r4, r7
 80080d0:	687f      	ldr	r7, [r7, #4]
 80080d2:	e7b6      	b.n	8008042 <_malloc_r+0x4a>
 80080d4:	461a      	mov	r2, r3
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	42a3      	cmp	r3, r4
 80080da:	d1fb      	bne.n	80080d4 <_malloc_r+0xdc>
 80080dc:	2300      	movs	r3, #0
 80080de:	6053      	str	r3, [r2, #4]
 80080e0:	e7de      	b.n	80080a0 <_malloc_r+0xa8>
 80080e2:	230c      	movs	r3, #12
 80080e4:	6033      	str	r3, [r6, #0]
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 f80c 	bl	8008104 <__malloc_unlock>
 80080ec:	e794      	b.n	8008018 <_malloc_r+0x20>
 80080ee:	6005      	str	r5, [r0, #0]
 80080f0:	e7d6      	b.n	80080a0 <_malloc_r+0xa8>
 80080f2:	bf00      	nop
 80080f4:	20004dd8 	.word	0x20004dd8

080080f8 <__malloc_lock>:
 80080f8:	4801      	ldr	r0, [pc, #4]	@ (8008100 <__malloc_lock+0x8>)
 80080fa:	f7ff bf01 	b.w	8007f00 <__retarget_lock_acquire_recursive>
 80080fe:	bf00      	nop
 8008100:	20004dd0 	.word	0x20004dd0

08008104 <__malloc_unlock>:
 8008104:	4801      	ldr	r0, [pc, #4]	@ (800810c <__malloc_unlock+0x8>)
 8008106:	f7ff befc 	b.w	8007f02 <__retarget_lock_release_recursive>
 800810a:	bf00      	nop
 800810c:	20004dd0 	.word	0x20004dd0

08008110 <__ssputs_r>:
 8008110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	688e      	ldr	r6, [r1, #8]
 8008116:	461f      	mov	r7, r3
 8008118:	42be      	cmp	r6, r7
 800811a:	680b      	ldr	r3, [r1, #0]
 800811c:	4682      	mov	sl, r0
 800811e:	460c      	mov	r4, r1
 8008120:	4690      	mov	r8, r2
 8008122:	d82d      	bhi.n	8008180 <__ssputs_r+0x70>
 8008124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800812c:	d026      	beq.n	800817c <__ssputs_r+0x6c>
 800812e:	6965      	ldr	r5, [r4, #20]
 8008130:	6909      	ldr	r1, [r1, #16]
 8008132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008136:	eba3 0901 	sub.w	r9, r3, r1
 800813a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800813e:	1c7b      	adds	r3, r7, #1
 8008140:	444b      	add	r3, r9
 8008142:	106d      	asrs	r5, r5, #1
 8008144:	429d      	cmp	r5, r3
 8008146:	bf38      	it	cc
 8008148:	461d      	movcc	r5, r3
 800814a:	0553      	lsls	r3, r2, #21
 800814c:	d527      	bpl.n	800819e <__ssputs_r+0x8e>
 800814e:	4629      	mov	r1, r5
 8008150:	f7ff ff52 	bl	8007ff8 <_malloc_r>
 8008154:	4606      	mov	r6, r0
 8008156:	b360      	cbz	r0, 80081b2 <__ssputs_r+0xa2>
 8008158:	6921      	ldr	r1, [r4, #16]
 800815a:	464a      	mov	r2, r9
 800815c:	f7ff fed2 	bl	8007f04 <memcpy>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	6126      	str	r6, [r4, #16]
 800816e:	6165      	str	r5, [r4, #20]
 8008170:	444e      	add	r6, r9
 8008172:	eba5 0509 	sub.w	r5, r5, r9
 8008176:	6026      	str	r6, [r4, #0]
 8008178:	60a5      	str	r5, [r4, #8]
 800817a:	463e      	mov	r6, r7
 800817c:	42be      	cmp	r6, r7
 800817e:	d900      	bls.n	8008182 <__ssputs_r+0x72>
 8008180:	463e      	mov	r6, r7
 8008182:	6820      	ldr	r0, [r4, #0]
 8008184:	4632      	mov	r2, r6
 8008186:	4641      	mov	r1, r8
 8008188:	f000 faa8 	bl	80086dc <memmove>
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	1b9b      	subs	r3, r3, r6
 8008190:	60a3      	str	r3, [r4, #8]
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	4433      	add	r3, r6
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	2000      	movs	r0, #0
 800819a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819e:	462a      	mov	r2, r5
 80081a0:	f000 fac6 	bl	8008730 <_realloc_r>
 80081a4:	4606      	mov	r6, r0
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d1e0      	bne.n	800816c <__ssputs_r+0x5c>
 80081aa:	6921      	ldr	r1, [r4, #16]
 80081ac:	4650      	mov	r0, sl
 80081ae:	f7ff feb7 	bl	8007f20 <_free_r>
 80081b2:	230c      	movs	r3, #12
 80081b4:	f8ca 3000 	str.w	r3, [sl]
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	e7e9      	b.n	800819a <__ssputs_r+0x8a>
	...

080081c8 <_svfiprintf_r>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4698      	mov	r8, r3
 80081ce:	898b      	ldrh	r3, [r1, #12]
 80081d0:	061b      	lsls	r3, r3, #24
 80081d2:	b09d      	sub	sp, #116	@ 0x74
 80081d4:	4607      	mov	r7, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	d510      	bpl.n	80081fe <_svfiprintf_r+0x36>
 80081dc:	690b      	ldr	r3, [r1, #16]
 80081de:	b973      	cbnz	r3, 80081fe <_svfiprintf_r+0x36>
 80081e0:	2140      	movs	r1, #64	@ 0x40
 80081e2:	f7ff ff09 	bl	8007ff8 <_malloc_r>
 80081e6:	6028      	str	r0, [r5, #0]
 80081e8:	6128      	str	r0, [r5, #16]
 80081ea:	b930      	cbnz	r0, 80081fa <_svfiprintf_r+0x32>
 80081ec:	230c      	movs	r3, #12
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	b01d      	add	sp, #116	@ 0x74
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	2340      	movs	r3, #64	@ 0x40
 80081fc:	616b      	str	r3, [r5, #20]
 80081fe:	2300      	movs	r3, #0
 8008200:	9309      	str	r3, [sp, #36]	@ 0x24
 8008202:	2320      	movs	r3, #32
 8008204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008208:	f8cd 800c 	str.w	r8, [sp, #12]
 800820c:	2330      	movs	r3, #48	@ 0x30
 800820e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083ac <_svfiprintf_r+0x1e4>
 8008212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008216:	f04f 0901 	mov.w	r9, #1
 800821a:	4623      	mov	r3, r4
 800821c:	469a      	mov	sl, r3
 800821e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008222:	b10a      	cbz	r2, 8008228 <_svfiprintf_r+0x60>
 8008224:	2a25      	cmp	r2, #37	@ 0x25
 8008226:	d1f9      	bne.n	800821c <_svfiprintf_r+0x54>
 8008228:	ebba 0b04 	subs.w	fp, sl, r4
 800822c:	d00b      	beq.n	8008246 <_svfiprintf_r+0x7e>
 800822e:	465b      	mov	r3, fp
 8008230:	4622      	mov	r2, r4
 8008232:	4629      	mov	r1, r5
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff ff6b 	bl	8008110 <__ssputs_r>
 800823a:	3001      	adds	r0, #1
 800823c:	f000 80a7 	beq.w	800838e <_svfiprintf_r+0x1c6>
 8008240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008242:	445a      	add	r2, fp
 8008244:	9209      	str	r2, [sp, #36]	@ 0x24
 8008246:	f89a 3000 	ldrb.w	r3, [sl]
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 809f 	beq.w	800838e <_svfiprintf_r+0x1c6>
 8008250:	2300      	movs	r3, #0
 8008252:	f04f 32ff 	mov.w	r2, #4294967295
 8008256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800825a:	f10a 0a01 	add.w	sl, sl, #1
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	9307      	str	r3, [sp, #28]
 8008262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008266:	931a      	str	r3, [sp, #104]	@ 0x68
 8008268:	4654      	mov	r4, sl
 800826a:	2205      	movs	r2, #5
 800826c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008270:	484e      	ldr	r0, [pc, #312]	@ (80083ac <_svfiprintf_r+0x1e4>)
 8008272:	f7f7 ffbd 	bl	80001f0 <memchr>
 8008276:	9a04      	ldr	r2, [sp, #16]
 8008278:	b9d8      	cbnz	r0, 80082b2 <_svfiprintf_r+0xea>
 800827a:	06d0      	lsls	r0, r2, #27
 800827c:	bf44      	itt	mi
 800827e:	2320      	movmi	r3, #32
 8008280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008284:	0711      	lsls	r1, r2, #28
 8008286:	bf44      	itt	mi
 8008288:	232b      	movmi	r3, #43	@ 0x2b
 800828a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800828e:	f89a 3000 	ldrb.w	r3, [sl]
 8008292:	2b2a      	cmp	r3, #42	@ 0x2a
 8008294:	d015      	beq.n	80082c2 <_svfiprintf_r+0xfa>
 8008296:	9a07      	ldr	r2, [sp, #28]
 8008298:	4654      	mov	r4, sl
 800829a:	2000      	movs	r0, #0
 800829c:	f04f 0c0a 	mov.w	ip, #10
 80082a0:	4621      	mov	r1, r4
 80082a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a6:	3b30      	subs	r3, #48	@ 0x30
 80082a8:	2b09      	cmp	r3, #9
 80082aa:	d94b      	bls.n	8008344 <_svfiprintf_r+0x17c>
 80082ac:	b1b0      	cbz	r0, 80082dc <_svfiprintf_r+0x114>
 80082ae:	9207      	str	r2, [sp, #28]
 80082b0:	e014      	b.n	80082dc <_svfiprintf_r+0x114>
 80082b2:	eba0 0308 	sub.w	r3, r0, r8
 80082b6:	fa09 f303 	lsl.w	r3, r9, r3
 80082ba:	4313      	orrs	r3, r2
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	46a2      	mov	sl, r4
 80082c0:	e7d2      	b.n	8008268 <_svfiprintf_r+0xa0>
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	1d19      	adds	r1, r3, #4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	9103      	str	r1, [sp, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bfbb      	ittet	lt
 80082ce:	425b      	neglt	r3, r3
 80082d0:	f042 0202 	orrlt.w	r2, r2, #2
 80082d4:	9307      	strge	r3, [sp, #28]
 80082d6:	9307      	strlt	r3, [sp, #28]
 80082d8:	bfb8      	it	lt
 80082da:	9204      	strlt	r2, [sp, #16]
 80082dc:	7823      	ldrb	r3, [r4, #0]
 80082de:	2b2e      	cmp	r3, #46	@ 0x2e
 80082e0:	d10a      	bne.n	80082f8 <_svfiprintf_r+0x130>
 80082e2:	7863      	ldrb	r3, [r4, #1]
 80082e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e6:	d132      	bne.n	800834e <_svfiprintf_r+0x186>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	1d1a      	adds	r2, r3, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	9203      	str	r2, [sp, #12]
 80082f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082f4:	3402      	adds	r4, #2
 80082f6:	9305      	str	r3, [sp, #20]
 80082f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083bc <_svfiprintf_r+0x1f4>
 80082fc:	7821      	ldrb	r1, [r4, #0]
 80082fe:	2203      	movs	r2, #3
 8008300:	4650      	mov	r0, sl
 8008302:	f7f7 ff75 	bl	80001f0 <memchr>
 8008306:	b138      	cbz	r0, 8008318 <_svfiprintf_r+0x150>
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	eba0 000a 	sub.w	r0, r0, sl
 800830e:	2240      	movs	r2, #64	@ 0x40
 8008310:	4082      	lsls	r2, r0
 8008312:	4313      	orrs	r3, r2
 8008314:	3401      	adds	r4, #1
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831c:	4824      	ldr	r0, [pc, #144]	@ (80083b0 <_svfiprintf_r+0x1e8>)
 800831e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008322:	2206      	movs	r2, #6
 8008324:	f7f7 ff64 	bl	80001f0 <memchr>
 8008328:	2800      	cmp	r0, #0
 800832a:	d036      	beq.n	800839a <_svfiprintf_r+0x1d2>
 800832c:	4b21      	ldr	r3, [pc, #132]	@ (80083b4 <_svfiprintf_r+0x1ec>)
 800832e:	bb1b      	cbnz	r3, 8008378 <_svfiprintf_r+0x1b0>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	3308      	adds	r3, #8
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833e:	4433      	add	r3, r6
 8008340:	9309      	str	r3, [sp, #36]	@ 0x24
 8008342:	e76a      	b.n	800821a <_svfiprintf_r+0x52>
 8008344:	fb0c 3202 	mla	r2, ip, r2, r3
 8008348:	460c      	mov	r4, r1
 800834a:	2001      	movs	r0, #1
 800834c:	e7a8      	b.n	80082a0 <_svfiprintf_r+0xd8>
 800834e:	2300      	movs	r3, #0
 8008350:	3401      	adds	r4, #1
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	4619      	mov	r1, r3
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	4620      	mov	r0, r4
 800835c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008360:	3a30      	subs	r2, #48	@ 0x30
 8008362:	2a09      	cmp	r2, #9
 8008364:	d903      	bls.n	800836e <_svfiprintf_r+0x1a6>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0c6      	beq.n	80082f8 <_svfiprintf_r+0x130>
 800836a:	9105      	str	r1, [sp, #20]
 800836c:	e7c4      	b.n	80082f8 <_svfiprintf_r+0x130>
 800836e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008372:	4604      	mov	r4, r0
 8008374:	2301      	movs	r3, #1
 8008376:	e7f0      	b.n	800835a <_svfiprintf_r+0x192>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462a      	mov	r2, r5
 800837e:	4b0e      	ldr	r3, [pc, #56]	@ (80083b8 <_svfiprintf_r+0x1f0>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4638      	mov	r0, r7
 8008384:	f3af 8000 	nop.w
 8008388:	1c42      	adds	r2, r0, #1
 800838a:	4606      	mov	r6, r0
 800838c:	d1d6      	bne.n	800833c <_svfiprintf_r+0x174>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	065b      	lsls	r3, r3, #25
 8008392:	f53f af2d 	bmi.w	80081f0 <_svfiprintf_r+0x28>
 8008396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008398:	e72c      	b.n	80081f4 <_svfiprintf_r+0x2c>
 800839a:	ab03      	add	r3, sp, #12
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	462a      	mov	r2, r5
 80083a0:	4b05      	ldr	r3, [pc, #20]	@ (80083b8 <_svfiprintf_r+0x1f0>)
 80083a2:	a904      	add	r1, sp, #16
 80083a4:	4638      	mov	r0, r7
 80083a6:	f000 f879 	bl	800849c <_printf_i>
 80083aa:	e7ed      	b.n	8008388 <_svfiprintf_r+0x1c0>
 80083ac:	0800897c 	.word	0x0800897c
 80083b0:	08008986 	.word	0x08008986
 80083b4:	00000000 	.word	0x00000000
 80083b8:	08008111 	.word	0x08008111
 80083bc:	08008982 	.word	0x08008982

080083c0 <_printf_common>:
 80083c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c4:	4616      	mov	r6, r2
 80083c6:	4698      	mov	r8, r3
 80083c8:	688a      	ldr	r2, [r1, #8]
 80083ca:	690b      	ldr	r3, [r1, #16]
 80083cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083d0:	4293      	cmp	r3, r2
 80083d2:	bfb8      	it	lt
 80083d4:	4613      	movlt	r3, r2
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083dc:	4607      	mov	r7, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	b10a      	cbz	r2, 80083e6 <_printf_common+0x26>
 80083e2:	3301      	adds	r3, #1
 80083e4:	6033      	str	r3, [r6, #0]
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	0699      	lsls	r1, r3, #26
 80083ea:	bf42      	ittt	mi
 80083ec:	6833      	ldrmi	r3, [r6, #0]
 80083ee:	3302      	addmi	r3, #2
 80083f0:	6033      	strmi	r3, [r6, #0]
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	f015 0506 	ands.w	r5, r5, #6
 80083f8:	d106      	bne.n	8008408 <_printf_common+0x48>
 80083fa:	f104 0a19 	add.w	sl, r4, #25
 80083fe:	68e3      	ldr	r3, [r4, #12]
 8008400:	6832      	ldr	r2, [r6, #0]
 8008402:	1a9b      	subs	r3, r3, r2
 8008404:	42ab      	cmp	r3, r5
 8008406:	dc26      	bgt.n	8008456 <_printf_common+0x96>
 8008408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800840c:	6822      	ldr	r2, [r4, #0]
 800840e:	3b00      	subs	r3, #0
 8008410:	bf18      	it	ne
 8008412:	2301      	movne	r3, #1
 8008414:	0692      	lsls	r2, r2, #26
 8008416:	d42b      	bmi.n	8008470 <_printf_common+0xb0>
 8008418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800841c:	4641      	mov	r1, r8
 800841e:	4638      	mov	r0, r7
 8008420:	47c8      	blx	r9
 8008422:	3001      	adds	r0, #1
 8008424:	d01e      	beq.n	8008464 <_printf_common+0xa4>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	6922      	ldr	r2, [r4, #16]
 800842a:	f003 0306 	and.w	r3, r3, #6
 800842e:	2b04      	cmp	r3, #4
 8008430:	bf02      	ittt	eq
 8008432:	68e5      	ldreq	r5, [r4, #12]
 8008434:	6833      	ldreq	r3, [r6, #0]
 8008436:	1aed      	subeq	r5, r5, r3
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	bf0c      	ite	eq
 800843c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008440:	2500      	movne	r5, #0
 8008442:	4293      	cmp	r3, r2
 8008444:	bfc4      	itt	gt
 8008446:	1a9b      	subgt	r3, r3, r2
 8008448:	18ed      	addgt	r5, r5, r3
 800844a:	2600      	movs	r6, #0
 800844c:	341a      	adds	r4, #26
 800844e:	42b5      	cmp	r5, r6
 8008450:	d11a      	bne.n	8008488 <_printf_common+0xc8>
 8008452:	2000      	movs	r0, #0
 8008454:	e008      	b.n	8008468 <_printf_common+0xa8>
 8008456:	2301      	movs	r3, #1
 8008458:	4652      	mov	r2, sl
 800845a:	4641      	mov	r1, r8
 800845c:	4638      	mov	r0, r7
 800845e:	47c8      	blx	r9
 8008460:	3001      	adds	r0, #1
 8008462:	d103      	bne.n	800846c <_printf_common+0xac>
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846c:	3501      	adds	r5, #1
 800846e:	e7c6      	b.n	80083fe <_printf_common+0x3e>
 8008470:	18e1      	adds	r1, r4, r3
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	2030      	movs	r0, #48	@ 0x30
 8008476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800847a:	4422      	add	r2, r4
 800847c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008484:	3302      	adds	r3, #2
 8008486:	e7c7      	b.n	8008418 <_printf_common+0x58>
 8008488:	2301      	movs	r3, #1
 800848a:	4622      	mov	r2, r4
 800848c:	4641      	mov	r1, r8
 800848e:	4638      	mov	r0, r7
 8008490:	47c8      	blx	r9
 8008492:	3001      	adds	r0, #1
 8008494:	d0e6      	beq.n	8008464 <_printf_common+0xa4>
 8008496:	3601      	adds	r6, #1
 8008498:	e7d9      	b.n	800844e <_printf_common+0x8e>
	...

0800849c <_printf_i>:
 800849c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	7e0f      	ldrb	r7, [r1, #24]
 80084a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084a4:	2f78      	cmp	r7, #120	@ 0x78
 80084a6:	4691      	mov	r9, r2
 80084a8:	4680      	mov	r8, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	469a      	mov	sl, r3
 80084ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084b2:	d807      	bhi.n	80084c4 <_printf_i+0x28>
 80084b4:	2f62      	cmp	r7, #98	@ 0x62
 80084b6:	d80a      	bhi.n	80084ce <_printf_i+0x32>
 80084b8:	2f00      	cmp	r7, #0
 80084ba:	f000 80d2 	beq.w	8008662 <_printf_i+0x1c6>
 80084be:	2f58      	cmp	r7, #88	@ 0x58
 80084c0:	f000 80b9 	beq.w	8008636 <_printf_i+0x19a>
 80084c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084cc:	e03a      	b.n	8008544 <_printf_i+0xa8>
 80084ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084d2:	2b15      	cmp	r3, #21
 80084d4:	d8f6      	bhi.n	80084c4 <_printf_i+0x28>
 80084d6:	a101      	add	r1, pc, #4	@ (adr r1, 80084dc <_printf_i+0x40>)
 80084d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084dc:	08008535 	.word	0x08008535
 80084e0:	08008549 	.word	0x08008549
 80084e4:	080084c5 	.word	0x080084c5
 80084e8:	080084c5 	.word	0x080084c5
 80084ec:	080084c5 	.word	0x080084c5
 80084f0:	080084c5 	.word	0x080084c5
 80084f4:	08008549 	.word	0x08008549
 80084f8:	080084c5 	.word	0x080084c5
 80084fc:	080084c5 	.word	0x080084c5
 8008500:	080084c5 	.word	0x080084c5
 8008504:	080084c5 	.word	0x080084c5
 8008508:	08008649 	.word	0x08008649
 800850c:	08008573 	.word	0x08008573
 8008510:	08008603 	.word	0x08008603
 8008514:	080084c5 	.word	0x080084c5
 8008518:	080084c5 	.word	0x080084c5
 800851c:	0800866b 	.word	0x0800866b
 8008520:	080084c5 	.word	0x080084c5
 8008524:	08008573 	.word	0x08008573
 8008528:	080084c5 	.word	0x080084c5
 800852c:	080084c5 	.word	0x080084c5
 8008530:	0800860b 	.word	0x0800860b
 8008534:	6833      	ldr	r3, [r6, #0]
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6032      	str	r2, [r6, #0]
 800853c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008544:	2301      	movs	r3, #1
 8008546:	e09d      	b.n	8008684 <_printf_i+0x1e8>
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	6820      	ldr	r0, [r4, #0]
 800854c:	1d19      	adds	r1, r3, #4
 800854e:	6031      	str	r1, [r6, #0]
 8008550:	0606      	lsls	r6, r0, #24
 8008552:	d501      	bpl.n	8008558 <_printf_i+0xbc>
 8008554:	681d      	ldr	r5, [r3, #0]
 8008556:	e003      	b.n	8008560 <_printf_i+0xc4>
 8008558:	0645      	lsls	r5, r0, #25
 800855a:	d5fb      	bpl.n	8008554 <_printf_i+0xb8>
 800855c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008560:	2d00      	cmp	r5, #0
 8008562:	da03      	bge.n	800856c <_printf_i+0xd0>
 8008564:	232d      	movs	r3, #45	@ 0x2d
 8008566:	426d      	negs	r5, r5
 8008568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800856c:	4859      	ldr	r0, [pc, #356]	@ (80086d4 <_printf_i+0x238>)
 800856e:	230a      	movs	r3, #10
 8008570:	e011      	b.n	8008596 <_printf_i+0xfa>
 8008572:	6821      	ldr	r1, [r4, #0]
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	0608      	lsls	r0, r1, #24
 8008578:	f853 5b04 	ldr.w	r5, [r3], #4
 800857c:	d402      	bmi.n	8008584 <_printf_i+0xe8>
 800857e:	0649      	lsls	r1, r1, #25
 8008580:	bf48      	it	mi
 8008582:	b2ad      	uxthmi	r5, r5
 8008584:	2f6f      	cmp	r7, #111	@ 0x6f
 8008586:	4853      	ldr	r0, [pc, #332]	@ (80086d4 <_printf_i+0x238>)
 8008588:	6033      	str	r3, [r6, #0]
 800858a:	bf14      	ite	ne
 800858c:	230a      	movne	r3, #10
 800858e:	2308      	moveq	r3, #8
 8008590:	2100      	movs	r1, #0
 8008592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008596:	6866      	ldr	r6, [r4, #4]
 8008598:	60a6      	str	r6, [r4, #8]
 800859a:	2e00      	cmp	r6, #0
 800859c:	bfa2      	ittt	ge
 800859e:	6821      	ldrge	r1, [r4, #0]
 80085a0:	f021 0104 	bicge.w	r1, r1, #4
 80085a4:	6021      	strge	r1, [r4, #0]
 80085a6:	b90d      	cbnz	r5, 80085ac <_printf_i+0x110>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	d04b      	beq.n	8008644 <_printf_i+0x1a8>
 80085ac:	4616      	mov	r6, r2
 80085ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80085b2:	fb03 5711 	mls	r7, r3, r1, r5
 80085b6:	5dc7      	ldrb	r7, [r0, r7]
 80085b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085bc:	462f      	mov	r7, r5
 80085be:	42bb      	cmp	r3, r7
 80085c0:	460d      	mov	r5, r1
 80085c2:	d9f4      	bls.n	80085ae <_printf_i+0x112>
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d10b      	bne.n	80085e0 <_printf_i+0x144>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	07df      	lsls	r7, r3, #31
 80085cc:	d508      	bpl.n	80085e0 <_printf_i+0x144>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	4299      	cmp	r1, r3
 80085d4:	bfde      	ittt	le
 80085d6:	2330      	movle	r3, #48	@ 0x30
 80085d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085e0:	1b92      	subs	r2, r2, r6
 80085e2:	6122      	str	r2, [r4, #16]
 80085e4:	f8cd a000 	str.w	sl, [sp]
 80085e8:	464b      	mov	r3, r9
 80085ea:	aa03      	add	r2, sp, #12
 80085ec:	4621      	mov	r1, r4
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7ff fee6 	bl	80083c0 <_printf_common>
 80085f4:	3001      	adds	r0, #1
 80085f6:	d14a      	bne.n	800868e <_printf_i+0x1f2>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	b004      	add	sp, #16
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	f043 0320 	orr.w	r3, r3, #32
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	4833      	ldr	r0, [pc, #204]	@ (80086d8 <_printf_i+0x23c>)
 800860c:	2778      	movs	r7, #120	@ 0x78
 800860e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	6831      	ldr	r1, [r6, #0]
 8008616:	061f      	lsls	r7, r3, #24
 8008618:	f851 5b04 	ldr.w	r5, [r1], #4
 800861c:	d402      	bmi.n	8008624 <_printf_i+0x188>
 800861e:	065f      	lsls	r7, r3, #25
 8008620:	bf48      	it	mi
 8008622:	b2ad      	uxthmi	r5, r5
 8008624:	6031      	str	r1, [r6, #0]
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	bf44      	itt	mi
 800862a:	f043 0320 	orrmi.w	r3, r3, #32
 800862e:	6023      	strmi	r3, [r4, #0]
 8008630:	b11d      	cbz	r5, 800863a <_printf_i+0x19e>
 8008632:	2310      	movs	r3, #16
 8008634:	e7ac      	b.n	8008590 <_printf_i+0xf4>
 8008636:	4827      	ldr	r0, [pc, #156]	@ (80086d4 <_printf_i+0x238>)
 8008638:	e7e9      	b.n	800860e <_printf_i+0x172>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	f023 0320 	bic.w	r3, r3, #32
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	e7f6      	b.n	8008632 <_printf_i+0x196>
 8008644:	4616      	mov	r6, r2
 8008646:	e7bd      	b.n	80085c4 <_printf_i+0x128>
 8008648:	6833      	ldr	r3, [r6, #0]
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	6961      	ldr	r1, [r4, #20]
 800864e:	1d18      	adds	r0, r3, #4
 8008650:	6030      	str	r0, [r6, #0]
 8008652:	062e      	lsls	r6, r5, #24
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	d501      	bpl.n	800865c <_printf_i+0x1c0>
 8008658:	6019      	str	r1, [r3, #0]
 800865a:	e002      	b.n	8008662 <_printf_i+0x1c6>
 800865c:	0668      	lsls	r0, r5, #25
 800865e:	d5fb      	bpl.n	8008658 <_printf_i+0x1bc>
 8008660:	8019      	strh	r1, [r3, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	4616      	mov	r6, r2
 8008668:	e7bc      	b.n	80085e4 <_printf_i+0x148>
 800866a:	6833      	ldr	r3, [r6, #0]
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	6032      	str	r2, [r6, #0]
 8008670:	681e      	ldr	r6, [r3, #0]
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	2100      	movs	r1, #0
 8008676:	4630      	mov	r0, r6
 8008678:	f7f7 fdba 	bl	80001f0 <memchr>
 800867c:	b108      	cbz	r0, 8008682 <_printf_i+0x1e6>
 800867e:	1b80      	subs	r0, r0, r6
 8008680:	6060      	str	r0, [r4, #4]
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	2300      	movs	r3, #0
 8008688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800868c:	e7aa      	b.n	80085e4 <_printf_i+0x148>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	4632      	mov	r2, r6
 8008692:	4649      	mov	r1, r9
 8008694:	4640      	mov	r0, r8
 8008696:	47d0      	blx	sl
 8008698:	3001      	adds	r0, #1
 800869a:	d0ad      	beq.n	80085f8 <_printf_i+0x15c>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	079b      	lsls	r3, r3, #30
 80086a0:	d413      	bmi.n	80086ca <_printf_i+0x22e>
 80086a2:	68e0      	ldr	r0, [r4, #12]
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	4298      	cmp	r0, r3
 80086a8:	bfb8      	it	lt
 80086aa:	4618      	movlt	r0, r3
 80086ac:	e7a6      	b.n	80085fc <_printf_i+0x160>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4632      	mov	r2, r6
 80086b2:	4649      	mov	r1, r9
 80086b4:	4640      	mov	r0, r8
 80086b6:	47d0      	blx	sl
 80086b8:	3001      	adds	r0, #1
 80086ba:	d09d      	beq.n	80085f8 <_printf_i+0x15c>
 80086bc:	3501      	adds	r5, #1
 80086be:	68e3      	ldr	r3, [r4, #12]
 80086c0:	9903      	ldr	r1, [sp, #12]
 80086c2:	1a5b      	subs	r3, r3, r1
 80086c4:	42ab      	cmp	r3, r5
 80086c6:	dcf2      	bgt.n	80086ae <_printf_i+0x212>
 80086c8:	e7eb      	b.n	80086a2 <_printf_i+0x206>
 80086ca:	2500      	movs	r5, #0
 80086cc:	f104 0619 	add.w	r6, r4, #25
 80086d0:	e7f5      	b.n	80086be <_printf_i+0x222>
 80086d2:	bf00      	nop
 80086d4:	0800898d 	.word	0x0800898d
 80086d8:	0800899e 	.word	0x0800899e

080086dc <memmove>:
 80086dc:	4288      	cmp	r0, r1
 80086de:	b510      	push	{r4, lr}
 80086e0:	eb01 0402 	add.w	r4, r1, r2
 80086e4:	d902      	bls.n	80086ec <memmove+0x10>
 80086e6:	4284      	cmp	r4, r0
 80086e8:	4623      	mov	r3, r4
 80086ea:	d807      	bhi.n	80086fc <memmove+0x20>
 80086ec:	1e43      	subs	r3, r0, #1
 80086ee:	42a1      	cmp	r1, r4
 80086f0:	d008      	beq.n	8008704 <memmove+0x28>
 80086f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086fa:	e7f8      	b.n	80086ee <memmove+0x12>
 80086fc:	4402      	add	r2, r0
 80086fe:	4601      	mov	r1, r0
 8008700:	428a      	cmp	r2, r1
 8008702:	d100      	bne.n	8008706 <memmove+0x2a>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800870a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800870e:	e7f7      	b.n	8008700 <memmove+0x24>

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	@ (800872c <_sbrk_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7fa fe0a 	bl	8003334 <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	20004dcc 	.word	0x20004dcc

08008730 <_realloc_r>:
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	4680      	mov	r8, r0
 8008736:	4615      	mov	r5, r2
 8008738:	460c      	mov	r4, r1
 800873a:	b921      	cbnz	r1, 8008746 <_realloc_r+0x16>
 800873c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	4611      	mov	r1, r2
 8008742:	f7ff bc59 	b.w	8007ff8 <_malloc_r>
 8008746:	b92a      	cbnz	r2, 8008754 <_realloc_r+0x24>
 8008748:	f7ff fbea 	bl	8007f20 <_free_r>
 800874c:	2400      	movs	r4, #0
 800874e:	4620      	mov	r0, r4
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	f000 f81a 	bl	800878c <_malloc_usable_size_r>
 8008758:	4285      	cmp	r5, r0
 800875a:	4606      	mov	r6, r0
 800875c:	d802      	bhi.n	8008764 <_realloc_r+0x34>
 800875e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008762:	d8f4      	bhi.n	800874e <_realloc_r+0x1e>
 8008764:	4629      	mov	r1, r5
 8008766:	4640      	mov	r0, r8
 8008768:	f7ff fc46 	bl	8007ff8 <_malloc_r>
 800876c:	4607      	mov	r7, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	d0ec      	beq.n	800874c <_realloc_r+0x1c>
 8008772:	42b5      	cmp	r5, r6
 8008774:	462a      	mov	r2, r5
 8008776:	4621      	mov	r1, r4
 8008778:	bf28      	it	cs
 800877a:	4632      	movcs	r2, r6
 800877c:	f7ff fbc2 	bl	8007f04 <memcpy>
 8008780:	4621      	mov	r1, r4
 8008782:	4640      	mov	r0, r8
 8008784:	f7ff fbcc 	bl	8007f20 <_free_r>
 8008788:	463c      	mov	r4, r7
 800878a:	e7e0      	b.n	800874e <_realloc_r+0x1e>

0800878c <_malloc_usable_size_r>:
 800878c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008790:	1f18      	subs	r0, r3, #4
 8008792:	2b00      	cmp	r3, #0
 8008794:	bfbc      	itt	lt
 8008796:	580b      	ldrlt	r3, [r1, r0]
 8008798:	18c0      	addlt	r0, r0, r3
 800879a:	4770      	bx	lr

0800879c <_init>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr

080087a8 <_fini>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr
