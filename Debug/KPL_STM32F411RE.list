
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005710  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080058b0  080058b0  000068b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005960  08005960  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005968  08005968  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005968  08005968  00006968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800596c  0800596c  0000696c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005970  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c64  2000007c  080059ec  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ce0  080059ec  00007ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a0a  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360e  00000000  00000000  0001dab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000210c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f58  00000000  00000000  000224b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fd5  00000000  00000000  00023410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168e3  00000000  00000000  0003c3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009818a  00000000  00000000  00052cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eae52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005604  00000000  00000000  000eae98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005898 	.word	0x08005898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005898 	.word	0x08005898

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <KeyPad_Scan>:
void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}


uint8_t KeyPad_Scan(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 80004d6:	f003 fd31 	bl	8003f3c <xTaskGetTickCount>
 80004da:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <KeyPad_Scan+0xa0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004e8:	d201      	bcs.n	80004ee <KeyPad_Scan+0x1e>
        return 0xFF;
 80004ea:	23ff      	movs	r3, #255	@ 0xff
 80004ec:	e03b      	b.n	8000566 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	e034      	b.n	800055e <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80004fa:	481e      	ldr	r0, [pc, #120]	@ (8000574 <KeyPad_Scan+0xa4>)
 80004fc:	f001 f936 	bl	800176c <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2240      	movs	r2, #64	@ 0x40
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	b29b      	uxth	r3, r3
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	4819      	ldr	r0, [pc, #100]	@ (8000574 <KeyPad_Scan+0xa4>)
 8000510:	f001 f92c 	bl	800176c <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000514:	2300      	movs	r3, #0
 8000516:	71bb      	strb	r3, [r7, #6]
 8000518:	e01b      	b.n	8000552 <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	2201      	movs	r2, #1
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	b29b      	uxth	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	4813      	ldr	r0, [pc, #76]	@ (8000574 <KeyPad_Scan+0xa4>)
 8000528:	f001 f908 	bl	800173c <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10c      	bne.n	800054c <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 8000532:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <KeyPad_Scan+0xa0>)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	79b9      	ldrb	r1, [r7, #6]
 800053c:	480e      	ldr	r0, [pc, #56]	@ (8000578 <KeyPad_Scan+0xa8>)
 800053e:	4613      	mov	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	4403      	add	r3, r0
 8000546:	440b      	add	r3, r1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	e00c      	b.n	8000566 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	3301      	adds	r3, #1
 8000550:	71bb      	strb	r3, [r7, #6]
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d9e0      	bls.n	800051a <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	3301      	adds	r3, #1
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d9c7      	bls.n	80004f4 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 8000564:	23ff      	movs	r3, #255	@ 0xff
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000009c 	.word	0x2000009c
 8000574:	40020400 	.word	0x40020400
 8000578:	080058ec 	.word	0x080058ec

0800057c <KeyLogic>:

void KeyLogic(){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	//////////////////////////////////////////////////TODO (1) IF USING LCD/////////////////////////////////////////////////////////
		  //////////////////////////////////////////////TODO (2) IF TESTING 3X6 LEDS//////////////////////////////////////////////////////
		  keyPressed = KeyPad_Scan();
 8000582:	f7ff ffa5 	bl	80004d0 <KeyPad_Scan>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	4b16      	ldr	r3, [pc, #88]	@ (80005e4 <KeyLogic+0x68>)
 800058c:	701a      	strb	r2, [r3, #0]
		  if(keyPressed<10){
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <KeyLogic+0x68>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b09      	cmp	r3, #9
 8000594:	d816      	bhi.n	80005c4 <KeyLogic+0x48>
	//			  uint32_t temp=lcd_num*10+keyPressed; //  			TODO (1) UNCOMMENT IF USING LCD
			  uint32_t temp=SevenSegBuffer[0]*10+keyPressed; //	TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <KeyLogic+0x6c>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <KeyLogic+0x68>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4413      	add	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]
			  if(temp<=99999999){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a0f      	ldr	r2, [pc, #60]	@ (80005ec <KeyLogic+0x70>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d812      	bhi.n	80005da <KeyLogic+0x5e>
				  lcd_num=temp;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <KeyLogic+0x74>)
 80005ba:	701a      	strb	r2, [r3, #0]
	//				  Update_LCD(lcd_num); // 						TODO (1) UNCOMMENT IF USING LCD
				  SevenSegBuffer[0]=temp; //					TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 80005bc:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <KeyLogic+0x6c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]
	//			  lcd_num=0; //										TODO (1) UNCOMMENT IF USING LCD
	//			  Update_LCD(lcd_num); // 							TODO (1) UNCOMMENT IF USING LCD
			  SevenSegBuffer[0]=0; //							TODO (2) UNCOMMENT IF TESTING 3X6 LEDS

		  }
}
 80005c2:	e00a      	b.n	80005da <KeyLogic+0x5e>
		  else if(keyPressed>=10 &&keyPressed<100){
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <KeyLogic+0x68>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b09      	cmp	r3, #9
 80005ca:	d906      	bls.n	80005da <KeyLogic+0x5e>
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <KeyLogic+0x68>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b63      	cmp	r3, #99	@ 0x63
 80005d2:	d802      	bhi.n	80005da <KeyLogic+0x5e>
			  SevenSegBuffer[0]=0; //							TODO (2) UNCOMMENT IF TESTING 3X6 LEDS
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <KeyLogic+0x6c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000010 	.word	0x20000010
 80005ec:	05f5e0ff 	.word	0x05f5e0ff
 80005f0:	20000098 	.word	0x20000098

080005f4 <SevenSegLEDsHandler>:
volatile uint8_t SevenSegScanState = 0;
uint32_t SevenSegBuffer[3] = {123456, 654321, 987654};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b05      	cmp	r3, #5
 8000604:	f200 815d 	bhi.w	80008c2 <SevenSegLEDsHandler+0x2ce>
 8000608:	a201      	add	r2, pc, #4	@ (adr r2, 8000610 <SevenSegLEDsHandler+0x1c>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000629 	.word	0x08000629
 8000614:	08000683 	.word	0x08000683
 8000618:	080006f5 	.word	0x080006f5
 800061c:	08000767 	.word	0x08000767
 8000620:	080007d9 	.word	0x080007d9
 8000624:	0800084b 	.word	0x0800084b
        case 0:
            output[0] = buffer[0] % 10;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6819      	ldr	r1, [r3, #0]
 800062c:	4ba8      	ldr	r3, [pc, #672]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800062e:	fba3 2301 	umull	r2, r3, r3, r1
 8000632:	08da      	lsrs	r2, r3, #3
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	1aca      	subs	r2, r1, r3
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	4ba4      	ldr	r3, [pc, #656]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000642:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3304      	adds	r3, #4
 8000648:	6819      	ldr	r1, [r3, #0]
 800064a:	4ba1      	ldr	r3, [pc, #644]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800064c:	fba3 2301 	umull	r2, r3, r3, r1
 8000650:	08da      	lsrs	r2, r3, #3
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	1aca      	subs	r2, r1, r3
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	4b9d      	ldr	r3, [pc, #628]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000660:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3308      	adds	r3, #8
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	4b99      	ldr	r3, [pc, #612]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800066a:	fba3 2301 	umull	r2, r3, r3, r1
 800066e:	08da      	lsrs	r2, r3, #3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	4b95      	ldr	r3, [pc, #596]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 800067e:	709a      	strb	r2, [r3, #2]
            break;
 8000680:	e11f      	b.n	80008c2 <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a92      	ldr	r2, [pc, #584]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000688:	fba2 2303 	umull	r2, r3, r2, r3
 800068c:	08d9      	lsrs	r1, r3, #3
 800068e:	4b90      	ldr	r3, [pc, #576]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000690:	fba3 2301 	umull	r2, r3, r3, r1
 8000694:	08da      	lsrs	r2, r3, #3
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	1aca      	subs	r2, r1, r3
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	4b8c      	ldr	r3, [pc, #560]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80006a4:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3304      	adds	r3, #4
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a88      	ldr	r2, [pc, #544]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80006ae:	fba2 2303 	umull	r2, r3, r2, r3
 80006b2:	08d9      	lsrs	r1, r3, #3
 80006b4:	4b86      	ldr	r3, [pc, #536]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80006b6:	fba3 2301 	umull	r2, r3, r3, r1
 80006ba:	08da      	lsrs	r2, r3, #3
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1aca      	subs	r2, r1, r3
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	4b82      	ldr	r3, [pc, #520]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80006ca:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3308      	adds	r3, #8
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a7f      	ldr	r2, [pc, #508]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80006d4:	fba2 2303 	umull	r2, r3, r2, r3
 80006d8:	08d9      	lsrs	r1, r3, #3
 80006da:	4b7d      	ldr	r3, [pc, #500]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80006dc:	fba3 2301 	umull	r2, r3, r3, r1
 80006e0:	08da      	lsrs	r2, r3, #3
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	1aca      	subs	r2, r1, r3
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	4b79      	ldr	r3, [pc, #484]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80006f0:	709a      	strb	r2, [r3, #2]
            break;
 80006f2:	e0e6      	b.n	80008c2 <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a77      	ldr	r2, [pc, #476]	@ (80008d8 <SevenSegLEDsHandler+0x2e4>)
 80006fa:	fba2 2303 	umull	r2, r3, r2, r3
 80006fe:	0959      	lsrs	r1, r3, #5
 8000700:	4b73      	ldr	r3, [pc, #460]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000702:	fba3 2301 	umull	r2, r3, r3, r1
 8000706:	08da      	lsrs	r2, r3, #3
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	1aca      	subs	r2, r1, r3
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	4b6f      	ldr	r3, [pc, #444]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000716:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3304      	adds	r3, #4
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a6e      	ldr	r2, [pc, #440]	@ (80008d8 <SevenSegLEDsHandler+0x2e4>)
 8000720:	fba2 2303 	umull	r2, r3, r2, r3
 8000724:	0959      	lsrs	r1, r3, #5
 8000726:	4b6a      	ldr	r3, [pc, #424]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000728:	fba3 2301 	umull	r2, r3, r3, r1
 800072c:	08da      	lsrs	r2, r3, #3
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	1aca      	subs	r2, r1, r3
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	4b66      	ldr	r3, [pc, #408]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 800073c:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3308      	adds	r3, #8
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a64      	ldr	r2, [pc, #400]	@ (80008d8 <SevenSegLEDsHandler+0x2e4>)
 8000746:	fba2 2303 	umull	r2, r3, r2, r3
 800074a:	0959      	lsrs	r1, r3, #5
 800074c:	4b60      	ldr	r3, [pc, #384]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800074e:	fba3 2301 	umull	r2, r3, r3, r1
 8000752:	08da      	lsrs	r2, r3, #3
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	1aca      	subs	r2, r1, r3
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	4b5c      	ldr	r3, [pc, #368]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000762:	709a      	strb	r2, [r3, #2]
            break;
 8000764:	e0ad      	b.n	80008c2 <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a5c      	ldr	r2, [pc, #368]	@ (80008dc <SevenSegLEDsHandler+0x2e8>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	0999      	lsrs	r1, r3, #6
 8000772:	4b57      	ldr	r3, [pc, #348]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000774:	fba3 2301 	umull	r2, r3, r3, r1
 8000778:	08da      	lsrs	r2, r3, #3
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	1aca      	subs	r2, r1, r3
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	4b53      	ldr	r3, [pc, #332]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000788:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3304      	adds	r3, #4
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a52      	ldr	r2, [pc, #328]	@ (80008dc <SevenSegLEDsHandler+0x2e8>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	0999      	lsrs	r1, r3, #6
 8000798:	4b4d      	ldr	r3, [pc, #308]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800079a:	fba3 2301 	umull	r2, r3, r3, r1
 800079e:	08da      	lsrs	r2, r3, #3
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	4b49      	ldr	r3, [pc, #292]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80007ae:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3308      	adds	r3, #8
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a49      	ldr	r2, [pc, #292]	@ (80008dc <SevenSegLEDsHandler+0x2e8>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	0999      	lsrs	r1, r3, #6
 80007be:	4b44      	ldr	r3, [pc, #272]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80007c0:	fba3 2301 	umull	r2, r3, r3, r1
 80007c4:	08da      	lsrs	r2, r3, #3
 80007c6:	4613      	mov	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1aca      	subs	r2, r1, r3
 80007d0:	b2d2      	uxtb	r2, r2
 80007d2:	4b40      	ldr	r3, [pc, #256]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80007d4:	709a      	strb	r2, [r3, #2]
            break;
 80007d6:	e074      	b.n	80008c2 <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a40      	ldr	r2, [pc, #256]	@ (80008e0 <SevenSegLEDsHandler+0x2ec>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0b59      	lsrs	r1, r3, #13
 80007e4:	4b3a      	ldr	r3, [pc, #232]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80007e6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ea:	08da      	lsrs	r2, r3, #3
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1aca      	subs	r2, r1, r3
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80007fa:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3304      	adds	r3, #4
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a37      	ldr	r2, [pc, #220]	@ (80008e0 <SevenSegLEDsHandler+0x2ec>)
 8000804:	fba2 2303 	umull	r2, r3, r2, r3
 8000808:	0b59      	lsrs	r1, r3, #13
 800080a:	4b31      	ldr	r3, [pc, #196]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800080c:	fba3 2301 	umull	r2, r3, r3, r1
 8000810:	08da      	lsrs	r2, r3, #3
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	1aca      	subs	r2, r1, r3
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000820:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3308      	adds	r3, #8
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2d      	ldr	r2, [pc, #180]	@ (80008e0 <SevenSegLEDsHandler+0x2ec>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	0b59      	lsrs	r1, r3, #13
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000832:	fba3 2301 	umull	r2, r3, r3, r1
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	1aca      	subs	r2, r1, r3
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000846:	709a      	strb	r2, [r3, #2]
            break;
 8000848:	e03b      	b.n	80008c2 <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <SevenSegLEDsHandler+0x2f0>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	09d9      	lsrs	r1, r3, #7
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 800085a:	fba3 2301 	umull	r2, r3, r3, r1
 800085e:	08da      	lsrs	r2, r3, #3
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	1aca      	subs	r2, r1, r3
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 800086e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3304      	adds	r3, #4
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	4a1a      	ldr	r2, [pc, #104]	@ (80008e4 <SevenSegLEDsHandler+0x2f0>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	09d9      	lsrs	r1, r3, #7
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 8000882:	fba3 2301 	umull	r2, r3, r3, r1
 8000886:	08da      	lsrs	r2, r3, #3
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	1aca      	subs	r2, r1, r3
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 8000896:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3308      	adds	r3, #8
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	4a10      	ldr	r2, [pc, #64]	@ (80008e4 <SevenSegLEDsHandler+0x2f0>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	09d9      	lsrs	r1, r3, #7
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <SevenSegLEDsHandler+0x2dc>)
 80008aa:	fba3 2301 	umull	r2, r3, r3, r1
 80008ae:	08da      	lsrs	r2, r3, #3
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	1aca      	subs	r2, r1, r3
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
 80008be:	709a      	strb	r2, [r3, #2]
            break;
 80008c0:	bf00      	nop
    }
    return output;
 80008c2:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <SevenSegLEDsHandler+0x2e0>)
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	cccccccd 	.word	0xcccccccd
 80008d4:	200000b0 	.word	0x200000b0
 80008d8:	51eb851f 	.word	0x51eb851f
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	d1b71759 	.word	0xd1b71759
 80008e4:	0a7c5ac5 	.word	0x0a7c5ac5

080008e8 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
 80008f4:	4613      	mov	r3, r2
 80008f6:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fe79 	bl	80005f4 <SevenSegLEDsHandler>
 8000902:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	2b05      	cmp	r3, #5
 8000908:	d820      	bhi.n	800094c <UpdateDisplayBuffer+0x64>
 800090a:	a201      	add	r2, pc, #4	@ (adr r2, 8000910 <UpdateDisplayBuffer+0x28>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	08000929 	.word	0x08000929
 8000914:	0800092f 	.word	0x0800092f
 8000918:	08000935 	.word	0x08000935
 800091c:	0800093b 	.word	0x0800093b
 8000920:	08000941 	.word	0x08000941
 8000924:	08000947 	.word	0x08000947
        case 0:
            curr_scan = 0b11111110;
 8000928:	23fe      	movs	r3, #254	@ 0xfe
 800092a:	73fb      	strb	r3, [r7, #15]
            break;
 800092c:	e011      	b.n	8000952 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 800092e:	23fd      	movs	r3, #253	@ 0xfd
 8000930:	73fb      	strb	r3, [r7, #15]
            break;
 8000932:	e00e      	b.n	8000952 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8000934:	23fb      	movs	r3, #251	@ 0xfb
 8000936:	73fb      	strb	r3, [r7, #15]
            break;
 8000938:	e00b      	b.n	8000952 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 800093a:	23f7      	movs	r3, #247	@ 0xf7
 800093c:	73fb      	strb	r3, [r7, #15]
            break;
 800093e:	e008      	b.n	8000952 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000940:	23ef      	movs	r3, #239	@ 0xef
 8000942:	73fb      	strb	r3, [r7, #15]
            break;
 8000944:	e005      	b.n	8000952 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8000946:	23df      	movs	r3, #223	@ 0xdf
 8000948:	73fb      	strb	r3, [r7, #15]
            break;
 800094a:	e002      	b.n	8000952 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 800094c:	23ff      	movs	r3, #255	@ 0xff
 800094e:	73fb      	strb	r3, [r7, #15]
            break;
 8000950:	bf00      	nop
    }
    displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 8000952:	78ba      	ldrb	r2, [r7, #2]
 8000954:	491f      	ldr	r1, [pc, #124]	@ (80009d4 <UpdateDisplayBuffer+0xec>)
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	440b      	add	r3, r1
 800095e:	22ff      	movs	r2, #255	@ 0xff
 8000960:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][1] = digitMapWithDP[curr_digit[2]];
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3302      	adds	r3, #2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	78ba      	ldrb	r2, [r7, #2]
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <UpdateDisplayBuffer+0xf0>)
 800096e:	5c58      	ldrb	r0, [r3, r1]
 8000970:	4918      	ldr	r1, [pc, #96]	@ (80009d4 <UpdateDisplayBuffer+0xec>)
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	440b      	add	r3, r1
 800097a:	3301      	adds	r3, #1
 800097c:	4602      	mov	r2, r0
 800097e:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][2] = curr_scan;
 8000980:	78ba      	ldrb	r2, [r7, #2]
 8000982:	4914      	ldr	r1, [pc, #80]	@ (80009d4 <UpdateDisplayBuffer+0xec>)
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	440b      	add	r3, r1
 800098c:	3302      	adds	r3, #2
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[1]];
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	78ba      	ldrb	r2, [r7, #2]
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <UpdateDisplayBuffer+0xf0>)
 800099e:	5c58      	ldrb	r0, [r3, r1]
 80009a0:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <UpdateDisplayBuffer+0xec>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	3303      	adds	r3, #3
 80009ac:	4602      	mov	r2, r0
 80009ae:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][4] = digitMapWithDP[curr_digit[0]];
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	78ba      	ldrb	r2, [r7, #2]
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <UpdateDisplayBuffer+0xf0>)
 80009ba:	5c58      	ldrb	r0, [r3, r1]
 80009bc:	4905      	ldr	r1, [pc, #20]	@ (80009d4 <UpdateDisplayBuffer+0xec>)
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	3304      	adds	r3, #4
 80009c8:	4602      	mov	r2, r0
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000a4 	.word	0x200000a4
 80009d8:	20000004 	.word	0x20000004

080009dc <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <SevenSegLEDsScan+0x7c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	3301      	adds	r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	bfb8      	it	lt
 80009f2:	425b      	neglt	r3, r3
 80009f4:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <SevenSegLEDsScan+0x80>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4817      	ldr	r0, [pc, #92]	@ (8000a60 <SevenSegLEDsScan+0x84>)
 8000a02:	f7ff ff71 	bl	80008e8 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a06:	b672      	cpsid	i
}
 8000a08:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <SevenSegLEDsScan+0x7c>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <SevenSegLEDsScan+0x88>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2105      	movs	r1, #5
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f824 	bl	8000a6c <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8000a24:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <SevenSegLEDsScan+0x7c>)
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a2a:	b662      	cpsie	i
}
 8000a2c:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <SevenSegLEDsScan+0x80>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <SevenSegLEDsScan+0x8c>)
 8000a38:	fb83 3102 	smull	r3, r1, r3, r2
 8000a3c:	17d3      	asrs	r3, r2, #31
 8000a3e:	1ac9      	subs	r1, r1, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	440b      	add	r3, r1
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	1ad1      	subs	r1, r2, r3
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <SevenSegLEDsScan+0x80>)
 8000a4e:	701a      	strb	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000ae 	.word	0x200000ae
 8000a5c:	200000a0 	.word	0x200000a0
 8000a60:	20000010 	.word	0x20000010
 8000a64:	200000a4 	.word	0x200000a4
 8000a68:	2aaaaaab 	.word	0x2aaaaaab

08000a6c <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7c:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <ShiftOut_SPI+0xa0>)
 8000a7e:	f000 fe75 	bl	800176c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	4822      	ldr	r0, [pc, #136]	@ (8000b10 <ShiftOut_SPI+0xa4>)
 8000a88:	f000 fe70 	bl	800176c <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e003      	b.n	8000a9a <ShiftOut_SPI+0x2e>
 8000a92:	bf00      	nop
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000aa0:	dbf7      	blt.n	8000a92 <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000aa2:	bf00      	nop
 8000aa4:	481b      	ldr	r0, [pc, #108]	@ (8000b14 <ShiftOut_SPI+0xa8>)
 8000aa6:	f001 fcbd 	bl	8002424 <HAL_SPI_GetState>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d1f9      	bne.n	8000aa4 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <ShiftOut_SPI+0xa8>)
 8000abc:	f001 fb6f 	bl	800219e <HAL_SPI_Transmit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 8000ac6:	f000 f9e3 	bl	8000e90 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	e003      	b.n	8000ad8 <ShiftOut_SPI+0x6c>
 8000ad0:	bf00      	nop
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ade:	dbf7      	blt.n	8000ad0 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000ae0:	bf00      	nop
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <ShiftOut_SPI+0xa8>)
 8000ae4:	f001 fc9e 	bl	8002424 <HAL_SPI_GetState>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d1f9      	bne.n	8000ae2 <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <ShiftOut_SPI+0xa0>)
 8000af6:	f000 fe39 	bl	800176c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <ShiftOut_SPI+0xa4>)
 8000b00:	f000 fe34 	bl	800176c <HAL_GPIO_WritePin>

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	200000b4 	.word	0x200000b4

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fb66 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f828 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 f8fa 	bl	8000d1c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b28:	f000 f88c 	bl	8000c44 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b2c:	f000 f8c0 	bl	8000cb0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b30:	f002 f81a 	bl	8002b68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8000b34:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <main+0x44>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <main+0x48>)
 8000b3a:	f002 f85f 	bl	8002bfc <osThreadNew>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <main+0x4c>)
 8000b42:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8000b44:	4a08      	ldr	r2, [pc, #32]	@ (8000b68 <main+0x50>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <main+0x54>)
 8000b4a:	f002 f857 	bl	8002bfc <osThreadNew>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <main+0x58>)
 8000b52:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b54:	f002 f82c 	bl	8002bb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <main+0x40>
 8000b5c:	08005900 	.word	0x08005900
 8000b60:	08000e21 	.word	0x08000e21
 8000b64:	20000164 	.word	0x20000164
 8000b68:	08005924 	.word	0x08005924
 8000b6c:	08000e5d 	.word	0x08000e5d
 8000b70:	20000168 	.word	0x20000168

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	@ 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2230      	movs	r2, #48	@ 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 fda0 	bl	80056c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <SystemClock_Config+0xc8>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <SystemClock_Config+0xc8>)
 8000ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <SystemClock_Config+0xc8>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <SystemClock_Config+0xcc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a20      	ldr	r2, [pc, #128]	@ (8000c40 <SystemClock_Config+0xcc>)
 8000bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <SystemClock_Config+0xcc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be4:	2308      	movs	r3, #8
 8000be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000be8:	2364      	movs	r3, #100	@ 0x64
 8000bea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fdd1 	bl	80017a0 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c04:	f000 f944 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	230f      	movs	r3, #15
 8000c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2103      	movs	r1, #3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f833 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c30:	f000 f92e 	bl	8000e90 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3750      	adds	r7, #80	@ 0x50
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <MX_SPI1_Init+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c78:	2220      	movs	r2, #32
 8000c7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c90:	220a      	movs	r2, #10
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c96:	f001 f9f9 	bl	800208c <HAL_SPI_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca0:	f000 f8f6 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000b4 	.word	0x200000b4
 8000cac:	40013000 	.word	0x40013000

08000cb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <MX_SPI2_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_SPI2_Init+0x64>)
 8000d02:	f001 f9c3 	bl	800208c <HAL_SPI_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d0c:	f000 f8c0 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000010c 	.word	0x2000010c
 8000d18:	40003800 	.word	0x40003800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b37      	ldr	r3, [pc, #220]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a36      	ldr	r2, [pc, #216]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b30      	ldr	r3, [pc, #192]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a2f      	ldr	r2, [pc, #188]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000da2:	2200      	movs	r2, #0
 8000da4:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000da8:	481b      	ldr	r0, [pc, #108]	@ (8000e18 <MX_GPIO_Init+0xfc>)
 8000daa:	f000 fcdf 	bl	800176c <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	481a      	ldr	r0, [pc, #104]	@ (8000e1c <MX_GPIO_Init+0x100>)
 8000db4:	f000 fcda 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000db8:	231f      	movs	r3, #31
 8000dba:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <MX_GPIO_Init+0xfc>)
 8000dcc:	f000 fb32 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000dd0:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8000dd4:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <MX_GPIO_Init+0xfc>)
 8000dea:	f000 fb23 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_GPIO_Init+0x100>)
 8000e06:	f000 fb15 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40020800 	.word	0x40020800

08000e20 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <Led3x6Run+0x38>)
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e32:	6018      	str	r0, [r3, #0]
 8000e34:	3304      	adds	r3, #4
 8000e36:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8000e38:	f7ff fdd0 	bl	80009dc <SevenSegLEDsScan>
	  osDelay(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f001 ff6f 	bl	8002d20 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	2105      	movs	r1, #5
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe0f 	bl	8000a6c <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f001 ff66 	bl	8002d20 <osDelay>
	  SevenSegLEDsScan();
 8000e54:	bf00      	nop
 8000e56:	e7ef      	b.n	8000e38 <Led3x6Run+0x18>
 8000e58:	080058cc 	.word	0x080058cc

08000e5c <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 8000e64:	f7ff fb8a 	bl	800057c <KeyLogic>
    osDelay(100);
 8000e68:	2064      	movs	r0, #100	@ 0x64
 8000e6a:	f001 ff59 	bl	8002d20 <osDelay>
	 KeyLogic();
 8000e6e:	bf00      	nop
 8000e70:	e7f8      	b.n	8000e64 <KeyPad4x5Run+0x8>

08000e72 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e82:	d101      	bne.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e84:	f000 f9d4 	bl	8001230 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_MspInit+0x54>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a11      	ldr	r2, [pc, #68]	@ (8000ef0 <HAL_MspInit+0x54>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <HAL_MspInit+0x54>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_MspInit+0x54>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_MspInit+0x54>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <HAL_MspInit+0x54>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	210f      	movs	r1, #15
 8000ede:	f06f 0001 	mvn.w	r0, #1
 8000ee2:	f000 fa7d 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	@ 0x30
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a41      	ldr	r2, [pc, #260]	@ (8001018 <HAL_SPI_MspInit+0x124>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12c      	bne.n	8000f70 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b40      	ldr	r3, [pc, #256]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f26:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b39      	ldr	r3, [pc, #228]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a38      	ldr	r2, [pc, #224]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b36      	ldr	r3, [pc, #216]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f4e:	23a0      	movs	r3, #160	@ 0xa0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	482d      	ldr	r0, [pc, #180]	@ (8001020 <HAL_SPI_MspInit+0x12c>)
 8000f6a:	f000 fa63 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f6e:	e04f      	b.n	8001010 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <HAL_SPI_MspInit+0x130>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d14a      	bne.n	8001010 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a26      	ldr	r2, [pc, #152]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b24      	ldr	r3, [pc, #144]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_SPI_MspInit+0x128>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <HAL_SPI_MspInit+0x134>)
 8000fea:	f000 fa23 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001000:	2305      	movs	r3, #5
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4808      	ldr	r0, [pc, #32]	@ (800102c <HAL_SPI_MspInit+0x138>)
 800100c:	f000 fa12 	bl	8001434 <HAL_GPIO_Init>
}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	@ 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013000 	.word	0x40013000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40003800 	.word	0x40003800
 8001028:	40020800 	.word	0x40020800
 800102c:	40020400 	.word	0x40020400

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	@ 0x38
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <HAL_InitTick+0xe8>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a33      	ldr	r2, [pc, #204]	@ (8001118 <HAL_InitTick+0xe8>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <HAL_InitTick+0xe8>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105c:	f107 0210 	add.w	r2, r7, #16
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 ffde 	bl	8002028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001076:	f000 ffc3 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 800107a:	6378      	str	r0, [r7, #52]	@ 0x34
 800107c:	e004      	b.n	8001088 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800107e:	f000 ffbf 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8001082:	4603      	mov	r3, r0
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108a:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_InitTick+0xec>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	3b01      	subs	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001096:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <HAL_InitTick+0xf0>)
 8001098:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800109c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <HAL_InitTick+0xf0>)
 80010a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80010a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <HAL_InitTick+0xf0>)
 80010a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010aa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <HAL_InitTick+0xf0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <HAL_InitTick+0xf0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <HAL_InitTick+0xf0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <HAL_InitTick+0xf0>)
 80010c0:	f001 fa9a 	bl	80025f8 <HAL_TIM_Base_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d11b      	bne.n	800110a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80010d2:	4813      	ldr	r0, [pc, #76]	@ (8001120 <HAL_InitTick+0xf0>)
 80010d4:	f001 faea 	bl	80026ac <HAL_TIM_Base_Start_IT>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d111      	bne.n	800110a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010e6:	201c      	movs	r0, #28
 80010e8:	f000 f996 	bl	8001418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	d808      	bhi.n	8001104 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80010f2:	2200      	movs	r2, #0
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	201c      	movs	r0, #28
 80010f8:	f000 f972 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <HAL_InitTick+0xf4>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e002      	b.n	800110a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800110a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800110e:	4618      	mov	r0, r3
 8001110:	3738      	adds	r7, #56	@ 0x38
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	431bde83 	.word	0x431bde83
 8001120:	2000016c 	.word	0x2000016c
 8001124:	20000020 	.word	0x20000020

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <NMI_Handler+0x4>

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <MemManage_Handler+0x4>

08001140 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <UsageFault_Handler+0x4>

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <TIM2_IRQHandler+0x10>)
 8001166:	f001 fb03 	bl	8002770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000016c 	.word	0x2000016c

08001174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d0 <LoopFillZerobss+0xe>
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x16>)
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopFillZerobss+0x1a>)
 80011a6:	2300      	movs	r3, #0
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:
 80011aa:	58d4      	ldr	r4, [r2, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:
 80011b0:	18c4      	adds	r4, r0, r3
 80011b2:	428c      	cmp	r4, r1
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x1e>)
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopFillZerobss+0x22>)
 80011ba:	2300      	movs	r3, #0
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:
 80011c2:	42a2      	cmp	r2, r4
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>
 80011c6:	f004 fadd 	bl	8005784 <__libc_init_array>
 80011ca:	f7ff fca5 	bl	8000b18 <main>
 80011ce:	4770      	bx	lr
 80011d0:	20020000 	.word	0x20020000
 80011d4:	20000000 	.word	0x20000000
 80011d8:	2000007c 	.word	0x2000007c
 80011dc:	08005970 	.word	0x08005970
 80011e0:	2000007c 	.word	0x2000007c
 80011e4:	20004ce0 	.word	0x20004ce0

080011e8 <ADC_IRQHandler>:
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <HAL_Init+0x40>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_Init+0x40>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <HAL_Init+0x40>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f8d8 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f7ff ff08 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fe3c 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000024 	.word	0x20000024
 8001254:	200001b4 	.word	0x200001b4

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200001b4 	.word	0x200001b4

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e159      	b.n	8001704 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8148 	bne.w	80016fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a2 	beq.w	80016fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b57      	ldr	r3, [pc, #348]	@ (800171c <HAL_GPIO_Init+0x2e8>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	4a56      	ldr	r2, [pc, #344]	@ (800171c <HAL_GPIO_Init+0x2e8>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ca:	4b54      	ldr	r3, [pc, #336]	@ (800171c <HAL_GPIO_Init+0x2e8>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <HAL_GPIO_Init+0x2ec>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	@ (8001724 <HAL_GPIO_Init+0x2f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x202>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a48      	ldr	r2, [pc, #288]	@ (8001728 <HAL_GPIO_Init+0x2f4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x1fe>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a47      	ldr	r2, [pc, #284]	@ (800172c <HAL_GPIO_Init+0x2f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x1fa>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a46      	ldr	r2, [pc, #280]	@ (8001730 <HAL_GPIO_Init+0x2fc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x1f6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a45      	ldr	r2, [pc, #276]	@ (8001734 <HAL_GPIO_Init+0x300>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x1f2>
 8001622:	2304      	movs	r3, #4
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001626:	2307      	movs	r3, #7
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x204>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x204>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	@ (8001720 <HAL_GPIO_Init+0x2ec>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <HAL_GPIO_Init+0x304>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <HAL_GPIO_Init+0x304>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b2d      	ldr	r3, [pc, #180]	@ (8001738 <HAL_GPIO_Init+0x304>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a24      	ldr	r2, [pc, #144]	@ (8001738 <HAL_GPIO_Init+0x304>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_GPIO_Init+0x304>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001738 <HAL_GPIO_Init+0x304>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_GPIO_Init+0x304>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <HAL_GPIO_Init+0x304>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f aea2 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	@ 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	e001      	b.n	800175e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e267      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d075      	beq.n	80018aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017be:	4b88      	ldr	r3, [pc, #544]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d00c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b85      	ldr	r3, [pc, #532]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d112      	bne.n	80017fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b82      	ldr	r3, [pc, #520]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e2:	d10b      	bne.n	80017fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	4b7e      	ldr	r3, [pc, #504]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d05b      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d157      	bne.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e242      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x74>
 8001806:	4b76      	ldr	r3, [pc, #472]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a75      	ldr	r2, [pc, #468]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e01d      	b.n	8001850 <HAL_RCC_OscConfig+0xb0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b70      	ldr	r3, [pc, #448]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6f      	ldr	r2, [pc, #444]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b6d      	ldr	r3, [pc, #436]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6c      	ldr	r2, [pc, #432]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xb0>
 8001838:	4b69      	ldr	r3, [pc, #420]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a68      	ldr	r2, [pc, #416]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fcfe 	bl	8001258 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fcfa 	bl	8001258 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	@ 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e207      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xc0>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fcea 	bl	8001258 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fce6 	bl	8001258 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1f3      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d063      	beq.n	800197e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b6:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d11c      	bne.n	8001908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d116      	bne.n	8001908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	4b41      	ldr	r3, [pc, #260]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x152>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e1c7      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4937      	ldr	r1, [pc, #220]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	e03a      	b.n	800197e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <HAL_RCC_OscConfig+0x244>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fc9f 	bl	8001258 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fc9b 	bl	8001258 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1a8      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4925      	ldr	r1, [pc, #148]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <HAL_RCC_OscConfig+0x244>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fc7e 	bl	8001258 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fc7a 	bl	8001258 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e187      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d036      	beq.n	80019f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_RCC_OscConfig+0x248>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff fc5e 	bl	8001258 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fc5a 	bl	8001258 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e167      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_RCC_OscConfig+0x240>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x200>
 80019be:	e01b      	b.n	80019f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_RCC_OscConfig+0x248>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fc47 	bl	8001258 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	e00e      	b.n	80019ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fc43 	bl	8001258 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d907      	bls.n	80019ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e150      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470000 	.word	0x42470000
 80019e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ec:	4b88      	ldr	r3, [pc, #544]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ea      	bne.n	80019ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8097 	beq.w	8001b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b81      	ldr	r3, [pc, #516]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a26:	4b7a      	ldr	r3, [pc, #488]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b77      	ldr	r3, [pc, #476]	@ (8001c14 <HAL_RCC_OscConfig+0x474>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d118      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a42:	4b74      	ldr	r3, [pc, #464]	@ (8001c14 <HAL_RCC_OscConfig+0x474>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a73      	ldr	r2, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x474>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fc03 	bl	8001258 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fbff 	bl	8001258 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e10c      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <HAL_RCC_OscConfig+0x474>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x2ea>
 8001a7c:	4b64      	ldr	r3, [pc, #400]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a80:	4a63      	ldr	r2, [pc, #396]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x324>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x30c>
 8001a92:	4b5f      	ldr	r3, [pc, #380]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a96:	4a5e      	ldr	r2, [pc, #376]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x324>
 8001aac:	4b58      	ldr	r3, [pc, #352]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab0:	4a57      	ldr	r2, [pc, #348]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a54      	ldr	r2, [pc, #336]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001abe:	f023 0304 	bic.w	r3, r3, #4
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d015      	beq.n	8001af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff fbc4 	bl	8001258 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fbc0 	bl	8001258 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e0cb      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	4b49      	ldr	r3, [pc, #292]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ee      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fbae 	bl	8001258 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff fbaa 	bl	8001258 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0b5      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b16:	4b3e      	ldr	r3, [pc, #248]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ee      	bne.n	8001b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	4a38      	ldr	r2, [pc, #224]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a1 	beq.w	8001c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b3e:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d05c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d141      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x478>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb7e 	bl	8001258 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff fb7a 	bl	8001258 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e087      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	019b      	lsls	r3, r3, #6
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	3b01      	subs	r3, #1
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	491b      	ldr	r1, [pc, #108]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x478>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bae:	f7ff fb53 	bl	8001258 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff fb4f 	bl	8001258 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e05c      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x416>
 8001bd4:	e054      	b.n	8001c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x478>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fb3c 	bl	8001258 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff fb38 	bl	8001258 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e045      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
 8001c02:	e03d      	b.n	8001c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e038      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d028      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d121      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d11a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d111      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0cc      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b68      	ldr	r3, [pc, #416]	@ (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d90c      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b65      	ldr	r3, [pc, #404]	@ (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d044      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d119      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e067      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b37      	ldr	r3, [pc, #220]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4934      	ldr	r1, [pc, #208]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff fa6a 	bl	8001258 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff fa66 	bl	8001258 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e04f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d20c      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	@ (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f8fa 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08005948 	.word	0x08005948
 8001e54:	2000001c 	.word	0x2000001c
 8001e58:	20000020 	.word	0x20000020

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e60:	b090      	sub	sp, #64	@ 0x40
 8001e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e68:	2300      	movs	r3, #0
 8001e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e74:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d00d      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x40>
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	f200 80a1 	bhi.w	8001fc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e8e:	e09b      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e92:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001e94:	e09b      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e96:	4b53      	ldr	r3, [pc, #332]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e9a:	e098      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d028      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	2200      	movs	r2, #0
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4b47      	ldr	r3, [pc, #284]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ec8:	fb03 f201 	mul.w	r2, r3, r1
 8001ecc:	2300      	movs	r3, #0
 8001ece:	fb00 f303 	mul.w	r3, r0, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a43      	ldr	r2, [pc, #268]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed6:	fba0 1202 	umull	r1, r2, r0, r2
 8001eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001edc:	460a      	mov	r2, r1
 8001ede:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee2:	4413      	add	r3, r2
 8001ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	61fa      	str	r2, [r7, #28]
 8001eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ef6:	f7fe f973 	bl	80001e0 <__aeabi_uldivmod>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4613      	mov	r3, r2
 8001f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f02:	e053      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f04:	4b35      	ldr	r3, [pc, #212]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	617a      	str	r2, [r7, #20]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f16:	f04f 0b00 	mov.w	fp, #0
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	465b      	mov	r3, fp
 8001f1e:	f04f 0000 	mov.w	r0, #0
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	0159      	lsls	r1, r3, #5
 8001f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f2c:	0150      	lsls	r0, r2, #5
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	ebb2 080a 	subs.w	r8, r2, sl
 8001f36:	eb63 090b 	sbc.w	r9, r3, fp
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001f52:	eb63 0509 	sbc.w	r5, r3, r9
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	00eb      	lsls	r3, r5, #3
 8001f60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f64:	00e2      	lsls	r2, r4, #3
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
 8001f6a:	eb14 030a 	adds.w	r3, r4, sl
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	eb45 030b 	adc.w	r3, r5, fp
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f82:	4629      	mov	r1, r5
 8001f84:	028b      	lsls	r3, r1, #10
 8001f86:	4621      	mov	r1, r4
 8001f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	028a      	lsls	r2, r1, #10
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f96:	2200      	movs	r2, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	60fa      	str	r2, [r7, #12]
 8001f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa0:	f7fe f91e 	bl	80001e0 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001fbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3740      	adds	r7, #64	@ 0x40
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	017d7840 	.word	0x017d7840

08001fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000001c 	.word	0x2000001c

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a9b      	lsrs	r3, r3, #10
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	08005958 	.word	0x08005958

08002028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	220f      	movs	r2, #15
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002038:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0203 	and.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_GetClockConfig+0x5c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_RCC_GetClockConfig+0x60>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0207 	and.w	r2, r3, #7
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40023c00 	.word	0x40023c00

0800208c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07b      	b.n	8002196 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d108      	bne.n	80020b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ae:	d009      	beq.n	80020c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
 80020b6:	e005      	b.n	80020c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe ff08 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002148:	ea42 0103 	orr.w	r1, r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	f003 0104 	and.w	r1, r3, #4
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	f003 0210 	and.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002184:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b088      	sub	sp, #32
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_SPI_Transmit+0x22>
 80021bc:	2302      	movs	r3, #2
 80021be:	e12d      	b.n	800241c <HAL_SPI_Transmit+0x27e>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021c8:	f7ff f846 	bl	8001258 <HAL_GetTick>
 80021cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021e2:	e116      	b.n	8002412 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Transmit+0x52>
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021f4:	e10d      	b.n	8002412 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800223c:	d10f      	bne.n	800225e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800224c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800225c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d007      	beq.n	800227c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800227a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002284:	d14f      	bne.n	8002326 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <HAL_SPI_Transmit+0xf6>
 800228e:	8afb      	ldrh	r3, [r7, #22]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d142      	bne.n	800231a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	1c9a      	adds	r2, r3, #2
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022b8:	e02f      	b.n	800231a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d112      	bne.n	80022ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	1c9a      	adds	r2, r3, #2
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022ec:	e015      	b.n	800231a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ee:	f7fe ffb3 	bl	8001258 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d803      	bhi.n	8002306 <HAL_SPI_Transmit+0x168>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d102      	bne.n	800230c <HAL_SPI_Transmit+0x16e>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002318:	e07b      	b.n	8002412 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ca      	bne.n	80022ba <HAL_SPI_Transmit+0x11c>
 8002324:	e050      	b.n	80023c8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_SPI_Transmit+0x196>
 800232e:	8afb      	ldrh	r3, [r7, #22]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d144      	bne.n	80023be <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	7812      	ldrb	r2, [r2, #0]
 8002340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800235a:	e030      	b.n	80023be <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b02      	cmp	r3, #2
 8002368:	d113      	bne.n	8002392 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002390:	e015      	b.n	80023be <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002392:	f7fe ff61 	bl	8001258 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d803      	bhi.n	80023aa <HAL_SPI_Transmit+0x20c>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d102      	bne.n	80023b0 <HAL_SPI_Transmit+0x212>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023bc:	e029      	b.n	8002412 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1c9      	bne.n	800235c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f8bf 	bl	8002550 <SPI_EndRxTxTransaction>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10a      	bne.n	80023fc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	77fb      	strb	r3, [r7, #31]
 8002408:	e003      	b.n	8002412 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800241a:	7ffb      	ldrb	r3, [r7, #31]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002432:	b2db      	uxtb	r3, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002450:	f7fe ff02 	bl	8001258 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002460:	f7fe fefa 	bl	8001258 <HAL_GetTick>
 8002464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002466:	4b39      	ldr	r3, [pc, #228]	@ (800254c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	0d1b      	lsrs	r3, r3, #20
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002476:	e054      	b.n	8002522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d050      	beq.n	8002522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002480:	f7fe feea 	bl	8001258 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	d902      	bls.n	8002496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d13d      	bne.n	8002512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024ae:	d111      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024b8:	d004      	beq.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c2:	d107      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024dc:	d10f      	bne.n	80024fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e017      	b.n	8002542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3b01      	subs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	429a      	cmp	r2, r3
 800253e:	d19b      	bne.n	8002478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000001c 	.word	0x2000001c

08002550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2201      	movs	r2, #1
 8002564:	2102      	movs	r1, #2
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ff6a 	bl	8002440 <SPI_WaitFlagStateUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e032      	b.n	80025e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <SPI_EndRxTxTransaction+0xa0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <SPI_EndRxTxTransaction+0xa4>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0d5b      	lsrs	r3, r3, #21
 800258e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a0:	d112      	bne.n	80025c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2180      	movs	r1, #128	@ 0x80
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff ff47 	bl	8002440 <SPI_WaitFlagStateUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d016      	beq.n	80025e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e00f      	b.n	80025e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b80      	cmp	r3, #128	@ 0x80
 80025e0:	d0f2      	beq.n	80025c8 <SPI_EndRxTxTransaction+0x78>
 80025e2:	e000      	b.n	80025e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80025e4:	bf00      	nop
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000001c 	.word	0x2000001c
 80025f4:	165e9f81 	.word	0x165e9f81

080025f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e041      	b.n	800268e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f839 	bl	8002696 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f000 f9b2 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d001      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e044      	b.n	800274e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <HAL_TIM_Base_Start_IT+0xb0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d018      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ee:	d013      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002760 <HAL_TIM_Base_Start_IT+0xb4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00e      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a19      	ldr	r2, [pc, #100]	@ (8002764 <HAL_TIM_Base_Start_IT+0xb8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a17      	ldr	r2, [pc, #92]	@ (8002768 <HAL_TIM_Base_Start_IT+0xbc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x6c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a16      	ldr	r2, [pc, #88]	@ (800276c <HAL_TIM_Base_Start_IT+0xc0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d111      	bne.n	800273c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b06      	cmp	r3, #6
 8002728:	d010      	beq.n	800274c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273a:	e007      	b.n	800274c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000
 8002760:	40000400 	.word	0x40000400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40014000 	.word	0x40014000

08002770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d020      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01b      	beq.n	80027d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0202 	mvn.w	r2, #2
 80027a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8d2 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8c4 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f8d5 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d020      	beq.n	8002820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0204 	mvn.w	r2, #4
 80027f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8ac 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f89e 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f8af 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d020      	beq.n	800286c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01b      	beq.n	800286c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0208 	mvn.w	r2, #8
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2204      	movs	r2, #4
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f886 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f878 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f889 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d020      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01b      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0210 	mvn.w	r2, #16
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2208      	movs	r2, #8
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f860 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f852 	bl	8002950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f863 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe facb 	bl	8000e72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8e6 	bl	8002acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f834 	bl	800298c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0220 	mvn.w	r2, #32
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8b8 	bl	8002ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3a      	ldr	r2, [pc, #232]	@ (8002a9c <TIM_Base_SetConfig+0xfc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00f      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a37      	ldr	r2, [pc, #220]	@ (8002aa0 <TIM_Base_SetConfig+0x100>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a36      	ldr	r2, [pc, #216]	@ (8002aa4 <TIM_Base_SetConfig+0x104>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a35      	ldr	r2, [pc, #212]	@ (8002aa8 <TIM_Base_SetConfig+0x108>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2b      	ldr	r2, [pc, #172]	@ (8002a9c <TIM_Base_SetConfig+0xfc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01b      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f8:	d017      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a28      	ldr	r2, [pc, #160]	@ (8002aa0 <TIM_Base_SetConfig+0x100>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a27      	ldr	r2, [pc, #156]	@ (8002aa4 <TIM_Base_SetConfig+0x104>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	@ (8002aa8 <TIM_Base_SetConfig+0x108>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a25      	ldr	r2, [pc, #148]	@ (8002aac <TIM_Base_SetConfig+0x10c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	@ (8002ab0 <TIM_Base_SetConfig+0x110>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a23      	ldr	r2, [pc, #140]	@ (8002ab4 <TIM_Base_SetConfig+0x114>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <TIM_Base_SetConfig+0xfc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	611a      	str	r2, [r3, #16]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800

08002ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <__NVIC_SetPriority>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	@ (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	@ (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <SysTick_Handler+0x1c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b3c:	f001 fd46 	bl	80045cc <xTaskGetSchedulerState>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b46:	f002 fb3f 	bl	80051c8 <xPortSysTickHandler>
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	f06f 0004 	mvn.w	r0, #4
 8002b5e:	f7ff ffbf 	bl	8002ae0 <__NVIC_SetPriority>
#endif
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b6e:	f3ef 8305 	mrs	r3, IPSR
 8002b72:	603b      	str	r3, [r7, #0]
  return(result);
 8002b74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b7a:	f06f 0305 	mvn.w	r3, #5
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	e00c      	b.n	8002b9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <osKernelInitialize+0x44>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <osKernelInitialize+0x44>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	e002      	b.n	8002b9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200001b8 	.word	0x200001b8

08002bb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bb6:	f3ef 8305 	mrs	r3, IPSR
 8002bba:	603b      	str	r3, [r7, #0]
  return(result);
 8002bbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <osKernelStart+0x1a>
    stat = osErrorISR;
 8002bc2:	f06f 0305 	mvn.w	r3, #5
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	e010      	b.n	8002bec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bca:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <osKernelStart+0x48>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d109      	bne.n	8002be6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002bd2:	f7ff ffbf 	bl	8002b54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <osKernelStart+0x48>)
 8002bd8:	2202      	movs	r2, #2
 8002bda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bdc:	f001 f892 	bl	8003d04 <vTaskStartScheduler>
      stat = osOK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	e002      	b.n	8002bec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200001b8 	.word	0x200001b8

08002bfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	@ 0x38
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c0c:	f3ef 8305 	mrs	r3, IPSR
 8002c10:	617b      	str	r3, [r7, #20]
  return(result);
 8002c12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d17e      	bne.n	8002d16 <osThreadNew+0x11a>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d07b      	beq.n	8002d16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c22:	2318      	movs	r3, #24
 8002c24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d045      	beq.n	8002cc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <osThreadNew+0x48>
        name = attr->name;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <osThreadNew+0x6e>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b38      	cmp	r3, #56	@ 0x38
 8002c5c:	d805      	bhi.n	8002c6a <osThreadNew+0x6e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <osThreadNew+0x72>
        return (NULL);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e054      	b.n	8002d18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00e      	beq.n	8002ca4 <osThreadNew+0xa8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c8c:	d90a      	bls.n	8002ca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <osThreadNew+0xa8>
        mem = 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e010      	b.n	8002cc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10c      	bne.n	8002cc6 <osThreadNew+0xca>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d108      	bne.n	8002cc6 <osThreadNew+0xca>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <osThreadNew+0xca>
          mem = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e001      	b.n	8002cc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d110      	bne.n	8002cee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cd4:	9202      	str	r2, [sp, #8]
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6a3a      	ldr	r2, [r7, #32]
 8002ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fe1a 	bl	800391c <xTaskCreateStatic>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e013      	b.n	8002d16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d110      	bne.n	8002d16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	f107 0310 	add.w	r3, r7, #16
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fe68 	bl	80039dc <xTaskCreate>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <osThreadNew+0x11a>
            hTask = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d16:	693b      	ldr	r3, [r7, #16]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3728      	adds	r7, #40	@ 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d28:	f3ef 8305 	mrs	r3, IPSR
 8002d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <osDelay+0x1c>
    stat = osErrorISR;
 8002d34:	f06f 0305 	mvn.w	r3, #5
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e007      	b.n	8002d4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 ffa6 	bl	8003c98 <vTaskDelay>
    }
  }

  return (stat);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a07      	ldr	r2, [pc, #28]	@ (8002d84 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a06      	ldr	r2, [pc, #24]	@ (8002d88 <vApplicationGetIdleTaskMemory+0x30>)
 8002d6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	200001bc 	.word	0x200001bc
 8002d88:	20000264 	.word	0x20000264

08002d8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a06      	ldr	r2, [pc, #24]	@ (8002dbc <vApplicationGetTimerTaskMemory+0x30>)
 8002da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	20000464 	.word	0x20000464
 8002dbc:	2000050c 	.word	0x2000050c

08002dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f103 0208 	add.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f103 0208 	add.w	r2, r3, #8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f103 0208 	add.w	r2, r3, #8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d103      	bne.n	8002e82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e00c      	b.n	8002e9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3308      	adds	r3, #8
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e002      	b.n	8002e90 <vListInsert+0x2e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d2f6      	bcs.n	8002e8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6892      	ldr	r2, [r2, #8]
 8002eea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6852      	ldr	r2, [r2, #4]
 8002ef4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d103      	bne.n	8002f08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10b      	bne.n	8002f54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f54:	f002 f8a8 	bl	80050a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	441a      	add	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	3b01      	subs	r3, #1
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	22ff      	movs	r2, #255	@ 0xff
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	22ff      	movs	r2, #255	@ 0xff
 8002fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d114      	bne.n	8002fd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01a      	beq.n	8002fe8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 f942 	bl	8004240 <xTaskRemoveFromEventList>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d012      	beq.n	8002fe8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <xQueueGenericReset+0xd0>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	e009      	b.n	8002fe8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fef1 	bl	8002dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3324      	adds	r3, #36	@ 0x24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff feec 	bl	8002dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fe8:	f002 f890 	bl	800510c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08e      	sub	sp, #56	@ 0x38
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	e7fd      	b.n	8003042 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <xQueueGenericCreateStatic+0x56>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <xQueueGenericCreateStatic+0x5a>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <xQueueGenericCreateStatic+0x5c>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	623b      	str	r3, [r7, #32]
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <xQueueGenericCreateStatic+0x84>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <xQueueGenericCreateStatic+0x88>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <xQueueGenericCreateStatic+0x8a>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	61fb      	str	r3, [r7, #28]
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030a2:	2350      	movs	r3, #80	@ 0x50
 80030a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b50      	cmp	r3, #80	@ 0x50
 80030aa:	d00b      	beq.n	80030c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61bb      	str	r3, [r7, #24]
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f805 	bl	80030f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3730      	adds	r7, #48	@ 0x30
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e002      	b.n	8003118 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003124:	2101      	movs	r1, #1
 8003126:	69b8      	ldr	r0, [r7, #24]
 8003128:	f7ff fefe 	bl	8002f28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	@ 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <xQueueGenericSend+0x34>
	__asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	e7fd      	b.n	800316c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <xQueueGenericSend+0x42>
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <xQueueGenericSend+0x46>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <xQueueGenericSend+0x48>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <xQueueGenericSend+0x64>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d103      	bne.n	80031ae <xQueueGenericSend+0x72>
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <xQueueGenericSend+0x76>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <xQueueGenericSend+0x78>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <xQueueGenericSend+0x94>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	623b      	str	r3, [r7, #32]
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d0:	f001 f9fc 	bl	80045cc <xTaskGetSchedulerState>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <xQueueGenericSend+0xa4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <xQueueGenericSend+0xa8>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <xQueueGenericSend+0xaa>
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <xQueueGenericSend+0xc6>
	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	61fb      	str	r3, [r7, #28]
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	e7fd      	b.n	80031fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003202:	f001 ff51 	bl	80050a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <xQueueGenericSend+0xdc>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d129      	bne.n	800326c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800321e:	f000 fa0f 	bl	8003640 <prvCopyDataToQueue>
 8003222:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322e:	3324      	adds	r3, #36	@ 0x24
 8003230:	4618      	mov	r0, r3
 8003232:	f001 f805 	bl	8004240 <xTaskRemoveFromEventList>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800323c:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <xQueueGenericSend+0x200>)
 800323e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	e00a      	b.n	8003264 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800324e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003254:	4b39      	ldr	r3, [pc, #228]	@ (800333c <xQueueGenericSend+0x200>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003264:	f001 ff52 	bl	800510c <vPortExitCritical>
				return pdPASS;
 8003268:	2301      	movs	r3, #1
 800326a:	e063      	b.n	8003334 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003272:	f001 ff4b 	bl	800510c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003276:	2300      	movs	r3, #0
 8003278:	e05c      	b.n	8003334 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800327a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f83f 	bl	8004308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800328a:	2301      	movs	r3, #1
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800328e:	f001 ff3d 	bl	800510c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003292:	f000 fda7 	bl	8003de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003296:	f001 ff07 	bl	80050a8 <vPortEnterCritical>
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <xQueueGenericSend+0x174>
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <xQueueGenericSend+0x18a>
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032c6:	f001 ff21 	bl	800510c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ca:	1d3a      	adds	r2, r7, #4
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 f82e 	bl	8004334 <xTaskCheckForTimeOut>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d124      	bne.n	8003328 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032e0:	f000 faa6 	bl	8003830 <prvIsQueueFull>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	3310      	adds	r3, #16
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ff52 	bl	800419c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032fa:	f000 fa31 	bl	8003760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032fe:	f000 fd7f 	bl	8003e00 <xTaskResumeAll>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f af7c 	bne.w	8003202 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800330a:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <xQueueGenericSend+0x200>)
 800330c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	e772      	b.n	8003202 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800331c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800331e:	f000 fa1f 	bl	8003760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003322:	f000 fd6d 	bl	8003e00 <xTaskResumeAll>
 8003326:	e76c      	b.n	8003202 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800332a:	f000 fa19 	bl	8003760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800332e:	f000 fd67 	bl	8003e00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003334:	4618      	mov	r0, r3
 8003336:	3738      	adds	r7, #56	@ 0x38
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	e000ed04 	.word	0xe000ed04

08003340 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b090      	sub	sp, #64	@ 0x40
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <xQueueGenericSendFromISR+0x3e>
 8003376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <xQueueGenericSendFromISR+0x42>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueGenericSendFromISR+0x44>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d103      	bne.n	80033ae <xQueueGenericSendFromISR+0x6e>
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <xQueueGenericSendFromISR+0x72>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <xQueueGenericSendFromISR+0x74>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	623b      	str	r3, [r7, #32]
}
 80033ca:	bf00      	nop
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d0:	f001 ff4a 	bl	8005268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033d4:	f3ef 8211 	mrs	r2, BASEPRI
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61fa      	str	r2, [r7, #28]
 80033ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <xQueueGenericSendFromISR+0xc2>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d12f      	bne.n	8003462 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003408:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003418:	f000 f912 	bl	8003640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800341c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d112      	bne.n	800344c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	3324      	adds	r3, #36	@ 0x24
 8003432:	4618      	mov	r0, r3
 8003434:	f000 ff04 	bl	8004240 <xTaskRemoveFromEventList>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800344c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003450:	3301      	adds	r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	b25a      	sxtb	r2, r3
 8003456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800345c:	2301      	movs	r3, #1
 800345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003460:	e001      	b.n	8003466 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003462:	2300      	movs	r3, #0
 8003464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003468:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003470:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003474:	4618      	mov	r0, r3
 8003476:	3740      	adds	r7, #64	@ 0x40
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08c      	sub	sp, #48	@ 0x30
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <xQueueReceive+0x32>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	623b      	str	r3, [r7, #32]
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	e7fd      	b.n	80034aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <xQueueReceive+0x40>
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <xQueueReceive+0x44>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <xQueueReceive+0x46>
 80034c0:	2300      	movs	r3, #0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <xQueueReceive+0x62>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	61fb      	str	r3, [r7, #28]
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	e7fd      	b.n	80034da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034de:	f001 f875 	bl	80045cc <xTaskGetSchedulerState>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <xQueueReceive+0x72>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <xQueueReceive+0x76>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <xQueueReceive+0x78>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <xQueueReceive+0x94>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61bb      	str	r3, [r7, #24]
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003510:	f001 fdca 	bl	80050a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01f      	beq.n	8003560 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003524:	f000 f8f6 	bl	8003714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	3310      	adds	r3, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fe7f 	bl	8004240 <xTaskRemoveFromEventList>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003548:	4b3c      	ldr	r3, [pc, #240]	@ (800363c <xQueueReceive+0x1c0>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003558:	f001 fdd8 	bl	800510c <vPortExitCritical>
				return pdPASS;
 800355c:	2301      	movs	r3, #1
 800355e:	e069      	b.n	8003634 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003566:	f001 fdd1 	bl	800510c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800356a:	2300      	movs	r3, #0
 800356c:	e062      	b.n	8003634 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fec5 	bl	8004308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800357e:	2301      	movs	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003582:	f001 fdc3 	bl	800510c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003586:	f000 fc2d 	bl	8003de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800358a:	f001 fd8d 	bl	80050a8 <vPortEnterCritical>
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003594:	b25b      	sxtb	r3, r3
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d103      	bne.n	80035a4 <xQueueReceive+0x128>
 800359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d103      	bne.n	80035ba <xQueueReceive+0x13e>
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ba:	f001 fda7 	bl	800510c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035be:	1d3a      	adds	r2, r7, #4
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 feb4 	bl	8004334 <xTaskCheckForTimeOut>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d123      	bne.n	800361a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035d4:	f000 f916 	bl	8003804 <prvIsQueueEmpty>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d017      	beq.n	800360e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	3324      	adds	r3, #36	@ 0x24
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fdd8 	bl	800419c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ee:	f000 f8b7 	bl	8003760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035f2:	f000 fc05 	bl	8003e00 <xTaskResumeAll>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d189      	bne.n	8003510 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035fc:	4b0f      	ldr	r3, [pc, #60]	@ (800363c <xQueueReceive+0x1c0>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	e780      	b.n	8003510 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800360e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003610:	f000 f8a6 	bl	8003760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003614:	f000 fbf4 	bl	8003e00 <xTaskResumeAll>
 8003618:	e77a      	b.n	8003510 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800361a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800361c:	f000 f8a0 	bl	8003760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003620:	f000 fbee 	bl	8003e00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003626:	f000 f8ed 	bl	8003804 <prvIsQueueEmpty>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	f43f af6f 	beq.w	8003510 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003632:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003634:	4618      	mov	r0, r3
 8003636:	3730      	adds	r7, #48	@ 0x30
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d14d      	bne.n	8003702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ffcc 	bl	8004608 <xTaskPriorityDisinherit>
 8003670:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e043      	b.n	8003702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d119      	bne.n	80036b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6858      	ldr	r0, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	461a      	mov	r2, r3
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	f002 f8a0 	bl	80057d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	441a      	add	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d32b      	bcc.n	8003702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e026      	b.n	8003702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68d8      	ldr	r0, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	461a      	mov	r2, r3
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	f002 f886 	bl	80057d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	425b      	negs	r3, r3
 80036ce:	441a      	add	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d207      	bcs.n	80036f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	425b      	negs	r3, r3
 80036ea:	441a      	add	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d105      	bne.n	8003702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	3b01      	subs	r3, #1
 8003700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800370a:	697b      	ldr	r3, [r7, #20]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	441a      	add	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d303      	bcc.n	8003748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68d9      	ldr	r1, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	461a      	mov	r2, r3
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	f002 f83c 	bl	80057d0 <memcpy>
	}
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003768:	f001 fc9e 	bl	80050a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003774:	e011      	b.n	800379a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d012      	beq.n	80037a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3324      	adds	r3, #36	@ 0x24
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fd5c 	bl	8004240 <xTaskRemoveFromEventList>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800378e:	f000 fe35 	bl	80043fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	3b01      	subs	r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	dce9      	bgt.n	8003776 <prvUnlockQueue+0x16>
 80037a2:	e000      	b.n	80037a6 <prvUnlockQueue+0x46>
					break;
 80037a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	22ff      	movs	r2, #255	@ 0xff
 80037aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 fcad 	bl	800510c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037b2:	f001 fc79 	bl	80050a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037be:	e011      	b.n	80037e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d012      	beq.n	80037ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3310      	adds	r3, #16
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fd37 	bl	8004240 <xTaskRemoveFromEventList>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037d8:	f000 fe10 	bl	80043fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037dc:	7bbb      	ldrb	r3, [r7, #14]
 80037de:	3b01      	subs	r3, #1
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	dce9      	bgt.n	80037c0 <prvUnlockQueue+0x60>
 80037ec:	e000      	b.n	80037f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	22ff      	movs	r2, #255	@ 0xff
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037f8:	f001 fc88 	bl	800510c <vPortExitCritical>
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800380c:	f001 fc4c 	bl	80050a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e001      	b.n	8003822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003822:	f001 fc73 	bl	800510c <vPortExitCritical>

	return xReturn;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003838:	f001 fc36 	bl	80050a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	429a      	cmp	r2, r3
 8003846:	d102      	bne.n	800384e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e001      	b.n	8003852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f001 fc5b 	bl	800510c <vPortExitCritical>

	return xReturn;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e014      	b.n	800389a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003870:	4a0f      	ldr	r2, [pc, #60]	@ (80038b0 <vQueueAddToRegistry+0x50>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800387c:	490c      	ldr	r1, [pc, #48]	@ (80038b0 <vQueueAddToRegistry+0x50>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003886:	4a0a      	ldr	r2, [pc, #40]	@ (80038b0 <vQueueAddToRegistry+0x50>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003892:	e006      	b.n	80038a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3301      	adds	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b07      	cmp	r3, #7
 800389e:	d9e7      	bls.n	8003870 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000090c 	.word	0x2000090c

080038b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038c4:	f001 fbf0 	bl	80050a8 <vPortEnterCritical>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d103      	bne.n	80038de <vQueueWaitForMessageRestricted+0x2a>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038e4:	b25b      	sxtb	r3, r3
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d103      	bne.n	80038f4 <vQueueWaitForMessageRestricted+0x40>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038f4:	f001 fc0a 	bl	800510c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	3324      	adds	r3, #36	@ 0x24
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fc6d 	bl	80041e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff ff26 	bl	8003760 <prvUnlockQueue>
	}
 8003914:	bf00      	nop
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08e      	sub	sp, #56	@ 0x38
 8003920:	af04      	add	r7, sp, #16
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	623b      	str	r3, [r7, #32]
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xTaskCreateStatic+0x4a>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	61fb      	str	r3, [r7, #28]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003966:	23a8      	movs	r3, #168	@ 0xa8
 8003968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2ba8      	cmp	r3, #168	@ 0xa8
 800396e:	d00b      	beq.n	8003988 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61bb      	str	r3, [r7, #24]
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003988:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01e      	beq.n	80039ce <xTaskCreateStatic+0xb2>
 8003990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01b      	beq.n	80039ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a8:	2300      	movs	r3, #0
 80039aa:	9303      	str	r3, [sp, #12]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	9302      	str	r3, [sp, #8]
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f851 	bl	8003a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039c8:	f000 f8f6 	bl	8003bb8 <prvAddNewTaskToReadyList>
 80039cc:	e001      	b.n	80039d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039d2:	697b      	ldr	r3, [r7, #20]
	}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	@ 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	@ 0x30
 80039e0:	af04      	add	r7, sp, #16
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fc7b 	bl	80052ec <pvPortMalloc>
 80039f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039fe:	20a8      	movs	r0, #168	@ 0xa8
 8003a00:	f001 fc74 	bl	80052ec <pvPortMalloc>
 8003a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a12:	e005      	b.n	8003a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f001 fd37 	bl	8005488 <vPortFree>
 8003a1a:	e001      	b.n	8003a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	2300      	movs	r3, #0
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	9302      	str	r3, [sp, #8]
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f80f 	bl	8003a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a4a:	69f8      	ldr	r0, [r7, #28]
 8003a4c:	f000 f8b4 	bl	8003bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a50:	2301      	movs	r3, #1
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e002      	b.n	8003a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	21a5      	movs	r1, #165	@ 0xa5
 8003a82:	f001 fe21 	bl	80056c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a90:	3b01      	subs	r3, #1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	617b      	str	r3, [r7, #20]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01f      	beq.n	8003b08 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e012      	b.n	8003af4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	7819      	ldrb	r1, [r3, #0]
 8003ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	3334      	adds	r3, #52	@ 0x34
 8003ade:	460a      	mov	r2, r1
 8003ae0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d9e9      	bls.n	8003ace <prvInitialiseNewTask+0x66>
 8003afa:	e000      	b.n	8003afe <prvInitialiseNewTask+0x96>
			{
				break;
 8003afc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b06:	e003      	b.n	8003b10 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	2b37      	cmp	r3, #55	@ 0x37
 8003b14:	d901      	bls.n	8003b1a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b16:	2337      	movs	r3, #55	@ 0x37
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	2200      	movs	r2, #0
 8003b2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff f965 	bl	8002e00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	3318      	adds	r3, #24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff f960 	bl	8002e00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	3354      	adds	r3, #84	@ 0x54
 8003b6a:	224c      	movs	r2, #76	@ 0x4c
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fdaa 	bl	80056c8 <memset>
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	4a0d      	ldr	r2, [pc, #52]	@ (8003bac <prvInitialiseNewTask+0x144>)
 8003b78:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <prvInitialiseNewTask+0x148>)
 8003b7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <prvInitialiseNewTask+0x14c>)
 8003b84:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	69b8      	ldr	r0, [r7, #24]
 8003b8c:	f001 f95a 	bl	8004e44 <pxPortInitialiseStack>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba2:	bf00      	nop
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20004ba0 	.word	0x20004ba0
 8003bb0:	20004c08 	.word	0x20004c08
 8003bb4:	20004c70 	.word	0x20004c70

08003bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bc0:	f001 fa72 	bl	80050a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <prvAddNewTaskToReadyList+0xc4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	4a2c      	ldr	r2, [pc, #176]	@ (8003c7c <prvAddNewTaskToReadyList+0xc4>)
 8003bcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bce:	4b2c      	ldr	r3, [pc, #176]	@ (8003c80 <prvAddNewTaskToReadyList+0xc8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c80 <prvAddNewTaskToReadyList+0xc8>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <prvAddNewTaskToReadyList+0xc4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d110      	bne.n	8003c06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003be4:	f000 fc2e 	bl	8004444 <prvInitialiseTaskLists>
 8003be8:	e00d      	b.n	8003c06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bea:	4b26      	ldr	r3, [pc, #152]	@ (8003c84 <prvAddNewTaskToReadyList+0xcc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d109      	bne.n	8003c06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bf2:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <prvAddNewTaskToReadyList+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d802      	bhi.n	8003c06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c00:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <prvAddNewTaskToReadyList+0xc8>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <prvAddNewTaskToReadyList+0xd0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <prvAddNewTaskToReadyList+0xd0>)
 8003c0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <prvAddNewTaskToReadyList+0xd0>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c8c <prvAddNewTaskToReadyList+0xd4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d903      	bls.n	8003c2c <prvAddNewTaskToReadyList+0x74>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	4a18      	ldr	r2, [pc, #96]	@ (8003c8c <prvAddNewTaskToReadyList+0xd4>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4a15      	ldr	r2, [pc, #84]	@ (8003c90 <prvAddNewTaskToReadyList+0xd8>)
 8003c3a:	441a      	add	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7ff f8e9 	bl	8002e1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c48:	f001 fa60 	bl	800510c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <prvAddNewTaskToReadyList+0xcc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <prvAddNewTaskToReadyList+0xc8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d207      	bcs.n	8003c72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c62:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <prvAddNewTaskToReadyList+0xdc>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000e20 	.word	0x20000e20
 8003c80:	2000094c 	.word	0x2000094c
 8003c84:	20000e2c 	.word	0x20000e2c
 8003c88:	20000e3c 	.word	0x20000e3c
 8003c8c:	20000e28 	.word	0x20000e28
 8003c90:	20000950 	.word	0x20000950
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003caa:	4b14      	ldr	r3, [pc, #80]	@ (8003cfc <vTaskDelay+0x64>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <vTaskDelay+0x32>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60bb      	str	r3, [r7, #8]
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	e7fd      	b.n	8003cc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cca:	f000 f88b 	bl	8003de4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cce:	2100      	movs	r1, #0
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fd09 	bl	80046e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cd6:	f000 f893 	bl	8003e00 <xTaskResumeAll>
 8003cda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ce2:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <vTaskDelay+0x68>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000e48 	.word	0x20000e48
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d12:	463a      	mov	r2, r7
 8003d14:	1d39      	adds	r1, r7, #4
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f81c 	bl	8002d58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d20:	6839      	ldr	r1, [r7, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	9202      	str	r2, [sp, #8]
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	460a      	mov	r2, r1
 8003d32:	4924      	ldr	r1, [pc, #144]	@ (8003dc4 <vTaskStartScheduler+0xc0>)
 8003d34:	4824      	ldr	r0, [pc, #144]	@ (8003dc8 <vTaskStartScheduler+0xc4>)
 8003d36:	f7ff fdf1 	bl	800391c <xTaskCreateStatic>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a23      	ldr	r2, [pc, #140]	@ (8003dcc <vTaskStartScheduler+0xc8>)
 8003d3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d40:	4b22      	ldr	r3, [pc, #136]	@ (8003dcc <vTaskStartScheduler+0xc8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e001      	b.n	8003d52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d58:	f000 fd1a 	bl	8004790 <xTimerCreateTimerTask>
 8003d5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d11b      	bne.n	8003d9c <vTaskStartScheduler+0x98>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	613b      	str	r3, [r7, #16]
}
 8003d76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d78:	4b15      	ldr	r3, [pc, #84]	@ (8003dd0 <vTaskStartScheduler+0xcc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3354      	adds	r3, #84	@ 0x54
 8003d7e:	4a15      	ldr	r2, [pc, #84]	@ (8003dd4 <vTaskStartScheduler+0xd0>)
 8003d80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d82:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <vTaskStartScheduler+0xd4>)
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d8a:	4b14      	ldr	r3, [pc, #80]	@ (8003ddc <vTaskStartScheduler+0xd8>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <vTaskStartScheduler+0xdc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d96:	f001 f8e3 	bl	8004f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d9a:	e00f      	b.n	8003dbc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d10b      	bne.n	8003dbc <vTaskStartScheduler+0xb8>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60fb      	str	r3, [r7, #12]
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <vTaskStartScheduler+0xb4>
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	080058d4 	.word	0x080058d4
 8003dc8:	08004415 	.word	0x08004415
 8003dcc:	20000e44 	.word	0x20000e44
 8003dd0:	2000094c 	.word	0x2000094c
 8003dd4:	2000002c 	.word	0x2000002c
 8003dd8:	20000e40 	.word	0x20000e40
 8003ddc:	20000e2c 	.word	0x20000e2c
 8003de0:	20000e24 	.word	0x20000e24

08003de4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <vTaskSuspendAll+0x18>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a03      	ldr	r2, [pc, #12]	@ (8003dfc <vTaskSuspendAll+0x18>)
 8003df0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20000e48 	.word	0x20000e48

08003e00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e0e:	4b42      	ldr	r3, [pc, #264]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <xTaskResumeAll+0x2e>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	603b      	str	r3, [r7, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	e7fd      	b.n	8003e2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e2e:	f001 f93b 	bl	80050a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e32:	4b39      	ldr	r3, [pc, #228]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	4a37      	ldr	r2, [pc, #220]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3c:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <xTaskResumeAll+0x118>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d162      	bne.n	8003f0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e44:	4b35      	ldr	r3, [pc, #212]	@ (8003f1c <xTaskResumeAll+0x11c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05e      	beq.n	8003f0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4c:	e02f      	b.n	8003eae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4e:	4b34      	ldr	r3, [pc, #208]	@ (8003f20 <xTaskResumeAll+0x120>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3318      	adds	r3, #24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f83a 	bl	8002ed4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff f835 	bl	8002ed4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f24 <xTaskResumeAll+0x124>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d903      	bls.n	8003e7e <xTaskResumeAll+0x7e>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f24 <xTaskResumeAll+0x124>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <xTaskResumeAll+0x128>)
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe ffc0 	bl	8002e1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9e:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <xTaskResumeAll+0x12c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003ea8:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <xTaskResumeAll+0x130>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eae:	4b1c      	ldr	r3, [pc, #112]	@ (8003f20 <xTaskResumeAll+0x120>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1cb      	bne.n	8003e4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ebc:	f000 fb66 	bl	800458c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f34 <xTaskResumeAll+0x134>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ecc:	f000 f846 	bl	8003f5c <xTaskIncrementTick>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ed6:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <xTaskResumeAll+0x130>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f1      	bne.n	8003ecc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ee8:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <xTaskResumeAll+0x134>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <xTaskResumeAll+0x130>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003efa:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <xTaskResumeAll+0x138>)
 8003efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f0a:	f001 f8ff 	bl	800510c <vPortExitCritical>

	return xAlreadyYielded;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000e48 	.word	0x20000e48
 8003f1c:	20000e20 	.word	0x20000e20
 8003f20:	20000de0 	.word	0x20000de0
 8003f24:	20000e28 	.word	0x20000e28
 8003f28:	20000950 	.word	0x20000950
 8003f2c:	2000094c 	.word	0x2000094c
 8003f30:	20000e34 	.word	0x20000e34
 8003f34:	20000e30 	.word	0x20000e30
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <xTaskGetTickCount+0x1c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f48:	687b      	ldr	r3, [r7, #4]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000e24 	.word	0x20000e24

08003f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <xTaskIncrementTick+0x148>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f040 8090 	bne.w	8004090 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f70:	4b4d      	ldr	r3, [pc, #308]	@ (80040a8 <xTaskIncrementTick+0x14c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f78:	4a4b      	ldr	r2, [pc, #300]	@ (80040a8 <xTaskIncrementTick+0x14c>)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d121      	bne.n	8003fc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f84:	4b49      	ldr	r3, [pc, #292]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	603b      	str	r3, [r7, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <xTaskIncrementTick+0x46>
 8003fa6:	4b41      	ldr	r3, [pc, #260]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <xTaskIncrementTick+0x154>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80040b0 <xTaskIncrementTick+0x154>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b3e      	ldr	r3, [pc, #248]	@ (80040b4 <xTaskIncrementTick+0x158>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80040b4 <xTaskIncrementTick+0x158>)
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	f000 fae2 	bl	800458c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <xTaskIncrementTick+0x15c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d349      	bcc.n	8004066 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd2:	4b36      	ldr	r3, [pc, #216]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fdc:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <xTaskIncrementTick+0x15c>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	601a      	str	r2, [r3, #0]
					break;
 8003fe4:	e03f      	b.n	8004066 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b31      	ldr	r3, [pc, #196]	@ (80040ac <xTaskIncrementTick+0x150>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d203      	bcs.n	8004006 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80040b8 <xTaskIncrementTick+0x15c>)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004004:	e02f      	b.n	8004066 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3304      	adds	r3, #4
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe ff62 	bl	8002ed4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3318      	adds	r3, #24
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe ff59 	bl	8002ed4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004026:	4b25      	ldr	r3, [pc, #148]	@ (80040bc <xTaskIncrementTick+0x160>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <xTaskIncrementTick+0xda>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	4a22      	ldr	r2, [pc, #136]	@ (80040bc <xTaskIncrementTick+0x160>)
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <xTaskIncrementTick+0x164>)
 8004044:	441a      	add	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f7fe fee4 	bl	8002e1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004056:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <xTaskIncrementTick+0x168>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	429a      	cmp	r2, r3
 800405e:	d3b8      	bcc.n	8003fd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004064:	e7b5      	b.n	8003fd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004066:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <xTaskIncrementTick+0x168>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406c:	4914      	ldr	r1, [pc, #80]	@ (80040c0 <xTaskIncrementTick+0x164>)
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d901      	bls.n	8004082 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800407e:	2301      	movs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004082:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <xTaskIncrementTick+0x16c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800408a:	2301      	movs	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e004      	b.n	800409a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <xTaskIncrementTick+0x170>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	4a0d      	ldr	r2, [pc, #52]	@ (80040cc <xTaskIncrementTick+0x170>)
 8004098:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800409a:	697b      	ldr	r3, [r7, #20]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000e48 	.word	0x20000e48
 80040a8:	20000e24 	.word	0x20000e24
 80040ac:	20000dd8 	.word	0x20000dd8
 80040b0:	20000ddc 	.word	0x20000ddc
 80040b4:	20000e38 	.word	0x20000e38
 80040b8:	20000e40 	.word	0x20000e40
 80040bc:	20000e28 	.word	0x20000e28
 80040c0:	20000950 	.word	0x20000950
 80040c4:	2000094c 	.word	0x2000094c
 80040c8:	20000e34 	.word	0x20000e34
 80040cc:	20000e30 	.word	0x20000e30

080040d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <vTaskSwitchContext+0xb4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040de:	4b2a      	ldr	r3, [pc, #168]	@ (8004188 <vTaskSwitchContext+0xb8>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040e4:	e047      	b.n	8004176 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80040e6:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <vTaskSwitchContext+0xb8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ec:	4b27      	ldr	r3, [pc, #156]	@ (800418c <vTaskSwitchContext+0xbc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e011      	b.n	8004118 <vTaskSwitchContext+0x48>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <vTaskSwitchContext+0x42>
	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	607b      	str	r3, [r7, #4]
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <vTaskSwitchContext+0x3e>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3b01      	subs	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	491d      	ldr	r1, [pc, #116]	@ (8004190 <vTaskSwitchContext+0xc0>)
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0e3      	beq.n	80040f4 <vTaskSwitchContext+0x24>
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a16      	ldr	r2, [pc, #88]	@ (8004190 <vTaskSwitchContext+0xc0>)
 8004138:	4413      	add	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3308      	adds	r3, #8
 800414e:	429a      	cmp	r2, r3
 8004150:	d104      	bne.n	800415c <vTaskSwitchContext+0x8c>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4a0c      	ldr	r2, [pc, #48]	@ (8004194 <vTaskSwitchContext+0xc4>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4a09      	ldr	r2, [pc, #36]	@ (800418c <vTaskSwitchContext+0xbc>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <vTaskSwitchContext+0xc4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3354      	adds	r3, #84	@ 0x54
 8004172:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <vTaskSwitchContext+0xc8>)
 8004174:	6013      	str	r3, [r2, #0]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000e48 	.word	0x20000e48
 8004188:	20000e34 	.word	0x20000e34
 800418c:	20000e28 	.word	0x20000e28
 8004190:	20000950 	.word	0x20000950
 8004194:	2000094c 	.word	0x2000094c
 8004198:	2000002c 	.word	0x2000002c

0800419c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	60fb      	str	r3, [r7, #12]
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041c4:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <vTaskPlaceOnEventList+0x48>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3318      	adds	r3, #24
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fe fe48 	bl	8002e62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041d2:	2101      	movs	r1, #1
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	f000 fa87 	bl	80046e8 <prvAddCurrentTaskToDelayedList>
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2000094c 	.word	0x2000094c

080041e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	617b      	str	r3, [r7, #20]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004212:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <vTaskPlaceOnEventListRestricted+0x54>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3318      	adds	r3, #24
 8004218:	4619      	mov	r1, r3
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7fe fdfd 	bl	8002e1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	68b8      	ldr	r0, [r7, #8]
 8004230:	f000 fa5a 	bl	80046e8 <prvAddCurrentTaskToDelayedList>
	}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	2000094c 	.word	0x2000094c

08004240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60fb      	str	r3, [r7, #12]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3318      	adds	r3, #24
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fe2e 	bl	8002ed4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <xTaskRemoveFromEventList+0xb0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11d      	bne.n	80042bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fe25 	bl	8002ed4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	4b19      	ldr	r3, [pc, #100]	@ (80042f4 <xTaskRemoveFromEventList+0xb4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d903      	bls.n	800429e <xTaskRemoveFromEventList+0x5e>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <xTaskRemoveFromEventList+0xb4>)
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4a13      	ldr	r2, [pc, #76]	@ (80042f8 <xTaskRemoveFromEventList+0xb8>)
 80042ac:	441a      	add	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe fdb0 	bl	8002e1a <vListInsertEnd>
 80042ba:	e005      	b.n	80042c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3318      	adds	r3, #24
 80042c0:	4619      	mov	r1, r3
 80042c2:	480e      	ldr	r0, [pc, #56]	@ (80042fc <xTaskRemoveFromEventList+0xbc>)
 80042c4:	f7fe fda9 	bl	8002e1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <xTaskRemoveFromEventList+0xc0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d905      	bls.n	80042e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042da:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <xTaskRemoveFromEventList+0xc4>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e001      	b.n	80042e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042e6:	697b      	ldr	r3, [r7, #20]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000e48 	.word	0x20000e48
 80042f4:	20000e28 	.word	0x20000e28
 80042f8:	20000950 	.word	0x20000950
 80042fc:	20000de0 	.word	0x20000de0
 8004300:	2000094c 	.word	0x2000094c
 8004304:	20000e34 	.word	0x20000e34

08004308 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <vTaskInternalSetTimeOutState+0x24>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <vTaskInternalSetTimeOutState+0x28>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000e38 	.word	0x20000e38
 8004330:	20000e24 	.word	0x20000e24

08004334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	e7fd      	b.n	8004376 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800437a:	f000 fe95 	bl	80050a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800437e:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <xTaskCheckForTimeOut+0xc0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d102      	bne.n	800439e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e023      	b.n	80043e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <xTaskCheckForTimeOut+0xc4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d007      	beq.n	80043ba <xTaskCheckForTimeOut+0x86>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e015      	b.n	80043e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d20b      	bcs.n	80043dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff99 	bl	8004308 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e004      	b.n	80043e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043e6:	f000 fe91 	bl	800510c <vPortExitCritical>

	return xReturn;
 80043ea:	69fb      	ldr	r3, [r7, #28]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000e24 	.word	0x20000e24
 80043f8:	20000e38 	.word	0x20000e38

080043fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <vTaskMissedYield+0x14>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20000e34 	.word	0x20000e34

08004414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800441c:	f000 f852 	bl	80044c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <prvIdleTask+0x28>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d9f9      	bls.n	800441c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <prvIdleTask+0x2c>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004438:	e7f0      	b.n	800441c <prvIdleTask+0x8>
 800443a:	bf00      	nop
 800443c:	20000950 	.word	0x20000950
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	e00c      	b.n	800446a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a12      	ldr	r2, [pc, #72]	@ (80044a4 <prvInitialiseTaskLists+0x60>)
 800445c:	4413      	add	r3, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fcae 	bl	8002dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3301      	adds	r3, #1
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b37      	cmp	r3, #55	@ 0x37
 800446e:	d9ef      	bls.n	8004450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004470:	480d      	ldr	r0, [pc, #52]	@ (80044a8 <prvInitialiseTaskLists+0x64>)
 8004472:	f7fe fca5 	bl	8002dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004476:	480d      	ldr	r0, [pc, #52]	@ (80044ac <prvInitialiseTaskLists+0x68>)
 8004478:	f7fe fca2 	bl	8002dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800447c:	480c      	ldr	r0, [pc, #48]	@ (80044b0 <prvInitialiseTaskLists+0x6c>)
 800447e:	f7fe fc9f 	bl	8002dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004482:	480c      	ldr	r0, [pc, #48]	@ (80044b4 <prvInitialiseTaskLists+0x70>)
 8004484:	f7fe fc9c 	bl	8002dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004488:	480b      	ldr	r0, [pc, #44]	@ (80044b8 <prvInitialiseTaskLists+0x74>)
 800448a:	f7fe fc99 	bl	8002dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <prvInitialiseTaskLists+0x78>)
 8004490:	4a05      	ldr	r2, [pc, #20]	@ (80044a8 <prvInitialiseTaskLists+0x64>)
 8004492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <prvInitialiseTaskLists+0x7c>)
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <prvInitialiseTaskLists+0x68>)
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000950 	.word	0x20000950
 80044a8:	20000db0 	.word	0x20000db0
 80044ac:	20000dc4 	.word	0x20000dc4
 80044b0:	20000de0 	.word	0x20000de0
 80044b4:	20000df4 	.word	0x20000df4
 80044b8:	20000e0c 	.word	0x20000e0c
 80044bc:	20000dd8 	.word	0x20000dd8
 80044c0:	20000ddc 	.word	0x20000ddc

080044c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ca:	e019      	b.n	8004500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044cc:	f000 fdec 	bl	80050a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d0:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <prvCheckTasksWaitingTermination+0x50>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fcf9 	bl	8002ed4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <prvCheckTasksWaitingTermination+0x54>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004518 <prvCheckTasksWaitingTermination+0x54>)
 80044ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044ec:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <prvCheckTasksWaitingTermination+0x58>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <prvCheckTasksWaitingTermination+0x58>)
 80044f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044f6:	f000 fe09 	bl	800510c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f810 	bl	8004520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <prvCheckTasksWaitingTermination+0x58>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e1      	bne.n	80044cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000df4 	.word	0x20000df4
 8004518:	20000e20 	.word	0x20000e20
 800451c:	20000e08 	.word	0x20000e08

08004520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3354      	adds	r3, #84	@ 0x54
 800452c:	4618      	mov	r0, r3
 800452e:	f001 f8d3 	bl	80056d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	4618      	mov	r0, r3
 8004542:	f000 ffa1 	bl	8005488 <vPortFree>
				vPortFree( pxTCB );
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 ff9e 	bl	8005488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800454c:	e019      	b.n	8004582 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004554:	2b01      	cmp	r3, #1
 8004556:	d103      	bne.n	8004560 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 ff95 	bl	8005488 <vPortFree>
	}
 800455e:	e010      	b.n	8004582 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004566:	2b02      	cmp	r3, #2
 8004568:	d00b      	beq.n	8004582 <prvDeleteTCB+0x62>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	60fb      	str	r3, [r7, #12]
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	e7fd      	b.n	800457e <prvDeleteTCB+0x5e>
	}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004592:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <prvResetNextTaskUnblockTime+0x38>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800459c:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <prvResetNextTaskUnblockTime+0x3c>)
 800459e:	f04f 32ff 	mov.w	r2, #4294967295
 80045a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045a4:	e008      	b.n	80045b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a6:	4b07      	ldr	r3, [pc, #28]	@ (80045c4 <prvResetNextTaskUnblockTime+0x38>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <prvResetNextTaskUnblockTime+0x3c>)
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	20000dd8 	.word	0x20000dd8
 80045c8:	20000e40 	.word	0x20000e40

080045cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <xTaskGetSchedulerState+0x34>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045da:	2301      	movs	r3, #1
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	e008      	b.n	80045f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e0:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <xTaskGetSchedulerState+0x38>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045e8:	2302      	movs	r3, #2
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e001      	b.n	80045f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045f2:	687b      	ldr	r3, [r7, #4]
	}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	20000e2c 	.word	0x20000e2c
 8004604:	20000e48 	.word	0x20000e48

08004608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d058      	beq.n	80046d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800461e:	4b2f      	ldr	r3, [pc, #188]	@ (80046dc <xTaskPriorityDisinherit+0xd4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	429a      	cmp	r2, r3
 8004626:	d00b      	beq.n	8004640 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	e7fd      	b.n	800463c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60bb      	str	r3, [r7, #8]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	429a      	cmp	r2, r3
 8004674:	d02c      	beq.n	80046d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d128      	bne.n	80046d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3304      	adds	r3, #4
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fc26 	bl	8002ed4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <xTaskPriorityDisinherit+0xd8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d903      	bls.n	80046b0 <xTaskPriorityDisinherit+0xa8>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	4a0c      	ldr	r2, [pc, #48]	@ (80046e0 <xTaskPriorityDisinherit+0xd8>)
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <xTaskPriorityDisinherit+0xdc>)
 80046be:	441a      	add	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f7fe fba7 	bl	8002e1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046d0:	697b      	ldr	r3, [r7, #20]
	}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	2000094c 	.word	0x2000094c
 80046e0:	20000e28 	.word	0x20000e28
 80046e4:	20000950 	.word	0x20000950

080046e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046f2:	4b21      	ldr	r3, [pc, #132]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x90>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f8:	4b20      	ldr	r3, [pc, #128]	@ (800477c <prvAddCurrentTaskToDelayedList+0x94>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fbe8 	bl	8002ed4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d10a      	bne.n	8004722 <prvAddCurrentTaskToDelayedList+0x3a>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004712:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <prvAddCurrentTaskToDelayedList+0x94>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4819      	ldr	r0, [pc, #100]	@ (8004780 <prvAddCurrentTaskToDelayedList+0x98>)
 800471c:	f7fe fb7d 	bl	8002e1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004720:	e026      	b.n	8004770 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <prvAddCurrentTaskToDelayedList+0x94>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	429a      	cmp	r2, r3
 8004738:	d209      	bcs.n	800474e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800473a:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <prvAddCurrentTaskToDelayedList+0x9c>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b0f      	ldr	r3, [pc, #60]	@ (800477c <prvAddCurrentTaskToDelayedList+0x94>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3304      	adds	r3, #4
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f7fe fb8b 	bl	8002e62 <vListInsert>
}
 800474c:	e010      	b.n	8004770 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800474e:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <prvAddCurrentTaskToDelayedList+0x94>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7fe fb81 	bl	8002e62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004760:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	d202      	bcs.n	8004770 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800476a:	4a08      	ldr	r2, [pc, #32]	@ (800478c <prvAddCurrentTaskToDelayedList+0xa4>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000e24 	.word	0x20000e24
 800477c:	2000094c 	.word	0x2000094c
 8004780:	20000e0c 	.word	0x20000e0c
 8004784:	20000ddc 	.word	0x20000ddc
 8004788:	20000dd8 	.word	0x20000dd8
 800478c:	20000e40 	.word	0x20000e40

08004790 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	@ 0x28
 8004794:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800479a:	f000 fb13 	bl	8004dc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800479e:	4b1d      	ldr	r3, [pc, #116]	@ (8004814 <xTimerCreateTimerTask+0x84>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d021      	beq.n	80047ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047ae:	1d3a      	adds	r2, r7, #4
 80047b0:	f107 0108 	add.w	r1, r7, #8
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fae7 	bl	8002d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	9202      	str	r2, [sp, #8]
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	2302      	movs	r3, #2
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	460a      	mov	r2, r1
 80047d0:	4911      	ldr	r1, [pc, #68]	@ (8004818 <xTimerCreateTimerTask+0x88>)
 80047d2:	4812      	ldr	r0, [pc, #72]	@ (800481c <xTimerCreateTimerTask+0x8c>)
 80047d4:	f7ff f8a2 	bl	800391c <xTaskCreateStatic>
 80047d8:	4603      	mov	r3, r0
 80047da:	4a11      	ldr	r2, [pc, #68]	@ (8004820 <xTimerCreateTimerTask+0x90>)
 80047dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <xTimerCreateTimerTask+0x90>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	613b      	str	r3, [r7, #16]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004808:	697b      	ldr	r3, [r7, #20]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000e7c 	.word	0x20000e7c
 8004818:	080058dc 	.word	0x080058dc
 800481c:	0800495d 	.word	0x0800495d
 8004820:	20000e80 	.word	0x20000e80

08004824 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	@ 0x28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004832:	2300      	movs	r3, #0
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <xTimerGenericCommand+0x30>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	623b      	str	r3, [r7, #32]
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004854:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <xTimerGenericCommand+0x98>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d02a      	beq.n	80048b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b05      	cmp	r3, #5
 800486c:	dc18      	bgt.n	80048a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800486e:	f7ff fead 	bl	80045cc <xTaskGetSchedulerState>
 8004872:	4603      	mov	r3, r0
 8004874:	2b02      	cmp	r3, #2
 8004876:	d109      	bne.n	800488c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004878:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <xTimerGenericCommand+0x98>)
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	f107 0110 	add.w	r1, r7, #16
 8004880:	2300      	movs	r3, #0
 8004882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004884:	f7fe fc5a 	bl	800313c <xQueueGenericSend>
 8004888:	6278      	str	r0, [r7, #36]	@ 0x24
 800488a:	e012      	b.n	80048b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <xTimerGenericCommand+0x98>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	f107 0110 	add.w	r1, r7, #16
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	f7fe fc50 	bl	800313c <xQueueGenericSend>
 800489c:	6278      	str	r0, [r7, #36]	@ 0x24
 800489e:	e008      	b.n	80048b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048a0:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <xTimerGenericCommand+0x98>)
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	f107 0110 	add.w	r1, r7, #16
 80048a8:	2300      	movs	r3, #0
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	f7fe fd48 	bl	8003340 <xQueueGenericSendFromISR>
 80048b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3728      	adds	r7, #40	@ 0x28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000e7c 	.word	0x20000e7c

080048c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ca:	4b23      	ldr	r3, [pc, #140]	@ (8004958 <prvProcessExpiredTimer+0x98>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fafb 	bl	8002ed4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d023      	beq.n	8004934 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	18d1      	adds	r1, r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	6978      	ldr	r0, [r7, #20]
 80048fa:	f000 f8d5 	bl	8004aa8 <prvInsertTimerInActiveList>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004904:	2300      	movs	r3, #0
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2300      	movs	r3, #0
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	2100      	movs	r1, #0
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f7ff ff88 	bl	8004824 <xTimerGenericCommand>
 8004914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d114      	bne.n	8004946 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	6978      	ldr	r0, [r7, #20]
 800494c:	4798      	blx	r3
}
 800494e:	bf00      	nop
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000e74 	.word	0x20000e74

0800495c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004964:	f107 0308 	add.w	r3, r7, #8
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f859 	bl	8004a20 <prvGetNextExpireTime>
 800496e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4619      	mov	r1, r3
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f805 	bl	8004984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800497a:	f000 f8d7 	bl	8004b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800497e:	bf00      	nop
 8004980:	e7f0      	b.n	8004964 <prvTimerTask+0x8>
	...

08004984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800498e:	f7ff fa29 	bl	8003de4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004992:	f107 0308 	add.w	r3, r7, #8
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f866 	bl	8004a68 <prvSampleTimeNow>
 800499c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d130      	bne.n	8004a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d806      	bhi.n	80049c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049b2:	f7ff fa25 	bl	8003e00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff81 	bl	80048c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049be:	e024      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049c6:	4b13      	ldr	r3, [pc, #76]	@ (8004a14 <prvProcessTimerOrBlockTask+0x90>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <prvProcessTimerOrBlockTask+0x50>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <prvProcessTimerOrBlockTask+0x52>
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <prvProcessTimerOrBlockTask+0x94>)
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f7fe ff65 	bl	80038b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049ea:	f7ff fa09 	bl	8003e00 <xTaskResumeAll>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049f4:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <prvProcessTimerOrBlockTask+0x98>)
 80049f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	f3bf 8f6f 	isb	sy
}
 8004a04:	e001      	b.n	8004a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a06:	f7ff f9fb 	bl	8003e00 <xTaskResumeAll>
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000e78 	.word	0x20000e78
 8004a18:	20000e7c 	.word	0x20000e7c
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a28:	4b0e      	ldr	r3, [pc, #56]	@ (8004a64 <prvGetNextExpireTime+0x44>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <prvGetNextExpireTime+0x16>
 8004a32:	2201      	movs	r2, #1
 8004a34:	e000      	b.n	8004a38 <prvGetNextExpireTime+0x18>
 8004a36:	2200      	movs	r2, #0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a44:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <prvGetNextExpireTime+0x44>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e001      	b.n	8004a54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000e74 	.word	0x20000e74

08004a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a70:	f7ff fa64 	bl	8003f3c <xTaskGetTickCount>
 8004a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a76:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d205      	bcs.n	8004a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a80:	f000 f93a 	bl	8004cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e002      	b.n	8004a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a92:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a98:	68fb      	ldr	r3, [r7, #12]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000e84 	.word	0x20000e84

08004aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d812      	bhi.n	8004af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e01b      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <prvInsertTimerInActiveList+0x7c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fe f9b8 	bl	8002e62 <vListInsert>
 8004af2:	e012      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d206      	bcs.n	8004b0a <prvInsertTimerInActiveList+0x62>
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e007      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <prvInsertTimerInActiveList+0x80>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f7fe f9a4 	bl	8002e62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b1a:	697b      	ldr	r3, [r7, #20]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000e78 	.word	0x20000e78
 8004b28:	20000e74 	.word	0x20000e74

08004b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	@ 0x38
 8004b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b32:	e0ce      	b.n	8004cd2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	da19      	bge.n	8004b6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b64:	6850      	ldr	r0, [r2, #4]
 8004b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b68:	6892      	ldr	r2, [r2, #8]
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f2c0 80ae 	blt.w	8004cd2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	3304      	adds	r3, #4
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe f9a4 	bl	8002ed4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff6a 	bl	8004a68 <prvSampleTimeNow>
 8004b94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b09      	cmp	r3, #9
 8004b9a:	f200 8097 	bhi.w	8004ccc <prvProcessReceivedCommands+0x1a0>
 8004b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba4 <prvProcessReceivedCommands+0x78>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bcd 	.word	0x08004bcd
 8004bb0:	08004c43 	.word	0x08004c43
 8004bb4:	08004c57 	.word	0x08004c57
 8004bb8:	08004ca3 	.word	0x08004ca3
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bcd 	.word	0x08004bcd
 8004bc4:	08004c43 	.word	0x08004c43
 8004bc8:	08004c57 	.word	0x08004c57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	18d1      	adds	r1, r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bec:	f7ff ff5c 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d06c      	beq.n	8004cd0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d061      	beq.n	8004cd0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	441a      	add	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c1e:	f7ff fe01 	bl	8004824 <xTimerGenericCommand>
 8004c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d152      	bne.n	8004cd0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	61bb      	str	r3, [r7, #24]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c54:	e03d      	b.n	8004cd2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	617b      	str	r3, [r7, #20]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	18d1      	adds	r1, r2, r3
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c9c:	f7ff ff04 	bl	8004aa8 <prvInsertTimerInActiveList>
					break;
 8004ca0:	e017      	b.n	8004cd2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cb2:	f000 fbe9 	bl	8005488 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cb6:	e00c      	b.n	8004cd2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cca:	e002      	b.n	8004cd2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004cd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cd2:	4b08      	ldr	r3, [pc, #32]	@ (8004cf4 <prvProcessReceivedCommands+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1d39      	adds	r1, r7, #4
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fbce 	bl	800347c <xQueueReceive>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f47f af26 	bne.w	8004b34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3730      	adds	r7, #48	@ 0x30
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000e7c 	.word	0x20000e7c

08004cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cfe:	e049      	b.n	8004d94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d00:	4b2e      	ldr	r3, [pc, #184]	@ (8004dbc <prvSwitchTimerLists+0xc4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004dbc <prvSwitchTimerLists+0xc4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe f8db 	bl	8002ed4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d02f      	beq.n	8004d94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d90e      	bls.n	8004d64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d52:	4b1a      	ldr	r3, [pc, #104]	@ (8004dbc <prvSwitchTimerLists+0xc4>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fe f880 	bl	8002e62 <vListInsert>
 8004d62:	e017      	b.n	8004d94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d64:	2300      	movs	r3, #0
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff fd58 	bl	8004824 <xTimerGenericCommand>
 8004d74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	603b      	str	r3, [r7, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d94:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <prvSwitchTimerLists+0xc4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1b0      	bne.n	8004d00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	@ (8004dbc <prvSwitchTimerLists+0xc4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <prvSwitchTimerLists+0xc8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <prvSwitchTimerLists+0xc4>)
 8004daa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dac:	4a04      	ldr	r2, [pc, #16]	@ (8004dc0 <prvSwitchTimerLists+0xc8>)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6013      	str	r3, [r2, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000e74 	.word	0x20000e74
 8004dc0:	20000e78 	.word	0x20000e78

08004dc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dca:	f000 f96d 	bl	80050a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dce:	4b15      	ldr	r3, [pc, #84]	@ (8004e24 <prvCheckForValidListAndQueue+0x60>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d120      	bne.n	8004e18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dd6:	4814      	ldr	r0, [pc, #80]	@ (8004e28 <prvCheckForValidListAndQueue+0x64>)
 8004dd8:	f7fd fff2 	bl	8002dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ddc:	4813      	ldr	r0, [pc, #76]	@ (8004e2c <prvCheckForValidListAndQueue+0x68>)
 8004dde:	f7fd ffef 	bl	8002dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004de2:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <prvCheckForValidListAndQueue+0x6c>)
 8004de4:	4a10      	ldr	r2, [pc, #64]	@ (8004e28 <prvCheckForValidListAndQueue+0x64>)
 8004de6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004de8:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <prvCheckForValidListAndQueue+0x70>)
 8004dea:	4a10      	ldr	r2, [pc, #64]	@ (8004e2c <prvCheckForValidListAndQueue+0x68>)
 8004dec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dee:	2300      	movs	r3, #0
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <prvCheckForValidListAndQueue+0x74>)
 8004df4:	4a11      	ldr	r2, [pc, #68]	@ (8004e3c <prvCheckForValidListAndQueue+0x78>)
 8004df6:	2110      	movs	r1, #16
 8004df8:	200a      	movs	r0, #10
 8004dfa:	f7fe f8ff 	bl	8002ffc <xQueueGenericCreateStatic>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4a08      	ldr	r2, [pc, #32]	@ (8004e24 <prvCheckForValidListAndQueue+0x60>)
 8004e02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e04:	4b07      	ldr	r3, [pc, #28]	@ (8004e24 <prvCheckForValidListAndQueue+0x60>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <prvCheckForValidListAndQueue+0x60>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	490b      	ldr	r1, [pc, #44]	@ (8004e40 <prvCheckForValidListAndQueue+0x7c>)
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fd24 	bl	8003860 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e18:	f000 f978 	bl	800510c <vPortExitCritical>
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000e7c 	.word	0x20000e7c
 8004e28:	20000e4c 	.word	0x20000e4c
 8004e2c:	20000e60 	.word	0x20000e60
 8004e30:	20000e74 	.word	0x20000e74
 8004e34:	20000e78 	.word	0x20000e78
 8004e38:	20000f28 	.word	0x20000f28
 8004e3c:	20000e88 	.word	0x20000e88
 8004e40:	080058e4 	.word	0x080058e4

08004e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b04      	subs	r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea8 <pxPortInitialiseStack+0x64>)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b14      	subs	r3, #20
 8004e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3b04      	subs	r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f06f 0202 	mvn.w	r2, #2
 8004e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3b20      	subs	r3, #32
 8004e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	08004ead 	.word	0x08004ead

08004eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eb6:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <prvTaskExitError+0x58>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d00b      	beq.n	8004ed8 <prvTaskExitError+0x2c>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	60fb      	str	r3, [r7, #12]
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	e7fd      	b.n	8004ed4 <prvTaskExitError+0x28>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60bb      	str	r3, [r7, #8]
}
 8004eea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eec:	bf00      	nop
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0fc      	beq.n	8004eee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	20000028 	.word	0x20000028
	...

08004f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f10:	4b07      	ldr	r3, [pc, #28]	@ (8004f30 <pxCurrentTCBConst2>)
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	6808      	ldr	r0, [r1, #0]
 8004f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1a:	f380 8809 	msr	PSP, r0
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8811 	msr	BASEPRI, r0
 8004f2a:	4770      	bx	lr
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst2>:
 8004f30:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f38:	4808      	ldr	r0, [pc, #32]	@ (8004f5c <prvPortStartFirstTask+0x24>)
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	6800      	ldr	r0, [r0, #0]
 8004f3e:	f380 8808 	msr	MSP, r0
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8814 	msr	CONTROL, r0
 8004f4a:	b662      	cpsie	i
 8004f4c:	b661      	cpsie	f
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	df00      	svc	0
 8004f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed08 	.word	0xe000ed08

08004f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f66:	4b47      	ldr	r3, [pc, #284]	@ (8005084 <xPortStartScheduler+0x124>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a47      	ldr	r2, [pc, #284]	@ (8005088 <xPortStartScheduler+0x128>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10b      	bne.n	8004f88 <xPortStartScheduler+0x28>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	613b      	str	r3, [r7, #16]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f88:	4b3e      	ldr	r3, [pc, #248]	@ (8005084 <xPortStartScheduler+0x124>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800508c <xPortStartScheduler+0x12c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10b      	bne.n	8004faa <xPortStartScheduler+0x4a>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60fb      	str	r3, [r7, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004faa:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <xPortStartScheduler+0x130>)
 8004fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	22ff      	movs	r2, #255	@ 0xff
 8004fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	4b31      	ldr	r3, [pc, #196]	@ (8005094 <xPortStartScheduler+0x134>)
 8004fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fd2:	4b31      	ldr	r3, [pc, #196]	@ (8005098 <xPortStartScheduler+0x138>)
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fd8:	e009      	b.n	8004fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004fda:	4b2f      	ldr	r3, [pc, #188]	@ (8005098 <xPortStartScheduler+0x138>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8005098 <xPortStartScheduler+0x138>)
 8004fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	2b80      	cmp	r3, #128	@ 0x80
 8004ff8:	d0ef      	beq.n	8004fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ffa:	4b27      	ldr	r3, [pc, #156]	@ (8005098 <xPortStartScheduler+0x138>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f1c3 0307 	rsb	r3, r3, #7
 8005002:	2b04      	cmp	r3, #4
 8005004:	d00b      	beq.n	800501e <xPortStartScheduler+0xbe>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60bb      	str	r3, [r7, #8]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800501e:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <xPortStartScheduler+0x138>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <xPortStartScheduler+0x138>)
 8005026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005028:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <xPortStartScheduler+0x138>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005030:	4a19      	ldr	r2, [pc, #100]	@ (8005098 <xPortStartScheduler+0x138>)
 8005032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800503c:	4b17      	ldr	r3, [pc, #92]	@ (800509c <xPortStartScheduler+0x13c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	@ (800509c <xPortStartScheduler+0x13c>)
 8005042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005048:	4b14      	ldr	r3, [pc, #80]	@ (800509c <xPortStartScheduler+0x13c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a13      	ldr	r2, [pc, #76]	@ (800509c <xPortStartScheduler+0x13c>)
 800504e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005054:	f000 f8da 	bl	800520c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005058:	4b11      	ldr	r3, [pc, #68]	@ (80050a0 <xPortStartScheduler+0x140>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800505e:	f000 f8f9 	bl	8005254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005062:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <xPortStartScheduler+0x144>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a0f      	ldr	r2, [pc, #60]	@ (80050a4 <xPortStartScheduler+0x144>)
 8005068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800506c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800506e:	f7ff ff63 	bl	8004f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005072:	f7ff f82d 	bl	80040d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005076:	f7ff ff19 	bl	8004eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000ed00 	.word	0xe000ed00
 8005088:	410fc271 	.word	0x410fc271
 800508c:	410fc270 	.word	0x410fc270
 8005090:	e000e400 	.word	0xe000e400
 8005094:	20000f78 	.word	0x20000f78
 8005098:	20000f7c 	.word	0x20000f7c
 800509c:	e000ed20 	.word	0xe000ed20
 80050a0:	20000028 	.word	0x20000028
 80050a4:	e000ef34 	.word	0xe000ef34

080050a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <vPortEnterCritical+0x5c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005104 <vPortEnterCritical+0x5c>)
 80050ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <vPortEnterCritical+0x5c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d110      	bne.n	80050f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <vPortEnterCritical+0x60>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	603b      	str	r3, [r7, #0]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <vPortEnterCritical+0x4a>
	}
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000028 	.word	0x20000028
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005112:	4b12      	ldr	r3, [pc, #72]	@ (800515c <vPortExitCritical+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10b      	bne.n	8005132 <vPortExitCritical+0x26>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	607b      	str	r3, [r7, #4]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <vPortExitCritical+0x50>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3b01      	subs	r3, #1
 8005138:	4a08      	ldr	r2, [pc, #32]	@ (800515c <vPortExitCritical+0x50>)
 800513a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800513c:	4b07      	ldr	r3, [pc, #28]	@ (800515c <vPortExitCritical+0x50>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d105      	bne.n	8005150 <vPortExitCritical+0x44>
 8005144:	2300      	movs	r3, #0
 8005146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f383 8811 	msr	BASEPRI, r3
}
 800514e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000028 	.word	0x20000028

08005160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005160:	f3ef 8009 	mrs	r0, PSP
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <pxCurrentTCBConst>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	f01e 0f10 	tst.w	lr, #16
 8005170:	bf08      	it	eq
 8005172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517a:	6010      	str	r0, [r2, #0]
 800517c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005184:	f380 8811 	msr	BASEPRI, r0
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f7fe ff9e 	bl	80040d0 <vTaskSwitchContext>
 8005194:	f04f 0000 	mov.w	r0, #0
 8005198:	f380 8811 	msr	BASEPRI, r0
 800519c:	bc09      	pop	{r0, r3}
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	6808      	ldr	r0, [r1, #0]
 80051a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a6:	f01e 0f10 	tst.w	lr, #16
 80051aa:	bf08      	it	eq
 80051ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051b0:	f380 8809 	msr	PSP, r0
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w

080051c0 <pxCurrentTCBConst>:
 80051c0:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop

080051c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	607b      	str	r3, [r7, #4]
}
 80051e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051e2:	f7fe febb 	bl	8003f5c <xTaskIncrementTick>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ec:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <xPortSysTickHandler+0x40>)
 80051ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	2300      	movs	r3, #0
 80051f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f383 8811 	msr	BASEPRI, r3
}
 80051fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005210:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <vPortSetupTimerInterrupt+0x34>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005216:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <vPortSetupTimerInterrupt+0x38>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800521c:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <vPortSetupTimerInterrupt+0x3c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0a      	ldr	r2, [pc, #40]	@ (800524c <vPortSetupTimerInterrupt+0x40>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	4a09      	ldr	r2, [pc, #36]	@ (8005250 <vPortSetupTimerInterrupt+0x44>)
 800522a:	3b01      	subs	r3, #1
 800522c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800522e:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <vPortSetupTimerInterrupt+0x34>)
 8005230:	2207      	movs	r2, #7
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e000e010 	.word	0xe000e010
 8005244:	e000e018 	.word	0xe000e018
 8005248:	2000001c 	.word	0x2000001c
 800524c:	10624dd3 	.word	0x10624dd3
 8005250:	e000e014 	.word	0xe000e014

08005254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005264 <vPortEnableVFP+0x10>
 8005258:	6801      	ldr	r1, [r0, #0]
 800525a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800525e:	6001      	str	r1, [r0, #0]
 8005260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005262:	bf00      	nop
 8005264:	e000ed88 	.word	0xe000ed88

08005268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800526e:	f3ef 8305 	mrs	r3, IPSR
 8005272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d915      	bls.n	80052a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800527a:	4a18      	ldr	r2, [pc, #96]	@ (80052dc <vPortValidateInterruptPriority+0x74>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005284:	4b16      	ldr	r3, [pc, #88]	@ (80052e0 <vPortValidateInterruptPriority+0x78>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	7afa      	ldrb	r2, [r7, #11]
 800528a:	429a      	cmp	r2, r3
 800528c:	d20b      	bcs.n	80052a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	607b      	str	r3, [r7, #4]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052a6:	4b0f      	ldr	r3, [pc, #60]	@ (80052e4 <vPortValidateInterruptPriority+0x7c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052ae:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <vPortValidateInterruptPriority+0x80>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d90b      	bls.n	80052ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	603b      	str	r3, [r7, #0]
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	e7fd      	b.n	80052ca <vPortValidateInterruptPriority+0x62>
	}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	e000e3f0 	.word	0xe000e3f0
 80052e0:	20000f78 	.word	0x20000f78
 80052e4:	e000ed0c 	.word	0xe000ed0c
 80052e8:	20000f7c 	.word	0x20000f7c

080052ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052f8:	f7fe fd74 	bl	8003de4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005470 <pvPortMalloc+0x184>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005304:	f000 f924 	bl	8005550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005308:	4b5a      	ldr	r3, [pc, #360]	@ (8005474 <pvPortMalloc+0x188>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	f040 8095 	bne.w	8005440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800531c:	2208      	movs	r2, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d015      	beq.n	800535a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f023 0307 	bic.w	r3, r3, #7
 8005334:	3308      	adds	r3, #8
 8005336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <pvPortMalloc+0x6e>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	617b      	str	r3, [r7, #20]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d06f      	beq.n	8005440 <pvPortMalloc+0x154>
 8005360:	4b45      	ldr	r3, [pc, #276]	@ (8005478 <pvPortMalloc+0x18c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d86a      	bhi.n	8005440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800536a:	4b44      	ldr	r3, [pc, #272]	@ (800547c <pvPortMalloc+0x190>)
 800536c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800536e:	4b43      	ldr	r3, [pc, #268]	@ (800547c <pvPortMalloc+0x190>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005374:	e004      	b.n	8005380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d903      	bls.n	8005392 <pvPortMalloc+0xa6>
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f1      	bne.n	8005376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005392:	4b37      	ldr	r3, [pc, #220]	@ (8005470 <pvPortMalloc+0x184>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005398:	429a      	cmp	r2, r3
 800539a:	d051      	beq.n	8005440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2208      	movs	r2, #8
 80053a2:	4413      	add	r3, r2
 80053a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	1ad2      	subs	r2, r2, r3
 80053b6:	2308      	movs	r3, #8
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d920      	bls.n	8005400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4413      	add	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <pvPortMalloc+0xfc>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	613b      	str	r3, [r7, #16]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053fa:	69b8      	ldr	r0, [r7, #24]
 80053fc:	f000 f90a 	bl	8005614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005400:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <pvPortMalloc+0x18c>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <pvPortMalloc+0x18c>)
 800540c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800540e:	4b1a      	ldr	r3, [pc, #104]	@ (8005478 <pvPortMalloc+0x18c>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <pvPortMalloc+0x194>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d203      	bcs.n	8005422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800541a:	4b17      	ldr	r3, [pc, #92]	@ (8005478 <pvPortMalloc+0x18c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <pvPortMalloc+0x194>)
 8005420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <pvPortMalloc+0x188>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	431a      	orrs	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005436:	4b13      	ldr	r3, [pc, #76]	@ (8005484 <pvPortMalloc+0x198>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	4a11      	ldr	r2, [pc, #68]	@ (8005484 <pvPortMalloc+0x198>)
 800543e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005440:	f7fe fcde 	bl	8003e00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <pvPortMalloc+0x17a>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	60fb      	str	r3, [r7, #12]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <pvPortMalloc+0x176>
	return pvReturn;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3728      	adds	r7, #40	@ 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20004b88 	.word	0x20004b88
 8005474:	20004b9c 	.word	0x20004b9c
 8005478:	20004b8c 	.word	0x20004b8c
 800547c:	20004b80 	.word	0x20004b80
 8005480:	20004b90 	.word	0x20004b90
 8005484:	20004b94 	.word	0x20004b94

08005488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04f      	beq.n	800553a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800549a:	2308      	movs	r3, #8
 800549c:	425b      	negs	r3, r3
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b25      	ldr	r3, [pc, #148]	@ (8005544 <vPortFree+0xbc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <vPortFree+0x46>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <vPortFree+0x66>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	60bb      	str	r3, [r7, #8]
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	e7fd      	b.n	80054ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <vPortFree+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01e      	beq.n	800553a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11a      	bne.n	800553a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4b0e      	ldr	r3, [pc, #56]	@ (8005544 <vPortFree+0xbc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005514:	f7fe fc66 	bl	8003de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <vPortFree+0xc0>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4413      	add	r3, r2
 8005522:	4a09      	ldr	r2, [pc, #36]	@ (8005548 <vPortFree+0xc0>)
 8005524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005526:	6938      	ldr	r0, [r7, #16]
 8005528:	f000 f874 	bl	8005614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800552c:	4b07      	ldr	r3, [pc, #28]	@ (800554c <vPortFree+0xc4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	4a06      	ldr	r2, [pc, #24]	@ (800554c <vPortFree+0xc4>)
 8005534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005536:	f7fe fc63 	bl	8003e00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800553a:	bf00      	nop
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20004b9c 	.word	0x20004b9c
 8005548:	20004b8c 	.word	0x20004b8c
 800554c:	20004b98 	.word	0x20004b98

08005550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005556:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800555a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800555c:	4b27      	ldr	r3, [pc, #156]	@ (80055fc <prvHeapInit+0xac>)
 800555e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00c      	beq.n	8005584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3307      	adds	r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0307 	bic.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	4a1f      	ldr	r2, [pc, #124]	@ (80055fc <prvHeapInit+0xac>)
 8005580:	4413      	add	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005588:	4a1d      	ldr	r2, [pc, #116]	@ (8005600 <prvHeapInit+0xb0>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800558e:	4b1c      	ldr	r3, [pc, #112]	@ (8005600 <prvHeapInit+0xb0>)
 8005590:	2200      	movs	r2, #0
 8005592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800559c:	2208      	movs	r2, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0307 	bic.w	r3, r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a15      	ldr	r2, [pc, #84]	@ (8005604 <prvHeapInit+0xb4>)
 80055b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055b2:	4b14      	ldr	r3, [pc, #80]	@ (8005604 <prvHeapInit+0xb4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055ba:	4b12      	ldr	r3, [pc, #72]	@ (8005604 <prvHeapInit+0xb4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	1ad2      	subs	r2, r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <prvHeapInit+0xb4>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005608 <prvHeapInit+0xb8>)
 80055de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a09      	ldr	r2, [pc, #36]	@ (800560c <prvHeapInit+0xbc>)
 80055e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055e8:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <prvHeapInit+0xc0>)
 80055ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055ee:	601a      	str	r2, [r3, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	20000f80 	.word	0x20000f80
 8005600:	20004b80 	.word	0x20004b80
 8005604:	20004b88 	.word	0x20004b88
 8005608:	20004b90 	.word	0x20004b90
 800560c:	20004b8c 	.word	0x20004b8c
 8005610:	20004b9c 	.word	0x20004b9c

08005614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800561c:	4b28      	ldr	r3, [pc, #160]	@ (80056c0 <prvInsertBlockIntoFreeList+0xac>)
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e002      	b.n	8005628 <prvInsertBlockIntoFreeList+0x14>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	429a      	cmp	r2, r3
 8005630:	d8f7      	bhi.n	8005622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4413      	add	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d108      	bne.n	8005656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	441a      	add	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	441a      	add	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d118      	bne.n	800569c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b15      	ldr	r3, [pc, #84]	@ (80056c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d00d      	beq.n	8005692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e008      	b.n	80056a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e003      	b.n	80056a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d002      	beq.n	80056b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20004b80 	.word	0x20004b80
 80056c4:	20004b88 	.word	0x20004b88

080056c8 <memset>:
 80056c8:	4402      	add	r2, r0
 80056ca:	4603      	mov	r3, r0
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d100      	bne.n	80056d2 <memset+0xa>
 80056d0:	4770      	bx	lr
 80056d2:	f803 1b01 	strb.w	r1, [r3], #1
 80056d6:	e7f9      	b.n	80056cc <memset+0x4>

080056d8 <_reclaim_reent>:
 80056d8:	4b29      	ldr	r3, [pc, #164]	@ (8005780 <_reclaim_reent+0xa8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4283      	cmp	r3, r0
 80056de:	b570      	push	{r4, r5, r6, lr}
 80056e0:	4604      	mov	r4, r0
 80056e2:	d04b      	beq.n	800577c <_reclaim_reent+0xa4>
 80056e4:	69c3      	ldr	r3, [r0, #28]
 80056e6:	b1ab      	cbz	r3, 8005714 <_reclaim_reent+0x3c>
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	b16b      	cbz	r3, 8005708 <_reclaim_reent+0x30>
 80056ec:	2500      	movs	r5, #0
 80056ee:	69e3      	ldr	r3, [r4, #28]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	5959      	ldr	r1, [r3, r5]
 80056f4:	2900      	cmp	r1, #0
 80056f6:	d13b      	bne.n	8005770 <_reclaim_reent+0x98>
 80056f8:	3504      	adds	r5, #4
 80056fa:	2d80      	cmp	r5, #128	@ 0x80
 80056fc:	d1f7      	bne.n	80056ee <_reclaim_reent+0x16>
 80056fe:	69e3      	ldr	r3, [r4, #28]
 8005700:	4620      	mov	r0, r4
 8005702:	68d9      	ldr	r1, [r3, #12]
 8005704:	f000 f872 	bl	80057ec <_free_r>
 8005708:	69e3      	ldr	r3, [r4, #28]
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	b111      	cbz	r1, 8005714 <_reclaim_reent+0x3c>
 800570e:	4620      	mov	r0, r4
 8005710:	f000 f86c 	bl	80057ec <_free_r>
 8005714:	6961      	ldr	r1, [r4, #20]
 8005716:	b111      	cbz	r1, 800571e <_reclaim_reent+0x46>
 8005718:	4620      	mov	r0, r4
 800571a:	f000 f867 	bl	80057ec <_free_r>
 800571e:	69e1      	ldr	r1, [r4, #28]
 8005720:	b111      	cbz	r1, 8005728 <_reclaim_reent+0x50>
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f862 	bl	80057ec <_free_r>
 8005728:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800572a:	b111      	cbz	r1, 8005732 <_reclaim_reent+0x5a>
 800572c:	4620      	mov	r0, r4
 800572e:	f000 f85d 	bl	80057ec <_free_r>
 8005732:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005734:	b111      	cbz	r1, 800573c <_reclaim_reent+0x64>
 8005736:	4620      	mov	r0, r4
 8005738:	f000 f858 	bl	80057ec <_free_r>
 800573c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800573e:	b111      	cbz	r1, 8005746 <_reclaim_reent+0x6e>
 8005740:	4620      	mov	r0, r4
 8005742:	f000 f853 	bl	80057ec <_free_r>
 8005746:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005748:	b111      	cbz	r1, 8005750 <_reclaim_reent+0x78>
 800574a:	4620      	mov	r0, r4
 800574c:	f000 f84e 	bl	80057ec <_free_r>
 8005750:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005752:	b111      	cbz	r1, 800575a <_reclaim_reent+0x82>
 8005754:	4620      	mov	r0, r4
 8005756:	f000 f849 	bl	80057ec <_free_r>
 800575a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800575c:	b111      	cbz	r1, 8005764 <_reclaim_reent+0x8c>
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f844 	bl	80057ec <_free_r>
 8005764:	6a23      	ldr	r3, [r4, #32]
 8005766:	b14b      	cbz	r3, 800577c <_reclaim_reent+0xa4>
 8005768:	4620      	mov	r0, r4
 800576a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800576e:	4718      	bx	r3
 8005770:	680e      	ldr	r6, [r1, #0]
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f83a 	bl	80057ec <_free_r>
 8005778:	4631      	mov	r1, r6
 800577a:	e7bb      	b.n	80056f4 <_reclaim_reent+0x1c>
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	bf00      	nop
 8005780:	2000002c 	.word	0x2000002c

08005784 <__libc_init_array>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	4d0d      	ldr	r5, [pc, #52]	@ (80057bc <__libc_init_array+0x38>)
 8005788:	4c0d      	ldr	r4, [pc, #52]	@ (80057c0 <__libc_init_array+0x3c>)
 800578a:	1b64      	subs	r4, r4, r5
 800578c:	10a4      	asrs	r4, r4, #2
 800578e:	2600      	movs	r6, #0
 8005790:	42a6      	cmp	r6, r4
 8005792:	d109      	bne.n	80057a8 <__libc_init_array+0x24>
 8005794:	4d0b      	ldr	r5, [pc, #44]	@ (80057c4 <__libc_init_array+0x40>)
 8005796:	4c0c      	ldr	r4, [pc, #48]	@ (80057c8 <__libc_init_array+0x44>)
 8005798:	f000 f87e 	bl	8005898 <_init>
 800579c:	1b64      	subs	r4, r4, r5
 800579e:	10a4      	asrs	r4, r4, #2
 80057a0:	2600      	movs	r6, #0
 80057a2:	42a6      	cmp	r6, r4
 80057a4:	d105      	bne.n	80057b2 <__libc_init_array+0x2e>
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ac:	4798      	blx	r3
 80057ae:	3601      	adds	r6, #1
 80057b0:	e7ee      	b.n	8005790 <__libc_init_array+0xc>
 80057b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b6:	4798      	blx	r3
 80057b8:	3601      	adds	r6, #1
 80057ba:	e7f2      	b.n	80057a2 <__libc_init_array+0x1e>
 80057bc:	08005968 	.word	0x08005968
 80057c0:	08005968 	.word	0x08005968
 80057c4:	08005968 	.word	0x08005968
 80057c8:	0800596c 	.word	0x0800596c

080057cc <__retarget_lock_acquire_recursive>:
 80057cc:	4770      	bx	lr

080057ce <__retarget_lock_release_recursive>:
 80057ce:	4770      	bx	lr

080057d0 <memcpy>:
 80057d0:	440a      	add	r2, r1
 80057d2:	4291      	cmp	r1, r2
 80057d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057d8:	d100      	bne.n	80057dc <memcpy+0xc>
 80057da:	4770      	bx	lr
 80057dc:	b510      	push	{r4, lr}
 80057de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e6:	4291      	cmp	r1, r2
 80057e8:	d1f9      	bne.n	80057de <memcpy+0xe>
 80057ea:	bd10      	pop	{r4, pc}

080057ec <_free_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4605      	mov	r5, r0
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d041      	beq.n	8005878 <_free_r+0x8c>
 80057f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f8:	1f0c      	subs	r4, r1, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfb8      	it	lt
 80057fe:	18e4      	addlt	r4, r4, r3
 8005800:	f000 f83e 	bl	8005880 <__malloc_lock>
 8005804:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <_free_r+0x90>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	b933      	cbnz	r3, 8005818 <_free_r+0x2c>
 800580a:	6063      	str	r3, [r4, #4]
 800580c:	6014      	str	r4, [r2, #0]
 800580e:	4628      	mov	r0, r5
 8005810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005814:	f000 b83a 	b.w	800588c <__malloc_unlock>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d908      	bls.n	800582e <_free_r+0x42>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	1821      	adds	r1, r4, r0
 8005820:	428b      	cmp	r3, r1
 8005822:	bf01      	itttt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	1809      	addeq	r1, r1, r0
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	e7ed      	b.n	800580a <_free_r+0x1e>
 800582e:	461a      	mov	r2, r3
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b10b      	cbz	r3, 8005838 <_free_r+0x4c>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d9fa      	bls.n	800582e <_free_r+0x42>
 8005838:	6811      	ldr	r1, [r2, #0]
 800583a:	1850      	adds	r0, r2, r1
 800583c:	42a0      	cmp	r0, r4
 800583e:	d10b      	bne.n	8005858 <_free_r+0x6c>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	4401      	add	r1, r0
 8005844:	1850      	adds	r0, r2, r1
 8005846:	4283      	cmp	r3, r0
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	d1e0      	bne.n	800580e <_free_r+0x22>
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	6053      	str	r3, [r2, #4]
 8005852:	4408      	add	r0, r1
 8005854:	6010      	str	r0, [r2, #0]
 8005856:	e7da      	b.n	800580e <_free_r+0x22>
 8005858:	d902      	bls.n	8005860 <_free_r+0x74>
 800585a:	230c      	movs	r3, #12
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	e7d6      	b.n	800580e <_free_r+0x22>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	1821      	adds	r1, r4, r0
 8005864:	428b      	cmp	r3, r1
 8005866:	bf04      	itt	eq
 8005868:	6819      	ldreq	r1, [r3, #0]
 800586a:	685b      	ldreq	r3, [r3, #4]
 800586c:	6063      	str	r3, [r4, #4]
 800586e:	bf04      	itt	eq
 8005870:	1809      	addeq	r1, r1, r0
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	6054      	str	r4, [r2, #4]
 8005876:	e7ca      	b.n	800580e <_free_r+0x22>
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	20004cdc 	.word	0x20004cdc

08005880 <__malloc_lock>:
 8005880:	4801      	ldr	r0, [pc, #4]	@ (8005888 <__malloc_lock+0x8>)
 8005882:	f7ff bfa3 	b.w	80057cc <__retarget_lock_acquire_recursive>
 8005886:	bf00      	nop
 8005888:	20004cd8 	.word	0x20004cd8

0800588c <__malloc_unlock>:
 800588c:	4801      	ldr	r0, [pc, #4]	@ (8005894 <__malloc_unlock+0x8>)
 800588e:	f7ff bf9e 	b.w	80057ce <__retarget_lock_release_recursive>
 8005892:	bf00      	nop
 8005894:	20004cd8 	.word	0x20004cd8

08005898 <_init>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr

080058a4 <_fini>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	bf00      	nop
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr
