
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08007014  08007014  00008014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  000090b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007178  08007178  00008178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007180  08007180  000090b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007180  08007180  00008180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007184  08007184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08007188  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  200000b4  0800723c  000090b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d34  0800723c  00009d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017003  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  000238e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00024d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938d  00000000  00000000  00025cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174ab  00000000  00000000  0003f03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000987d6  00000000  00000000  000564e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eecbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000eed00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f4638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ffc 	.word	0x08006ffc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08006ffc 	.word	0x08006ffc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ScanColumns>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 80c0 	bhi.w	8000712 <ScanColumns+0x192>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ScanColumns+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	08000605 	.word	0x08000605
 80005a0:	0800065f 	.word	0x0800065f
 80005a4:	080006b9 	.word	0x080006b9
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80005a8:	2101      	movs	r1, #1
 80005aa:	4861      	ldr	r0, [pc, #388]	@ (8000730 <ScanColumns+0x1b0>)
 80005ac:	f002 f85a 	bl	8002664 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <ScanColumns+0x3a>
 80005b6:	2343      	movs	r3, #67	@ 0x43
 80005b8:	e0b5      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 80005ba:	2102      	movs	r1, #2
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <ScanColumns+0x1b0>)
 80005be:	f002 f851 	bl	8002664 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <ScanColumns+0x4c>
 80005c8:	2337      	movs	r3, #55	@ 0x37
 80005ca:	e0ac      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 80005cc:	2104      	movs	r1, #4
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <ScanColumns+0x1b0>)
 80005d0:	f002 f848 	bl	8002664 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ScanColumns+0x5e>
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	e0a3      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 80005de:	2108      	movs	r1, #8
 80005e0:	4853      	ldr	r0, [pc, #332]	@ (8000730 <ScanColumns+0x1b0>)
 80005e2:	f002 f83f 	bl	8002664 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <ScanColumns+0x70>
 80005ec:	2331      	movs	r3, #49	@ 0x31
 80005ee:	e09a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 80005f0:	2110      	movs	r1, #16
 80005f2:	484f      	ldr	r0, [pc, #316]	@ (8000730 <ScanColumns+0x1b0>)
 80005f4:	f002 f836 	bl	8002664 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 808b 	bne.w	8000716 <ScanColumns+0x196>
 8000600:	2341      	movs	r3, #65	@ 0x41
 8000602:	e090      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000604:	2101      	movs	r1, #1
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <ScanColumns+0x1b0>)
 8000608:	f002 f82c 	bl	8002664 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ScanColumns+0x96>
 8000612:	2330      	movs	r3, #48	@ 0x30
 8000614:	e087      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000616:	2102      	movs	r1, #2
 8000618:	4845      	ldr	r0, [pc, #276]	@ (8000730 <ScanColumns+0x1b0>)
 800061a:	f002 f823 	bl	8002664 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ScanColumns+0xa8>
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	e07e      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000628:	2104      	movs	r1, #4
 800062a:	4841      	ldr	r0, [pc, #260]	@ (8000730 <ScanColumns+0x1b0>)
 800062c:	f002 f81a 	bl	8002664 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <ScanColumns+0xba>
 8000636:	2335      	movs	r3, #53	@ 0x35
 8000638:	e075      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800063a:	2108      	movs	r1, #8
 800063c:	483c      	ldr	r0, [pc, #240]	@ (8000730 <ScanColumns+0x1b0>)
 800063e:	f002 f811 	bl	8002664 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <ScanColumns+0xcc>
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	e06c      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800064c:	2110      	movs	r1, #16
 800064e:	4838      	ldr	r0, [pc, #224]	@ (8000730 <ScanColumns+0x1b0>)
 8000650:	f002 f808 	bl	8002664 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d15f      	bne.n	800071a <ScanColumns+0x19a>
 800065a:	2342      	movs	r3, #66	@ 0x42
 800065c:	e063      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 800065e:	2101      	movs	r1, #1
 8000660:	4833      	ldr	r0, [pc, #204]	@ (8000730 <ScanColumns+0x1b0>)
 8000662:	f001 ffff 	bl	8002664 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <ScanColumns+0xf0>
 800066c:	2345      	movs	r3, #69	@ 0x45
 800066e:	e05a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000670:	2102      	movs	r1, #2
 8000672:	482f      	ldr	r0, [pc, #188]	@ (8000730 <ScanColumns+0x1b0>)
 8000674:	f001 fff6 	bl	8002664 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <ScanColumns+0x102>
 800067e:	2339      	movs	r3, #57	@ 0x39
 8000680:	e051      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000682:	2104      	movs	r1, #4
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <ScanColumns+0x1b0>)
 8000686:	f001 ffed 	bl	8002664 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <ScanColumns+0x114>
 8000690:	2336      	movs	r3, #54	@ 0x36
 8000692:	e048      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000694:	2108      	movs	r1, #8
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <ScanColumns+0x1b0>)
 8000698:	f001 ffe4 	bl	8002664 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <ScanColumns+0x126>
 80006a2:	2333      	movs	r3, #51	@ 0x33
 80006a4:	e03f      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80006a6:	2110      	movs	r1, #16
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <ScanColumns+0x1b0>)
 80006aa:	f001 ffdb 	bl	8002664 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d134      	bne.n	800071e <ScanColumns+0x19e>
 80006b4:	2344      	movs	r3, #68	@ 0x44
 80006b6:	e036      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 80006b8:	2101      	movs	r1, #1
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <ScanColumns+0x1b0>)
 80006bc:	f001 ffd2 	bl	8002664 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <ScanColumns+0x14a>
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	e02d      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 80006ca:	2102      	movs	r1, #2
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <ScanColumns+0x1b0>)
 80006ce:	f001 ffc9 	bl	8002664 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <ScanColumns+0x15c>
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	e024      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 80006dc:	2104      	movs	r1, #4
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <ScanColumns+0x1b0>)
 80006e0:	f001 ffc0 	bl	8002664 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <ScanColumns+0x16e>
 80006ea:	2324      	movs	r3, #36	@ 0x24
 80006ec:	e01b      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 80006ee:	2108      	movs	r1, #8
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <ScanColumns+0x1b0>)
 80006f2:	f001 ffb7 	bl	8002664 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <ScanColumns+0x180>
 80006fc:	234c      	movs	r3, #76	@ 0x4c
 80006fe:	e012      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <ScanColumns+0x1b0>)
 8000704:	f001 ffae 	bl	8002664 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <ScanColumns+0x1a2>
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	e009      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000712:	23ff      	movs	r3, #255	@ 0xff
 8000714:	e007      	b.n	8000726 <ScanColumns+0x1a6>
            break;
 8000716:	bf00      	nop
 8000718:	e004      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071a:	bf00      	nop
 800071c:	e002      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 8000722:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000724:	23ff      	movs	r3, #255	@ 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400

08000734 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000740:	f001 ffa8 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800074c:	f001 ffa2 	bl	8002694 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff15 	bl	8000580 <ScanColumns>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d001      	beq.n	8000764 <KeyPad_Scan+0x30>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	e041      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800076a:	f001 ff93 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000774:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000776:	f001 ff8d 	bl	8002694 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff00 	bl	8000580 <ScanColumns>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d001      	beq.n	800078e <KeyPad_Scan+0x5a>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	e02c      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000796:	f001 ff7d 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007a2:	f001 ff77 	bl	8002694 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff feea 	bl	8000580 <ScanColumns>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <KeyPad_Scan+0x86>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	e016      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007c2:	f001 ff67 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007ce:	f001 ff61 	bl	8002694 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fed4 	bl	8000580 <ScanColumns>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <KeyPad_Scan+0xb2>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	e000      	b.n	80007e8 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80007e6:	23ff      	movs	r3, #255	@ 0xff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020400 	.word	0x40020400

080007f4 <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <formatTotalLiters+0x80>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d815      	bhi.n	8000834 <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <formatTotalLiters+0x84>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <formatTotalLiters+0x84>)
 800081a:	fba3 1302 	umull	r1, r3, r3, r2
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	4916      	ldr	r1, [pc, #88]	@ (800087c <formatTotalLiters+0x88>)
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <formatTotalLiters+0x8c>)
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000832:	e018      	b.n	8000866 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <formatTotalLiters+0x90>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0e5a      	lsrs	r2, r3, #25
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <formatTotalLiters+0x90>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0e5b      	lsrs	r3, r3, #25
 800084c:	490e      	ldr	r1, [pc, #56]	@ (8000888 <formatTotalLiters+0x94>)
 800084e:	fb01 f303 	mul.w	r3, r1, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <formatTotalLiters+0x98>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	095a      	lsrs	r2, r3, #5
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <formatTotalLiters+0x8c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	05f5e0ff 	.word	0x05f5e0ff
 8000878:	431bde83 	.word	0x431bde83
 800087c:	000f4240 	.word	0x000f4240
 8000880:	20000050 	.word	0x20000050
 8000884:	55e63b89 	.word	0x55e63b89
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	51eb851f 	.word	0x51eb851f

08000890 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <formatTotalLitersShift+0x60>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d815      	bhi.n	80008d0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9a      	lsrs	r2, r3, #18
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	490e      	ldr	r1, [pc, #56]	@ (80008f8 <formatTotalLitersShift+0x68>)
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80008ce:	e009      	b.n	80008e4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008de:	f04f 32ff 	mov.w	r2, #4294967295
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	3b9ac9ff 	.word	0x3b9ac9ff
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	20000050 	.word	0x20000050

08000900 <KeyLogic>:


void KeyLogic() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8000906:	f004 faad 	bl	8004e64 <xTaskGetTickCount>
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800090c:	f7ff ff12 	bl	8000734 <KeyPad_Scan>
 8000910:	4603      	mov	r3, r0
 8000912:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000914:	4ba5      	ldr	r3, [pc, #660]	@ (8000bac <KeyLogic+0x2ac>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d85a      	bhi.n	80009d2 <KeyLogic+0xd2>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <KeyLogic+0x24>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	0800094f 	.word	0x0800094f
 800092c:	0800097b 	.word	0x0800097b
 8000930:	080009ab 	.word	0x080009ab
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d044      	beq.n	80009c4 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800093a:	4a9d      	ldr	r2, [pc, #628]	@ (8000bb0 <KeyLogic+0x2b0>)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000940:	4a9c      	ldr	r2, [pc, #624]	@ (8000bb4 <KeyLogic+0x2b4>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8000946:	4b99      	ldr	r3, [pc, #612]	@ (8000bac <KeyLogic+0x2ac>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800094c:	e03a      	b.n	80009c4 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800094e:	4b99      	ldr	r3, [pc, #612]	@ (8000bb4 <KeyLogic+0x2b4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b31      	cmp	r3, #49	@ 0x31
 8000958:	d936      	bls.n	80009c8 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800095a:	4b95      	ldr	r3, [pc, #596]	@ (8000bb0 <KeyLogic+0x2b0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d106      	bne.n	8000972 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8000964:	4b91      	ldr	r3, [pc, #580]	@ (8000bac <KeyLogic+0x2ac>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800096a:	4a93      	ldr	r2, [pc, #588]	@ (8000bb8 <KeyLogic+0x2b8>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8000970:	e02a      	b.n	80009c8 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8000972:	4b8e      	ldr	r3, [pc, #568]	@ (8000bac <KeyLogic+0x2ac>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
            break;
 8000978:	e026      	b.n	80009c8 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800097a:	4b8d      	ldr	r3, [pc, #564]	@ (8000bb0 <KeyLogic+0x2b0>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10a      	bne.n	800099a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8000984:	4b8c      	ldr	r3, [pc, #560]	@ (8000bb8 <KeyLogic+0x2b8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000990:	d31c      	bcc.n	80009cc <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000992:	4b86      	ldr	r3, [pc, #536]	@ (8000bac <KeyLogic+0x2ac>)
 8000994:	2203      	movs	r2, #3
 8000996:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000998:	e018      	b.n	80009cc <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800099a:	4b85      	ldr	r3, [pc, #532]	@ (8000bb0 <KeyLogic+0x2b0>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b87      	ldr	r3, [pc, #540]	@ (8000bbc <KeyLogic+0x2bc>)
 80009a0:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009a2:	4b82      	ldr	r3, [pc, #520]	@ (8000bac <KeyLogic+0x2ac>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
            break;
 80009a8:	e010      	b.n	80009cc <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80009aa:	4b81      	ldr	r3, [pc, #516]	@ (8000bb0 <KeyLogic+0x2b0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d00d      	beq.n	80009d0 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80009b4:	4b7e      	ldr	r3, [pc, #504]	@ (8000bb0 <KeyLogic+0x2b0>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b80      	ldr	r3, [pc, #512]	@ (8000bbc <KeyLogic+0x2bc>)
 80009ba:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009bc:	4b7b      	ldr	r3, [pc, #492]	@ (8000bac <KeyLogic+0x2ac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80009c2:	e005      	b.n	80009d0 <KeyLogic+0xd0>
            break;
 80009c4:	bf00      	nop
 80009c6:	e004      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009d0:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 80009d2:	4b7a      	ldr	r3, [pc, #488]	@ (8000bbc <KeyLogic+0x2bc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2bff      	cmp	r3, #255	@ 0xff
 80009d8:	f000 833d 	beq.w	8001056 <KeyLogic+0x756>
		switch (keyPressed) {
 80009dc:	4b77      	ldr	r3, [pc, #476]	@ (8000bbc <KeyLogic+0x2bc>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3b24      	subs	r3, #36	@ 0x24
 80009e2:	2b30      	cmp	r3, #48	@ 0x30
 80009e4:	f200 82b4 	bhi.w	8000f50 <KeyLogic+0x650>
 80009e8:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <KeyLogic+0xf0>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000eb5 	.word	0x08000eb5
 80009f4:	08000f51 	.word	0x08000f51
 80009f8:	08000f51 	.word	0x08000f51
 80009fc:	08000f51 	.word	0x08000f51
 8000a00:	08000f51 	.word	0x08000f51
 8000a04:	08000f51 	.word	0x08000f51
 8000a08:	08000f51 	.word	0x08000f51
 8000a0c:	08000f51 	.word	0x08000f51
 8000a10:	08000f51 	.word	0x08000f51
 8000a14:	08000f51 	.word	0x08000f51
 8000a18:	08000f51 	.word	0x08000f51
 8000a1c:	08000f51 	.word	0x08000f51
 8000a20:	08000f51 	.word	0x08000f51
 8000a24:	08000f51 	.word	0x08000f51
 8000a28:	08000f51 	.word	0x08000f51
 8000a2c:	08000f51 	.word	0x08000f51
 8000a30:	08000f51 	.word	0x08000f51
 8000a34:	08000f51 	.word	0x08000f51
 8000a38:	08000f51 	.word	0x08000f51
 8000a3c:	08000f51 	.word	0x08000f51
 8000a40:	08000f51 	.word	0x08000f51
 8000a44:	08000f51 	.word	0x08000f51
 8000a48:	08000f51 	.word	0x08000f51
 8000a4c:	08000f51 	.word	0x08000f51
 8000a50:	08000f51 	.word	0x08000f51
 8000a54:	08000f51 	.word	0x08000f51
 8000a58:	08000f51 	.word	0x08000f51
 8000a5c:	08000f51 	.word	0x08000f51
 8000a60:	08000f51 	.word	0x08000f51
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000add 	.word	0x08000add
 8000a6c:	08000b01 	.word	0x08000b01
 8000a70:	08000efd 	.word	0x08000efd
 8000a74:	08000b27 	.word	0x08000b27
 8000a78:	08000f2d 	.word	0x08000f2d
 8000a7c:	08000f51 	.word	0x08000f51
 8000a80:	08000f51 	.word	0x08000f51
 8000a84:	08000f51 	.word	0x08000f51
 8000a88:	08000f51 	.word	0x08000f51
 8000a8c:	08000f51 	.word	0x08000f51
 8000a90:	08000ed9 	.word	0x08000ed9
 8000a94:	08000f51 	.word	0x08000f51
 8000a98:	08000f51 	.word	0x08000f51
 8000a9c:	08000f51 	.word	0x08000f51
 8000aa0:	08000e47 	.word	0x08000e47
 8000aa4:	08000f51 	.word	0x08000f51
 8000aa8:	08000f51 	.word	0x08000f51
 8000aac:	08000f51 	.word	0x08000f51
 8000ab0:	08000e91 	.word	0x08000e91
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4a42      	ldr	r2, [pc, #264]	@ (8000bc0 <KeyLogic+0x2c0>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	4842      	ldr	r0, [pc, #264]	@ (8000bc4 <KeyLogic+0x2c4>)
 8000abc:	f005 fd94 	bl	80065e8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 8000ac0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc0 <KeyLogic+0x2c0>)
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	483f      	ldr	r0, [pc, #252]	@ (8000bc8 <KeyLogic+0x2c8>)
 8000aca:	f005 fd8d 	bl	80065e8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	4a3b      	ldr	r2, [pc, #236]	@ (8000bc0 <KeyLogic+0x2c0>)
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	483d      	ldr	r0, [pc, #244]	@ (8000bcc <KeyLogic+0x2cc>)
 8000ad6:	f005 fd87 	bl	80065e8 <sniprintf>
				break;
 8000ada:	e2bc      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_PRESSED_P){
 8000adc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d103      	bne.n	8000aec <KeyLogic+0x1ec>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000ae6:	2206      	movs	r2, #6
 8000ae8:	701a      	strb	r2, [r3, #0]
				}else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000aea:	e2b4      	b.n	8001056 <KeyLogic+0x756>
					seqState=SEQ_IDLE;
 8000aec:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000af2:	4b38      	ldr	r3, [pc, #224]	@ (8000bd4 <KeyLogic+0x2d4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000af8:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
				break;
 8000afe:	e2aa      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000b00:	2300      	movs	r3, #0
 8000b02:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc0 <KeyLogic+0x2c0>)
 8000b04:	2107      	movs	r1, #7
 8000b06:	482f      	ldr	r0, [pc, #188]	@ (8000bc4 <KeyLogic+0x2c4>)
 8000b08:	f005 fd6e 	bl	80065e8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <KeyLogic+0x2c0>)
 8000b10:	2107      	movs	r1, #7
 8000b12:	482d      	ldr	r0, [pc, #180]	@ (8000bc8 <KeyLogic+0x2c8>)
 8000b14:	f005 fd68 	bl	80065e8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000b18:	2301      	movs	r3, #1
 8000b1a:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <KeyLogic+0x2c0>)
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	482b      	ldr	r0, [pc, #172]	@ (8000bcc <KeyLogic+0x2cc>)
 8000b20:	f005 fd62 	bl	80065e8 <sniprintf>
				break;
 8000b24:	e297      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 8000b26:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <KeyLogic+0x236>
					seqState = SEQ_DISP_PRICE;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000b34:	e28f      	b.n	8001056 <KeyLogic+0x756>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d10f      	bne.n	8000b5e <KeyLogic+0x25e>
					accumulatedNumber==password) {
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b26      	ldr	r3, [pc, #152]	@ (8000bdc <KeyLogic+0x2dc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d109      	bne.n	8000b5e <KeyLogic+0x25e>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b4c:	2209      	movs	r2, #9
 8000b4e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b50:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <KeyLogic+0x2d4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e172      	b.n	8000e44 <KeyLogic+0x544>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d10f      	bne.n	8000b86 <KeyLogic+0x286>
						accumulatedNumber==password){
 8000b66:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <KeyLogic+0x2dc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d109      	bne.n	8000b86 <KeyLogic+0x286>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <KeyLogic+0x2d4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e15e      	b.n	8000e44 <KeyLogic+0x544>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	f040 809b 	bne.w	8000cc6 <KeyLogic+0x3c6>
					switch(accumulatedNumber){
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	f000 8083 	beq.w	8000ca0 <KeyLogic+0x3a0>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	f200 8088 	bhi.w	8000cb0 <KeyLogic+0x3b0>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01d      	beq.n	8000be0 <KeyLogic+0x2e0>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d04b      	beq.n	8000c40 <KeyLogic+0x340>
							break;
 8000ba8:	e082      	b.n	8000cb0 <KeyLogic+0x3b0>
 8000baa:	bf00      	nop
 8000bac:	200000e9 	.word	0x200000e9
 8000bb0:	20000001 	.word	0x20000001
 8000bb4:	200000d0 	.word	0x200000d0
 8000bb8:	200000d4 	.word	0x200000d4
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	08007014 	.word	0x08007014
 8000bc4:	20000024 	.word	0x20000024
 8000bc8:	2000002b 	.word	0x2000002b
 8000bcc:	20000032 	.word	0x20000032
 8000bd0:	200000ea 	.word	0x200000ea
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	200000d8 	.word	0x200000d8
 8000bdc:	2000003c 	.word	0x2000003c
							if(currPrice%50<25){
 8000be0:	4ba2      	ldr	r3, [pc, #648]	@ (8000e6c <KeyLogic+0x56c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4ba2      	ldr	r3, [pc, #648]	@ (8000e70 <KeyLogic+0x570>)
 8000be6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	2132      	movs	r1, #50	@ 0x32
 8000bee:	fb01 f303 	mul.w	r3, r1, r3
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	2b18      	cmp	r3, #24
 8000bf6:	d80f      	bhi.n	8000c18 <KeyLogic+0x318>
								roundedPrice=currPrice-(currPrice%50);
 8000bf8:	4b9c      	ldr	r3, [pc, #624]	@ (8000e6c <KeyLogic+0x56c>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8000e6c <KeyLogic+0x56c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b9b      	ldr	r3, [pc, #620]	@ (8000e70 <KeyLogic+0x570>)
 8000c02:	fba3 0302 	umull	r0, r3, r3, r2
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	2032      	movs	r0, #50	@ 0x32
 8000c0a:	fb00 f303 	mul.w	r3, r0, r3
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	1acb      	subs	r3, r1, r3
 8000c12:	4a98      	ldr	r2, [pc, #608]	@ (8000e74 <KeyLogic+0x574>)
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e00f      	b.n	8000c38 <KeyLogic+0x338>
								roundedPrice=currPrice-(currPrice%50)+50;
 8000c18:	4b94      	ldr	r3, [pc, #592]	@ (8000e6c <KeyLogic+0x56c>)
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	4b93      	ldr	r3, [pc, #588]	@ (8000e6c <KeyLogic+0x56c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b93      	ldr	r3, [pc, #588]	@ (8000e70 <KeyLogic+0x570>)
 8000c22:	fba3 0302 	umull	r0, r3, r3, r2
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	2032      	movs	r0, #50	@ 0x32
 8000c2a:	fb00 f303 	mul.w	r3, r0, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	3332      	adds	r3, #50	@ 0x32
 8000c34:	4a8f      	ldr	r2, [pc, #572]	@ (8000e74 <KeyLogic+0x574>)
 8000c36:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 8000c38:	4b8f      	ldr	r3, [pc, #572]	@ (8000e78 <KeyLogic+0x578>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
							break;
 8000c3e:	e038      	b.n	8000cb2 <KeyLogic+0x3b2>
							if(currPrice%100<50){
 8000c40:	4b8a      	ldr	r3, [pc, #552]	@ (8000e6c <KeyLogic+0x56c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b8a      	ldr	r3, [pc, #552]	@ (8000e70 <KeyLogic+0x570>)
 8000c46:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2164      	movs	r1, #100	@ 0x64
 8000c4e:	fb01 f303 	mul.w	r3, r1, r3
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b31      	cmp	r3, #49	@ 0x31
 8000c56:	d80f      	bhi.n	8000c78 <KeyLogic+0x378>
								roundedPrice=currPrice-(currPrice%100);
 8000c58:	4b84      	ldr	r3, [pc, #528]	@ (8000e6c <KeyLogic+0x56c>)
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	4b83      	ldr	r3, [pc, #524]	@ (8000e6c <KeyLogic+0x56c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b83      	ldr	r3, [pc, #524]	@ (8000e70 <KeyLogic+0x570>)
 8000c62:	fba3 0302 	umull	r0, r3, r3, r2
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2064      	movs	r0, #100	@ 0x64
 8000c6a:	fb00 f303 	mul.w	r3, r0, r3
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	4a80      	ldr	r2, [pc, #512]	@ (8000e74 <KeyLogic+0x574>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00f      	b.n	8000c98 <KeyLogic+0x398>
								roundedPrice=currPrice-(currPrice%100)+100;
 8000c78:	4b7c      	ldr	r3, [pc, #496]	@ (8000e6c <KeyLogic+0x56c>)
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8000e6c <KeyLogic+0x56c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b7b      	ldr	r3, [pc, #492]	@ (8000e70 <KeyLogic+0x570>)
 8000c82:	fba3 0302 	umull	r0, r3, r3, r2
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2064      	movs	r0, #100	@ 0x64
 8000c8a:	fb00 f303 	mul.w	r3, r0, r3
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	3364      	adds	r3, #100	@ 0x64
 8000c94:	4a77      	ldr	r2, [pc, #476]	@ (8000e74 <KeyLogic+0x574>)
 8000c96:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 8000c98:	4b77      	ldr	r3, [pc, #476]	@ (8000e78 <KeyLogic+0x578>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
							break;
 8000c9e:	e008      	b.n	8000cb2 <KeyLogic+0x3b2>
							roundedPrice=currPrice;
 8000ca0:	4b72      	ldr	r3, [pc, #456]	@ (8000e6c <KeyLogic+0x56c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a73      	ldr	r2, [pc, #460]	@ (8000e74 <KeyLogic+0x574>)
 8000ca6:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 8000ca8:	4b73      	ldr	r3, [pc, #460]	@ (8000e78 <KeyLogic+0x578>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	701a      	strb	r2, [r3, #0]
							break;
 8000cae:	e000      	b.n	8000cb2 <KeyLogic+0x3b2>
							break;
 8000cb0:	bf00      	nop
					seqState = SEQ_IDLE;
 8000cb2:	4b72      	ldr	r3, [pc, #456]	@ (8000e7c <KeyLogic+0x57c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cb8:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <KeyLogic+0x580>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cbe:	4b71      	ldr	r3, [pc, #452]	@ (8000e84 <KeyLogic+0x584>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
				break;
 8000cc4:	e1c7      	b.n	8001056 <KeyLogic+0x756>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 8000cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e7c <KeyLogic+0x57c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	d173      	bne.n	8000db6 <KeyLogic+0x4b6>
					currPrice = accumulatedNumber;
 8000cce:	4b6d      	ldr	r3, [pc, #436]	@ (8000e84 <KeyLogic+0x584>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a66      	ldr	r2, [pc, #408]	@ (8000e6c <KeyLogic+0x56c>)
 8000cd4:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 8000cd6:	4b68      	ldr	r3, [pc, #416]	@ (8000e78 <KeyLogic+0x578>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <KeyLogic+0x3e4>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d02d      	beq.n	8000d3e <KeyLogic+0x43e>
 8000ce2:	e059      	b.n	8000d98 <KeyLogic+0x498>
							if(currPrice%50<25){
 8000ce4:	4b61      	ldr	r3, [pc, #388]	@ (8000e6c <KeyLogic+0x56c>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b61      	ldr	r3, [pc, #388]	@ (8000e70 <KeyLogic+0x570>)
 8000cea:	fba3 1302 	umull	r1, r3, r3, r2
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	2132      	movs	r1, #50	@ 0x32
 8000cf2:	fb01 f303 	mul.w	r3, r1, r3
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b18      	cmp	r3, #24
 8000cfa:	d80f      	bhi.n	8000d1c <KeyLogic+0x41c>
								roundedPrice=currPrice-(currPrice%50);
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000e6c <KeyLogic+0x56c>)
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	4b5a      	ldr	r3, [pc, #360]	@ (8000e6c <KeyLogic+0x56c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b5a      	ldr	r3, [pc, #360]	@ (8000e70 <KeyLogic+0x570>)
 8000d06:	fba3 0302 	umull	r0, r3, r3, r2
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	2032      	movs	r0, #50	@ 0x32
 8000d0e:	fb00 f303 	mul.w	r3, r0, r3
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	1acb      	subs	r3, r1, r3
 8000d16:	4a57      	ldr	r2, [pc, #348]	@ (8000e74 <KeyLogic+0x574>)
 8000d18:	6013      	str	r3, [r2, #0]
							break;
 8000d1a:	e042      	b.n	8000da2 <KeyLogic+0x4a2>
								roundedPrice=currPrice-(currPrice%50)+50;
 8000d1c:	4b53      	ldr	r3, [pc, #332]	@ (8000e6c <KeyLogic+0x56c>)
 8000d1e:	6819      	ldr	r1, [r3, #0]
 8000d20:	4b52      	ldr	r3, [pc, #328]	@ (8000e6c <KeyLogic+0x56c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b52      	ldr	r3, [pc, #328]	@ (8000e70 <KeyLogic+0x570>)
 8000d26:	fba3 0302 	umull	r0, r3, r3, r2
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	2032      	movs	r0, #50	@ 0x32
 8000d2e:	fb00 f303 	mul.w	r3, r0, r3
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	3332      	adds	r3, #50	@ 0x32
 8000d38:	4a4e      	ldr	r2, [pc, #312]	@ (8000e74 <KeyLogic+0x574>)
 8000d3a:	6013      	str	r3, [r2, #0]
							break;
 8000d3c:	e031      	b.n	8000da2 <KeyLogic+0x4a2>
							if(currPrice%100<50){
 8000d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e6c <KeyLogic+0x56c>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b4b      	ldr	r3, [pc, #300]	@ (8000e70 <KeyLogic+0x570>)
 8000d44:	fba3 1302 	umull	r1, r3, r3, r2
 8000d48:	095b      	lsrs	r3, r3, #5
 8000d4a:	2164      	movs	r1, #100	@ 0x64
 8000d4c:	fb01 f303 	mul.w	r3, r1, r3
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b31      	cmp	r3, #49	@ 0x31
 8000d54:	d80f      	bhi.n	8000d76 <KeyLogic+0x476>
								roundedPrice=currPrice-(currPrice%100);
 8000d56:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <KeyLogic+0x56c>)
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	4b44      	ldr	r3, [pc, #272]	@ (8000e6c <KeyLogic+0x56c>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b44      	ldr	r3, [pc, #272]	@ (8000e70 <KeyLogic+0x570>)
 8000d60:	fba3 0302 	umull	r0, r3, r3, r2
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	2064      	movs	r0, #100	@ 0x64
 8000d68:	fb00 f303 	mul.w	r3, r0, r3
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	4a40      	ldr	r2, [pc, #256]	@ (8000e74 <KeyLogic+0x574>)
 8000d72:	6013      	str	r3, [r2, #0]
							break;
 8000d74:	e015      	b.n	8000da2 <KeyLogic+0x4a2>
								roundedPrice=currPrice-(currPrice%100)+100;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	@ (8000e6c <KeyLogic+0x56c>)
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <KeyLogic+0x56c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e70 <KeyLogic+0x570>)
 8000d80:	fba3 0302 	umull	r0, r3, r3, r2
 8000d84:	095b      	lsrs	r3, r3, #5
 8000d86:	2064      	movs	r0, #100	@ 0x64
 8000d88:	fb00 f303 	mul.w	r3, r0, r3
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	1acb      	subs	r3, r1, r3
 8000d90:	3364      	adds	r3, #100	@ 0x64
 8000d92:	4a38      	ldr	r2, [pc, #224]	@ (8000e74 <KeyLogic+0x574>)
 8000d94:	6013      	str	r3, [r2, #0]
							break;
 8000d96:	e004      	b.n	8000da2 <KeyLogic+0x4a2>
							roundedPrice=currPrice;
 8000d98:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <KeyLogic+0x56c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a35      	ldr	r2, [pc, #212]	@ (8000e74 <KeyLogic+0x574>)
 8000d9e:	6013      	str	r3, [r2, #0]
							break;
 8000da0:	bf00      	nop
					seqState = SEQ_IDLE;
 8000da2:	4b36      	ldr	r3, [pc, #216]	@ (8000e7c <KeyLogic+0x57c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000da8:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <KeyLogic+0x580>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000dae:	4b35      	ldr	r3, [pc, #212]	@ (8000e84 <KeyLogic+0x584>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
				break;
 8000db4:	e14f      	b.n	8001056 <KeyLogic+0x756>
				else if(seqState == SEQ_PRESSED_T_F4&&    //T + F4 to delete totalLitersShift
 8000db6:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <KeyLogic+0x57c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b0e      	cmp	r3, #14
 8000dbc:	d112      	bne.n	8000de4 <KeyLogic+0x4e4>
						accumulatedNumber == password){
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <KeyLogic+0x584>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <KeyLogic+0x588>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_PRESSED_T_F4&&    //T + F4 to delete totalLitersShift
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d10c      	bne.n	8000de4 <KeyLogic+0x4e4>
					seqState = SEQ_PRESSED_T_F4_PASSWORD;
 8000dca:	4b2c      	ldr	r3, [pc, #176]	@ (8000e7c <KeyLogic+0x57c>)
 8000dcc:	220f      	movs	r2, #15
 8000dce:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <KeyLogic+0x580>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <KeyLogic+0x584>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
					totalLitersShift = 0;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <KeyLogic+0x58c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e02f      	b.n	8000e44 <KeyLogic+0x544>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 8000de4:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <KeyLogic+0x57c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d10f      	bne.n	8000e0c <KeyLogic+0x50c>
						accumulatedNumber == password){
 8000dec:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <KeyLogic+0x584>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <KeyLogic+0x588>)
 8000df2:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d109      	bne.n	8000e0c <KeyLogic+0x50c>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <KeyLogic+0x57c>)
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <KeyLogic+0x580>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <KeyLogic+0x584>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e01b      	b.n	8000e44 <KeyLogic+0x544>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <KeyLogic+0x57c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d10d      	bne.n	8000e30 <KeyLogic+0x530>
					password = accumulatedNumber;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <KeyLogic+0x584>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1b      	ldr	r2, [pc, #108]	@ (8000e88 <KeyLogic+0x588>)
 8000e1a:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <KeyLogic+0x57c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e22:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <KeyLogic+0x580>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e28:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <KeyLogic+0x584>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
				break;
 8000e2e:	e112      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <KeyLogic+0x57c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <KeyLogic+0x580>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <KeyLogic+0x584>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
				break;
 8000e42:	e108      	b.n	8001056 <KeyLogic+0x756>
 8000e44:	e107      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <KeyLogic+0x57c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <KeyLogic+0x556>
					seqState = SEQ_PRESSED_P;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <KeyLogic+0x57c>)
 8000e50:	2205      	movs	r2, #5
 8000e52:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000e54:	e0ff      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <KeyLogic+0x57c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <KeyLogic+0x580>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <KeyLogic+0x584>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
				break;
 8000e68:	e0f5      	b.n	8001056 <KeyLogic+0x756>
 8000e6a:	bf00      	nop
 8000e6c:	20000048 	.word	0x20000048
 8000e70:	51eb851f 	.word	0x51eb851f
 8000e74:	2000004c 	.word	0x2000004c
 8000e78:	200000e8 	.word	0x200000e8
 8000e7c:	200000ea 	.word	0x200000ea
 8000e80:	200000dc 	.word	0x200000dc
 8000e84:	200000d8 	.word	0x200000d8
 8000e88:	2000003c 	.word	0x2000003c
 8000e8c:	20000044 	.word	0x20000044
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000e90:	4b74      	ldr	r3, [pc, #464]	@ (8001064 <KeyLogic+0x764>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <KeyLogic+0x5a0>
					seqState = SEQ_PRESSED_T;
 8000e98:	4b72      	ldr	r3, [pc, #456]	@ (8001064 <KeyLogic+0x764>)
 8000e9a:	220a      	movs	r2, #10
 8000e9c:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000e9e:	e0da      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000ea0:	4b70      	ldr	r3, [pc, #448]	@ (8001064 <KeyLogic+0x764>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000ea6:	4b70      	ldr	r3, [pc, #448]	@ (8001068 <KeyLogic+0x768>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000eac:	4b6f      	ldr	r3, [pc, #444]	@ (800106c <KeyLogic+0x76c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
				break;
 8000eb2:	e0d0      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 8000eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8001064 <KeyLogic+0x764>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	d103      	bne.n	8000ec4 <KeyLogic+0x5c4>
					seqState = SEQ_PRESSED_T_$;
 8000ebc:	4b69      	ldr	r3, [pc, #420]	@ (8001064 <KeyLogic+0x764>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000ec2:	e0c8      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000ec4:	4b67      	ldr	r3, [pc, #412]	@ (8001064 <KeyLogic+0x764>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000eca:	4b67      	ldr	r3, [pc, #412]	@ (8001068 <KeyLogic+0x768>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ed0:	4b66      	ldr	r3, [pc, #408]	@ (800106c <KeyLogic+0x76c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
				break;
 8000ed6:	e0be      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 8000ed8:	4b62      	ldr	r3, [pc, #392]	@ (8001064 <KeyLogic+0x764>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	d103      	bne.n	8000ee8 <KeyLogic+0x5e8>
					seqState = SEQ_PRESSED_T_L;
 8000ee0:	4b60      	ldr	r3, [pc, #384]	@ (8001064 <KeyLogic+0x764>)
 8000ee2:	220b      	movs	r2, #11
 8000ee4:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000ee6:	e0b6      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8001064 <KeyLogic+0x764>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000eee:	4b5e      	ldr	r3, [pc, #376]	@ (8001068 <KeyLogic+0x768>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ef4:	4b5d      	ldr	r3, [pc, #372]	@ (800106c <KeyLogic+0x76c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
				break;
 8000efa:	e0ac      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 8000efc:	4b59      	ldr	r3, [pc, #356]	@ (8001064 <KeyLogic+0x764>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b0a      	cmp	r3, #10
 8000f02:	d109      	bne.n	8000f18 <KeyLogic+0x618>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8000f04:	4b57      	ldr	r3, [pc, #348]	@ (8001064 <KeyLogic+0x764>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f0a:	4b57      	ldr	r3, [pc, #348]	@ (8001068 <KeyLogic+0x768>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000f10:	4b56      	ldr	r3, [pc, #344]	@ (800106c <KeyLogic+0x76c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000f16:	e09e      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000f18:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <KeyLogic+0x764>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f1e:	4b52      	ldr	r3, [pc, #328]	@ (8001068 <KeyLogic+0x768>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000f24:	4b51      	ldr	r3, [pc, #324]	@ (800106c <KeyLogic+0x76c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
				break;
 8000f2a:	e094      	b.n	8001056 <KeyLogic+0x756>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001064 <KeyLogic+0x764>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d103      	bne.n	8000f3c <KeyLogic+0x63c>
					seqState = SEQ_PRESSED_T_F4;
 8000f34:	4b4b      	ldr	r3, [pc, #300]	@ (8001064 <KeyLogic+0x764>)
 8000f36:	220e      	movs	r2, #14
 8000f38:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000f3a:	e08c      	b.n	8001056 <KeyLogic+0x756>
					seqState = SEQ_IDLE;
 8000f3c:	4b49      	ldr	r3, [pc, #292]	@ (8001064 <KeyLogic+0x764>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000f42:	4b49      	ldr	r3, [pc, #292]	@ (8001068 <KeyLogic+0x768>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000f48:	4b48      	ldr	r3, [pc, #288]	@ (800106c <KeyLogic+0x76c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
				break;
 8000f4e:	e082      	b.n	8001056 <KeyLogic+0x756>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8000f50:	4b47      	ldr	r3, [pc, #284]	@ (8001070 <KeyLogic+0x770>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f56:	d972      	bls.n	800103e <KeyLogic+0x73e>
 8000f58:	4b45      	ldr	r3, [pc, #276]	@ (8001070 <KeyLogic+0x770>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b39      	cmp	r3, #57	@ 0x39
 8000f5e:	d86e      	bhi.n	800103e <KeyLogic+0x73e>
					if(seqState==SEQ_PRESSED_P){
 8000f60:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <KeyLogic+0x764>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d10c      	bne.n	8000f82 <KeyLogic+0x682>
						seqState=SEQ_PRESSED_P_NUM;
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <KeyLogic+0x764>)
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000f6e:	4b40      	ldr	r3, [pc, #256]	@ (8001070 <KeyLogic+0x770>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	3b30      	subs	r3, #48	@ 0x30
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b3d      	ldr	r3, [pc, #244]	@ (800106c <KeyLogic+0x76c>)
 8000f78:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <KeyLogic+0x768>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000f80:	e067      	b.n	8001052 <KeyLogic+0x752>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000f82:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <KeyLogic+0x764>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d017      	beq.n	8000fba <KeyLogic+0x6ba>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <KeyLogic+0x764>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d013      	beq.n	8000fba <KeyLogic+0x6ba>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000f92:	4b34      	ldr	r3, [pc, #208]	@ (8001064 <KeyLogic+0x764>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8000f96:	2b09      	cmp	r3, #9
 8000f98:	d00f      	beq.n	8000fba <KeyLogic+0x6ba>
							seqState == SEQ_PRESSED_T_F4||
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <KeyLogic+0x764>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000f9e:	2b0e      	cmp	r3, #14
 8000fa0:	d00b      	beq.n	8000fba <KeyLogic+0x6ba>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000fa2:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <KeyLogic+0x764>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_T_F4||
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d007      	beq.n	8000fba <KeyLogic+0x6ba>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8000faa:	4b2e      	ldr	r3, [pc, #184]	@ (8001064 <KeyLogic+0x764>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d003      	beq.n	8000fba <KeyLogic+0x6ba>
							seqState == SEQ_NUMBER
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <KeyLogic+0x764>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d117      	bne.n	8000fea <KeyLogic+0x6ea>
							) {
						if (numberOfDigits < 6) {
 8000fba:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <KeyLogic+0x768>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d83c      	bhi.n	800103c <KeyLogic+0x73c>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <KeyLogic+0x76c>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <KeyLogic+0x770>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b30      	subs	r3, #48	@ 0x30
 8000fd8:	4a24      	ldr	r2, [pc, #144]	@ (800106c <KeyLogic+0x76c>)
 8000fda:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <KeyLogic+0x768>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <KeyLogic+0x768>)
 8000fe6:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8000fe8:	e028      	b.n	800103c <KeyLogic+0x73c>
						}
					}else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8000fea:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <KeyLogic+0x764>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d117      	bne.n	8001022 <KeyLogic+0x722>
						if (numberOfDigits < 1) {
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <KeyLogic+0x768>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d12b      	bne.n	8001052 <KeyLogic+0x752>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <KeyLogic+0x76c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	461a      	mov	r2, r3
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <KeyLogic+0x770>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4413      	add	r3, r2
 800100e:	3b30      	subs	r3, #48	@ 0x30
 8001010:	4a16      	ldr	r2, [pc, #88]	@ (800106c <KeyLogic+0x76c>)
 8001012:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <KeyLogic+0x768>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <KeyLogic+0x768>)
 800101e:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001020:	e017      	b.n	8001052 <KeyLogic+0x752>
						}
					}else{
						seqState = SEQ_NUMBER;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <KeyLogic+0x764>)
 8001024:	2204      	movs	r2, #4
 8001026:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <KeyLogic+0x770>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3b30      	subs	r3, #48	@ 0x30
 800102e:	461a      	mov	r2, r3
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <KeyLogic+0x76c>)
 8001032:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <KeyLogic+0x768>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 800103a:	e00a      	b.n	8001052 <KeyLogic+0x752>
 800103c:	e009      	b.n	8001052 <KeyLogic+0x752>
					}
				}else{
					seqState = SEQ_IDLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <KeyLogic+0x764>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <KeyLogic+0x768>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <KeyLogic+0x76c>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
				}
				break;
 8001050:	e000      	b.n	8001054 <KeyLogic+0x754>
					if(seqState==SEQ_PRESSED_P){
 8001052:	bf00      	nop
				break;
 8001054:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <KeyLogic+0x770>)
 8001058:	22ff      	movs	r2, #255	@ 0xff
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000ea 	.word	0x200000ea
 8001068:	200000dc 	.word	0x200000dc
 800106c:	200000d8 	.word	0x200000d8
 8001070:	20000000 	.word	0x20000000

08001074 <KeyLogic_Action>:


void KeyLogic_Action() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 800107a:	4bb6      	ldr	r3, [pc, #728]	@ (8001354 <KeyLogic_Action+0x2e0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	f200 8220 	bhi.w	80014c4 <KeyLogic_Action+0x450>
 8001084:	a201      	add	r2, pc, #4	@ (adr r2, 800108c <KeyLogic_Action+0x18>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	080010cd 	.word	0x080010cd
 8001090:	080010f3 	.word	0x080010f3
 8001094:	08001119 	.word	0x08001119
 8001098:	08001157 	.word	0x08001157
 800109c:	08001485 	.word	0x08001485
 80010a0:	08001195 	.word	0x08001195
 80010a4:	080011bb 	.word	0x080011bb
 80010a8:	080011e1 	.word	0x080011e1
 80010ac:	08001201 	.word	0x08001201
 80010b0:	08001227 	.word	0x08001227
 80010b4:	0800124d 	.word	0x0800124d
 80010b8:	08001311 	.word	0x08001311
 80010bc:	08001273 	.word	0x08001273
 80010c0:	08001419 	.word	0x08001419
 80010c4:	0800143f 	.word	0x0800143f
 80010c8:	08001465 	.word	0x08001465
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80010cc:	2300      	movs	r3, #0
 80010ce:	4aa2      	ldr	r2, [pc, #648]	@ (8001358 <KeyLogic_Action+0x2e4>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	48a2      	ldr	r0, [pc, #648]	@ (800135c <KeyLogic_Action+0x2e8>)
 80010d4:	f005 fa88 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80010d8:	2300      	movs	r3, #0
 80010da:	4a9f      	ldr	r2, [pc, #636]	@ (8001358 <KeyLogic_Action+0x2e4>)
 80010dc:	2107      	movs	r1, #7
 80010de:	48a0      	ldr	r0, [pc, #640]	@ (8001360 <KeyLogic_Action+0x2ec>)
 80010e0:	f005 fa82 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80010e4:	2300      	movs	r3, #0
 80010e6:	4a9c      	ldr	r2, [pc, #624]	@ (8001358 <KeyLogic_Action+0x2e4>)
 80010e8:	2107      	movs	r1, #7
 80010ea:	489e      	ldr	r0, [pc, #632]	@ (8001364 <KeyLogic_Action+0x2f0>)
 80010ec:	f005 fa7c 	bl	80065e8 <sniprintf>
            break;
 80010f0:	e1fb      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 80010f2:	4a9d      	ldr	r2, [pc, #628]	@ (8001368 <KeyLogic_Action+0x2f4>)
 80010f4:	2107      	movs	r1, #7
 80010f6:	4899      	ldr	r0, [pc, #612]	@ (800135c <KeyLogic_Action+0x2e8>)
 80010f8:	f005 fa76 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", roundedPrice);
 80010fc:	4b9b      	ldr	r3, [pc, #620]	@ (800136c <KeyLogic_Action+0x2f8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a9b      	ldr	r2, [pc, #620]	@ (8001370 <KeyLogic_Action+0x2fc>)
 8001102:	2107      	movs	r1, #7
 8001104:	4896      	ldr	r0, [pc, #600]	@ (8001360 <KeyLogic_Action+0x2ec>)
 8001106:	f005 fa6f 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800110a:	2300      	movs	r3, #0
 800110c:	4a92      	ldr	r2, [pc, #584]	@ (8001358 <KeyLogic_Action+0x2e4>)
 800110e:	2107      	movs	r1, #7
 8001110:	4894      	ldr	r0, [pc, #592]	@ (8001364 <KeyLogic_Action+0x2f0>)
 8001112:	f005 fa69 	bl	80065e8 <sniprintf>
			break;
 8001116:	e1e8      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001118:	4b96      	ldr	r3, [pc, #600]	@ (8001374 <KeyLogic_Action+0x300>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f107 0020 	add.w	r0, r7, #32
 8001120:	4a93      	ldr	r2, [pc, #588]	@ (8001370 <KeyLogic_Action+0x2fc>)
 8001122:	2107      	movs	r1, #7
 8001124:	f005 fa60 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4a92      	ldr	r2, [pc, #584]	@ (8001378 <KeyLogic_Action+0x304>)
 800112e:	2107      	movs	r1, #7
 8001130:	488a      	ldr	r0, [pc, #552]	@ (800135c <KeyLogic_Action+0x2e8>)
 8001132:	f005 fa59 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8001136:	4a91      	ldr	r2, [pc, #580]	@ (800137c <KeyLogic_Action+0x308>)
 8001138:	2107      	movs	r1, #7
 800113a:	4889      	ldr	r0, [pc, #548]	@ (8001360 <KeyLogic_Action+0x2ec>)
 800113c:	f005 fa54 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001140:	2300      	movs	r3, #0
 8001142:	4a85      	ldr	r2, [pc, #532]	@ (8001358 <KeyLogic_Action+0x2e4>)
 8001144:	2107      	movs	r1, #7
 8001146:	4887      	ldr	r0, [pc, #540]	@ (8001364 <KeyLogic_Action+0x2f0>)
 8001148:	f005 fa4e 	bl	80065e8 <sniprintf>
            LEDPointFlag = -1;
 800114c:	4b8c      	ldr	r3, [pc, #560]	@ (8001380 <KeyLogic_Action+0x30c>)
 800114e:	f04f 32ff 	mov.w	r2, #4294967295
 8001152:	601a      	str	r2, [r3, #0]
            break;
 8001154:	e1c9      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001156:	4b87      	ldr	r3, [pc, #540]	@ (8001374 <KeyLogic_Action+0x300>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f107 0020 	add.w	r0, r7, #32
 800115e:	4a84      	ldr	r2, [pc, #528]	@ (8001370 <KeyLogic_Action+0x2fc>)
 8001160:	2107      	movs	r1, #7
 8001162:	f005 fa41 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4a83      	ldr	r2, [pc, #524]	@ (8001378 <KeyLogic_Action+0x304>)
 800116c:	2107      	movs	r1, #7
 800116e:	487b      	ldr	r0, [pc, #492]	@ (800135c <KeyLogic_Action+0x2e8>)
 8001170:	f005 fa3a 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001174:	2300      	movs	r3, #0
 8001176:	4a78      	ldr	r2, [pc, #480]	@ (8001358 <KeyLogic_Action+0x2e4>)
 8001178:	2107      	movs	r1, #7
 800117a:	4879      	ldr	r0, [pc, #484]	@ (8001360 <KeyLogic_Action+0x2ec>)
 800117c:	f005 fa34 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8001180:	4a80      	ldr	r2, [pc, #512]	@ (8001384 <KeyLogic_Action+0x310>)
 8001182:	2107      	movs	r1, #7
 8001184:	4877      	ldr	r0, [pc, #476]	@ (8001364 <KeyLogic_Action+0x2f0>)
 8001186:	f005 fa2f 	bl	80065e8 <sniprintf>
            LEDPointFlag = -1;
 800118a:	4b7d      	ldr	r3, [pc, #500]	@ (8001380 <KeyLogic_Action+0x30c>)
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	601a      	str	r2, [r3, #0]
            break;
 8001192:	e1aa      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001194:	4b77      	ldr	r3, [pc, #476]	@ (8001374 <KeyLogic_Action+0x300>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a75      	ldr	r2, [pc, #468]	@ (8001370 <KeyLogic_Action+0x2fc>)
 800119a:	2107      	movs	r1, #7
 800119c:	486f      	ldr	r0, [pc, #444]	@ (800135c <KeyLogic_Action+0x2e8>)
 800119e:	f005 fa23 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80011a2:	2300      	movs	r3, #0
 80011a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001358 <KeyLogic_Action+0x2e4>)
 80011a6:	2107      	movs	r1, #7
 80011a8:	486d      	ldr	r0, [pc, #436]	@ (8001360 <KeyLogic_Action+0x2ec>)
 80011aa:	f005 fa1d 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 80011ae:	4a76      	ldr	r2, [pc, #472]	@ (8001388 <KeyLogic_Action+0x314>)
 80011b0:	2107      	movs	r1, #7
 80011b2:	486c      	ldr	r0, [pc, #432]	@ (8001364 <KeyLogic_Action+0x2f0>)
 80011b4:	f005 fa18 	bl	80065e8 <sniprintf>
			break;
 80011b8:	e197      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80011ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001374 <KeyLogic_Action+0x300>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a6c      	ldr	r2, [pc, #432]	@ (8001370 <KeyLogic_Action+0x2fc>)
 80011c0:	2107      	movs	r1, #7
 80011c2:	4866      	ldr	r0, [pc, #408]	@ (800135c <KeyLogic_Action+0x2e8>)
 80011c4:	f005 fa10 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80011c8:	2300      	movs	r3, #0
 80011ca:	4a63      	ldr	r2, [pc, #396]	@ (8001358 <KeyLogic_Action+0x2e4>)
 80011cc:	2107      	movs	r1, #7
 80011ce:	4864      	ldr	r0, [pc, #400]	@ (8001360 <KeyLogic_Action+0x2ec>)
 80011d0:	f005 fa0a 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 80011d4:	4a6d      	ldr	r2, [pc, #436]	@ (800138c <KeyLogic_Action+0x318>)
 80011d6:	2107      	movs	r1, #7
 80011d8:	4862      	ldr	r0, [pc, #392]	@ (8001364 <KeyLogic_Action+0x2f0>)
 80011da:	f005 fa05 	bl	80065e8 <sniprintf>
			break;
 80011de:	e184      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 80011e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001390 <KeyLogic_Action+0x31c>)
 80011e2:	2107      	movs	r1, #7
 80011e4:	485d      	ldr	r0, [pc, #372]	@ (800135c <KeyLogic_Action+0x2e8>)
 80011e6:	f005 f9ff 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 80011ea:	4a6a      	ldr	r2, [pc, #424]	@ (8001394 <KeyLogic_Action+0x320>)
 80011ec:	2107      	movs	r1, #7
 80011ee:	485c      	ldr	r0, [pc, #368]	@ (8001360 <KeyLogic_Action+0x2ec>)
 80011f0:	f005 f9fa 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 80011f4:	4a68      	ldr	r2, [pc, #416]	@ (8001398 <KeyLogic_Action+0x324>)
 80011f6:	2107      	movs	r1, #7
 80011f8:	485a      	ldr	r0, [pc, #360]	@ (8001364 <KeyLogic_Action+0x2f0>)
 80011fa:	f005 f9f5 	bl	80065e8 <sniprintf>
			break;
 80011fe:	e174      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001200:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <KeyLogic_Action+0x300>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a5a      	ldr	r2, [pc, #360]	@ (8001370 <KeyLogic_Action+0x2fc>)
 8001206:	2107      	movs	r1, #7
 8001208:	4854      	ldr	r0, [pc, #336]	@ (800135c <KeyLogic_Action+0x2e8>)
 800120a:	f005 f9ed 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800120e:	2300      	movs	r3, #0
 8001210:	4a51      	ldr	r2, [pc, #324]	@ (8001358 <KeyLogic_Action+0x2e4>)
 8001212:	2107      	movs	r1, #7
 8001214:	4852      	ldr	r0, [pc, #328]	@ (8001360 <KeyLogic_Action+0x2ec>)
 8001216:	f005 f9e7 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 800121a:	4a60      	ldr	r2, [pc, #384]	@ (800139c <KeyLogic_Action+0x328>)
 800121c:	2107      	movs	r1, #7
 800121e:	4851      	ldr	r0, [pc, #324]	@ (8001364 <KeyLogic_Action+0x2f0>)
 8001220:	f005 f9e2 	bl	80065e8 <sniprintf>
            break;
 8001224:	e161      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001226:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <KeyLogic_Action+0x300>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a51      	ldr	r2, [pc, #324]	@ (8001370 <KeyLogic_Action+0x2fc>)
 800122c:	2107      	movs	r1, #7
 800122e:	484b      	ldr	r0, [pc, #300]	@ (800135c <KeyLogic_Action+0x2e8>)
 8001230:	f005 f9da 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001234:	2300      	movs	r3, #0
 8001236:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <KeyLogic_Action+0x2e4>)
 8001238:	2107      	movs	r1, #7
 800123a:	4849      	ldr	r0, [pc, #292]	@ (8001360 <KeyLogic_Action+0x2ec>)
 800123c:	f005 f9d4 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001240:	4a49      	ldr	r2, [pc, #292]	@ (8001368 <KeyLogic_Action+0x2f4>)
 8001242:	2107      	movs	r1, #7
 8001244:	4847      	ldr	r0, [pc, #284]	@ (8001364 <KeyLogic_Action+0x2f0>)
 8001246:	f005 f9cf 	bl	80065e8 <sniprintf>
            break;
 800124a:	e14e      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800124c:	2300      	movs	r3, #0
 800124e:	4a42      	ldr	r2, [pc, #264]	@ (8001358 <KeyLogic_Action+0x2e4>)
 8001250:	2107      	movs	r1, #7
 8001252:	4842      	ldr	r0, [pc, #264]	@ (800135c <KeyLogic_Action+0x2e8>)
 8001254:	f005 f9c8 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001258:	2300      	movs	r3, #0
 800125a:	4a3f      	ldr	r2, [pc, #252]	@ (8001358 <KeyLogic_Action+0x2e4>)
 800125c:	2107      	movs	r1, #7
 800125e:	4840      	ldr	r0, [pc, #256]	@ (8001360 <KeyLogic_Action+0x2ec>)
 8001260:	f005 f9c2 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8001264:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <KeyLogic_Action+0x32c>)
 8001266:	4a3c      	ldr	r2, [pc, #240]	@ (8001358 <KeyLogic_Action+0x2e4>)
 8001268:	2107      	movs	r1, #7
 800126a:	483e      	ldr	r0, [pc, #248]	@ (8001364 <KeyLogic_Action+0x2f0>)
 800126c:	f005 f9bc 	bl	80065e8 <sniprintf>
            break;
 8001270:	e13b      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8001272:	4b4c      	ldr	r3, [pc, #304]	@ (80013a4 <KeyLogic_Action+0x330>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a4c      	ldr	r2, [pc, #304]	@ (80013a8 <KeyLogic_Action+0x334>)
 8001278:	494c      	ldr	r1, [pc, #304]	@ (80013ac <KeyLogic_Action+0x338>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb08 	bl	8000890 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <KeyLogic_Action+0x338>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f107 0018 	add.w	r0, r7, #24
 8001288:	4a39      	ldr	r2, [pc, #228]	@ (8001370 <KeyLogic_Action+0x2fc>)
 800128a:	2107      	movs	r1, #7
 800128c:	f005 f9ac 	bl	80065e8 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8001290:	4b46      	ldr	r3, [pc, #280]	@ (80013ac <KeyLogic_Action+0x338>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b46      	ldr	r3, [pc, #280]	@ (80013b0 <KeyLogic_Action+0x33c>)
 8001296:	fba3 1302 	umull	r1, r3, r3, r2
 800129a:	0b5b      	lsrs	r3, r3, #13
 800129c:	f242 7110 	movw	r1, #10000	@ 0x2710
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f107 0010 	add.w	r0, r7, #16
 80012aa:	4a42      	ldr	r2, [pc, #264]	@ (80013b4 <KeyLogic_Action+0x340>)
 80012ac:	2108      	movs	r1, #8
 80012ae:	f005 f99b 	bl	80065e8 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b6:	e01b      	b.n	80012f0 <KeyLogic_Action+0x27c>
				if (i < strlen(combinedStrShift)) {
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe ff8f 	bl	80001e0 <strlen>
 80012c2:	4602      	mov	r2, r0
 80012c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d90a      	bls.n	80012e0 <KeyLogic_Action+0x26c>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 80012ca:	f107 0210 	add.w	r2, r7, #16
 80012ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d0:	4413      	add	r3, r2
 80012d2:	7819      	ldrb	r1, [r3, #0]
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <KeyLogic_Action+0x2e8>)
 80012d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d8:	4413      	add	r3, r2
 80012da:	460a      	mov	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e004      	b.n	80012ea <KeyLogic_Action+0x276>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80012e0:	4a1e      	ldr	r2, [pc, #120]	@ (800135c <KeyLogic_Action+0x2e8>)
 80012e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e4:	4413      	add	r3, r2
 80012e6:	2220      	movs	r2, #32
 80012e8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 80012ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ec:	3301      	adds	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	dde0      	ble.n	80012b8 <KeyLogic_Action+0x244>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <KeyLogic_Action+0x334>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <KeyLogic_Action+0x2fc>)
 80012fc:	2107      	movs	r1, #7
 80012fe:	4818      	ldr	r0, [pc, #96]	@ (8001360 <KeyLogic_Action+0x2ec>)
 8001300:	f005 f972 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8001304:	4a2c      	ldr	r2, [pc, #176]	@ (80013b8 <KeyLogic_Action+0x344>)
 8001306:	2107      	movs	r1, #7
 8001308:	4816      	ldr	r0, [pc, #88]	@ (8001364 <KeyLogic_Action+0x2f0>)
 800130a:	f005 f96d 	bl	80065e8 <sniprintf>

            break;
 800130e:	e0ec      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <KeyLogic_Action+0x348>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <KeyLogic_Action+0x334>)
 8001316:	4925      	ldr	r1, [pc, #148]	@ (80013ac <KeyLogic_Action+0x338>)
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fa6b 	bl	80007f4 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <KeyLogic_Action+0x338>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f107 0008 	add.w	r0, r7, #8
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <KeyLogic_Action+0x2fc>)
 8001328:	2107      	movs	r1, #7
 800132a:	f005 f95d 	bl	80065e8 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 800132e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <KeyLogic_Action+0x338>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <KeyLogic_Action+0x33c>)
 8001334:	fba3 1302 	umull	r1, r3, r3, r2
 8001338:	0b5b      	lsrs	r3, r3, #13
 800133a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4638      	mov	r0, r7
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <KeyLogic_Action+0x34c>)
 8001348:	2108      	movs	r1, #8
 800134a:	f005 f94d 	bl	80065e8 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001352:	e051      	b.n	80013f8 <KeyLogic_Action+0x384>
 8001354:	200000ea 	.word	0x200000ea
 8001358:	08007014 	.word	0x08007014
 800135c:	20000024 	.word	0x20000024
 8001360:	2000002b 	.word	0x2000002b
 8001364:	20000032 	.word	0x20000032
 8001368:	0800701c 	.word	0x0800701c
 800136c:	2000004c 	.word	0x2000004c
 8001370:	08007024 	.word	0x08007024
 8001374:	200000d8 	.word	0x200000d8
 8001378:	0800702c 	.word	0x0800702c
 800137c:	08007030 	.word	0x08007030
 8001380:	20000050 	.word	0x20000050
 8001384:	08007038 	.word	0x08007038
 8001388:	08007040 	.word	0x08007040
 800138c:	08007048 	.word	0x08007048
 8001390:	08007050 	.word	0x08007050
 8001394:	08007058 	.word	0x08007058
 8001398:	08007060 	.word	0x08007060
 800139c:	08007068 	.word	0x08007068
 80013a0:	000f423f 	.word	0x000f423f
 80013a4:	20000044 	.word	0x20000044
 80013a8:	200000e4 	.word	0x200000e4
 80013ac:	200000e0 	.word	0x200000e0
 80013b0:	d1b71759 	.word	0xd1b71759
 80013b4:	08007070 	.word	0x08007070
 80013b8:	0800707c 	.word	0x0800707c
 80013bc:	20000040 	.word	0x20000040
 80013c0:	08007084 	.word	0x08007084
                if (i < strlen(combinedStr)) {
 80013c4:	463b      	mov	r3, r7
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7fe ff0a 	bl	80001e0 <strlen>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d909      	bls.n	80013e8 <KeyLogic_Action+0x374>
                    SevenSegBuffer[0][i] = combinedStr[i];
 80013d4:	463a      	mov	r2, r7
 80013d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d8:	4413      	add	r3, r2
 80013da:	7819      	ldrb	r1, [r3, #0]
 80013dc:	4a45      	ldr	r2, [pc, #276]	@ (80014f4 <KeyLogic_Action+0x480>)
 80013de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e0:	4413      	add	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e004      	b.n	80013f2 <KeyLogic_Action+0x37e>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80013e8:	4a42      	ldr	r2, [pc, #264]	@ (80014f4 <KeyLogic_Action+0x480>)
 80013ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ec:	4413      	add	r3, r2
 80013ee:	2220      	movs	r2, #32
 80013f0:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 80013f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f4:	3301      	adds	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	dde2      	ble.n	80013c4 <KeyLogic_Action+0x350>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 80013fe:	4b3e      	ldr	r3, [pc, #248]	@ (80014f8 <KeyLogic_Action+0x484>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a3e      	ldr	r2, [pc, #248]	@ (80014fc <KeyLogic_Action+0x488>)
 8001404:	2107      	movs	r1, #7
 8001406:	483e      	ldr	r0, [pc, #248]	@ (8001500 <KeyLogic_Action+0x48c>)
 8001408:	f005 f8ee 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 800140c:	4a3d      	ldr	r2, [pc, #244]	@ (8001504 <KeyLogic_Action+0x490>)
 800140e:	2107      	movs	r1, #7
 8001410:	483d      	ldr	r0, [pc, #244]	@ (8001508 <KeyLogic_Action+0x494>)
 8001412:	f005 f8e9 	bl	80065e8 <sniprintf>



            break;
 8001416:	e068      	b.n	80014ea <KeyLogic_Action+0x476>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8001418:	4b3c      	ldr	r3, [pc, #240]	@ (800150c <KeyLogic_Action+0x498>)
 800141a:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <KeyLogic_Action+0x49c>)
 800141c:	2107      	movs	r1, #7
 800141e:	4835      	ldr	r0, [pc, #212]	@ (80014f4 <KeyLogic_Action+0x480>)
 8001420:	f005 f8e2 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001424:	2300      	movs	r3, #0
 8001426:	4a3a      	ldr	r2, [pc, #232]	@ (8001510 <KeyLogic_Action+0x49c>)
 8001428:	2107      	movs	r1, #7
 800142a:	4835      	ldr	r0, [pc, #212]	@ (8001500 <KeyLogic_Action+0x48c>)
 800142c:	f005 f8dc 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001430:	2300      	movs	r3, #0
 8001432:	4a37      	ldr	r2, [pc, #220]	@ (8001510 <KeyLogic_Action+0x49c>)
 8001434:	2107      	movs	r1, #7
 8001436:	4834      	ldr	r0, [pc, #208]	@ (8001508 <KeyLogic_Action+0x494>)
 8001438:	f005 f8d6 	bl	80065e8 <sniprintf>
            break;
 800143c:	e055      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_T_F4:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 800143e:	4b35      	ldr	r3, [pc, #212]	@ (8001514 <KeyLogic_Action+0x4a0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a2e      	ldr	r2, [pc, #184]	@ (80014fc <KeyLogic_Action+0x488>)
 8001444:	2107      	movs	r1, #7
 8001446:	482b      	ldr	r0, [pc, #172]	@ (80014f4 <KeyLogic_Action+0x480>)
 8001448:	f005 f8ce 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800144c:	2300      	movs	r3, #0
 800144e:	4a30      	ldr	r2, [pc, #192]	@ (8001510 <KeyLogic_Action+0x49c>)
 8001450:	2107      	movs	r1, #7
 8001452:	482b      	ldr	r0, [pc, #172]	@ (8001500 <KeyLogic_Action+0x48c>)
 8001454:	f005 f8c8 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DELETE");
 8001458:	4a2f      	ldr	r2, [pc, #188]	@ (8001518 <KeyLogic_Action+0x4a4>)
 800145a:	2107      	movs	r1, #7
 800145c:	482a      	ldr	r0, [pc, #168]	@ (8001508 <KeyLogic_Action+0x494>)
 800145e:	f005 f8c3 	bl	80065e8 <sniprintf>
            break;
 8001462:	e042      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_PRESSED_T_F4_PASSWORD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), " ");
 8001464:	4a2d      	ldr	r2, [pc, #180]	@ (800151c <KeyLogic_Action+0x4a8>)
 8001466:	2107      	movs	r1, #7
 8001468:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <KeyLogic_Action+0x480>)
 800146a:	f005 f8bd 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 800146e:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <KeyLogic_Action+0x4a8>)
 8001470:	2107      	movs	r1, #7
 8001472:	4823      	ldr	r0, [pc, #140]	@ (8001500 <KeyLogic_Action+0x48c>)
 8001474:	f005 f8b8 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DONE ");
 8001478:	4a29      	ldr	r2, [pc, #164]	@ (8001520 <KeyLogic_Action+0x4ac>)
 800147a:	2107      	movs	r1, #7
 800147c:	4822      	ldr	r0, [pc, #136]	@ (8001508 <KeyLogic_Action+0x494>)
 800147e:	f005 f8b3 	bl	80065e8 <sniprintf>
			break;
 8001482:	e032      	b.n	80014ea <KeyLogic_Action+0x476>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <KeyLogic_Action+0x4a0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f107 0020 	add.w	r0, r7, #32
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <KeyLogic_Action+0x488>)
 800148e:	2107      	movs	r1, #7
 8001490:	f005 f8aa 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <KeyLogic_Action+0x4b0>)
 800149a:	2107      	movs	r1, #7
 800149c:	4815      	ldr	r0, [pc, #84]	@ (80014f4 <KeyLogic_Action+0x480>)
 800149e:	f005 f8a3 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80014a2:	2300      	movs	r3, #0
 80014a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001510 <KeyLogic_Action+0x49c>)
 80014a6:	2107      	movs	r1, #7
 80014a8:	4815      	ldr	r0, [pc, #84]	@ (8001500 <KeyLogic_Action+0x48c>)
 80014aa:	f005 f89d 	bl	80065e8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80014ae:	2300      	movs	r3, #0
 80014b0:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <KeyLogic_Action+0x49c>)
 80014b2:	2107      	movs	r1, #7
 80014b4:	4814      	ldr	r0, [pc, #80]	@ (8001508 <KeyLogic_Action+0x494>)
 80014b6:	f005 f897 	bl	80065e8 <sniprintf>
			LEDPointFlag = -1;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <KeyLogic_Action+0x4b4>)
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	601a      	str	r2, [r3, #0]
			break;
 80014c2:	e012      	b.n	80014ea <KeyLogic_Action+0x476>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80014c4:	2300      	movs	r3, #0
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <KeyLogic_Action+0x49c>)
 80014c8:	2107      	movs	r1, #7
 80014ca:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <KeyLogic_Action+0x480>)
 80014cc:	f005 f88c 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80014d0:	2300      	movs	r3, #0
 80014d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <KeyLogic_Action+0x49c>)
 80014d4:	2107      	movs	r1, #7
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <KeyLogic_Action+0x48c>)
 80014d8:	f005 f886 	bl	80065e8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80014dc:	2300      	movs	r3, #0
 80014de:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <KeyLogic_Action+0x49c>)
 80014e0:	2107      	movs	r1, #7
 80014e2:	4809      	ldr	r0, [pc, #36]	@ (8001508 <KeyLogic_Action+0x494>)
 80014e4:	f005 f880 	bl	80065e8 <sniprintf>
            break;
 80014e8:	bf00      	nop
    }
}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	@ 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000024 	.word	0x20000024
 80014f8:	200000e4 	.word	0x200000e4
 80014fc:	08007024 	.word	0x08007024
 8001500:	2000002b 	.word	0x2000002b
 8001504:	0800708c 	.word	0x0800708c
 8001508:	20000032 	.word	0x20000032
 800150c:	00051615 	.word	0x00051615
 8001510:	08007014 	.word	0x08007014
 8001514:	200000d8 	.word	0x200000d8
 8001518:	08007094 	.word	0x08007094
 800151c:	0800709c 	.word	0x0800709c
 8001520:	080070a0 	.word	0x080070a0
 8001524:	0800702c 	.word	0x0800702c
 8001528:	20000050 	.word	0x20000050

0800152c <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b2f      	cmp	r3, #47	@ 0x2f
 800153a:	d907      	bls.n	800154c <CharToSegment+0x20>
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b39      	cmp	r3, #57	@ 0x39
 8001540:	d804      	bhi.n	800154c <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	3b30      	subs	r3, #48	@ 0x30
 8001546:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <CharToSegment+0xfc>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	e066      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'L') {
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001550:	d102      	bne.n	8001558 <CharToSegment+0x2c>
        return specialCharMap[0];
 8001552:	4b36      	ldr	r3, [pc, #216]	@ (800162c <CharToSegment+0x100>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	e060      	b.n	800161a <CharToSegment+0xee>
    } else if (c == '.') {
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b2e      	cmp	r3, #46	@ 0x2e
 800155c:	d102      	bne.n	8001564 <CharToSegment+0x38>
        return specialCharMap[1];
 800155e:	4b33      	ldr	r3, [pc, #204]	@ (800162c <CharToSegment+0x100>)
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	e05a      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'T') {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b54      	cmp	r3, #84	@ 0x54
 8001568:	d102      	bne.n	8001570 <CharToSegment+0x44>
        return specialCharMap[2];
 800156a:	4b30      	ldr	r3, [pc, #192]	@ (800162c <CharToSegment+0x100>)
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	e054      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'O') {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b4f      	cmp	r3, #79	@ 0x4f
 8001574:	d102      	bne.n	800157c <CharToSegment+0x50>
        return specialCharMap[3];
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <CharToSegment+0x100>)
 8001578:	78db      	ldrb	r3, [r3, #3]
 800157a:	e04e      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'A') {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b41      	cmp	r3, #65	@ 0x41
 8001580:	d102      	bne.n	8001588 <CharToSegment+0x5c>
        return specialCharMap[4];
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <CharToSegment+0x100>)
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	e048      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'S') {
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b53      	cmp	r3, #83	@ 0x53
 800158c:	d102      	bne.n	8001594 <CharToSegment+0x68>
        return specialCharMap[5];
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <CharToSegment+0x100>)
 8001590:	795b      	ldrb	r3, [r3, #5]
 8001592:	e042      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'H') {
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	2b48      	cmp	r3, #72	@ 0x48
 8001598:	d102      	bne.n	80015a0 <CharToSegment+0x74>
        return specialCharMap[6];
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <CharToSegment+0x100>)
 800159c:	799b      	ldrb	r3, [r3, #6]
 800159e:	e03c      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'I') {
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b49      	cmp	r3, #73	@ 0x49
 80015a4:	d102      	bne.n	80015ac <CharToSegment+0x80>
        return specialCharMap[7];
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <CharToSegment+0x100>)
 80015a8:	79db      	ldrb	r3, [r3, #7]
 80015aa:	e036      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'F') {
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b46      	cmp	r3, #70	@ 0x46
 80015b0:	d102      	bne.n	80015b8 <CharToSegment+0x8c>
        return specialCharMap[8];
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <CharToSegment+0x100>)
 80015b4:	7a1b      	ldrb	r3, [r3, #8]
 80015b6:	e030      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'G') {
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b47      	cmp	r3, #71	@ 0x47
 80015bc:	d102      	bne.n	80015c4 <CharToSegment+0x98>
        return specialCharMap[9];
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <CharToSegment+0x100>)
 80015c0:	7a5b      	ldrb	r3, [r3, #9]
 80015c2:	e02a      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'P') {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b50      	cmp	r3, #80	@ 0x50
 80015c8:	d102      	bne.n	80015d0 <CharToSegment+0xa4>
        return specialCharMap[10];
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <CharToSegment+0x100>)
 80015cc:	7a9b      	ldrb	r3, [r3, #10]
 80015ce:	e024      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'C') {
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b43      	cmp	r3, #67	@ 0x43
 80015d4:	d102      	bne.n	80015dc <CharToSegment+0xb0>
        return specialCharMap[11];
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <CharToSegment+0x100>)
 80015d8:	7adb      	ldrb	r3, [r3, #11]
 80015da:	e01e      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'E') {
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b45      	cmp	r3, #69	@ 0x45
 80015e0:	d102      	bne.n	80015e8 <CharToSegment+0xbc>
        return specialCharMap[12];
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <CharToSegment+0x100>)
 80015e4:	7b1b      	ldrb	r3, [r3, #12]
 80015e6:	e018      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'U') {
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b55      	cmp	r3, #85	@ 0x55
 80015ec:	d102      	bne.n	80015f4 <CharToSegment+0xc8>
        return specialCharMap[13];
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <CharToSegment+0x100>)
 80015f0:	7b5b      	ldrb	r3, [r3, #13]
 80015f2:	e012      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'N') {
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80015f8:	d102      	bne.n	8001600 <CharToSegment+0xd4>
        return specialCharMap[14];
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <CharToSegment+0x100>)
 80015fc:	7b9b      	ldrb	r3, [r3, #14]
 80015fe:	e00c      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'R') {
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b52      	cmp	r3, #82	@ 0x52
 8001604:	d102      	bne.n	800160c <CharToSegment+0xe0>
        return specialCharMap[15];
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <CharToSegment+0x100>)
 8001608:	7bdb      	ldrb	r3, [r3, #15]
 800160a:	e006      	b.n	800161a <CharToSegment+0xee>
    } else if (c == 'D') {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b44      	cmp	r3, #68	@ 0x44
 8001610:	d102      	bne.n	8001618 <CharToSegment+0xec>
        return specialCharMap[16];
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <CharToSegment+0x100>)
 8001614:	7c1b      	ldrb	r3, [r3, #16]
 8001616:	e000      	b.n	800161a <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 8001618:	23ff      	movs	r3, #255	@ 0xff
    }
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000004 	.word	0x20000004
 800162c:	20000010 	.word	0x20000010

08001630 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	e035      	b.n	80016ae <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdc6 	bl	80001e0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d81f      	bhi.n	800169e <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	dd15      	ble.n	8001692 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	441a      	add	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1e59      	subs	r1, r3, #1
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	1acb      	subs	r3, r1, r3
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff55 	bl	800152c <CharToSegment>
 8001682:	4603      	mov	r3, r0
 8001684:	4619      	mov	r1, r3
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <SevenSegLEDsHandler+0x90>)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	460a      	mov	r2, r1
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e00a      	b.n	80016a8 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8001692:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <SevenSegLEDsHandler+0x90>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	22ff      	movs	r2, #255	@ 0xff
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e004      	b.n	80016a8 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <SevenSegLEDsHandler+0x90>)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	22ff      	movs	r2, #255	@ 0xff
 80016a6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	ddc6      	ble.n	8001642 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 80016b4:	4b02      	ldr	r3, [pc, #8]	@ (80016c0 <SevenSegLEDsHandler+0x90>)
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000f8 	.word	0x200000f8

080016c4 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
 80016d0:	4613      	mov	r3, r2
 80016d2:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ffa9 	bl	8001630 <SevenSegLEDsHandler>
 80016de:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d820      	bhi.n	8001728 <UpdateDisplayBuffer+0x64>
 80016e6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <UpdateDisplayBuffer+0x28>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	08001705 	.word	0x08001705
 80016f0:	0800170b 	.word	0x0800170b
 80016f4:	08001711 	.word	0x08001711
 80016f8:	08001717 	.word	0x08001717
 80016fc:	0800171d 	.word	0x0800171d
 8001700:	08001723 	.word	0x08001723
        case 0:
            curr_scan = 0b11111110;
 8001704:	23fe      	movs	r3, #254	@ 0xfe
 8001706:	73fb      	strb	r3, [r7, #15]
            break;
 8001708:	e011      	b.n	800172e <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 800170a:	23fd      	movs	r3, #253	@ 0xfd
 800170c:	73fb      	strb	r3, [r7, #15]
            break;
 800170e:	e00e      	b.n	800172e <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8001710:	23fb      	movs	r3, #251	@ 0xfb
 8001712:	73fb      	strb	r3, [r7, #15]
            break;
 8001714:	e00b      	b.n	800172e <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 8001716:	23f7      	movs	r3, #247	@ 0xf7
 8001718:	73fb      	strb	r3, [r7, #15]
            break;
 800171a:	e008      	b.n	800172e <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 800171c:	23ef      	movs	r3, #239	@ 0xef
 800171e:	73fb      	strb	r3, [r7, #15]
            break;
 8001720:	e005      	b.n	800172e <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8001722:	23df      	movs	r3, #223	@ 0xdf
 8001724:	73fb      	strb	r3, [r7, #15]
            break;
 8001726:	e002      	b.n	800172e <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8001728:	23ff      	movs	r3, #255	@ 0xff
 800172a:	73fb      	strb	r3, [r7, #15]
            break;
 800172c:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 800172e:	4b57      	ldr	r3, [pc, #348]	@ (800188c <UpdateDisplayBuffer+0x1c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db72      	blt.n	800181c <UpdateDisplayBuffer+0x158>
 8001736:	4b55      	ldr	r3, [pc, #340]	@ (800188c <UpdateDisplayBuffer+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b05      	cmp	r3, #5
 800173c:	dc6e      	bgt.n	800181c <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	4b52      	ldr	r3, [pc, #328]	@ (800188c <UpdateDisplayBuffer+0x1c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d136      	bne.n	80017b6 <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001748:	78ba      	ldrb	r2, [r7, #2]
 800174a:	4951      	ldr	r1, [pc, #324]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	440b      	add	r3, r1
 8001754:	22ff      	movs	r2, #255	@ 0xff
 8001756:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001758:	78ba      	ldrb	r2, [r7, #2]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	7898      	ldrb	r0, [r3, #2]
 800175e:	494c      	ldr	r1, [pc, #304]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	440b      	add	r3, r1
 8001768:	3301      	adds	r3, #1
 800176a:	4602      	mov	r2, r0
 800176c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 800176e:	78ba      	ldrb	r2, [r7, #2]
 8001770:	4947      	ldr	r1, [pc, #284]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	440b      	add	r3, r1
 800177a:	3302      	adds	r3, #2
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3301      	adds	r3, #1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	78ba      	ldrb	r2, [r7, #2]
 8001788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800178c:	b2d8      	uxtb	r0, r3
 800178e:	4940      	ldr	r1, [pc, #256]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	440b      	add	r3, r1
 8001798:	3303      	adds	r3, #3
 800179a:	4602      	mov	r2, r0
 800179c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 800179e:	78ba      	ldrb	r2, [r7, #2]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	7818      	ldrb	r0, [r3, #0]
 80017a4:	493a      	ldr	r1, [pc, #232]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	3304      	adds	r3, #4
 80017b0:	4602      	mov	r2, r0
 80017b2:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80017b4:	e065      	b.n	8001882 <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80017b6:	78ba      	ldrb	r2, [r7, #2]
 80017b8:	4935      	ldr	r1, [pc, #212]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	22ff      	movs	r2, #255	@ 0xff
 80017c4:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 80017c6:	78ba      	ldrb	r2, [r7, #2]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	7898      	ldrb	r0, [r3, #2]
 80017cc:	4930      	ldr	r1, [pc, #192]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	3301      	adds	r3, #1
 80017d8:	4602      	mov	r2, r0
 80017da:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 80017dc:	78ba      	ldrb	r2, [r7, #2]
 80017de:	492c      	ldr	r1, [pc, #176]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	3302      	adds	r3, #2
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 80017ee:	78ba      	ldrb	r2, [r7, #2]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	7858      	ldrb	r0, [r3, #1]
 80017f4:	4926      	ldr	r1, [pc, #152]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	3303      	adds	r3, #3
 8001800:	4602      	mov	r2, r0
 8001802:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 8001804:	78ba      	ldrb	r2, [r7, #2]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	7818      	ldrb	r0, [r3, #0]
 800180a:	4921      	ldr	r1, [pc, #132]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	440b      	add	r3, r1
 8001814:	3304      	adds	r3, #4
 8001816:	4602      	mov	r2, r0
 8001818:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 800181a:	e032      	b.n	8001882 <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800181c:	78ba      	ldrb	r2, [r7, #2]
 800181e:	491c      	ldr	r1, [pc, #112]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	440b      	add	r3, r1
 8001828:	22ff      	movs	r2, #255	@ 0xff
 800182a:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 800182c:	78ba      	ldrb	r2, [r7, #2]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	7898      	ldrb	r0, [r3, #2]
 8001832:	4917      	ldr	r1, [pc, #92]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	440b      	add	r3, r1
 800183c:	3301      	adds	r3, #1
 800183e:	4602      	mov	r2, r0
 8001840:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 8001842:	78ba      	ldrb	r2, [r7, #2]
 8001844:	4912      	ldr	r1, [pc, #72]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	440b      	add	r3, r1
 800184e:	3302      	adds	r3, #2
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 8001854:	78ba      	ldrb	r2, [r7, #2]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	7858      	ldrb	r0, [r3, #1]
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	440b      	add	r3, r1
 8001864:	3303      	adds	r3, #3
 8001866:	4602      	mov	r2, r0
 8001868:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 800186a:	78ba      	ldrb	r2, [r7, #2]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	7818      	ldrb	r0, [r3, #0]
 8001870:	4907      	ldr	r1, [pc, #28]	@ (8001890 <UpdateDisplayBuffer+0x1cc>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	440b      	add	r3, r1
 800187a:	3304      	adds	r3, #4
 800187c:	4602      	mov	r2, r0
 800187e:	701a      	strb	r2, [r3, #0]
    }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000050 	.word	0x20000050
 8001890:	200000ec 	.word	0x200000ec

08001894 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800189a:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <SevenSegLEDsScan+0x7c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	bfb8      	it	lt
 80018aa:	425b      	neglt	r3, r3
 80018ac:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <SevenSegLEDsScan+0x80>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4817      	ldr	r0, [pc, #92]	@ (8001918 <SevenSegLEDsScan+0x84>)
 80018ba:	f7ff ff03 	bl	80016c4 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018be:	b672      	cpsid	i
}
 80018c0:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <SevenSegLEDsScan+0x7c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	4a12      	ldr	r2, [pc, #72]	@ (800191c <SevenSegLEDsScan+0x88>)
 80018d2:	4413      	add	r3, r2
 80018d4:	2105      	movs	r1, #5
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f824 	bl	8001924 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 80018dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001910 <SevenSegLEDsScan+0x7c>)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018e2:	b662      	cpsie	i
}
 80018e4:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <SevenSegLEDsScan+0x80>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <SevenSegLEDsScan+0x8c>)
 80018f0:	fb83 3102 	smull	r3, r1, r3, r2
 80018f4:	17d3      	asrs	r3, r2, #31
 80018f6:	1ac9      	subs	r1, r1, r3
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	1ad1      	subs	r1, r2, r3
 8001902:	b2ca      	uxtb	r2, r1
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <SevenSegLEDsScan+0x80>)
 8001906:	701a      	strb	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200000f6 	.word	0x200000f6
 8001914:	200000eb 	.word	0x200000eb
 8001918:	20000024 	.word	0x20000024
 800191c:	200000ec 	.word	0x200000ec
 8001920:	2aaaaaab 	.word	0x2aaaaaab

08001924 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001934:	4823      	ldr	r0, [pc, #140]	@ (80019c4 <ShiftOut_SPI+0xa0>)
 8001936:	f000 fead 	bl	8002694 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2180      	movs	r1, #128	@ 0x80
 800193e:	4822      	ldr	r0, [pc, #136]	@ (80019c8 <ShiftOut_SPI+0xa4>)
 8001940:	f000 fea8 	bl	8002694 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e003      	b.n	8001952 <ShiftOut_SPI+0x2e>
 800194a:	bf00      	nop
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3301      	adds	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001958:	dbf7      	blt.n	800194a <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800195a:	bf00      	nop
 800195c:	481b      	ldr	r0, [pc, #108]	@ (80019cc <ShiftOut_SPI+0xa8>)
 800195e:	f001 fcf5 	bl	800334c <HAL_SPI_GetState>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d1f9      	bne.n	800195c <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4816      	ldr	r0, [pc, #88]	@ (80019cc <ShiftOut_SPI+0xa8>)
 8001974:	f001 fba7 	bl	80030c6 <HAL_SPI_Transmit>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 800197e:	f000 f9e5 	bl	8001d4c <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	e003      	b.n	8001990 <ShiftOut_SPI+0x6c>
 8001988:	bf00      	nop
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001996:	dbf7      	blt.n	8001988 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001998:	bf00      	nop
 800199a:	480c      	ldr	r0, [pc, #48]	@ (80019cc <ShiftOut_SPI+0xa8>)
 800199c:	f001 fcd6 	bl	800334c <HAL_SPI_GetState>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d1f9      	bne.n	800199a <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ac:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <ShiftOut_SPI+0xa0>)
 80019ae:	f000 fe71 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <ShiftOut_SPI+0xa4>)
 80019b8:	f000 fe6c 	bl	8002694 <HAL_GPIO_WritePin>

}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	200000fc 	.word	0x200000fc

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d4:	f000 fb9e 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d8:	f000 f828 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019dc:	f000 f8fa 	bl	8001bd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80019e0:	f000 f88c 	bl	8001afc <MX_SPI1_Init>
  MX_SPI2_Init();
 80019e4:	f000 f8c0 	bl	8001b68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019e8:	f002 f852 	bl	8003a90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80019ec:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <main+0x44>)
 80019ee:	2100      	movs	r1, #0
 80019f0:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <main+0x48>)
 80019f2:	f002 f897 	bl	8003b24 <osThreadNew>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <main+0x4c>)
 80019fa:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80019fc:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <main+0x50>)
 80019fe:	2100      	movs	r1, #0
 8001a00:	4808      	ldr	r0, [pc, #32]	@ (8001a24 <main+0x54>)
 8001a02:	f002 f88f 	bl	8003b24 <osThreadNew>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <main+0x58>)
 8001a0a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a0c:	f002 f864 	bl	8003ad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <main+0x40>
 8001a14:	080070e4 	.word	0x080070e4
 8001a18:	08001cd9 	.word	0x08001cd9
 8001a1c:	200001ac 	.word	0x200001ac
 8001a20:	08007108 	.word	0x08007108
 8001a24:	08001d15 	.word	0x08001d15
 8001a28:	200001b0 	.word	0x200001b0

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	@ 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 0320 	add.w	r3, r7, #32
 8001a36:	2230      	movs	r2, #48	@ 0x30
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fe08 	bl	8006650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <SystemClock_Config+0xc8>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <SystemClock_Config+0xc8>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a60:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <SystemClock_Config+0xc8>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <SystemClock_Config+0xcc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a20      	ldr	r2, [pc, #128]	@ (8001af8 <SystemClock_Config+0xcc>)
 8001a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <SystemClock_Config+0xcc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2310      	movs	r3, #16
 8001a92:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001aa0:	2364      	movs	r3, #100	@ 0x64
 8001aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fe09 	bl	80026c8 <HAL_RCC_OscConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001abc:	f000 f946 	bl	8001d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	2103      	movs	r1, #3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 f86b 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ae8:	f000 f930 	bl	8001d4c <Error_Handler>
  }
}
 8001aec:	bf00      	nop
 8001aee:	3750      	adds	r7, #80	@ 0x50
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000

08001afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b00:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <MX_SPI1_Init+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b30:	2220      	movs	r2, #32
 8001b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b48:	220a      	movs	r2, #10
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <MX_SPI1_Init+0x64>)
 8001b4e:	f001 fa31 	bl	8002fb4 <HAL_SPI_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b58:	f000 f8f8 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200000fc 	.word	0x200000fc
 8001b64:	40013000 	.word	0x40013000

08001b68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <MX_SPI2_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	@ (8001bcc <MX_SPI2_Init+0x64>)
 8001bba:	f001 f9fb 	bl	8002fb4 <HAL_SPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bc4:	f000 f8c2 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000154 	.word	0x20000154
 8001bd0:	40003800 	.word	0x40003800

08001bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b37      	ldr	r3, [pc, #220]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a36      	ldr	r2, [pc, #216]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a28      	ldr	r2, [pc, #160]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a21      	ldr	r2, [pc, #132]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <MX_GPIO_Init+0xf8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8001c60:	481b      	ldr	r0, [pc, #108]	@ (8001cd0 <MX_GPIO_Init+0xfc>)
 8001c62:	f000 fd17 	bl	8002694 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	481a      	ldr	r0, [pc, #104]	@ (8001cd4 <MX_GPIO_Init+0x100>)
 8001c6c:	f000 fd12 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001c70:	231f      	movs	r3, #31
 8001c72:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4813      	ldr	r0, [pc, #76]	@ (8001cd0 <MX_GPIO_Init+0xfc>)
 8001c84:	f000 fb6a 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001c88:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8001c8c:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480b      	ldr	r0, [pc, #44]	@ (8001cd0 <MX_GPIO_Init+0xfc>)
 8001ca2:	f000 fb5b 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001ca6:	2380      	movs	r3, #128	@ 0x80
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <MX_GPIO_Init+0x100>)
 8001cbe:	f000 fb4d 	bl	800235c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	@ 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800

08001cd8 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d10 <Led3x6Run+0x38>)
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cea:	6018      	str	r0, [r3, #0]
 8001cec:	3304      	adds	r3, #4
 8001cee:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8001cf0:	f7ff fdd0 	bl	8001894 <SevenSegLEDsScan>
	  osDelay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f001 ffa7 	bl	8003c48 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe0f 	bl	8001924 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f001 ff9e 	bl	8003c48 <osDelay>
	  SevenSegLEDsScan();
 8001d0c:	bf00      	nop
 8001d0e:	e7ef      	b.n	8001cf0 <Led3x6Run+0x18>
 8001d10:	080070c4 	.word	0x080070c4

08001d14 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 8001d1c:	f7fe fdf0 	bl	8000900 <KeyLogic>
	 KeyLogic_Action();
 8001d20:	f7ff f9a8 	bl	8001074 <KeyLogic_Action>
	 osDelay(1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f001 ff8f 	bl	8003c48 <osDelay>
	 KeyLogic();
 8001d2a:	bf00      	nop
 8001d2c:	e7f6      	b.n	8001d1c <KeyPad4x5Run+0x8>

08001d2e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d3e:	d101      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d40:	f000 fa0a 	bl	8002158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <Error_Handler+0x8>

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_MspInit+0x54>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <HAL_MspInit+0x54>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_MspInit+0x54>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_MspInit+0x54>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_MspInit+0x54>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_MspInit+0x54>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	210f      	movs	r1, #15
 8001d9a:	f06f 0001 	mvn.w	r0, #1
 8001d9e:	f000 fab3 	bl	8002308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a41      	ldr	r2, [pc, #260]	@ (8001ed4 <HAL_SPI_MspInit+0x124>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12c      	bne.n	8001e2c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	4b40      	ldr	r3, [pc, #256]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001ddc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	4b39      	ldr	r3, [pc, #228]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a38      	ldr	r2, [pc, #224]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e0a:	23a0      	movs	r3, #160	@ 0xa0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	482d      	ldr	r0, [pc, #180]	@ (8001edc <HAL_SPI_MspInit+0x12c>)
 8001e26:	f000 fa99 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e2a:	e04f      	b.n	8001ecc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee0 <HAL_SPI_MspInit+0x130>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d14a      	bne.n	8001ecc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a26      	ldr	r2, [pc, #152]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <HAL_SPI_MspInit+0x128>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480f      	ldr	r0, [pc, #60]	@ (8001ee4 <HAL_SPI_MspInit+0x134>)
 8001ea6:	f000 fa59 	bl	800235c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <HAL_SPI_MspInit+0x138>)
 8001ec8:	f000 fa48 	bl	800235c <HAL_GPIO_Init>
}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	@ 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40003800 	.word	0x40003800
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	@ 0x38
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	4a33      	ldr	r2, [pc, #204]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0c:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f18:	f107 0210 	add.w	r2, r7, #16
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f814 	bl	8002f50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f32:	f000 fff9 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8001f36:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f38:	e004      	b.n	8001f44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f3a:	f000 fff5 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f46:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <HAL_InitTick+0xec>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f60:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f62:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f66:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f7a:	4818      	ldr	r0, [pc, #96]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f7c:	f001 fad0 	bl	8003520 <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001f8e:	4813      	ldr	r0, [pc, #76]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001f90:	f001 fb20 	bl	80035d4 <HAL_TIM_Base_Start_IT>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d111      	bne.n	8001fc6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fa2:	201c      	movs	r0, #28
 8001fa4:	f000 f9cc 	bl	8002340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d808      	bhi.n	8001fc0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	201c      	movs	r0, #28
 8001fb4:	f000 f9a8 	bl	8002308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb8:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <HAL_InitTick+0xf4>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e002      	b.n	8001fc6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3738      	adds	r7, #56	@ 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	431bde83 	.word	0x431bde83
 8001fdc:	200001b4 	.word	0x200001b4
 8001fe0:	20000058 	.word	0x20000058

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <TIM2_IRQHandler+0x10>)
 8002022:	f001 fb39 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200001b4 	.word	0x200001b4

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f004 fb54 	bl	800670c <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20020000 	.word	0x20020000
 8002090:	00000400 	.word	0x00000400
 8002094:	200001fc 	.word	0x200001fc
 8002098:	20004d38 	.word	0x20004d38

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c4:	f7ff ffea 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ca:	490d      	ldr	r1, [pc, #52]	@ (8002100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e0:	4c0a      	ldr	r4, [pc, #40]	@ (800210c <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ee:	f004 fb13 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7ff fc6d 	bl	80019d0 <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002104:	08007188 	.word	0x08007188
  ldr r2, =_sbss
 8002108:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800210c:	20004d34 	.word	0x20004d34

08002110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f8d8 	bl	80022f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f7ff fed2 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fe06 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000005c 	.word	0x2000005c
 800217c:	20000200 	.word	0x20000200

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000200 	.word	0x20000200

08002198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b4:	4013      	ands	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ca:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60d3      	str	r3, [r2, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e4:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <__NVIC_GetPriorityGrouping+0x18>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	f003 0307 	and.w	r3, r3, #7
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	db0b      	blt.n	8002226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	4907      	ldr	r1, [pc, #28]	@ (8002234 <__NVIC_EnableIRQ+0x38>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2001      	movs	r0, #1
 800221e:	fa00 f202 	lsl.w	r2, r0, r2
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	@ (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	@ (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	@ 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff4c 	bl	8002198 <__NVIC_SetPriorityGrouping>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231a:	f7ff ff61 	bl	80021e0 <__NVIC_GetPriorityGrouping>
 800231e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f7ff ffb1 	bl	800228c <NVIC_EncodePriority>
 800232a:	4602      	mov	r2, r0
 800232c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ff80 	bl	8002238 <__NVIC_SetPriority>
}
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff54 	bl	80021fc <__NVIC_EnableIRQ>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e159      	b.n	800262c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8148 	bne.w	8002626 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d005      	beq.n	80023ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d130      	bne.n	8002410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d017      	beq.n	800244c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a2 	beq.w	8002626 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <HAL_GPIO_Init+0x2e8>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	4a56      	ldr	r2, [pc, #344]	@ (8002644 <HAL_GPIO_Init+0x2e8>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f2:	4b54      	ldr	r3, [pc, #336]	@ (8002644 <HAL_GPIO_Init+0x2e8>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a52      	ldr	r2, [pc, #328]	@ (8002648 <HAL_GPIO_Init+0x2ec>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a49      	ldr	r2, [pc, #292]	@ (800264c <HAL_GPIO_Init+0x2f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x202>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a48      	ldr	r2, [pc, #288]	@ (8002650 <HAL_GPIO_Init+0x2f4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x1fe>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a47      	ldr	r2, [pc, #284]	@ (8002654 <HAL_GPIO_Init+0x2f8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x1fa>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a46      	ldr	r2, [pc, #280]	@ (8002658 <HAL_GPIO_Init+0x2fc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x1f6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a45      	ldr	r2, [pc, #276]	@ (800265c <HAL_GPIO_Init+0x300>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x1f2>
 800254a:	2304      	movs	r3, #4
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x204>
 800254e:	2307      	movs	r3, #7
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x204>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x204>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x204>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x204>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4935      	ldr	r1, [pc, #212]	@ (8002648 <HAL_GPIO_Init+0x2ec>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_GPIO_Init+0x304>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002660 <HAL_GPIO_Init+0x304>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_GPIO_Init+0x304>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025cc:	4a24      	ldr	r2, [pc, #144]	@ (8002660 <HAL_GPIO_Init+0x304>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025d2:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <HAL_GPIO_Init+0x304>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002660 <HAL_GPIO_Init+0x304>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_GPIO_Init+0x304>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002620:	4a0f      	ldr	r2, [pc, #60]	@ (8002660 <HAL_GPIO_Init+0x304>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f aea2 	bls.w	8002378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3724      	adds	r7, #36	@ 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40013800 	.word	0x40013800
 800264c:	40020000 	.word	0x40020000
 8002650:	40020400 	.word	0x40020400
 8002654:	40020800 	.word	0x40020800
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40021000 	.word	0x40021000
 8002660:	40013c00 	.word	0x40013c00

08002664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b0:	e003      	b.n	80026ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e267      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d075      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00c      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b85      	ldr	r3, [pc, #532]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b7e      	ldr	r3, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05b      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e242      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x74>
 800272e:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b70      	ldr	r3, [pc, #448]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6f      	ldr	r2, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b6d      	ldr	r3, [pc, #436]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6c      	ldr	r2, [pc, #432]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 8002760:	4b69      	ldr	r3, [pc, #420]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a68      	ldr	r2, [pc, #416]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b66      	ldr	r3, [pc, #408]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fcfe 	bl	8002180 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff fcfa 	bl	8002180 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	@ 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e207      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b5b      	ldr	r3, [pc, #364]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xc0>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff fcea 	bl	8002180 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff fce6 	bl	8002180 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1f3      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	4b4a      	ldr	r3, [pc, #296]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b44      	ldr	r3, [pc, #272]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1c7      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b3b      	ldr	r3, [pc, #236]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4937      	ldr	r1, [pc, #220]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b34      	ldr	r3, [pc, #208]	@ (800290c <HAL_RCC_OscConfig+0x244>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff fc9f 	bl	8002180 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff fc9b 	bl	8002180 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1a8      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b28      	ldr	r3, [pc, #160]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4925      	ldr	r1, [pc, #148]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_RCC_OscConfig+0x244>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff fc7e 	bl	8002180 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff fc7a 	bl	8002180 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e187      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d036      	beq.n	8002920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_RCC_OscConfig+0x248>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff fc5e 	bl	8002180 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff fc5a 	bl	8002180 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e167      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <HAL_RCC_OscConfig+0x240>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x200>
 80028e6:	e01b      	b.n	8002920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_OscConfig+0x248>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fc47 	bl	8002180 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e00e      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7ff fc43 	bl	8002180 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d907      	bls.n	8002914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e150      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002908:	40023800 	.word	0x40023800
 800290c:	42470000 	.word	0x42470000
 8002910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	4b88      	ldr	r3, [pc, #544]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ea      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8097 	beq.w	8002a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002932:	4b81      	ldr	r3, [pc, #516]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	4b7d      	ldr	r3, [pc, #500]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	4a7c      	ldr	r2, [pc, #496]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	@ 0x40
 800294e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	4b77      	ldr	r3, [pc, #476]	@ (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296a:	4b74      	ldr	r3, [pc, #464]	@ (8002b3c <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a73      	ldr	r2, [pc, #460]	@ (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002976:	f7ff fc03 	bl	8002180 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7ff fbff 	bl	8002180 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e10c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <HAL_RCC_OscConfig+0x474>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2ea>
 80029a4:	4b64      	ldr	r3, [pc, #400]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a63      	ldr	r2, [pc, #396]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	e01c      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b05      	cmp	r3, #5
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x30c>
 80029ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	4a5e      	ldr	r2, [pc, #376]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0x324>
 80029d4:	4b58      	ldr	r3, [pc, #352]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	4a57      	ldr	r2, [pc, #348]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e0:	4b55      	ldr	r3, [pc, #340]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a54      	ldr	r2, [pc, #336]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d015      	beq.n	8002a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7ff fbc4 	bl	8002180 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7ff fbc0 	bl	8002180 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0cb      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a12:	4b49      	ldr	r3, [pc, #292]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ee      	beq.n	80029fc <HAL_RCC_OscConfig+0x334>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7ff fbae 	bl	8002180 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7ff fbaa 	bl	8002180 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0b5      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b39      	ldr	r3, [pc, #228]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	4a38      	ldr	r2, [pc, #224]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a1 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a66:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d05c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d141      	bne.n	8002afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff fb7e 	bl	8002180 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a88:	f7ff fb7a 	bl	8002180 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e087      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	491b      	ldr	r1, [pc, #108]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fb53 	bl	8002180 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ade:	f7ff fb4f 	bl	8002180 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e05c      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x416>
 8002afc:	e054      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_RCC_OscConfig+0x478>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff fb3c 	bl	8002180 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7ff fb38 	bl	8002180 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e045      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_OscConfig+0x470>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
 8002b2a:	e03d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e038      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d121      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cc      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b68      	ldr	r3, [pc, #416]	@ (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b65      	ldr	r3, [pc, #404]	@ (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	@ (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d044      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b3f      	ldr	r3, [pc, #252]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e067      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b37      	ldr	r3, [pc, #220]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4934      	ldr	r1, [pc, #208]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7ff fa6a 	bl	8002180 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7ff fa66 	bl	8002180 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b25      	ldr	r3, [pc, #148]	@ (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20c      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f821 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff f8c4 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	0800712c 	.word	0x0800712c
 8002d7c:	20000054 	.word	0x20000054
 8002d80:	20000058 	.word	0x20000058

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b090      	sub	sp, #64	@ 0x40
 8002d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d90:	2300      	movs	r3, #0
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9c:	4b59      	ldr	r3, [pc, #356]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	f200 80a1 	bhi.w	8002ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002db6:	e09b      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dba:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002dbc:	e09b      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b53      	ldr	r3, [pc, #332]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dc2:	e098      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dce:	4b4d      	ldr	r3, [pc, #308]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d028      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b4a      	ldr	r3, [pc, #296]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002dec:	2100      	movs	r1, #0
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002df0:	fb03 f201 	mul.w	r2, r3, r1
 8002df4:	2300      	movs	r3, #0
 8002df6:	fb00 f303 	mul.w	r3, r0, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a43      	ldr	r2, [pc, #268]	@ (8002f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8002e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e04:	460a      	mov	r2, r1
 8002e06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0a:	4413      	add	r3, r2
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	2200      	movs	r2, #0
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e1e:	f7fd fa37 	bl	8000290 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4613      	mov	r3, r2
 8002e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e2a:	e053      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2c:	4b35      	ldr	r3, [pc, #212]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	2200      	movs	r2, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	617a      	str	r2, [r7, #20]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e3e:	f04f 0b00 	mov.w	fp, #0
 8002e42:	4652      	mov	r2, sl
 8002e44:	465b      	mov	r3, fp
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e76:	ebb2 0408 	subs.w	r4, r2, r8
 8002e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	00eb      	lsls	r3, r5, #3
 8002e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8c:	00e2      	lsls	r2, r4, #3
 8002e8e:	4614      	mov	r4, r2
 8002e90:	461d      	mov	r5, r3
 8002e92:	eb14 030a 	adds.w	r3, r4, sl
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	eb45 030b 	adc.w	r3, r5, fp
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	60fa      	str	r2, [r7, #12]
 8002ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec8:	f7fd f9e2 	bl	8000290 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3740      	adds	r7, #64	@ 0x40
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	017d7840 	.word	0x017d7840

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	@ (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000054 	.word	0x20000054

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff0 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0a9b      	lsrs	r3, r3, #10
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	@ (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	0800713c 	.word	0x0800713c

08002f50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f84:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	08db      	lsrs	r3, r3, #3
 8002f8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_RCC_GetClockConfig+0x60>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0207 	and.w	r2, r3, #7
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40023c00 	.word	0x40023c00

08002fb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07b      	b.n	80030be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fd6:	d009      	beq.n	8002fec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
 8002fde:	e005      	b.n	8002fec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fed2 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003070:	ea42 0103 	orr.w	r1, r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0104 	and.w	r1, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	f003 0210 	and.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b088      	sub	sp, #32
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_SPI_Transmit+0x22>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e12d      	b.n	8003344 <HAL_SPI_Transmit+0x27e>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f0:	f7ff f846 	bl	8002180 <HAL_GetTick>
 80030f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d002      	beq.n	800310c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
    goto error;
 800310a:	e116      	b.n	800333a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_SPI_Transmit+0x52>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800311c:	e10d      	b.n	800333a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003164:	d10f      	bne.n	8003186 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003174:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003184:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b40      	cmp	r3, #64	@ 0x40
 8003192:	d007      	beq.n	80031a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ac:	d14f      	bne.n	800324e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Transmit+0xf6>
 80031b6:	8afb      	ldrh	r3, [r7, #22]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d142      	bne.n	8003242 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031e0:	e02f      	b.n	8003242 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d112      	bne.n	8003216 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003214:	e015      	b.n	8003242 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003216:	f7fe ffb3 	bl	8002180 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d803      	bhi.n	800322e <HAL_SPI_Transmit+0x168>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d102      	bne.n	8003234 <HAL_SPI_Transmit+0x16e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003240:	e07b      	b.n	800333a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ca      	bne.n	80031e2 <HAL_SPI_Transmit+0x11c>
 800324c:	e050      	b.n	80032f0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0x196>
 8003256:	8afb      	ldrh	r3, [r7, #22]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d144      	bne.n	80032e6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003282:	e030      	b.n	80032e6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d113      	bne.n	80032ba <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032b8:	e015      	b.n	80032e6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ba:	f7fe ff61 	bl	8002180 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d803      	bhi.n	80032d2 <HAL_SPI_Transmit+0x20c>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d102      	bne.n	80032d8 <HAL_SPI_Transmit+0x212>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80032e4:	e029      	b.n	800333a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1c9      	bne.n	8003284 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	6839      	ldr	r1, [r7, #0]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8bf 	bl	8003478 <SPI_EndRxTxTransaction>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e003      	b.n	800333a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003342:	7ffb      	ldrb	r3, [r7, #31]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800335a:	b2db      	uxtb	r3, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003378:	f7fe ff02 	bl	8002180 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4413      	add	r3, r2
 8003386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003388:	f7fe fefa 	bl	8002180 <HAL_GetTick>
 800338c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	0d1b      	lsrs	r3, r3, #20
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800339e:	e054      	b.n	800344a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d050      	beq.n	800344a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a8:	f7fe feea 	bl	8002180 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d902      	bls.n	80033be <SPI_WaitFlagStateUntilTimeout+0x56>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d13d      	bne.n	800343a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d6:	d111      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e0:	d004      	beq.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ea:	d107      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003404:	d10f      	bne.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e017      	b.n	800346a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3b01      	subs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d19b      	bne.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000054 	.word	0x20000054

08003478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2201      	movs	r2, #1
 800348c:	2102      	movs	r1, #2
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff ff6a 	bl	8003368 <SPI_WaitFlagStateUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e032      	b.n	8003510 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <SPI_EndRxTxTransaction+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1b      	ldr	r2, [pc, #108]	@ (800351c <SPI_EndRxTxTransaction+0xa4>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0d5b      	lsrs	r3, r3, #21
 80034b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034c8:	d112      	bne.n	80034f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	@ 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff47 	bl	8003368 <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d016      	beq.n	800350e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e00f      	b.n	8003510 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003506:	2b80      	cmp	r3, #128	@ 0x80
 8003508:	d0f2      	beq.n	80034f0 <SPI_EndRxTxTransaction+0x78>
 800350a:	e000      	b.n	800350e <SPI_EndRxTxTransaction+0x96>
        break;
 800350c:	bf00      	nop
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000054 	.word	0x20000054
 800351c:	165e9f81 	.word	0x165e9f81

08003520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e041      	b.n	80035b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f839 	bl	80035be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f9b2 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d001      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e044      	b.n	8003676 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1e      	ldr	r2, [pc, #120]	@ (8003684 <HAL_TIM_Base_Start_IT+0xb0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d018      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x6c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d013      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x6c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <HAL_TIM_Base_Start_IT+0xb4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00e      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x6c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a19      	ldr	r2, [pc, #100]	@ (800368c <HAL_TIM_Base_Start_IT+0xb8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x6c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_TIM_Base_Start_IT+0xbc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x6c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a16      	ldr	r2, [pc, #88]	@ (8003694 <HAL_TIM_Base_Start_IT+0xc0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d111      	bne.n	8003664 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b06      	cmp	r3, #6
 8003650:	d010      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	e007      	b.n	8003674 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40014000 	.word	0x40014000

08003698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0202 	mvn.w	r2, #2
 80036cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8d2 	bl	800388c <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8c4 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8d5 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d020      	beq.n	8003748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0204 	mvn.w	r2, #4
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8ac 	bl	800388c <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f89e 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8af 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d020      	beq.n	8003794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0208 	mvn.w	r2, #8
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f886 	bl	800388c <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f878 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f889 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01b      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0210 	mvn.w	r2, #16
 80037b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2208      	movs	r2, #8
 80037b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f860 	bl	800388c <HAL_TIM_IC_CaptureCallback>
 80037cc:	e005      	b.n	80037da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f852 	bl	8003878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f863 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0201 	mvn.w	r2, #1
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fa95 	bl	8001d2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8e6 	bl	80039f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f834 	bl	80038b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0220 	mvn.w	r2, #32
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8b8 	bl	80039e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a3a      	ldr	r2, [pc, #232]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a37      	ldr	r2, [pc, #220]	@ (80039c8 <TIM_Base_SetConfig+0x100>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a36      	ldr	r2, [pc, #216]	@ (80039cc <TIM_Base_SetConfig+0x104>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a35      	ldr	r2, [pc, #212]	@ (80039d0 <TIM_Base_SetConfig+0x108>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <TIM_Base_SetConfig+0x100>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a27      	ldr	r2, [pc, #156]	@ (80039cc <TIM_Base_SetConfig+0x104>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <TIM_Base_SetConfig+0x108>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <TIM_Base_SetConfig+0x10c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <TIM_Base_SetConfig+0x110>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a23      	ldr	r2, [pc, #140]	@ (80039dc <TIM_Base_SetConfig+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <TIM_Base_SetConfig+0xfc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	611a      	str	r2, [r3, #16]
  }
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <__NVIC_SetPriority>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db0a      	blt.n	8003a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	490c      	ldr	r1, [pc, #48]	@ (8003a54 <__NVIC_SetPriority+0x4c>)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	0112      	lsls	r2, r2, #4
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a30:	e00a      	b.n	8003a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	4908      	ldr	r1, [pc, #32]	@ (8003a58 <__NVIC_SetPriority+0x50>)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	3b04      	subs	r3, #4
 8003a40:	0112      	lsls	r2, r2, #4
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	440b      	add	r3, r1
 8003a46:	761a      	strb	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000e100 	.word	0xe000e100
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <SysTick_Handler+0x1c>)
 8003a62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a64:	f001 fd46 	bl	80054f4 <xTaskGetSchedulerState>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a6e:	f002 fb3b 	bl	80060e8 <xPortSysTickHandler>
  }
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	e000e010 	.word	0xe000e010

08003a7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a80:	2100      	movs	r1, #0
 8003a82:	f06f 0004 	mvn.w	r0, #4
 8003a86:	f7ff ffbf 	bl	8003a08 <__NVIC_SetPriority>
#endif
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a96:	f3ef 8305 	mrs	r3, IPSR
 8003a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003aa2:	f06f 0305 	mvn.w	r3, #5
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	e00c      	b.n	8003ac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <osKernelInitialize+0x44>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ab2:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <osKernelInitialize+0x44>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e002      	b.n	8003ac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ac4:	687b      	ldr	r3, [r7, #4]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	20000204 	.word	0x20000204

08003ad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ade:	f3ef 8305 	mrs	r3, IPSR
 8003ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003aea:	f06f 0305 	mvn.w	r3, #5
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	e010      	b.n	8003b14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <osKernelStart+0x48>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d109      	bne.n	8003b0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003afa:	f7ff ffbf 	bl	8003a7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <osKernelStart+0x48>)
 8003b00:	2202      	movs	r2, #2
 8003b02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b04:	f001 f892 	bl	8004c2c <vTaskStartScheduler>
      stat = osOK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	e002      	b.n	8003b14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b14:	687b      	ldr	r3, [r7, #4]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000204 	.word	0x20000204

08003b24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	@ 0x38
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b34:	f3ef 8305 	mrs	r3, IPSR
 8003b38:	617b      	str	r3, [r7, #20]
  return(result);
 8003b3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d17e      	bne.n	8003c3e <osThreadNew+0x11a>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d07b      	beq.n	8003c3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b4a:	2318      	movs	r3, #24
 8003b4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d045      	beq.n	8003bea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <osThreadNew+0x48>
        name = attr->name;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <osThreadNew+0x6e>
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b38      	cmp	r3, #56	@ 0x38
 8003b84:	d805      	bhi.n	8003b92 <osThreadNew+0x6e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <osThreadNew+0x72>
        return (NULL);
 8003b92:	2300      	movs	r3, #0
 8003b94:	e054      	b.n	8003c40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <osThreadNew+0xa8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003bb4:	d90a      	bls.n	8003bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d006      	beq.n	8003bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <osThreadNew+0xa8>
        mem = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e010      	b.n	8003bee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <osThreadNew+0xca>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <osThreadNew+0xca>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <osThreadNew+0xca>
          mem = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	e001      	b.n	8003bee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d110      	bne.n	8003c16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bfc:	9202      	str	r2, [sp, #8]
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fe1a 	bl	8004844 <xTaskCreateStatic>
 8003c10:	4603      	mov	r3, r0
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e013      	b.n	8003c3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d110      	bne.n	8003c3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	f107 0310 	add.w	r3, r7, #16
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fe68 	bl	8004904 <xTaskCreate>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d001      	beq.n	8003c3e <osThreadNew+0x11a>
            hTask = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c3e:	693b      	ldr	r3, [r7, #16]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3728      	adds	r7, #40	@ 0x28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c50:	f3ef 8305 	mrs	r3, IPSR
 8003c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <osDelay+0x1c>
    stat = osErrorISR;
 8003c5c:	f06f 0305 	mvn.w	r3, #5
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e007      	b.n	8003c74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 ffa6 	bl	8004bc0 <vTaskDelay>
    }
  }

  return (stat);
 8003c74:	68fb      	ldr	r3, [r7, #12]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a07      	ldr	r2, [pc, #28]	@ (8003cac <vApplicationGetIdleTaskMemory+0x2c>)
 8003c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4a06      	ldr	r2, [pc, #24]	@ (8003cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8003c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	@ 0x80
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000208 	.word	0x20000208
 8003cb0:	200002b0 	.word	0x200002b0

08003cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a07      	ldr	r2, [pc, #28]	@ (8003ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a06      	ldr	r2, [pc, #24]	@ (8003ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8003cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cd2:	601a      	str	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	200004b0 	.word	0x200004b0
 8003ce4:	20000558 	.word	0x20000558

08003ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f103 0208 	add.w	r2, r3, #8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f103 0208 	add.w	r2, r3, #8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 0208 	add.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b085      	sub	sp, #20
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d103      	bne.n	8003daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e00c      	b.n	8003dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3308      	adds	r3, #8
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e002      	b.n	8003db8 <vListInsert+0x2e>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d2f6      	bcs.n	8003db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6892      	ldr	r2, [r2, #8]
 8003e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6852      	ldr	r2, [r2, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d103      	bne.n	8003e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e7c:	f002 f8a4 	bl	8005fc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	441a      	add	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	3b01      	subs	r3, #1
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	22ff      	movs	r2, #255	@ 0xff
 8003ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	22ff      	movs	r2, #255	@ 0xff
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01a      	beq.n	8003f10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3310      	adds	r3, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f942 	bl	8005168 <xTaskRemoveFromEventList>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d012      	beq.n	8003f10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <xQueueGenericReset+0xd0>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	e009      	b.n	8003f10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3310      	adds	r3, #16
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fef1 	bl	8003ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3324      	adds	r3, #36	@ 0x24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff feec 	bl	8003ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f10:	f002 f88c 	bl	800602c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08e      	sub	sp, #56	@ 0x38
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <xQueueGenericCreateStatic+0x56>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <xQueueGenericCreateStatic+0x5a>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <xQueueGenericCreateStatic+0x5c>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	623b      	str	r3, [r7, #32]
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <xQueueGenericCreateStatic+0x84>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <xQueueGenericCreateStatic+0x88>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <xQueueGenericCreateStatic+0x8a>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61fb      	str	r3, [r7, #28]
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	e7fd      	b.n	8003fc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fca:	2350      	movs	r3, #80	@ 0x50
 8003fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b50      	cmp	r3, #80	@ 0x50
 8003fd2:	d00b      	beq.n	8003fec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	61bb      	str	r3, [r7, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004000:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f805 	bl	800401e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004016:	4618      	mov	r0, r3
 8004018:	3730      	adds	r7, #48	@ 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e002      	b.n	8004040 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800404c:	2101      	movs	r1, #1
 800404e:	69b8      	ldr	r0, [r7, #24]
 8004050:	f7ff fefe 	bl	8003e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08e      	sub	sp, #56	@ 0x38
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <xQueueGenericSend+0x34>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <xQueueGenericSend+0x42>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <xQueueGenericSend+0x46>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <xQueueGenericSend+0x48>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <xQueueGenericSend+0x64>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d103      	bne.n	80040d6 <xQueueGenericSend+0x72>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <xQueueGenericSend+0x76>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueGenericSend+0x78>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <xQueueGenericSend+0x94>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	623b      	str	r3, [r7, #32]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f8:	f001 f9fc 	bl	80054f4 <xTaskGetSchedulerState>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <xQueueGenericSend+0xa4>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <xQueueGenericSend+0xa8>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <xQueueGenericSend+0xaa>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <xQueueGenericSend+0xc6>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	61fb      	str	r3, [r7, #28]
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800412a:	f001 ff4d 	bl	8005fc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <xQueueGenericSend+0xdc>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d129      	bne.n	8004194 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004146:	f000 fa0f 	bl	8004568 <prvCopyDataToQueue>
 800414a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	3324      	adds	r3, #36	@ 0x24
 8004158:	4618      	mov	r0, r3
 800415a:	f001 f805 	bl	8005168 <xTaskRemoveFromEventList>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004164:	4b3f      	ldr	r3, [pc, #252]	@ (8004264 <xQueueGenericSend+0x200>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	e00a      	b.n	800418c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b39      	ldr	r3, [pc, #228]	@ (8004264 <xQueueGenericSend+0x200>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800418c:	f001 ff4e 	bl	800602c <vPortExitCritical>
				return pdPASS;
 8004190:	2301      	movs	r3, #1
 8004192:	e063      	b.n	800425c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800419a:	f001 ff47 	bl	800602c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	e05c      	b.n	800425c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 f83f 	bl	8005230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041b6:	f001 ff39 	bl	800602c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ba:	f000 fda7 	bl	8004d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041be:	f001 ff03 	bl	8005fc8 <vPortEnterCritical>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d103      	bne.n	80041d8 <xQueueGenericSend+0x174>
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x18a>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041ee:	f001 ff1d 	bl	800602c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041f2:	1d3a      	adds	r2, r7, #4
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f82e 	bl	800525c <xTaskCheckForTimeOut>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d124      	bne.n	8004250 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004208:	f000 faa6 	bl	8004758 <prvIsQueueFull>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	3310      	adds	r3, #16
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 ff52 	bl	80050c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004222:	f000 fa31 	bl	8004688 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004226:	f000 fd7f 	bl	8004d28 <xTaskResumeAll>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af7c 	bne.w	800412a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004232:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <xQueueGenericSend+0x200>)
 8004234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	e772      	b.n	800412a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004246:	f000 fa1f 	bl	8004688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800424a:	f000 fd6d 	bl	8004d28 <xTaskResumeAll>
 800424e:	e76c      	b.n	800412a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004252:	f000 fa19 	bl	8004688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004256:	f000 fd67 	bl	8004d28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800425a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800425c:	4618      	mov	r0, r3
 800425e:	3738      	adds	r7, #56	@ 0x38
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	@ 0x40
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <xQueueGenericSendFromISR+0x3e>
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xQueueGenericSendFromISR+0x42>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueGenericSendFromISR+0x44>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d103      	bne.n	80042d6 <xQueueGenericSendFromISR+0x6e>
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <xQueueGenericSendFromISR+0x72>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <xQueueGenericSendFromISR+0x74>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	623b      	str	r3, [r7, #32]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042f8:	f001 ff46 	bl	8006188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042fc:	f3ef 8211 	mrs	r2, BASEPRI
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61fa      	str	r2, [r7, #28]
 8004312:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004314:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <xQueueGenericSendFromISR+0xc2>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d12f      	bne.n	800438a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004340:	f000 f912 	bl	8004568 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004344:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d112      	bne.n	8004374 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	3324      	adds	r3, #36	@ 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f000 ff04 	bl	8005168 <xTaskRemoveFromEventList>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e007      	b.n	8004384 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004374:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004378:	3301      	adds	r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	b25a      	sxtb	r2, r3
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004384:	2301      	movs	r3, #1
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004388:	e001      	b.n	800438e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800438a:	2300      	movs	r3, #0
 800438c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800438e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004390:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800439a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	@ 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08c      	sub	sp, #48	@ 0x30
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <xQueueReceive+0x32>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	623b      	str	r3, [r7, #32]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <xQueueReceive+0x40>
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <xQueueReceive+0x44>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <xQueueReceive+0x46>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <xQueueReceive+0x62>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	61fb      	str	r3, [r7, #28]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004406:	f001 f875 	bl	80054f4 <xTaskGetSchedulerState>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xQueueReceive+0x72>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <xQueueReceive+0x76>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueReceive+0x78>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <xQueueReceive+0x94>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	61bb      	str	r3, [r7, #24]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004438:	f001 fdc6 	bl	8005fc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01f      	beq.n	8004488 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800444c:	f000 f8f6 	bl	800463c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00f      	beq.n	8004480 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	3310      	adds	r3, #16
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fe7f 	bl	8005168 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004470:	4b3c      	ldr	r3, [pc, #240]	@ (8004564 <xQueueReceive+0x1c0>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004480:	f001 fdd4 	bl	800602c <vPortExitCritical>
				return pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	e069      	b.n	800455c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800448e:	f001 fdcd 	bl	800602c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004492:	2300      	movs	r3, #0
 8004494:	e062      	b.n	800455c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800449c:	f107 0310 	add.w	r3, r7, #16
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fec5 	bl	8005230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044aa:	f001 fdbf 	bl	800602c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ae:	f000 fc2d 	bl	8004d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044b2:	f001 fd89 	bl	8005fc8 <vPortEnterCritical>
 80044b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <xQueueReceive+0x128>
 80044c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <xQueueReceive+0x13e>
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e2:	f001 fda3 	bl	800602c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e6:	1d3a      	adds	r2, r7, #4
 80044e8:	f107 0310 	add.w	r3, r7, #16
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 feb4 	bl	800525c <xTaskCheckForTimeOut>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d123      	bne.n	8004542 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044fc:	f000 f916 	bl	800472c <prvIsQueueEmpty>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	3324      	adds	r3, #36	@ 0x24
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fdd8 	bl	80050c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004516:	f000 f8b7 	bl	8004688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800451a:	f000 fc05 	bl	8004d28 <xTaskResumeAll>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d189      	bne.n	8004438 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <xQueueReceive+0x1c0>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	e780      	b.n	8004438 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004538:	f000 f8a6 	bl	8004688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800453c:	f000 fbf4 	bl	8004d28 <xTaskResumeAll>
 8004540:	e77a      	b.n	8004438 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004544:	f000 f8a0 	bl	8004688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004548:	f000 fbee 	bl	8004d28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800454c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800454e:	f000 f8ed 	bl	800472c <prvIsQueueEmpty>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	f43f af6f 	beq.w	8004438 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800455a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800455c:	4618      	mov	r0, r3
 800455e:	3730      	adds	r7, #48	@ 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d14d      	bne.n	800462a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 ffcc 	bl	8005530 <xTaskPriorityDisinherit>
 8004598:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	e043      	b.n	800462a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d119      	bne.n	80045dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6858      	ldr	r0, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	461a      	mov	r2, r3
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	f002 f8d6 	bl	8006764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d32b      	bcc.n	800462a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	e026      	b.n	800462a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68d8      	ldr	r0, [r3, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	461a      	mov	r2, r3
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	f002 f8bc 	bl	8006764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	425b      	negs	r3, r3
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d207      	bcs.n	8004618 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	425b      	negs	r3, r3
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d105      	bne.n	800462a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3b01      	subs	r3, #1
 8004628:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004632:	697b      	ldr	r3, [r7, #20]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d018      	beq.n	8004680 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	441a      	add	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d303      	bcc.n	8004670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68d9      	ldr	r1, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	461a      	mov	r2, r3
 800467a:	6838      	ldr	r0, [r7, #0]
 800467c:	f002 f872 	bl	8006764 <memcpy>
	}
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004690:	f001 fc9a 	bl	8005fc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800469a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800469c:	e011      	b.n	80046c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d012      	beq.n	80046cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3324      	adds	r3, #36	@ 0x24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fd5c 	bl	8005168 <xTaskRemoveFromEventList>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046b6:	f000 fe35 	bl	8005324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	3b01      	subs	r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dce9      	bgt.n	800469e <prvUnlockQueue+0x16>
 80046ca:	e000      	b.n	80046ce <prvUnlockQueue+0x46>
					break;
 80046cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	22ff      	movs	r2, #255	@ 0xff
 80046d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80046d6:	f001 fca9 	bl	800602c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046da:	f001 fc75 	bl	8005fc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046e6:	e011      	b.n	800470c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3310      	adds	r3, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fd37 	bl	8005168 <xTaskRemoveFromEventList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004700:	f000 fe10 	bl	8005324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	3b01      	subs	r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800470c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004710:	2b00      	cmp	r3, #0
 8004712:	dce9      	bgt.n	80046e8 <prvUnlockQueue+0x60>
 8004714:	e000      	b.n	8004718 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004716:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	22ff      	movs	r2, #255	@ 0xff
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004720:	f001 fc84 	bl	800602c <vPortExitCritical>
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004734:	f001 fc48 	bl	8005fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004740:	2301      	movs	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	e001      	b.n	800474a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800474a:	f001 fc6f 	bl	800602c <vPortExitCritical>

	return xReturn;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004760:	f001 fc32 	bl	8005fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	429a      	cmp	r2, r3
 800476e:	d102      	bne.n	8004776 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e001      	b.n	800477a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800477a:	f001 fc57 	bl	800602c <vPortExitCritical>

	return xReturn;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e014      	b.n	80047c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004798:	4a0f      	ldr	r2, [pc, #60]	@ (80047d8 <vQueueAddToRegistry+0x50>)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047a4:	490c      	ldr	r1, [pc, #48]	@ (80047d8 <vQueueAddToRegistry+0x50>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047ae:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <vQueueAddToRegistry+0x50>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047ba:	e006      	b.n	80047ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b07      	cmp	r3, #7
 80047c6:	d9e7      	bls.n	8004798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000958 	.word	0x20000958

080047dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047ec:	f001 fbec 	bl	8005fc8 <vPortEnterCritical>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047f6:	b25b      	sxtb	r3, r3
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d103      	bne.n	8004806 <vQueueWaitForMessageRestricted+0x2a>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800480c:	b25b      	sxtb	r3, r3
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d103      	bne.n	800481c <vQueueWaitForMessageRestricted+0x40>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800481c:	f001 fc06 	bl	800602c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	3324      	adds	r3, #36	@ 0x24
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fc6d 	bl	8005110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f7ff ff26 	bl	8004688 <prvUnlockQueue>
	}
 800483c:	bf00      	nop
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08e      	sub	sp, #56	@ 0x38
 8004848:	af04      	add	r7, sp, #16
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	623b      	str	r3, [r7, #32]
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	61fb      	str	r3, [r7, #28]
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	e7fd      	b.n	800488a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800488e:	23a8      	movs	r3, #168	@ 0xa8
 8004890:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2ba8      	cmp	r3, #168	@ 0xa8
 8004896:	d00b      	beq.n	80048b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	61bb      	str	r3, [r7, #24]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01e      	beq.n	80048f6 <xTaskCreateStatic+0xb2>
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01b      	beq.n	80048f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048d0:	2300      	movs	r3, #0
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	9302      	str	r3, [sp, #8]
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f851 	bl	8004990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048f0:	f000 f8f6 	bl	8004ae0 <prvAddNewTaskToReadyList>
 80048f4:	e001      	b.n	80048fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048fa:	697b      	ldr	r3, [r7, #20]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3728      	adds	r7, #40	@ 0x28
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	@ 0x30
 8004908:	af04      	add	r7, sp, #16
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fc77 	bl	800620c <pvPortMalloc>
 800491e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00e      	beq.n	8004944 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004926:	20a8      	movs	r0, #168	@ 0xa8
 8004928:	f001 fc70 	bl	800620c <pvPortMalloc>
 800492c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	631a      	str	r2, [r3, #48]	@ 0x30
 800493a:	e005      	b.n	8004948 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800493c:	6978      	ldr	r0, [r7, #20]
 800493e:	f001 fd33 	bl	80063a8 <vPortFree>
 8004942:	e001      	b.n	8004948 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d017      	beq.n	800497e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	2300      	movs	r3, #0
 800495a:	9303      	str	r3, [sp, #12]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	9302      	str	r3, [sp, #8]
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f80f 	bl	8004990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004972:	69f8      	ldr	r0, [r7, #28]
 8004974:	f000 f8b4 	bl	8004ae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004978:	2301      	movs	r3, #1
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e002      	b.n	8004984 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004984:	69bb      	ldr	r3, [r7, #24]
	}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	461a      	mov	r2, r3
 80049a8:	21a5      	movs	r1, #165	@ 0xa5
 80049aa:	f001 fe51 	bl	8006650 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049b8:	3b01      	subs	r3, #1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f023 0307 	bic.w	r3, r3, #7
 80049c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	617b      	str	r3, [r7, #20]
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	e7fd      	b.n	80049e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01f      	beq.n	8004a30 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	e012      	b.n	8004a1c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	7819      	ldrb	r1, [r3, #0]
 80049fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	3334      	adds	r3, #52	@ 0x34
 8004a06:	460a      	mov	r2, r1
 8004a08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d006      	beq.n	8004a24 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d9e9      	bls.n	80049f6 <prvInitialiseNewTask+0x66>
 8004a22:	e000      	b.n	8004a26 <prvInitialiseNewTask+0x96>
			{
				break;
 8004a24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a2e:	e003      	b.n	8004a38 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b37      	cmp	r3, #55	@ 0x37
 8004a3c:	d901      	bls.n	8004a42 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a3e:	2337      	movs	r3, #55	@ 0x37
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a50:	2200      	movs	r2, #0
 8004a52:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	3304      	adds	r3, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff f965 	bl	8003d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	3318      	adds	r3, #24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff f960 	bl	8003d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	3354      	adds	r3, #84	@ 0x54
 8004a92:	224c      	movs	r2, #76	@ 0x4c
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fdda 	bl	8006650 <memset>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad4 <prvInitialiseNewTask+0x144>)
 8004aa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad8 <prvInitialiseNewTask+0x148>)
 8004aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8004adc <prvInitialiseNewTask+0x14c>)
 8004aac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	69b8      	ldr	r0, [r7, #24]
 8004ab4:	f001 f95a 	bl	8005d6c <pxPortInitialiseStack>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aca:	bf00      	nop
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20004bec 	.word	0x20004bec
 8004ad8:	20004c54 	.word	0x20004c54
 8004adc:	20004cbc 	.word	0x20004cbc

08004ae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ae8:	f001 fa6e 	bl	8005fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004aec:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004af4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004af6:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004afe:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b04:	4b27      	ldr	r3, [pc, #156]	@ (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d110      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b0c:	f000 fc2e 	bl	800536c <prvInitialiseTaskLists>
 8004b10:	e00d      	b.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b12:	4b26      	ldr	r3, [pc, #152]	@ (8004bac <prvAddNewTaskToReadyList+0xcc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d802      	bhi.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b2e:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <prvAddNewTaskToReadyList+0xd4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d903      	bls.n	8004b54 <prvAddNewTaskToReadyList+0x74>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <prvAddNewTaskToReadyList+0xd4>)
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4a15      	ldr	r2, [pc, #84]	@ (8004bb8 <prvAddNewTaskToReadyList+0xd8>)
 8004b62:	441a      	add	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7ff f8e9 	bl	8003d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b70:	f001 fa5c 	bl	800602c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b74:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <prvAddNewTaskToReadyList+0xcc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d207      	bcs.n	8004b9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <prvAddNewTaskToReadyList+0xdc>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000e6c 	.word	0x20000e6c
 8004ba8:	20000998 	.word	0x20000998
 8004bac:	20000e78 	.word	0x20000e78
 8004bb0:	20000e88 	.word	0x20000e88
 8004bb4:	20000e74 	.word	0x20000e74
 8004bb8:	2000099c 	.word	0x2000099c
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d018      	beq.n	8004c04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bd2:	4b14      	ldr	r3, [pc, #80]	@ (8004c24 <vTaskDelay+0x64>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <vTaskDelay+0x32>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60bb      	str	r3, [r7, #8]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bf2:	f000 f88b 	bl	8004d0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fd09 	bl	8005610 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bfe:	f000 f893 	bl	8004d28 <xTaskResumeAll>
 8004c02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c0a:	4b07      	ldr	r3, [pc, #28]	@ (8004c28 <vTaskDelay+0x68>)
 8004c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000e94 	.word	0x20000e94
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	@ 0x28
 8004c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c3a:	463a      	mov	r2, r7
 8004c3c:	1d39      	adds	r1, r7, #4
 8004c3e:	f107 0308 	add.w	r3, r7, #8
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff f81c 	bl	8003c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	9202      	str	r2, [sp, #8]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	2300      	movs	r3, #0
 8004c58:	460a      	mov	r2, r1
 8004c5a:	4924      	ldr	r1, [pc, #144]	@ (8004cec <vTaskStartScheduler+0xc0>)
 8004c5c:	4824      	ldr	r0, [pc, #144]	@ (8004cf0 <vTaskStartScheduler+0xc4>)
 8004c5e:	f7ff fdf1 	bl	8004844 <xTaskCreateStatic>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4a23      	ldr	r2, [pc, #140]	@ (8004cf4 <vTaskStartScheduler+0xc8>)
 8004c66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c68:	4b22      	ldr	r3, [pc, #136]	@ (8004cf4 <vTaskStartScheduler+0xc8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e001      	b.n	8004c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c80:	f000 fd1a 	bl	80056b8 <xTimerCreateTimerTask>
 8004c84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d11b      	bne.n	8004cc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	613b      	str	r3, [r7, #16]
}
 8004c9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ca0:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <vTaskStartScheduler+0xcc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3354      	adds	r3, #84	@ 0x54
 8004ca6:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <vTaskStartScheduler+0xd0>)
 8004ca8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <vTaskStartScheduler+0xd4>)
 8004cac:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cb2:	4b14      	ldr	r3, [pc, #80]	@ (8004d04 <vTaskStartScheduler+0xd8>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <vTaskStartScheduler+0xdc>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cbe:	f001 f8df 	bl	8005e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cc2:	e00f      	b.n	8004ce4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d10b      	bne.n	8004ce4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60fb      	str	r3, [r7, #12]
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <vTaskStartScheduler+0xb4>
}
 8004ce4:	bf00      	nop
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	080070cc 	.word	0x080070cc
 8004cf0:	0800533d 	.word	0x0800533d
 8004cf4:	20000e90 	.word	0x20000e90
 8004cf8:	20000998 	.word	0x20000998
 8004cfc:	20000064 	.word	0x20000064
 8004d00:	20000e8c 	.word	0x20000e8c
 8004d04:	20000e78 	.word	0x20000e78
 8004d08:	20000e70 	.word	0x20000e70

08004d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d10:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <vTaskSuspendAll+0x18>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3301      	adds	r3, #1
 8004d16:	4a03      	ldr	r2, [pc, #12]	@ (8004d24 <vTaskSuspendAll+0x18>)
 8004d18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	20000e94 	.word	0x20000e94

08004d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d36:	4b42      	ldr	r3, [pc, #264]	@ (8004e40 <xTaskResumeAll+0x118>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <xTaskResumeAll+0x2e>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d56:	f001 f937 	bl	8005fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d5a:	4b39      	ldr	r3, [pc, #228]	@ (8004e40 <xTaskResumeAll+0x118>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4a37      	ldr	r2, [pc, #220]	@ (8004e40 <xTaskResumeAll+0x118>)
 8004d62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d64:	4b36      	ldr	r3, [pc, #216]	@ (8004e40 <xTaskResumeAll+0x118>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d162      	bne.n	8004e32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d6c:	4b35      	ldr	r3, [pc, #212]	@ (8004e44 <xTaskResumeAll+0x11c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05e      	beq.n	8004e32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d74:	e02f      	b.n	8004dd6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d76:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <xTaskResumeAll+0x120>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3318      	adds	r3, #24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff f83a 	bl	8003dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff f835 	bl	8003dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d96:	4b2d      	ldr	r3, [pc, #180]	@ (8004e4c <xTaskResumeAll+0x124>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <xTaskResumeAll+0x7e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e4c <xTaskResumeAll+0x124>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4a27      	ldr	r2, [pc, #156]	@ (8004e50 <xTaskResumeAll+0x128>)
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7fe ffc0 	bl	8003d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <xTaskResumeAll+0x12c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d302      	bcc.n	8004dd6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004dd0:	4b21      	ldr	r3, [pc, #132]	@ (8004e58 <xTaskResumeAll+0x130>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e48 <xTaskResumeAll+0x120>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1cb      	bne.n	8004d76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004de4:	f000 fb66 	bl	80054b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004de8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e5c <xTaskResumeAll+0x134>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004df4:	f000 f846 	bl	8004e84 <xTaskIncrementTick>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004dfe:	4b16      	ldr	r3, [pc, #88]	@ (8004e58 <xTaskResumeAll+0x130>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f1      	bne.n	8004df4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004e10:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <xTaskResumeAll+0x134>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <xTaskResumeAll+0x130>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e22:	4b0f      	ldr	r3, [pc, #60]	@ (8004e60 <xTaskResumeAll+0x138>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e32:	f001 f8fb 	bl	800602c <vPortExitCritical>

	return xAlreadyYielded;
 8004e36:	68bb      	ldr	r3, [r7, #8]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000e94 	.word	0x20000e94
 8004e44:	20000e6c 	.word	0x20000e6c
 8004e48:	20000e2c 	.word	0x20000e2c
 8004e4c:	20000e74 	.word	0x20000e74
 8004e50:	2000099c 	.word	0x2000099c
 8004e54:	20000998 	.word	0x20000998
 8004e58:	20000e80 	.word	0x20000e80
 8004e5c:	20000e7c 	.word	0x20000e7c
 8004e60:	e000ed04 	.word	0xe000ed04

08004e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e6a:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <xTaskGetTickCount+0x1c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e70:	687b      	ldr	r3, [r7, #4]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000e70 	.word	0x20000e70

08004e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <xTaskIncrementTick+0x148>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 8090 	bne.w	8004fb8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e98:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd0 <xTaskIncrementTick+0x14c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8004fd0 <xTaskIncrementTick+0x14c>)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d121      	bne.n	8004ef0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004eac:	4b49      	ldr	r3, [pc, #292]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <xTaskIncrementTick+0x4a>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	603b      	str	r3, [r7, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <xTaskIncrementTick+0x46>
 8004ece:	4b41      	ldr	r3, [pc, #260]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	4b40      	ldr	r3, [pc, #256]	@ (8004fd8 <xTaskIncrementTick+0x154>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd8 <xTaskIncrementTick+0x154>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <xTaskIncrementTick+0x158>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fdc <xTaskIncrementTick+0x158>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	f000 fae2 	bl	80054b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <xTaskIncrementTick+0x15c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d349      	bcc.n	8004f8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004efa:	4b36      	ldr	r3, [pc, #216]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <xTaskIncrementTick+0x15c>)
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	601a      	str	r2, [r3, #0]
					break;
 8004f0c:	e03f      	b.n	8004f8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0e:	4b31      	ldr	r3, [pc, #196]	@ (8004fd4 <xTaskIncrementTick+0x150>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d203      	bcs.n	8004f2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f26:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe0 <xTaskIncrementTick+0x15c>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f2c:	e02f      	b.n	8004f8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe ff62 	bl	8003dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3318      	adds	r3, #24
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe ff59 	bl	8003dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4e:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <xTaskIncrementTick+0x160>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d903      	bls.n	8004f5e <xTaskIncrementTick+0xda>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <xTaskIncrementTick+0x160>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe8 <xTaskIncrementTick+0x164>)
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe fee4 	bl	8003d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <xTaskIncrementTick+0x168>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b8      	bcc.n	8004efa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8c:	e7b5      	b.n	8004efa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f8e:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <xTaskIncrementTick+0x168>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f94:	4914      	ldr	r1, [pc, #80]	@ (8004fe8 <xTaskIncrementTick+0x164>)
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d901      	bls.n	8004faa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004faa:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <xTaskIncrementTick+0x16c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e004      	b.n	8004fc2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff4 <xTaskIncrementTick+0x170>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff4 <xTaskIncrementTick+0x170>)
 8004fc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000e94 	.word	0x20000e94
 8004fd0:	20000e70 	.word	0x20000e70
 8004fd4:	20000e24 	.word	0x20000e24
 8004fd8:	20000e28 	.word	0x20000e28
 8004fdc:	20000e84 	.word	0x20000e84
 8004fe0:	20000e8c 	.word	0x20000e8c
 8004fe4:	20000e74 	.word	0x20000e74
 8004fe8:	2000099c 	.word	0x2000099c
 8004fec:	20000998 	.word	0x20000998
 8004ff0:	20000e80 	.word	0x20000e80
 8004ff4:	20000e7c 	.word	0x20000e7c

08004ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80050ac <vTaskSwitchContext+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005006:	4b2a      	ldr	r3, [pc, #168]	@ (80050b0 <vTaskSwitchContext+0xb8>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800500c:	e047      	b.n	800509e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800500e:	4b28      	ldr	r3, [pc, #160]	@ (80050b0 <vTaskSwitchContext+0xb8>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005014:	4b27      	ldr	r3, [pc, #156]	@ (80050b4 <vTaskSwitchContext+0xbc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	e011      	b.n	8005040 <vTaskSwitchContext+0x48>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10b      	bne.n	800503a <vTaskSwitchContext+0x42>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <vTaskSwitchContext+0x3e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b01      	subs	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	491d      	ldr	r1, [pc, #116]	@ (80050b8 <vTaskSwitchContext+0xc0>)
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0e3      	beq.n	800501c <vTaskSwitchContext+0x24>
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4a16      	ldr	r2, [pc, #88]	@ (80050b8 <vTaskSwitchContext+0xc0>)
 8005060:	4413      	add	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3308      	adds	r3, #8
 8005076:	429a      	cmp	r2, r3
 8005078:	d104      	bne.n	8005084 <vTaskSwitchContext+0x8c>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4a0c      	ldr	r2, [pc, #48]	@ (80050bc <vTaskSwitchContext+0xc4>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4a09      	ldr	r2, [pc, #36]	@ (80050b4 <vTaskSwitchContext+0xbc>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005094:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <vTaskSwitchContext+0xc4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3354      	adds	r3, #84	@ 0x54
 800509a:	4a09      	ldr	r2, [pc, #36]	@ (80050c0 <vTaskSwitchContext+0xc8>)
 800509c:	6013      	str	r3, [r2, #0]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000e94 	.word	0x20000e94
 80050b0:	20000e80 	.word	0x20000e80
 80050b4:	20000e74 	.word	0x20000e74
 80050b8:	2000099c 	.word	0x2000099c
 80050bc:	20000998 	.word	0x20000998
 80050c0:	20000064 	.word	0x20000064

080050c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	60fb      	str	r3, [r7, #12]
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ec:	4b07      	ldr	r3, [pc, #28]	@ (800510c <vTaskPlaceOnEventList+0x48>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3318      	adds	r3, #24
 80050f2:	4619      	mov	r1, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fe fe48 	bl	8003d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050fa:	2101      	movs	r1, #1
 80050fc:	6838      	ldr	r0, [r7, #0]
 80050fe:	f000 fa87 	bl	8005610 <prvAddCurrentTaskToDelayedList>
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000998 	.word	0x20000998

08005110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	617b      	str	r3, [r7, #20]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800513a:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <vTaskPlaceOnEventListRestricted+0x54>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3318      	adds	r3, #24
 8005140:	4619      	mov	r1, r3
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7fe fdfd 	bl	8003d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800514e:	f04f 33ff 	mov.w	r3, #4294967295
 8005152:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	68b8      	ldr	r0, [r7, #8]
 8005158:	f000 fa5a 	bl	8005610 <prvAddCurrentTaskToDelayedList>
	}
 800515c:	bf00      	nop
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000998 	.word	0x20000998

08005168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60fb      	str	r3, [r7, #12]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3318      	adds	r3, #24
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fe2e 	bl	8003dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005218 <xTaskRemoveFromEventList+0xb0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fe25 	bl	8003dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <xTaskRemoveFromEventList+0xb4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <xTaskRemoveFromEventList+0x5e>
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	4a16      	ldr	r2, [pc, #88]	@ (800521c <xTaskRemoveFromEventList+0xb4>)
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <xTaskRemoveFromEventList+0xb8>)
 80051d4:	441a      	add	r2, r3
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7fe fdb0 	bl	8003d42 <vListInsertEnd>
 80051e2:	e005      	b.n	80051f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3318      	adds	r3, #24
 80051e8:	4619      	mov	r1, r3
 80051ea:	480e      	ldr	r0, [pc, #56]	@ (8005224 <xTaskRemoveFromEventList+0xbc>)
 80051ec:	f7fe fda9 	bl	8003d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005228 <xTaskRemoveFromEventList+0xc0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d905      	bls.n	800520a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005202:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <xTaskRemoveFromEventList+0xc4>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e001      	b.n	800520e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800520e:	697b      	ldr	r3, [r7, #20]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000e94 	.word	0x20000e94
 800521c:	20000e74 	.word	0x20000e74
 8005220:	2000099c 	.word	0x2000099c
 8005224:	20000e2c 	.word	0x20000e2c
 8005228:	20000998 	.word	0x20000998
 800522c:	20000e80 	.word	0x20000e80

08005230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005238:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <vTaskInternalSetTimeOutState+0x24>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <vTaskInternalSetTimeOutState+0x28>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	20000e84 	.word	0x20000e84
 8005258:	20000e70 	.word	0x20000e70

0800525c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	613b      	str	r3, [r7, #16]
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60fb      	str	r3, [r7, #12]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80052a2:	f000 fe91 	bl	8005fc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052a6:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <xTaskCheckForTimeOut+0xc0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d102      	bne.n	80052c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e023      	b.n	800530e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b15      	ldr	r3, [pc, #84]	@ (8005320 <xTaskCheckForTimeOut+0xc4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d007      	beq.n	80052e2 <xTaskCheckForTimeOut+0x86>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d302      	bcc.n	80052e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	e015      	b.n	800530e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d20b      	bcs.n	8005304 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ff99 	bl	8005230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e004      	b.n	800530e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800530a:	2301      	movs	r3, #1
 800530c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800530e:	f000 fe8d 	bl	800602c <vPortExitCritical>

	return xReturn;
 8005312:	69fb      	ldr	r3, [r7, #28]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000e70 	.word	0x20000e70
 8005320:	20000e84 	.word	0x20000e84

08005324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005328:	4b03      	ldr	r3, [pc, #12]	@ (8005338 <vTaskMissedYield+0x14>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20000e80 	.word	0x20000e80

0800533c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005344:	f000 f852 	bl	80053ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <prvIdleTask+0x28>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d9f9      	bls.n	8005344 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005350:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <prvIdleTask+0x2c>)
 8005352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005360:	e7f0      	b.n	8005344 <prvIdleTask+0x8>
 8005362:	bf00      	nop
 8005364:	2000099c 	.word	0x2000099c
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	e00c      	b.n	8005392 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4a12      	ldr	r2, [pc, #72]	@ (80053cc <prvInitialiseTaskLists+0x60>)
 8005384:	4413      	add	r3, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fcae 	bl	8003ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3301      	adds	r3, #1
 8005390:	607b      	str	r3, [r7, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b37      	cmp	r3, #55	@ 0x37
 8005396:	d9ef      	bls.n	8005378 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005398:	480d      	ldr	r0, [pc, #52]	@ (80053d0 <prvInitialiseTaskLists+0x64>)
 800539a:	f7fe fca5 	bl	8003ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800539e:	480d      	ldr	r0, [pc, #52]	@ (80053d4 <prvInitialiseTaskLists+0x68>)
 80053a0:	f7fe fca2 	bl	8003ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053a4:	480c      	ldr	r0, [pc, #48]	@ (80053d8 <prvInitialiseTaskLists+0x6c>)
 80053a6:	f7fe fc9f 	bl	8003ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053aa:	480c      	ldr	r0, [pc, #48]	@ (80053dc <prvInitialiseTaskLists+0x70>)
 80053ac:	f7fe fc9c 	bl	8003ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053b0:	480b      	ldr	r0, [pc, #44]	@ (80053e0 <prvInitialiseTaskLists+0x74>)
 80053b2:	f7fe fc99 	bl	8003ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053b6:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <prvInitialiseTaskLists+0x78>)
 80053b8:	4a05      	ldr	r2, [pc, #20]	@ (80053d0 <prvInitialiseTaskLists+0x64>)
 80053ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053bc:	4b0a      	ldr	r3, [pc, #40]	@ (80053e8 <prvInitialiseTaskLists+0x7c>)
 80053be:	4a05      	ldr	r2, [pc, #20]	@ (80053d4 <prvInitialiseTaskLists+0x68>)
 80053c0:	601a      	str	r2, [r3, #0]
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	2000099c 	.word	0x2000099c
 80053d0:	20000dfc 	.word	0x20000dfc
 80053d4:	20000e10 	.word	0x20000e10
 80053d8:	20000e2c 	.word	0x20000e2c
 80053dc:	20000e40 	.word	0x20000e40
 80053e0:	20000e58 	.word	0x20000e58
 80053e4:	20000e24 	.word	0x20000e24
 80053e8:	20000e28 	.word	0x20000e28

080053ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053f2:	e019      	b.n	8005428 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053f4:	f000 fde8 	bl	8005fc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	4b10      	ldr	r3, [pc, #64]	@ (800543c <prvCheckTasksWaitingTermination+0x50>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	4618      	mov	r0, r3
 8005406:	f7fe fcf9 	bl	8003dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800540a:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <prvCheckTasksWaitingTermination+0x54>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	4a0b      	ldr	r2, [pc, #44]	@ (8005440 <prvCheckTasksWaitingTermination+0x54>)
 8005412:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005414:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <prvCheckTasksWaitingTermination+0x58>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	4a0a      	ldr	r2, [pc, #40]	@ (8005444 <prvCheckTasksWaitingTermination+0x58>)
 800541c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800541e:	f000 fe05 	bl	800602c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f810 	bl	8005448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005428:	4b06      	ldr	r3, [pc, #24]	@ (8005444 <prvCheckTasksWaitingTermination+0x58>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e1      	bne.n	80053f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000e40 	.word	0x20000e40
 8005440:	20000e6c 	.word	0x20000e6c
 8005444:	20000e54 	.word	0x20000e54

08005448 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3354      	adds	r3, #84	@ 0x54
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f903 	bl	8006660 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	4618      	mov	r0, r3
 800546a:	f000 ff9d 	bl	80063a8 <vPortFree>
				vPortFree( pxTCB );
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 ff9a 	bl	80063a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005474:	e019      	b.n	80054aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800547c:	2b01      	cmp	r3, #1
 800547e:	d103      	bne.n	8005488 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 ff91 	bl	80063a8 <vPortFree>
	}
 8005486:	e010      	b.n	80054aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800548e:	2b02      	cmp	r3, #2
 8005490:	d00b      	beq.n	80054aa <prvDeleteTCB+0x62>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60fb      	str	r3, [r7, #12]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <prvDeleteTCB+0x5e>
	}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ba:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <prvResetNextTaskUnblockTime+0x38>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054c4:	4b0a      	ldr	r3, [pc, #40]	@ (80054f0 <prvResetNextTaskUnblockTime+0x3c>)
 80054c6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054cc:	e008      	b.n	80054e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ce:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <prvResetNextTaskUnblockTime+0x38>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a04      	ldr	r2, [pc, #16]	@ (80054f0 <prvResetNextTaskUnblockTime+0x3c>)
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	20000e24 	.word	0x20000e24
 80054f0:	20000e8c 	.word	0x20000e8c

080054f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80054fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <xTaskGetSchedulerState+0x34>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005502:	2301      	movs	r3, #1
 8005504:	607b      	str	r3, [r7, #4]
 8005506:	e008      	b.n	800551a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005508:	4b08      	ldr	r3, [pc, #32]	@ (800552c <xTaskGetSchedulerState+0x38>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005510:	2302      	movs	r3, #2
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	e001      	b.n	800551a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800551a:	687b      	ldr	r3, [r7, #4]
	}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000e78 	.word	0x20000e78
 800552c:	20000e94 	.word	0x20000e94

08005530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d058      	beq.n	80055f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005546:	4b2f      	ldr	r3, [pc, #188]	@ (8005604 <xTaskPriorityDisinherit+0xd4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d00b      	beq.n	8005568 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	60bb      	str	r3, [r7, #8]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559a:	429a      	cmp	r2, r3
 800559c:	d02c      	beq.n	80055f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d128      	bne.n	80055f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fc26 	bl	8003dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005608 <xTaskPriorityDisinherit+0xd8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d903      	bls.n	80055d8 <xTaskPriorityDisinherit+0xa8>
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005608 <xTaskPriorityDisinherit+0xd8>)
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4a09      	ldr	r2, [pc, #36]	@ (800560c <xTaskPriorityDisinherit+0xdc>)
 80055e6:	441a      	add	r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f7fe fba7 	bl	8003d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055f8:	697b      	ldr	r3, [r7, #20]
	}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000998 	.word	0x20000998
 8005608:	20000e74 	.word	0x20000e74
 800560c:	2000099c 	.word	0x2000099c

08005610 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800561a:	4b21      	ldr	r3, [pc, #132]	@ (80056a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005620:	4b20      	ldr	r3, [pc, #128]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fbe8 	bl	8003dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d10a      	bne.n	800564a <prvAddCurrentTaskToDelayedList+0x3a>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800563a:	4b1a      	ldr	r3, [pc, #104]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4819      	ldr	r0, [pc, #100]	@ (80056a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005644:	f7fe fb7d 	bl	8003d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005648:	e026      	b.n	8005698 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005652:	4b14      	ldr	r3, [pc, #80]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	429a      	cmp	r2, r3
 8005660:	d209      	bcs.n	8005676 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005662:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	4b0f      	ldr	r3, [pc, #60]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3304      	adds	r3, #4
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f7fe fb8b 	bl	8003d8a <vListInsert>
}
 8005674:	e010      	b.n	8005698 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005676:	4b0e      	ldr	r3, [pc, #56]	@ (80056b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fb81 	bl	8003d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005688:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	d202      	bcs.n	8005698 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005692:	4a08      	ldr	r2, [pc, #32]	@ (80056b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000e70 	.word	0x20000e70
 80056a4:	20000998 	.word	0x20000998
 80056a8:	20000e58 	.word	0x20000e58
 80056ac:	20000e28 	.word	0x20000e28
 80056b0:	20000e24 	.word	0x20000e24
 80056b4:	20000e8c 	.word	0x20000e8c

080056b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056c2:	f000 fb13 	bl	8005cec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056c6:	4b1d      	ldr	r3, [pc, #116]	@ (800573c <xTimerCreateTimerTask+0x84>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d021      	beq.n	8005712 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056d6:	1d3a      	adds	r2, r7, #4
 80056d8:	f107 0108 	add.w	r1, r7, #8
 80056dc:	f107 030c 	add.w	r3, r7, #12
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fe fae7 	bl	8003cb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	9202      	str	r2, [sp, #8]
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	2302      	movs	r3, #2
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	460a      	mov	r2, r1
 80056f8:	4911      	ldr	r1, [pc, #68]	@ (8005740 <xTimerCreateTimerTask+0x88>)
 80056fa:	4812      	ldr	r0, [pc, #72]	@ (8005744 <xTimerCreateTimerTask+0x8c>)
 80056fc:	f7ff f8a2 	bl	8004844 <xTaskCreateStatic>
 8005700:	4603      	mov	r3, r0
 8005702:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <xTimerCreateTimerTask+0x90>)
 8005704:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005706:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <xTimerCreateTimerTask+0x90>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800570e:	2301      	movs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	613b      	str	r3, [r7, #16]
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005730:	697b      	ldr	r3, [r7, #20]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000ec8 	.word	0x20000ec8
 8005740:	080070d4 	.word	0x080070d4
 8005744:	08005885 	.word	0x08005885
 8005748:	20000ecc 	.word	0x20000ecc

0800574c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	@ 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <xTimerGenericCommand+0x30>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	623b      	str	r3, [r7, #32]
}
 8005776:	bf00      	nop
 8005778:	bf00      	nop
 800577a:	e7fd      	b.n	8005778 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800577c:	4b19      	ldr	r3, [pc, #100]	@ (80057e4 <xTimerGenericCommand+0x98>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02a      	beq.n	80057da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b05      	cmp	r3, #5
 8005794:	dc18      	bgt.n	80057c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005796:	f7ff fead 	bl	80054f4 <xTaskGetSchedulerState>
 800579a:	4603      	mov	r3, r0
 800579c:	2b02      	cmp	r3, #2
 800579e:	d109      	bne.n	80057b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057a0:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <xTimerGenericCommand+0x98>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	f107 0110 	add.w	r1, r7, #16
 80057a8:	2300      	movs	r3, #0
 80057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ac:	f7fe fc5a 	bl	8004064 <xQueueGenericSend>
 80057b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80057b2:	e012      	b.n	80057da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057b4:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <xTimerGenericCommand+0x98>)
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	f107 0110 	add.w	r1, r7, #16
 80057bc:	2300      	movs	r3, #0
 80057be:	2200      	movs	r2, #0
 80057c0:	f7fe fc50 	bl	8004064 <xQueueGenericSend>
 80057c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80057c6:	e008      	b.n	80057da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <xTimerGenericCommand+0x98>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	f107 0110 	add.w	r1, r7, #16
 80057d0:	2300      	movs	r3, #0
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	f7fe fd48 	bl	8004268 <xQueueGenericSendFromISR>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3728      	adds	r7, #40	@ 0x28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000ec8 	.word	0x20000ec8

080057e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f2:	4b23      	ldr	r3, [pc, #140]	@ (8005880 <prvProcessExpiredTimer+0x98>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3304      	adds	r3, #4
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fafb 	bl	8003dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d023      	beq.n	800585c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	18d1      	adds	r1, r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	f000 f8d5 	bl	80059d0 <prvInsertTimerInActiveList>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d020      	beq.n	800586e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2300      	movs	r3, #0
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	2100      	movs	r1, #0
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f7ff ff88 	bl	800574c <xTimerGenericCommand>
 800583c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d114      	bne.n	800586e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
}
 8005856:	bf00      	nop
 8005858:	bf00      	nop
 800585a:	e7fd      	b.n	8005858 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	4798      	blx	r3
}
 8005876:	bf00      	nop
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000ec0 	.word	0x20000ec0

08005884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f859 	bl	8005948 <prvGetNextExpireTime>
 8005896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4619      	mov	r1, r3
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f805 	bl	80058ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058a2:	f000 f8d7 	bl	8005a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058a6:	bf00      	nop
 80058a8:	e7f0      	b.n	800588c <prvTimerTask+0x8>
	...

080058ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058b6:	f7ff fa29 	bl	8004d0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f866 	bl	8005990 <prvSampleTimeNow>
 80058c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d130      	bne.n	800592e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <prvProcessTimerOrBlockTask+0x3c>
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d806      	bhi.n	80058e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058da:	f7ff fa25 	bl	8004d28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff ff81 	bl	80057e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058e6:	e024      	b.n	8005932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058ee:	4b13      	ldr	r3, [pc, #76]	@ (800593c <prvProcessTimerOrBlockTask+0x90>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <prvProcessTimerOrBlockTask+0x50>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <prvProcessTimerOrBlockTask+0x52>
 80058fc:	2300      	movs	r3, #0
 80058fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005900:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <prvProcessTimerOrBlockTask+0x94>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	f7fe ff65 	bl	80047dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005912:	f7ff fa09 	bl	8004d28 <xTaskResumeAll>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800591c:	4b09      	ldr	r3, [pc, #36]	@ (8005944 <prvProcessTimerOrBlockTask+0x98>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
}
 800592c:	e001      	b.n	8005932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800592e:	f7ff f9fb 	bl	8004d28 <xTaskResumeAll>
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000ec4 	.word	0x20000ec4
 8005940:	20000ec8 	.word	0x20000ec8
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005950:	4b0e      	ldr	r3, [pc, #56]	@ (800598c <prvGetNextExpireTime+0x44>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <prvGetNextExpireTime+0x16>
 800595a:	2201      	movs	r2, #1
 800595c:	e000      	b.n	8005960 <prvGetNextExpireTime+0x18>
 800595e:	2200      	movs	r2, #0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800596c:	4b07      	ldr	r3, [pc, #28]	@ (800598c <prvGetNextExpireTime+0x44>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e001      	b.n	800597c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800597c:	68fb      	ldr	r3, [r7, #12]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000ec0 	.word	0x20000ec0

08005990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005998:	f7ff fa64 	bl	8004e64 <xTaskGetTickCount>
 800599c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800599e:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <prvSampleTimeNow+0x3c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d205      	bcs.n	80059b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059a8:	f000 f93a 	bl	8005c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e002      	b.n	80059ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059ba:	4a04      	ldr	r2, [pc, #16]	@ (80059cc <prvSampleTimeNow+0x3c>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059c0:	68fb      	ldr	r3, [r7, #12]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000ed0 	.word	0x20000ed0

080059d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d812      	bhi.n	8005a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	1ad2      	subs	r2, r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e01b      	b.n	8005a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a0a:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <prvInsertTimerInActiveList+0x7c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fe f9b8 	bl	8003d8a <vListInsert>
 8005a1a:	e012      	b.n	8005a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d206      	bcs.n	8005a32 <prvInsertTimerInActiveList+0x62>
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e007      	b.n	8005a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a32:	4b07      	ldr	r3, [pc, #28]	@ (8005a50 <prvInsertTimerInActiveList+0x80>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe f9a4 	bl	8003d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a42:	697b      	ldr	r3, [r7, #20]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000ec4 	.word	0x20000ec4
 8005a50:	20000ec0 	.word	0x20000ec0

08005a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08e      	sub	sp, #56	@ 0x38
 8005a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a5a:	e0ce      	b.n	8005bfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da19      	bge.n	8005a96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a62:	1d3b      	adds	r3, r7, #4
 8005a64:	3304      	adds	r3, #4
 8005a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	61fb      	str	r3, [r7, #28]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8c:	6850      	ldr	r0, [r2, #4]
 8005a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a90:	6892      	ldr	r2, [r2, #8]
 8005a92:	4611      	mov	r1, r2
 8005a94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f2c0 80ae 	blt.w	8005bfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	3304      	adds	r3, #4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe f9a4 	bl	8003dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ff6a 	bl	8005990 <prvSampleTimeNow>
 8005abc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b09      	cmp	r3, #9
 8005ac2:	f200 8097 	bhi.w	8005bf4 <prvProcessReceivedCommands+0x1a0>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <prvProcessReceivedCommands+0x78>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005af5 	.word	0x08005af5
 8005ad8:	08005b6b 	.word	0x08005b6b
 8005adc:	08005b7f 	.word	0x08005b7f
 8005ae0:	08005bcb 	.word	0x08005bcb
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005af5 	.word	0x08005af5
 8005aec:	08005b6b 	.word	0x08005b6b
 8005af0:	08005b7f 	.word	0x08005b7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	18d1      	adds	r1, r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b14:	f7ff ff5c 	bl	80059d0 <prvInsertTimerInActiveList>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d06c      	beq.n	8005bf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d061      	beq.n	8005bf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	441a      	add	r2, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	2100      	movs	r1, #0
 8005b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b46:	f7ff fe01 	bl	800574c <xTimerGenericCommand>
 8005b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d152      	bne.n	8005bf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	61bb      	str	r3, [r7, #24]
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b7c:	e03d      	b.n	8005bfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	617b      	str	r3, [r7, #20]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	18d1      	adds	r1, r2, r3
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bc4:	f7ff ff04 	bl	80059d0 <prvInsertTimerInActiveList>
					break;
 8005bc8:	e017      	b.n	8005bfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bda:	f000 fbe5 	bl	80063a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bde:	e00c      	b.n	8005bfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005bf2:	e002      	b.n	8005bfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <prvProcessReceivedCommands+0x1a6>
					break;
 8005bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bfa:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <prvProcessReceivedCommands+0x1c8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1d39      	adds	r1, r7, #4
 8005c00:	2200      	movs	r2, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fbce 	bl	80043a4 <xQueueReceive>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f af26 	bne.w	8005a5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	3730      	adds	r7, #48	@ 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000ec8 	.word	0x20000ec8

08005c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c26:	e049      	b.n	8005cbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c28:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c32:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe f8db 	bl	8003dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02f      	beq.n	8005cbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d90e      	bls.n	8005c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3304      	adds	r3, #4
 8005c82:	4619      	mov	r1, r3
 8005c84:	4610      	mov	r0, r2
 8005c86:	f7fe f880 	bl	8003d8a <vListInsert>
 8005c8a:	e017      	b.n	8005cbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2300      	movs	r3, #0
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	2100      	movs	r1, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fd58 	bl	800574c <xTimerGenericCommand>
 8005c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	603b      	str	r3, [r7, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1b0      	bne.n	8005c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cc6:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ccc:	4b06      	ldr	r3, [pc, #24]	@ (8005ce8 <prvSwitchTimerLists+0xc8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a04      	ldr	r2, [pc, #16]	@ (8005ce4 <prvSwitchTimerLists+0xc4>)
 8005cd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005cd4:	4a04      	ldr	r2, [pc, #16]	@ (8005ce8 <prvSwitchTimerLists+0xc8>)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6013      	str	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000ec0 	.word	0x20000ec0
 8005ce8:	20000ec4 	.word	0x20000ec4

08005cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005cf2:	f000 f969 	bl	8005fc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005cf6:	4b15      	ldr	r3, [pc, #84]	@ (8005d4c <prvCheckForValidListAndQueue+0x60>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d120      	bne.n	8005d40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005cfe:	4814      	ldr	r0, [pc, #80]	@ (8005d50 <prvCheckForValidListAndQueue+0x64>)
 8005d00:	f7fd fff2 	bl	8003ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d04:	4813      	ldr	r0, [pc, #76]	@ (8005d54 <prvCheckForValidListAndQueue+0x68>)
 8005d06:	f7fd ffef 	bl	8003ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d0a:	4b13      	ldr	r3, [pc, #76]	@ (8005d58 <prvCheckForValidListAndQueue+0x6c>)
 8005d0c:	4a10      	ldr	r2, [pc, #64]	@ (8005d50 <prvCheckForValidListAndQueue+0x64>)
 8005d0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d10:	4b12      	ldr	r3, [pc, #72]	@ (8005d5c <prvCheckForValidListAndQueue+0x70>)
 8005d12:	4a10      	ldr	r2, [pc, #64]	@ (8005d54 <prvCheckForValidListAndQueue+0x68>)
 8005d14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d16:	2300      	movs	r3, #0
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	4b11      	ldr	r3, [pc, #68]	@ (8005d60 <prvCheckForValidListAndQueue+0x74>)
 8005d1c:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <prvCheckForValidListAndQueue+0x78>)
 8005d1e:	2110      	movs	r1, #16
 8005d20:	200a      	movs	r0, #10
 8005d22:	f7fe f8ff 	bl	8003f24 <xQueueGenericCreateStatic>
 8005d26:	4603      	mov	r3, r0
 8005d28:	4a08      	ldr	r2, [pc, #32]	@ (8005d4c <prvCheckForValidListAndQueue+0x60>)
 8005d2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d2c:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <prvCheckForValidListAndQueue+0x60>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d34:	4b05      	ldr	r3, [pc, #20]	@ (8005d4c <prvCheckForValidListAndQueue+0x60>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	490b      	ldr	r1, [pc, #44]	@ (8005d68 <prvCheckForValidListAndQueue+0x7c>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fd24 	bl	8004788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d40:	f000 f974 	bl	800602c <vPortExitCritical>
}
 8005d44:	bf00      	nop
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000ec8 	.word	0x20000ec8
 8005d50:	20000e98 	.word	0x20000e98
 8005d54:	20000eac 	.word	0x20000eac
 8005d58:	20000ec0 	.word	0x20000ec0
 8005d5c:	20000ec4 	.word	0x20000ec4
 8005d60:	20000f74 	.word	0x20000f74
 8005d64:	20000ed4 	.word	0x20000ed4
 8005d68:	080070dc 	.word	0x080070dc

08005d6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd0 <pxPortInitialiseStack+0x64>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3b14      	subs	r3, #20
 8005da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f06f 0202 	mvn.w	r2, #2
 8005dba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b20      	subs	r3, #32
 8005dc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	08005dd5 	.word	0x08005dd5

08005dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dde:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <prvTaskExitError+0x58>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d00b      	beq.n	8005e00 <prvTaskExitError+0x2c>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60fb      	str	r3, [r7, #12]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <prvTaskExitError+0x28>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60bb      	str	r3, [r7, #8]
}
 8005e12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e14:	bf00      	nop
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0fc      	beq.n	8005e16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000060 	.word	0x20000060

08005e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e30:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <pxCurrentTCBConst2>)
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	f380 8809 	msr	PSP, r0
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8811 	msr	BASEPRI, r0
 8005e4a:	4770      	bx	lr
 8005e4c:	f3af 8000 	nop.w

08005e50 <pxCurrentTCBConst2>:
 8005e50:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e58:	4808      	ldr	r0, [pc, #32]	@ (8005e7c <prvPortStartFirstTask+0x24>)
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	6800      	ldr	r0, [r0, #0]
 8005e5e:	f380 8808 	msr	MSP, r0
 8005e62:	f04f 0000 	mov.w	r0, #0
 8005e66:	f380 8814 	msr	CONTROL, r0
 8005e6a:	b662      	cpsie	i
 8005e6c:	b661      	cpsie	f
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	df00      	svc	0
 8005e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e7a:	bf00      	nop
 8005e7c:	e000ed08 	.word	0xe000ed08

08005e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e86:	4b47      	ldr	r3, [pc, #284]	@ (8005fa4 <xPortStartScheduler+0x124>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a47      	ldr	r2, [pc, #284]	@ (8005fa8 <xPortStartScheduler+0x128>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10b      	bne.n	8005ea8 <xPortStartScheduler+0x28>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	613b      	str	r3, [r7, #16]
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa4 <xPortStartScheduler+0x124>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a3f      	ldr	r2, [pc, #252]	@ (8005fac <xPortStartScheduler+0x12c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10b      	bne.n	8005eca <xPortStartScheduler+0x4a>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60fb      	str	r3, [r7, #12]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eca:	4b39      	ldr	r3, [pc, #228]	@ (8005fb0 <xPortStartScheduler+0x130>)
 8005ecc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	22ff      	movs	r2, #255	@ 0xff
 8005eda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4b31      	ldr	r3, [pc, #196]	@ (8005fb4 <xPortStartScheduler+0x134>)
 8005ef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ef2:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005ef4:	2207      	movs	r2, #7
 8005ef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ef8:	e009      	b.n	8005f0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005efa:	4b2f      	ldr	r3, [pc, #188]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005f02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f16:	2b80      	cmp	r3, #128	@ 0x80
 8005f18:	d0ef      	beq.n	8005efa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f1a:	4b27      	ldr	r3, [pc, #156]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f1c3 0307 	rsb	r3, r3, #7
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d00b      	beq.n	8005f3e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	60bb      	str	r3, [r7, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005f46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f48:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f50:	4a19      	ldr	r2, [pc, #100]	@ (8005fb8 <xPortStartScheduler+0x138>)
 8005f52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f5c:	4b17      	ldr	r3, [pc, #92]	@ (8005fbc <xPortStartScheduler+0x13c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a16      	ldr	r2, [pc, #88]	@ (8005fbc <xPortStartScheduler+0x13c>)
 8005f62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f68:	4b14      	ldr	r3, [pc, #80]	@ (8005fbc <xPortStartScheduler+0x13c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	@ (8005fbc <xPortStartScheduler+0x13c>)
 8005f6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f74:	f000 f8da 	bl	800612c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f78:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <xPortStartScheduler+0x140>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f7e:	f000 f8f9 	bl	8006174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f82:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <xPortStartScheduler+0x144>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a0f      	ldr	r2, [pc, #60]	@ (8005fc4 <xPortStartScheduler+0x144>)
 8005f88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f8e:	f7ff ff63 	bl	8005e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f92:	f7ff f831 	bl	8004ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8005f96:	f7ff ff1d 	bl	8005dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	e000ed00 	.word	0xe000ed00
 8005fa8:	410fc271 	.word	0x410fc271
 8005fac:	410fc270 	.word	0x410fc270
 8005fb0:	e000e400 	.word	0xe000e400
 8005fb4:	20000fc4 	.word	0x20000fc4
 8005fb8:	20000fc8 	.word	0x20000fc8
 8005fbc:	e000ed20 	.word	0xe000ed20
 8005fc0:	20000060 	.word	0x20000060
 8005fc4:	e000ef34 	.word	0xe000ef34

08005fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	607b      	str	r3, [r7, #4]
}
 8005fe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fe2:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <vPortEnterCritical+0x5c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8006024 <vPortEnterCritical+0x5c>)
 8005fea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fec:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <vPortEnterCritical+0x5c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d110      	bne.n	8006016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8006028 <vPortEnterCritical+0x60>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <vPortEnterCritical+0x4e>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	603b      	str	r3, [r7, #0]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <vPortEnterCritical+0x4a>
	}
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000060 	.word	0x20000060
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <vPortExitCritical+0x50>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <vPortExitCritical+0x26>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	607b      	str	r3, [r7, #4]
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	e7fd      	b.n	800604e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006052:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <vPortExitCritical+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3b01      	subs	r3, #1
 8006058:	4a08      	ldr	r2, [pc, #32]	@ (800607c <vPortExitCritical+0x50>)
 800605a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800605c:	4b07      	ldr	r3, [pc, #28]	@ (800607c <vPortExitCritical+0x50>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d105      	bne.n	8006070 <vPortExitCritical+0x44>
 8006064:	2300      	movs	r3, #0
 8006066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f383 8811 	msr	BASEPRI, r3
}
 800606e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	20000060 	.word	0x20000060

08006080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006080:	f3ef 8009 	mrs	r0, PSP
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	4b15      	ldr	r3, [pc, #84]	@ (80060e0 <pxCurrentTCBConst>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	f01e 0f10 	tst.w	lr, #16
 8006090:	bf08      	it	eq
 8006092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	6010      	str	r0, [r2, #0]
 800609c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060a4:	f380 8811 	msr	BASEPRI, r0
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f7fe ffa2 	bl	8004ff8 <vTaskSwitchContext>
 80060b4:	f04f 0000 	mov.w	r0, #0
 80060b8:	f380 8811 	msr	BASEPRI, r0
 80060bc:	bc09      	pop	{r0, r3}
 80060be:	6819      	ldr	r1, [r3, #0]
 80060c0:	6808      	ldr	r0, [r1, #0]
 80060c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	f01e 0f10 	tst.w	lr, #16
 80060ca:	bf08      	it	eq
 80060cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060d0:	f380 8809 	msr	PSP, r0
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	f3af 8000 	nop.w

080060e0 <pxCurrentTCBConst>:
 80060e0:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006102:	f7fe febf 	bl	8004e84 <xTaskIncrementTick>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800610c:	4b06      	ldr	r3, [pc, #24]	@ (8006128 <xPortSysTickHandler+0x40>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f383 8811 	msr	BASEPRI, r3
}
 800611e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006130:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006136:	4b0b      	ldr	r3, [pc, #44]	@ (8006164 <vPortSetupTimerInterrupt+0x38>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800613c:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <vPortSetupTimerInterrupt+0x3c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0a      	ldr	r2, [pc, #40]	@ (800616c <vPortSetupTimerInterrupt+0x40>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	4a09      	ldr	r2, [pc, #36]	@ (8006170 <vPortSetupTimerInterrupt+0x44>)
 800614a:	3b01      	subs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800614e:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	e000e010 	.word	0xe000e010
 8006164:	e000e018 	.word	0xe000e018
 8006168:	20000054 	.word	0x20000054
 800616c:	10624dd3 	.word	0x10624dd3
 8006170:	e000e014 	.word	0xe000e014

08006174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006184 <vPortEnableVFP+0x10>
 8006178:	6801      	ldr	r1, [r0, #0]
 800617a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800617e:	6001      	str	r1, [r0, #0]
 8006180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006182:	bf00      	nop
 8006184:	e000ed88 	.word	0xe000ed88

08006188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800618e:	f3ef 8305 	mrs	r3, IPSR
 8006192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b0f      	cmp	r3, #15
 8006198:	d915      	bls.n	80061c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800619a:	4a18      	ldr	r2, [pc, #96]	@ (80061fc <vPortValidateInterruptPriority+0x74>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061a4:	4b16      	ldr	r3, [pc, #88]	@ (8006200 <vPortValidateInterruptPriority+0x78>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	7afa      	ldrb	r2, [r7, #11]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d20b      	bcs.n	80061c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	e7fd      	b.n	80061c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006204 <vPortValidateInterruptPriority+0x7c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006208 <vPortValidateInterruptPriority+0x80>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d90b      	bls.n	80061ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	603b      	str	r3, [r7, #0]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <vPortValidateInterruptPriority+0x62>
	}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	e000e3f0 	.word	0xe000e3f0
 8006200:	20000fc4 	.word	0x20000fc4
 8006204:	e000ed0c 	.word	0xe000ed0c
 8006208:	20000fc8 	.word	0x20000fc8

0800620c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	@ 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006218:	f7fe fd78 	bl	8004d0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800621c:	4b5c      	ldr	r3, [pc, #368]	@ (8006390 <pvPortMalloc+0x184>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006224:	f000 f924 	bl	8006470 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006228:	4b5a      	ldr	r3, [pc, #360]	@ (8006394 <pvPortMalloc+0x188>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 8095 	bne.w	8006360 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800623c:	2208      	movs	r2, #8
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	2b00      	cmp	r3, #0
 800624c:	d015      	beq.n	800627a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f023 0307 	bic.w	r3, r3, #7
 8006254:	3308      	adds	r3, #8
 8006256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <pvPortMalloc+0x6e>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	617b      	str	r3, [r7, #20]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d06f      	beq.n	8006360 <pvPortMalloc+0x154>
 8006280:	4b45      	ldr	r3, [pc, #276]	@ (8006398 <pvPortMalloc+0x18c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d86a      	bhi.n	8006360 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800628a:	4b44      	ldr	r3, [pc, #272]	@ (800639c <pvPortMalloc+0x190>)
 800628c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800628e:	4b43      	ldr	r3, [pc, #268]	@ (800639c <pvPortMalloc+0x190>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006294:	e004      	b.n	80062a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d903      	bls.n	80062b2 <pvPortMalloc+0xa6>
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f1      	bne.n	8006296 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062b2:	4b37      	ldr	r3, [pc, #220]	@ (8006390 <pvPortMalloc+0x184>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d051      	beq.n	8006360 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2208      	movs	r2, #8
 80062c2:	4413      	add	r3, r2
 80062c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	2308      	movs	r3, #8
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	429a      	cmp	r2, r3
 80062dc:	d920      	bls.n	8006320 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4413      	add	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <pvPortMalloc+0xfc>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	613b      	str	r3, [r7, #16]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800631a:	69b8      	ldr	r0, [r7, #24]
 800631c:	f000 f90a 	bl	8006534 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006320:	4b1d      	ldr	r3, [pc, #116]	@ (8006398 <pvPortMalloc+0x18c>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <pvPortMalloc+0x18c>)
 800632c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800632e:	4b1a      	ldr	r3, [pc, #104]	@ (8006398 <pvPortMalloc+0x18c>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b1b      	ldr	r3, [pc, #108]	@ (80063a0 <pvPortMalloc+0x194>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d203      	bcs.n	8006342 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800633a:	4b17      	ldr	r3, [pc, #92]	@ (8006398 <pvPortMalloc+0x18c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <pvPortMalloc+0x194>)
 8006340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <pvPortMalloc+0x188>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	431a      	orrs	r2, r3
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006356:	4b13      	ldr	r3, [pc, #76]	@ (80063a4 <pvPortMalloc+0x198>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	4a11      	ldr	r2, [pc, #68]	@ (80063a4 <pvPortMalloc+0x198>)
 800635e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006360:	f7fe fce2 	bl	8004d28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <pvPortMalloc+0x17a>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60fb      	str	r3, [r7, #12]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <pvPortMalloc+0x176>
	return pvReturn;
 8006386:	69fb      	ldr	r3, [r7, #28]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	@ 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20004bd4 	.word	0x20004bd4
 8006394:	20004be8 	.word	0x20004be8
 8006398:	20004bd8 	.word	0x20004bd8
 800639c:	20004bcc 	.word	0x20004bcc
 80063a0:	20004bdc 	.word	0x20004bdc
 80063a4:	20004be0 	.word	0x20004be0

080063a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d04f      	beq.n	800645a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063ba:	2308      	movs	r3, #8
 80063bc:	425b      	negs	r3, r3
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4413      	add	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <vPortFree+0xbc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4013      	ands	r3, r2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <vPortFree+0x46>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <vPortFree+0x66>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60bb      	str	r3, [r7, #8]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	4b14      	ldr	r3, [pc, #80]	@ (8006464 <vPortFree+0xbc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01e      	beq.n	800645a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11a      	bne.n	800645a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	4b0e      	ldr	r3, [pc, #56]	@ (8006464 <vPortFree+0xbc>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	43db      	mvns	r3, r3
 800642e:	401a      	ands	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006434:	f7fe fc6a 	bl	8004d0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <vPortFree+0xc0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4413      	add	r3, r2
 8006442:	4a09      	ldr	r2, [pc, #36]	@ (8006468 <vPortFree+0xc0>)
 8006444:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f000 f874 	bl	8006534 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <vPortFree+0xc4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3301      	adds	r3, #1
 8006452:	4a06      	ldr	r2, [pc, #24]	@ (800646c <vPortFree+0xc4>)
 8006454:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006456:	f7fe fc67 	bl	8004d28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800645a:	bf00      	nop
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20004be8 	.word	0x20004be8
 8006468:	20004bd8 	.word	0x20004bd8
 800646c:	20004be4 	.word	0x20004be4

08006470 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006476:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800647a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800647c:	4b27      	ldr	r3, [pc, #156]	@ (800651c <prvHeapInit+0xac>)
 800647e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3307      	adds	r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0307 	bic.w	r3, r3, #7
 8006496:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	4a1f      	ldr	r2, [pc, #124]	@ (800651c <prvHeapInit+0xac>)
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006520 <prvHeapInit+0xb0>)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006520 <prvHeapInit+0xb0>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4413      	add	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064bc:	2208      	movs	r2, #8
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4a15      	ldr	r2, [pc, #84]	@ (8006524 <prvHeapInit+0xb4>)
 80064d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064d2:	4b14      	ldr	r3, [pc, #80]	@ (8006524 <prvHeapInit+0xb4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064da:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <prvHeapInit+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	1ad2      	subs	r2, r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <prvHeapInit+0xb4>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006528 <prvHeapInit+0xb8>)
 80064fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4a09      	ldr	r2, [pc, #36]	@ (800652c <prvHeapInit+0xbc>)
 8006506:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <prvHeapInit+0xc0>)
 800650a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	20000fcc 	.word	0x20000fcc
 8006520:	20004bcc 	.word	0x20004bcc
 8006524:	20004bd4 	.word	0x20004bd4
 8006528:	20004bdc 	.word	0x20004bdc
 800652c:	20004bd8 	.word	0x20004bd8
 8006530:	20004be8 	.word	0x20004be8

08006534 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800653c:	4b28      	ldr	r3, [pc, #160]	@ (80065e0 <prvInsertBlockIntoFreeList+0xac>)
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e002      	b.n	8006548 <prvInsertBlockIntoFreeList+0x14>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	429a      	cmp	r2, r3
 8006550:	d8f7      	bhi.n	8006542 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4413      	add	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d108      	bne.n	8006576 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	441a      	add	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d118      	bne.n	80065bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4b15      	ldr	r3, [pc, #84]	@ (80065e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d00d      	beq.n	80065b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e008      	b.n	80065c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065b2:	4b0c      	ldr	r3, [pc, #48]	@ (80065e4 <prvInsertBlockIntoFreeList+0xb0>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e003      	b.n	80065c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d002      	beq.n	80065d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20004bcc 	.word	0x20004bcc
 80065e4:	20004bd4 	.word	0x20004bd4

080065e8 <sniprintf>:
 80065e8:	b40c      	push	{r2, r3}
 80065ea:	b530      	push	{r4, r5, lr}
 80065ec:	4b17      	ldr	r3, [pc, #92]	@ (800664c <sniprintf+0x64>)
 80065ee:	1e0c      	subs	r4, r1, #0
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	b09d      	sub	sp, #116	@ 0x74
 80065f4:	da08      	bge.n	8006608 <sniprintf+0x20>
 80065f6:	238b      	movs	r3, #139	@ 0x8b
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	b01d      	add	sp, #116	@ 0x74
 8006600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006604:	b002      	add	sp, #8
 8006606:	4770      	bx	lr
 8006608:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800660c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006610:	bf14      	ite	ne
 8006612:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006616:	4623      	moveq	r3, r4
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	9307      	str	r3, [sp, #28]
 800661c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006620:	9002      	str	r0, [sp, #8]
 8006622:	9006      	str	r0, [sp, #24]
 8006624:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006628:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800662a:	ab21      	add	r3, sp, #132	@ 0x84
 800662c:	a902      	add	r1, sp, #8
 800662e:	4628      	mov	r0, r5
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	f000 f9f9 	bl	8006a28 <_svfiprintf_r>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	bfbc      	itt	lt
 800663a:	238b      	movlt	r3, #139	@ 0x8b
 800663c:	602b      	strlt	r3, [r5, #0]
 800663e:	2c00      	cmp	r4, #0
 8006640:	d0dd      	beq.n	80065fe <sniprintf+0x16>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e7d9      	b.n	80065fe <sniprintf+0x16>
 800664a:	bf00      	nop
 800664c:	20000064 	.word	0x20000064

08006650 <memset>:
 8006650:	4402      	add	r2, r0
 8006652:	4603      	mov	r3, r0
 8006654:	4293      	cmp	r3, r2
 8006656:	d100      	bne.n	800665a <memset+0xa>
 8006658:	4770      	bx	lr
 800665a:	f803 1b01 	strb.w	r1, [r3], #1
 800665e:	e7f9      	b.n	8006654 <memset+0x4>

08006660 <_reclaim_reent>:
 8006660:	4b29      	ldr	r3, [pc, #164]	@ (8006708 <_reclaim_reent+0xa8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4283      	cmp	r3, r0
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	4604      	mov	r4, r0
 800666a:	d04b      	beq.n	8006704 <_reclaim_reent+0xa4>
 800666c:	69c3      	ldr	r3, [r0, #28]
 800666e:	b1ab      	cbz	r3, 800669c <_reclaim_reent+0x3c>
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	b16b      	cbz	r3, 8006690 <_reclaim_reent+0x30>
 8006674:	2500      	movs	r5, #0
 8006676:	69e3      	ldr	r3, [r4, #28]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	5959      	ldr	r1, [r3, r5]
 800667c:	2900      	cmp	r1, #0
 800667e:	d13b      	bne.n	80066f8 <_reclaim_reent+0x98>
 8006680:	3504      	adds	r5, #4
 8006682:	2d80      	cmp	r5, #128	@ 0x80
 8006684:	d1f7      	bne.n	8006676 <_reclaim_reent+0x16>
 8006686:	69e3      	ldr	r3, [r4, #28]
 8006688:	4620      	mov	r0, r4
 800668a:	68d9      	ldr	r1, [r3, #12]
 800668c:	f000 f878 	bl	8006780 <_free_r>
 8006690:	69e3      	ldr	r3, [r4, #28]
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	b111      	cbz	r1, 800669c <_reclaim_reent+0x3c>
 8006696:	4620      	mov	r0, r4
 8006698:	f000 f872 	bl	8006780 <_free_r>
 800669c:	6961      	ldr	r1, [r4, #20]
 800669e:	b111      	cbz	r1, 80066a6 <_reclaim_reent+0x46>
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 f86d 	bl	8006780 <_free_r>
 80066a6:	69e1      	ldr	r1, [r4, #28]
 80066a8:	b111      	cbz	r1, 80066b0 <_reclaim_reent+0x50>
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f868 	bl	8006780 <_free_r>
 80066b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066b2:	b111      	cbz	r1, 80066ba <_reclaim_reent+0x5a>
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 f863 	bl	8006780 <_free_r>
 80066ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066bc:	b111      	cbz	r1, 80066c4 <_reclaim_reent+0x64>
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f85e 	bl	8006780 <_free_r>
 80066c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80066c6:	b111      	cbz	r1, 80066ce <_reclaim_reent+0x6e>
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 f859 	bl	8006780 <_free_r>
 80066ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80066d0:	b111      	cbz	r1, 80066d8 <_reclaim_reent+0x78>
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 f854 	bl	8006780 <_free_r>
 80066d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066da:	b111      	cbz	r1, 80066e2 <_reclaim_reent+0x82>
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 f84f 	bl	8006780 <_free_r>
 80066e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066e4:	b111      	cbz	r1, 80066ec <_reclaim_reent+0x8c>
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 f84a 	bl	8006780 <_free_r>
 80066ec:	6a23      	ldr	r3, [r4, #32]
 80066ee:	b14b      	cbz	r3, 8006704 <_reclaim_reent+0xa4>
 80066f0:	4620      	mov	r0, r4
 80066f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066f6:	4718      	bx	r3
 80066f8:	680e      	ldr	r6, [r1, #0]
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 f840 	bl	8006780 <_free_r>
 8006700:	4631      	mov	r1, r6
 8006702:	e7bb      	b.n	800667c <_reclaim_reent+0x1c>
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	bf00      	nop
 8006708:	20000064 	.word	0x20000064

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	@ (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000064 	.word	0x20000064

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	@ (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	@ (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	@ (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	@ (800675c <__libc_init_array+0x44>)
 800672c:	f000 fc66 	bl	8006ffc <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08007180 	.word	0x08007180
 8006754:	08007180 	.word	0x08007180
 8006758:	08007180 	.word	0x08007180
 800675c:	08007184 	.word	0x08007184

08006760 <__retarget_lock_acquire_recursive>:
 8006760:	4770      	bx	lr

08006762 <__retarget_lock_release_recursive>:
 8006762:	4770      	bx	lr

08006764 <memcpy>:
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	f100 33ff 	add.w	r3, r0, #4294967295
 800676c:	d100      	bne.n	8006770 <memcpy+0xc>
 800676e:	4770      	bx	lr
 8006770:	b510      	push	{r4, lr}
 8006772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800677a:	4291      	cmp	r1, r2
 800677c:	d1f9      	bne.n	8006772 <memcpy+0xe>
 800677e:	bd10      	pop	{r4, pc}

08006780 <_free_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4605      	mov	r5, r0
 8006784:	2900      	cmp	r1, #0
 8006786:	d041      	beq.n	800680c <_free_r+0x8c>
 8006788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800678c:	1f0c      	subs	r4, r1, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfb8      	it	lt
 8006792:	18e4      	addlt	r4, r4, r3
 8006794:	f000 f8e0 	bl	8006958 <__malloc_lock>
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <_free_r+0x90>)
 800679a:	6813      	ldr	r3, [r2, #0]
 800679c:	b933      	cbnz	r3, 80067ac <_free_r+0x2c>
 800679e:	6063      	str	r3, [r4, #4]
 80067a0:	6014      	str	r4, [r2, #0]
 80067a2:	4628      	mov	r0, r5
 80067a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067a8:	f000 b8dc 	b.w	8006964 <__malloc_unlock>
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	d908      	bls.n	80067c2 <_free_r+0x42>
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	1821      	adds	r1, r4, r0
 80067b4:	428b      	cmp	r3, r1
 80067b6:	bf01      	itttt	eq
 80067b8:	6819      	ldreq	r1, [r3, #0]
 80067ba:	685b      	ldreq	r3, [r3, #4]
 80067bc:	1809      	addeq	r1, r1, r0
 80067be:	6021      	streq	r1, [r4, #0]
 80067c0:	e7ed      	b.n	800679e <_free_r+0x1e>
 80067c2:	461a      	mov	r2, r3
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	b10b      	cbz	r3, 80067cc <_free_r+0x4c>
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d9fa      	bls.n	80067c2 <_free_r+0x42>
 80067cc:	6811      	ldr	r1, [r2, #0]
 80067ce:	1850      	adds	r0, r2, r1
 80067d0:	42a0      	cmp	r0, r4
 80067d2:	d10b      	bne.n	80067ec <_free_r+0x6c>
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	4401      	add	r1, r0
 80067d8:	1850      	adds	r0, r2, r1
 80067da:	4283      	cmp	r3, r0
 80067dc:	6011      	str	r1, [r2, #0]
 80067de:	d1e0      	bne.n	80067a2 <_free_r+0x22>
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	6053      	str	r3, [r2, #4]
 80067e6:	4408      	add	r0, r1
 80067e8:	6010      	str	r0, [r2, #0]
 80067ea:	e7da      	b.n	80067a2 <_free_r+0x22>
 80067ec:	d902      	bls.n	80067f4 <_free_r+0x74>
 80067ee:	230c      	movs	r3, #12
 80067f0:	602b      	str	r3, [r5, #0]
 80067f2:	e7d6      	b.n	80067a2 <_free_r+0x22>
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	1821      	adds	r1, r4, r0
 80067f8:	428b      	cmp	r3, r1
 80067fa:	bf04      	itt	eq
 80067fc:	6819      	ldreq	r1, [r3, #0]
 80067fe:	685b      	ldreq	r3, [r3, #4]
 8006800:	6063      	str	r3, [r4, #4]
 8006802:	bf04      	itt	eq
 8006804:	1809      	addeq	r1, r1, r0
 8006806:	6021      	streq	r1, [r4, #0]
 8006808:	6054      	str	r4, [r2, #4]
 800680a:	e7ca      	b.n	80067a2 <_free_r+0x22>
 800680c:	bd38      	pop	{r3, r4, r5, pc}
 800680e:	bf00      	nop
 8006810:	20004d30 	.word	0x20004d30

08006814 <sbrk_aligned>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4e0f      	ldr	r6, [pc, #60]	@ (8006854 <sbrk_aligned+0x40>)
 8006818:	460c      	mov	r4, r1
 800681a:	6831      	ldr	r1, [r6, #0]
 800681c:	4605      	mov	r5, r0
 800681e:	b911      	cbnz	r1, 8006826 <sbrk_aligned+0x12>
 8006820:	f000 fba6 	bl	8006f70 <_sbrk_r>
 8006824:	6030      	str	r0, [r6, #0]
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	f000 fba1 	bl	8006f70 <_sbrk_r>
 800682e:	1c43      	adds	r3, r0, #1
 8006830:	d103      	bne.n	800683a <sbrk_aligned+0x26>
 8006832:	f04f 34ff 	mov.w	r4, #4294967295
 8006836:	4620      	mov	r0, r4
 8006838:	bd70      	pop	{r4, r5, r6, pc}
 800683a:	1cc4      	adds	r4, r0, #3
 800683c:	f024 0403 	bic.w	r4, r4, #3
 8006840:	42a0      	cmp	r0, r4
 8006842:	d0f8      	beq.n	8006836 <sbrk_aligned+0x22>
 8006844:	1a21      	subs	r1, r4, r0
 8006846:	4628      	mov	r0, r5
 8006848:	f000 fb92 	bl	8006f70 <_sbrk_r>
 800684c:	3001      	adds	r0, #1
 800684e:	d1f2      	bne.n	8006836 <sbrk_aligned+0x22>
 8006850:	e7ef      	b.n	8006832 <sbrk_aligned+0x1e>
 8006852:	bf00      	nop
 8006854:	20004d2c 	.word	0x20004d2c

08006858 <_malloc_r>:
 8006858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800685c:	1ccd      	adds	r5, r1, #3
 800685e:	f025 0503 	bic.w	r5, r5, #3
 8006862:	3508      	adds	r5, #8
 8006864:	2d0c      	cmp	r5, #12
 8006866:	bf38      	it	cc
 8006868:	250c      	movcc	r5, #12
 800686a:	2d00      	cmp	r5, #0
 800686c:	4606      	mov	r6, r0
 800686e:	db01      	blt.n	8006874 <_malloc_r+0x1c>
 8006870:	42a9      	cmp	r1, r5
 8006872:	d904      	bls.n	800687e <_malloc_r+0x26>
 8006874:	230c      	movs	r3, #12
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	2000      	movs	r0, #0
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006954 <_malloc_r+0xfc>
 8006882:	f000 f869 	bl	8006958 <__malloc_lock>
 8006886:	f8d8 3000 	ldr.w	r3, [r8]
 800688a:	461c      	mov	r4, r3
 800688c:	bb44      	cbnz	r4, 80068e0 <_malloc_r+0x88>
 800688e:	4629      	mov	r1, r5
 8006890:	4630      	mov	r0, r6
 8006892:	f7ff ffbf 	bl	8006814 <sbrk_aligned>
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	4604      	mov	r4, r0
 800689a:	d158      	bne.n	800694e <_malloc_r+0xf6>
 800689c:	f8d8 4000 	ldr.w	r4, [r8]
 80068a0:	4627      	mov	r7, r4
 80068a2:	2f00      	cmp	r7, #0
 80068a4:	d143      	bne.n	800692e <_malloc_r+0xd6>
 80068a6:	2c00      	cmp	r4, #0
 80068a8:	d04b      	beq.n	8006942 <_malloc_r+0xea>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	4639      	mov	r1, r7
 80068ae:	4630      	mov	r0, r6
 80068b0:	eb04 0903 	add.w	r9, r4, r3
 80068b4:	f000 fb5c 	bl	8006f70 <_sbrk_r>
 80068b8:	4581      	cmp	r9, r0
 80068ba:	d142      	bne.n	8006942 <_malloc_r+0xea>
 80068bc:	6821      	ldr	r1, [r4, #0]
 80068be:	1a6d      	subs	r5, r5, r1
 80068c0:	4629      	mov	r1, r5
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7ff ffa6 	bl	8006814 <sbrk_aligned>
 80068c8:	3001      	adds	r0, #1
 80068ca:	d03a      	beq.n	8006942 <_malloc_r+0xea>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	442b      	add	r3, r5
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	f8d8 3000 	ldr.w	r3, [r8]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	bb62      	cbnz	r2, 8006934 <_malloc_r+0xdc>
 80068da:	f8c8 7000 	str.w	r7, [r8]
 80068de:	e00f      	b.n	8006900 <_malloc_r+0xa8>
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	1b52      	subs	r2, r2, r5
 80068e4:	d420      	bmi.n	8006928 <_malloc_r+0xd0>
 80068e6:	2a0b      	cmp	r2, #11
 80068e8:	d917      	bls.n	800691a <_malloc_r+0xc2>
 80068ea:	1961      	adds	r1, r4, r5
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	6025      	str	r5, [r4, #0]
 80068f0:	bf18      	it	ne
 80068f2:	6059      	strne	r1, [r3, #4]
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	bf08      	it	eq
 80068f8:	f8c8 1000 	streq.w	r1, [r8]
 80068fc:	5162      	str	r2, [r4, r5]
 80068fe:	604b      	str	r3, [r1, #4]
 8006900:	4630      	mov	r0, r6
 8006902:	f000 f82f 	bl	8006964 <__malloc_unlock>
 8006906:	f104 000b 	add.w	r0, r4, #11
 800690a:	1d23      	adds	r3, r4, #4
 800690c:	f020 0007 	bic.w	r0, r0, #7
 8006910:	1ac2      	subs	r2, r0, r3
 8006912:	bf1c      	itt	ne
 8006914:	1a1b      	subne	r3, r3, r0
 8006916:	50a3      	strne	r3, [r4, r2]
 8006918:	e7af      	b.n	800687a <_malloc_r+0x22>
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	42a3      	cmp	r3, r4
 800691e:	bf0c      	ite	eq
 8006920:	f8c8 2000 	streq.w	r2, [r8]
 8006924:	605a      	strne	r2, [r3, #4]
 8006926:	e7eb      	b.n	8006900 <_malloc_r+0xa8>
 8006928:	4623      	mov	r3, r4
 800692a:	6864      	ldr	r4, [r4, #4]
 800692c:	e7ae      	b.n	800688c <_malloc_r+0x34>
 800692e:	463c      	mov	r4, r7
 8006930:	687f      	ldr	r7, [r7, #4]
 8006932:	e7b6      	b.n	80068a2 <_malloc_r+0x4a>
 8006934:	461a      	mov	r2, r3
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	42a3      	cmp	r3, r4
 800693a:	d1fb      	bne.n	8006934 <_malloc_r+0xdc>
 800693c:	2300      	movs	r3, #0
 800693e:	6053      	str	r3, [r2, #4]
 8006940:	e7de      	b.n	8006900 <_malloc_r+0xa8>
 8006942:	230c      	movs	r3, #12
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f80c 	bl	8006964 <__malloc_unlock>
 800694c:	e794      	b.n	8006878 <_malloc_r+0x20>
 800694e:	6005      	str	r5, [r0, #0]
 8006950:	e7d6      	b.n	8006900 <_malloc_r+0xa8>
 8006952:	bf00      	nop
 8006954:	20004d30 	.word	0x20004d30

08006958 <__malloc_lock>:
 8006958:	4801      	ldr	r0, [pc, #4]	@ (8006960 <__malloc_lock+0x8>)
 800695a:	f7ff bf01 	b.w	8006760 <__retarget_lock_acquire_recursive>
 800695e:	bf00      	nop
 8006960:	20004d28 	.word	0x20004d28

08006964 <__malloc_unlock>:
 8006964:	4801      	ldr	r0, [pc, #4]	@ (800696c <__malloc_unlock+0x8>)
 8006966:	f7ff befc 	b.w	8006762 <__retarget_lock_release_recursive>
 800696a:	bf00      	nop
 800696c:	20004d28 	.word	0x20004d28

08006970 <__ssputs_r>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	688e      	ldr	r6, [r1, #8]
 8006976:	461f      	mov	r7, r3
 8006978:	42be      	cmp	r6, r7
 800697a:	680b      	ldr	r3, [r1, #0]
 800697c:	4682      	mov	sl, r0
 800697e:	460c      	mov	r4, r1
 8006980:	4690      	mov	r8, r2
 8006982:	d82d      	bhi.n	80069e0 <__ssputs_r+0x70>
 8006984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800698c:	d026      	beq.n	80069dc <__ssputs_r+0x6c>
 800698e:	6965      	ldr	r5, [r4, #20]
 8006990:	6909      	ldr	r1, [r1, #16]
 8006992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006996:	eba3 0901 	sub.w	r9, r3, r1
 800699a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800699e:	1c7b      	adds	r3, r7, #1
 80069a0:	444b      	add	r3, r9
 80069a2:	106d      	asrs	r5, r5, #1
 80069a4:	429d      	cmp	r5, r3
 80069a6:	bf38      	it	cc
 80069a8:	461d      	movcc	r5, r3
 80069aa:	0553      	lsls	r3, r2, #21
 80069ac:	d527      	bpl.n	80069fe <__ssputs_r+0x8e>
 80069ae:	4629      	mov	r1, r5
 80069b0:	f7ff ff52 	bl	8006858 <_malloc_r>
 80069b4:	4606      	mov	r6, r0
 80069b6:	b360      	cbz	r0, 8006a12 <__ssputs_r+0xa2>
 80069b8:	6921      	ldr	r1, [r4, #16]
 80069ba:	464a      	mov	r2, r9
 80069bc:	f7ff fed2 	bl	8006764 <memcpy>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	6126      	str	r6, [r4, #16]
 80069ce:	6165      	str	r5, [r4, #20]
 80069d0:	444e      	add	r6, r9
 80069d2:	eba5 0509 	sub.w	r5, r5, r9
 80069d6:	6026      	str	r6, [r4, #0]
 80069d8:	60a5      	str	r5, [r4, #8]
 80069da:	463e      	mov	r6, r7
 80069dc:	42be      	cmp	r6, r7
 80069de:	d900      	bls.n	80069e2 <__ssputs_r+0x72>
 80069e0:	463e      	mov	r6, r7
 80069e2:	6820      	ldr	r0, [r4, #0]
 80069e4:	4632      	mov	r2, r6
 80069e6:	4641      	mov	r1, r8
 80069e8:	f000 faa8 	bl	8006f3c <memmove>
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	1b9b      	subs	r3, r3, r6
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	4433      	add	r3, r6
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	2000      	movs	r0, #0
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	462a      	mov	r2, r5
 8006a00:	f000 fac6 	bl	8006f90 <_realloc_r>
 8006a04:	4606      	mov	r6, r0
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d1e0      	bne.n	80069cc <__ssputs_r+0x5c>
 8006a0a:	6921      	ldr	r1, [r4, #16]
 8006a0c:	4650      	mov	r0, sl
 8006a0e:	f7ff feb7 	bl	8006780 <_free_r>
 8006a12:	230c      	movs	r3, #12
 8006a14:	f8ca 3000 	str.w	r3, [sl]
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	f04f 30ff 	mov.w	r0, #4294967295
 8006a24:	e7e9      	b.n	80069fa <__ssputs_r+0x8a>
	...

08006a28 <_svfiprintf_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	4698      	mov	r8, r3
 8006a2e:	898b      	ldrh	r3, [r1, #12]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	b09d      	sub	sp, #116	@ 0x74
 8006a34:	4607      	mov	r7, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	4614      	mov	r4, r2
 8006a3a:	d510      	bpl.n	8006a5e <_svfiprintf_r+0x36>
 8006a3c:	690b      	ldr	r3, [r1, #16]
 8006a3e:	b973      	cbnz	r3, 8006a5e <_svfiprintf_r+0x36>
 8006a40:	2140      	movs	r1, #64	@ 0x40
 8006a42:	f7ff ff09 	bl	8006858 <_malloc_r>
 8006a46:	6028      	str	r0, [r5, #0]
 8006a48:	6128      	str	r0, [r5, #16]
 8006a4a:	b930      	cbnz	r0, 8006a5a <_svfiprintf_r+0x32>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	b01d      	add	sp, #116	@ 0x74
 8006a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5a:	2340      	movs	r3, #64	@ 0x40
 8006a5c:	616b      	str	r3, [r5, #20]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a62:	2320      	movs	r3, #32
 8006a64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6c:	2330      	movs	r3, #48	@ 0x30
 8006a6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c0c <_svfiprintf_r+0x1e4>
 8006a72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a76:	f04f 0901 	mov.w	r9, #1
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	469a      	mov	sl, r3
 8006a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a82:	b10a      	cbz	r2, 8006a88 <_svfiprintf_r+0x60>
 8006a84:	2a25      	cmp	r2, #37	@ 0x25
 8006a86:	d1f9      	bne.n	8006a7c <_svfiprintf_r+0x54>
 8006a88:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8c:	d00b      	beq.n	8006aa6 <_svfiprintf_r+0x7e>
 8006a8e:	465b      	mov	r3, fp
 8006a90:	4622      	mov	r2, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7ff ff6b 	bl	8006970 <__ssputs_r>
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f000 80a7 	beq.w	8006bee <_svfiprintf_r+0x1c6>
 8006aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aa2:	445a      	add	r2, fp
 8006aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 809f 	beq.w	8006bee <_svfiprintf_r+0x1c6>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aba:	f10a 0a01 	add.w	sl, sl, #1
 8006abe:	9304      	str	r3, [sp, #16]
 8006ac0:	9307      	str	r3, [sp, #28]
 8006ac2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ac8:	4654      	mov	r4, sl
 8006aca:	2205      	movs	r2, #5
 8006acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad0:	484e      	ldr	r0, [pc, #312]	@ (8006c0c <_svfiprintf_r+0x1e4>)
 8006ad2:	f7f9 fb8d 	bl	80001f0 <memchr>
 8006ad6:	9a04      	ldr	r2, [sp, #16]
 8006ad8:	b9d8      	cbnz	r0, 8006b12 <_svfiprintf_r+0xea>
 8006ada:	06d0      	lsls	r0, r2, #27
 8006adc:	bf44      	itt	mi
 8006ade:	2320      	movmi	r3, #32
 8006ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ae4:	0711      	lsls	r1, r2, #28
 8006ae6:	bf44      	itt	mi
 8006ae8:	232b      	movmi	r3, #43	@ 0x2b
 8006aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aee:	f89a 3000 	ldrb.w	r3, [sl]
 8006af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af4:	d015      	beq.n	8006b22 <_svfiprintf_r+0xfa>
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	4654      	mov	r4, sl
 8006afa:	2000      	movs	r0, #0
 8006afc:	f04f 0c0a 	mov.w	ip, #10
 8006b00:	4621      	mov	r1, r4
 8006b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b06:	3b30      	subs	r3, #48	@ 0x30
 8006b08:	2b09      	cmp	r3, #9
 8006b0a:	d94b      	bls.n	8006ba4 <_svfiprintf_r+0x17c>
 8006b0c:	b1b0      	cbz	r0, 8006b3c <_svfiprintf_r+0x114>
 8006b0e:	9207      	str	r2, [sp, #28]
 8006b10:	e014      	b.n	8006b3c <_svfiprintf_r+0x114>
 8006b12:	eba0 0308 	sub.w	r3, r0, r8
 8006b16:	fa09 f303 	lsl.w	r3, r9, r3
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	46a2      	mov	sl, r4
 8006b20:	e7d2      	b.n	8006ac8 <_svfiprintf_r+0xa0>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	1d19      	adds	r1, r3, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	9103      	str	r1, [sp, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bfbb      	ittet	lt
 8006b2e:	425b      	neglt	r3, r3
 8006b30:	f042 0202 	orrlt.w	r2, r2, #2
 8006b34:	9307      	strge	r3, [sp, #28]
 8006b36:	9307      	strlt	r3, [sp, #28]
 8006b38:	bfb8      	it	lt
 8006b3a:	9204      	strlt	r2, [sp, #16]
 8006b3c:	7823      	ldrb	r3, [r4, #0]
 8006b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b40:	d10a      	bne.n	8006b58 <_svfiprintf_r+0x130>
 8006b42:	7863      	ldrb	r3, [r4, #1]
 8006b44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b46:	d132      	bne.n	8006bae <_svfiprintf_r+0x186>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b54:	3402      	adds	r4, #2
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c1c <_svfiprintf_r+0x1f4>
 8006b5c:	7821      	ldrb	r1, [r4, #0]
 8006b5e:	2203      	movs	r2, #3
 8006b60:	4650      	mov	r0, sl
 8006b62:	f7f9 fb45 	bl	80001f0 <memchr>
 8006b66:	b138      	cbz	r0, 8006b78 <_svfiprintf_r+0x150>
 8006b68:	9b04      	ldr	r3, [sp, #16]
 8006b6a:	eba0 000a 	sub.w	r0, r0, sl
 8006b6e:	2240      	movs	r2, #64	@ 0x40
 8006b70:	4082      	lsls	r2, r0
 8006b72:	4313      	orrs	r3, r2
 8006b74:	3401      	adds	r4, #1
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7c:	4824      	ldr	r0, [pc, #144]	@ (8006c10 <_svfiprintf_r+0x1e8>)
 8006b7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b82:	2206      	movs	r2, #6
 8006b84:	f7f9 fb34 	bl	80001f0 <memchr>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d036      	beq.n	8006bfa <_svfiprintf_r+0x1d2>
 8006b8c:	4b21      	ldr	r3, [pc, #132]	@ (8006c14 <_svfiprintf_r+0x1ec>)
 8006b8e:	bb1b      	cbnz	r3, 8006bd8 <_svfiprintf_r+0x1b0>
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	3307      	adds	r3, #7
 8006b94:	f023 0307 	bic.w	r3, r3, #7
 8006b98:	3308      	adds	r3, #8
 8006b9a:	9303      	str	r3, [sp, #12]
 8006b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9e:	4433      	add	r3, r6
 8006ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba2:	e76a      	b.n	8006a7a <_svfiprintf_r+0x52>
 8006ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ba8:	460c      	mov	r4, r1
 8006baa:	2001      	movs	r0, #1
 8006bac:	e7a8      	b.n	8006b00 <_svfiprintf_r+0xd8>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	3401      	adds	r4, #1
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f04f 0c0a 	mov.w	ip, #10
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc0:	3a30      	subs	r2, #48	@ 0x30
 8006bc2:	2a09      	cmp	r2, #9
 8006bc4:	d903      	bls.n	8006bce <_svfiprintf_r+0x1a6>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0c6      	beq.n	8006b58 <_svfiprintf_r+0x130>
 8006bca:	9105      	str	r1, [sp, #20]
 8006bcc:	e7c4      	b.n	8006b58 <_svfiprintf_r+0x130>
 8006bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e7f0      	b.n	8006bba <_svfiprintf_r+0x192>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	462a      	mov	r2, r5
 8006bde:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <_svfiprintf_r+0x1f0>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4638      	mov	r0, r7
 8006be4:	f3af 8000 	nop.w
 8006be8:	1c42      	adds	r2, r0, #1
 8006bea:	4606      	mov	r6, r0
 8006bec:	d1d6      	bne.n	8006b9c <_svfiprintf_r+0x174>
 8006bee:	89ab      	ldrh	r3, [r5, #12]
 8006bf0:	065b      	lsls	r3, r3, #25
 8006bf2:	f53f af2d 	bmi.w	8006a50 <_svfiprintf_r+0x28>
 8006bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bf8:	e72c      	b.n	8006a54 <_svfiprintf_r+0x2c>
 8006bfa:	ab03      	add	r3, sp, #12
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <_svfiprintf_r+0x1f0>)
 8006c02:	a904      	add	r1, sp, #16
 8006c04:	4638      	mov	r0, r7
 8006c06:	f000 f879 	bl	8006cfc <_printf_i>
 8006c0a:	e7ed      	b.n	8006be8 <_svfiprintf_r+0x1c0>
 8006c0c:	08007144 	.word	0x08007144
 8006c10:	0800714e 	.word	0x0800714e
 8006c14:	00000000 	.word	0x00000000
 8006c18:	08006971 	.word	0x08006971
 8006c1c:	0800714a 	.word	0x0800714a

08006c20 <_printf_common>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	4616      	mov	r6, r2
 8006c26:	4698      	mov	r8, r3
 8006c28:	688a      	ldr	r2, [r1, #8]
 8006c2a:	690b      	ldr	r3, [r1, #16]
 8006c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	bfb8      	it	lt
 8006c34:	4613      	movlt	r3, r2
 8006c36:	6033      	str	r3, [r6, #0]
 8006c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	b10a      	cbz	r2, 8006c46 <_printf_common+0x26>
 8006c42:	3301      	adds	r3, #1
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	0699      	lsls	r1, r3, #26
 8006c4a:	bf42      	ittt	mi
 8006c4c:	6833      	ldrmi	r3, [r6, #0]
 8006c4e:	3302      	addmi	r3, #2
 8006c50:	6033      	strmi	r3, [r6, #0]
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	f015 0506 	ands.w	r5, r5, #6
 8006c58:	d106      	bne.n	8006c68 <_printf_common+0x48>
 8006c5a:	f104 0a19 	add.w	sl, r4, #25
 8006c5e:	68e3      	ldr	r3, [r4, #12]
 8006c60:	6832      	ldr	r2, [r6, #0]
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dc26      	bgt.n	8006cb6 <_printf_common+0x96>
 8006c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	3b00      	subs	r3, #0
 8006c70:	bf18      	it	ne
 8006c72:	2301      	movne	r3, #1
 8006c74:	0692      	lsls	r2, r2, #26
 8006c76:	d42b      	bmi.n	8006cd0 <_printf_common+0xb0>
 8006c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	4638      	mov	r0, r7
 8006c80:	47c8      	blx	r9
 8006c82:	3001      	adds	r0, #1
 8006c84:	d01e      	beq.n	8006cc4 <_printf_common+0xa4>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	6922      	ldr	r2, [r4, #16]
 8006c8a:	f003 0306 	and.w	r3, r3, #6
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	bf02      	ittt	eq
 8006c92:	68e5      	ldreq	r5, [r4, #12]
 8006c94:	6833      	ldreq	r3, [r6, #0]
 8006c96:	1aed      	subeq	r5, r5, r3
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	bf0c      	ite	eq
 8006c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ca0:	2500      	movne	r5, #0
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	bfc4      	itt	gt
 8006ca6:	1a9b      	subgt	r3, r3, r2
 8006ca8:	18ed      	addgt	r5, r5, r3
 8006caa:	2600      	movs	r6, #0
 8006cac:	341a      	adds	r4, #26
 8006cae:	42b5      	cmp	r5, r6
 8006cb0:	d11a      	bne.n	8006ce8 <_printf_common+0xc8>
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	e008      	b.n	8006cc8 <_printf_common+0xa8>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4652      	mov	r2, sl
 8006cba:	4641      	mov	r1, r8
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	47c8      	blx	r9
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d103      	bne.n	8006ccc <_printf_common+0xac>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ccc:	3501      	adds	r5, #1
 8006cce:	e7c6      	b.n	8006c5e <_printf_common+0x3e>
 8006cd0:	18e1      	adds	r1, r4, r3
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	2030      	movs	r0, #48	@ 0x30
 8006cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cda:	4422      	add	r2, r4
 8006cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ce4:	3302      	adds	r3, #2
 8006ce6:	e7c7      	b.n	8006c78 <_printf_common+0x58>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4622      	mov	r2, r4
 8006cec:	4641      	mov	r1, r8
 8006cee:	4638      	mov	r0, r7
 8006cf0:	47c8      	blx	r9
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d0e6      	beq.n	8006cc4 <_printf_common+0xa4>
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	e7d9      	b.n	8006cae <_printf_common+0x8e>
	...

08006cfc <_printf_i>:
 8006cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d00:	7e0f      	ldrb	r7, [r1, #24]
 8006d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d04:	2f78      	cmp	r7, #120	@ 0x78
 8006d06:	4691      	mov	r9, r2
 8006d08:	4680      	mov	r8, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	469a      	mov	sl, r3
 8006d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d12:	d807      	bhi.n	8006d24 <_printf_i+0x28>
 8006d14:	2f62      	cmp	r7, #98	@ 0x62
 8006d16:	d80a      	bhi.n	8006d2e <_printf_i+0x32>
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	f000 80d2 	beq.w	8006ec2 <_printf_i+0x1c6>
 8006d1e:	2f58      	cmp	r7, #88	@ 0x58
 8006d20:	f000 80b9 	beq.w	8006e96 <_printf_i+0x19a>
 8006d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d2c:	e03a      	b.n	8006da4 <_printf_i+0xa8>
 8006d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d32:	2b15      	cmp	r3, #21
 8006d34:	d8f6      	bhi.n	8006d24 <_printf_i+0x28>
 8006d36:	a101      	add	r1, pc, #4	@ (adr r1, 8006d3c <_printf_i+0x40>)
 8006d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d3c:	08006d95 	.word	0x08006d95
 8006d40:	08006da9 	.word	0x08006da9
 8006d44:	08006d25 	.word	0x08006d25
 8006d48:	08006d25 	.word	0x08006d25
 8006d4c:	08006d25 	.word	0x08006d25
 8006d50:	08006d25 	.word	0x08006d25
 8006d54:	08006da9 	.word	0x08006da9
 8006d58:	08006d25 	.word	0x08006d25
 8006d5c:	08006d25 	.word	0x08006d25
 8006d60:	08006d25 	.word	0x08006d25
 8006d64:	08006d25 	.word	0x08006d25
 8006d68:	08006ea9 	.word	0x08006ea9
 8006d6c:	08006dd3 	.word	0x08006dd3
 8006d70:	08006e63 	.word	0x08006e63
 8006d74:	08006d25 	.word	0x08006d25
 8006d78:	08006d25 	.word	0x08006d25
 8006d7c:	08006ecb 	.word	0x08006ecb
 8006d80:	08006d25 	.word	0x08006d25
 8006d84:	08006dd3 	.word	0x08006dd3
 8006d88:	08006d25 	.word	0x08006d25
 8006d8c:	08006d25 	.word	0x08006d25
 8006d90:	08006e6b 	.word	0x08006e6b
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	1d1a      	adds	r2, r3, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6032      	str	r2, [r6, #0]
 8006d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006da4:	2301      	movs	r3, #1
 8006da6:	e09d      	b.n	8006ee4 <_printf_i+0x1e8>
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	6820      	ldr	r0, [r4, #0]
 8006dac:	1d19      	adds	r1, r3, #4
 8006dae:	6031      	str	r1, [r6, #0]
 8006db0:	0606      	lsls	r6, r0, #24
 8006db2:	d501      	bpl.n	8006db8 <_printf_i+0xbc>
 8006db4:	681d      	ldr	r5, [r3, #0]
 8006db6:	e003      	b.n	8006dc0 <_printf_i+0xc4>
 8006db8:	0645      	lsls	r5, r0, #25
 8006dba:	d5fb      	bpl.n	8006db4 <_printf_i+0xb8>
 8006dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	da03      	bge.n	8006dcc <_printf_i+0xd0>
 8006dc4:	232d      	movs	r3, #45	@ 0x2d
 8006dc6:	426d      	negs	r5, r5
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dcc:	4859      	ldr	r0, [pc, #356]	@ (8006f34 <_printf_i+0x238>)
 8006dce:	230a      	movs	r3, #10
 8006dd0:	e011      	b.n	8006df6 <_printf_i+0xfa>
 8006dd2:	6821      	ldr	r1, [r4, #0]
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	0608      	lsls	r0, r1, #24
 8006dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ddc:	d402      	bmi.n	8006de4 <_printf_i+0xe8>
 8006dde:	0649      	lsls	r1, r1, #25
 8006de0:	bf48      	it	mi
 8006de2:	b2ad      	uxthmi	r5, r5
 8006de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006de6:	4853      	ldr	r0, [pc, #332]	@ (8006f34 <_printf_i+0x238>)
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	bf14      	ite	ne
 8006dec:	230a      	movne	r3, #10
 8006dee:	2308      	moveq	r3, #8
 8006df0:	2100      	movs	r1, #0
 8006df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006df6:	6866      	ldr	r6, [r4, #4]
 8006df8:	60a6      	str	r6, [r4, #8]
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	bfa2      	ittt	ge
 8006dfe:	6821      	ldrge	r1, [r4, #0]
 8006e00:	f021 0104 	bicge.w	r1, r1, #4
 8006e04:	6021      	strge	r1, [r4, #0]
 8006e06:	b90d      	cbnz	r5, 8006e0c <_printf_i+0x110>
 8006e08:	2e00      	cmp	r6, #0
 8006e0a:	d04b      	beq.n	8006ea4 <_printf_i+0x1a8>
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e12:	fb03 5711 	mls	r7, r3, r1, r5
 8006e16:	5dc7      	ldrb	r7, [r0, r7]
 8006e18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e1c:	462f      	mov	r7, r5
 8006e1e:	42bb      	cmp	r3, r7
 8006e20:	460d      	mov	r5, r1
 8006e22:	d9f4      	bls.n	8006e0e <_printf_i+0x112>
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d10b      	bne.n	8006e40 <_printf_i+0x144>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	07df      	lsls	r7, r3, #31
 8006e2c:	d508      	bpl.n	8006e40 <_printf_i+0x144>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	6861      	ldr	r1, [r4, #4]
 8006e32:	4299      	cmp	r1, r3
 8006e34:	bfde      	ittt	le
 8006e36:	2330      	movle	r3, #48	@ 0x30
 8006e38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e40:	1b92      	subs	r2, r2, r6
 8006e42:	6122      	str	r2, [r4, #16]
 8006e44:	f8cd a000 	str.w	sl, [sp]
 8006e48:	464b      	mov	r3, r9
 8006e4a:	aa03      	add	r2, sp, #12
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4640      	mov	r0, r8
 8006e50:	f7ff fee6 	bl	8006c20 <_printf_common>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d14a      	bne.n	8006eee <_printf_i+0x1f2>
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	b004      	add	sp, #16
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	f043 0320 	orr.w	r3, r3, #32
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	4833      	ldr	r0, [pc, #204]	@ (8006f38 <_printf_i+0x23c>)
 8006e6c:	2778      	movs	r7, #120	@ 0x78
 8006e6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	6831      	ldr	r1, [r6, #0]
 8006e76:	061f      	lsls	r7, r3, #24
 8006e78:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e7c:	d402      	bmi.n	8006e84 <_printf_i+0x188>
 8006e7e:	065f      	lsls	r7, r3, #25
 8006e80:	bf48      	it	mi
 8006e82:	b2ad      	uxthmi	r5, r5
 8006e84:	6031      	str	r1, [r6, #0]
 8006e86:	07d9      	lsls	r1, r3, #31
 8006e88:	bf44      	itt	mi
 8006e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e8e:	6023      	strmi	r3, [r4, #0]
 8006e90:	b11d      	cbz	r5, 8006e9a <_printf_i+0x19e>
 8006e92:	2310      	movs	r3, #16
 8006e94:	e7ac      	b.n	8006df0 <_printf_i+0xf4>
 8006e96:	4827      	ldr	r0, [pc, #156]	@ (8006f34 <_printf_i+0x238>)
 8006e98:	e7e9      	b.n	8006e6e <_printf_i+0x172>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	f023 0320 	bic.w	r3, r3, #32
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	e7f6      	b.n	8006e92 <_printf_i+0x196>
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	e7bd      	b.n	8006e24 <_printf_i+0x128>
 8006ea8:	6833      	ldr	r3, [r6, #0]
 8006eaa:	6825      	ldr	r5, [r4, #0]
 8006eac:	6961      	ldr	r1, [r4, #20]
 8006eae:	1d18      	adds	r0, r3, #4
 8006eb0:	6030      	str	r0, [r6, #0]
 8006eb2:	062e      	lsls	r6, r5, #24
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	d501      	bpl.n	8006ebc <_printf_i+0x1c0>
 8006eb8:	6019      	str	r1, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <_printf_i+0x1c6>
 8006ebc:	0668      	lsls	r0, r5, #25
 8006ebe:	d5fb      	bpl.n	8006eb8 <_printf_i+0x1bc>
 8006ec0:	8019      	strh	r1, [r3, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	4616      	mov	r6, r2
 8006ec8:	e7bc      	b.n	8006e44 <_printf_i+0x148>
 8006eca:	6833      	ldr	r3, [r6, #0]
 8006ecc:	1d1a      	adds	r2, r3, #4
 8006ece:	6032      	str	r2, [r6, #0]
 8006ed0:	681e      	ldr	r6, [r3, #0]
 8006ed2:	6862      	ldr	r2, [r4, #4]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7f9 f98a 	bl	80001f0 <memchr>
 8006edc:	b108      	cbz	r0, 8006ee2 <_printf_i+0x1e6>
 8006ede:	1b80      	subs	r0, r0, r6
 8006ee0:	6060      	str	r0, [r4, #4]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eec:	e7aa      	b.n	8006e44 <_printf_i+0x148>
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	47d0      	blx	sl
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d0ad      	beq.n	8006e58 <_printf_i+0x15c>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	079b      	lsls	r3, r3, #30
 8006f00:	d413      	bmi.n	8006f2a <_printf_i+0x22e>
 8006f02:	68e0      	ldr	r0, [r4, #12]
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	4298      	cmp	r0, r3
 8006f08:	bfb8      	it	lt
 8006f0a:	4618      	movlt	r0, r3
 8006f0c:	e7a6      	b.n	8006e5c <_printf_i+0x160>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4632      	mov	r2, r6
 8006f12:	4649      	mov	r1, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	47d0      	blx	sl
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d09d      	beq.n	8006e58 <_printf_i+0x15c>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	9903      	ldr	r1, [sp, #12]
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	dcf2      	bgt.n	8006f0e <_printf_i+0x212>
 8006f28:	e7eb      	b.n	8006f02 <_printf_i+0x206>
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	f104 0619 	add.w	r6, r4, #25
 8006f30:	e7f5      	b.n	8006f1e <_printf_i+0x222>
 8006f32:	bf00      	nop
 8006f34:	08007155 	.word	0x08007155
 8006f38:	08007166 	.word	0x08007166

08006f3c <memmove>:
 8006f3c:	4288      	cmp	r0, r1
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	eb01 0402 	add.w	r4, r1, r2
 8006f44:	d902      	bls.n	8006f4c <memmove+0x10>
 8006f46:	4284      	cmp	r4, r0
 8006f48:	4623      	mov	r3, r4
 8006f4a:	d807      	bhi.n	8006f5c <memmove+0x20>
 8006f4c:	1e43      	subs	r3, r0, #1
 8006f4e:	42a1      	cmp	r1, r4
 8006f50:	d008      	beq.n	8006f64 <memmove+0x28>
 8006f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f5a:	e7f8      	b.n	8006f4e <memmove+0x12>
 8006f5c:	4402      	add	r2, r0
 8006f5e:	4601      	mov	r1, r0
 8006f60:	428a      	cmp	r2, r1
 8006f62:	d100      	bne.n	8006f66 <memmove+0x2a>
 8006f64:	bd10      	pop	{r4, pc}
 8006f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f6e:	e7f7      	b.n	8006f60 <memmove+0x24>

08006f70 <_sbrk_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	@ (8006f8c <_sbrk_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fb f858 	bl	8002030 <_sbrk>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_sbrk_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_sbrk_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20004d24 	.word	0x20004d24

08006f90 <_realloc_r>:
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	4680      	mov	r8, r0
 8006f96:	4615      	mov	r5, r2
 8006f98:	460c      	mov	r4, r1
 8006f9a:	b921      	cbnz	r1, 8006fa6 <_realloc_r+0x16>
 8006f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	f7ff bc59 	b.w	8006858 <_malloc_r>
 8006fa6:	b92a      	cbnz	r2, 8006fb4 <_realloc_r+0x24>
 8006fa8:	f7ff fbea 	bl	8006780 <_free_r>
 8006fac:	2400      	movs	r4, #0
 8006fae:	4620      	mov	r0, r4
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	f000 f81a 	bl	8006fec <_malloc_usable_size_r>
 8006fb8:	4285      	cmp	r5, r0
 8006fba:	4606      	mov	r6, r0
 8006fbc:	d802      	bhi.n	8006fc4 <_realloc_r+0x34>
 8006fbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fc2:	d8f4      	bhi.n	8006fae <_realloc_r+0x1e>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	f7ff fc46 	bl	8006858 <_malloc_r>
 8006fcc:	4607      	mov	r7, r0
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d0ec      	beq.n	8006fac <_realloc_r+0x1c>
 8006fd2:	42b5      	cmp	r5, r6
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	bf28      	it	cs
 8006fda:	4632      	movcs	r2, r6
 8006fdc:	f7ff fbc2 	bl	8006764 <memcpy>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	f7ff fbcc 	bl	8006780 <_free_r>
 8006fe8:	463c      	mov	r4, r7
 8006fea:	e7e0      	b.n	8006fae <_realloc_r+0x1e>

08006fec <_malloc_usable_size_r>:
 8006fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff0:	1f18      	subs	r0, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bfbc      	itt	lt
 8006ff6:	580b      	ldrlt	r3, [r1, r0]
 8006ff8:	18c0      	addlt	r0, r0, r3
 8006ffa:	4770      	bx	lr

08006ffc <_init>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr

08007008 <_fini>:
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700a:	bf00      	nop
 800700c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700e:	bc08      	pop	{r3}
 8007010:	469e      	mov	lr, r3
 8007012:	4770      	bx	lr
