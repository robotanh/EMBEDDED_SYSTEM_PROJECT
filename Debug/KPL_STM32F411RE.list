
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005a70  08005a70  00006a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b20  08005b20  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b20  08005b20  00006b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b28  08005b28  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005b30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c60  2000007c  08005bac  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cdc  08005bac  00007cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ee  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360b  00000000  00000000  0001da9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000210a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f59  00000000  00000000  00022498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fd5  00000000  00000000  000233f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016950  00000000  00000000  0003c3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098148  00000000  00000000  00052d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eae5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  000eaea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f04a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a58 	.word	0x08005a58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08005a58 	.word	0x08005a58

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <KeyPad_Scan>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
}

uint8_t KeyPad_Scan(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 80004d6:	f003 fe15 	bl	8004104 <xTaskGetTickCount>
 80004da:	6038      	str	r0, [r7, #0]

    if (currentMillis - lastDebounceTime < DEBOUNCE_DELAY) {
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <KeyPad_Scan+0xa0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80004e8:	d201      	bcs.n	80004ee <KeyPad_Scan+0x1e>
        return 0xFF;
 80004ea:	23ff      	movs	r3, #255	@ 0xff
 80004ec:	e03b      	b.n	8000566 <KeyPad_Scan+0x96>
    }

    for (uint8_t row = 0; row < 4; row++) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	e034      	b.n	800055e <KeyPad_Scan+0x8e>
        /* Set all rows low */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80004fa:	481e      	ldr	r0, [pc, #120]	@ (8000574 <KeyPad_Scan+0xa4>)
 80004fc:	f001 fa1a 	bl	8001934 <HAL_GPIO_WritePin>

        /* Set the current row high */
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 << row, GPIO_PIN_SET);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2240      	movs	r2, #64	@ 0x40
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	b29b      	uxth	r3, r3
 800050a:	2201      	movs	r2, #1
 800050c:	4619      	mov	r1, r3
 800050e:	4819      	ldr	r0, [pc, #100]	@ (8000574 <KeyPad_Scan+0xa4>)
 8000510:	f001 fa10 	bl	8001934 <HAL_GPIO_WritePin>

        /* Read each column */
        for (uint8_t col = 0; col < 5; col++) {
 8000514:	2300      	movs	r3, #0
 8000516:	71bb      	strb	r3, [r7, #6]
 8000518:	e01b      	b.n	8000552 <KeyPad_Scan+0x82>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0 << col) == GPIO_PIN_SET) {
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	2201      	movs	r2, #1
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	b29b      	uxth	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	4813      	ldr	r0, [pc, #76]	@ (8000574 <KeyPad_Scan+0xa4>)
 8000528:	f001 f9ec 	bl	8001904 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10c      	bne.n	800054c <KeyPad_Scan+0x7c>
                lastDebounceTime = currentMillis;
 8000532:	4a0f      	ldr	r2, [pc, #60]	@ (8000570 <KeyPad_Scan+0xa0>)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	6013      	str	r3, [r2, #0]
                return keyMap[row][col];
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	79b9      	ldrb	r1, [r7, #6]
 800053c:	480e      	ldr	r0, [pc, #56]	@ (8000578 <KeyPad_Scan+0xa8>)
 800053e:	4613      	mov	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	4403      	add	r3, r0
 8000546:	440b      	add	r3, r1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	e00c      	b.n	8000566 <KeyPad_Scan+0x96>
        for (uint8_t col = 0; col < 5; col++) {
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	3301      	adds	r3, #1
 8000550:	71bb      	strb	r3, [r7, #6]
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d9e0      	bls.n	800051a <KeyPad_Scan+0x4a>
    for (uint8_t row = 0; row < 4; row++) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	3301      	adds	r3, #1
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d9c7      	bls.n	80004f4 <KeyPad_Scan+0x24>
            }
        }
    }

    return 0xFF;
 8000564:	23ff      	movs	r3, #255	@ 0xff
}
 8000566:	4618      	mov	r0, r3
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000098 	.word	0x20000098
 8000574:	40020400 	.word	0x40020400
 8000578:	08005aac 	.word	0x08005aac

0800057c <KeyLogic>:

void KeyLogic() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    keyPressed = KeyPad_Scan();
 8000580:	f7ff ffa6 	bl	80004d0 <KeyPad_Scan>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	4b89      	ldr	r3, [pc, #548]	@ (80007b0 <KeyLogic+0x234>)
 800058a:	701a      	strb	r2, [r3, #0]

    switch (keyPressed) {
 800058c:	4b88      	ldr	r3, [pc, #544]	@ (80007b0 <KeyLogic+0x234>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3b30      	subs	r3, #48	@ 0x30
 8000592:	2b1a      	cmp	r3, #26
 8000594:	f200 8108 	bhi.w	80007a8 <KeyLogic+0x22c>
 8000598:	a201      	add	r2, pc, #4	@ (adr r2, 80005a0 <KeyLogic+0x24>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	0800060d 	.word	0x0800060d
 80005a4:	08000621 	.word	0x08000621
 80005a8:	08000635 	.word	0x08000635
 80005ac:	08000649 	.word	0x08000649
 80005b0:	0800065f 	.word	0x0800065f
 80005b4:	08000675 	.word	0x08000675
 80005b8:	08000689 	.word	0x08000689
 80005bc:	0800069d 	.word	0x0800069d
 80005c0:	080006b1 	.word	0x080006b1
 80005c4:	080006c5 	.word	0x080006c5
 80005c8:	080007a9 	.word	0x080007a9
 80005cc:	080007a9 	.word	0x080007a9
 80005d0:	080007a9 	.word	0x080007a9
 80005d4:	080007a9 	.word	0x080007a9
 80005d8:	080007a9 	.word	0x080007a9
 80005dc:	080007a9 	.word	0x080007a9
 80005e0:	080007a9 	.word	0x080007a9
 80005e4:	080006db 	.word	0x080006db
 80005e8:	080006f1 	.word	0x080006f1
 80005ec:	08000705 	.word	0x08000705
 80005f0:	08000719 	.word	0x08000719
 80005f4:	0800072d 	.word	0x0800072d
 80005f8:	08000741 	.word	0x08000741
 80005fc:	08000757 	.word	0x08000757
 8000600:	0800076d 	.word	0x0800076d
 8000604:	08000781 	.word	0x08000781
 8000608:	08000795 	.word	0x08000795
        case '0':
            SevenSegBuffer[0] = 1;
 800060c:	4b69      	ldr	r3, [pc, #420]	@ (80007b4 <KeyLogic+0x238>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000612:	4b68      	ldr	r3, [pc, #416]	@ (80007b4 <KeyLogic+0x238>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000618:	4b66      	ldr	r3, [pc, #408]	@ (80007b4 <KeyLogic+0x238>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
            break;
 800061e:	e0c4      	b.n	80007aa <KeyLogic+0x22e>
        case '1':
            SevenSegBuffer[0] = 10;
 8000620:	4b64      	ldr	r3, [pc, #400]	@ (80007b4 <KeyLogic+0x238>)
 8000622:	220a      	movs	r2, #10
 8000624:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000626:	4b63      	ldr	r3, [pc, #396]	@ (80007b4 <KeyLogic+0x238>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 800062c:	4b61      	ldr	r3, [pc, #388]	@ (80007b4 <KeyLogic+0x238>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
            break;
 8000632:	e0ba      	b.n	80007aa <KeyLogic+0x22e>
        case '2':
            SevenSegBuffer[0] = 100;
 8000634:	4b5f      	ldr	r3, [pc, #380]	@ (80007b4 <KeyLogic+0x238>)
 8000636:	2264      	movs	r2, #100	@ 0x64
 8000638:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 800063a:	4b5e      	ldr	r3, [pc, #376]	@ (80007b4 <KeyLogic+0x238>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000640:	4b5c      	ldr	r3, [pc, #368]	@ (80007b4 <KeyLogic+0x238>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
            break;
 8000646:	e0b0      	b.n	80007aa <KeyLogic+0x22e>
        case '3':
            SevenSegBuffer[0] = 1000;
 8000648:	4b5a      	ldr	r3, [pc, #360]	@ (80007b4 <KeyLogic+0x238>)
 800064a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064e:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000650:	4b58      	ldr	r3, [pc, #352]	@ (80007b4 <KeyLogic+0x238>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000656:	4b57      	ldr	r3, [pc, #348]	@ (80007b4 <KeyLogic+0x238>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
            break;
 800065c:	e0a5      	b.n	80007aa <KeyLogic+0x22e>
        case '4':
            SevenSegBuffer[0] = 10000;
 800065e:	4b55      	ldr	r3, [pc, #340]	@ (80007b4 <KeyLogic+0x238>)
 8000660:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000664:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000666:	4b53      	ldr	r3, [pc, #332]	@ (80007b4 <KeyLogic+0x238>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 800066c:	4b51      	ldr	r3, [pc, #324]	@ (80007b4 <KeyLogic+0x238>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
            break;
 8000672:	e09a      	b.n	80007aa <KeyLogic+0x22e>
        case '5':
            SevenSegBuffer[0] = 100000;
 8000674:	4b4f      	ldr	r3, [pc, #316]	@ (80007b4 <KeyLogic+0x238>)
 8000676:	4a50      	ldr	r2, [pc, #320]	@ (80007b8 <KeyLogic+0x23c>)
 8000678:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 800067a:	4b4e      	ldr	r3, [pc, #312]	@ (80007b4 <KeyLogic+0x238>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000680:	4b4c      	ldr	r3, [pc, #304]	@ (80007b4 <KeyLogic+0x238>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
            break;
 8000686:	e090      	b.n	80007aa <KeyLogic+0x22e>
        case '6':
            SevenSegBuffer[0] = 0;
 8000688:	4b4a      	ldr	r3, [pc, #296]	@ (80007b4 <KeyLogic+0x238>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 1;
 800068e:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <KeyLogic+0x238>)
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000694:	4b47      	ldr	r3, [pc, #284]	@ (80007b4 <KeyLogic+0x238>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
            break;
 800069a:	e086      	b.n	80007aa <KeyLogic+0x22e>
        case '7':
            SevenSegBuffer[0] = 0;
 800069c:	4b45      	ldr	r3, [pc, #276]	@ (80007b4 <KeyLogic+0x238>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 10;
 80006a2:	4b44      	ldr	r3, [pc, #272]	@ (80007b4 <KeyLogic+0x238>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 80006a8:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <KeyLogic+0x238>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
            break;
 80006ae:	e07c      	b.n	80007aa <KeyLogic+0x22e>
        case '8':
            SevenSegBuffer[0] = 0;
 80006b0:	4b40      	ldr	r3, [pc, #256]	@ (80007b4 <KeyLogic+0x238>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 100;
 80006b6:	4b3f      	ldr	r3, [pc, #252]	@ (80007b4 <KeyLogic+0x238>)
 80006b8:	2264      	movs	r2, #100	@ 0x64
 80006ba:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 80006bc:	4b3d      	ldr	r3, [pc, #244]	@ (80007b4 <KeyLogic+0x238>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
            break;
 80006c2:	e072      	b.n	80007aa <KeyLogic+0x22e>
        case '9':
            SevenSegBuffer[0] = 0;
 80006c4:	4b3b      	ldr	r3, [pc, #236]	@ (80007b4 <KeyLogic+0x238>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 1000;
 80006ca:	4b3a      	ldr	r3, [pc, #232]	@ (80007b4 <KeyLogic+0x238>)
 80006cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d0:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 80006d2:	4b38      	ldr	r3, [pc, #224]	@ (80007b4 <KeyLogic+0x238>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
            break;
 80006d8:	e067      	b.n	80007aa <KeyLogic+0x22e>
        case 'A':
            SevenSegBuffer[0] = 0;
 80006da:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <KeyLogic+0x238>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 10000;
 80006e0:	4b34      	ldr	r3, [pc, #208]	@ (80007b4 <KeyLogic+0x238>)
 80006e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006e6:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 80006e8:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <KeyLogic+0x238>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
            break;
 80006ee:	e05c      	b.n	80007aa <KeyLogic+0x22e>
        case 'B':
            SevenSegBuffer[0] = 0;
 80006f0:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <KeyLogic+0x238>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 100000;
 80006f6:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <KeyLogic+0x238>)
 80006f8:	4a2f      	ldr	r2, [pc, #188]	@ (80007b8 <KeyLogic+0x23c>)
 80006fa:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <KeyLogic+0x238>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
            break;
 8000702:	e052      	b.n	80007aa <KeyLogic+0x22e>
        case 'C':
            SevenSegBuffer[0] = 0;
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <KeyLogic+0x238>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <KeyLogic+0x238>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 1;
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <KeyLogic+0x238>)
 8000712:	2201      	movs	r2, #1
 8000714:	609a      	str	r2, [r3, #8]
            break;
 8000716:	e048      	b.n	80007aa <KeyLogic+0x22e>
        case 'D':
            SevenSegBuffer[0] = 0;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <KeyLogic+0x238>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <KeyLogic+0x238>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 10;
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <KeyLogic+0x238>)
 8000726:	220a      	movs	r2, #10
 8000728:	609a      	str	r2, [r3, #8]
            break;
 800072a:	e03e      	b.n	80007aa <KeyLogic+0x22e>
        case 'E':
            SevenSegBuffer[0] = 0;
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <KeyLogic+0x238>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <KeyLogic+0x238>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 100;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <KeyLogic+0x238>)
 800073a:	2264      	movs	r2, #100	@ 0x64
 800073c:	609a      	str	r2, [r3, #8]
            break;
 800073e:	e034      	b.n	80007aa <KeyLogic+0x22e>
        case 'F':
            SevenSegBuffer[0] = 0;
 8000740:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <KeyLogic+0x238>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <KeyLogic+0x238>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 1000;
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <KeyLogic+0x238>)
 800074e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000752:	609a      	str	r2, [r3, #8]
            break;
 8000754:	e029      	b.n	80007aa <KeyLogic+0x22e>
        case 'G':
            SevenSegBuffer[0] = 0;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <KeyLogic+0x238>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <KeyLogic+0x238>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 10000;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <KeyLogic+0x238>)
 8000764:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000768:	609a      	str	r2, [r3, #8]
            break;
 800076a:	e01e      	b.n	80007aa <KeyLogic+0x22e>
        case 'H':
            SevenSegBuffer[0] = 0;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <KeyLogic+0x238>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <KeyLogic+0x238>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 100000;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <KeyLogic+0x238>)
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <KeyLogic+0x23c>)
 800077c:	609a      	str	r2, [r3, #8]
            break;
 800077e:	e014      	b.n	80007aa <KeyLogic+0x22e>
        case 'I':
            SevenSegBuffer[0] = 0;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <KeyLogic+0x238>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <KeyLogic+0x238>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 11;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <KeyLogic+0x238>)
 800078e:	220b      	movs	r2, #11
 8000790:	609a      	str	r2, [r3, #8]
            break;
 8000792:	e00a      	b.n	80007aa <KeyLogic+0x22e>
        case 'J':
            SevenSegBuffer[0] = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <KeyLogic+0x238>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <KeyLogic+0x238>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 111;
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <KeyLogic+0x238>)
 80007a2:	226f      	movs	r2, #111	@ 0x6f
 80007a4:	609a      	str	r2, [r3, #8]
            break;
 80007a6:	e000      	b.n	80007aa <KeyLogic+0x22e>
        default:
            // No valid key pressed
            break;
 80007a8:	bf00      	nop
    }
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000010 	.word	0x20000010
 80007b8:	000186a0 	.word	0x000186a0

080007bc <SevenSegLEDsHandler>:
volatile uint8_t SevenSegScanState = 0;
uint32_t SevenSegBuffer[3] = {123456, 654321, 987654};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	f200 815d 	bhi.w	8000a8a <SevenSegLEDsHandler+0x2ce>
 80007d0:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <SevenSegLEDsHandler+0x1c>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	080007f1 	.word	0x080007f1
 80007dc:	0800084b 	.word	0x0800084b
 80007e0:	080008bd 	.word	0x080008bd
 80007e4:	0800092f 	.word	0x0800092f
 80007e8:	080009a1 	.word	0x080009a1
 80007ec:	08000a13 	.word	0x08000a13
        case 0:
            output[0] = buffer[0] % 10;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	4ba8      	ldr	r3, [pc, #672]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80007f6:	fba3 2301 	umull	r2, r3, r3, r1
 80007fa:	08da      	lsrs	r2, r3, #3
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	1aca      	subs	r2, r1, r3
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	4ba4      	ldr	r3, [pc, #656]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 800080a:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3304      	adds	r3, #4
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4ba1      	ldr	r3, [pc, #644]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000814:	fba3 2301 	umull	r2, r3, r3, r1
 8000818:	08da      	lsrs	r2, r3, #3
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	1aca      	subs	r2, r1, r3
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	4b9d      	ldr	r3, [pc, #628]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000828:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3308      	adds	r3, #8
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	4b99      	ldr	r3, [pc, #612]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000832:	fba3 2301 	umull	r2, r3, r3, r1
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	1aca      	subs	r2, r1, r3
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	4b95      	ldr	r3, [pc, #596]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000846:	709a      	strb	r2, [r3, #2]
            break;
 8000848:	e11f      	b.n	8000a8a <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a92      	ldr	r2, [pc, #584]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	08d9      	lsrs	r1, r3, #3
 8000856:	4b90      	ldr	r3, [pc, #576]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000858:	fba3 2301 	umull	r2, r3, r3, r1
 800085c:	08da      	lsrs	r2, r3, #3
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1aca      	subs	r2, r1, r3
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	4b8c      	ldr	r3, [pc, #560]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 800086c:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3304      	adds	r3, #4
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a88      	ldr	r2, [pc, #544]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	08d9      	lsrs	r1, r3, #3
 800087c:	4b86      	ldr	r3, [pc, #536]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 800087e:	fba3 2301 	umull	r2, r3, r3, r1
 8000882:	08da      	lsrs	r2, r3, #3
 8000884:	4613      	mov	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	1aca      	subs	r2, r1, r3
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	4b82      	ldr	r3, [pc, #520]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000892:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3308      	adds	r3, #8
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a7f      	ldr	r2, [pc, #508]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	08d9      	lsrs	r1, r3, #3
 80008a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80008a4:	fba3 2301 	umull	r2, r3, r3, r1
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	1aca      	subs	r2, r1, r3
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	4b79      	ldr	r3, [pc, #484]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 80008b8:	709a      	strb	r2, [r3, #2]
            break;
 80008ba:	e0e6      	b.n	8000a8a <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a77      	ldr	r2, [pc, #476]	@ (8000aa0 <SevenSegLEDsHandler+0x2e4>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0959      	lsrs	r1, r3, #5
 80008c8:	4b73      	ldr	r3, [pc, #460]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80008ca:	fba3 2301 	umull	r2, r3, r3, r1
 80008ce:	08da      	lsrs	r2, r3, #3
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1aca      	subs	r2, r1, r3
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	4b6f      	ldr	r3, [pc, #444]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 80008de:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3304      	adds	r3, #4
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a6e      	ldr	r2, [pc, #440]	@ (8000aa0 <SevenSegLEDsHandler+0x2e4>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	0959      	lsrs	r1, r3, #5
 80008ee:	4b6a      	ldr	r3, [pc, #424]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80008f0:	fba3 2301 	umull	r2, r3, r3, r1
 80008f4:	08da      	lsrs	r2, r3, #3
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	1aca      	subs	r2, r1, r3
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	4b66      	ldr	r3, [pc, #408]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000904:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3308      	adds	r3, #8
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a64      	ldr	r2, [pc, #400]	@ (8000aa0 <SevenSegLEDsHandler+0x2e4>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0959      	lsrs	r1, r3, #5
 8000914:	4b60      	ldr	r3, [pc, #384]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000916:	fba3 2301 	umull	r2, r3, r3, r1
 800091a:	08da      	lsrs	r2, r3, #3
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	1aca      	subs	r2, r1, r3
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	4b5c      	ldr	r3, [pc, #368]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 800092a:	709a      	strb	r2, [r3, #2]
            break;
 800092c:	e0ad      	b.n	8000a8a <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a5c      	ldr	r2, [pc, #368]	@ (8000aa4 <SevenSegLEDsHandler+0x2e8>)
 8000934:	fba2 2303 	umull	r2, r3, r2, r3
 8000938:	0999      	lsrs	r1, r3, #6
 800093a:	4b57      	ldr	r3, [pc, #348]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 800093c:	fba3 2301 	umull	r2, r3, r3, r1
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	4613      	mov	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	1aca      	subs	r2, r1, r3
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	4b53      	ldr	r3, [pc, #332]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000950:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3304      	adds	r3, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a52      	ldr	r2, [pc, #328]	@ (8000aa4 <SevenSegLEDsHandler+0x2e8>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	0999      	lsrs	r1, r3, #6
 8000960:	4b4d      	ldr	r3, [pc, #308]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000962:	fba3 2301 	umull	r2, r3, r3, r1
 8000966:	08da      	lsrs	r2, r3, #3
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	1aca      	subs	r2, r1, r3
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	4b49      	ldr	r3, [pc, #292]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000976:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3308      	adds	r3, #8
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a49      	ldr	r2, [pc, #292]	@ (8000aa4 <SevenSegLEDsHandler+0x2e8>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	0999      	lsrs	r1, r3, #6
 8000986:	4b44      	ldr	r3, [pc, #272]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000988:	fba3 2301 	umull	r2, r3, r3, r1
 800098c:	08da      	lsrs	r2, r3, #3
 800098e:	4613      	mov	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	4413      	add	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1aca      	subs	r2, r1, r3
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	4b40      	ldr	r3, [pc, #256]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 800099c:	709a      	strb	r2, [r3, #2]
            break;
 800099e:	e074      	b.n	8000a8a <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a40      	ldr	r2, [pc, #256]	@ (8000aa8 <SevenSegLEDsHandler+0x2ec>)
 80009a6:	fba2 2303 	umull	r2, r3, r2, r3
 80009aa:	0b59      	lsrs	r1, r3, #13
 80009ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80009ae:	fba3 2301 	umull	r2, r3, r3, r1
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	1aca      	subs	r2, r1, r3
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 80009c2:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3304      	adds	r3, #4
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a37      	ldr	r2, [pc, #220]	@ (8000aa8 <SevenSegLEDsHandler+0x2ec>)
 80009cc:	fba2 2303 	umull	r2, r3, r2, r3
 80009d0:	0b59      	lsrs	r1, r3, #13
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80009d4:	fba3 2301 	umull	r2, r3, r3, r1
 80009d8:	08da      	lsrs	r2, r3, #3
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	1aca      	subs	r2, r1, r3
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 80009e8:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3308      	adds	r3, #8
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa8 <SevenSegLEDsHandler+0x2ec>)
 80009f2:	fba2 2303 	umull	r2, r3, r2, r3
 80009f6:	0b59      	lsrs	r1, r3, #13
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 80009fa:	fba3 2301 	umull	r2, r3, r3, r1
 80009fe:	08da      	lsrs	r2, r3, #3
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	1aca      	subs	r2, r1, r3
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000a0e:	709a      	strb	r2, [r3, #2]
            break;
 8000a10:	e03b      	b.n	8000a8a <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	4a24      	ldr	r2, [pc, #144]	@ (8000aac <SevenSegLEDsHandler+0x2f0>)
 8000a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1e:	09d9      	lsrs	r1, r3, #7
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000a22:	fba3 2301 	umull	r2, r3, r3, r1
 8000a26:	08da      	lsrs	r2, r3, #3
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	1aca      	subs	r2, r1, r3
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000a36:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	4a1a      	ldr	r2, [pc, #104]	@ (8000aac <SevenSegLEDsHandler+0x2f0>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	09d9      	lsrs	r1, r3, #7
 8000a48:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000a4e:	08da      	lsrs	r2, r3, #3
 8000a50:	4613      	mov	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	1aca      	subs	r2, r1, r3
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000a5e:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3308      	adds	r3, #8
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <SevenSegLEDsHandler+0x2f0>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	09d9      	lsrs	r1, r3, #7
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <SevenSegLEDsHandler+0x2dc>)
 8000a72:	fba3 2301 	umull	r2, r3, r3, r1
 8000a76:	08da      	lsrs	r2, r3, #3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
 8000a86:	709a      	strb	r2, [r3, #2]
            break;
 8000a88:	bf00      	nop
    }
    return output;
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SevenSegLEDsHandler+0x2e0>)
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	cccccccd 	.word	0xcccccccd
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	51eb851f 	.word	0x51eb851f
 8000aa4:	10624dd3 	.word	0x10624dd3
 8000aa8:	d1b71759 	.word	0xd1b71759
 8000aac:	0a7c5ac5 	.word	0x0a7c5ac5

08000ab0 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
 8000abc:	4613      	mov	r3, r2
 8000abe:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fe79 	bl	80007bc <SevenSegLEDsHandler>
 8000aca:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <UpdateDisplayBuffer+0x64>
 8000ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad8 <UpdateDisplayBuffer+0x28>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000af1 	.word	0x08000af1
 8000adc:	08000af7 	.word	0x08000af7
 8000ae0:	08000afd 	.word	0x08000afd
 8000ae4:	08000b03 	.word	0x08000b03
 8000ae8:	08000b09 	.word	0x08000b09
 8000aec:	08000b0f 	.word	0x08000b0f
        case 0:
            curr_scan = 0b11111110;
 8000af0:	23fe      	movs	r3, #254	@ 0xfe
 8000af2:	73fb      	strb	r3, [r7, #15]
            break;
 8000af4:	e011      	b.n	8000b1a <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 8000af6:	23fd      	movs	r3, #253	@ 0xfd
 8000af8:	73fb      	strb	r3, [r7, #15]
            break;
 8000afa:	e00e      	b.n	8000b1a <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8000afc:	23fb      	movs	r3, #251	@ 0xfb
 8000afe:	73fb      	strb	r3, [r7, #15]
            break;
 8000b00:	e00b      	b.n	8000b1a <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 8000b02:	23f7      	movs	r3, #247	@ 0xf7
 8000b04:	73fb      	strb	r3, [r7, #15]
            break;
 8000b06:	e008      	b.n	8000b1a <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000b08:	23ef      	movs	r3, #239	@ 0xef
 8000b0a:	73fb      	strb	r3, [r7, #15]
            break;
 8000b0c:	e005      	b.n	8000b1a <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8000b0e:	23df      	movs	r3, #223	@ 0xdf
 8000b10:	73fb      	strb	r3, [r7, #15]
            break;
 8000b12:	e002      	b.n	8000b1a <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8000b14:	23ff      	movs	r3, #255	@ 0xff
 8000b16:	73fb      	strb	r3, [r7, #15]
            break;
 8000b18:	bf00      	nop
    }
    displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 8000b1a:	78ba      	ldrb	r2, [r7, #2]
 8000b1c:	491f      	ldr	r1, [pc, #124]	@ (8000b9c <UpdateDisplayBuffer+0xec>)
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	22ff      	movs	r2, #255	@ 0xff
 8000b28:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][1] = digitMapWithDP[curr_digit[2]];
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	78ba      	ldrb	r2, [r7, #2]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <UpdateDisplayBuffer+0xf0>)
 8000b36:	5c58      	ldrb	r0, [r3, r1]
 8000b38:	4918      	ldr	r1, [pc, #96]	@ (8000b9c <UpdateDisplayBuffer+0xec>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	3301      	adds	r3, #1
 8000b44:	4602      	mov	r2, r0
 8000b46:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][2] = curr_scan;
 8000b48:	78ba      	ldrb	r2, [r7, #2]
 8000b4a:	4914      	ldr	r1, [pc, #80]	@ (8000b9c <UpdateDisplayBuffer+0xec>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	3302      	adds	r3, #2
 8000b56:	7bfa      	ldrb	r2, [r7, #15]
 8000b58:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[1]];
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	78ba      	ldrb	r2, [r7, #2]
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <UpdateDisplayBuffer+0xf0>)
 8000b66:	5c58      	ldrb	r0, [r3, r1]
 8000b68:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <UpdateDisplayBuffer+0xec>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	3303      	adds	r3, #3
 8000b74:	4602      	mov	r2, r0
 8000b76:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][4] = digitMapWithDP[curr_digit[0]];
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	78ba      	ldrb	r2, [r7, #2]
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <UpdateDisplayBuffer+0xf0>)
 8000b82:	5c58      	ldrb	r0, [r3, r1]
 8000b84:	4905      	ldr	r1, [pc, #20]	@ (8000b9c <UpdateDisplayBuffer+0xec>)
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	3304      	adds	r3, #4
 8000b90:	4602      	mov	r2, r0
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000a0 	.word	0x200000a0
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <SevenSegLEDsScan+0x7c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	bfb8      	it	lt
 8000bba:	425b      	neglt	r3, r3
 8000bbc:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <SevenSegLEDsScan+0x80>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <SevenSegLEDsScan+0x84>)
 8000bca:	f7ff ff71 	bl	8000ab0 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bce:	b672      	cpsid	i
}
 8000bd0:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <SevenSegLEDsScan+0x7c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <SevenSegLEDsScan+0x88>)
 8000be2:	4413      	add	r3, r2
 8000be4:	2105      	movs	r1, #5
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f824 	bl	8000c34 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8000bec:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <SevenSegLEDsScan+0x7c>)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf2:	b662      	cpsie	i
}
 8000bf4:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <SevenSegLEDsScan+0x80>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <SevenSegLEDsScan+0x8c>)
 8000c00:	fb83 3102 	smull	r3, r1, r3, r2
 8000c04:	17d3      	asrs	r3, r2, #31
 8000c06:	1ac9      	subs	r1, r1, r3
 8000c08:	460b      	mov	r3, r1
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	440b      	add	r3, r1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	1ad1      	subs	r1, r2, r3
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <SevenSegLEDsScan+0x80>)
 8000c16:	701a      	strb	r2, [r3, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000aa 	.word	0x200000aa
 8000c24:	2000009c 	.word	0x2000009c
 8000c28:	20000010 	.word	0x20000010
 8000c2c:	200000a0 	.word	0x200000a0
 8000c30:	2aaaaaab 	.word	0x2aaaaaab

08000c34 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c44:	4823      	ldr	r0, [pc, #140]	@ (8000cd4 <ShiftOut_SPI+0xa0>)
 8000c46:	f000 fe75 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	4822      	ldr	r0, [pc, #136]	@ (8000cd8 <ShiftOut_SPI+0xa4>)
 8000c50:	f000 fe70 	bl	8001934 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e003      	b.n	8000c62 <ShiftOut_SPI+0x2e>
 8000c5a:	bf00      	nop
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c68:	dbf7      	blt.n	8000c5a <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000c6a:	bf00      	nop
 8000c6c:	481b      	ldr	r0, [pc, #108]	@ (8000cdc <ShiftOut_SPI+0xa8>)
 8000c6e:	f001 fcbd 	bl	80025ec <HAL_SPI_GetState>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d1f9      	bne.n	8000c6c <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4816      	ldr	r0, [pc, #88]	@ (8000cdc <ShiftOut_SPI+0xa8>)
 8000c84:	f001 fb6f 	bl	8002366 <HAL_SPI_Transmit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 8000c8e:	f000 f9e3 	bl	8001058 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	e003      	b.n	8000ca0 <ShiftOut_SPI+0x6c>
 8000c98:	bf00      	nop
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ca6:	dbf7      	blt.n	8000c98 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000ca8:	bf00      	nop
 8000caa:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <ShiftOut_SPI+0xa8>)
 8000cac:	f001 fc9e 	bl	80025ec <HAL_SPI_GetState>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d1f9      	bne.n	8000caa <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <ShiftOut_SPI+0xa0>)
 8000cbe:	f000 fe39 	bl	8001934 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2180      	movs	r1, #128	@ 0x80
 8000cc6:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <ShiftOut_SPI+0xa4>)
 8000cc8:	f000 fe34 	bl	8001934 <HAL_GPIO_WritePin>

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	200000b0 	.word	0x200000b0

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f000 fb66 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f828 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 f8fa 	bl	8000ee4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cf0:	f000 f88c 	bl	8000e0c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000cf4:	f000 f8c0 	bl	8000e78 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cf8:	f002 f81a 	bl	8002d30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8000cfc:	4a09      	ldr	r2, [pc, #36]	@ (8000d24 <main+0x44>)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <main+0x48>)
 8000d02:	f002 f85f 	bl	8002dc4 <osThreadNew>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <main+0x4c>)
 8000d0a:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8000d0c:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <main+0x50>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <main+0x54>)
 8000d12:	f002 f857 	bl	8002dc4 <osThreadNew>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <main+0x58>)
 8000d1a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d1c:	f002 f82c 	bl	8002d78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <main+0x40>
 8000d24:	08005ac0 	.word	0x08005ac0
 8000d28:	08000fe9 	.word	0x08000fe9
 8000d2c:	20000160 	.word	0x20000160
 8000d30:	08005ae4 	.word	0x08005ae4
 8000d34:	08001025 	.word	0x08001025
 8000d38:	20000164 	.word	0x20000164

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	@ 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	@ 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 fd9c 	bl	8005888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	4a26      	ldr	r2, [pc, #152]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d70:	4b24      	ldr	r3, [pc, #144]	@ (8000e04 <SystemClock_Config+0xc8>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <SystemClock_Config+0xcc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da0:	2310      	movs	r3, #16
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	2302      	movs	r3, #2
 8000da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000db0:	2364      	movs	r3, #100	@ 0x64
 8000db2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fdd1 	bl	8001968 <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dcc:	f000 f944 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2103      	movs	r1, #3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f833 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000df8:	f000 f92e 	bl	8001058 <Error_Handler>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3750      	adds	r7, #80	@ 0x50
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e12:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <MX_SPI1_Init+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e40:	2220      	movs	r2, #32
 8000e42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e58:	220a      	movs	r2, #10
 8000e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <MX_SPI1_Init+0x64>)
 8000e5e:	f001 f9f9 	bl	8002254 <HAL_SPI_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e68:	f000 f8f6 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000b0 	.word	0x200000b0
 8000e74:	40013000 	.word	0x40013000

08000e78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <MX_SPI2_Init+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ea8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000ec4:	220a      	movs	r2, #10
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <MX_SPI2_Init+0x64>)
 8000eca:	f001 f9c3 	bl	8002254 <HAL_SPI_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ed4:	f000 f8c0 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000108 	.word	0x20000108
 8000ee0:	40003800 	.word	0x40003800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a36      	ldr	r2, [pc, #216]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a28      	ldr	r2, [pc, #160]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <MX_GPIO_Init+0xf8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000f70:	481b      	ldr	r0, [pc, #108]	@ (8000fe0 <MX_GPIO_Init+0xfc>)
 8000f72:	f000 fcdf 	bl	8001934 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2180      	movs	r1, #128	@ 0x80
 8000f7a:	481a      	ldr	r0, [pc, #104]	@ (8000fe4 <MX_GPIO_Init+0x100>)
 8000f7c:	f000 fcda 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000f80:	231f      	movs	r3, #31
 8000f82:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <MX_GPIO_Init+0xfc>)
 8000f94:	f000 fb32 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000f98:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8000f9c:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480b      	ldr	r0, [pc, #44]	@ (8000fe0 <MX_GPIO_Init+0xfc>)
 8000fb2:	f000 fb23 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_GPIO_Init+0x100>)
 8000fce:	f000 fb15 	bl	80015fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <Led3x6Run+0x38>)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffa:	6018      	str	r0, [r3, #0]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8001000:	f7ff fdd0 	bl	8000ba4 <SevenSegLEDsScan>
	  osDelay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f001 ff6f 	bl	8002ee8 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2105      	movs	r1, #5
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe0f 	bl	8000c34 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f001 ff66 	bl	8002ee8 <osDelay>
	  SevenSegLEDsScan();
 800101c:	bf00      	nop
 800101e:	e7ef      	b.n	8001000 <Led3x6Run+0x18>
 8001020:	08005a8c 	.word	0x08005a8c

08001024 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 800102c:	f7ff faa6 	bl	800057c <KeyLogic>
    osDelay(100);
 8001030:	2064      	movs	r0, #100	@ 0x64
 8001032:	f001 ff59 	bl	8002ee8 <osDelay>
	 KeyLogic();
 8001036:	bf00      	nop
 8001038:	e7f8      	b.n	800102c <KeyPad4x5Run+0x8>

0800103a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800104a:	d101      	bne.n	8001050 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800104c:	f000 f9d4 	bl	80013f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <Error_Handler+0x8>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_MspInit+0x54>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	4a11      	ldr	r2, [pc, #68]	@ (80010b8 <HAL_MspInit+0x54>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001078:	6453      	str	r3, [r2, #68]	@ 0x44
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_MspInit+0x54>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_MspInit+0x54>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_MspInit+0x54>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <HAL_MspInit+0x54>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	210f      	movs	r1, #15
 80010a6:	f06f 0001 	mvn.w	r0, #1
 80010aa:	f000 fa7d 	bl	80015a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	@ 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a41      	ldr	r2, [pc, #260]	@ (80011e0 <HAL_SPI_MspInit+0x124>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12c      	bne.n	8001138 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b40      	ldr	r3, [pc, #256]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a3f      	ldr	r2, [pc, #252]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a38      	ldr	r2, [pc, #224]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b36      	ldr	r3, [pc, #216]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001116:	23a0      	movs	r3, #160	@ 0xa0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001126:	2305      	movs	r3, #5
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	482d      	ldr	r0, [pc, #180]	@ (80011e8 <HAL_SPI_MspInit+0x12c>)
 8001132:	f000 fa63 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001136:	e04f      	b.n	80011d8 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2b      	ldr	r2, [pc, #172]	@ (80011ec <HAL_SPI_MspInit+0x130>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d14a      	bne.n	80011d8 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a26      	ldr	r2, [pc, #152]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a1f      	ldr	r2, [pc, #124]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_SPI_MspInit+0x128>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001196:	2308      	movs	r3, #8
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a6:	2305      	movs	r3, #5
 80011a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	480f      	ldr	r0, [pc, #60]	@ (80011f0 <HAL_SPI_MspInit+0x134>)
 80011b2:	f000 fa23 	bl	80015fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c8:	2305      	movs	r3, #5
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4808      	ldr	r0, [pc, #32]	@ (80011f4 <HAL_SPI_MspInit+0x138>)
 80011d4:	f000 fa12 	bl	80015fc <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	@ 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013000 	.word	0x40013000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40003800 	.word	0x40003800
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020400 	.word	0x40020400

080011f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	@ 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <HAL_InitTick+0xe8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a33      	ldr	r2, [pc, #204]	@ (80012e0 <HAL_InitTick+0xe8>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <HAL_InitTick+0xe8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001224:	f107 0210 	add.w	r2, r7, #16
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f000 ffde 	bl	80021f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123e:	f000 ffc3 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8001242:	6378      	str	r0, [r7, #52]	@ 0x34
 8001244:	e004      	b.n	8001250 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001246:	f000 ffbf 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001252:	4a24      	ldr	r2, [pc, #144]	@ (80012e4 <HAL_InitTick+0xec>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	3b01      	subs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_InitTick+0xf0>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_InitTick+0xf0>)
 8001268:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800126e:	4a1e      	ldr	r2, [pc, #120]	@ (80012e8 <HAL_InitTick+0xf0>)
 8001270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001272:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <HAL_InitTick+0xf0>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_InitTick+0xf0>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_InitTick+0xf0>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001286:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <HAL_InitTick+0xf0>)
 8001288:	f001 fa9a 	bl	80027c0 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001292:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001296:	2b00      	cmp	r3, #0
 8001298:	d11b      	bne.n	80012d2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800129a:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <HAL_InitTick+0xf0>)
 800129c:	f001 faea 	bl	8002874 <HAL_TIM_Base_Start_IT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ae:	201c      	movs	r0, #28
 80012b0:	f000 f996 	bl	80015e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	d808      	bhi.n	80012cc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80012ba:	2200      	movs	r2, #0
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	201c      	movs	r0, #28
 80012c0:	f000 f972 	bl	80015a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c4:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <HAL_InitTick+0xf4>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e002      	b.n	80012d2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3738      	adds	r7, #56	@ 0x38
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	20000168 	.word	0x20000168
 80012ec:	20000020 	.word	0x20000020

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <TIM2_IRQHandler+0x10>)
 800132e:	f001 fb03 	bl	8002938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000168 	.word	0x20000168

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f004 fad9 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fca5 	bl	8000ce0 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013a4:	08005b30 	.word	0x08005b30
  ldr r2, =_sbss
 80013a8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013ac:	20004cdc 	.word	0x20004cdc

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f8d8 	bl	8001592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff ff08 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fe3c 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000024 	.word	0x20000024
 800141c:	200001b0 	.word	0x200001b0

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200001b0 	.word	0x200001b0

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	@ (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	@ (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	@ (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	@ (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	@ 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff4c 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ba:	f7ff ff61 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	6978      	ldr	r0, [r7, #20]
 80015c6:	f7ff ffb1 	bl	800152c <NVIC_EncodePriority>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff80 	bl	80014d8 <__NVIC_SetPriority>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff54 	bl	800149c <__NVIC_EnableIRQ>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e159      	b.n	80018cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8148 	bne.w	80018c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d005      	beq.n	800164e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	2b02      	cmp	r3, #2
 800164c:	d130      	bne.n	80016b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a2 	beq.w	80018c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b57      	ldr	r3, [pc, #348]	@ (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a56      	ldr	r2, [pc, #344]	@ (80018e4 <HAL_GPIO_Init+0x2e8>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b54      	ldr	r3, [pc, #336]	@ (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179e:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <HAL_GPIO_Init+0x2ec>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	@ (80018ec <HAL_GPIO_Init+0x2f0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x202>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a48      	ldr	r2, [pc, #288]	@ (80018f0 <HAL_GPIO_Init+0x2f4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x1fe>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a47      	ldr	r2, [pc, #284]	@ (80018f4 <HAL_GPIO_Init+0x2f8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a46      	ldr	r2, [pc, #280]	@ (80018f8 <HAL_GPIO_Init+0x2fc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x1f6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a45      	ldr	r2, [pc, #276]	@ (80018fc <HAL_GPIO_Init+0x300>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x1f2>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	@ (80018e8 <HAL_GPIO_Init+0x2ec>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b38      	ldr	r3, [pc, #224]	@ (8001900 <HAL_GPIO_Init+0x304>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001842:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <HAL_GPIO_Init+0x304>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_GPIO_Init+0x304>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800186c:	4a24      	ldr	r2, [pc, #144]	@ (8001900 <HAL_GPIO_Init+0x304>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_GPIO_Init+0x304>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001896:	4a1a      	ldr	r2, [pc, #104]	@ (8001900 <HAL_GPIO_Init+0x304>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189c:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <HAL_GPIO_Init+0x304>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <HAL_GPIO_Init+0x304>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f aea2 	bls.w	8001618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e267      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	4b88      	ldr	r3, [pc, #544]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b85      	ldr	r3, [pc, #532]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b82      	ldr	r3, [pc, #520]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e242      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a75      	ldr	r2, [pc, #468]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b70      	ldr	r3, [pc, #448]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6f      	ldr	r2, [pc, #444]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6c      	ldr	r2, [pc, #432]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a68      	ldr	r2, [pc, #416]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a65      	ldr	r2, [pc, #404]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fcfe 	bl	8001420 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fcfa 	bl	8001420 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e207      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fcea 	bl	8001420 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fce6 	bl	8001420 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	@ 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1f3      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b51      	ldr	r3, [pc, #324]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b44      	ldr	r3, [pc, #272]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b41      	ldr	r3, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1c7      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4937      	ldr	r1, [pc, #220]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b34      	ldr	r3, [pc, #208]	@ (8001bac <HAL_RCC_OscConfig+0x244>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fc9f 	bl	8001420 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fc9b 	bl	8001420 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1a8      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4925      	ldr	r1, [pc, #148]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <HAL_RCC_OscConfig+0x244>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc7e 	bl	8001420 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc7a 	bl	8001420 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e187      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <HAL_RCC_OscConfig+0x248>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fc5e 	bl	8001420 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fc5a 	bl	8001420 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e167      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
 8001b86:	e01b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_RCC_OscConfig+0x248>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fc47 	bl	8001420 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e00e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fc43 	bl	8001420 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d907      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e150      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470000 	.word	0x42470000
 8001bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b88      	ldr	r3, [pc, #544]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ea      	bne.n	8001b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8097 	beq.w	8001cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b81      	ldr	r3, [pc, #516]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b7d      	ldr	r3, [pc, #500]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a7c      	ldr	r2, [pc, #496]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b7a      	ldr	r3, [pc, #488]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b77      	ldr	r3, [pc, #476]	@ (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b74      	ldr	r3, [pc, #464]	@ (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a73      	ldr	r2, [pc, #460]	@ (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fc03 	bl	8001420 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff fbff 	bl	8001420 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e10c      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b6a      	ldr	r3, [pc, #424]	@ (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2ea>
 8001c44:	4b64      	ldr	r3, [pc, #400]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c48:	4a63      	ldr	r2, [pc, #396]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x324>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x30c>
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c66:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0x324>
 8001c74:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	4a57      	ldr	r2, [pc, #348]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c80:	4b55      	ldr	r3, [pc, #340]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c84:	4a54      	ldr	r2, [pc, #336]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff fbc4 	bl	8001420 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fbc0 	bl	8001420 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e0cb      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ee      	beq.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fbae 	bl	8001420 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fbaa 	bl	8001420 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0b5      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ee      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b39      	ldr	r3, [pc, #228]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	4a38      	ldr	r2, [pc, #224]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a1 	beq.w	8001e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d06:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d05c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d141      	bne.n	8001d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb7e 	bl	8001420 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff fb7a 	bl	8001420 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e087      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	491b      	ldr	r1, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb53 	bl	8001420 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fb4f 	bl	8001420 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e05c      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x416>
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fb3c 	bl	8001420 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fb38 	bl	8001420 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e045      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
 8001dca:	e03d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e038      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_RCC_OscConfig+0x4ec>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d028      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d121      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	@ (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	@ (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	@ (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff fa6a 	bl	8001420 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff fa66 	bl	8001420 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	@ (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f8fa 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	08005b08 	.word	0x08005b08
 800201c:	2000001c 	.word	0x2000001c
 8002020:	20000020 	.word	0x20000020

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002028:	b090      	sub	sp, #64	@ 0x40
 800202a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002030:	2300      	movs	r3, #0
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002034:	2300      	movs	r3, #0
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203c:	4b59      	ldr	r3, [pc, #356]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d00d      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x40>
 8002048:	2b08      	cmp	r3, #8
 800204a:	f200 80a1 	bhi.w	8002190 <HAL_RCC_GetSysClockFreq+0x16c>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 8002052:	2b04      	cmp	r3, #4
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
 8002056:	e09b      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b53      	ldr	r3, [pc, #332]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800205a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800205c:	e09b      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800205e:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002060:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002062:	e098      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002064:	4b4f      	ldr	r3, [pc, #316]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206e:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d028      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b4a      	ldr	r3, [pc, #296]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	2200      	movs	r2, #0
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	627a      	str	r2, [r7, #36]	@ 0x24
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800208c:	2100      	movs	r1, #0
 800208e:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002090:	fb03 f201 	mul.w	r2, r3, r1
 8002094:	2300      	movs	r3, #0
 8002096:	fb00 f303 	mul.w	r3, r0, r3
 800209a:	4413      	add	r3, r2
 800209c:	4a43      	ldr	r2, [pc, #268]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x188>)
 800209e:	fba0 1202 	umull	r1, r2, r0, r2
 80020a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020a4:	460a      	mov	r2, r1
 80020a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020aa:	4413      	add	r3, r2
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b0:	2200      	movs	r2, #0
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	61fa      	str	r2, [r7, #28]
 80020b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020be:	f7fe f88f 	bl	80001e0 <__aeabi_uldivmod>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4613      	mov	r3, r2
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ca:	e053      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020cc:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	099b      	lsrs	r3, r3, #6
 80020d2:	2200      	movs	r2, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	617a      	str	r2, [r7, #20]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020de:	f04f 0b00 	mov.w	fp, #0
 80020e2:	4652      	mov	r2, sl
 80020e4:	465b      	mov	r3, fp
 80020e6:	f04f 0000 	mov.w	r0, #0
 80020ea:	f04f 0100 	mov.w	r1, #0
 80020ee:	0159      	lsls	r1, r3, #5
 80020f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f4:	0150      	lsls	r0, r2, #5
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	ebb2 080a 	subs.w	r8, r2, sl
 80020fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800210e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002112:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002116:	ebb2 0408 	subs.w	r4, r2, r8
 800211a:	eb63 0509 	sbc.w	r5, r3, r9
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	00eb      	lsls	r3, r5, #3
 8002128:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800212c:	00e2      	lsls	r2, r4, #3
 800212e:	4614      	mov	r4, r2
 8002130:	461d      	mov	r5, r3
 8002132:	eb14 030a 	adds.w	r3, r4, sl
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	eb45 030b 	adc.w	r3, r5, fp
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800214a:	4629      	mov	r1, r5
 800214c:	028b      	lsls	r3, r1, #10
 800214e:	4621      	mov	r1, r4
 8002150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002154:	4621      	mov	r1, r4
 8002156:	028a      	lsls	r2, r1, #10
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215e:	2200      	movs	r2, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	60fa      	str	r2, [r7, #12]
 8002164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002168:	f7fe f83a 	bl	80001e0 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4613      	mov	r3, r2
 8002172:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002198:	4618      	mov	r0, r3
 800219a:	3740      	adds	r7, #64	@ 0x40
 800219c:	46bd      	mov	sp, r7
 800219e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	017d7840 	.word	0x017d7840

080021b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000001c 	.word	0x2000001c

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0a9b      	lsrs	r3, r3, #10
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4903      	ldr	r1, [pc, #12]	@ (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08005b18 	.word	0x08005b18

080021f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	220f      	movs	r2, #15
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_RCC_GetClockConfig+0x5c>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <HAL_RCC_GetClockConfig+0x5c>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_RCC_GetClockConfig+0x5c>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_RCC_GetClockConfig+0x5c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HAL_RCC_GetClockConfig+0x60>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0207 	and.w	r2, r3, #7
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07b      	b.n	800235e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002276:	d009      	beq.n	800228c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
 800227e:	e005      	b.n	800228c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe ff08 	bl	80010bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0104 	and.w	r1, r3, #4
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f003 0210 	and.w	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800234c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_SPI_Transmit+0x22>
 8002384:	2302      	movs	r3, #2
 8002386:	e12d      	b.n	80025e4 <HAL_SPI_Transmit+0x27e>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002390:	f7ff f846 	bl	8001420 <HAL_GetTick>
 8002394:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d002      	beq.n	80023ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023aa:	e116      	b.n	80025da <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_SPI_Transmit+0x52>
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023bc:	e10d      	b.n	80025da <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002404:	d10f      	bne.n	8002426 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002414:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002424:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002430:	2b40      	cmp	r3, #64	@ 0x40
 8002432:	d007      	beq.n	8002444 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800244c:	d14f      	bne.n	80024ee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_SPI_Transmit+0xf6>
 8002456:	8afb      	ldrh	r3, [r7, #22]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d142      	bne.n	80024e2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	1c9a      	adds	r2, r3, #2
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002480:	e02f      	b.n	80024e2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d112      	bne.n	80024b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	1c9a      	adds	r2, r3, #2
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024b4:	e015      	b.n	80024e2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b6:	f7fe ffb3 	bl	8001420 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d803      	bhi.n	80024ce <HAL_SPI_Transmit+0x168>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d102      	bne.n	80024d4 <HAL_SPI_Transmit+0x16e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80024e0:	e07b      	b.n	80025da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ca      	bne.n	8002482 <HAL_SPI_Transmit+0x11c>
 80024ec:	e050      	b.n	8002590 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_SPI_Transmit+0x196>
 80024f6:	8afb      	ldrh	r3, [r7, #22]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d144      	bne.n	8002586 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	7812      	ldrb	r2, [r2, #0]
 8002508:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002522:	e030      	b.n	8002586 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d113      	bne.n	800255a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002558:	e015      	b.n	8002586 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800255a:	f7fe ff61 	bl	8001420 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d803      	bhi.n	8002572 <HAL_SPI_Transmit+0x20c>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d102      	bne.n	8002578 <HAL_SPI_Transmit+0x212>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002584:	e029      	b.n	80025da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1c9      	bne.n	8002524 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f8bf 	bl	8002718 <SPI_EndRxTxTransaction>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e003      	b.n	80025da <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025fa:	b2db      	uxtb	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002618:	f7fe ff02 	bl	8001420 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	4413      	add	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002628:	f7fe fefa 	bl	8001420 <HAL_GetTick>
 800262c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800262e:	4b39      	ldr	r3, [pc, #228]	@ (8002714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	015b      	lsls	r3, r3, #5
 8002634:	0d1b      	lsrs	r3, r3, #20
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263e:	e054      	b.n	80026ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d050      	beq.n	80026ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002648:	f7fe feea 	bl	8001420 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	429a      	cmp	r2, r3
 8002656:	d902      	bls.n	800265e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d13d      	bne.n	80026da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800266c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002676:	d111      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002680:	d004      	beq.n	800268c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268a:	d107      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a4:	d10f      	bne.n	80026c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e017      	b.n	800270a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d19b      	bne.n	8002640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000001c 	.word	0x2000001c

08002718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2201      	movs	r2, #1
 800272c:	2102      	movs	r1, #2
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff ff6a 	bl	8002608 <SPI_WaitFlagStateUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e032      	b.n	80027b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <SPI_EndRxTxTransaction+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1b      	ldr	r2, [pc, #108]	@ (80027bc <SPI_EndRxTxTransaction+0xa4>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	0d5b      	lsrs	r3, r3, #21
 8002756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002768:	d112      	bne.n	8002790 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff ff47 	bl	8002608 <SPI_WaitFlagStateUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d016      	beq.n	80027ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e00f      	b.n	80027b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3b01      	subs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b80      	cmp	r3, #128	@ 0x80
 80027a8:	d0f2      	beq.n	8002790 <SPI_EndRxTxTransaction+0x78>
 80027aa:	e000      	b.n	80027ae <SPI_EndRxTxTransaction+0x96>
        break;
 80027ac:	bf00      	nop
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000001c 	.word	0x2000001c
 80027bc:	165e9f81 	.word	0x165e9f81

080027c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e041      	b.n	8002856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f839 	bl	800285e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	f000 f9b2 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e044      	b.n	8002916 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_TIM_Base_Start_IT+0xb0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d018      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b6:	d013      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002928 <HAL_TIM_Base_Start_IT+0xb4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00e      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_TIM_Base_Start_IT+0xb8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <HAL_TIM_Base_Start_IT+0xbc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_TIM_Base_Start_IT+0x6c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a16      	ldr	r2, [pc, #88]	@ (8002934 <HAL_TIM_Base_Start_IT+0xc0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d010      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	e007      	b.n	8002914 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800
 8002930:	40000c00 	.word	0x40000c00
 8002934:	40014000 	.word	0x40014000

08002938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8d2 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8c4 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8d5 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0204 	mvn.w	r2, #4
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8ac 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f89e 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f8af 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f886 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f878 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f889 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0210 	mvn.w	r2, #16
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2208      	movs	r2, #8
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f860 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f852 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f863 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0201 	mvn.w	r2, #1
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe facb 	bl	800103a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8e6 	bl	8002c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f834 	bl	8002b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8b8 	bl	8002c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c64 <TIM_Base_SetConfig+0xfc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00f      	beq.n	8002ba0 <TIM_Base_SetConfig+0x38>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b86:	d00b      	beq.n	8002ba0 <TIM_Base_SetConfig+0x38>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a37      	ldr	r2, [pc, #220]	@ (8002c68 <TIM_Base_SetConfig+0x100>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d007      	beq.n	8002ba0 <TIM_Base_SetConfig+0x38>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a36      	ldr	r2, [pc, #216]	@ (8002c6c <TIM_Base_SetConfig+0x104>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_Base_SetConfig+0x38>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a35      	ldr	r2, [pc, #212]	@ (8002c70 <TIM_Base_SetConfig+0x108>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d108      	bne.n	8002bb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c64 <TIM_Base_SetConfig+0xfc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01b      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d017      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a28      	ldr	r2, [pc, #160]	@ (8002c68 <TIM_Base_SetConfig+0x100>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a27      	ldr	r2, [pc, #156]	@ (8002c6c <TIM_Base_SetConfig+0x104>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00f      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <TIM_Base_SetConfig+0x108>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a25      	ldr	r2, [pc, #148]	@ (8002c74 <TIM_Base_SetConfig+0x10c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a24      	ldr	r2, [pc, #144]	@ (8002c78 <TIM_Base_SetConfig+0x110>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0x8a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a23      	ldr	r2, [pc, #140]	@ (8002c7c <TIM_Base_SetConfig+0x114>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c64 <TIM_Base_SetConfig+0xfc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f023 0201 	bic.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]
  }
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <__NVIC_SetPriority>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	db0a      	blt.n	8002cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	490c      	ldr	r1, [pc, #48]	@ (8002cf4 <__NVIC_SetPriority+0x4c>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cd0:	e00a      	b.n	8002ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <__NVIC_SetPriority+0x50>)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3b04      	subs	r3, #4
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	761a      	strb	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <SysTick_Handler+0x1c>)
 8002d02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d04:	f001 fd46 	bl	8004794 <xTaskGetSchedulerState>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d0e:	f002 fb3b 	bl	8005388 <xPortSysTickHandler>
  }
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d20:	2100      	movs	r1, #0
 8002d22:	f06f 0004 	mvn.w	r0, #4
 8002d26:	f7ff ffbf 	bl	8002ca8 <__NVIC_SetPriority>
#endif
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d36:	f3ef 8305 	mrs	r3, IPSR
 8002d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8002d3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d42:	f06f 0305 	mvn.w	r3, #5
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	e00c      	b.n	8002d64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <osKernelInitialize+0x44>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <osKernelInitialize+0x44>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	e002      	b.n	8002d64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d64:	687b      	ldr	r3, [r7, #4]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	200001b4 	.word	0x200001b4

08002d78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d7e:	f3ef 8305 	mrs	r3, IPSR
 8002d82:	603b      	str	r3, [r7, #0]
  return(result);
 8002d84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d8a:	f06f 0305 	mvn.w	r3, #5
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	e010      	b.n	8002db4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <osKernelStart+0x48>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d109      	bne.n	8002dae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d9a:	f7ff ffbf 	bl	8002d1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <osKernelStart+0x48>)
 8002da0:	2202      	movs	r2, #2
 8002da2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002da4:	f001 f892 	bl	8003ecc <vTaskStartScheduler>
      stat = osOK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	e002      	b.n	8002db4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002db4:	687b      	ldr	r3, [r7, #4]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200001b4 	.word	0x200001b4

08002dc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	@ 0x38
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd4:	f3ef 8305 	mrs	r3, IPSR
 8002dd8:	617b      	str	r3, [r7, #20]
  return(result);
 8002dda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d17e      	bne.n	8002ede <osThreadNew+0x11a>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d07b      	beq.n	8002ede <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002dea:	2318      	movs	r3, #24
 8002dec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d045      	beq.n	8002e8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <osThreadNew+0x48>
        name = attr->name;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <osThreadNew+0x6e>
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b38      	cmp	r3, #56	@ 0x38
 8002e24:	d805      	bhi.n	8002e32 <osThreadNew+0x6e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <osThreadNew+0x72>
        return (NULL);
 8002e32:	2300      	movs	r3, #0
 8002e34:	e054      	b.n	8002ee0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	089b      	lsrs	r3, r3, #2
 8002e44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <osThreadNew+0xa8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2ba7      	cmp	r3, #167	@ 0xa7
 8002e54:	d90a      	bls.n	8002e6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <osThreadNew+0xa8>
        mem = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e010      	b.n	8002e8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10c      	bne.n	8002e8e <osThreadNew+0xca>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d108      	bne.n	8002e8e <osThreadNew+0xca>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <osThreadNew+0xca>
          mem = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e001      	b.n	8002e8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d110      	bne.n	8002eb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e9c:	9202      	str	r2, [sp, #8]
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6a3a      	ldr	r2, [r7, #32]
 8002ea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fe1a 	bl	8003ae4 <xTaskCreateStatic>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e013      	b.n	8002ede <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d110      	bne.n	8002ede <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fe68 	bl	8003ba4 <xTaskCreate>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d001      	beq.n	8002ede <osThreadNew+0x11a>
            hTask = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ede:	693b      	ldr	r3, [r7, #16]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3728      	adds	r7, #40	@ 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef0:	f3ef 8305 	mrs	r3, IPSR
 8002ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <osDelay+0x1c>
    stat = osErrorISR;
 8002efc:	f06f 0305 	mvn.w	r3, #5
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e007      	b.n	8002f14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 ffa6 	bl	8003e60 <vTaskDelay>
    }
  }

  return (stat);
 8002f14:	68fb      	ldr	r3, [r7, #12]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a07      	ldr	r2, [pc, #28]	@ (8002f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8002f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <vApplicationGetIdleTaskMemory+0x30>)
 8002f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	@ 0x80
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	200001b8 	.word	0x200001b8
 8002f50:	20000260 	.word	0x20000260

08002f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a07      	ldr	r2, [pc, #28]	@ (8002f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4a06      	ldr	r2, [pc, #24]	@ (8002f84 <vApplicationGetTimerTaskMemory+0x30>)
 8002f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	20000460 	.word	0x20000460
 8002f84:	20000508 	.word	0x20000508

08002f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f103 0208 	add.w	r2, r3, #8
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f103 0208 	add.w	r2, r3, #8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f103 0208 	add.w	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d103      	bne.n	800304a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e00c      	b.n	8003064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3308      	adds	r3, #8
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e002      	b.n	8003058 <vListInsert+0x2e>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d2f6      	bcs.n	8003052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6852      	ldr	r2, [r2, #4]
 80030bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d103      	bne.n	80030d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1e5a      	subs	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003116:	bf00      	nop
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800311c:	f002 f8a4 	bl	8005268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	3b01      	subs	r3, #1
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	441a      	add	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	22ff      	movs	r2, #255	@ 0xff
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	22ff      	movs	r2, #255	@ 0xff
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d114      	bne.n	800319c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01a      	beq.n	80031b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3310      	adds	r3, #16
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f942 	bl	8004408 <xTaskRemoveFromEventList>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d012      	beq.n	80031b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <xQueueGenericReset+0xd0>)
 800318c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	e009      	b.n	80031b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3310      	adds	r3, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fef1 	bl	8002f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3324      	adds	r3, #36	@ 0x24
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff feec 	bl	8002f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031b0:	f002 f88c 	bl	80052cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031b4:	2301      	movs	r3, #1
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000ed04 	.word	0xe000ed04

080031c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	@ 0x38
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <xQueueGenericCreateStatic+0x56>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <xQueueGenericCreateStatic+0x5a>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <xQueueGenericCreateStatic+0x5c>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	623b      	str	r3, [r7, #32]
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <xQueueGenericCreateStatic+0x84>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <xQueueGenericCreateStatic+0x88>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <xQueueGenericCreateStatic+0x8a>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	61fb      	str	r3, [r7, #28]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800326a:	2350      	movs	r3, #80	@ 0x50
 800326c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b50      	cmp	r3, #80	@ 0x50
 8003272:	d00b      	beq.n	800328c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61bb      	str	r3, [r7, #24]
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800328c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f805 	bl	80032be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3730      	adds	r7, #48	@ 0x30
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e002      	b.n	80032e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032ec:	2101      	movs	r1, #1
 80032ee:	69b8      	ldr	r0, [r7, #24]
 80032f0:	f7ff fefe 	bl	80030f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	@ 0x38
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003312:	2300      	movs	r3, #0
 8003314:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <xQueueGenericSend+0x34>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <xQueueGenericSend+0x42>
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <xQueueGenericSend+0x46>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <xQueueGenericSend+0x48>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <xQueueGenericSend+0x64>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d103      	bne.n	8003376 <xQueueGenericSend+0x72>
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <xQueueGenericSend+0x76>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <xQueueGenericSend+0x78>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <xQueueGenericSend+0x94>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	623b      	str	r3, [r7, #32]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003398:	f001 f9fc 	bl	8004794 <xTaskGetSchedulerState>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <xQueueGenericSend+0xa4>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <xQueueGenericSend+0xa8>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <xQueueGenericSend+0xaa>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <xQueueGenericSend+0xc6>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	61fb      	str	r3, [r7, #28]
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ca:	f001 ff4d 	bl	8005268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <xQueueGenericSend+0xdc>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d129      	bne.n	8003434 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033e6:	f000 fa0f 	bl	8003808 <prvCopyDataToQueue>
 80033ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	3324      	adds	r3, #36	@ 0x24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f805 	bl	8004408 <xTaskRemoveFromEventList>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <xQueueGenericSend+0x200>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	e00a      	b.n	800342c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800341c:	4b39      	ldr	r3, [pc, #228]	@ (8003504 <xQueueGenericSend+0x200>)
 800341e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800342c:	f001 ff4e 	bl	80052cc <vPortExitCritical>
				return pdPASS;
 8003430:	2301      	movs	r3, #1
 8003432:	e063      	b.n	80034fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800343a:	f001 ff47 	bl	80052cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800343e:	2300      	movs	r3, #0
 8003440:	e05c      	b.n	80034fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	4618      	mov	r0, r3
 800344e:	f001 f83f 	bl	80044d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003456:	f001 ff39 	bl	80052cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800345a:	f000 fda7 	bl	8003fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800345e:	f001 ff03 	bl	8005268 <vPortEnterCritical>
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003468:	b25b      	sxtb	r3, r3
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d103      	bne.n	8003478 <xQueueGenericSend+0x174>
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800347e:	b25b      	sxtb	r3, r3
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d103      	bne.n	800348e <xQueueGenericSend+0x18a>
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800348e:	f001 ff1d 	bl	80052cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003492:	1d3a      	adds	r2, r7, #4
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f001 f82e 	bl	80044fc <xTaskCheckForTimeOut>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d124      	bne.n	80034f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034a8:	f000 faa6 	bl	80039f8 <prvIsQueueFull>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	3310      	adds	r3, #16
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 ff52 	bl	8004364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034c2:	f000 fa31 	bl	8003928 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034c6:	f000 fd7f 	bl	8003fc8 <xTaskResumeAll>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f47f af7c 	bne.w	80033ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80034d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <xQueueGenericSend+0x200>)
 80034d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	e772      	b.n	80033ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034e6:	f000 fa1f 	bl	8003928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ea:	f000 fd6d 	bl	8003fc8 <xTaskResumeAll>
 80034ee:	e76c      	b.n	80033ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034f2:	f000 fa19 	bl	8003928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034f6:	f000 fd67 	bl	8003fc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3738      	adds	r7, #56	@ 0x38
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b090      	sub	sp, #64	@ 0x40
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <xQueueGenericSendFromISR+0x3e>
 800353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <xQueueGenericSendFromISR+0x42>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <xQueueGenericSendFromISR+0x44>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d103      	bne.n	8003576 <xQueueGenericSendFromISR+0x6e>
 800356e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <xQueueGenericSendFromISR+0x72>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <xQueueGenericSendFromISR+0x74>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	623b      	str	r3, [r7, #32]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003598:	f001 ff46 	bl	8005428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800359c:	f3ef 8211 	mrs	r2, BASEPRI
 80035a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	61fa      	str	r2, [r7, #28]
 80035b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <xQueueGenericSendFromISR+0xc2>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d12f      	bne.n	800362a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80035e0:	f000 f912 	bl	8003808 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d112      	bne.n	8003614 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	3324      	adds	r3, #36	@ 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 ff04 	bl	8004408 <xTaskRemoveFromEventList>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e007      	b.n	8003624 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003614:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003618:	3301      	adds	r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	b25a      	sxtb	r2, r3
 800361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003624:	2301      	movs	r3, #1
 8003626:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003628:	e001      	b.n	800362e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800362a:	2300      	movs	r3, #0
 800362c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003638:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800363a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800363c:	4618      	mov	r0, r3
 800363e:	3740      	adds	r7, #64	@ 0x40
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	@ 0x30
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <xQueueReceive+0x32>
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	623b      	str	r3, [r7, #32]
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	e7fd      	b.n	8003672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <xQueueReceive+0x40>
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <xQueueReceive+0x44>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <xQueueReceive+0x46>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <xQueueReceive+0x62>
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	61fb      	str	r3, [r7, #28]
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	e7fd      	b.n	80036a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a6:	f001 f875 	bl	8004794 <xTaskGetSchedulerState>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <xQueueReceive+0x72>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <xQueueReceive+0x76>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <xQueueReceive+0x78>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <xQueueReceive+0x94>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	61bb      	str	r3, [r7, #24]
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d8:	f001 fdc6 	bl	8005268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01f      	beq.n	8003728 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ec:	f000 f8f6 	bl	80038dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00f      	beq.n	8003720 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	3310      	adds	r3, #16
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fe7f 	bl	8004408 <xTaskRemoveFromEventList>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003710:	4b3c      	ldr	r3, [pc, #240]	@ (8003804 <xQueueReceive+0x1c0>)
 8003712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003720:	f001 fdd4 	bl	80052cc <vPortExitCritical>
				return pdPASS;
 8003724:	2301      	movs	r3, #1
 8003726:	e069      	b.n	80037fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800372e:	f001 fdcd 	bl	80052cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003732:	2300      	movs	r3, #0
 8003734:	e062      	b.n	80037fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fec5 	bl	80044d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003746:	2301      	movs	r3, #1
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800374a:	f001 fdbf 	bl	80052cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800374e:	f000 fc2d 	bl	8003fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003752:	f001 fd89 	bl	8005268 <vPortEnterCritical>
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800375c:	b25b      	sxtb	r3, r3
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003762:	d103      	bne.n	800376c <xQueueReceive+0x128>
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003772:	b25b      	sxtb	r3, r3
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d103      	bne.n	8003782 <xQueueReceive+0x13e>
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003782:	f001 fda3 	bl	80052cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003786:	1d3a      	adds	r2, r7, #4
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f000 feb4 	bl	80044fc <xTaskCheckForTimeOut>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d123      	bne.n	80037e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800379a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800379c:	f000 f916 	bl	80039cc <prvIsQueueEmpty>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d017      	beq.n	80037d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	3324      	adds	r3, #36	@ 0x24
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fdd8 	bl	8004364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037b6:	f000 f8b7 	bl	8003928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037ba:	f000 fc05 	bl	8003fc8 <xTaskResumeAll>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d189      	bne.n	80036d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80037c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003804 <xQueueReceive+0x1c0>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	e780      	b.n	80036d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037d8:	f000 f8a6 	bl	8003928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037dc:	f000 fbf4 	bl	8003fc8 <xTaskResumeAll>
 80037e0:	e77a      	b.n	80036d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037e4:	f000 f8a0 	bl	8003928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037e8:	f000 fbee 	bl	8003fc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037ee:	f000 f8ed 	bl	80039cc <prvIsQueueEmpty>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f43f af6f 	beq.w	80036d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3730      	adds	r7, #48	@ 0x30
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10d      	bne.n	8003842 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d14d      	bne.n	80038ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 ffcc 	bl	80047d0 <xTaskPriorityDisinherit>
 8003838:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e043      	b.n	80038ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d119      	bne.n	800387c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6858      	ldr	r0, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	461a      	mov	r2, r3
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	f002 f89c 	bl	8005990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	441a      	add	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	429a      	cmp	r2, r3
 8003870:	d32b      	bcc.n	80038ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e026      	b.n	80038ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68d8      	ldr	r0, [r3, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	461a      	mov	r2, r3
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	f002 f882 	bl	8005990 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	425b      	negs	r3, r3
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d207      	bcs.n	80038b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	425b      	negs	r3, r3
 80038b2:	441a      	add	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d105      	bne.n	80038ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038d2:	697b      	ldr	r3, [r7, #20]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d303      	bcc.n	8003910 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68d9      	ldr	r1, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	461a      	mov	r2, r3
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	f002 f838 	bl	8005990 <memcpy>
	}
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003930:	f001 fc9a 	bl	8005268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800393a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800393c:	e011      	b.n	8003962 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d012      	beq.n	800396c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3324      	adds	r3, #36	@ 0x24
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fd5c 	bl	8004408 <xTaskRemoveFromEventList>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003956:	f000 fe35 	bl	80045c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	3b01      	subs	r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	dce9      	bgt.n	800393e <prvUnlockQueue+0x16>
 800396a:	e000      	b.n	800396e <prvUnlockQueue+0x46>
					break;
 800396c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	22ff      	movs	r2, #255	@ 0xff
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003976:	f001 fca9 	bl	80052cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800397a:	f001 fc75 	bl	8005268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003984:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003986:	e011      	b.n	80039ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3310      	adds	r3, #16
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fd37 	bl	8004408 <xTaskRemoveFromEventList>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039a0:	f000 fe10 	bl	80045c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039a4:	7bbb      	ldrb	r3, [r7, #14]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	dce9      	bgt.n	8003988 <prvUnlockQueue+0x60>
 80039b4:	e000      	b.n	80039b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	22ff      	movs	r2, #255	@ 0xff
 80039bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80039c0:	f001 fc84 	bl	80052cc <vPortExitCritical>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039d4:	f001 fc48 	bl	8005268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e001      	b.n	80039ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ea:	f001 fc6f 	bl	80052cc <vPortExitCritical>

	return xReturn;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a00:	f001 fc32 	bl	8005268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d102      	bne.n	8003a16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e001      	b.n	8003a1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a1a:	f001 fc57 	bl	80052cc <vPortExitCritical>

	return xReturn;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e014      	b.n	8003a62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a38:	4a0f      	ldr	r2, [pc, #60]	@ (8003a78 <vQueueAddToRegistry+0x50>)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a44:	490c      	ldr	r1, [pc, #48]	@ (8003a78 <vQueueAddToRegistry+0x50>)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <vQueueAddToRegistry+0x50>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a5a:	e006      	b.n	8003a6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b07      	cmp	r3, #7
 8003a66:	d9e7      	bls.n	8003a38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000908 	.word	0x20000908

08003a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a8c:	f001 fbec 	bl	8005268 <vPortEnterCritical>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <vQueueWaitForMessageRestricted+0x2a>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d103      	bne.n	8003abc <vQueueWaitForMessageRestricted+0x40>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003abc:	f001 fc06 	bl	80052cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3324      	adds	r3, #36	@ 0x24
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fc6d 	bl	80043b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff26 	bl	8003928 <prvUnlockQueue>
	}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08e      	sub	sp, #56	@ 0x38
 8003ae8:	af04      	add	r7, sp, #16
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	623b      	str	r3, [r7, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61fb      	str	r3, [r7, #28]
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b2e:	23a8      	movs	r3, #168	@ 0xa8
 8003b30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2ba8      	cmp	r3, #168	@ 0xa8
 8003b36:	d00b      	beq.n	8003b50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	61bb      	str	r3, [r7, #24]
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01e      	beq.n	8003b96 <xTaskCreateStatic+0xb2>
 8003b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01b      	beq.n	8003b96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b70:	2300      	movs	r3, #0
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	9302      	str	r3, [sp, #8]
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f851 	bl	8003c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b90:	f000 f8f6 	bl	8003d80 <prvAddNewTaskToReadyList>
 8003b94:	e001      	b.n	8003b9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b9a:	697b      	ldr	r3, [r7, #20]
	}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3728      	adds	r7, #40	@ 0x28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08c      	sub	sp, #48	@ 0x30
 8003ba8:	af04      	add	r7, sp, #16
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fc77 	bl	80054ac <pvPortMalloc>
 8003bbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bc6:	20a8      	movs	r0, #168	@ 0xa8
 8003bc8:	f001 fc70 	bl	80054ac <pvPortMalloc>
 8003bcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bda:	e005      	b.n	8003be8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f001 fd33 	bl	8005648 <vPortFree>
 8003be2:	e001      	b.n	8003be8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d017      	beq.n	8003c1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9303      	str	r3, [sp, #12]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	9302      	str	r3, [sp, #8]
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f80f 	bl	8003c30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c12:	69f8      	ldr	r0, [r7, #28]
 8003c14:	f000 f8b4 	bl	8003d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	e002      	b.n	8003c24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c24:	69bb      	ldr	r3, [r7, #24]
	}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	461a      	mov	r2, r3
 8003c48:	21a5      	movs	r1, #165	@ 0xa5
 8003c4a:	f001 fe1d 	bl	8005888 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f023 0307 	bic.w	r3, r3, #7
 8003c66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	617b      	str	r3, [r7, #20]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01f      	beq.n	8003cd0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e012      	b.n	8003cbc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	7819      	ldrb	r1, [r3, #0]
 8003c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3334      	adds	r3, #52	@ 0x34
 8003ca6:	460a      	mov	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	d9e9      	bls.n	8003c96 <prvInitialiseNewTask+0x66>
 8003cc2:	e000      	b.n	8003cc6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003cc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cce:	e003      	b.n	8003cd8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	2b37      	cmp	r3, #55	@ 0x37
 8003cdc:	d901      	bls.n	8003ce2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cde:	2337      	movs	r3, #55	@ 0x37
 8003ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff f965 	bl	8002fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	3318      	adds	r3, #24
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff f960 	bl	8002fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d30:	3354      	adds	r3, #84	@ 0x54
 8003d32:	224c      	movs	r2, #76	@ 0x4c
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 fda6 	bl	8005888 <memset>
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <prvInitialiseNewTask+0x144>)
 8003d40:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	4a0c      	ldr	r2, [pc, #48]	@ (8003d78 <prvInitialiseNewTask+0x148>)
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d7c <prvInitialiseNewTask+0x14c>)
 8003d4c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	69b8      	ldr	r0, [r7, #24]
 8003d54:	f001 f95a 	bl	800500c <pxPortInitialiseStack>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d6a:	bf00      	nop
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20004b9c 	.word	0x20004b9c
 8003d78:	20004c04 	.word	0x20004c04
 8003d7c:	20004c6c 	.word	0x20004c6c

08003d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d88:	f001 fa6e 	bl	8005268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <prvAddNewTaskToReadyList+0xc4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3301      	adds	r3, #1
 8003d92:	4a2c      	ldr	r2, [pc, #176]	@ (8003e44 <prvAddNewTaskToReadyList+0xc4>)
 8003d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <prvAddNewTaskToReadyList+0xc8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e48 <prvAddNewTaskToReadyList+0xc8>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003da4:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <prvAddNewTaskToReadyList+0xc4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d110      	bne.n	8003dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dac:	f000 fc2e 	bl	800460c <prvInitialiseTaskLists>
 8003db0:	e00d      	b.n	8003dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003db2:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <prvAddNewTaskToReadyList+0xcc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dba:	4b23      	ldr	r3, [pc, #140]	@ (8003e48 <prvAddNewTaskToReadyList+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d802      	bhi.n	8003dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <prvAddNewTaskToReadyList+0xc8>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dce:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <prvAddNewTaskToReadyList+0xd0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <prvAddNewTaskToReadyList+0xd0>)
 8003dd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <prvAddNewTaskToReadyList+0xd0>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <prvAddNewTaskToReadyList+0xd4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d903      	bls.n	8003df4 <prvAddNewTaskToReadyList+0x74>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <prvAddNewTaskToReadyList+0xd4>)
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <prvAddNewTaskToReadyList+0xd8>)
 8003e02:	441a      	add	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7ff f8e9 	bl	8002fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e10:	f001 fa5c 	bl	80052cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <prvAddNewTaskToReadyList+0xcc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <prvAddNewTaskToReadyList+0xc8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d207      	bcs.n	8003e3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <prvAddNewTaskToReadyList+0xdc>)
 8003e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000e1c 	.word	0x20000e1c
 8003e48:	20000948 	.word	0x20000948
 8003e4c:	20000e28 	.word	0x20000e28
 8003e50:	20000e38 	.word	0x20000e38
 8003e54:	20000e24 	.word	0x20000e24
 8003e58:	2000094c 	.word	0x2000094c
 8003e5c:	e000ed04 	.word	0xe000ed04

08003e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e72:	4b14      	ldr	r3, [pc, #80]	@ (8003ec4 <vTaskDelay+0x64>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <vTaskDelay+0x32>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	60bb      	str	r3, [r7, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e92:	f000 f88b 	bl	8003fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e96:	2100      	movs	r1, #0
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fd09 	bl	80048b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e9e:	f000 f893 	bl	8003fc8 <xTaskResumeAll>
 8003ea2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <vTaskDelay+0x68>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000e44 	.word	0x20000e44
 8003ec8:	e000ed04 	.word	0xe000ed04

08003ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	@ 0x28
 8003ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eda:	463a      	mov	r2, r7
 8003edc:	1d39      	adds	r1, r7, #4
 8003ede:	f107 0308 	add.w	r3, r7, #8
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff f81c 	bl	8002f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	9202      	str	r2, [sp, #8]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	460a      	mov	r2, r1
 8003efa:	4924      	ldr	r1, [pc, #144]	@ (8003f8c <vTaskStartScheduler+0xc0>)
 8003efc:	4824      	ldr	r0, [pc, #144]	@ (8003f90 <vTaskStartScheduler+0xc4>)
 8003efe:	f7ff fdf1 	bl	8003ae4 <xTaskCreateStatic>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4a23      	ldr	r2, [pc, #140]	@ (8003f94 <vTaskStartScheduler+0xc8>)
 8003f06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f08:	4b22      	ldr	r3, [pc, #136]	@ (8003f94 <vTaskStartScheduler+0xc8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f10:	2301      	movs	r3, #1
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e001      	b.n	8003f1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d102      	bne.n	8003f26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f20:	f000 fd1a 	bl	8004958 <xTimerCreateTimerTask>
 8003f24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d11b      	bne.n	8003f64 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	613b      	str	r3, [r7, #16]
}
 8003f3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <vTaskStartScheduler+0xcc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3354      	adds	r3, #84	@ 0x54
 8003f46:	4a15      	ldr	r2, [pc, #84]	@ (8003f9c <vTaskStartScheduler+0xd0>)
 8003f48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <vTaskStartScheduler+0xd4>)
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f52:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <vTaskStartScheduler+0xd8>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f58:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <vTaskStartScheduler+0xdc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f5e:	f001 f8df 	bl	8005120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f62:	e00f      	b.n	8003f84 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d10b      	bne.n	8003f84 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	60fb      	str	r3, [r7, #12]
}
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	e7fd      	b.n	8003f80 <vTaskStartScheduler+0xb4>
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	08005a94 	.word	0x08005a94
 8003f90:	080045dd 	.word	0x080045dd
 8003f94:	20000e40 	.word	0x20000e40
 8003f98:	20000948 	.word	0x20000948
 8003f9c:	2000002c 	.word	0x2000002c
 8003fa0:	20000e3c 	.word	0x20000e3c
 8003fa4:	20000e28 	.word	0x20000e28
 8003fa8:	20000e20 	.word	0x20000e20

08003fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fb0:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <vTaskSuspendAll+0x18>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a03      	ldr	r2, [pc, #12]	@ (8003fc4 <vTaskSuspendAll+0x18>)
 8003fb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000e44 	.word	0x20000e44

08003fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fd6:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <xTaskResumeAll+0x118>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ff6:	f001 f937 	bl	8005268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ffa:	4b39      	ldr	r3, [pc, #228]	@ (80040e0 <xTaskResumeAll+0x118>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	4a37      	ldr	r2, [pc, #220]	@ (80040e0 <xTaskResumeAll+0x118>)
 8004002:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004004:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <xTaskResumeAll+0x118>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d162      	bne.n	80040d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800400c:	4b35      	ldr	r3, [pc, #212]	@ (80040e4 <xTaskResumeAll+0x11c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05e      	beq.n	80040d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004014:	e02f      	b.n	8004076 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004016:	4b34      	ldr	r3, [pc, #208]	@ (80040e8 <xTaskResumeAll+0x120>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3318      	adds	r3, #24
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f83a 	bl	800309c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff f835 	bl	800309c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004036:	4b2d      	ldr	r3, [pc, #180]	@ (80040ec <xTaskResumeAll+0x124>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d903      	bls.n	8004046 <xTaskResumeAll+0x7e>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	4a2a      	ldr	r2, [pc, #168]	@ (80040ec <xTaskResumeAll+0x124>)
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a27      	ldr	r2, [pc, #156]	@ (80040f0 <xTaskResumeAll+0x128>)
 8004054:	441a      	add	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fe ffc0 	bl	8002fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004066:	4b23      	ldr	r3, [pc, #140]	@ (80040f4 <xTaskResumeAll+0x12c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d302      	bcc.n	8004076 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004070:	4b21      	ldr	r3, [pc, #132]	@ (80040f8 <xTaskResumeAll+0x130>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004076:	4b1c      	ldr	r3, [pc, #112]	@ (80040e8 <xTaskResumeAll+0x120>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1cb      	bne.n	8004016 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004084:	f000 fb66 	bl	8004754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004088:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <xTaskResumeAll+0x134>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004094:	f000 f846 	bl	8004124 <xTaskIncrementTick>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800409e:	4b16      	ldr	r3, [pc, #88]	@ (80040f8 <xTaskResumeAll+0x130>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f1      	bne.n	8004094 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80040b0:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <xTaskResumeAll+0x134>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <xTaskResumeAll+0x130>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <xTaskResumeAll+0x138>)
 80040c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040d2:	f001 f8fb 	bl	80052cc <vPortExitCritical>

	return xAlreadyYielded;
 80040d6:	68bb      	ldr	r3, [r7, #8]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000e44 	.word	0x20000e44
 80040e4:	20000e1c 	.word	0x20000e1c
 80040e8:	20000ddc 	.word	0x20000ddc
 80040ec:	20000e24 	.word	0x20000e24
 80040f0:	2000094c 	.word	0x2000094c
 80040f4:	20000948 	.word	0x20000948
 80040f8:	20000e30 	.word	0x20000e30
 80040fc:	20000e2c 	.word	0x20000e2c
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800410a:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <xTaskGetTickCount+0x1c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000e20 	.word	0x20000e20

08004124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412e:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <xTaskIncrementTick+0x148>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 8090 	bne.w	8004258 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004138:	4b4d      	ldr	r3, [pc, #308]	@ (8004270 <xTaskIncrementTick+0x14c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004140:	4a4b      	ldr	r2, [pc, #300]	@ (8004270 <xTaskIncrementTick+0x14c>)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d121      	bne.n	8004190 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800414c:	4b49      	ldr	r3, [pc, #292]	@ (8004274 <xTaskIncrementTick+0x150>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	603b      	str	r3, [r7, #0]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <xTaskIncrementTick+0x46>
 800416e:	4b41      	ldr	r3, [pc, #260]	@ (8004274 <xTaskIncrementTick+0x150>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	4b40      	ldr	r3, [pc, #256]	@ (8004278 <xTaskIncrementTick+0x154>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3e      	ldr	r2, [pc, #248]	@ (8004274 <xTaskIncrementTick+0x150>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4a3e      	ldr	r2, [pc, #248]	@ (8004278 <xTaskIncrementTick+0x154>)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <xTaskIncrementTick+0x158>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3301      	adds	r3, #1
 8004188:	4a3c      	ldr	r2, [pc, #240]	@ (800427c <xTaskIncrementTick+0x158>)
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	f000 fae2 	bl	8004754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004190:	4b3b      	ldr	r3, [pc, #236]	@ (8004280 <xTaskIncrementTick+0x15c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	429a      	cmp	r2, r3
 8004198:	d349      	bcc.n	800422e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419a:	4b36      	ldr	r3, [pc, #216]	@ (8004274 <xTaskIncrementTick+0x150>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a4:	4b36      	ldr	r3, [pc, #216]	@ (8004280 <xTaskIncrementTick+0x15c>)
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	601a      	str	r2, [r3, #0]
					break;
 80041ac:	e03f      	b.n	800422e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ae:	4b31      	ldr	r3, [pc, #196]	@ (8004274 <xTaskIncrementTick+0x150>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d203      	bcs.n	80041ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004280 <xTaskIncrementTick+0x15c>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041cc:	e02f      	b.n	800422e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe ff62 	bl	800309c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3318      	adds	r3, #24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe ff59 	bl	800309c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ee:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <xTaskIncrementTick+0x160>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d903      	bls.n	80041fe <xTaskIncrementTick+0xda>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <xTaskIncrementTick+0x160>)
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <xTaskIncrementTick+0x164>)
 800420c:	441a      	add	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3304      	adds	r3, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fe fee4 	bl	8002fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <xTaskIncrementTick+0x168>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	429a      	cmp	r2, r3
 8004226:	d3b8      	bcc.n	800419a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422c:	e7b5      	b.n	800419a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <xTaskIncrementTick+0x168>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004234:	4914      	ldr	r1, [pc, #80]	@ (8004288 <xTaskIncrementTick+0x164>)
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d901      	bls.n	800424a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800424a:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <xTaskIncrementTick+0x16c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e004      	b.n	8004262 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004258:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <xTaskIncrementTick+0x170>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	4a0d      	ldr	r2, [pc, #52]	@ (8004294 <xTaskIncrementTick+0x170>)
 8004260:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000e44 	.word	0x20000e44
 8004270:	20000e20 	.word	0x20000e20
 8004274:	20000dd4 	.word	0x20000dd4
 8004278:	20000dd8 	.word	0x20000dd8
 800427c:	20000e34 	.word	0x20000e34
 8004280:	20000e3c 	.word	0x20000e3c
 8004284:	20000e24 	.word	0x20000e24
 8004288:	2000094c 	.word	0x2000094c
 800428c:	20000948 	.word	0x20000948
 8004290:	20000e30 	.word	0x20000e30
 8004294:	20000e2c 	.word	0x20000e2c

08004298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800429e:	4b2b      	ldr	r3, [pc, #172]	@ (800434c <vTaskSwitchContext+0xb4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <vTaskSwitchContext+0xb8>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042ac:	e047      	b.n	800433e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80042ae:	4b28      	ldr	r3, [pc, #160]	@ (8004350 <vTaskSwitchContext+0xb8>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b4:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <vTaskSwitchContext+0xbc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e011      	b.n	80042e0 <vTaskSwitchContext+0x48>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <vTaskSwitchContext+0x42>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <vTaskSwitchContext+0x3e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	491d      	ldr	r1, [pc, #116]	@ (8004358 <vTaskSwitchContext+0xc0>)
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0e3      	beq.n	80042bc <vTaskSwitchContext+0x24>
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <vTaskSwitchContext+0xc0>)
 8004300:	4413      	add	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3308      	adds	r3, #8
 8004316:	429a      	cmp	r2, r3
 8004318:	d104      	bne.n	8004324 <vTaskSwitchContext+0x8c>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <vTaskSwitchContext+0xc4>)
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <vTaskSwitchContext+0xbc>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004334:	4b09      	ldr	r3, [pc, #36]	@ (800435c <vTaskSwitchContext+0xc4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3354      	adds	r3, #84	@ 0x54
 800433a:	4a09      	ldr	r2, [pc, #36]	@ (8004360 <vTaskSwitchContext+0xc8>)
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000e44 	.word	0x20000e44
 8004350:	20000e30 	.word	0x20000e30
 8004354:	20000e24 	.word	0x20000e24
 8004358:	2000094c 	.word	0x2000094c
 800435c:	20000948 	.word	0x20000948
 8004360:	2000002c 	.word	0x2000002c

08004364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800438c:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <vTaskPlaceOnEventList+0x48>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3318      	adds	r3, #24
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fe fe48 	bl	800302a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800439a:	2101      	movs	r1, #1
 800439c:	6838      	ldr	r0, [r7, #0]
 800439e:	f000 fa87 	bl	80048b0 <prvAddCurrentTaskToDelayedList>
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000948 	.word	0x20000948

080043b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	617b      	str	r3, [r7, #20]
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	e7fd      	b.n	80043d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <vTaskPlaceOnEventListRestricted+0x54>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3318      	adds	r3, #24
 80043e0:	4619      	mov	r1, r3
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7fe fdfd 	bl	8002fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	68b8      	ldr	r0, [r7, #8]
 80043f8:	f000 fa5a 	bl	80048b0 <prvAddCurrentTaskToDelayedList>
	}
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000948 	.word	0x20000948

08004408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	60fb      	str	r3, [r7, #12]
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3318      	adds	r3, #24
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fe2e 	bl	800309c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004440:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <xTaskRemoveFromEventList+0xb0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11d      	bne.n	8004484 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fe25 	bl	800309c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004456:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <xTaskRemoveFromEventList+0xb4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d903      	bls.n	8004466 <xTaskRemoveFromEventList+0x5e>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <xTaskRemoveFromEventList+0xb4>)
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a13      	ldr	r2, [pc, #76]	@ (80044c0 <xTaskRemoveFromEventList+0xb8>)
 8004474:	441a      	add	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f7fe fdb0 	bl	8002fe2 <vListInsertEnd>
 8004482:	e005      	b.n	8004490 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	3318      	adds	r3, #24
 8004488:	4619      	mov	r1, r3
 800448a:	480e      	ldr	r0, [pc, #56]	@ (80044c4 <xTaskRemoveFromEventList+0xbc>)
 800448c:	f7fe fda9 	bl	8002fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <xTaskRemoveFromEventList+0xc0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	429a      	cmp	r2, r3
 800449c:	d905      	bls.n	80044aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800449e:	2301      	movs	r3, #1
 80044a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044a2:	4b0a      	ldr	r3, [pc, #40]	@ (80044cc <xTaskRemoveFromEventList+0xc4>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e001      	b.n	80044ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044ae:	697b      	ldr	r3, [r7, #20]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000e44 	.word	0x20000e44
 80044bc:	20000e24 	.word	0x20000e24
 80044c0:	2000094c 	.word	0x2000094c
 80044c4:	20000ddc 	.word	0x20000ddc
 80044c8:	20000948 	.word	0x20000948
 80044cc:	20000e30 	.word	0x20000e30

080044d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <vTaskInternalSetTimeOutState+0x24>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <vTaskInternalSetTimeOutState+0x28>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	605a      	str	r2, [r3, #4]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000e34 	.word	0x20000e34
 80044f8:	20000e20 	.word	0x20000e20

080044fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	613b      	str	r3, [r7, #16]
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60fb      	str	r3, [r7, #12]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004542:	f000 fe91 	bl	8005268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004546:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <xTaskCheckForTimeOut+0xc0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e023      	b.n	80045ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <xTaskCheckForTimeOut+0xc4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d007      	beq.n	8004582 <xTaskCheckForTimeOut+0x86>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d302      	bcc.n	8004582 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	e015      	b.n	80045ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	429a      	cmp	r2, r3
 800458a:	d20b      	bcs.n	80045a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff99 	bl	80044d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e004      	b.n	80045ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f000 fe8d 	bl	80052cc <vPortExitCritical>

	return xReturn;
 80045b2:	69fb      	ldr	r3, [r7, #28]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000e20 	.word	0x20000e20
 80045c0:	20000e34 	.word	0x20000e34

080045c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045c8:	4b03      	ldr	r3, [pc, #12]	@ (80045d8 <vTaskMissedYield+0x14>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000e30 	.word	0x20000e30

080045dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045e4:	f000 f852 	bl	800468c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <prvIdleTask+0x28>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d9f9      	bls.n	80045e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <prvIdleTask+0x2c>)
 80045f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004600:	e7f0      	b.n	80045e4 <prvIdleTask+0x8>
 8004602:	bf00      	nop
 8004604:	2000094c 	.word	0x2000094c
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004612:	2300      	movs	r3, #0
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	e00c      	b.n	8004632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a12      	ldr	r2, [pc, #72]	@ (800466c <prvInitialiseTaskLists+0x60>)
 8004624:	4413      	add	r3, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fcae 	bl	8002f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b37      	cmp	r3, #55	@ 0x37
 8004636:	d9ef      	bls.n	8004618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004638:	480d      	ldr	r0, [pc, #52]	@ (8004670 <prvInitialiseTaskLists+0x64>)
 800463a:	f7fe fca5 	bl	8002f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800463e:	480d      	ldr	r0, [pc, #52]	@ (8004674 <prvInitialiseTaskLists+0x68>)
 8004640:	f7fe fca2 	bl	8002f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004644:	480c      	ldr	r0, [pc, #48]	@ (8004678 <prvInitialiseTaskLists+0x6c>)
 8004646:	f7fe fc9f 	bl	8002f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800464a:	480c      	ldr	r0, [pc, #48]	@ (800467c <prvInitialiseTaskLists+0x70>)
 800464c:	f7fe fc9c 	bl	8002f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004650:	480b      	ldr	r0, [pc, #44]	@ (8004680 <prvInitialiseTaskLists+0x74>)
 8004652:	f7fe fc99 	bl	8002f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004656:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <prvInitialiseTaskLists+0x78>)
 8004658:	4a05      	ldr	r2, [pc, #20]	@ (8004670 <prvInitialiseTaskLists+0x64>)
 800465a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <prvInitialiseTaskLists+0x7c>)
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <prvInitialiseTaskLists+0x68>)
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000094c 	.word	0x2000094c
 8004670:	20000dac 	.word	0x20000dac
 8004674:	20000dc0 	.word	0x20000dc0
 8004678:	20000ddc 	.word	0x20000ddc
 800467c:	20000df0 	.word	0x20000df0
 8004680:	20000e08 	.word	0x20000e08
 8004684:	20000dd4 	.word	0x20000dd4
 8004688:	20000dd8 	.word	0x20000dd8

0800468c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004692:	e019      	b.n	80046c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004694:	f000 fde8 	bl	8005268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004698:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <prvCheckTasksWaitingTermination+0x50>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe fcf9 	bl	800309c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <prvCheckTasksWaitingTermination+0x54>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	4a0b      	ldr	r2, [pc, #44]	@ (80046e0 <prvCheckTasksWaitingTermination+0x54>)
 80046b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <prvCheckTasksWaitingTermination+0x58>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <prvCheckTasksWaitingTermination+0x58>)
 80046bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046be:	f000 fe05 	bl	80052cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f810 	bl	80046e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c8:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <prvCheckTasksWaitingTermination+0x58>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e1      	bne.n	8004694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000df0 	.word	0x20000df0
 80046e0:	20000e1c 	.word	0x20000e1c
 80046e4:	20000e04 	.word	0x20000e04

080046e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3354      	adds	r3, #84	@ 0x54
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f8cf 	bl	8005898 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004708:	4618      	mov	r0, r3
 800470a:	f000 ff9d 	bl	8005648 <vPortFree>
				vPortFree( pxTCB );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ff9a 	bl	8005648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004714:	e019      	b.n	800474a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800471c:	2b01      	cmp	r3, #1
 800471e:	d103      	bne.n	8004728 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 ff91 	bl	8005648 <vPortFree>
	}
 8004726:	e010      	b.n	800474a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800472e:	2b02      	cmp	r3, #2
 8004730:	d00b      	beq.n	800474a <prvDeleteTCB+0x62>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <prvDeleteTCB+0x5e>
	}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475a:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <prvResetNextTaskUnblockTime+0x38>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <prvResetNextTaskUnblockTime+0x3c>)
 8004766:	f04f 32ff 	mov.w	r2, #4294967295
 800476a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800476c:	e008      	b.n	8004780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <prvResetNextTaskUnblockTime+0x38>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a04      	ldr	r2, [pc, #16]	@ (8004790 <prvResetNextTaskUnblockTime+0x3c>)
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000dd4 	.word	0x20000dd4
 8004790:	20000e3c 	.word	0x20000e3c

08004794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <xTaskGetSchedulerState+0x34>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047a2:	2301      	movs	r3, #1
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e008      	b.n	80047ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a8:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <xTaskGetSchedulerState+0x38>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047b0:	2302      	movs	r3, #2
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	e001      	b.n	80047ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047ba:	687b      	ldr	r3, [r7, #4]
	}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	20000e28 	.word	0x20000e28
 80047cc:	20000e44 	.word	0x20000e44

080047d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d058      	beq.n	8004898 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80047e6:	4b2f      	ldr	r3, [pc, #188]	@ (80048a4 <xTaskPriorityDisinherit+0xd4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d00b      	beq.n	8004808 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60bb      	str	r3, [r7, #8]
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483a:	429a      	cmp	r2, r3
 800483c:	d02c      	beq.n	8004898 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004842:	2b00      	cmp	r3, #0
 8004844:	d128      	bne.n	8004898 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe fc26 	bl	800309c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004868:	4b0f      	ldr	r3, [pc, #60]	@ (80048a8 <xTaskPriorityDisinherit+0xd8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d903      	bls.n	8004878 <xTaskPriorityDisinherit+0xa8>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	4a0c      	ldr	r2, [pc, #48]	@ (80048a8 <xTaskPriorityDisinherit+0xd8>)
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a09      	ldr	r2, [pc, #36]	@ (80048ac <xTaskPriorityDisinherit+0xdc>)
 8004886:	441a      	add	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f7fe fba7 	bl	8002fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004894:	2301      	movs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004898:	697b      	ldr	r3, [r7, #20]
	}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000948 	.word	0x20000948
 80048a8:	20000e24 	.word	0x20000e24
 80048ac:	2000094c 	.word	0x2000094c

080048b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048ba:	4b21      	ldr	r3, [pc, #132]	@ (8004940 <prvAddCurrentTaskToDelayedList+0x90>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c0:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <prvAddCurrentTaskToDelayedList+0x94>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fbe8 	bl	800309c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d10a      	bne.n	80048ea <prvAddCurrentTaskToDelayedList+0x3a>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048da:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <prvAddCurrentTaskToDelayedList+0x94>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4819      	ldr	r0, [pc, #100]	@ (8004948 <prvAddCurrentTaskToDelayedList+0x98>)
 80048e4:	f7fe fb7d 	bl	8002fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048e8:	e026      	b.n	8004938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048f2:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <prvAddCurrentTaskToDelayedList+0x94>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d209      	bcs.n	8004916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <prvAddCurrentTaskToDelayedList+0x94>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3304      	adds	r3, #4
 800490c:	4619      	mov	r1, r3
 800490e:	4610      	mov	r0, r2
 8004910:	f7fe fb8b 	bl	800302a <vListInsert>
}
 8004914:	e010      	b.n	8004938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004916:	4b0e      	ldr	r3, [pc, #56]	@ (8004950 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <prvAddCurrentTaskToDelayedList+0x94>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f7fe fb81 	bl	800302a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004928:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d202      	bcs.n	8004938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004932:	4a08      	ldr	r2, [pc, #32]	@ (8004954 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6013      	str	r3, [r2, #0]
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000e20 	.word	0x20000e20
 8004944:	20000948 	.word	0x20000948
 8004948:	20000e08 	.word	0x20000e08
 800494c:	20000dd8 	.word	0x20000dd8
 8004950:	20000dd4 	.word	0x20000dd4
 8004954:	20000e3c 	.word	0x20000e3c

08004958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08a      	sub	sp, #40	@ 0x28
 800495c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004962:	f000 fb13 	bl	8004f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004966:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <xTimerCreateTimerTask+0x84>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d021      	beq.n	80049b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004976:	1d3a      	adds	r2, r7, #4
 8004978:	f107 0108 	add.w	r1, r7, #8
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	4618      	mov	r0, r3
 8004982:	f7fe fae7 	bl	8002f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	9202      	str	r2, [sp, #8]
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	2302      	movs	r3, #2
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	460a      	mov	r2, r1
 8004998:	4911      	ldr	r1, [pc, #68]	@ (80049e0 <xTimerCreateTimerTask+0x88>)
 800499a:	4812      	ldr	r0, [pc, #72]	@ (80049e4 <xTimerCreateTimerTask+0x8c>)
 800499c:	f7ff f8a2 	bl	8003ae4 <xTaskCreateStatic>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4a11      	ldr	r2, [pc, #68]	@ (80049e8 <xTimerCreateTimerTask+0x90>)
 80049a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049a6:	4b10      	ldr	r3, [pc, #64]	@ (80049e8 <xTimerCreateTimerTask+0x90>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	613b      	str	r3, [r7, #16]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049d0:	697b      	ldr	r3, [r7, #20]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000e78 	.word	0x20000e78
 80049e0:	08005a9c 	.word	0x08005a9c
 80049e4:	08004b25 	.word	0x08004b25
 80049e8:	20000e7c 	.word	0x20000e7c

080049ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	@ 0x28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <xTimerGenericCommand+0x30>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	623b      	str	r3, [r7, #32]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a1c:	4b19      	ldr	r3, [pc, #100]	@ (8004a84 <xTimerGenericCommand+0x98>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02a      	beq.n	8004a7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	dc18      	bgt.n	8004a68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a36:	f7ff fead 	bl	8004794 <xTaskGetSchedulerState>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d109      	bne.n	8004a54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a40:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <xTimerGenericCommand+0x98>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	f107 0110 	add.w	r1, r7, #16
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a4c:	f7fe fc5a 	bl	8003304 <xQueueGenericSend>
 8004a50:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a52:	e012      	b.n	8004a7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a54:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <xTimerGenericCommand+0x98>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	f107 0110 	add.w	r1, r7, #16
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f7fe fc50 	bl	8003304 <xQueueGenericSend>
 8004a64:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a66:	e008      	b.n	8004a7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <xTimerGenericCommand+0x98>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	f107 0110 	add.w	r1, r7, #16
 8004a70:	2300      	movs	r3, #0
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	f7fe fd48 	bl	8003508 <xQueueGenericSendFromISR>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	@ 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000e78 	.word	0x20000e78

08004a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a92:	4b23      	ldr	r3, [pc, #140]	@ (8004b20 <prvProcessExpiredTimer+0x98>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe fafb 	bl	800309c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	18d1      	adds	r1, r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	6978      	ldr	r0, [r7, #20]
 8004ac2:	f000 f8d5 	bl	8004c70 <prvInsertTimerInActiveList>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004acc:	2300      	movs	r3, #0
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f7ff ff88 	bl	80049ec <xTimerGenericCommand>
 8004adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d114      	bne.n	8004b0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	60fb      	str	r3, [r7, #12]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	4798      	blx	r3
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000e70 	.word	0x20000e70

08004b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f859 	bl	8004be8 <prvGetNextExpireTime>
 8004b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f805 	bl	8004b4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b42:	f000 f8d7 	bl	8004cf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b46:	bf00      	nop
 8004b48:	e7f0      	b.n	8004b2c <prvTimerTask+0x8>
	...

08004b4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b56:	f7ff fa29 	bl	8003fac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f866 	bl	8004c30 <prvSampleTimeNow>
 8004b64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d130      	bne.n	8004bce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <prvProcessTimerOrBlockTask+0x3c>
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d806      	bhi.n	8004b88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b7a:	f7ff fa25 	bl	8003fc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff81 	bl	8004a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b86:	e024      	b.n	8004bd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b8e:	4b13      	ldr	r3, [pc, #76]	@ (8004bdc <prvProcessTimerOrBlockTask+0x90>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <prvProcessTimerOrBlockTask+0x50>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <prvProcessTimerOrBlockTask+0x52>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <prvProcessTimerOrBlockTask+0x94>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	f7fe ff65 	bl	8003a7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bb2:	f7ff fa09 	bl	8003fc8 <xTaskResumeAll>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <prvProcessTimerOrBlockTask+0x98>)
 8004bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	f3bf 8f6f 	isb	sy
}
 8004bcc:	e001      	b.n	8004bd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bce:	f7ff f9fb 	bl	8003fc8 <xTaskResumeAll>
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000e74 	.word	0x20000e74
 8004be0:	20000e78 	.word	0x20000e78
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <prvGetNextExpireTime+0x44>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <prvGetNextExpireTime+0x16>
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	e000      	b.n	8004c00 <prvGetNextExpireTime+0x18>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c0c:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <prvGetNextExpireTime+0x44>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e001      	b.n	8004c1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000e70 	.word	0x20000e70

08004c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c38:	f7ff fa64 	bl	8004104 <xTaskGetTickCount>
 8004c3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <prvSampleTimeNow+0x3c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d205      	bcs.n	8004c54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c48:	f000 f93a 	bl	8004ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e002      	b.n	8004c5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c5a:	4a04      	ldr	r2, [pc, #16]	@ (8004c6c <prvSampleTimeNow+0x3c>)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000e80 	.word	0x20000e80

08004c70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d812      	bhi.n	8004cbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad2      	subs	r2, r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e01b      	b.n	8004ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004caa:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <prvInsertTimerInActiveList+0x7c>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7fe f9b8 	bl	800302a <vListInsert>
 8004cba:	e012      	b.n	8004ce2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d206      	bcs.n	8004cd2 <prvInsertTimerInActiveList+0x62>
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d302      	bcc.n	8004cd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e007      	b.n	8004ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cd2:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <prvInsertTimerInActiveList+0x80>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f7fe f9a4 	bl	800302a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ce2:	697b      	ldr	r3, [r7, #20]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000e74 	.word	0x20000e74
 8004cf0:	20000e70 	.word	0x20000e70

08004cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	@ 0x38
 8004cf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cfa:	e0ce      	b.n	8004e9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da19      	bge.n	8004d36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	3304      	adds	r3, #4
 8004d06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61fb      	str	r3, [r7, #28]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2c:	6850      	ldr	r0, [r2, #4]
 8004d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d30:	6892      	ldr	r2, [r2, #8]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f2c0 80ae 	blt.w	8004e9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe f9a4 	bl	800309c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d54:	463b      	mov	r3, r7
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ff6a 	bl	8004c30 <prvSampleTimeNow>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b09      	cmp	r3, #9
 8004d62:	f200 8097 	bhi.w	8004e94 <prvProcessReceivedCommands+0x1a0>
 8004d66:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <prvProcessReceivedCommands+0x78>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08004d95 	.word	0x08004d95
 8004d78:	08004e0b 	.word	0x08004e0b
 8004d7c:	08004e1f 	.word	0x08004e1f
 8004d80:	08004e6b 	.word	0x08004e6b
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004d95 	.word	0x08004d95
 8004d8c:	08004e0b 	.word	0x08004e0b
 8004d90:	08004e1f 	.word	0x08004e1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	18d1      	adds	r1, r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004db4:	f7ff ff5c 	bl	8004c70 <prvInsertTimerInActiveList>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d06c      	beq.n	8004e98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d061      	beq.n	8004e98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	441a      	add	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	2300      	movs	r3, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004de6:	f7ff fe01 	bl	80049ec <xTimerGenericCommand>
 8004dea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d152      	bne.n	8004e98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	61bb      	str	r3, [r7, #24]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e1c:	e03d      	b.n	8004e9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	617b      	str	r3, [r7, #20]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	18d1      	adds	r1, r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e64:	f7ff ff04 	bl	8004c70 <prvInsertTimerInActiveList>
					break;
 8004e68:	e017      	b.n	8004e9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e7a:	f000 fbe5 	bl	8005648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e7e:	e00c      	b.n	8004e9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e92:	e002      	b.n	8004e9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <prvProcessReceivedCommands+0x1a6>
					break;
 8004e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e9a:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <prvProcessReceivedCommands+0x1c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	1d39      	adds	r1, r7, #4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fbce 	bl	8003644 <xQueueReceive>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f47f af26 	bne.w	8004cfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	3730      	adds	r7, #48	@ 0x30
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000e78 	.word	0x20000e78

08004ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ec6:	e049      	b.n	8004f5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f84 <prvSwitchTimerLists+0xc4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f84 <prvSwitchTimerLists+0xc4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe f8db 	bl	800309c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02f      	beq.n	8004f5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d90e      	bls.n	8004f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f84 <prvSwitchTimerLists+0xc4>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f7fe f880 	bl	800302a <vListInsert>
 8004f2a:	e017      	b.n	8004f5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2300      	movs	r3, #0
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	2100      	movs	r1, #0
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fd58 	bl	80049ec <xTimerGenericCommand>
 8004f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	603b      	str	r3, [r7, #0]
}
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f5c:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <prvSwitchTimerLists+0xc4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1b0      	bne.n	8004ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f66:	4b07      	ldr	r3, [pc, #28]	@ (8004f84 <prvSwitchTimerLists+0xc4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <prvSwitchTimerLists+0xc8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a04      	ldr	r2, [pc, #16]	@ (8004f84 <prvSwitchTimerLists+0xc4>)
 8004f72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f74:	4a04      	ldr	r2, [pc, #16]	@ (8004f88 <prvSwitchTimerLists+0xc8>)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6013      	str	r3, [r2, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000e70 	.word	0x20000e70
 8004f88:	20000e74 	.word	0x20000e74

08004f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f92:	f000 f969 	bl	8005268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f96:	4b15      	ldr	r3, [pc, #84]	@ (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d120      	bne.n	8004fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f9e:	4814      	ldr	r0, [pc, #80]	@ (8004ff0 <prvCheckForValidListAndQueue+0x64>)
 8004fa0:	f7fd fff2 	bl	8002f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fa4:	4813      	ldr	r0, [pc, #76]	@ (8004ff4 <prvCheckForValidListAndQueue+0x68>)
 8004fa6:	f7fd ffef 	bl	8002f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004faa:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <prvCheckForValidListAndQueue+0x6c>)
 8004fac:	4a10      	ldr	r2, [pc, #64]	@ (8004ff0 <prvCheckForValidListAndQueue+0x64>)
 8004fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fb0:	4b12      	ldr	r3, [pc, #72]	@ (8004ffc <prvCheckForValidListAndQueue+0x70>)
 8004fb2:	4a10      	ldr	r2, [pc, #64]	@ (8004ff4 <prvCheckForValidListAndQueue+0x68>)
 8004fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <prvCheckForValidListAndQueue+0x74>)
 8004fbc:	4a11      	ldr	r2, [pc, #68]	@ (8005004 <prvCheckForValidListAndQueue+0x78>)
 8004fbe:	2110      	movs	r1, #16
 8004fc0:	200a      	movs	r0, #10
 8004fc2:	f7fe f8ff 	bl	80031c4 <xQueueGenericCreateStatic>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a08      	ldr	r2, [pc, #32]	@ (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	490b      	ldr	r1, [pc, #44]	@ (8005008 <prvCheckForValidListAndQueue+0x7c>)
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fd24 	bl	8003a28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fe0:	f000 f974 	bl	80052cc <vPortExitCritical>
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000e78 	.word	0x20000e78
 8004ff0:	20000e48 	.word	0x20000e48
 8004ff4:	20000e5c 	.word	0x20000e5c
 8004ff8:	20000e70 	.word	0x20000e70
 8004ffc:	20000e74 	.word	0x20000e74
 8005000:	20000f24 	.word	0x20000f24
 8005004:	20000e84 	.word	0x20000e84
 8005008:	08005aa4 	.word	0x08005aa4

0800500c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b04      	subs	r3, #4
 800501c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b04      	subs	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800503c:	4a0c      	ldr	r2, [pc, #48]	@ (8005070 <pxPortInitialiseStack+0x64>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3b14      	subs	r3, #20
 8005046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b04      	subs	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f06f 0202 	mvn.w	r2, #2
 800505a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b20      	subs	r3, #32
 8005060:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	08005075 	.word	0x08005075

08005074 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800507e:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <prvTaskExitError+0x58>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d00b      	beq.n	80050a0 <prvTaskExitError+0x2c>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60fb      	str	r3, [r7, #12]
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	e7fd      	b.n	800509c <prvTaskExitError+0x28>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60bb      	str	r3, [r7, #8]
}
 80050b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050b4:	bf00      	nop
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0fc      	beq.n	80050b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20000028 	.word	0x20000028

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	4770      	bx	lr
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst2>:
 80050f0:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050f8:	4808      	ldr	r0, [pc, #32]	@ (800511c <prvPortStartFirstTask+0x24>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8814 	msr	CONTROL, r0
 800510a:	b662      	cpsie	i
 800510c:	b661      	cpsie	f
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	df00      	svc	0
 8005118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800511a:	bf00      	nop
 800511c:	e000ed08 	.word	0xe000ed08

08005120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005126:	4b47      	ldr	r3, [pc, #284]	@ (8005244 <xPortStartScheduler+0x124>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a47      	ldr	r2, [pc, #284]	@ (8005248 <xPortStartScheduler+0x128>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10b      	bne.n	8005148 <xPortStartScheduler+0x28>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005148:	4b3e      	ldr	r3, [pc, #248]	@ (8005244 <xPortStartScheduler+0x124>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a3f      	ldr	r2, [pc, #252]	@ (800524c <xPortStartScheduler+0x12c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10b      	bne.n	800516a <xPortStartScheduler+0x4a>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800516a:	4b39      	ldr	r3, [pc, #228]	@ (8005250 <xPortStartScheduler+0x130>)
 800516c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	22ff      	movs	r2, #255	@ 0xff
 800517a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800518c:	b2da      	uxtb	r2, r3
 800518e:	4b31      	ldr	r3, [pc, #196]	@ (8005254 <xPortStartScheduler+0x134>)
 8005190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005192:	4b31      	ldr	r3, [pc, #196]	@ (8005258 <xPortStartScheduler+0x138>)
 8005194:	2207      	movs	r2, #7
 8005196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005198:	e009      	b.n	80051ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800519a:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <xPortStartScheduler+0x138>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3b01      	subs	r3, #1
 80051a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005258 <xPortStartScheduler+0x138>)
 80051a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d0ef      	beq.n	800519a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051ba:	4b27      	ldr	r3, [pc, #156]	@ (8005258 <xPortStartScheduler+0x138>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1c3 0307 	rsb	r3, r3, #7
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d00b      	beq.n	80051de <xPortStartScheduler+0xbe>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051de:	4b1e      	ldr	r3, [pc, #120]	@ (8005258 <xPortStartScheduler+0x138>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <xPortStartScheduler+0x138>)
 80051e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <xPortStartScheduler+0x138>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051f0:	4a19      	ldr	r2, [pc, #100]	@ (8005258 <xPortStartScheduler+0x138>)
 80051f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051fc:	4b17      	ldr	r3, [pc, #92]	@ (800525c <xPortStartScheduler+0x13c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a16      	ldr	r2, [pc, #88]	@ (800525c <xPortStartScheduler+0x13c>)
 8005202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005208:	4b14      	ldr	r3, [pc, #80]	@ (800525c <xPortStartScheduler+0x13c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a13      	ldr	r2, [pc, #76]	@ (800525c <xPortStartScheduler+0x13c>)
 800520e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005214:	f000 f8da 	bl	80053cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005218:	4b11      	ldr	r3, [pc, #68]	@ (8005260 <xPortStartScheduler+0x140>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800521e:	f000 f8f9 	bl	8005414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <xPortStartScheduler+0x144>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a0f      	ldr	r2, [pc, #60]	@ (8005264 <xPortStartScheduler+0x144>)
 8005228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800522c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800522e:	f7ff ff63 	bl	80050f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005232:	f7ff f831 	bl	8004298 <vTaskSwitchContext>
	prvTaskExitError();
 8005236:	f7ff ff1d 	bl	8005074 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	e000ed00 	.word	0xe000ed00
 8005248:	410fc271 	.word	0x410fc271
 800524c:	410fc270 	.word	0x410fc270
 8005250:	e000e400 	.word	0xe000e400
 8005254:	20000f74 	.word	0x20000f74
 8005258:	20000f78 	.word	0x20000f78
 800525c:	e000ed20 	.word	0xe000ed20
 8005260:	20000028 	.word	0x20000028
 8005264:	e000ef34 	.word	0xe000ef34

08005268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <vPortEnterCritical+0x5c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	4a0e      	ldr	r2, [pc, #56]	@ (80052c4 <vPortEnterCritical+0x5c>)
 800528a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <vPortEnterCritical+0x5c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d110      	bne.n	80052b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005294:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <vPortEnterCritical+0x60>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	603b      	str	r3, [r7, #0]
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	e7fd      	b.n	80052b2 <vPortEnterCritical+0x4a>
	}
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000028 	.word	0x20000028
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052d2:	4b12      	ldr	r3, [pc, #72]	@ (800531c <vPortExitCritical+0x50>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <vPortExitCritical+0x26>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	607b      	str	r3, [r7, #4]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <vPortExitCritical+0x50>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	4a08      	ldr	r2, [pc, #32]	@ (800531c <vPortExitCritical+0x50>)
 80052fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052fc:	4b07      	ldr	r3, [pc, #28]	@ (800531c <vPortExitCritical+0x50>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <vPortExitCritical+0x44>
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	20000028 	.word	0x20000028

08005320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f7fe ffa2 	bl	8004298 <vTaskSwitchContext>
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f380 8811 	msr	BASEPRI, r0
 800535c:	bc09      	pop	{r0, r3}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f01e 0f10 	tst.w	lr, #16
 800536a:	bf08      	it	eq
 800536c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005370:	f380 8809 	msr	PSP, r0
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst>:
 8005380:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053a2:	f7fe febf 	bl	8004124 <xTaskIncrementTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ac:	4b06      	ldr	r3, [pc, #24]	@ (80053c8 <xPortSysTickHandler+0x40>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
}
 80053be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <vPortSetupTimerInterrupt+0x38>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005408 <vPortSetupTimerInterrupt+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	@ (800540c <vPortSetupTimerInterrupt+0x40>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a09      	ldr	r2, [pc, #36]	@ (8005410 <vPortSetupTimerInterrupt+0x44>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ee:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010
 8005404:	e000e018 	.word	0xe000e018
 8005408:	2000001c 	.word	0x2000001c
 800540c:	10624dd3 	.word	0x10624dd3
 8005410:	e000e014 	.word	0xe000e014

08005414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005424 <vPortEnableVFP+0x10>
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800541e:	6001      	str	r1, [r0, #0]
 8005420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005422:	bf00      	nop
 8005424:	e000ed88 	.word	0xe000ed88

08005428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800542e:	f3ef 8305 	mrs	r3, IPSR
 8005432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d915      	bls.n	8005466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800543a:	4a18      	ldr	r2, [pc, #96]	@ (800549c <vPortValidateInterruptPriority+0x74>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005444:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <vPortValidateInterruptPriority+0x78>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	7afa      	ldrb	r2, [r7, #11]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20b      	bcs.n	8005466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <vPortValidateInterruptPriority+0x7c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800546e:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <vPortValidateInterruptPriority+0x80>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d90b      	bls.n	800548e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	603b      	str	r3, [r7, #0]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <vPortValidateInterruptPriority+0x62>
	}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000e3f0 	.word	0xe000e3f0
 80054a0:	20000f74 	.word	0x20000f74
 80054a4:	e000ed0c 	.word	0xe000ed0c
 80054a8:	20000f78 	.word	0x20000f78

080054ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	@ 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054b8:	f7fe fd78 	bl	8003fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005630 <pvPortMalloc+0x184>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054c4:	f000 f924 	bl	8005710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005634 <pvPortMalloc+0x188>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f040 8095 	bne.w	8005600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01e      	beq.n	800551a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80054dc:	2208      	movs	r2, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d015      	beq.n	800551a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f023 0307 	bic.w	r3, r3, #7
 80054f4:	3308      	adds	r3, #8
 80054f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <pvPortMalloc+0x6e>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	617b      	str	r3, [r7, #20]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d06f      	beq.n	8005600 <pvPortMalloc+0x154>
 8005520:	4b45      	ldr	r3, [pc, #276]	@ (8005638 <pvPortMalloc+0x18c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d86a      	bhi.n	8005600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800552a:	4b44      	ldr	r3, [pc, #272]	@ (800563c <pvPortMalloc+0x190>)
 800552c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800552e:	4b43      	ldr	r3, [pc, #268]	@ (800563c <pvPortMalloc+0x190>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005534:	e004      	b.n	8005540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d903      	bls.n	8005552 <pvPortMalloc+0xa6>
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f1      	bne.n	8005536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005552:	4b37      	ldr	r3, [pc, #220]	@ (8005630 <pvPortMalloc+0x184>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005558:	429a      	cmp	r2, r3
 800555a:	d051      	beq.n	8005600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2208      	movs	r2, #8
 8005562:	4413      	add	r3, r2
 8005564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	1ad2      	subs	r2, r2, r3
 8005576:	2308      	movs	r3, #8
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	429a      	cmp	r2, r3
 800557c:	d920      	bls.n	80055c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <pvPortMalloc+0xfc>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055ba:	69b8      	ldr	r0, [r7, #24]
 80055bc:	f000 f90a 	bl	80057d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <pvPortMalloc+0x18c>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <pvPortMalloc+0x18c>)
 80055cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <pvPortMalloc+0x18c>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <pvPortMalloc+0x194>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d203      	bcs.n	80055e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055da:	4b17      	ldr	r3, [pc, #92]	@ (8005638 <pvPortMalloc+0x18c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	@ (8005640 <pvPortMalloc+0x194>)
 80055e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <pvPortMalloc+0x188>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055f6:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <pvPortMalloc+0x198>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a11      	ldr	r2, [pc, #68]	@ (8005644 <pvPortMalloc+0x198>)
 80055fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005600:	f7fe fce2 	bl	8003fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <pvPortMalloc+0x17a>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60fb      	str	r3, [r7, #12]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <pvPortMalloc+0x176>
	return pvReturn;
 8005626:	69fb      	ldr	r3, [r7, #28]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	@ 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20004b84 	.word	0x20004b84
 8005634:	20004b98 	.word	0x20004b98
 8005638:	20004b88 	.word	0x20004b88
 800563c:	20004b7c 	.word	0x20004b7c
 8005640:	20004b8c 	.word	0x20004b8c
 8005644:	20004b90 	.word	0x20004b90

08005648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d04f      	beq.n	80056fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800565a:	2308      	movs	r3, #8
 800565c:	425b      	negs	r3, r3
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4413      	add	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	4b25      	ldr	r3, [pc, #148]	@ (8005704 <vPortFree+0xbc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <vPortFree+0x46>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	60fb      	str	r3, [r7, #12]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <vPortFree+0x66>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	4b14      	ldr	r3, [pc, #80]	@ (8005704 <vPortFree+0xbc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01e      	beq.n	80056fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d11a      	bne.n	80056fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005704 <vPortFree+0xbc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056d4:	f7fe fc6a 	bl	8003fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <vPortFree+0xc0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4413      	add	r3, r2
 80056e2:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <vPortFree+0xc0>)
 80056e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056e6:	6938      	ldr	r0, [r7, #16]
 80056e8:	f000 f874 	bl	80057d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056ec:	4b07      	ldr	r3, [pc, #28]	@ (800570c <vPortFree+0xc4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3301      	adds	r3, #1
 80056f2:	4a06      	ldr	r2, [pc, #24]	@ (800570c <vPortFree+0xc4>)
 80056f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056f6:	f7fe fc67 	bl	8003fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056fa:	bf00      	nop
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20004b98 	.word	0x20004b98
 8005708:	20004b88 	.word	0x20004b88
 800570c:	20004b94 	.word	0x20004b94

08005710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005716:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800571a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800571c:	4b27      	ldr	r3, [pc, #156]	@ (80057bc <prvHeapInit+0xac>)
 800571e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3307      	adds	r3, #7
 800572e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	4a1f      	ldr	r2, [pc, #124]	@ (80057bc <prvHeapInit+0xac>)
 8005740:	4413      	add	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005748:	4a1d      	ldr	r2, [pc, #116]	@ (80057c0 <prvHeapInit+0xb0>)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800574e:	4b1c      	ldr	r3, [pc, #112]	@ (80057c0 <prvHeapInit+0xb0>)
 8005750:	2200      	movs	r2, #0
 8005752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	4413      	add	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800575c:	2208      	movs	r2, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4a15      	ldr	r2, [pc, #84]	@ (80057c4 <prvHeapInit+0xb4>)
 8005770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005772:	4b14      	ldr	r3, [pc, #80]	@ (80057c4 <prvHeapInit+0xb4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800577a:	4b12      	ldr	r3, [pc, #72]	@ (80057c4 <prvHeapInit+0xb4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005790:	4b0c      	ldr	r3, [pc, #48]	@ (80057c4 <prvHeapInit+0xb4>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4a0a      	ldr	r2, [pc, #40]	@ (80057c8 <prvHeapInit+0xb8>)
 800579e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	4a09      	ldr	r2, [pc, #36]	@ (80057cc <prvHeapInit+0xbc>)
 80057a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057a8:	4b09      	ldr	r3, [pc, #36]	@ (80057d0 <prvHeapInit+0xc0>)
 80057aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057ae:	601a      	str	r2, [r3, #0]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	20000f7c 	.word	0x20000f7c
 80057c0:	20004b7c 	.word	0x20004b7c
 80057c4:	20004b84 	.word	0x20004b84
 80057c8:	20004b8c 	.word	0x20004b8c
 80057cc:	20004b88 	.word	0x20004b88
 80057d0:	20004b98 	.word	0x20004b98

080057d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057dc:	4b28      	ldr	r3, [pc, #160]	@ (8005880 <prvInsertBlockIntoFreeList+0xac>)
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e002      	b.n	80057e8 <prvInsertBlockIntoFreeList+0x14>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d8f7      	bhi.n	80057e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4413      	add	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d108      	bne.n	8005816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	441a      	add	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d118      	bne.n	800585c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <prvInsertBlockIntoFreeList+0xb0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d00d      	beq.n	8005852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	441a      	add	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e008      	b.n	8005864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005852:	4b0c      	ldr	r3, [pc, #48]	@ (8005884 <prvInsertBlockIntoFreeList+0xb0>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e003      	b.n	8005864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d002      	beq.n	8005872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20004b7c 	.word	0x20004b7c
 8005884:	20004b84 	.word	0x20004b84

08005888 <memset>:
 8005888:	4402      	add	r2, r0
 800588a:	4603      	mov	r3, r0
 800588c:	4293      	cmp	r3, r2
 800588e:	d100      	bne.n	8005892 <memset+0xa>
 8005890:	4770      	bx	lr
 8005892:	f803 1b01 	strb.w	r1, [r3], #1
 8005896:	e7f9      	b.n	800588c <memset+0x4>

08005898 <_reclaim_reent>:
 8005898:	4b29      	ldr	r3, [pc, #164]	@ (8005940 <_reclaim_reent+0xa8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4283      	cmp	r3, r0
 800589e:	b570      	push	{r4, r5, r6, lr}
 80058a0:	4604      	mov	r4, r0
 80058a2:	d04b      	beq.n	800593c <_reclaim_reent+0xa4>
 80058a4:	69c3      	ldr	r3, [r0, #28]
 80058a6:	b1ab      	cbz	r3, 80058d4 <_reclaim_reent+0x3c>
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	b16b      	cbz	r3, 80058c8 <_reclaim_reent+0x30>
 80058ac:	2500      	movs	r5, #0
 80058ae:	69e3      	ldr	r3, [r4, #28]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	5959      	ldr	r1, [r3, r5]
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d13b      	bne.n	8005930 <_reclaim_reent+0x98>
 80058b8:	3504      	adds	r5, #4
 80058ba:	2d80      	cmp	r5, #128	@ 0x80
 80058bc:	d1f7      	bne.n	80058ae <_reclaim_reent+0x16>
 80058be:	69e3      	ldr	r3, [r4, #28]
 80058c0:	4620      	mov	r0, r4
 80058c2:	68d9      	ldr	r1, [r3, #12]
 80058c4:	f000 f872 	bl	80059ac <_free_r>
 80058c8:	69e3      	ldr	r3, [r4, #28]
 80058ca:	6819      	ldr	r1, [r3, #0]
 80058cc:	b111      	cbz	r1, 80058d4 <_reclaim_reent+0x3c>
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 f86c 	bl	80059ac <_free_r>
 80058d4:	6961      	ldr	r1, [r4, #20]
 80058d6:	b111      	cbz	r1, 80058de <_reclaim_reent+0x46>
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 f867 	bl	80059ac <_free_r>
 80058de:	69e1      	ldr	r1, [r4, #28]
 80058e0:	b111      	cbz	r1, 80058e8 <_reclaim_reent+0x50>
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f862 	bl	80059ac <_free_r>
 80058e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80058ea:	b111      	cbz	r1, 80058f2 <_reclaim_reent+0x5a>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 f85d 	bl	80059ac <_free_r>
 80058f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058f4:	b111      	cbz	r1, 80058fc <_reclaim_reent+0x64>
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 f858 	bl	80059ac <_free_r>
 80058fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80058fe:	b111      	cbz	r1, 8005906 <_reclaim_reent+0x6e>
 8005900:	4620      	mov	r0, r4
 8005902:	f000 f853 	bl	80059ac <_free_r>
 8005906:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005908:	b111      	cbz	r1, 8005910 <_reclaim_reent+0x78>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f84e 	bl	80059ac <_free_r>
 8005910:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005912:	b111      	cbz	r1, 800591a <_reclaim_reent+0x82>
 8005914:	4620      	mov	r0, r4
 8005916:	f000 f849 	bl	80059ac <_free_r>
 800591a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800591c:	b111      	cbz	r1, 8005924 <_reclaim_reent+0x8c>
 800591e:	4620      	mov	r0, r4
 8005920:	f000 f844 	bl	80059ac <_free_r>
 8005924:	6a23      	ldr	r3, [r4, #32]
 8005926:	b14b      	cbz	r3, 800593c <_reclaim_reent+0xa4>
 8005928:	4620      	mov	r0, r4
 800592a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800592e:	4718      	bx	r3
 8005930:	680e      	ldr	r6, [r1, #0]
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f83a 	bl	80059ac <_free_r>
 8005938:	4631      	mov	r1, r6
 800593a:	e7bb      	b.n	80058b4 <_reclaim_reent+0x1c>
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	bf00      	nop
 8005940:	2000002c 	.word	0x2000002c

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	4d0d      	ldr	r5, [pc, #52]	@ (800597c <__libc_init_array+0x38>)
 8005948:	4c0d      	ldr	r4, [pc, #52]	@ (8005980 <__libc_init_array+0x3c>)
 800594a:	1b64      	subs	r4, r4, r5
 800594c:	10a4      	asrs	r4, r4, #2
 800594e:	2600      	movs	r6, #0
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	4d0b      	ldr	r5, [pc, #44]	@ (8005984 <__libc_init_array+0x40>)
 8005956:	4c0c      	ldr	r4, [pc, #48]	@ (8005988 <__libc_init_array+0x44>)
 8005958:	f000 f87e 	bl	8005a58 <_init>
 800595c:	1b64      	subs	r4, r4, r5
 800595e:	10a4      	asrs	r4, r4, #2
 8005960:	2600      	movs	r6, #0
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	f855 3b04 	ldr.w	r3, [r5], #4
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	f855 3b04 	ldr.w	r3, [r5], #4
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08005b28 	.word	0x08005b28
 8005980:	08005b28 	.word	0x08005b28
 8005984:	08005b28 	.word	0x08005b28
 8005988:	08005b2c 	.word	0x08005b2c

0800598c <__retarget_lock_acquire_recursive>:
 800598c:	4770      	bx	lr

0800598e <__retarget_lock_release_recursive>:
 800598e:	4770      	bx	lr

08005990 <memcpy>:
 8005990:	440a      	add	r2, r1
 8005992:	4291      	cmp	r1, r2
 8005994:	f100 33ff 	add.w	r3, r0, #4294967295
 8005998:	d100      	bne.n	800599c <memcpy+0xc>
 800599a:	4770      	bx	lr
 800599c:	b510      	push	{r4, lr}
 800599e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a6:	4291      	cmp	r1, r2
 80059a8:	d1f9      	bne.n	800599e <memcpy+0xe>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <_free_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4605      	mov	r5, r0
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d041      	beq.n	8005a38 <_free_r+0x8c>
 80059b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b8:	1f0c      	subs	r4, r1, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bfb8      	it	lt
 80059be:	18e4      	addlt	r4, r4, r3
 80059c0:	f000 f83e 	bl	8005a40 <__malloc_lock>
 80059c4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a3c <_free_r+0x90>)
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	b933      	cbnz	r3, 80059d8 <_free_r+0x2c>
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	6014      	str	r4, [r2, #0]
 80059ce:	4628      	mov	r0, r5
 80059d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d4:	f000 b83a 	b.w	8005a4c <__malloc_unlock>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d908      	bls.n	80059ee <_free_r+0x42>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	1821      	adds	r1, r4, r0
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf01      	itttt	eq
 80059e4:	6819      	ldreq	r1, [r3, #0]
 80059e6:	685b      	ldreq	r3, [r3, #4]
 80059e8:	1809      	addeq	r1, r1, r0
 80059ea:	6021      	streq	r1, [r4, #0]
 80059ec:	e7ed      	b.n	80059ca <_free_r+0x1e>
 80059ee:	461a      	mov	r2, r3
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b10b      	cbz	r3, 80059f8 <_free_r+0x4c>
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d9fa      	bls.n	80059ee <_free_r+0x42>
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	1850      	adds	r0, r2, r1
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d10b      	bne.n	8005a18 <_free_r+0x6c>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	4401      	add	r1, r0
 8005a04:	1850      	adds	r0, r2, r1
 8005a06:	4283      	cmp	r3, r0
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	d1e0      	bne.n	80059ce <_free_r+0x22>
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	6053      	str	r3, [r2, #4]
 8005a12:	4408      	add	r0, r1
 8005a14:	6010      	str	r0, [r2, #0]
 8005a16:	e7da      	b.n	80059ce <_free_r+0x22>
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x74>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	e7d6      	b.n	80059ce <_free_r+0x22>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	1821      	adds	r1, r4, r0
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf04      	itt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	6063      	str	r3, [r4, #4]
 8005a2e:	bf04      	itt	eq
 8005a30:	1809      	addeq	r1, r1, r0
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	6054      	str	r4, [r2, #4]
 8005a36:	e7ca      	b.n	80059ce <_free_r+0x22>
 8005a38:	bd38      	pop	{r3, r4, r5, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20004cd8 	.word	0x20004cd8

08005a40 <__malloc_lock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	@ (8005a48 <__malloc_lock+0x8>)
 8005a42:	f7ff bfa3 	b.w	800598c <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	20004cd4 	.word	0x20004cd4

08005a4c <__malloc_unlock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	@ (8005a54 <__malloc_unlock+0x8>)
 8005a4e:	f7ff bf9e 	b.w	800598e <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	20004cd4 	.word	0x20004cd4

08005a58 <_init>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr

08005a64 <_fini>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr
