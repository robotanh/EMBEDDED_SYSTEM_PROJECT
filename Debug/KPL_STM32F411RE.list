
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005724  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005984  08005984  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005984  08005984  00006984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800598c  0800598c  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005990  08005990  00006990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005994  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b04  2000001c  080059b0  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b20  080059b0  00007b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f34  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033db  00000000  00000000  0001ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f7  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003748  00000000  00000000  00024a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001752d  00000000  00000000  0002815f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a36a  00000000  00000000  0003f68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d99f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c80  00000000  00000000  000d9a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000df6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080058ac 	.word	0x080058ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	080058ac 	.word	0x080058ac

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ShiftOut_SPI>:
uint8_t buttonPressed = 0;
uint32_t lcd_num=1;


void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(Latch_SPI2_GPIO_Port, Latch_SPI2_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004e0:	480a      	ldr	r0, [pc, #40]	@ (800050c <ShiftOut_SPI+0x3c>)
 80004e2:	f000 ff5f 	bl	80013a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, data, size, 300); // Transmit data
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	4807      	ldr	r0, [pc, #28]	@ (8000510 <ShiftOut_SPI+0x40>)
 80004f2:	f001 fc84 	bl	8001dfe <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(Latch_SPI2_GPIO_Port, Latch_SPI2_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <ShiftOut_SPI+0x3c>)
 80004fe:	f000 ff51 	bl	80013a4 <HAL_GPIO_WritePin>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40020400 	.word	0x40020400
 8000510:	20000038 	.word	0x20000038

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc9c 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f83a 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f956 	bl	80007d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000524:	f000 f894 	bl	8000650 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000528:	f000 f8fe 	bl	8000728 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 800052c:	f000 f8c6 	bl	80006bc <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f924 	bl	800077c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f002 fbfe 	bl	8002d34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <main+0x5c>)
 800053a:	2100      	movs	r1, #0
 800053c:	480d      	ldr	r0, [pc, #52]	@ (8000574 <main+0x60>)
 800053e:	f002 fc43 	bl	8002dc8 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <main+0x64>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8000548:	4a0c      	ldr	r2, [pc, #48]	@ (800057c <main+0x68>)
 800054a:	2100      	movs	r1, #0
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <main+0x6c>)
 800054e:	f002 fc3b 	bl	8002dc8 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0b      	ldr	r2, [pc, #44]	@ (8000584 <main+0x70>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(LCDRun, NULL, &LCDTask_attributes);
 8000558:	4a0b      	ldr	r2, [pc, #44]	@ (8000588 <main+0x74>)
 800055a:	2100      	movs	r1, #0
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <main+0x78>)
 800055e:	f002 fc33 	bl	8002dc8 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <main+0x7c>)
 8000566:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000568:	f002 fc08 	bl	8002d7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <main+0x58>
 8000570:	08005900 	.word	0x08005900
 8000574:	080008f1 	.word	0x080008f1
 8000578:	20000178 	.word	0x20000178
 800057c:	08005924 	.word	0x08005924
 8000580:	08000985 	.word	0x08000985
 8000584:	2000017c 	.word	0x2000017c
 8000588:	08005948 	.word	0x08005948
 800058c:	08000995 	.word	0x08000995
 8000590:	20000180 	.word	0x20000180

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 f948 	bl	8005838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xb4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xb4>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xb4>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <SystemClock_Config+0xb8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a1b      	ldr	r2, [pc, #108]	@ (800064c <SystemClock_Config+0xb8>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <SystemClock_Config+0xb8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fee7 	bl	80013d8 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000610:	f000 f9d7 	bl	80009c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f94a 	bl	80018c8 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800063a:	f000 f9c2 	bl	80009c2 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000654:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000656:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <MX_SPI2_Init+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <MX_SPI2_Init+0x64>)
 800065c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_SPI2_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_SPI2_Init+0x64>)
 800067c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000680:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <MX_SPI2_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_SPI2_Init+0x64>)
 800069c:	220a      	movs	r2, #10
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <MX_SPI2_Init+0x64>)
 80006a2:	f001 fb23 	bl	8001cec <HAL_SPI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006ac:	f000 f989 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000038 	.word	0x20000038
 80006b8:	40003800 	.word	0x40003800

080006bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_SPI3_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI3_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI3_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI3_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI3_Init+0x64>)
 800070e:	f001 faed 	bl	8001cec <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f953 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000090 	.word	0x20000090
 8000724:	40003c00 	.word	0x40003c00

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_USART1_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000734:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000760:	f001 ffe0 	bl	8002724 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f92a 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000e8 	.word	0x200000e8
 8000778:	40011000 	.word	0x40011000

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f001 ffb6 	bl	8002724 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f900 	bl	80009c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000130 	.word	0x20000130
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b3d      	ldr	r3, [pc, #244]	@ (80008e0 <MX_GPIO_Init+0x110>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a3c      	ldr	r2, [pc, #240]	@ (80008e0 <MX_GPIO_Init+0x110>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b3a      	ldr	r3, [pc, #232]	@ (80008e0 <MX_GPIO_Init+0x110>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b36      	ldr	r3, [pc, #216]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a35      	ldr	r2, [pc, #212]	@ (80008e0 <MX_GPIO_Init+0x110>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b33      	ldr	r3, [pc, #204]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a2e      	ldr	r2, [pc, #184]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a27      	ldr	r2, [pc, #156]	@ (80008e0 <MX_GPIO_Init+0x110>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <MX_GPIO_Init+0x110>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	4822      	ldr	r0, [pc, #136]	@ (80008e4 <MX_GPIO_Init+0x114>)
 800085c:	f000 fda2 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI2_Pin|Latch_SPI3_Pin|OUT0_Pin|OUT1_Pin
 8000860:	2200      	movs	r2, #0
 8000862:	f24c 31c0 	movw	r1, #50112	@ 0xc3c0
 8000866:	4820      	ldr	r0, [pc, #128]	@ (80008e8 <MX_GPIO_Init+0x118>)
 8000868:	f000 fd9c 	bl	80013a4 <HAL_GPIO_WritePin>
                          |OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000876:	2302      	movs	r3, #2
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	481a      	ldr	r0, [pc, #104]	@ (80008ec <MX_GPIO_Init+0x11c>)
 8000882:	f000 fc0b 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_GPIO_Init+0x114>)
 800089e:	f000 fbfd 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80008a2:	231f      	movs	r3, #31
 80008a4:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <MX_GPIO_Init+0x118>)
 80008b6:	f000 fbf1 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI2_Pin Latch_SPI3_Pin OUT0_Pin OUT1_Pin
                           OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI2_Pin|Latch_SPI3_Pin|OUT0_Pin|OUT1_Pin
 80008ba:	f24c 33c0 	movw	r3, #50112	@ 0xc3c0
 80008be:	617b      	str	r3, [r7, #20]
                          |OUT2_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_GPIO_Init+0x118>)
 80008d4:	f000 fbe2 	bl	800109c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40020800 	.word	0x40020800

080008f0 <Led3x6Run>:
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */

void Led3x6Run(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i=0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint8_t led_buffer[] = {0b11111111,digitMapWithDP[i%10],digitMapWithDP[(i+1)%10],digitMapWithDP[(i+2)%10]}; // Data to display '1' with DP
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	723b      	strb	r3, [r7, #8]
 8000900:	68f9      	ldr	r1, [r7, #12]
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <Led3x6Run+0x8c>)
 8000904:	fb83 2301 	smull	r2, r3, r3, r1
 8000908:	109a      	asrs	r2, r3, #2
 800090a:	17cb      	asrs	r3, r1, #31
 800090c:	1ad2      	subs	r2, r2, r3
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	1aca      	subs	r2, r1, r3
 8000918:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <Led3x6Run+0x90>)
 800091a:	5c9b      	ldrb	r3, [r3, r2]
 800091c:	727b      	strb	r3, [r7, #9]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1c59      	adds	r1, r3, #1
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <Led3x6Run+0x8c>)
 8000924:	fb83 2301 	smull	r2, r3, r3, r1
 8000928:	109a      	asrs	r2, r3, #2
 800092a:	17cb      	asrs	r3, r1, #31
 800092c:	1ad2      	subs	r2, r2, r3
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	1aca      	subs	r2, r1, r3
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <Led3x6Run+0x90>)
 800093a:	5c9b      	ldrb	r3, [r3, r2]
 800093c:	72bb      	strb	r3, [r7, #10]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	1c99      	adds	r1, r3, #2
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <Led3x6Run+0x8c>)
 8000944:	fb83 2301 	smull	r2, r3, r3, r1
 8000948:	109a      	asrs	r2, r3, #2
 800094a:	17cb      	asrs	r3, r1, #31
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	1aca      	subs	r2, r1, r3
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <Led3x6Run+0x90>)
 800095a:	5c9b      	ldrb	r3, [r3, r2]
 800095c:	72fb      	strb	r3, [r7, #11]
	  ShiftOut_SPI(led_buffer, 4);
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2104      	movs	r1, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fdb3 	bl	80004d0 <ShiftOut_SPI>
	  i++;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
	 osDelay(500);
 8000970:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000974:	f002 faba 	bl	8002eec <osDelay>
  {
 8000978:	bf00      	nop
 800097a:	e7bf      	b.n	80008fc <Led3x6Run+0xc>
 800097c:	66666667 	.word	0x66666667
 8000980:	20000000 	.word	0x20000000

08000984 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f002 faad 	bl	8002eec <osDelay>
 8000992:	e7fb      	b.n	800098c <KeyPad4x5Run+0x8>

08000994 <LCDRun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDRun */
void LCDRun(void *argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDRun */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f002 faa5 	bl	8002eec <osDelay>
 80009a2:	e7fb      	b.n	800099c <LCDRun+0x8>

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 fa6f 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c6:	b672      	cpsid	i
}
 80009c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ca:	bf00      	nop
 80009cc:	e7fd      	b.n	80009ca <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a11      	ldr	r2, [pc, #68]	@ (8000a24 <HAL_MspInit+0x54>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_MspInit+0x54>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	210f      	movs	r1, #15
 8000a12:	f06f 0001 	mvn.w	r0, #1
 8000a16:	f000 fb17 	bl	8001048 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	@ 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a51      	ldr	r2, [pc, #324]	@ (8000b8c <HAL_SPI_MspInit+0x164>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d14b      	bne.n	8000ae2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
 8000a4e:	4b50      	ldr	r3, [pc, #320]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a4f      	ldr	r2, [pc, #316]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	4b49      	ldr	r3, [pc, #292]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a48      	ldr	r2, [pc, #288]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b46      	ldr	r3, [pc, #280]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b42      	ldr	r3, [pc, #264]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a41      	ldr	r2, [pc, #260]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4836      	ldr	r0, [pc, #216]	@ (8000b94 <HAL_SPI_MspInit+0x16c>)
 8000aba:	f000 faef 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482f      	ldr	r0, [pc, #188]	@ (8000b98 <HAL_SPI_MspInit+0x170>)
 8000adc:	f000 fade 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ae0:	e050      	b.n	8000b84 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b9c <HAL_SPI_MspInit+0x174>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d14b      	bne.n	8000b84 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_SPI_MspInit+0x168>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000b52:	2307      	movs	r3, #7
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <HAL_SPI_MspInit+0x170>)
 8000b5e:	f000 fa9d 	bl	800109c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b74:	2306      	movs	r3, #6
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <HAL_SPI_MspInit+0x16c>)
 8000b80:	f000 fa8c 	bl	800109c <HAL_GPIO_Init>
}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	@ 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40003800 	.word	0x40003800
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40003c00 	.word	0x40003c00

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	@ 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a32      	ldr	r2, [pc, #200]	@ (8000c88 <HAL_UART_MspInit+0xe8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12d      	bne.n	8000c1e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a30      	ldr	r2, [pc, #192]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a29      	ldr	r2, [pc, #164]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <HAL_UART_MspInit+0xf0>)
 8000c18:	f000 fa40 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1c:	e030      	b.n	8000c80 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <HAL_UART_MspInit+0xf4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d12b      	bne.n	8000c80 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	4a16      	ldr	r2, [pc, #88]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_UART_MspInit+0xec>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c60:	230c      	movs	r3, #12
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c70:	2307      	movs	r3, #7
 8000c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <HAL_UART_MspInit+0xf0>)
 8000c7c:	f000 fa0e 	bl	800109c <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	@ 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40011000 	.word	0x40011000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40004400 	.word	0x40004400

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	@ 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <HAL_InitTick+0xe8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	4a33      	ldr	r2, [pc, #204]	@ (8000d80 <HAL_InitTick+0xe8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb8:	4b31      	ldr	r3, [pc, #196]	@ (8000d80 <HAL_InitTick+0xe8>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 ffda 	bl	8001c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cde:	f000 ffab 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8000ce2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ce4:	e004      	b.n	8000cf0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce6:	f000 ffa7 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf2:	4a24      	ldr	r2, [pc, #144]	@ (8000d84 <HAL_InitTick+0xec>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	0c9b      	lsrs	r3, r3, #18
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d06:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d12:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000d26:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d28:	f001 fa88 	bl	800223c <HAL_TIM_Base_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d32:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11b      	bne.n	8000d72 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000d3a:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <HAL_InitTick+0xf0>)
 8000d3c:	f001 fad8 	bl	80022f0 <HAL_TIM_Base_Start_IT>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d111      	bne.n	8000d72 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d4e:	201c      	movs	r0, #28
 8000d50:	f000 f996 	bl	8001080 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b0f      	cmp	r3, #15
 8000d58:	d808      	bhi.n	8000d6c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	201c      	movs	r0, #28
 8000d60:	f000 f972 	bl	8001048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d64:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <HAL_InitTick+0xf4>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e002      	b.n	8000d72 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3738      	adds	r7, #56	@ 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	20000184 	.word	0x20000184
 8000d8c:	20000010 	.word	0x20000010

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <MemManage_Handler+0x4>

08000da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <TIM2_IRQHandler+0x10>)
 8000dce:	f001 faf1 	bl	80023b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000184 	.word	0x20000184

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f004 fd0b 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fb6f 	bl	8000514 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e44:	08005994 	.word	0x08005994
  ldr r2, =_sbss
 8000e48:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e4c:	20004b20 	.word	0x20004b20

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f8d8 	bl	8001032 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f7ff ff08 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fda2 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000014 	.word	0x20000014
 8000ebc:	200001cc 	.word	0x200001cc

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200001cc 	.word	0x200001cc

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff4c 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105a:	f7ff ff61 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 800105e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f7ff ffb1 	bl	8000fcc <NVIC_EncodePriority>
 800106a:	4602      	mov	r2, r0
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff80 	bl	8000f78 <__NVIC_SetPriority>
}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff54 	bl	8000f3c <__NVIC_EnableIRQ>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e159      	b.n	800136c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8148 	bne.w	8001366 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d130      	bne.n	8001150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 0201 	and.w	r2, r3, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d017      	beq.n	800118c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d123      	bne.n	80011e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	69b9      	ldr	r1, [r7, #24]
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a2 	beq.w	8001366 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b57      	ldr	r3, [pc, #348]	@ (8001384 <HAL_GPIO_Init+0x2e8>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a56      	ldr	r2, [pc, #344]	@ (8001384 <HAL_GPIO_Init+0x2e8>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b54      	ldr	r3, [pc, #336]	@ (8001384 <HAL_GPIO_Init+0x2e8>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a52      	ldr	r2, [pc, #328]	@ (8001388 <HAL_GPIO_Init+0x2ec>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a49      	ldr	r2, [pc, #292]	@ (800138c <HAL_GPIO_Init+0x2f0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d019      	beq.n	800129e <HAL_GPIO_Init+0x202>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a48      	ldr	r2, [pc, #288]	@ (8001390 <HAL_GPIO_Init+0x2f4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0x1fe>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a47      	ldr	r2, [pc, #284]	@ (8001394 <HAL_GPIO_Init+0x2f8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00d      	beq.n	8001296 <HAL_GPIO_Init+0x1fa>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a46      	ldr	r2, [pc, #280]	@ (8001398 <HAL_GPIO_Init+0x2fc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x1f6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a45      	ldr	r2, [pc, #276]	@ (800139c <HAL_GPIO_Init+0x300>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_GPIO_Init+0x1f2>
 800128a:	2304      	movs	r3, #4
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x204>
 800128e:	2307      	movs	r3, #7
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x204>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x204>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x204>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x204>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	@ (8001388 <HAL_GPIO_Init+0x2ec>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b38      	ldr	r3, [pc, #224]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a2f      	ldr	r2, [pc, #188]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a24      	ldr	r2, [pc, #144]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001312:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001336:	4a1a      	ldr	r2, [pc, #104]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001360:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_GPIO_Init+0x304>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f aea2 	bls.w	80010b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e267      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d075      	beq.n	80014e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f6:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d00c      	beq.n	800141c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001402:	4b85      	ldr	r3, [pc, #532]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d112      	bne.n	8001434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140e:	4b82      	ldr	r3, [pc, #520]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800141a:	d10b      	bne.n	8001434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4b7e      	ldr	r3, [pc, #504]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d05b      	beq.n	80014e0 <HAL_RCC_OscConfig+0x108>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d157      	bne.n	80014e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e242      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x74>
 800143e:	4b76      	ldr	r3, [pc, #472]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a75      	ldr	r2, [pc, #468]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e01d      	b.n	8001488 <HAL_RCC_OscConfig+0xb0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x98>
 8001456:	4b70      	ldr	r3, [pc, #448]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6f      	ldr	r2, [pc, #444]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 800145c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b6d      	ldr	r3, [pc, #436]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6c      	ldr	r2, [pc, #432]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0xb0>
 8001470:	4b69      	ldr	r3, [pc, #420]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a68      	ldr	r2, [pc, #416]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b66      	ldr	r3, [pc, #408]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a65      	ldr	r2, [pc, #404]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fd16 	bl	8000ec0 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fd12 	bl	8000ec0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	@ 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e207      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xc0>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fd02 	bl	8000ec0 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fcfe 	bl	8000ec0 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	@ 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1f3      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	4b51      	ldr	r3, [pc, #324]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0xe8>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d063      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fa:	4b47      	ldr	r3, [pc, #284]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001502:	2b08      	cmp	r3, #8
 8001504:	d11c      	bne.n	8001540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001506:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d116      	bne.n	8001540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	4b41      	ldr	r3, [pc, #260]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_RCC_OscConfig+0x152>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e1c7      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	4b3b      	ldr	r3, [pc, #236]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4937      	ldr	r1, [pc, #220]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	e03a      	b.n	80015b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_RCC_OscConfig+0x244>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fcb7 	bl	8000ec0 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fcb3 	bl	8000ec0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e1a8      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4925      	ldr	r1, [pc, #148]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b24      	ldr	r3, [pc, #144]	@ (800161c <HAL_RCC_OscConfig+0x244>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc96 	bl	8000ec0 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fc92 	bl	8000ec0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e187      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d036      	beq.n	8001630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d016      	beq.n	80015f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_RCC_OscConfig+0x248>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fc76 	bl	8000ec0 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc72 	bl	8000ec0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e167      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_RCC_OscConfig+0x240>)
 80015ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x200>
 80015f6:	e01b      	b.n	8001630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_RCC_OscConfig+0x248>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fc5f 	bl	8000ec0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	e00e      	b.n	8001624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fc5b 	bl	8000ec0 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d907      	bls.n	8001624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e150      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
 8001618:	40023800 	.word	0x40023800
 800161c:	42470000 	.word	0x42470000
 8001620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b88      	ldr	r3, [pc, #544]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ea      	bne.n	8001606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8097 	beq.w	800176c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b81      	ldr	r3, [pc, #516]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10f      	bne.n	800166e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b7d      	ldr	r3, [pc, #500]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a7c      	ldr	r2, [pc, #496]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b7a      	ldr	r3, [pc, #488]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b77      	ldr	r3, [pc, #476]	@ (800184c <HAL_RCC_OscConfig+0x474>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b74      	ldr	r3, [pc, #464]	@ (800184c <HAL_RCC_OscConfig+0x474>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a73      	ldr	r2, [pc, #460]	@ (800184c <HAL_RCC_OscConfig+0x474>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff fc1b 	bl	8000ec0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff fc17 	bl	8000ec0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e10c      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b6a      	ldr	r3, [pc, #424]	@ (800184c <HAL_RCC_OscConfig+0x474>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2ea>
 80016b4:	4b64      	ldr	r3, [pc, #400]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b8:	4a63      	ldr	r2, [pc, #396]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c0:	e01c      	b.n	80016fc <HAL_RCC_OscConfig+0x324>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x30c>
 80016ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	4a5b      	ldr	r2, [pc, #364]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0x324>
 80016e4:	4b58      	ldr	r3, [pc, #352]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e8:	4a57      	ldr	r2, [pc, #348]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f0:	4b55      	ldr	r3, [pc, #340]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f4:	4a54      	ldr	r2, [pc, #336]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f023 0304 	bic.w	r3, r3, #4
 80016fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d015      	beq.n	8001730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fbdc 	bl	8000ec0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fbd8 	bl	8000ec0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0cb      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	4b49      	ldr	r3, [pc, #292]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0ee      	beq.n	800170c <HAL_RCC_OscConfig+0x334>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fbc6 	bl	8000ec0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fbc2 	bl	8000ec0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0b5      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174e:	4b3e      	ldr	r3, [pc, #248]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ee      	bne.n	8001738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001760:	4b39      	ldr	r3, [pc, #228]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	4a38      	ldr	r2, [pc, #224]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80a1 	beq.w	80018b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001776:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b08      	cmp	r3, #8
 8001780:	d05c      	beq.n	800183c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d141      	bne.n	800180e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <HAL_RCC_OscConfig+0x478>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fb96 	bl	8000ec0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fb92 	bl	8000ec0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e087      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	3b01      	subs	r3, #1
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	061b      	lsls	r3, r3, #24
 80017da:	491b      	ldr	r1, [pc, #108]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_RCC_OscConfig+0x478>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fb6b 	bl	8000ec0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fb67 	bl	8000ec0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e05c      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x416>
 800180c:	e054      	b.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <HAL_RCC_OscConfig+0x478>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fb54 	bl	8000ec0 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fb50 	bl	8000ec0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e045      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_RCC_OscConfig+0x470>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x444>
 800183a:	e03d      	b.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e038      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000
 8001850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_RCC_OscConfig+0x4ec>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d028      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d121      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d11a      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800188a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188c:	4293      	cmp	r3, r2
 800188e:	d111      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	3b01      	subs	r3, #1
 800189e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d107      	bne.n	80018b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0cc      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018dc:	4b68      	ldr	r3, [pc, #416]	@ (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d90c      	bls.n	8001904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b65      	ldr	r3, [pc, #404]	@ (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b63      	ldr	r3, [pc, #396]	@ (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0b8      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191c:	4b59      	ldr	r3, [pc, #356]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a58      	ldr	r2, [pc, #352]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001934:	4b53      	ldr	r3, [pc, #332]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800193e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001940:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	494d      	ldr	r1, [pc, #308]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d044      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d119      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e07f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d003      	beq.n	8001986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001982:	2b03      	cmp	r3, #3
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b3b      	ldr	r3, [pc, #236]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e067      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4934      	ldr	r1, [pc, #208]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b8:	f7ff fa82 	bl	8000ec0 <HAL_GetTick>
 80019bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff fa7e 	bl	8000ec0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e04f      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 020c 	and.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1eb      	bne.n	80019c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d20c      	bcs.n	8001a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e032      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4916      	ldr	r1, [pc, #88]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	490e      	ldr	r1, [pc, #56]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4e:	f000 f821 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a52:	4602      	mov	r2, r0
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	490a      	ldr	r1, [pc, #40]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	5ccb      	ldrb	r3, [r1, r3]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f912 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023c00 	.word	0x40023c00
 8001a84:	40023800 	.word	0x40023800
 8001a88:	0800596c 	.word	0x0800596c
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000010 	.word	0x20000010

08001a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a98:	b090      	sub	sp, #64	@ 0x40
 8001a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aac:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	f200 80a1 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x3a>
 8001ac6:	e09b      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b53      	ldr	r3, [pc, #332]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aca:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001acc:	e09b      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ace:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ad2:	e098      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ade:	4b4d      	ldr	r3, [pc, #308]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d028      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b4a      	ldr	r3, [pc, #296]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	623b      	str	r3, [r7, #32]
 8001af4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001afc:	2100      	movs	r1, #0
 8001afe:	4b47      	ldr	r3, [pc, #284]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b00:	fb03 f201 	mul.w	r2, r3, r1
 8001b04:	2300      	movs	r3, #0
 8001b06:	fb00 f303 	mul.w	r3, r0, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a43      	ldr	r2, [pc, #268]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8001b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8001b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b14:	460a      	mov	r2, r1
 8001b16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b1a:	4413      	add	r3, r2
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b20:	2200      	movs	r2, #0
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	61fa      	str	r2, [r7, #28]
 8001b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b2e:	f7fe fb57 	bl	80001e0 <__aeabi_uldivmod>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4613      	mov	r3, r2
 8001b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b3a:	e053      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3c:	4b35      	ldr	r3, [pc, #212]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	2200      	movs	r2, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	617a      	str	r2, [r7, #20]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b4e:	f04f 0b00 	mov.w	fp, #0
 8001b52:	4652      	mov	r2, sl
 8001b54:	465b      	mov	r3, fp
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	0159      	lsls	r1, r3, #5
 8001b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b64:	0150      	lsls	r0, r2, #5
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b86:	ebb2 0408 	subs.w	r4, r2, r8
 8001b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	00eb      	lsls	r3, r5, #3
 8001b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9c:	00e2      	lsls	r2, r4, #3
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	eb14 030a 	adds.w	r3, r4, sl
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	eb45 030b 	adc.w	r3, r5, fp
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	60fa      	str	r2, [r7, #12]
 8001bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bd8:	f7fe fb02 	bl	80001e0 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3740      	adds	r7, #64	@ 0x40
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	017d7840 	.word	0x017d7840

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	0800597c 	.word	0x0800597c

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffdc 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0b5b      	lsrs	r3, r3, #13
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	@ (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	0800597c 	.word	0x0800597c

08001c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	220f      	movs	r2, #15
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <HAL_RCC_GetClockConfig+0x60>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0207 	and.w	r2, r3, #7
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	601a      	str	r2, [r3, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40023c00 	.word	0x40023c00

08001cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07b      	b.n	8001df6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d0e:	d009      	beq.n	8001d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fe72 	bl	8000a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da8:	ea42 0103 	orr.w	r1, r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0104 	and.w	r1, r3, #4
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	f003 0210 	and.w	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_SPI_Transmit+0x22>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e12d      	b.n	800207c <HAL_SPI_Transmit+0x27e>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e28:	f7ff f84a 	bl	8000ec0 <HAL_GetTick>
 8001e2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e42:	e116      	b.n	8002072 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_SPI_Transmit+0x52>
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e54:	e10d      	b.n	8002072 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e9c:	d10f      	bne.n	8001ebe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ebc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec8:	2b40      	cmp	r3, #64	@ 0x40
 8001eca:	d007      	beq.n	8001edc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee4:	d14f      	bne.n	8001f86 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_SPI_Transmit+0xf6>
 8001eee:	8afb      	ldrh	r3, [r7, #22]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d142      	bne.n	8001f7a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	1c9a      	adds	r2, r3, #2
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f18:	e02f      	b.n	8001f7a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d112      	bne.n	8001f4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	1c9a      	adds	r2, r3, #2
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f4c:	e015      	b.n	8001f7a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f4e:	f7fe ffb7 	bl	8000ec0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d803      	bhi.n	8001f66 <HAL_SPI_Transmit+0x168>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d102      	bne.n	8001f6c <HAL_SPI_Transmit+0x16e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001f78:	e07b      	b.n	8002072 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ca      	bne.n	8001f1a <HAL_SPI_Transmit+0x11c>
 8001f84:	e050      	b.n	8002028 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_SPI_Transmit+0x196>
 8001f8e:	8afb      	ldrh	r3, [r7, #22]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d144      	bne.n	800201e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	330c      	adds	r3, #12
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fba:	e030      	b.n	800201e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d113      	bne.n	8001ff2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ff0:	e015      	b.n	800201e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff2:	f7fe ff65 	bl	8000ec0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d803      	bhi.n	800200a <HAL_SPI_Transmit+0x20c>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d102      	bne.n	8002010 <HAL_SPI_Transmit+0x212>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800201c:	e029      	b.n	8002072 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1c9      	bne.n	8001fbc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f8b1 	bl	8002194 <SPI_EndRxTxTransaction>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	77fb      	strb	r3, [r7, #31]
 8002068:	e003      	b.n	8002072 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800207a:	7ffb      	ldrb	r3, [r7, #31]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002094:	f7fe ff14 	bl	8000ec0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020a4:	f7fe ff0c 	bl	8000ec0 <HAL_GetTick>
 80020a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020aa:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	015b      	lsls	r3, r3, #5
 80020b0:	0d1b      	lsrs	r3, r3, #20
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ba:	e054      	b.n	8002166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d050      	beq.n	8002166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020c4:	f7fe fefc 	bl	8000ec0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d902      	bls.n	80020da <SPI_WaitFlagStateUntilTimeout+0x56>
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d13d      	bne.n	8002156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020f2:	d111      	bne.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020fc:	d004      	beq.n	8002108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d107      	bne.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002120:	d10f      	bne.n	8002142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e017      	b.n	8002186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3b01      	subs	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	4013      	ands	r3, r2
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	429a      	cmp	r2, r3
 8002182:	d19b      	bne.n	80020bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c

08002194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2201      	movs	r2, #1
 80021a8:	2102      	movs	r1, #2
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff ff6a 	bl	8002084 <SPI_WaitFlagStateUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e032      	b.n	800222c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <SPI_EndRxTxTransaction+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <SPI_EndRxTxTransaction+0xa4>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0d5b      	lsrs	r3, r3, #21
 80021d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021e4:	d112      	bne.n	800220c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2180      	movs	r1, #128	@ 0x80
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ff47 	bl	8002084 <SPI_WaitFlagStateUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e00f      	b.n	800222c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3b01      	subs	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002222:	2b80      	cmp	r3, #128	@ 0x80
 8002224:	d0f2      	beq.n	800220c <SPI_EndRxTxTransaction+0x78>
 8002226:	e000      	b.n	800222a <SPI_EndRxTxTransaction+0x96>
        break;
 8002228:	bf00      	nop
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000000c 	.word	0x2000000c
 8002238:	165e9f81 	.word	0x165e9f81

0800223c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e041      	b.n	80022d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f839 	bl	80022da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 f9b2 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d001      	beq.n	8002308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e044      	b.n	8002392 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d018      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x6c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002332:	d013      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x6c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1a      	ldr	r2, [pc, #104]	@ (80023a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x6c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a19      	ldr	r2, [pc, #100]	@ (80023a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x6c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <HAL_TIM_Base_Start_IT+0xbc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x6c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a16      	ldr	r2, [pc, #88]	@ (80023b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d010      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	e007      	b.n	8002390 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40000400 	.word	0x40000400
 80023a8:	40000800 	.word	0x40000800
 80023ac:	40000c00 	.word	0x40000c00
 80023b0:	40014000 	.word	0x40014000

080023b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d020      	beq.n	8002418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0202 	mvn.w	r2, #2
 80023e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8d2 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8002404:	e005      	b.n	8002412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8c4 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f8d5 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d020      	beq.n	8002464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0204 	mvn.w	r2, #4
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8ac 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f89e 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8af 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0208 	mvn.w	r2, #8
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2204      	movs	r2, #4
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f886 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f878 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f889 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d020      	beq.n	80024fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0210 	mvn.w	r2, #16
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2208      	movs	r2, #8
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f860 	bl	80025a8 <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f852 	bl	8002594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f863 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00c      	beq.n	8002520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0201 	mvn.w	r2, #1
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fa42 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8e6 	bl	8002710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f834 	bl	80025d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00c      	beq.n	800258c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0220 	mvn.w	r2, #32
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8b8 	bl	80026fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3a      	ldr	r2, [pc, #232]	@ (80026e0 <TIM_Base_SetConfig+0xfc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00f      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002602:	d00b      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a37      	ldr	r2, [pc, #220]	@ (80026e4 <TIM_Base_SetConfig+0x100>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a36      	ldr	r2, [pc, #216]	@ (80026e8 <TIM_Base_SetConfig+0x104>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <TIM_Base_SetConfig+0x38>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a35      	ldr	r2, [pc, #212]	@ (80026ec <TIM_Base_SetConfig+0x108>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <TIM_Base_SetConfig+0xfc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01b      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263c:	d017      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a28      	ldr	r2, [pc, #160]	@ (80026e4 <TIM_Base_SetConfig+0x100>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a27      	ldr	r2, [pc, #156]	@ (80026e8 <TIM_Base_SetConfig+0x104>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a26      	ldr	r2, [pc, #152]	@ (80026ec <TIM_Base_SetConfig+0x108>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a25      	ldr	r2, [pc, #148]	@ (80026f0 <TIM_Base_SetConfig+0x10c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a24      	ldr	r2, [pc, #144]	@ (80026f4 <TIM_Base_SetConfig+0x110>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <TIM_Base_SetConfig+0x114>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <TIM_Base_SetConfig+0xfc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f023 0201 	bic.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	611a      	str	r2, [r3, #16]
  }
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800
 80026ec:	40000c00 	.word	0x40000c00
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e042      	b.n	80027bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fa28 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	@ 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f82b 	bl	80027c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800277c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800278c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800279c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b0c0      	sub	sp, #256	@ 0x100
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	68d9      	ldr	r1, [r3, #12]
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	ea40 0301 	orr.w	r3, r0, r1
 80027ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	431a      	orrs	r2, r3
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800281c:	f021 010c 	bic.w	r1, r1, #12
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800282a:	430b      	orrs	r3, r1
 800282c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800282e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800283a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283e:	6999      	ldr	r1, [r3, #24]
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	ea40 0301 	orr.w	r3, r0, r1
 800284a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b8f      	ldr	r3, [pc, #572]	@ (8002a90 <UART_SetConfig+0x2cc>)
 8002854:	429a      	cmp	r2, r3
 8002856:	d005      	beq.n	8002864 <UART_SetConfig+0xa0>
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a94 <UART_SetConfig+0x2d0>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d104      	bne.n	800286e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff f9fc 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 8002868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800286c:	e003      	b.n	8002876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800286e:	f7ff f9e3 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002880:	f040 810c 	bne.w	8002a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002888:	2200      	movs	r2, #0
 800288a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800288e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002896:	4622      	mov	r2, r4
 8002898:	462b      	mov	r3, r5
 800289a:	1891      	adds	r1, r2, r2
 800289c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800289e:	415b      	adcs	r3, r3
 80028a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028a6:	4621      	mov	r1, r4
 80028a8:	eb12 0801 	adds.w	r8, r2, r1
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb43 0901 	adc.w	r9, r3, r1
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c6:	4690      	mov	r8, r2
 80028c8:	4699      	mov	r9, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	eb18 0303 	adds.w	r3, r8, r3
 80028d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028d4:	462b      	mov	r3, r5
 80028d6:	eb49 0303 	adc.w	r3, r9, r3
 80028da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028f2:	460b      	mov	r3, r1
 80028f4:	18db      	adds	r3, r3, r3
 80028f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80028f8:	4613      	mov	r3, r2
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002908:	f7fd fc6a 	bl	80001e0 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4b61      	ldr	r3, [pc, #388]	@ (8002a98 <UART_SetConfig+0x2d4>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	011c      	lsls	r4, r3, #4
 800291a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002934:	415b      	adcs	r3, r3
 8002936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800293c:	4641      	mov	r1, r8
 800293e:	eb12 0a01 	adds.w	sl, r2, r1
 8002942:	4649      	mov	r1, r9
 8002944:	eb43 0b01 	adc.w	fp, r3, r1
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800295c:	4692      	mov	sl, r2
 800295e:	469b      	mov	fp, r3
 8002960:	4643      	mov	r3, r8
 8002962:	eb1a 0303 	adds.w	r3, sl, r3
 8002966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800296a:	464b      	mov	r3, r9
 800296c:	eb4b 0303 	adc.w	r3, fp, r3
 8002970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002988:	460b      	mov	r3, r1
 800298a:	18db      	adds	r3, r3, r3
 800298c:	643b      	str	r3, [r7, #64]	@ 0x40
 800298e:	4613      	mov	r3, r2
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	647b      	str	r3, [r7, #68]	@ 0x44
 8002996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800299a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800299e:	f7fd fc1f 	bl	80001e0 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <UART_SetConfig+0x2d4>)
 80029aa:	fba3 2301 	umull	r2, r3, r3, r1
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	@ 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1acb      	subs	r3, r1, r3
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029be:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <UART_SetConfig+0x2d4>)
 80029c0:	fba3 2302 	umull	r2, r3, r3, r2
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029cc:	441c      	add	r4, r3
 80029ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029e0:	4642      	mov	r2, r8
 80029e2:	464b      	mov	r3, r9
 80029e4:	1891      	adds	r1, r2, r2
 80029e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029e8:	415b      	adcs	r3, r3
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029f0:	4641      	mov	r1, r8
 80029f2:	1851      	adds	r1, r2, r1
 80029f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80029f6:	4649      	mov	r1, r9
 80029f8:	414b      	adcs	r3, r1
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a08:	4659      	mov	r1, fp
 8002a0a:	00cb      	lsls	r3, r1, #3
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a12:	4651      	mov	r1, sl
 8002a14:	00ca      	lsls	r2, r1, #3
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a24:	464b      	mov	r3, r9
 8002a26:	460a      	mov	r2, r1
 8002a28:	eb42 0303 	adc.w	r3, r2, r3
 8002a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a44:	460b      	mov	r3, r1
 8002a46:	18db      	adds	r3, r3, r3
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a5a:	f7fd fbc1 	bl	80001e0 <__aeabi_uldivmod>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <UART_SetConfig+0x2d4>)
 8002a64:	fba3 1302 	umull	r1, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	2164      	movs	r1, #100	@ 0x64
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	3332      	adds	r3, #50	@ 0x32
 8002a76:	4a08      	ldr	r2, [pc, #32]	@ (8002a98 <UART_SetConfig+0x2d4>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	f003 0207 	and.w	r2, r3, #7
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4422      	add	r2, r4
 8002a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a8c:	e106      	b.n	8002c9c <UART_SetConfig+0x4d8>
 8002a8e:	bf00      	nop
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40011400 	.word	0x40011400
 8002a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002aae:	4642      	mov	r2, r8
 8002ab0:	464b      	mov	r3, r9
 8002ab2:	1891      	adds	r1, r2, r2
 8002ab4:	6239      	str	r1, [r7, #32]
 8002ab6:	415b      	adcs	r3, r3
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002abe:	4641      	mov	r1, r8
 8002ac0:	1854      	adds	r4, r2, r1
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	eb43 0501 	adc.w	r5, r3, r1
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	00eb      	lsls	r3, r5, #3
 8002ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad6:	00e2      	lsls	r2, r4, #3
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	4643      	mov	r3, r8
 8002ade:	18e3      	adds	r3, r4, r3
 8002ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	eb45 0303 	adc.w	r3, r5, r3
 8002aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	008b      	lsls	r3, r1, #2
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b14:	4621      	mov	r1, r4
 8002b16:	008a      	lsls	r2, r1, #2
 8002b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b1c:	f7fd fb60 	bl	80001e0 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4b60      	ldr	r3, [pc, #384]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002b26:	fba3 2302 	umull	r2, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	011c      	lsls	r4, r3, #4
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b40:	4642      	mov	r2, r8
 8002b42:	464b      	mov	r3, r9
 8002b44:	1891      	adds	r1, r2, r2
 8002b46:	61b9      	str	r1, [r7, #24]
 8002b48:	415b      	adcs	r3, r3
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b50:	4641      	mov	r1, r8
 8002b52:	1851      	adds	r1, r2, r1
 8002b54:	6139      	str	r1, [r7, #16]
 8002b56:	4649      	mov	r1, r9
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b68:	4659      	mov	r1, fp
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4651      	mov	r1, sl
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4642      	mov	r2, r8
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b84:	464b      	mov	r3, r9
 8002b86:	460a      	mov	r2, r1
 8002b88:	eb42 0303 	adc.w	r3, r2, r3
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ba8:	4649      	mov	r1, r9
 8002baa:	008b      	lsls	r3, r1, #2
 8002bac:	4641      	mov	r1, r8
 8002bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	008a      	lsls	r2, r1, #2
 8002bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002bba:	f7fd fb11 	bl	80001e0 <__aeabi_uldivmod>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2264      	movs	r2, #100	@ 0x64
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	1acb      	subs	r3, r1, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	@ 0x32
 8002bd8:	4a33      	ldr	r2, [pc, #204]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be4:	441c      	add	r4, r3
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1891      	adds	r1, r2, r2
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	415b      	adcs	r3, r3
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c04:	4641      	mov	r1, r8
 8002c06:	1851      	adds	r1, r2, r1
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	414b      	adcs	r3, r1
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c1c:	4659      	mov	r1, fp
 8002c1e:	00cb      	lsls	r3, r1, #3
 8002c20:	4651      	mov	r1, sl
 8002c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c26:	4651      	mov	r1, sl
 8002c28:	00ca      	lsls	r2, r1, #3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4642      	mov	r2, r8
 8002c32:	189b      	adds	r3, r3, r2
 8002c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c36:	464b      	mov	r3, r9
 8002c38:	460a      	mov	r2, r1
 8002c3a:	eb42 0303 	adc.w	r3, r2, r3
 8002c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c58:	4649      	mov	r1, r9
 8002c5a:	008b      	lsls	r3, r1, #2
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c62:	4641      	mov	r1, r8
 8002c64:	008a      	lsls	r2, r1, #2
 8002c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c6a:	f7fd fab9 	bl	80001e0 <__aeabi_uldivmod>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002c74:	fba3 1302 	umull	r1, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2164      	movs	r1, #100	@ 0x64
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	3332      	adds	r3, #50	@ 0x32
 8002c86:	4a08      	ldr	r2, [pc, #32]	@ (8002ca8 <UART_SetConfig+0x4e4>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4422      	add	r2, r4
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	bf00      	nop
 8002c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca8:	51eb851f 	.word	0x51eb851f

08002cac <__NVIC_SetPriority>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	@ (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	@ (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Handler+0x1c>)
 8002d06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d08:	f001 fd18 	bl	800473c <xTaskGetSchedulerState>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d12:	f002 fb11 	bl	8005338 <xPortSysTickHandler>
  }
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d24:	2100      	movs	r1, #0
 8002d26:	f06f 0004 	mvn.w	r0, #4
 8002d2a:	f7ff ffbf 	bl	8002cac <__NVIC_SetPriority>
#endif
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d3a:	f3ef 8305 	mrs	r3, IPSR
 8002d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d46:	f06f 0305 	mvn.w	r3, #5
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	e00c      	b.n	8002d68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <osKernelInitialize+0x44>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <osKernelInitialize+0x44>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	e002      	b.n	8002d68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d68:	687b      	ldr	r3, [r7, #4]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	200001d0 	.word	0x200001d0

08002d7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d82:	f3ef 8305 	mrs	r3, IPSR
 8002d86:	603b      	str	r3, [r7, #0]
  return(result);
 8002d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d8e:	f06f 0305 	mvn.w	r3, #5
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	e010      	b.n	8002db8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d96:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <osKernelStart+0x48>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d109      	bne.n	8002db2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d9e:	f7ff ffbf 	bl	8002d20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <osKernelStart+0x48>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002da8:	f001 f87a 	bl	8003ea0 <vTaskStartScheduler>
      stat = osOK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	e002      	b.n	8002db8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002db8:	687b      	ldr	r3, [r7, #4]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200001d0 	.word	0x200001d0

08002dc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	@ 0x38
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd8:	f3ef 8305 	mrs	r3, IPSR
 8002ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8002dde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d17e      	bne.n	8002ee2 <osThreadNew+0x11a>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d07b      	beq.n	8002ee2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002dee:	2318      	movs	r3, #24
 8002df0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d045      	beq.n	8002e8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <osThreadNew+0x48>
        name = attr->name;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <osThreadNew+0x6e>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b38      	cmp	r3, #56	@ 0x38
 8002e28:	d805      	bhi.n	8002e36 <osThreadNew+0x6e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <osThreadNew+0x72>
        return (NULL);
 8002e36:	2300      	movs	r3, #0
 8002e38:	e054      	b.n	8002ee4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <osThreadNew+0xa8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b5b      	cmp	r3, #91	@ 0x5b
 8002e58:	d90a      	bls.n	8002e70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <osThreadNew+0xa8>
        mem = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e010      	b.n	8002e92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10c      	bne.n	8002e92 <osThreadNew+0xca>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <osThreadNew+0xca>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <osThreadNew+0xca>
          mem = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	e001      	b.n	8002e92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d110      	bne.n	8002eba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ea0:	9202      	str	r2, [sp, #8]
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6a3a      	ldr	r2, [r7, #32]
 8002eac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fe1a 	bl	8003ae8 <xTaskCreateStatic>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e013      	b.n	8002ee2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d110      	bne.n	8002ee2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fe68 	bl	8003ba8 <xTaskCreate>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d001      	beq.n	8002ee2 <osThreadNew+0x11a>
            hTask = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ee2:	693b      	ldr	r3, [r7, #16]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3728      	adds	r7, #40	@ 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef4:	f3ef 8305 	mrs	r3, IPSR
 8002ef8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002efa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <osDelay+0x1c>
    stat = osErrorISR;
 8002f00:	f06f 0305 	mvn.w	r3, #5
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e007      	b.n	8002f18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 ff8e 	bl	8003e34 <vTaskDelay>
    }
  }

  return (stat);
 8002f18:	68fb      	ldr	r3, [r7, #12]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a07      	ldr	r2, [pc, #28]	@ (8002f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a06      	ldr	r2, [pc, #24]	@ (8002f54 <vApplicationGetIdleTaskMemory+0x30>)
 8002f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200001d4 	.word	0x200001d4
 8002f54:	20000230 	.word	0x20000230

08002f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a07      	ldr	r2, [pc, #28]	@ (8002f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4a06      	ldr	r2, [pc, #24]	@ (8002f88 <vApplicationGetTimerTaskMemory+0x30>)
 8002f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f76:	601a      	str	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	20000430 	.word	0x20000430
 8002f88:	2000048c 	.word	0x2000048c

08002f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f103 0208 	add.w	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 0208 	add.w	r2, r3, #8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f103 0208 	add.w	r2, r3, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d103      	bne.n	800304e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e00c      	b.n	8003068 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3308      	adds	r3, #8
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e002      	b.n	800305c <vListInsert+0x2e>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d2f6      	bcs.n	8003056 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6892      	ldr	r2, [r2, #8]
 80030b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6852      	ldr	r2, [r2, #4]
 80030c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d103      	bne.n	80030d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	1e5a      	subs	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003120:	f002 f87a 	bl	8005218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	68f9      	ldr	r1, [r7, #12]
 800312e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	441a      	add	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003150:	3b01      	subs	r3, #1
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	441a      	add	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	22ff      	movs	r2, #255	@ 0xff
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	22ff      	movs	r2, #255	@ 0xff
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d114      	bne.n	80031a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01a      	beq.n	80031b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3310      	adds	r3, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f91a 	bl	80043bc <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800318e:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <xQueueGenericReset+0xd0>)
 8003190:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	e009      	b.n	80031b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3310      	adds	r3, #16
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fef1 	bl	8002f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	3324      	adds	r3, #36	@ 0x24
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff feec 	bl	8002f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031b4:	f002 f862 	bl	800527c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08e      	sub	sp, #56	@ 0x38
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	e7fd      	b.n	800320e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <xQueueGenericCreateStatic+0x56>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <xQueueGenericCreateStatic+0x5a>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <xQueueGenericCreateStatic+0x5c>
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	623b      	str	r3, [r7, #32]
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <xQueueGenericCreateStatic+0x84>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <xQueueGenericCreateStatic+0x88>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <xQueueGenericCreateStatic+0x8a>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	61fb      	str	r3, [r7, #28]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800326e:	2350      	movs	r3, #80	@ 0x50
 8003270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b50      	cmp	r3, #80	@ 0x50
 8003276:	d00b      	beq.n	8003290 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	61bb      	str	r3, [r7, #24]
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003290:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80032a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f805 	bl	80032c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3730      	adds	r7, #48	@ 0x30
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e002      	b.n	80032e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032f0:	2101      	movs	r1, #1
 80032f2:	69b8      	ldr	r0, [r7, #24]
 80032f4:	f7ff fefe 	bl	80030f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08e      	sub	sp, #56	@ 0x38
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003316:	2300      	movs	r3, #0
 8003318:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <xQueueGenericSend+0x34>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <xQueueGenericSend+0x42>
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <xQueueGenericSend+0x46>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueGenericSend+0x48>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <xQueueGenericSend+0x64>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d103      	bne.n	800337a <xQueueGenericSend+0x72>
 8003372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <xQueueGenericSend+0x76>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <xQueueGenericSend+0x78>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <xQueueGenericSend+0x94>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	623b      	str	r3, [r7, #32]
}
 8003396:	bf00      	nop
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800339c:	f001 f9ce 	bl	800473c <xTaskGetSchedulerState>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <xQueueGenericSend+0xa4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <xQueueGenericSend+0xa8>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <xQueueGenericSend+0xaa>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <xQueueGenericSend+0xc6>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	61fb      	str	r3, [r7, #28]
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ce:	f001 ff23 	bl	8005218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <xQueueGenericSend+0xdc>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d129      	bne.n	8003438 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ea:	f000 fa0f 	bl	800380c <prvCopyDataToQueue>
 80033ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	3324      	adds	r3, #36	@ 0x24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 ffdd 	bl	80043bc <xTaskRemoveFromEventList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003408:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <xQueueGenericSend+0x200>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	e00a      	b.n	8003430 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003420:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <xQueueGenericSend+0x200>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003430:	f001 ff24 	bl	800527c <vPortExitCritical>
				return pdPASS;
 8003434:	2301      	movs	r3, #1
 8003436:	e063      	b.n	8003500 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800343e:	f001 ff1d 	bl	800527c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003442:	2300      	movs	r3, #0
 8003444:	e05c      	b.n	8003500 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4618      	mov	r0, r3
 8003452:	f001 f817 	bl	8004484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003456:	2301      	movs	r3, #1
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800345a:	f001 ff0f 	bl	800527c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800345e:	f000 fd87 	bl	8003f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003462:	f001 fed9 	bl	8005218 <vPortEnterCritical>
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800346c:	b25b      	sxtb	r3, r3
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d103      	bne.n	800347c <xQueueGenericSend+0x174>
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d103      	bne.n	8003492 <xQueueGenericSend+0x18a>
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003492:	f001 fef3 	bl	800527c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003496:	1d3a      	adds	r2, r7, #4
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f806 	bl	80044b0 <xTaskCheckForTimeOut>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d124      	bne.n	80034f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034ac:	f000 faa6 	bl	80039fc <prvIsQueueFull>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b8:	3310      	adds	r3, #16
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff2a 	bl	8004318 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034c6:	f000 fa31 	bl	800392c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034ca:	f000 fd5f 	bl	8003f8c <xTaskResumeAll>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f af7c 	bne.w	80033ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80034d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <xQueueGenericSend+0x200>)
 80034d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	e772      	b.n	80033ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034ea:	f000 fa1f 	bl	800392c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ee:	f000 fd4d 	bl	8003f8c <xTaskResumeAll>
 80034f2:	e76c      	b.n	80033ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034f6:	f000 fa19 	bl	800392c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034fa:	f000 fd47 	bl	8003f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003500:	4618      	mov	r0, r3
 8003502:	3738      	adds	r7, #56	@ 0x38
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	@ 0x40
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800351e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <xQueueGenericSendFromISR+0x3e>
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <xQueueGenericSendFromISR+0x42>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <xQueueGenericSendFromISR+0x44>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d103      	bne.n	800357a <xQueueGenericSendFromISR+0x6e>
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <xQueueGenericSendFromISR+0x72>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <xQueueGenericSendFromISR+0x74>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	623b      	str	r3, [r7, #32]
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800359c:	f001 ff1c 	bl	80053d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035a0:	f3ef 8211 	mrs	r2, BASEPRI
 80035a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	61fa      	str	r2, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <xQueueGenericSendFromISR+0xc2>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d12f      	bne.n	800362e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80035e4:	f000 f912 	bl	800380c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d112      	bne.n	8003618 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	3324      	adds	r3, #36	@ 0x24
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fedc 	bl	80043bc <xTaskRemoveFromEventList>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e007      	b.n	8003628 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003618:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800361c:	3301      	adds	r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	b25a      	sxtb	r2, r3
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003628:	2301      	movs	r3, #1
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800362c:	e001      	b.n	8003632 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800362e:	2300      	movs	r3, #0
 8003630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800363c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800363e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003640:	4618      	mov	r0, r3
 8003642:	3740      	adds	r7, #64	@ 0x40
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	@ 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <xQueueReceive+0x32>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	623b      	str	r3, [r7, #32]
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	e7fd      	b.n	8003676 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <xQueueReceive+0x40>
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <xQueueReceive+0x44>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <xQueueReceive+0x46>
 800368c:	2300      	movs	r3, #0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <xQueueReceive+0x62>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	61fb      	str	r3, [r7, #28]
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	e7fd      	b.n	80036a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036aa:	f001 f847 	bl	800473c <xTaskGetSchedulerState>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <xQueueReceive+0x72>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <xQueueReceive+0x76>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <xQueueReceive+0x78>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <xQueueReceive+0x94>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	61bb      	str	r3, [r7, #24]
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036dc:	f001 fd9c 	bl	8005218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01f      	beq.n	800372c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f0:	f000 f8f6 	bl	80038e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00f      	beq.n	8003724 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003706:	3310      	adds	r3, #16
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fe57 	bl	80043bc <xTaskRemoveFromEventList>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003714:	4b3c      	ldr	r3, [pc, #240]	@ (8003808 <xQueueReceive+0x1c0>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003724:	f001 fdaa 	bl	800527c <vPortExitCritical>
				return pdPASS;
 8003728:	2301      	movs	r3, #1
 800372a:	e069      	b.n	8003800 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003732:	f001 fda3 	bl	800527c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003736:	2300      	movs	r3, #0
 8003738:	e062      	b.n	8003800 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fe9d 	bl	8004484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800374a:	2301      	movs	r3, #1
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800374e:	f001 fd95 	bl	800527c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003752:	f000 fc0d 	bl	8003f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003756:	f001 fd5f 	bl	8005218 <vPortEnterCritical>
 800375a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003760:	b25b      	sxtb	r3, r3
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d103      	bne.n	8003770 <xQueueReceive+0x128>
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003776:	b25b      	sxtb	r3, r3
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d103      	bne.n	8003786 <xQueueReceive+0x13e>
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003786:	f001 fd79 	bl	800527c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800378a:	1d3a      	adds	r2, r7, #4
 800378c:	f107 0310 	add.w	r3, r7, #16
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fe8c 	bl	80044b0 <xTaskCheckForTimeOut>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d123      	bne.n	80037e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800379e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037a0:	f000 f916 	bl	80039d0 <prvIsQueueEmpty>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d017      	beq.n	80037da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	3324      	adds	r3, #36	@ 0x24
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fdb0 	bl	8004318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037ba:	f000 f8b7 	bl	800392c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037be:	f000 fbe5 	bl	8003f8c <xTaskResumeAll>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d189      	bne.n	80036dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80037c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <xQueueReceive+0x1c0>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	e780      	b.n	80036dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037dc:	f000 f8a6 	bl	800392c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037e0:	f000 fbd4 	bl	8003f8c <xTaskResumeAll>
 80037e4:	e77a      	b.n	80036dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037e8:	f000 f8a0 	bl	800392c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ec:	f000 fbce 	bl	8003f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f2:	f000 f8ed 	bl	80039d0 <prvIsQueueEmpty>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f43f af6f 	beq.w	80036dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003800:	4618      	mov	r0, r3
 8003802:	3730      	adds	r7, #48	@ 0x30
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d14d      	bne.n	80038ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 ff9e 	bl	8004778 <xTaskPriorityDisinherit>
 800383c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	e043      	b.n	80038ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d119      	bne.n	8003880 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6858      	ldr	r0, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	461a      	mov	r2, r3
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	f002 f81a 	bl	8005890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	441a      	add	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	d32b      	bcc.n	80038ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	e026      	b.n	80038ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68d8      	ldr	r0, [r3, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	461a      	mov	r2, r3
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	f002 f800 	bl	8005890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	425b      	negs	r3, r3
 800389a:	441a      	add	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d207      	bcs.n	80038bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	425b      	negs	r3, r3
 80038b6:	441a      	add	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d105      	bne.n	80038ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038d6:	697b      	ldr	r3, [r7, #20]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d018      	beq.n	8003924 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	441a      	add	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d303      	bcc.n	8003914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68d9      	ldr	r1, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	461a      	mov	r2, r3
 800391e:	6838      	ldr	r0, [r7, #0]
 8003920:	f001 ffb6 	bl	8005890 <memcpy>
	}
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003934:	f001 fc70 	bl	8005218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800393e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003940:	e011      	b.n	8003966 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3324      	adds	r3, #36	@ 0x24
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fd34 	bl	80043bc <xTaskRemoveFromEventList>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800395a:	f000 fe0d 	bl	8004578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3b01      	subs	r3, #1
 8003962:	b2db      	uxtb	r3, r3
 8003964:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	dce9      	bgt.n	8003942 <prvUnlockQueue+0x16>
 800396e:	e000      	b.n	8003972 <prvUnlockQueue+0x46>
					break;
 8003970:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	22ff      	movs	r2, #255	@ 0xff
 8003976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800397a:	f001 fc7f 	bl	800527c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800397e:	f001 fc4b 	bl	8005218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003988:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800398a:	e011      	b.n	80039b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3310      	adds	r3, #16
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fd0f 	bl	80043bc <xTaskRemoveFromEventList>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039a4:	f000 fde8 	bl	8004578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	dce9      	bgt.n	800398c <prvUnlockQueue+0x60>
 80039b8:	e000      	b.n	80039bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	22ff      	movs	r2, #255	@ 0xff
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80039c4:	f001 fc5a 	bl	800527c <vPortExitCritical>
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039d8:	f001 fc1e 	bl	8005218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e001      	b.n	80039ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ee:	f001 fc45 	bl	800527c <vPortExitCritical>

	return xReturn;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a04:	f001 fc08 	bl	8005218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d102      	bne.n	8003a1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a14:	2301      	movs	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e001      	b.n	8003a1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a1e:	f001 fc2d 	bl	800527c <vPortExitCritical>

	return xReturn;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e014      	b.n	8003a66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a7c <vQueueAddToRegistry+0x50>)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a48:	490c      	ldr	r1, [pc, #48]	@ (8003a7c <vQueueAddToRegistry+0x50>)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a52:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <vQueueAddToRegistry+0x50>)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a5e:	e006      	b.n	8003a6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b07      	cmp	r3, #7
 8003a6a:	d9e7      	bls.n	8003a3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	2000088c 	.word	0x2000088c

08003a80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a90:	f001 fbc2 	bl	8005218 <vPortEnterCritical>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a9a:	b25b      	sxtb	r3, r3
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d103      	bne.n	8003aaa <vQueueWaitForMessageRestricted+0x2a>
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d103      	bne.n	8003ac0 <vQueueWaitForMessageRestricted+0x40>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ac0:	f001 fbdc 	bl	800527c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3324      	adds	r3, #36	@ 0x24
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fc45 	bl	8004364 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff26 	bl	800392c <prvUnlockQueue>
	}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	@ 0x38
 8003aec:	af04      	add	r7, sp, #16
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	623b      	str	r3, [r7, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10b      	bne.n	8003b32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	61fb      	str	r3, [r7, #28]
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b32:	235c      	movs	r3, #92	@ 0x5c
 8003b34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b5c      	cmp	r3, #92	@ 0x5c
 8003b3a:	d00b      	beq.n	8003b54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	61bb      	str	r3, [r7, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01e      	beq.n	8003b9a <xTaskCreateStatic+0xb2>
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01b      	beq.n	8003b9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b74:	2300      	movs	r3, #0
 8003b76:	9303      	str	r3, [sp, #12]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	9302      	str	r3, [sp, #8]
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f850 	bl	8003c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b94:	f000 f8de 	bl	8003d54 <prvAddNewTaskToReadyList>
 8003b98:	e001      	b.n	8003b9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b9e:	697b      	ldr	r3, [r7, #20]
	}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3728      	adds	r7, #40	@ 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	@ 0x30
 8003bac:	af04      	add	r7, sp, #16
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fc4d 	bl	800545c <pvPortMalloc>
 8003bc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00e      	beq.n	8003be8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bca:	205c      	movs	r0, #92	@ 0x5c
 8003bcc:	f001 fc46 	bl	800545c <pvPortMalloc>
 8003bd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bde:	e005      	b.n	8003bec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003be0:	6978      	ldr	r0, [r7, #20]
 8003be2:	f001 fd09 	bl	80055f8 <vPortFree>
 8003be6:	e001      	b.n	8003bec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9303      	str	r3, [sp, #12]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f80e 	bl	8003c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c16:	69f8      	ldr	r0, [r7, #28]
 8003c18:	f000 f89c 	bl	8003d54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	e002      	b.n	8003c28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c28:	69bb      	ldr	r3, [r7, #24]
	}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	21a5      	movs	r1, #165	@ 0xa5
 8003c4c:	f001 fdf4 	bl	8005838 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f023 0307 	bic.w	r3, r3, #7
 8003c68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	617b      	str	r3, [r7, #20]
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01f      	beq.n	8003cd2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e012      	b.n	8003cbe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	7819      	ldrb	r1, [r3, #0]
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3334      	adds	r3, #52	@ 0x34
 8003ca8:	460a      	mov	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d006      	beq.n	8003cc6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d9e9      	bls.n	8003c98 <prvInitialiseNewTask+0x66>
 8003cc4:	e000      	b.n	8003cc8 <prvInitialiseNewTask+0x96>
			{
				break;
 8003cc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cd0:	e003      	b.n	8003cda <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	2b37      	cmp	r3, #55	@ 0x37
 8003cde:	d901      	bls.n	8003ce4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ce0:	2337      	movs	r3, #55	@ 0x37
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff f966 	bl	8002fcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	3318      	adds	r3, #24
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff f961 	bl	8002fcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	2200      	movs	r2, #0
 8003d24:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	69b8      	ldr	r0, [r7, #24]
 8003d34:	f001 f93e 	bl	8004fb4 <pxPortInitialiseStack>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d5c:	f001 fa5c 	bl	8005218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d60:	4b2d      	ldr	r3, [pc, #180]	@ (8003e18 <prvAddNewTaskToReadyList+0xc4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	4a2c      	ldr	r2, [pc, #176]	@ (8003e18 <prvAddNewTaskToReadyList+0xc4>)
 8003d68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d72:	4a2a      	ldr	r2, [pc, #168]	@ (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <prvAddNewTaskToReadyList+0xc4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d110      	bne.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d80:	f000 fc1e 	bl	80045c0 <prvInitialiseTaskLists>
 8003d84:	e00d      	b.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d86:	4b26      	ldr	r3, [pc, #152]	@ (8003e20 <prvAddNewTaskToReadyList+0xcc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d8e:	4b23      	ldr	r3, [pc, #140]	@ (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d802      	bhi.n	8003da2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <prvAddNewTaskToReadyList+0xd0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e24 <prvAddNewTaskToReadyList+0xd0>)
 8003daa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003dac:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <prvAddNewTaskToReadyList+0xd0>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e28 <prvAddNewTaskToReadyList+0xd4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d903      	bls.n	8003dc8 <prvAddNewTaskToReadyList+0x74>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <prvAddNewTaskToReadyList+0xd4>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a15      	ldr	r2, [pc, #84]	@ (8003e2c <prvAddNewTaskToReadyList+0xd8>)
 8003dd6:	441a      	add	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7ff f901 	bl	8002fe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003de4:	f001 fa4a 	bl	800527c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003de8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <prvAddNewTaskToReadyList+0xcc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <prvAddNewTaskToReadyList+0xc8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d207      	bcs.n	8003e0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <prvAddNewTaskToReadyList+0xdc>)
 8003e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000da0 	.word	0x20000da0
 8003e1c:	200008cc 	.word	0x200008cc
 8003e20:	20000dac 	.word	0x20000dac
 8003e24:	20000dbc 	.word	0x20000dbc
 8003e28:	20000da8 	.word	0x20000da8
 8003e2c:	200008d0 	.word	0x200008d0
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e46:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <vTaskDelay+0x64>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <vTaskDelay+0x32>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e66:	f000 f883 	bl	8003f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fcf3 	bl	8004858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e72:	f000 f88b 	bl	8003f8c <xTaskResumeAll>
 8003e76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e7e:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <vTaskDelay+0x68>)
 8003e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000dc8 	.word	0x20000dc8
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eae:	463a      	mov	r2, r7
 8003eb0:	1d39      	adds	r1, r7, #4
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff f834 	bl	8002f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	9202      	str	r2, [sp, #8]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	460a      	mov	r2, r1
 8003ece:	4922      	ldr	r1, [pc, #136]	@ (8003f58 <vTaskStartScheduler+0xb8>)
 8003ed0:	4822      	ldr	r0, [pc, #136]	@ (8003f5c <vTaskStartScheduler+0xbc>)
 8003ed2:	f7ff fe09 	bl	8003ae8 <xTaskCreateStatic>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4a21      	ldr	r2, [pc, #132]	@ (8003f60 <vTaskStartScheduler+0xc0>)
 8003eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003edc:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <vTaskStartScheduler+0xc0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e001      	b.n	8003eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ef4:	f000 fd04 	bl	8004900 <xTimerCreateTimerTask>
 8003ef8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d116      	bne.n	8003f2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	613b      	str	r3, [r7, #16]
}
 8003f12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f14:	4b13      	ldr	r3, [pc, #76]	@ (8003f64 <vTaskStartScheduler+0xc4>)
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f1c:	4b12      	ldr	r3, [pc, #72]	@ (8003f68 <vTaskStartScheduler+0xc8>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f22:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <vTaskStartScheduler+0xcc>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f28:	f001 f8d2 	bl	80050d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f2c:	e00f      	b.n	8003f4e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d10b      	bne.n	8003f4e <vTaskStartScheduler+0xae>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60fb      	str	r3, [r7, #12]
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	e7fd      	b.n	8003f4a <vTaskStartScheduler+0xaa>
}
 8003f4e:	bf00      	nop
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	080058e8 	.word	0x080058e8
 8003f5c:	08004591 	.word	0x08004591
 8003f60:	20000dc4 	.word	0x20000dc4
 8003f64:	20000dc0 	.word	0x20000dc0
 8003f68:	20000dac 	.word	0x20000dac
 8003f6c:	20000da4 	.word	0x20000da4

08003f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f74:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <vTaskSuspendAll+0x18>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	4a03      	ldr	r2, [pc, #12]	@ (8003f88 <vTaskSuspendAll+0x18>)
 8003f7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	20000dc8 	.word	0x20000dc8

08003f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f9a:	4b42      	ldr	r3, [pc, #264]	@ (80040a4 <xTaskResumeAll+0x118>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <xTaskResumeAll+0x2e>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	603b      	str	r3, [r7, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fba:	f001 f92d 	bl	8005218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fbe:	4b39      	ldr	r3, [pc, #228]	@ (80040a4 <xTaskResumeAll+0x118>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a37      	ldr	r2, [pc, #220]	@ (80040a4 <xTaskResumeAll+0x118>)
 8003fc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc8:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <xTaskResumeAll+0x118>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d162      	bne.n	8004096 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fd0:	4b35      	ldr	r3, [pc, #212]	@ (80040a8 <xTaskResumeAll+0x11c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d05e      	beq.n	8004096 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fd8:	e02f      	b.n	800403a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fda:	4b34      	ldr	r3, [pc, #208]	@ (80040ac <xTaskResumeAll+0x120>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff f85a 	bl	80030a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff f855 	bl	80030a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80040b0 <xTaskResumeAll+0x124>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d903      	bls.n	800400a <xTaskResumeAll+0x7e>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <xTaskResumeAll+0x124>)
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a27      	ldr	r2, [pc, #156]	@ (80040b4 <xTaskResumeAll+0x128>)
 8004018:	441a      	add	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fe ffe0 	bl	8002fe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	4b23      	ldr	r3, [pc, #140]	@ (80040b8 <xTaskResumeAll+0x12c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004034:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <xTaskResumeAll+0x130>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800403a:	4b1c      	ldr	r3, [pc, #112]	@ (80040ac <xTaskResumeAll+0x120>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1cb      	bne.n	8003fda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004048:	f000 fb58 	bl	80046fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800404c:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <xTaskResumeAll+0x134>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004058:	f000 f846 	bl	80040e8 <xTaskIncrementTick>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004062:	4b16      	ldr	r3, [pc, #88]	@ (80040bc <xTaskResumeAll+0x130>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f1      	bne.n	8004058 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004074:	4b12      	ldr	r3, [pc, #72]	@ (80040c0 <xTaskResumeAll+0x134>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800407a:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <xTaskResumeAll+0x130>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004086:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <xTaskResumeAll+0x138>)
 8004088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004096:	f001 f8f1 	bl	800527c <vPortExitCritical>

	return xAlreadyYielded;
 800409a:	68bb      	ldr	r3, [r7, #8]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000dc8 	.word	0x20000dc8
 80040a8:	20000da0 	.word	0x20000da0
 80040ac:	20000d60 	.word	0x20000d60
 80040b0:	20000da8 	.word	0x20000da8
 80040b4:	200008d0 	.word	0x200008d0
 80040b8:	200008cc 	.word	0x200008cc
 80040bc:	20000db4 	.word	0x20000db4
 80040c0:	20000db0 	.word	0x20000db0
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040ce:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <xTaskGetTickCount+0x1c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040d4:	687b      	ldr	r3, [r7, #4]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000da4 	.word	0x20000da4

080040e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004230 <xTaskIncrementTick+0x148>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 8090 	bne.w	800421c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004234 <xTaskIncrementTick+0x14c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004104:	4a4b      	ldr	r2, [pc, #300]	@ (8004234 <xTaskIncrementTick+0x14c>)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d121      	bne.n	8004154 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004110:	4b49      	ldr	r3, [pc, #292]	@ (8004238 <xTaskIncrementTick+0x150>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <xTaskIncrementTick+0x4a>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	603b      	str	r3, [r7, #0]
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <xTaskIncrementTick+0x46>
 8004132:	4b41      	ldr	r3, [pc, #260]	@ (8004238 <xTaskIncrementTick+0x150>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	4b40      	ldr	r3, [pc, #256]	@ (800423c <xTaskIncrementTick+0x154>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3e      	ldr	r2, [pc, #248]	@ (8004238 <xTaskIncrementTick+0x150>)
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4a3e      	ldr	r2, [pc, #248]	@ (800423c <xTaskIncrementTick+0x154>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b3e      	ldr	r3, [pc, #248]	@ (8004240 <xTaskIncrementTick+0x158>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	4a3c      	ldr	r2, [pc, #240]	@ (8004240 <xTaskIncrementTick+0x158>)
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	f000 fad4 	bl	80046fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004154:	4b3b      	ldr	r3, [pc, #236]	@ (8004244 <xTaskIncrementTick+0x15c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	429a      	cmp	r2, r3
 800415c:	d349      	bcc.n	80041f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800415e:	4b36      	ldr	r3, [pc, #216]	@ (8004238 <xTaskIncrementTick+0x150>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <xTaskIncrementTick+0x15c>)
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	601a      	str	r2, [r3, #0]
					break;
 8004170:	e03f      	b.n	80041f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004172:	4b31      	ldr	r3, [pc, #196]	@ (8004238 <xTaskIncrementTick+0x150>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d203      	bcs.n	8004192 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800418a:	4a2e      	ldr	r2, [pc, #184]	@ (8004244 <xTaskIncrementTick+0x15c>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004190:	e02f      	b.n	80041f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3304      	adds	r3, #4
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe ff82 	bl	80030a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3318      	adds	r3, #24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe ff79 	bl	80030a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b2:	4b25      	ldr	r3, [pc, #148]	@ (8004248 <xTaskIncrementTick+0x160>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d903      	bls.n	80041c2 <xTaskIncrementTick+0xda>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	4a22      	ldr	r2, [pc, #136]	@ (8004248 <xTaskIncrementTick+0x160>)
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <xTaskIncrementTick+0x164>)
 80041d0:	441a      	add	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f7fe ff04 	bl	8002fe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004250 <xTaskIncrementTick+0x168>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d3b8      	bcc.n	800415e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f0:	e7b5      	b.n	800415e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041f2:	4b17      	ldr	r3, [pc, #92]	@ (8004250 <xTaskIncrementTick+0x168>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f8:	4914      	ldr	r1, [pc, #80]	@ (800424c <xTaskIncrementTick+0x164>)
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d901      	bls.n	800420e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800420a:	2301      	movs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800420e:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <xTaskIncrementTick+0x16c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e004      	b.n	8004226 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800421c:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <xTaskIncrementTick+0x170>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <xTaskIncrementTick+0x170>)
 8004224:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004226:	697b      	ldr	r3, [r7, #20]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000dc8 	.word	0x20000dc8
 8004234:	20000da4 	.word	0x20000da4
 8004238:	20000d58 	.word	0x20000d58
 800423c:	20000d5c 	.word	0x20000d5c
 8004240:	20000db8 	.word	0x20000db8
 8004244:	20000dc0 	.word	0x20000dc0
 8004248:	20000da8 	.word	0x20000da8
 800424c:	200008d0 	.word	0x200008d0
 8004250:	200008cc 	.word	0x200008cc
 8004254:	20000db4 	.word	0x20000db4
 8004258:	20000db0 	.word	0x20000db0

0800425c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004262:	4b28      	ldr	r3, [pc, #160]	@ (8004304 <vTaskSwitchContext+0xa8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800426a:	4b27      	ldr	r3, [pc, #156]	@ (8004308 <vTaskSwitchContext+0xac>)
 800426c:	2201      	movs	r2, #1
 800426e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004270:	e042      	b.n	80042f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004272:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <vTaskSwitchContext+0xac>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004278:	4b24      	ldr	r3, [pc, #144]	@ (800430c <vTaskSwitchContext+0xb0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e011      	b.n	80042a4 <vTaskSwitchContext+0x48>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <vTaskSwitchContext+0x42>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	607b      	str	r3, [r7, #4]
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <vTaskSwitchContext+0x3e>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	491a      	ldr	r1, [pc, #104]	@ (8004310 <vTaskSwitchContext+0xb4>)
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0e3      	beq.n	8004280 <vTaskSwitchContext+0x24>
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a13      	ldr	r2, [pc, #76]	@ (8004310 <vTaskSwitchContext+0xb4>)
 80042c4:	4413      	add	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	3308      	adds	r3, #8
 80042da:	429a      	cmp	r2, r3
 80042dc:	d104      	bne.n	80042e8 <vTaskSwitchContext+0x8c>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4a09      	ldr	r2, [pc, #36]	@ (8004314 <vTaskSwitchContext+0xb8>)
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4a06      	ldr	r2, [pc, #24]	@ (800430c <vTaskSwitchContext+0xb0>)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000dc8 	.word	0x20000dc8
 8004308:	20000db4 	.word	0x20000db4
 800430c:	20000da8 	.word	0x20000da8
 8004310:	200008d0 	.word	0x200008d0
 8004314:	200008cc 	.word	0x200008cc

08004318 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	e7fd      	b.n	800433c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004340:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <vTaskPlaceOnEventList+0x48>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3318      	adds	r3, #24
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fe fe70 	bl	800302e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800434e:	2101      	movs	r1, #1
 8004350:	6838      	ldr	r0, [r7, #0]
 8004352:	f000 fa81 	bl	8004858 <prvAddCurrentTaskToDelayedList>
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200008cc 	.word	0x200008cc

08004364 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	617b      	str	r3, [r7, #20]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800438e:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3318      	adds	r3, #24
 8004394:	4619      	mov	r1, r3
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7fe fe25 	bl	8002fe6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	68b8      	ldr	r0, [r7, #8]
 80043ac:	f000 fa54 	bl	8004858 <prvAddCurrentTaskToDelayedList>
	}
 80043b0:	bf00      	nop
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200008cc 	.word	0x200008cc

080043bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	60fb      	str	r3, [r7, #12]
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3318      	adds	r3, #24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fe56 	bl	80030a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f4:	4b1d      	ldr	r3, [pc, #116]	@ (800446c <xTaskRemoveFromEventList+0xb0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11d      	bne.n	8004438 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3304      	adds	r3, #4
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fe4d 	bl	80030a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440a:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <xTaskRemoveFromEventList+0xb4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d903      	bls.n	800441a <xTaskRemoveFromEventList+0x5e>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	4a16      	ldr	r2, [pc, #88]	@ (8004470 <xTaskRemoveFromEventList+0xb4>)
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a13      	ldr	r2, [pc, #76]	@ (8004474 <xTaskRemoveFromEventList+0xb8>)
 8004428:	441a      	add	r2, r3
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f7fe fdd8 	bl	8002fe6 <vListInsertEnd>
 8004436:	e005      	b.n	8004444 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	3318      	adds	r3, #24
 800443c:	4619      	mov	r1, r3
 800443e:	480e      	ldr	r0, [pc, #56]	@ (8004478 <xTaskRemoveFromEventList+0xbc>)
 8004440:	f7fe fdd1 	bl	8002fe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004448:	4b0c      	ldr	r3, [pc, #48]	@ (800447c <xTaskRemoveFromEventList+0xc0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	429a      	cmp	r2, r3
 8004450:	d905      	bls.n	800445e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004452:	2301      	movs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <xTaskRemoveFromEventList+0xc4>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e001      	b.n	8004462 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004462:	697b      	ldr	r3, [r7, #20]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000dc8 	.word	0x20000dc8
 8004470:	20000da8 	.word	0x20000da8
 8004474:	200008d0 	.word	0x200008d0
 8004478:	20000d60 	.word	0x20000d60
 800447c:	200008cc 	.word	0x200008cc
 8004480:	20000db4 	.word	0x20000db4

08004484 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <vTaskInternalSetTimeOutState+0x24>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004494:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <vTaskInternalSetTimeOutState+0x28>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20000db8 	.word	0x20000db8
 80044ac:	20000da4 	.word	0x20000da4

080044b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	613b      	str	r3, [r7, #16]
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	e7fd      	b.n	80044f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80044f6:	f000 fe8f 	bl	8005218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004570 <xTaskCheckForTimeOut+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d102      	bne.n	800451a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e023      	b.n	8004562 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <xTaskCheckForTimeOut+0xc4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d007      	beq.n	8004536 <xTaskCheckForTimeOut+0x86>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e015      	b.n	8004562 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	d20b      	bcs.n	8004558 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ff99 	bl	8004484 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e004      	b.n	8004562 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004562:	f000 fe8b 	bl	800527c <vPortExitCritical>

	return xReturn;
 8004566:	69fb      	ldr	r3, [r7, #28]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000da4 	.word	0x20000da4
 8004574:	20000db8 	.word	0x20000db8

08004578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <vTaskMissedYield+0x14>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	20000db4 	.word	0x20000db4

08004590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004598:	f000 f852 	bl	8004640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <prvIdleTask+0x28>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d9f9      	bls.n	8004598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <prvIdleTask+0x2c>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045b4:	e7f0      	b.n	8004598 <prvIdleTask+0x8>
 80045b6:	bf00      	nop
 80045b8:	200008d0 	.word	0x200008d0
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	e00c      	b.n	80045e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <prvInitialiseTaskLists+0x60>)
 80045d8:	4413      	add	r3, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fcd6 	bl	8002f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3301      	adds	r3, #1
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b37      	cmp	r3, #55	@ 0x37
 80045ea:	d9ef      	bls.n	80045cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045ec:	480d      	ldr	r0, [pc, #52]	@ (8004624 <prvInitialiseTaskLists+0x64>)
 80045ee:	f7fe fccd 	bl	8002f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045f2:	480d      	ldr	r0, [pc, #52]	@ (8004628 <prvInitialiseTaskLists+0x68>)
 80045f4:	f7fe fcca 	bl	8002f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045f8:	480c      	ldr	r0, [pc, #48]	@ (800462c <prvInitialiseTaskLists+0x6c>)
 80045fa:	f7fe fcc7 	bl	8002f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045fe:	480c      	ldr	r0, [pc, #48]	@ (8004630 <prvInitialiseTaskLists+0x70>)
 8004600:	f7fe fcc4 	bl	8002f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004604:	480b      	ldr	r0, [pc, #44]	@ (8004634 <prvInitialiseTaskLists+0x74>)
 8004606:	f7fe fcc1 	bl	8002f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800460a:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <prvInitialiseTaskLists+0x78>)
 800460c:	4a05      	ldr	r2, [pc, #20]	@ (8004624 <prvInitialiseTaskLists+0x64>)
 800460e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <prvInitialiseTaskLists+0x7c>)
 8004612:	4a05      	ldr	r2, [pc, #20]	@ (8004628 <prvInitialiseTaskLists+0x68>)
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200008d0 	.word	0x200008d0
 8004624:	20000d30 	.word	0x20000d30
 8004628:	20000d44 	.word	0x20000d44
 800462c:	20000d60 	.word	0x20000d60
 8004630:	20000d74 	.word	0x20000d74
 8004634:	20000d8c 	.word	0x20000d8c
 8004638:	20000d58 	.word	0x20000d58
 800463c:	20000d5c 	.word	0x20000d5c

08004640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004646:	e019      	b.n	800467c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004648:	f000 fde6 	bl	8005218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464c:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <prvCheckTasksWaitingTermination+0x50>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fd21 	bl	80030a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <prvCheckTasksWaitingTermination+0x54>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3b01      	subs	r3, #1
 8004664:	4a0b      	ldr	r2, [pc, #44]	@ (8004694 <prvCheckTasksWaitingTermination+0x54>)
 8004666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <prvCheckTasksWaitingTermination+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3b01      	subs	r3, #1
 800466e:	4a0a      	ldr	r2, [pc, #40]	@ (8004698 <prvCheckTasksWaitingTermination+0x58>)
 8004670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004672:	f000 fe03 	bl	800527c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f810 	bl	800469c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <prvCheckTasksWaitingTermination+0x58>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e1      	bne.n	8004648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000d74 	.word	0x20000d74
 8004694:	20000da0 	.word	0x20000da0
 8004698:	20000d88 	.word	0x20000d88

0800469c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 ffa0 	bl	80055f8 <vPortFree>
				vPortFree( pxTCB );
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 ff9d 	bl	80055f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046be:	e019      	b.n	80046f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d103      	bne.n	80046d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 ff94 	bl	80055f8 <vPortFree>
	}
 80046d0:	e010      	b.n	80046f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d00b      	beq.n	80046f4 <prvDeleteTCB+0x58>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60fb      	str	r3, [r7, #12]
}
 80046ee:	bf00      	nop
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <prvDeleteTCB+0x54>
	}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004702:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <prvResetNextTaskUnblockTime+0x38>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800470c:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <prvResetNextTaskUnblockTime+0x3c>)
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004714:	e008      	b.n	8004728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <prvResetNextTaskUnblockTime+0x38>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a04      	ldr	r2, [pc, #16]	@ (8004738 <prvResetNextTaskUnblockTime+0x3c>)
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000d58 	.word	0x20000d58
 8004738:	20000dc0 	.word	0x20000dc0

0800473c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004742:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <xTaskGetSchedulerState+0x34>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800474a:	2301      	movs	r3, #1
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	e008      	b.n	8004762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004750:	4b08      	ldr	r3, [pc, #32]	@ (8004774 <xTaskGetSchedulerState+0x38>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004758:	2302      	movs	r3, #2
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e001      	b.n	8004762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004762:	687b      	ldr	r3, [r7, #4]
	}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000dac 	.word	0x20000dac
 8004774:	20000dc8 	.word	0x20000dc8

08004778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d058      	beq.n	8004840 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800478e:	4b2f      	ldr	r3, [pc, #188]	@ (800484c <xTaskPriorityDisinherit+0xd4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d00b      	beq.n	80047b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60bb      	str	r3, [r7, #8]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d02c      	beq.n	8004840 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d128      	bne.n	8004840 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fc54 	bl	80030a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <xTaskPriorityDisinherit+0xd8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d903      	bls.n	8004820 <xTaskPriorityDisinherit+0xa8>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <xTaskPriorityDisinherit+0xd8>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a09      	ldr	r2, [pc, #36]	@ (8004854 <xTaskPriorityDisinherit+0xdc>)
 800482e:	441a      	add	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe fbd5 	bl	8002fe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004840:	697b      	ldr	r3, [r7, #20]
	}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	200008cc 	.word	0x200008cc
 8004850:	20000da8 	.word	0x20000da8
 8004854:	200008d0 	.word	0x200008d0

08004858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004862:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004868:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fc16 	bl	80030a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d10a      	bne.n	8004892 <prvAddCurrentTaskToDelayedList+0x3a>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4819      	ldr	r0, [pc, #100]	@ (80048f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800488c:	f7fe fbab 	bl	8002fe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004890:	e026      	b.n	80048e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800489a:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d209      	bcs.n	80048be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7fe fbb9 	bl	800302e <vListInsert>
}
 80048bc:	e010      	b.n	80048e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048be:	4b0e      	ldr	r3, [pc, #56]	@ (80048f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <prvAddCurrentTaskToDelayedList+0x94>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7fe fbaf 	bl	800302e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048d0:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d202      	bcs.n	80048e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80048da:	4a08      	ldr	r2, [pc, #32]	@ (80048fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000da4 	.word	0x20000da4
 80048ec:	200008cc 	.word	0x200008cc
 80048f0:	20000d8c 	.word	0x20000d8c
 80048f4:	20000d5c 	.word	0x20000d5c
 80048f8:	20000d58 	.word	0x20000d58
 80048fc:	20000dc0 	.word	0x20000dc0

08004900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800490a:	f000 fb13 	bl	8004f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <xTimerCreateTimerTask+0x84>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d021      	beq.n	800495a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800491e:	1d3a      	adds	r2, r7, #4
 8004920:	f107 0108 	add.w	r1, r7, #8
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fb15 	bl	8002f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	9202      	str	r2, [sp, #8]
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	2302      	movs	r3, #2
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	460a      	mov	r2, r1
 8004940:	4911      	ldr	r1, [pc, #68]	@ (8004988 <xTimerCreateTimerTask+0x88>)
 8004942:	4812      	ldr	r0, [pc, #72]	@ (800498c <xTimerCreateTimerTask+0x8c>)
 8004944:	f7ff f8d0 	bl	8003ae8 <xTaskCreateStatic>
 8004948:	4603      	mov	r3, r0
 800494a:	4a11      	ldr	r2, [pc, #68]	@ (8004990 <xTimerCreateTimerTask+0x90>)
 800494c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <xTimerCreateTimerTask+0x90>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004956:	2301      	movs	r3, #1
 8004958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	613b      	str	r3, [r7, #16]
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004978:	697b      	ldr	r3, [r7, #20]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000dfc 	.word	0x20000dfc
 8004988:	080058f0 	.word	0x080058f0
 800498c:	08004acd 	.word	0x08004acd
 8004990:	20000e00 	.word	0x20000e00

08004994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	@ 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	623b      	str	r3, [r7, #32]
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <xTimerGenericCommand+0x98>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d02a      	beq.n	8004a22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	dc18      	bgt.n	8004a10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049de:	f7ff fead 	bl	800473c <xTaskGetSchedulerState>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d109      	bne.n	80049fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049e8:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <xTimerGenericCommand+0x98>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	f107 0110 	add.w	r1, r7, #16
 80049f0:	2300      	movs	r3, #0
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	f7fe fc88 	bl	8003308 <xQueueGenericSend>
 80049f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80049fa:	e012      	b.n	8004a22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <xTimerGenericCommand+0x98>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f107 0110 	add.w	r1, r7, #16
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	f7fe fc7e 	bl	8003308 <xQueueGenericSend>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a0e:	e008      	b.n	8004a22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <xTimerGenericCommand+0x98>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	f107 0110 	add.w	r1, r7, #16
 8004a18:	2300      	movs	r3, #0
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	f7fe fd76 	bl	800350c <xQueueGenericSendFromISR>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3728      	adds	r7, #40	@ 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000dfc 	.word	0x20000dfc

08004a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3a:	4b23      	ldr	r3, [pc, #140]	@ (8004ac8 <prvProcessExpiredTimer+0x98>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fb29 	bl	80030a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d023      	beq.n	8004aa4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	18d1      	adds	r1, r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	6978      	ldr	r0, [r7, #20]
 8004a6a:	f000 f8d5 	bl	8004c18 <prvInsertTimerInActiveList>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d020      	beq.n	8004ab6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff ff88 	bl	8004994 <xTimerGenericCommand>
 8004a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d114      	bne.n	8004ab6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60fb      	str	r3, [r7, #12]
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	4798      	blx	r3
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000df4 	.word	0x20000df4

08004acc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 f859 	bl	8004b90 <prvGetNextExpireTime>
 8004ade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 f805 	bl	8004af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004aea:	f000 f8d7 	bl	8004c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aee:	bf00      	nop
 8004af0:	e7f0      	b.n	8004ad4 <prvTimerTask+0x8>
	...

08004af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004afe:	f7ff fa37 	bl	8003f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b02:	f107 0308 	add.w	r3, r7, #8
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f866 	bl	8004bd8 <prvSampleTimeNow>
 8004b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d130      	bne.n	8004b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <prvProcessTimerOrBlockTask+0x3c>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d806      	bhi.n	8004b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b22:	f7ff fa33 	bl	8003f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ff81 	bl	8004a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b2e:	e024      	b.n	8004b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b36:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <prvProcessTimerOrBlockTask+0x90>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <prvProcessTimerOrBlockTask+0x50>
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <prvProcessTimerOrBlockTask+0x52>
 8004b44:	2300      	movs	r3, #0
 8004b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b48:	4b0f      	ldr	r3, [pc, #60]	@ (8004b88 <prvProcessTimerOrBlockTask+0x94>)
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	f7fe ff93 	bl	8003a80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b5a:	f7ff fa17 	bl	8003f8c <xTaskResumeAll>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b64:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <prvProcessTimerOrBlockTask+0x98>)
 8004b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	f3bf 8f6f 	isb	sy
}
 8004b74:	e001      	b.n	8004b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b76:	f7ff fa09 	bl	8003f8c <xTaskResumeAll>
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000df8 	.word	0x20000df8
 8004b88:	20000dfc 	.word	0x20000dfc
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b98:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd4 <prvGetNextExpireTime+0x44>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <prvGetNextExpireTime+0x16>
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	e000      	b.n	8004ba8 <prvGetNextExpireTime+0x18>
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bb4:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <prvGetNextExpireTime+0x44>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e001      	b.n	8004bc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000df4 	.word	0x20000df4

08004bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004be0:	f7ff fa72 	bl	80040c8 <xTaskGetTickCount>
 8004be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004be6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <prvSampleTimeNow+0x3c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d205      	bcs.n	8004bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bf0:	f000 f93a 	bl	8004e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c02:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <prvSampleTimeNow+0x3c>)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000e04 	.word	0x20000e04

08004c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d812      	bhi.n	8004c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e01b      	b.n	8004c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c52:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <prvInsertTimerInActiveList+0x7c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fe f9e6 	bl	800302e <vListInsert>
 8004c62:	e012      	b.n	8004c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d206      	bcs.n	8004c7a <prvInsertTimerInActiveList+0x62>
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c74:	2301      	movs	r3, #1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e007      	b.n	8004c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c7a:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <prvInsertTimerInActiveList+0x80>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f7fe f9d2 	bl	800302e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c8a:	697b      	ldr	r3, [r7, #20]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000df8 	.word	0x20000df8
 8004c98:	20000df4 	.word	0x20000df4

08004c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	@ 0x38
 8004ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ca2:	e0ce      	b.n	8004e42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da19      	bge.n	8004cde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004caa:	1d3b      	adds	r3, r7, #4
 8004cac:	3304      	adds	r3, #4
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61fb      	str	r3, [r7, #28]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd4:	6850      	ldr	r0, [r2, #4]
 8004cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f2c0 80ae 	blt.w	8004e42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe f9d2 	bl	80030a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ff6a 	bl	8004bd8 <prvSampleTimeNow>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b09      	cmp	r3, #9
 8004d0a:	f200 8097 	bhi.w	8004e3c <prvProcessReceivedCommands+0x1a0>
 8004d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <prvProcessReceivedCommands+0x78>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d3d 	.word	0x08004d3d
 8004d1c:	08004d3d 	.word	0x08004d3d
 8004d20:	08004db3 	.word	0x08004db3
 8004d24:	08004dc7 	.word	0x08004dc7
 8004d28:	08004e13 	.word	0x08004e13
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d3d 	.word	0x08004d3d
 8004d34:	08004db3 	.word	0x08004db3
 8004d38:	08004dc7 	.word	0x08004dc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	18d1      	adds	r1, r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d5c:	f7ff ff5c 	bl	8004c18 <prvInsertTimerInActiveList>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d06c      	beq.n	8004e40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d061      	beq.n	8004e40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	441a      	add	r2, r3
 8004d84:	2300      	movs	r3, #0
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d8e:	f7ff fe01 	bl	8004994 <xTimerGenericCommand>
 8004d92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d152      	bne.n	8004e40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	61bb      	str	r3, [r7, #24]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004dc4:	e03d      	b.n	8004e42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	617b      	str	r3, [r7, #20]
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	e7fd      	b.n	8004dfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	18d1      	adds	r1, r2, r3
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e0c:	f7ff ff04 	bl	8004c18 <prvInsertTimerInActiveList>
					break;
 8004e10:	e017      	b.n	8004e42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e22:	f000 fbe9 	bl	80055f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e26:	e00c      	b.n	8004e42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e3a:	e002      	b.n	8004e42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004e3c:	bf00      	nop
 8004e3e:	e000      	b.n	8004e42 <prvProcessReceivedCommands+0x1a6>
					break;
 8004e40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <prvProcessReceivedCommands+0x1c8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	1d39      	adds	r1, r7, #4
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fbfc 	bl	8003648 <xQueueReceive>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f47f af26 	bne.w	8004ca4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	3730      	adds	r7, #48	@ 0x30
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000dfc 	.word	0x20000dfc

08004e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e6e:	e049      	b.n	8004f04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e70:	4b2e      	ldr	r3, [pc, #184]	@ (8004f2c <prvSwitchTimerLists+0xc4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f2c <prvSwitchTimerLists+0xc4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe f909 	bl	80030a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d02f      	beq.n	8004f04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90e      	bls.n	8004ed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <prvSwitchTimerLists+0xc4>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fe f8ae 	bl	800302e <vListInsert>
 8004ed2:	e017      	b.n	8004f04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	2100      	movs	r1, #0
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff fd58 	bl	8004994 <xTimerGenericCommand>
 8004ee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	603b      	str	r3, [r7, #0]
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	e7fd      	b.n	8004f00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f04:	4b09      	ldr	r3, [pc, #36]	@ (8004f2c <prvSwitchTimerLists+0xc4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1b0      	bne.n	8004e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f0e:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <prvSwitchTimerLists+0xc4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <prvSwitchTimerLists+0xc8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a04      	ldr	r2, [pc, #16]	@ (8004f2c <prvSwitchTimerLists+0xc4>)
 8004f1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f1c:	4a04      	ldr	r2, [pc, #16]	@ (8004f30 <prvSwitchTimerLists+0xc8>)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	6013      	str	r3, [r2, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000df4 	.word	0x20000df4
 8004f30:	20000df8 	.word	0x20000df8

08004f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f3a:	f000 f96d 	bl	8005218 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f3e:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <prvCheckForValidListAndQueue+0x60>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d120      	bne.n	8004f88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f46:	4814      	ldr	r0, [pc, #80]	@ (8004f98 <prvCheckForValidListAndQueue+0x64>)
 8004f48:	f7fe f820 	bl	8002f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f4c:	4813      	ldr	r0, [pc, #76]	@ (8004f9c <prvCheckForValidListAndQueue+0x68>)
 8004f4e:	f7fe f81d 	bl	8002f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f52:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <prvCheckForValidListAndQueue+0x6c>)
 8004f54:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <prvCheckForValidListAndQueue+0x64>)
 8004f56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f58:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <prvCheckForValidListAndQueue+0x70>)
 8004f5a:	4a10      	ldr	r2, [pc, #64]	@ (8004f9c <prvCheckForValidListAndQueue+0x68>)
 8004f5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	4b11      	ldr	r3, [pc, #68]	@ (8004fa8 <prvCheckForValidListAndQueue+0x74>)
 8004f64:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <prvCheckForValidListAndQueue+0x78>)
 8004f66:	2110      	movs	r1, #16
 8004f68:	200a      	movs	r0, #10
 8004f6a:	f7fe f92d 	bl	80031c8 <xQueueGenericCreateStatic>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4a08      	ldr	r2, [pc, #32]	@ (8004f94 <prvCheckForValidListAndQueue+0x60>)
 8004f72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <prvCheckForValidListAndQueue+0x60>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f7c:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <prvCheckForValidListAndQueue+0x60>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	490b      	ldr	r1, [pc, #44]	@ (8004fb0 <prvCheckForValidListAndQueue+0x7c>)
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fd52 	bl	8003a2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f88:	f000 f978 	bl	800527c <vPortExitCritical>
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000dfc 	.word	0x20000dfc
 8004f98:	20000dcc 	.word	0x20000dcc
 8004f9c:	20000de0 	.word	0x20000de0
 8004fa0:	20000df4 	.word	0x20000df4
 8004fa4:	20000df8 	.word	0x20000df8
 8004fa8:	20000ea8 	.word	0x20000ea8
 8004fac:	20000e08 	.word	0x20000e08
 8004fb0:	080058f8 	.word	0x080058f8

08004fb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3b04      	subs	r3, #4
 8004fc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3b04      	subs	r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f023 0201 	bic.w	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3b04      	subs	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <pxPortInitialiseStack+0x64>)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3b14      	subs	r3, #20
 8004fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3b04      	subs	r3, #4
 8004ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f06f 0202 	mvn.w	r2, #2
 8005002:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3b20      	subs	r3, #32
 8005008:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	0800501d 	.word	0x0800501d

0800501c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005026:	4b13      	ldr	r3, [pc, #76]	@ (8005074 <prvTaskExitError+0x58>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d00b      	beq.n	8005048 <prvTaskExitError+0x2c>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <prvTaskExitError+0x28>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60bb      	str	r3, [r7, #8]
}
 800505a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800505c:	bf00      	nop
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0fc      	beq.n	800505e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000018 	.word	0x20000018
	...

08005080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005080:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <pxCurrentTCBConst2>)
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	f380 8809 	msr	PSP, r0
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	4770      	bx	lr
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst2>:
 80050a0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050a8:	4808      	ldr	r0, [pc, #32]	@ (80050cc <prvPortStartFirstTask+0x24>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8814 	msr	CONTROL, r0
 80050ba:	b662      	cpsie	i
 80050bc:	b661      	cpsie	f
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	df00      	svc	0
 80050c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ca:	bf00      	nop
 80050cc:	e000ed08 	.word	0xe000ed08

080050d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <xPortStartScheduler+0x124>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <xPortStartScheduler+0x128>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10b      	bne.n	80050f8 <xPortStartScheduler+0x28>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	613b      	str	r3, [r7, #16]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050f8:	4b3e      	ldr	r3, [pc, #248]	@ (80051f4 <xPortStartScheduler+0x124>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a3f      	ldr	r2, [pc, #252]	@ (80051fc <xPortStartScheduler+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10b      	bne.n	800511a <xPortStartScheduler+0x4a>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800511a:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <xPortStartScheduler+0x130>)
 800511c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	22ff      	movs	r2, #255	@ 0xff
 800512a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b31      	ldr	r3, [pc, #196]	@ (8005204 <xPortStartScheduler+0x134>)
 8005140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005142:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <xPortStartScheduler+0x138>)
 8005144:	2207      	movs	r2, #7
 8005146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005148:	e009      	b.n	800515e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800514a:	4b2f      	ldr	r3, [pc, #188]	@ (8005208 <xPortStartScheduler+0x138>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3b01      	subs	r3, #1
 8005150:	4a2d      	ldr	r2, [pc, #180]	@ (8005208 <xPortStartScheduler+0x138>)
 8005152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d0ef      	beq.n	800514a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800516a:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <xPortStartScheduler+0x138>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	d00b      	beq.n	800518e <xPortStartScheduler+0xbe>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60bb      	str	r3, [r7, #8]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800518e:	4b1e      	ldr	r3, [pc, #120]	@ (8005208 <xPortStartScheduler+0x138>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <xPortStartScheduler+0x138>)
 8005196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <xPortStartScheduler+0x138>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <xPortStartScheduler+0x138>)
 80051a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051ac:	4b17      	ldr	r3, [pc, #92]	@ (800520c <xPortStartScheduler+0x13c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <xPortStartScheduler+0x13c>)
 80051b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <xPortStartScheduler+0x13c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	@ (800520c <xPortStartScheduler+0x13c>)
 80051be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051c4:	f000 f8da 	bl	800537c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <xPortStartScheduler+0x140>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051ce:	f000 f8f9 	bl	80053c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <xPortStartScheduler+0x144>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005214 <xPortStartScheduler+0x144>)
 80051d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051de:	f7ff ff63 	bl	80050a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051e2:	f7ff f83b 	bl	800425c <vTaskSwitchContext>
	prvTaskExitError();
 80051e6:	f7ff ff19 	bl	800501c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed00 	.word	0xe000ed00
 80051f8:	410fc271 	.word	0x410fc271
 80051fc:	410fc270 	.word	0x410fc270
 8005200:	e000e400 	.word	0xe000e400
 8005204:	20000ef8 	.word	0x20000ef8
 8005208:	20000efc 	.word	0x20000efc
 800520c:	e000ed20 	.word	0xe000ed20
 8005210:	20000018 	.word	0x20000018
 8005214:	e000ef34 	.word	0xe000ef34

08005218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <vPortEnterCritical+0x5c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	4a0e      	ldr	r2, [pc, #56]	@ (8005274 <vPortEnterCritical+0x5c>)
 800523a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800523c:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <vPortEnterCritical+0x5c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d110      	bne.n	8005266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <vPortEnterCritical+0x60>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <vPortEnterCritical+0x4e>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	603b      	str	r3, [r7, #0]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <vPortEnterCritical+0x4a>
	}
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000018 	.word	0x20000018
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005282:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <vPortExitCritical+0x50>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <vPortExitCritical+0x26>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	607b      	str	r3, [r7, #4]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <vPortExitCritical+0x50>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4a08      	ldr	r2, [pc, #32]	@ (80052cc <vPortExitCritical+0x50>)
 80052aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <vPortExitCritical+0x50>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <vPortExitCritical+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f383 8811 	msr	BASEPRI, r3
}
 80052be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000018 	.word	0x20000018

080052d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052d0:	f3ef 8009 	mrs	r0, PSP
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <pxCurrentTCBConst>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	f01e 0f10 	tst.w	lr, #16
 80052e0:	bf08      	it	eq
 80052e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	6010      	str	r0, [r2, #0]
 80052ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052f4:	f380 8811 	msr	BASEPRI, r0
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f7fe ffac 	bl	800425c <vTaskSwitchContext>
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f380 8811 	msr	BASEPRI, r0
 800530c:	bc09      	pop	{r0, r3}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005316:	f01e 0f10 	tst.w	lr, #16
 800531a:	bf08      	it	eq
 800531c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005320:	f380 8809 	msr	PSP, r0
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst>:
 8005330:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005352:	f7fe fec9 	bl	80040e8 <xTaskIncrementTick>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800535c:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <xPortSysTickHandler+0x40>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <vPortSetupTimerInterrupt+0x34>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005386:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <vPortSetupTimerInterrupt+0x38>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <vPortSetupTimerInterrupt+0x3c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <vPortSetupTimerInterrupt+0x40>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <vPortSetupTimerInterrupt+0x44>)
 800539a:	3b01      	subs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800539e:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <vPortSetupTimerInterrupt+0x34>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010
 80053b4:	e000e018 	.word	0xe000e018
 80053b8:	2000000c 	.word	0x2000000c
 80053bc:	10624dd3 	.word	0x10624dd3
 80053c0:	e000e014 	.word	0xe000e014

080053c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053d4 <vPortEnableVFP+0x10>
 80053c8:	6801      	ldr	r1, [r0, #0]
 80053ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ce:	6001      	str	r1, [r0, #0]
 80053d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053d2:	bf00      	nop
 80053d4:	e000ed88 	.word	0xe000ed88

080053d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80053de:	f3ef 8305 	mrs	r3, IPSR
 80053e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d915      	bls.n	8005416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053ea:	4a18      	ldr	r2, [pc, #96]	@ (800544c <vPortValidateInterruptPriority+0x74>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053f4:	4b16      	ldr	r3, [pc, #88]	@ (8005450 <vPortValidateInterruptPriority+0x78>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	7afa      	ldrb	r2, [r7, #11]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d20b      	bcs.n	8005416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005416:	4b0f      	ldr	r3, [pc, #60]	@ (8005454 <vPortValidateInterruptPriority+0x7c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800541e:	4b0e      	ldr	r3, [pc, #56]	@ (8005458 <vPortValidateInterruptPriority+0x80>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d90b      	bls.n	800543e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	603b      	str	r3, [r7, #0]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <vPortValidateInterruptPriority+0x62>
	}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e3f0 	.word	0xe000e3f0
 8005450:	20000ef8 	.word	0x20000ef8
 8005454:	e000ed0c 	.word	0xe000ed0c
 8005458:	20000efc 	.word	0x20000efc

0800545c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005468:	f7fe fd82 	bl	8003f70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800546c:	4b5c      	ldr	r3, [pc, #368]	@ (80055e0 <pvPortMalloc+0x184>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005474:	f000 f924 	bl	80056c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005478:	4b5a      	ldr	r3, [pc, #360]	@ (80055e4 <pvPortMalloc+0x188>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8095 	bne.w	80055b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01e      	beq.n	80054ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800548c:	2208      	movs	r2, #8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d015      	beq.n	80054ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	3308      	adds	r3, #8
 80054a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <pvPortMalloc+0x6e>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	617b      	str	r3, [r7, #20]
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d06f      	beq.n	80055b0 <pvPortMalloc+0x154>
 80054d0:	4b45      	ldr	r3, [pc, #276]	@ (80055e8 <pvPortMalloc+0x18c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d86a      	bhi.n	80055b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054da:	4b44      	ldr	r3, [pc, #272]	@ (80055ec <pvPortMalloc+0x190>)
 80054dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054de:	4b43      	ldr	r3, [pc, #268]	@ (80055ec <pvPortMalloc+0x190>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054e4:	e004      	b.n	80054f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d903      	bls.n	8005502 <pvPortMalloc+0xa6>
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f1      	bne.n	80054e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005502:	4b37      	ldr	r3, [pc, #220]	@ (80055e0 <pvPortMalloc+0x184>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005508:	429a      	cmp	r2, r3
 800550a:	d051      	beq.n	80055b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2208      	movs	r2, #8
 8005512:	4413      	add	r3, r2
 8005514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	1ad2      	subs	r2, r2, r3
 8005526:	2308      	movs	r3, #8
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	429a      	cmp	r2, r3
 800552c:	d920      	bls.n	8005570 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800552e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <pvPortMalloc+0xfc>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	613b      	str	r3, [r7, #16]
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800556a:	69b8      	ldr	r0, [r7, #24]
 800556c:	f000 f90a 	bl	8005784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005570:	4b1d      	ldr	r3, [pc, #116]	@ (80055e8 <pvPortMalloc+0x18c>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	4a1b      	ldr	r2, [pc, #108]	@ (80055e8 <pvPortMalloc+0x18c>)
 800557c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800557e:	4b1a      	ldr	r3, [pc, #104]	@ (80055e8 <pvPortMalloc+0x18c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <pvPortMalloc+0x194>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d203      	bcs.n	8005592 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800558a:	4b17      	ldr	r3, [pc, #92]	@ (80055e8 <pvPortMalloc+0x18c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a18      	ldr	r2, [pc, #96]	@ (80055f0 <pvPortMalloc+0x194>)
 8005590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	4b13      	ldr	r3, [pc, #76]	@ (80055e4 <pvPortMalloc+0x188>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	431a      	orrs	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055a6:	4b13      	ldr	r3, [pc, #76]	@ (80055f4 <pvPortMalloc+0x198>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	4a11      	ldr	r2, [pc, #68]	@ (80055f4 <pvPortMalloc+0x198>)
 80055ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055b0:	f7fe fcec 	bl	8003f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <pvPortMalloc+0x17a>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <pvPortMalloc+0x176>
	return pvReturn;
 80055d6:	69fb      	ldr	r3, [r7, #28]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3728      	adds	r7, #40	@ 0x28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20004b08 	.word	0x20004b08
 80055e4:	20004b1c 	.word	0x20004b1c
 80055e8:	20004b0c 	.word	0x20004b0c
 80055ec:	20004b00 	.word	0x20004b00
 80055f0:	20004b10 	.word	0x20004b10
 80055f4:	20004b14 	.word	0x20004b14

080055f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d04f      	beq.n	80056aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800560a:	2308      	movs	r3, #8
 800560c:	425b      	negs	r3, r3
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4413      	add	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <vPortFree+0xbc>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4013      	ands	r3, r2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <vPortFree+0x46>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60fb      	str	r3, [r7, #12]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <vPortFree+0x66>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	60bb      	str	r3, [r7, #8]
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	e7fd      	b.n	800565a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	4b14      	ldr	r3, [pc, #80]	@ (80056b4 <vPortFree+0xbc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01e      	beq.n	80056aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11a      	bne.n	80056aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4b0e      	ldr	r3, [pc, #56]	@ (80056b4 <vPortFree+0xbc>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	43db      	mvns	r3, r3
 800567e:	401a      	ands	r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005684:	f7fe fc74 	bl	8003f70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <vPortFree+0xc0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4413      	add	r3, r2
 8005692:	4a09      	ldr	r2, [pc, #36]	@ (80056b8 <vPortFree+0xc0>)
 8005694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005696:	6938      	ldr	r0, [r7, #16]
 8005698:	f000 f874 	bl	8005784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800569c:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <vPortFree+0xc4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a06      	ldr	r2, [pc, #24]	@ (80056bc <vPortFree+0xc4>)
 80056a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056a6:	f7fe fc71 	bl	8003f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20004b1c 	.word	0x20004b1c
 80056b8:	20004b0c 	.word	0x20004b0c
 80056bc:	20004b18 	.word	0x20004b18

080056c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80056ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056cc:	4b27      	ldr	r3, [pc, #156]	@ (800576c <prvHeapInit+0xac>)
 80056ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00c      	beq.n	80056f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3307      	adds	r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	4a1f      	ldr	r2, [pc, #124]	@ (800576c <prvHeapInit+0xac>)
 80056f0:	4413      	add	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <prvHeapInit+0xb0>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005770 <prvHeapInit+0xb0>)
 8005700:	2200      	movs	r2, #0
 8005702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800570c:	2208      	movs	r2, #8
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <prvHeapInit+0xb4>)
 8005720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005722:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <prvHeapInit+0xb4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800572a:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <prvHeapInit+0xb4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005740:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <prvHeapInit+0xb4>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <prvHeapInit+0xb8>)
 800574e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4a09      	ldr	r2, [pc, #36]	@ (800577c <prvHeapInit+0xbc>)
 8005756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005758:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <prvHeapInit+0xc0>)
 800575a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800575e:	601a      	str	r2, [r3, #0]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	20000f00 	.word	0x20000f00
 8005770:	20004b00 	.word	0x20004b00
 8005774:	20004b08 	.word	0x20004b08
 8005778:	20004b10 	.word	0x20004b10
 800577c:	20004b0c 	.word	0x20004b0c
 8005780:	20004b1c 	.word	0x20004b1c

08005784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800578c:	4b28      	ldr	r3, [pc, #160]	@ (8005830 <prvInsertBlockIntoFreeList+0xac>)
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e002      	b.n	8005798 <prvInsertBlockIntoFreeList+0x14>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d8f7      	bhi.n	8005792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4413      	add	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d108      	bne.n	80057c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	441a      	add	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d118      	bne.n	800580c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <prvInsertBlockIntoFreeList+0xb0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d00d      	beq.n	8005802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	441a      	add	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	e008      	b.n	8005814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005802:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <prvInsertBlockIntoFreeList+0xb0>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e003      	b.n	8005814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d002      	beq.n	8005822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20004b00 	.word	0x20004b00
 8005834:	20004b08 	.word	0x20004b08

08005838 <memset>:
 8005838:	4402      	add	r2, r0
 800583a:	4603      	mov	r3, r0
 800583c:	4293      	cmp	r3, r2
 800583e:	d100      	bne.n	8005842 <memset+0xa>
 8005840:	4770      	bx	lr
 8005842:	f803 1b01 	strb.w	r1, [r3], #1
 8005846:	e7f9      	b.n	800583c <memset+0x4>

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	@ (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	@ (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	@ (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	@ (800588c <__libc_init_array+0x44>)
 800585c:	f000 f826 	bl	80058ac <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	0800598c 	.word	0x0800598c
 8005884:	0800598c 	.word	0x0800598c
 8005888:	0800598c 	.word	0x0800598c
 800588c:	08005990 	.word	0x08005990

08005890 <memcpy>:
 8005890:	440a      	add	r2, r1
 8005892:	4291      	cmp	r1, r2
 8005894:	f100 33ff 	add.w	r3, r0, #4294967295
 8005898:	d100      	bne.n	800589c <memcpy+0xc>
 800589a:	4770      	bx	lr
 800589c:	b510      	push	{r4, lr}
 800589e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a6:	4291      	cmp	r1, r2
 80058a8:	d1f9      	bne.n	800589e <memcpy+0xe>
 80058aa:	bd10      	pop	{r4, pc}

080058ac <_init>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr

080058b8 <_fini>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr
