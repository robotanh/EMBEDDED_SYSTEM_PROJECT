
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007e44  08007e44  00008e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd0  08007fd0  000090b8  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd0  08007fd0  00008fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd8  08007fd8  000090b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd8  08007fd8  00008fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fdc  08007fdc  00008fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08007fe0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca4  200000b8  08008098  000090b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d5c  08008098  00009d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001723d  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003865  00000000  00000000  00020325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00023b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa7  00000000  00000000  00024fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019419  00000000  00000000  00025f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177a7  00000000  00000000  0003f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988d2  00000000  00000000  00056b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  000ef464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f4f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e2c 	.word	0x08007e2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08007e2c 	.word	0x08007e2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <vBlinkTimerCallback>:
char blinkText[7] = "";
char blinkText1 [7] = "";
int numBlinkRow =1;		//number of row will blink

// Timer callback function
void vBlinkTimerCallback(TimerHandle_t xTimer) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    static int toggle = 0;
    toggle = !toggle;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dd6:	601a      	str	r2, [r3, #0]
    if (toggle) {
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d018      	beq.n	8000e12 <vBlinkTimerCallback+0x56>
    	if(numBlinkRow == 1) snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), blinkText);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <vBlinkTimerCallback+0x38>
 8000de8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e54 <vBlinkTimerCallback+0x98>)
 8000dea:	2107      	movs	r1, #7
 8000dec:	481a      	ldr	r0, [pc, #104]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000dee:	f006 fb13 	bl	8007418 <sniprintf>
    	else if (numBlinkRow == 2){
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
    	}
    }
}
 8000df2:	e026      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	else if (numBlinkRow == 2){
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d122      	bne.n	8000e42 <vBlinkTimerCallback+0x86>
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), blinkText);
 8000dfc:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <vBlinkTimerCallback+0x98>)
 8000dfe:	2107      	movs	r1, #7
 8000e00:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e02:	f006 fb09 	bl	8007418 <sniprintf>
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), blinkText1);
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <vBlinkTimerCallback+0xa0>)
 8000e08:	2107      	movs	r1, #7
 8000e0a:	4815      	ldr	r0, [pc, #84]	@ (8000e60 <vBlinkTimerCallback+0xa4>)
 8000e0c:	f006 fb04 	bl	8007418 <sniprintf>
}
 8000e10:	e017      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	if(numBlinkRow == 1) snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d105      	bne.n	8000e26 <vBlinkTimerCallback+0x6a>
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e1c:	2107      	movs	r1, #7
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e20:	f006 fafa 	bl	8007418 <sniprintf>
}
 8000e24:	e00d      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	else if (numBlinkRow == 2){
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d109      	bne.n	8000e42 <vBlinkTimerCallback+0x86>
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e34:	f006 faf0 	bl	8007418 <sniprintf>
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e3a:	2107      	movs	r1, #7
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <vBlinkTimerCallback+0xa4>)
 8000e3e:	f006 faeb 	bl	8007418 <sniprintf>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000104 	.word	0x20000104
 8000e50:	20000004 	.word	0x20000004
 8000e54:	200000f4 	.word	0x200000f4
 8000e58:	20000036 	.word	0x20000036
 8000e5c:	200000fc 	.word	0x200000fc
 8000e60:	2000002f 	.word	0x2000002f
 8000e64:	08007e44 	.word	0x08007e44

08000e68 <ScanColumns>:
}
void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	f200 80c0 	bhi.w	8000ffa <ScanColumns+0x192>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <ScanColumns+0x18>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000eed 	.word	0x08000eed
 8000e88:	08000f47 	.word	0x08000f47
 8000e8c:	08000fa1 	.word	0x08000fa1
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 8000e90:	2101      	movs	r1, #1
 8000e92:	4861      	ldr	r0, [pc, #388]	@ (8001018 <ScanColumns+0x1b0>)
 8000e94:	f002 fa9a 	bl	80033cc <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <ScanColumns+0x3a>
 8000e9e:	2343      	movs	r3, #67	@ 0x43
 8000ea0:	e0b5      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	485c      	ldr	r0, [pc, #368]	@ (8001018 <ScanColumns+0x1b0>)
 8000ea6:	f002 fa91 	bl	80033cc <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <ScanColumns+0x4c>
 8000eb0:	2337      	movs	r3, #55	@ 0x37
 8000eb2:	e0ac      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4858      	ldr	r0, [pc, #352]	@ (8001018 <ScanColumns+0x1b0>)
 8000eb8:	f002 fa88 	bl	80033cc <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <ScanColumns+0x5e>
 8000ec2:	2334      	movs	r3, #52	@ 0x34
 8000ec4:	e0a3      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4853      	ldr	r0, [pc, #332]	@ (8001018 <ScanColumns+0x1b0>)
 8000eca:	f002 fa7f 	bl	80033cc <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <ScanColumns+0x70>
 8000ed4:	2331      	movs	r3, #49	@ 0x31
 8000ed6:	e09a      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 8000ed8:	2110      	movs	r1, #16
 8000eda:	484f      	ldr	r0, [pc, #316]	@ (8001018 <ScanColumns+0x1b0>)
 8000edc:	f002 fa76 	bl	80033cc <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 808b 	bne.w	8000ffe <ScanColumns+0x196>
 8000ee8:	2341      	movs	r3, #65	@ 0x41
 8000eea:	e090      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000eec:	2101      	movs	r1, #1
 8000eee:	484a      	ldr	r0, [pc, #296]	@ (8001018 <ScanColumns+0x1b0>)
 8000ef0:	f002 fa6c 	bl	80033cc <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <ScanColumns+0x96>
 8000efa:	2330      	movs	r3, #48	@ 0x30
 8000efc:	e087      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000efe:	2102      	movs	r1, #2
 8000f00:	4845      	ldr	r0, [pc, #276]	@ (8001018 <ScanColumns+0x1b0>)
 8000f02:	f002 fa63 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <ScanColumns+0xa8>
 8000f0c:	2338      	movs	r3, #56	@ 0x38
 8000f0e:	e07e      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000f10:	2104      	movs	r1, #4
 8000f12:	4841      	ldr	r0, [pc, #260]	@ (8001018 <ScanColumns+0x1b0>)
 8000f14:	f002 fa5a 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <ScanColumns+0xba>
 8000f1e:	2335      	movs	r3, #53	@ 0x35
 8000f20:	e075      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 8000f22:	2108      	movs	r1, #8
 8000f24:	483c      	ldr	r0, [pc, #240]	@ (8001018 <ScanColumns+0x1b0>)
 8000f26:	f002 fa51 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <ScanColumns+0xcc>
 8000f30:	2332      	movs	r3, #50	@ 0x32
 8000f32:	e06c      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 8000f34:	2110      	movs	r1, #16
 8000f36:	4838      	ldr	r0, [pc, #224]	@ (8001018 <ScanColumns+0x1b0>)
 8000f38:	f002 fa48 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d15f      	bne.n	8001002 <ScanColumns+0x19a>
 8000f42:	2342      	movs	r3, #66	@ 0x42
 8000f44:	e063      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 8000f46:	2101      	movs	r1, #1
 8000f48:	4833      	ldr	r0, [pc, #204]	@ (8001018 <ScanColumns+0x1b0>)
 8000f4a:	f002 fa3f 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <ScanColumns+0xf0>
 8000f54:	2345      	movs	r3, #69	@ 0x45
 8000f56:	e05a      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000f58:	2102      	movs	r1, #2
 8000f5a:	482f      	ldr	r0, [pc, #188]	@ (8001018 <ScanColumns+0x1b0>)
 8000f5c:	f002 fa36 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <ScanColumns+0x102>
 8000f66:	2339      	movs	r3, #57	@ 0x39
 8000f68:	e051      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	482a      	ldr	r0, [pc, #168]	@ (8001018 <ScanColumns+0x1b0>)
 8000f6e:	f002 fa2d 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <ScanColumns+0x114>
 8000f78:	2336      	movs	r3, #54	@ 0x36
 8000f7a:	e048      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4826      	ldr	r0, [pc, #152]	@ (8001018 <ScanColumns+0x1b0>)
 8000f80:	f002 fa24 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <ScanColumns+0x126>
 8000f8a:	2333      	movs	r3, #51	@ 0x33
 8000f8c:	e03f      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4821      	ldr	r0, [pc, #132]	@ (8001018 <ScanColumns+0x1b0>)
 8000f92:	f002 fa1b 	bl	80033cc <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d134      	bne.n	8001006 <ScanColumns+0x19e>
 8000f9c:	2344      	movs	r3, #68	@ 0x44
 8000f9e:	e036      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	481d      	ldr	r0, [pc, #116]	@ (8001018 <ScanColumns+0x1b0>)
 8000fa4:	f002 fa12 	bl	80033cc <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <ScanColumns+0x14a>
 8000fae:	2354      	movs	r3, #84	@ 0x54
 8000fb0:	e02d      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4818      	ldr	r0, [pc, #96]	@ (8001018 <ScanColumns+0x1b0>)
 8000fb6:	f002 fa09 	bl	80033cc <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <ScanColumns+0x15c>
 8000fc0:	2350      	movs	r3, #80	@ 0x50
 8000fc2:	e024      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <ScanColumns+0x1b0>)
 8000fc8:	f002 fa00 	bl	80033cc <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <ScanColumns+0x16e>
 8000fd2:	2324      	movs	r3, #36	@ 0x24
 8000fd4:	e01b      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <ScanColumns+0x1b0>)
 8000fda:	f002 f9f7 	bl	80033cc <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <ScanColumns+0x180>
 8000fe4:	234c      	movs	r3, #76	@ 0x4c
 8000fe6:	e012      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000fe8:	2110      	movs	r1, #16
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <ScanColumns+0x1b0>)
 8000fec:	f002 f9ee 	bl	80033cc <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <ScanColumns+0x1a2>
 8000ff6:	2346      	movs	r3, #70	@ 0x46
 8000ff8:	e009      	b.n	800100e <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000ffa:	23ff      	movs	r3, #255	@ 0xff
 8000ffc:	e007      	b.n	800100e <ScanColumns+0x1a6>
            break;
 8000ffe:	bf00      	nop
 8001000:	e004      	b.n	800100c <ScanColumns+0x1a4>
            break;
 8001002:	bf00      	nop
 8001004:	e002      	b.n	800100c <ScanColumns+0x1a4>
            break;
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <ScanColumns+0x1a4>
            break;
 800100a:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 800100c:	23ff      	movs	r3, #255	@ 0xff
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020400 	.word	0x40020400

0800101c <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	@ 0x40
 8001026:	482c      	ldr	r0, [pc, #176]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001028:	f002 f9e8 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001032:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001034:	f002 f9e2 	bl	80033fc <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ff15 	bl	8000e68 <ScanColumns>
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2bff      	cmp	r3, #255	@ 0xff
 8001046:	d001      	beq.n	800104c <KeyPad_Scan+0x30>
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	e041      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	4821      	ldr	r0, [pc, #132]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001052:	f002 f9d3 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7150 	mov.w	r1, #832	@ 0x340
 800105c:	481e      	ldr	r0, [pc, #120]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800105e:	f002 f9cd 	bl	80033fc <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff00 	bl	8000e68 <ScanColumns>
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2bff      	cmp	r3, #255	@ 0xff
 8001070:	d001      	beq.n	8001076 <KeyPad_Scan+0x5a>
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	e02c      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107c:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800107e:	f002 f9bd 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800108a:	f002 f9b7 	bl	80033fc <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff feea 	bl	8000e68 <ScanColumns>
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2bff      	cmp	r3, #255	@ 0xff
 800109c:	d001      	beq.n	80010a2 <KeyPad_Scan+0x86>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	e016      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <KeyPad_Scan+0xbc>)
 80010aa:	f002 f9a7 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <KeyPad_Scan+0xbc>)
 80010b6:	f002 f9a1 	bl	80033fc <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fed4 	bl	8000e68 <ScanColumns>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d001      	beq.n	80010ce <KeyPad_Scan+0xb2>
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	e000      	b.n	80010d0 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80010ce:	23ff      	movs	r3, #255	@ 0xff
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400

080010dc <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <formatTotalLiters+0x80>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d815      	bhi.n	800111c <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <formatTotalLiters+0x84>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9a      	lsrs	r2, r3, #18
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <formatTotalLiters+0x84>)
 8001102:	fba3 1302 	umull	r1, r3, r3, r2
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	4916      	ldr	r1, [pc, #88]	@ (8001164 <formatTotalLiters+0x88>)
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <formatTotalLiters+0x8c>)
 8001116:	2203      	movs	r2, #3
 8001118:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 800111a:	e018      	b.n	800114e <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <formatTotalLiters+0x90>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0e5a      	lsrs	r2, r3, #25
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <formatTotalLiters+0x90>)
 800112e:	fba3 1302 	umull	r1, r3, r3, r2
 8001132:	0e5b      	lsrs	r3, r3, #25
 8001134:	490e      	ldr	r1, [pc, #56]	@ (8001170 <formatTotalLiters+0x94>)
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <formatTotalLiters+0x98>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	095a      	lsrs	r2, r3, #5
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <formatTotalLiters+0x8c>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	05f5e0ff 	.word	0x05f5e0ff
 8001160:	431bde83 	.word	0x431bde83
 8001164:	000f4240 	.word	0x000f4240
 8001168:	20000054 	.word	0x20000054
 800116c:	55e63b89 	.word	0x55e63b89
 8001170:	05f5e100 	.word	0x05f5e100
 8001174:	51eb851f 	.word	0x51eb851f

08001178 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <formatTotalLitersShift+0x60>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d815      	bhi.n	80011b8 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <formatTotalLitersShift+0x64>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <formatTotalLitersShift+0x64>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	490e      	ldr	r1, [pc, #56]	@ (80011e0 <formatTotalLitersShift+0x68>)
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <formatTotalLitersShift+0x6c>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80011b6:	e009      	b.n	80011cc <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <formatTotalLitersShift+0x6c>)
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	3b9ac9ff 	.word	0x3b9ac9ff
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	000f4240 	.word	0x000f4240
 80011e4:	20000054 	.word	0x20000054

080011e8 <formatFloat>:

void formatFloat(float value, char* buffer)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80011f2:	6038      	str	r0, [r7, #0]
    int integerPart = (int)value;
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	ee17 3a90 	vmov	r3, s15
 8001200:	60fb      	str	r3, [r7, #12]
    int decimalPart = (int)((value - integerPart) * 100);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001240 <formatFloat+0x58>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 3a90 	vmov	r3, s15
 8001224:	60bb      	str	r3, [r7, #8]

    snprintf(buffer, 7, "%03d.%02d", integerPart, decimalPart);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <formatFloat+0x5c>)
 800122e:	2107      	movs	r1, #7
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f006 f8f1 	bl	8007418 <sniprintf>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	42c80000 	.word	0x42c80000
 8001244:	08007e48 	.word	0x08007e48

08001248 <setPriceandLiter>:

void setPriceandLiter (uint32_t inputPrice)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	orderPrice=inputPrice;
 8001250:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <setPriceandLiter+0x4c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
	orderLiter=(double)orderPrice/(double)roundedPrice;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <setPriceandLiter+0x4c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f95a 	bl	8000514 <__aeabi_ui2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <setPriceandLiter+0x50>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f953 	bl	8000514 <__aeabi_ui2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff faf1 	bl	800085c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fbd3 	bl	8000a2c <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <setPriceandLiter+0x54>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	200001cc 	.word	0x200001cc
 8001298:	20000050 	.word	0x20000050
 800129c:	200001d0 	.word	0x200001d0

080012a0 <KeyLogic>:
void KeyLogic() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 80012a6:	f004 fc91 	bl	8005bcc <xTaskGetTickCount>
 80012aa:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 80012ac:	f7ff feb6 	bl	800101c <KeyPad_Scan>
 80012b0:	4603      	mov	r3, r0
 80012b2:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 80012b4:	4ba6      	ldr	r3, [pc, #664]	@ (8001550 <KeyLogic+0x2b0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d85a      	bhi.n	8001372 <KeyLogic+0xd2>
 80012bc:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <KeyLogic+0x24>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012ef 	.word	0x080012ef
 80012cc:	0800131b 	.word	0x0800131b
 80012d0:	0800134b 	.word	0x0800134b
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2bff      	cmp	r3, #255	@ 0xff
 80012d8:	d044      	beq.n	8001364 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 80012da:	4a9e      	ldr	r2, [pc, #632]	@ (8001554 <KeyLogic+0x2b4>)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 80012e0:	4a9d      	ldr	r2, [pc, #628]	@ (8001558 <KeyLogic+0x2b8>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 80012e6:	4b9a      	ldr	r3, [pc, #616]	@ (8001550 <KeyLogic+0x2b0>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
            }
            break;
 80012ec:	e03a      	b.n	8001364 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 80012ee:	4b9a      	ldr	r3, [pc, #616]	@ (8001558 <KeyLogic+0x2b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b31      	cmp	r3, #49	@ 0x31
 80012f8:	d936      	bls.n	8001368 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 80012fa:	4b96      	ldr	r3, [pc, #600]	@ (8001554 <KeyLogic+0x2b4>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	78fa      	ldrb	r2, [r7, #3]
 8001300:	429a      	cmp	r2, r3
 8001302:	d106      	bne.n	8001312 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8001304:	4b92      	ldr	r3, [pc, #584]	@ (8001550 <KeyLogic+0x2b0>)
 8001306:	2202      	movs	r2, #2
 8001308:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800130a:	4a94      	ldr	r2, [pc, #592]	@ (800155c <KeyLogic+0x2bc>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8001310:	e02a      	b.n	8001368 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8001312:	4b8f      	ldr	r3, [pc, #572]	@ (8001550 <KeyLogic+0x2b0>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
            break;
 8001318:	e026      	b.n	8001368 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800131a:	4b8e      	ldr	r3, [pc, #568]	@ (8001554 <KeyLogic+0x2b4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	429a      	cmp	r2, r3
 8001322:	d10a      	bne.n	800133a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8001324:	4b8d      	ldr	r3, [pc, #564]	@ (800155c <KeyLogic+0x2bc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001330:	d31c      	bcc.n	800136c <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8001332:	4b87      	ldr	r3, [pc, #540]	@ (8001550 <KeyLogic+0x2b0>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8001338:	e018      	b.n	800136c <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800133a:	4b86      	ldr	r3, [pc, #536]	@ (8001554 <KeyLogic+0x2b4>)
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b88      	ldr	r3, [pc, #544]	@ (8001560 <KeyLogic+0x2c0>)
 8001340:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 8001342:	4b83      	ldr	r3, [pc, #524]	@ (8001550 <KeyLogic+0x2b0>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
            break;
 8001348:	e010      	b.n	800136c <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 800134a:	4b82      	ldr	r3, [pc, #520]	@ (8001554 <KeyLogic+0x2b4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	429a      	cmp	r2, r3
 8001352:	d00d      	beq.n	8001370 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 8001354:	4b7f      	ldr	r3, [pc, #508]	@ (8001554 <KeyLogic+0x2b4>)
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	4b81      	ldr	r3, [pc, #516]	@ (8001560 <KeyLogic+0x2c0>)
 800135a:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 800135c:	4b7c      	ldr	r3, [pc, #496]	@ (8001550 <KeyLogic+0x2b0>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001362:	e005      	b.n	8001370 <KeyLogic+0xd0>
            break;
 8001364:	bf00      	nop
 8001366:	e004      	b.n	8001372 <KeyLogic+0xd2>
            break;
 8001368:	bf00      	nop
 800136a:	e002      	b.n	8001372 <KeyLogic+0xd2>
            break;
 800136c:	bf00      	nop
 800136e:	e000      	b.n	8001372 <KeyLogic+0xd2>
            break;
 8001370:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 8001372:	4b7b      	ldr	r3, [pc, #492]	@ (8001560 <KeyLogic+0x2c0>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	f000 8451 	beq.w	8001c1e <KeyLogic+0x97e>
		switch (keyPressed) {
 800137c:	4b78      	ldr	r3, [pc, #480]	@ (8001560 <KeyLogic+0x2c0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3b24      	subs	r3, #36	@ 0x24
 8001382:	2b30      	cmp	r3, #48	@ 0x30
 8001384:	f200 83c0 	bhi.w	8001b08 <KeyLogic+0x868>
 8001388:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <KeyLogic+0xf0>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	08001a7b 	.word	0x08001a7b
 8001394:	08001b09 	.word	0x08001b09
 8001398:	08001b09 	.word	0x08001b09
 800139c:	08001b09 	.word	0x08001b09
 80013a0:	08001b09 	.word	0x08001b09
 80013a4:	08001b09 	.word	0x08001b09
 80013a8:	08001b09 	.word	0x08001b09
 80013ac:	08001b09 	.word	0x08001b09
 80013b0:	08001b09 	.word	0x08001b09
 80013b4:	08001b09 	.word	0x08001b09
 80013b8:	08001b09 	.word	0x08001b09
 80013bc:	08001b09 	.word	0x08001b09
 80013c0:	08001b09 	.word	0x08001b09
 80013c4:	08001b09 	.word	0x08001b09
 80013c8:	08001b09 	.word	0x08001b09
 80013cc:	08001b09 	.word	0x08001b09
 80013d0:	08001b09 	.word	0x08001b09
 80013d4:	08001b09 	.word	0x08001b09
 80013d8:	08001b09 	.word	0x08001b09
 80013dc:	08001b09 	.word	0x08001b09
 80013e0:	08001b09 	.word	0x08001b09
 80013e4:	08001b09 	.word	0x08001b09
 80013e8:	08001b09 	.word	0x08001b09
 80013ec:	08001b09 	.word	0x08001b09
 80013f0:	08001b09 	.word	0x08001b09
 80013f4:	08001b09 	.word	0x08001b09
 80013f8:	08001b09 	.word	0x08001b09
 80013fc:	08001b09 	.word	0x08001b09
 8001400:	08001b09 	.word	0x08001b09
 8001404:	08001455 	.word	0x08001455
 8001408:	080014c1 	.word	0x080014c1
 800140c:	0800166b 	.word	0x0800166b
 8001410:	0800153d 	.word	0x0800153d
 8001414:	08001691 	.word	0x08001691
 8001418:	080015f1 	.word	0x080015f1
 800141c:	08001b09 	.word	0x08001b09
 8001420:	08001b09 	.word	0x08001b09
 8001424:	08001b09 	.word	0x08001b09
 8001428:	08001b09 	.word	0x08001b09
 800142c:	08001b09 	.word	0x08001b09
 8001430:	08001ad5 	.word	0x08001ad5
 8001434:	08001b09 	.word	0x08001b09
 8001438:	08001b09 	.word	0x08001b09
 800143c:	08001b09 	.word	0x08001b09
 8001440:	08001a33 	.word	0x08001a33
 8001444:	08001b09 	.word	0x08001b09
 8001448:	08001b09 	.word	0x08001b09
 800144c:	08001b09 	.word	0x08001b09
 8001450:	08001a57 	.word	0x08001a57
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				if(seqState==SEQ_IDLE){
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <KeyLogic+0x2c4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d104      	bne.n	8001466 <KeyLogic+0x1c6>
					setPriceandLiter(10000);
 800145c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001460:	f7ff fef2 	bl	8001248 <setPriceandLiter>
				else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001464:	e3db      	b.n	8001c1e <KeyLogic+0x97e>
				else if(seqState==SEQ_PRESSED_L){
 8001466:	4b3f      	ldr	r3, [pc, #252]	@ (8001564 <KeyLogic+0x2c4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b10      	cmp	r3, #16
 800146c:	d11e      	bne.n	80014ac <KeyLogic+0x20c>
					orderLiter=1;
 800146e:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <KeyLogic+0x2c8>)
 8001470:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001474:	601a      	str	r2, [r3, #0]
					orderPrice=orderLiter*roundedPrice;
 8001476:	4b3d      	ldr	r3, [pc, #244]	@ (800156c <KeyLogic+0x2cc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001482:	4b39      	ldr	r3, [pc, #228]	@ (8001568 <KeyLogic+0x2c8>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001490:	ee17 2a90 	vmov	r2, s15
 8001494:	4b36      	ldr	r3, [pc, #216]	@ (8001570 <KeyLogic+0x2d0>)
 8001496:	601a      	str	r2, [r3, #0]
					seqState=SEQ_IDLE;
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <KeyLogic+0x2c4>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800149e:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <KeyLogic+0x2d4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80014a4:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <KeyLogic+0x2d8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
				break;
 80014aa:	e3b8      	b.n	8001c1e <KeyLogic+0x97e>
					seqState=SEQ_IDLE;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <KeyLogic+0x2c4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80014b2:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <KeyLogic+0x2d4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <KeyLogic+0x2d8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
				break;
 80014be:	e3ae      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_IDLE){
 80014c0:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <KeyLogic+0x2c4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d104      	bne.n	80014d2 <KeyLogic+0x232>
					setPriceandLiter(15000);
 80014c8:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80014cc:	f7ff febc 	bl	8001248 <setPriceandLiter>
				}else{
					seqState=SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 80014d0:	e3a5      	b.n	8001c1e <KeyLogic+0x97e>
				else if(seqState==SEQ_PRESSED_L){
 80014d2:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <KeyLogic+0x2c4>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d11e      	bne.n	8001518 <KeyLogic+0x278>
					orderLiter=2;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <KeyLogic+0x2c8>)
 80014dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e0:	601a      	str	r2, [r3, #0]
					orderPrice=orderLiter*roundedPrice;
 80014e2:	4b22      	ldr	r3, [pc, #136]	@ (800156c <KeyLogic+0x2cc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <KeyLogic+0x2c8>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fc:	ee17 2a90 	vmov	r2, s15
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <KeyLogic+0x2d0>)
 8001502:	601a      	str	r2, [r3, #0]
					seqState=SEQ_IDLE;
 8001504:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <KeyLogic+0x2c4>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <KeyLogic+0x2d4>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <KeyLogic+0x2d8>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
				break;
 8001516:	e382      	b.n	8001c1e <KeyLogic+0x97e>
				else if(seqState==SEQ_PRESSED_P){
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <KeyLogic+0x2c4>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d103      	bne.n	8001528 <KeyLogic+0x288>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 8001520:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <KeyLogic+0x2c4>)
 8001522:	2206      	movs	r2, #6
 8001524:	701a      	strb	r2, [r3, #0]
				break;
 8001526:	e37a      	b.n	8001c1e <KeyLogic+0x97e>
					seqState=SEQ_IDLE;
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <KeyLogic+0x2c4>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <KeyLogic+0x2d4>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <KeyLogic+0x2d8>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
				break;
 800153a:	e370      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if(seqState==SEQ_IDLE){
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <KeyLogic+0x2c4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11b      	bne.n	800157c <KeyLogic+0x2dc>
					setPriceandLiter(20000);
 8001544:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001548:	f7ff fe7e 	bl	8001248 <setPriceandLiter>
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800154c:	e367      	b.n	8001c1e <KeyLogic+0x97e>
 800154e:	bf00      	nop
 8001550:	200000ed 	.word	0x200000ed
 8001554:	20000001 	.word	0x20000001
 8001558:	200000d4 	.word	0x200000d4
 800155c:	200000d8 	.word	0x200000d8
 8001560:	20000000 	.word	0x20000000
 8001564:	200000ee 	.word	0x200000ee
 8001568:	200001d0 	.word	0x200001d0
 800156c:	20000050 	.word	0x20000050
 8001570:	200001cc 	.word	0x200001cc
 8001574:	200000e0 	.word	0x200000e0
 8001578:	200000dc 	.word	0x200000dc
				else if(seqState==SEQ_PRESSED_L){
 800157c:	4b9b      	ldr	r3, [pc, #620]	@ (80017ec <KeyLogic+0x54c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b10      	cmp	r3, #16
 8001582:	d11d      	bne.n	80015c0 <KeyLogic+0x320>
					orderLiter=5;
 8001584:	4b9a      	ldr	r3, [pc, #616]	@ (80017f0 <KeyLogic+0x550>)
 8001586:	4a9b      	ldr	r2, [pc, #620]	@ (80017f4 <KeyLogic+0x554>)
 8001588:	601a      	str	r2, [r3, #0]
					orderPrice=orderLiter*roundedPrice;
 800158a:	4b9b      	ldr	r3, [pc, #620]	@ (80017f8 <KeyLogic+0x558>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001596:	4b96      	ldr	r3, [pc, #600]	@ (80017f0 <KeyLogic+0x550>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a4:	ee17 2a90 	vmov	r2, s15
 80015a8:	4b94      	ldr	r3, [pc, #592]	@ (80017fc <KeyLogic+0x55c>)
 80015aa:	601a      	str	r2, [r3, #0]
					seqState=SEQ_IDLE;
 80015ac:	4b8f      	ldr	r3, [pc, #572]	@ (80017ec <KeyLogic+0x54c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80015b2:	4b93      	ldr	r3, [pc, #588]	@ (8001800 <KeyLogic+0x560>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80015b8:	4b92      	ldr	r3, [pc, #584]	@ (8001804 <KeyLogic+0x564>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
				break;
 80015be:	e32e      	b.n	8001c1e <KeyLogic+0x97e>
				else if (seqState == SEQ_PRESSED_T) {
 80015c0:	4b8a      	ldr	r3, [pc, #552]	@ (80017ec <KeyLogic+0x54c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b0a      	cmp	r3, #10
 80015c6:	d109      	bne.n	80015dc <KeyLogic+0x33c>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 80015c8:	4b88      	ldr	r3, [pc, #544]	@ (80017ec <KeyLogic+0x54c>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80015ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001800 <KeyLogic+0x560>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80015d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001804 <KeyLogic+0x564>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
				break;
 80015da:	e320      	b.n	8001c1e <KeyLogic+0x97e>
					seqState = SEQ_IDLE;
 80015dc:	4b83      	ldr	r3, [pc, #524]	@ (80017ec <KeyLogic+0x54c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80015e2:	4b87      	ldr	r3, [pc, #540]	@ (8001800 <KeyLogic+0x560>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80015e8:	4b86      	ldr	r3, [pc, #536]	@ (8001804 <KeyLogic+0x564>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
				break;
 80015ee:	e316      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if(seqState==SEQ_IDLE){
 80015f0:	4b7e      	ldr	r3, [pc, #504]	@ (80017ec <KeyLogic+0x54c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d104      	bne.n	8001602 <KeyLogic+0x362>
					setPriceandLiter(50000);
 80015f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015fc:	f7ff fe24 	bl	8001248 <setPriceandLiter>
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001600:	e30d      	b.n	8001c1e <KeyLogic+0x97e>
				else if(seqState==SEQ_PRESSED_L){
 8001602:	4b7a      	ldr	r3, [pc, #488]	@ (80017ec <KeyLogic+0x54c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d11d      	bne.n	8001646 <KeyLogic+0x3a6>
					orderLiter=10;
 800160a:	4b79      	ldr	r3, [pc, #484]	@ (80017f0 <KeyLogic+0x550>)
 800160c:	4a7e      	ldr	r2, [pc, #504]	@ (8001808 <KeyLogic+0x568>)
 800160e:	601a      	str	r2, [r3, #0]
					orderPrice=orderLiter*roundedPrice;
 8001610:	4b79      	ldr	r3, [pc, #484]	@ (80017f8 <KeyLogic+0x558>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800161c:	4b74      	ldr	r3, [pc, #464]	@ (80017f0 <KeyLogic+0x550>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162a:	ee17 2a90 	vmov	r2, s15
 800162e:	4b73      	ldr	r3, [pc, #460]	@ (80017fc <KeyLogic+0x55c>)
 8001630:	601a      	str	r2, [r3, #0]
					seqState=SEQ_IDLE;
 8001632:	4b6e      	ldr	r3, [pc, #440]	@ (80017ec <KeyLogic+0x54c>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001638:	4b71      	ldr	r3, [pc, #452]	@ (8001800 <KeyLogic+0x560>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800163e:	4b71      	ldr	r3, [pc, #452]	@ (8001804 <KeyLogic+0x564>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
				break;
 8001644:	e2eb      	b.n	8001c1e <KeyLogic+0x97e>
				else if (seqState == SEQ_PRESSED_T) {
 8001646:	4b69      	ldr	r3, [pc, #420]	@ (80017ec <KeyLogic+0x54c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d103      	bne.n	8001656 <KeyLogic+0x3b6>
					seqState = SEQ_PRESSED_T_F4;
 800164e:	4b67      	ldr	r3, [pc, #412]	@ (80017ec <KeyLogic+0x54c>)
 8001650:	220e      	movs	r2, #14
 8001652:	701a      	strb	r2, [r3, #0]
				break;
 8001654:	e2e3      	b.n	8001c1e <KeyLogic+0x97e>
					seqState = SEQ_IDLE;
 8001656:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <KeyLogic+0x54c>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 800165c:	4b68      	ldr	r3, [pc, #416]	@ (8001800 <KeyLogic+0x560>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001662:	4b68      	ldr	r3, [pc, #416]	@ (8001804 <KeyLogic+0x564>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
				break;
 8001668:	e2d9      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800166a:	2300      	movs	r3, #0
 800166c:	4a67      	ldr	r2, [pc, #412]	@ (800180c <KeyLogic+0x56c>)
 800166e:	2107      	movs	r1, #7
 8001670:	4867      	ldr	r0, [pc, #412]	@ (8001810 <KeyLogic+0x570>)
 8001672:	f005 fed1 	bl	8007418 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001676:	2300      	movs	r3, #0
 8001678:	4a64      	ldr	r2, [pc, #400]	@ (800180c <KeyLogic+0x56c>)
 800167a:	2107      	movs	r1, #7
 800167c:	4865      	ldr	r0, [pc, #404]	@ (8001814 <KeyLogic+0x574>)
 800167e:	f005 fecb 	bl	8007418 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8001682:	2301      	movs	r3, #1
 8001684:	4a61      	ldr	r2, [pc, #388]	@ (800180c <KeyLogic+0x56c>)
 8001686:	2107      	movs	r1, #7
 8001688:	4863      	ldr	r0, [pc, #396]	@ (8001818 <KeyLogic+0x578>)
 800168a:	f005 fec5 	bl	8007418 <sniprintf>
				break;
 800168e:	e2c6      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 8001690:	4b56      	ldr	r3, [pc, #344]	@ (80017ec <KeyLogic+0x54c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <KeyLogic+0x400>
					seqState = SEQ_DISP_PRICE;
 8001698:	4b54      	ldr	r3, [pc, #336]	@ (80017ec <KeyLogic+0x54c>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 800169e:	e2be      	b.n	8001c1e <KeyLogic+0x97e>
				else if (seqState == SEQ_PRESSED_$){
 80016a0:	4b52      	ldr	r3, [pc, #328]	@ (80017ec <KeyLogic+0x54c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b11      	cmp	r3, #17
 80016a6:	d10e      	bne.n	80016c6 <KeyLogic+0x426>
					setPriceandLiter(accumulatedNumber);
 80016a8:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <KeyLogic+0x564>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fdcb 	bl	8001248 <setPriceandLiter>
					seqState = SEQ_IDLE;
 80016b2:	4b4e      	ldr	r3, [pc, #312]	@ (80017ec <KeyLogic+0x54c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80016b8:	4b51      	ldr	r3, [pc, #324]	@ (8001800 <KeyLogic+0x560>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80016be:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <KeyLogic+0x564>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
				break;
 80016c4:	e2ab      	b.n	8001c1e <KeyLogic+0x97e>
				else if (seqState == SEQ_PRESSED_L){
 80016c6:	4b49      	ldr	r3, [pc, #292]	@ (80017ec <KeyLogic+0x54c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d123      	bne.n	8001716 <KeyLogic+0x476>
					orderLiter=accumulatedNumber;
 80016ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <KeyLogic+0x564>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016da:	4b45      	ldr	r3, [pc, #276]	@ (80017f0 <KeyLogic+0x550>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
					orderPrice=orderLiter*roundedPrice;
 80016e0:	4b45      	ldr	r3, [pc, #276]	@ (80017f8 <KeyLogic+0x558>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016ec:	4b40      	ldr	r3, [pc, #256]	@ (80017f0 <KeyLogic+0x550>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fa:	ee17 2a90 	vmov	r2, s15
 80016fe:	4b3f      	ldr	r3, [pc, #252]	@ (80017fc <KeyLogic+0x55c>)
 8001700:	601a      	str	r2, [r3, #0]
					seqState = SEQ_IDLE;
 8001702:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <KeyLogic+0x54c>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001708:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <KeyLogic+0x560>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <KeyLogic+0x564>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
				break;
 8001714:	e283      	b.n	8001c1e <KeyLogic+0x97e>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <KeyLogic+0x54c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b08      	cmp	r3, #8
 800171c:	d10f      	bne.n	800173e <KeyLogic+0x49e>
					accumulatedNumber==password) {
 800171e:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <KeyLogic+0x564>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <KeyLogic+0x57c>)
 8001724:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8001726:	429a      	cmp	r2, r3
 8001728:	d109      	bne.n	800173e <KeyLogic+0x49e>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 800172a:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <KeyLogic+0x54c>)
 800172c:	2209      	movs	r2, #9
 800172e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001730:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <KeyLogic+0x560>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001736:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <KeyLogic+0x564>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e178      	b.n	8001a30 <KeyLogic+0x790>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 800173e:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <KeyLogic+0x54c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b06      	cmp	r3, #6
 8001744:	d10f      	bne.n	8001766 <KeyLogic+0x4c6>
						accumulatedNumber==password){
 8001746:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <KeyLogic+0x564>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <KeyLogic+0x57c>)
 800174c:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&
 800174e:	429a      	cmp	r2, r3
 8001750:	d109      	bne.n	8001766 <KeyLogic+0x4c6>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <KeyLogic+0x54c>)
 8001754:	2207      	movs	r2, #7
 8001756:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001758:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <KeyLogic+0x560>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800175e:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <KeyLogic+0x564>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e164      	b.n	8001a30 <KeyLogic+0x790>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <KeyLogic+0x54c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b07      	cmp	r3, #7
 800176c:	f040 80a1 	bne.w	80018b2 <KeyLogic+0x612>
					switch(accumulatedNumber){
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <KeyLogic+0x564>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b02      	cmp	r3, #2
 8001776:	f000 8089 	beq.w	800188c <KeyLogic+0x5ec>
 800177a:	2b02      	cmp	r3, #2
 800177c:	f200 808e 	bhi.w	800189c <KeyLogic+0x5fc>
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <KeyLogic+0x4ea>
 8001784:	2b01      	cmp	r3, #1
 8001786:	d051      	beq.n	800182c <KeyLogic+0x58c>
							break;
 8001788:	e088      	b.n	800189c <KeyLogic+0x5fc>
							if(currPrice%50<25){
 800178a:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <KeyLogic+0x580>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b25      	ldr	r3, [pc, #148]	@ (8001824 <KeyLogic+0x584>)
 8001790:	fba3 1302 	umull	r1, r3, r3, r2
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	2132      	movs	r1, #50	@ 0x32
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b18      	cmp	r3, #24
 80017a0:	d80f      	bhi.n	80017c2 <KeyLogic+0x522>
								roundedPrice=currPrice-(currPrice%50);
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <KeyLogic+0x580>)
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <KeyLogic+0x580>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <KeyLogic+0x584>)
 80017ac:	fba3 0302 	umull	r0, r3, r3, r2
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	2032      	movs	r0, #50	@ 0x32
 80017b4:	fb00 f303 	mul.w	r3, r0, r3
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	1acb      	subs	r3, r1, r3
 80017bc:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <KeyLogic+0x558>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e00f      	b.n	80017e2 <KeyLogic+0x542>
								roundedPrice=currPrice-(currPrice%50)+50;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <KeyLogic+0x580>)
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <KeyLogic+0x580>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <KeyLogic+0x584>)
 80017cc:	fba3 0302 	umull	r0, r3, r3, r2
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	2032      	movs	r0, #50	@ 0x32
 80017d4:	fb00 f303 	mul.w	r3, r0, r3
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	1acb      	subs	r3, r1, r3
 80017dc:	3332      	adds	r3, #50	@ 0x32
 80017de:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <KeyLogic+0x558>)
 80017e0:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <KeyLogic+0x588>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
							break;
 80017e8:	e059      	b.n	800189e <KeyLogic+0x5fe>
 80017ea:	bf00      	nop
 80017ec:	200000ee 	.word	0x200000ee
 80017f0:	200001d0 	.word	0x200001d0
 80017f4:	40a00000 	.word	0x40a00000
 80017f8:	20000050 	.word	0x20000050
 80017fc:	200001cc 	.word	0x200001cc
 8001800:	200000e0 	.word	0x200000e0
 8001804:	200000dc 	.word	0x200000dc
 8001808:	41200000 	.word	0x41200000
 800180c:	08007e54 	.word	0x08007e54
 8001810:	20000028 	.word	0x20000028
 8001814:	2000002f 	.word	0x2000002f
 8001818:	20000036 	.word	0x20000036
 800181c:	20000040 	.word	0x20000040
 8001820:	2000004c 	.word	0x2000004c
 8001824:	51eb851f 	.word	0x51eb851f
 8001828:	200000ec 	.word	0x200000ec
							if(currPrice%100<50){
 800182c:	4b9b      	ldr	r3, [pc, #620]	@ (8001a9c <KeyLogic+0x7fc>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b9b      	ldr	r3, [pc, #620]	@ (8001aa0 <KeyLogic+0x800>)
 8001832:	fba3 1302 	umull	r1, r3, r3, r2
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2164      	movs	r1, #100	@ 0x64
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b31      	cmp	r3, #49	@ 0x31
 8001842:	d80f      	bhi.n	8001864 <KeyLogic+0x5c4>
								roundedPrice=currPrice-(currPrice%100);
 8001844:	4b95      	ldr	r3, [pc, #596]	@ (8001a9c <KeyLogic+0x7fc>)
 8001846:	6819      	ldr	r1, [r3, #0]
 8001848:	4b94      	ldr	r3, [pc, #592]	@ (8001a9c <KeyLogic+0x7fc>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b94      	ldr	r3, [pc, #592]	@ (8001aa0 <KeyLogic+0x800>)
 800184e:	fba3 0302 	umull	r0, r3, r3, r2
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2064      	movs	r0, #100	@ 0x64
 8001856:	fb00 f303 	mul.w	r3, r0, r3
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	1acb      	subs	r3, r1, r3
 800185e:	4a91      	ldr	r2, [pc, #580]	@ (8001aa4 <KeyLogic+0x804>)
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00f      	b.n	8001884 <KeyLogic+0x5e4>
								roundedPrice=currPrice-(currPrice%100)+100;
 8001864:	4b8d      	ldr	r3, [pc, #564]	@ (8001a9c <KeyLogic+0x7fc>)
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	4b8c      	ldr	r3, [pc, #560]	@ (8001a9c <KeyLogic+0x7fc>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa0 <KeyLogic+0x800>)
 800186e:	fba3 0302 	umull	r0, r3, r3, r2
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2064      	movs	r0, #100	@ 0x64
 8001876:	fb00 f303 	mul.w	r3, r0, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	1acb      	subs	r3, r1, r3
 800187e:	3364      	adds	r3, #100	@ 0x64
 8001880:	4a88      	ldr	r2, [pc, #544]	@ (8001aa4 <KeyLogic+0x804>)
 8001882:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 8001884:	4b88      	ldr	r3, [pc, #544]	@ (8001aa8 <KeyLogic+0x808>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
							break;
 800188a:	e008      	b.n	800189e <KeyLogic+0x5fe>
							roundedPrice=currPrice;
 800188c:	4b83      	ldr	r3, [pc, #524]	@ (8001a9c <KeyLogic+0x7fc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a84      	ldr	r2, [pc, #528]	@ (8001aa4 <KeyLogic+0x804>)
 8001892:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 8001894:	4b84      	ldr	r3, [pc, #528]	@ (8001aa8 <KeyLogic+0x808>)
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
							break;
 800189a:	e000      	b.n	800189e <KeyLogic+0x5fe>
							break;
 800189c:	bf00      	nop
					seqState = SEQ_IDLE;
 800189e:	4b83      	ldr	r3, [pc, #524]	@ (8001aac <KeyLogic+0x80c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80018a4:	4b82      	ldr	r3, [pc, #520]	@ (8001ab0 <KeyLogic+0x810>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80018aa:	4b82      	ldr	r3, [pc, #520]	@ (8001ab4 <KeyLogic+0x814>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
				break;
 80018b0:	e1b5      	b.n	8001c1e <KeyLogic+0x97e>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 80018b2:	4b7e      	ldr	r3, [pc, #504]	@ (8001aac <KeyLogic+0x80c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	d173      	bne.n	80019a2 <KeyLogic+0x702>
					currPrice = accumulatedNumber;
 80018ba:	4b7e      	ldr	r3, [pc, #504]	@ (8001ab4 <KeyLogic+0x814>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a77      	ldr	r2, [pc, #476]	@ (8001a9c <KeyLogic+0x7fc>)
 80018c0:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 80018c2:	4b79      	ldr	r3, [pc, #484]	@ (8001aa8 <KeyLogic+0x808>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <KeyLogic+0x630>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d02d      	beq.n	800192a <KeyLogic+0x68a>
 80018ce:	e059      	b.n	8001984 <KeyLogic+0x6e4>
							if(currPrice%50<25){
 80018d0:	4b72      	ldr	r3, [pc, #456]	@ (8001a9c <KeyLogic+0x7fc>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b72      	ldr	r3, [pc, #456]	@ (8001aa0 <KeyLogic+0x800>)
 80018d6:	fba3 1302 	umull	r1, r3, r3, r2
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	2132      	movs	r1, #50	@ 0x32
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b18      	cmp	r3, #24
 80018e6:	d80f      	bhi.n	8001908 <KeyLogic+0x668>
								roundedPrice=currPrice-(currPrice%50);
 80018e8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a9c <KeyLogic+0x7fc>)
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	4b6b      	ldr	r3, [pc, #428]	@ (8001a9c <KeyLogic+0x7fc>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b6b      	ldr	r3, [pc, #428]	@ (8001aa0 <KeyLogic+0x800>)
 80018f2:	fba3 0302 	umull	r0, r3, r3, r2
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	2032      	movs	r0, #50	@ 0x32
 80018fa:	fb00 f303 	mul.w	r3, r0, r3
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	1acb      	subs	r3, r1, r3
 8001902:	4a68      	ldr	r2, [pc, #416]	@ (8001aa4 <KeyLogic+0x804>)
 8001904:	6013      	str	r3, [r2, #0]
							break;
 8001906:	e042      	b.n	800198e <KeyLogic+0x6ee>
								roundedPrice=currPrice-(currPrice%50)+50;
 8001908:	4b64      	ldr	r3, [pc, #400]	@ (8001a9c <KeyLogic+0x7fc>)
 800190a:	6819      	ldr	r1, [r3, #0]
 800190c:	4b63      	ldr	r3, [pc, #396]	@ (8001a9c <KeyLogic+0x7fc>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <KeyLogic+0x800>)
 8001912:	fba3 0302 	umull	r0, r3, r3, r2
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	2032      	movs	r0, #50	@ 0x32
 800191a:	fb00 f303 	mul.w	r3, r0, r3
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	1acb      	subs	r3, r1, r3
 8001922:	3332      	adds	r3, #50	@ 0x32
 8001924:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa4 <KeyLogic+0x804>)
 8001926:	6013      	str	r3, [r2, #0]
							break;
 8001928:	e031      	b.n	800198e <KeyLogic+0x6ee>
							if(currPrice%100<50){
 800192a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a9c <KeyLogic+0x7fc>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa0 <KeyLogic+0x800>)
 8001930:	fba3 1302 	umull	r1, r3, r3, r2
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	2164      	movs	r1, #100	@ 0x64
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b31      	cmp	r3, #49	@ 0x31
 8001940:	d80f      	bhi.n	8001962 <KeyLogic+0x6c2>
								roundedPrice=currPrice-(currPrice%100);
 8001942:	4b56      	ldr	r3, [pc, #344]	@ (8001a9c <KeyLogic+0x7fc>)
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	4b55      	ldr	r3, [pc, #340]	@ (8001a9c <KeyLogic+0x7fc>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b55      	ldr	r3, [pc, #340]	@ (8001aa0 <KeyLogic+0x800>)
 800194c:	fba3 0302 	umull	r0, r3, r3, r2
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	2064      	movs	r0, #100	@ 0x64
 8001954:	fb00 f303 	mul.w	r3, r0, r3
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	4a51      	ldr	r2, [pc, #324]	@ (8001aa4 <KeyLogic+0x804>)
 800195e:	6013      	str	r3, [r2, #0]
							break;
 8001960:	e015      	b.n	800198e <KeyLogic+0x6ee>
								roundedPrice=currPrice-(currPrice%100)+100;
 8001962:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <KeyLogic+0x7fc>)
 8001964:	6819      	ldr	r1, [r3, #0]
 8001966:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <KeyLogic+0x7fc>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa0 <KeyLogic+0x800>)
 800196c:	fba3 0302 	umull	r0, r3, r3, r2
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	2064      	movs	r0, #100	@ 0x64
 8001974:	fb00 f303 	mul.w	r3, r0, r3
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	1acb      	subs	r3, r1, r3
 800197c:	3364      	adds	r3, #100	@ 0x64
 800197e:	4a49      	ldr	r2, [pc, #292]	@ (8001aa4 <KeyLogic+0x804>)
 8001980:	6013      	str	r3, [r2, #0]
							break;
 8001982:	e004      	b.n	800198e <KeyLogic+0x6ee>
							roundedPrice=currPrice;
 8001984:	4b45      	ldr	r3, [pc, #276]	@ (8001a9c <KeyLogic+0x7fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a46      	ldr	r2, [pc, #280]	@ (8001aa4 <KeyLogic+0x804>)
 800198a:	6013      	str	r3, [r2, #0]
							break;
 800198c:	bf00      	nop
					seqState = SEQ_IDLE;
 800198e:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <KeyLogic+0x80c>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001994:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <KeyLogic+0x810>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <KeyLogic+0x814>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
				break;
 80019a0:	e13d      	b.n	8001c1e <KeyLogic+0x97e>
				else if(seqState == SEQ_PRESSED_T_F4&&    //T + F4 to delete totalLitersShift
 80019a2:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <KeyLogic+0x80c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b0e      	cmp	r3, #14
 80019a8:	d112      	bne.n	80019d0 <KeyLogic+0x730>
						accumulatedNumber == password){
 80019aa:	4b42      	ldr	r3, [pc, #264]	@ (8001ab4 <KeyLogic+0x814>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <KeyLogic+0x818>)
 80019b0:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_PRESSED_T_F4&&    //T + F4 to delete totalLitersShift
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d10c      	bne.n	80019d0 <KeyLogic+0x730>
					seqState = SEQ_PRESSED_T_F4_PASSWORD;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <KeyLogic+0x80c>)
 80019b8:	220f      	movs	r2, #15
 80019ba:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80019bc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab0 <KeyLogic+0x810>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80019c2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab4 <KeyLogic+0x814>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
					totalLitersShift = 0;
 80019c8:	4b3c      	ldr	r3, [pc, #240]	@ (8001abc <KeyLogic+0x81c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e02f      	b.n	8001a30 <KeyLogic+0x790>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80019d0:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <KeyLogic+0x80c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d10f      	bne.n	80019f8 <KeyLogic+0x758>
						accumulatedNumber == password){
 80019d8:	4b36      	ldr	r3, [pc, #216]	@ (8001ab4 <KeyLogic+0x814>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <KeyLogic+0x818>)
 80019de:	681b      	ldr	r3, [r3, #0]
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d109      	bne.n	80019f8 <KeyLogic+0x758>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <KeyLogic+0x80c>)
 80019e6:	2203      	movs	r2, #3
 80019e8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 80019ea:	4b31      	ldr	r3, [pc, #196]	@ (8001ab0 <KeyLogic+0x810>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 80019f0:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <KeyLogic+0x814>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e01b      	b.n	8001a30 <KeyLogic+0x790>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 80019f8:	4b2c      	ldr	r3, [pc, #176]	@ (8001aac <KeyLogic+0x80c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d10d      	bne.n	8001a1c <KeyLogic+0x77c>
					password = accumulatedNumber;
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <KeyLogic+0x814>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab8 <KeyLogic+0x818>)
 8001a06:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8001a08:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <KeyLogic+0x80c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001a0e:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <KeyLogic+0x810>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001a14:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <KeyLogic+0x814>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
				break;
 8001a1a:	e100      	b.n	8001c1e <KeyLogic+0x97e>
					seqState = SEQ_IDLE;
 8001a1c:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <KeyLogic+0x80c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001a22:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <KeyLogic+0x810>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <KeyLogic+0x814>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
				break;
 8001a2e:	e0f6      	b.n	8001c1e <KeyLogic+0x97e>
 8001a30:	e0f5      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8001a32:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <KeyLogic+0x80c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <KeyLogic+0x7a2>
					seqState = SEQ_PRESSED_P;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <KeyLogic+0x80c>)
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001a40:	e0ed      	b.n	8001c1e <KeyLogic+0x97e>
					seqState = SEQ_IDLE;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <KeyLogic+0x80c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <KeyLogic+0x810>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <KeyLogic+0x814>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
				break;
 8001a54:	e0e3      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <KeyLogic+0x80c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <KeyLogic+0x7c6>
					seqState = SEQ_PRESSED_T;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <KeyLogic+0x80c>)
 8001a60:	220a      	movs	r2, #10
 8001a62:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001a64:	e0db      	b.n	8001c1e <KeyLogic+0x97e>
					seqState = SEQ_IDLE;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <KeyLogic+0x80c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <KeyLogic+0x810>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <KeyLogic+0x814>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
				break;
 8001a78:	e0d1      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_IDLE) {
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <KeyLogic+0x80c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <KeyLogic+0x7ea>
					seqState = SEQ_PRESSED_$;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <KeyLogic+0x80c>)
 8001a84:	2211      	movs	r2, #17
 8001a86:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001a88:	e0c9      	b.n	8001c1e <KeyLogic+0x97e>
				}else if (seqState == SEQ_PRESSED_T) {
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <KeyLogic+0x80c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b0a      	cmp	r3, #10
 8001a90:	d116      	bne.n	8001ac0 <KeyLogic+0x820>
					seqState = SEQ_PRESSED_T_$;
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <KeyLogic+0x80c>)
 8001a94:	220c      	movs	r2, #12
 8001a96:	701a      	strb	r2, [r3, #0]
				break;
 8001a98:	e0c1      	b.n	8001c1e <KeyLogic+0x97e>
 8001a9a:	bf00      	nop
 8001a9c:	2000004c 	.word	0x2000004c
 8001aa0:	51eb851f 	.word	0x51eb851f
 8001aa4:	20000050 	.word	0x20000050
 8001aa8:	200000ec 	.word	0x200000ec
 8001aac:	200000ee 	.word	0x200000ee
 8001ab0:	200000e0 	.word	0x200000e0
 8001ab4:	200000dc 	.word	0x200000dc
 8001ab8:	20000040 	.word	0x20000040
 8001abc:	20000048 	.word	0x20000048
					seqState = SEQ_IDLE;
 8001ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c2c <KeyLogic+0x98c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <KeyLogic+0x990>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001acc:	4b59      	ldr	r3, [pc, #356]	@ (8001c34 <KeyLogic+0x994>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
				break;
 8001ad2:	e0a4      	b.n	8001c1e <KeyLogic+0x97e>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_IDLE) {
 8001ad4:	4b55      	ldr	r3, [pc, #340]	@ (8001c2c <KeyLogic+0x98c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <KeyLogic+0x844>
					seqState = SEQ_PRESSED_L;
 8001adc:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <KeyLogic+0x98c>)
 8001ade:	2210      	movs	r2, #16
 8001ae0:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8001ae2:	e09c      	b.n	8001c1e <KeyLogic+0x97e>
				} else if (seqState == SEQ_PRESSED_T) {
 8001ae4:	4b51      	ldr	r3, [pc, #324]	@ (8001c2c <KeyLogic+0x98c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b0a      	cmp	r3, #10
 8001aea:	d103      	bne.n	8001af4 <KeyLogic+0x854>
					seqState = SEQ_PRESSED_T_L;
 8001aec:	4b4f      	ldr	r3, [pc, #316]	@ (8001c2c <KeyLogic+0x98c>)
 8001aee:	220b      	movs	r2, #11
 8001af0:	701a      	strb	r2, [r3, #0]
				break;
 8001af2:	e094      	b.n	8001c1e <KeyLogic+0x97e>
					seqState = SEQ_IDLE;
 8001af4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c2c <KeyLogic+0x98c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001afa:	4b4d      	ldr	r3, [pc, #308]	@ (8001c30 <KeyLogic+0x990>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001b00:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <KeyLogic+0x994>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
				break;
 8001b06:	e08a      	b.n	8001c1e <KeyLogic+0x97e>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8001b08:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <KeyLogic+0x998>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b0e:	d97a      	bls.n	8001c06 <KeyLogic+0x966>
 8001b10:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <KeyLogic+0x998>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b39      	cmp	r3, #57	@ 0x39
 8001b16:	d876      	bhi.n	8001c06 <KeyLogic+0x966>
					if(seqState==SEQ_PRESSED_P){
 8001b18:	4b44      	ldr	r3, [pc, #272]	@ (8001c2c <KeyLogic+0x98c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d10c      	bne.n	8001b3a <KeyLogic+0x89a>
						seqState=SEQ_PRESSED_P_NUM;
 8001b20:	4b42      	ldr	r3, [pc, #264]	@ (8001c2c <KeyLogic+0x98c>)
 8001b22:	2208      	movs	r2, #8
 8001b24:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8001b26:	4b44      	ldr	r3, [pc, #272]	@ (8001c38 <KeyLogic+0x998>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3b30      	subs	r3, #48	@ 0x30
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <KeyLogic+0x994>)
 8001b30:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001b32:	4b3f      	ldr	r3, [pc, #252]	@ (8001c30 <KeyLogic+0x990>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001b38:	e06f      	b.n	8001c1a <KeyLogic+0x97a>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c2c <KeyLogic+0x98c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d01f      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <KeyLogic+0x98c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d01b      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8001b4a:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <KeyLogic+0x98c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d017      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_PRESSED_T_F4||
 8001b52:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <KeyLogic+0x98c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8001b56:	2b0e      	cmp	r3, #14
 8001b58:	d013      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8001b5a:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <KeyLogic+0x98c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_T_F4||
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d00f      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8001b62:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <KeyLogic+0x98c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d00b      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_NUMBER ||
 8001b6a:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <KeyLogic+0x98c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d007      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_PRESSED_$||
 8001b72:	4b2e      	ldr	r3, [pc, #184]	@ (8001c2c <KeyLogic+0x98c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_NUMBER ||
 8001b76:	2b11      	cmp	r3, #17
 8001b78:	d003      	beq.n	8001b82 <KeyLogic+0x8e2>
							seqState == SEQ_PRESSED_L
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <KeyLogic+0x98c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_$||
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d117      	bne.n	8001bb2 <KeyLogic+0x912>
							) {
						if (numberOfDigits < 6) {
 8001b82:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <KeyLogic+0x990>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d83c      	bhi.n	8001c04 <KeyLogic+0x964>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <KeyLogic+0x994>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <KeyLogic+0x998>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b30      	subs	r3, #48	@ 0x30
 8001ba0:	4a24      	ldr	r2, [pc, #144]	@ (8001c34 <KeyLogic+0x994>)
 8001ba2:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <KeyLogic+0x990>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <KeyLogic+0x990>)
 8001bae:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8001bb0:	e028      	b.n	8001c04 <KeyLogic+0x964>
						}
					}else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <KeyLogic+0x98c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b07      	cmp	r3, #7
 8001bb8:	d117      	bne.n	8001bea <KeyLogic+0x94a>
						if (numberOfDigits < 1) {
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <KeyLogic+0x990>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d12b      	bne.n	8001c1a <KeyLogic+0x97a>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <KeyLogic+0x994>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <KeyLogic+0x998>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b30      	subs	r3, #48	@ 0x30
 8001bd8:	4a16      	ldr	r2, [pc, #88]	@ (8001c34 <KeyLogic+0x994>)
 8001bda:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <KeyLogic+0x990>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <KeyLogic+0x990>)
 8001be6:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001be8:	e017      	b.n	8001c1a <KeyLogic+0x97a>
						}
					}else{
						seqState = SEQ_NUMBER;
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <KeyLogic+0x98c>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <KeyLogic+0x998>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3b30      	subs	r3, #48	@ 0x30
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <KeyLogic+0x994>)
 8001bfa:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <KeyLogic+0x990>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001c02:	e00a      	b.n	8001c1a <KeyLogic+0x97a>
 8001c04:	e009      	b.n	8001c1a <KeyLogic+0x97a>
					}
				}else{
					seqState = SEQ_IDLE;
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <KeyLogic+0x98c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <KeyLogic+0x990>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8001c12:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <KeyLogic+0x994>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
				}
				break;
 8001c18:	e000      	b.n	8001c1c <KeyLogic+0x97c>
					if(seqState==SEQ_PRESSED_P){
 8001c1a:	bf00      	nop
				break;
 8001c1c:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <KeyLogic+0x998>)
 8001c20:	22ff      	movs	r2, #255	@ 0xff
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200000ee 	.word	0x200000ee
 8001c30:	200000e0 	.word	0x200000e0
 8001c34:	200000dc 	.word	0x200000dc
 8001c38:	20000000 	.word	0x20000000

08001c3c <KeyLogic_Action>:


void KeyLogic_Action() {
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08f      	sub	sp, #60	@ 0x3c
 8001c40:	af02      	add	r7, sp, #8
    char buffer[7];
    switch (seqState) {
 8001c42:	4b9d      	ldr	r3, [pc, #628]	@ (8001eb8 <KeyLogic_Action+0x27c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b11      	cmp	r3, #17
 8001c48:	f200 8300 	bhi.w	800224c <KeyLogic_Action+0x610>
 8001c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c54 <KeyLogic_Action+0x18>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c9d 	.word	0x08001c9d
 8001c58:	08001cc9 	.word	0x08001cc9
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001d2d 	.word	0x08001d2d
 8001c64:	080020ed 	.word	0x080020ed
 8001c68:	08001d6b 	.word	0x08001d6b
 8001c6c:	08001d91 	.word	0x08001d91
 8001c70:	08001db7 	.word	0x08001db7
 8001c74:	08001dd7 	.word	0x08001dd7
 8001c78:	08001dfd 	.word	0x08001dfd
 8001c7c:	08001e23 	.word	0x08001e23
 8001c80:	08001f9f 	.word	0x08001f9f
 8001c84:	08001e49 	.word	0x08001e49
 8001c88:	08002081 	.word	0x08002081
 8001c8c:	080020a7 	.word	0x080020a7
 8001c90:	080020cd 	.word	0x080020cd
 8001c94:	08002161 	.word	0x08002161
 8001c98:	0800212d 	.word	0x0800212d
        case SEQ_IDLE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4a87      	ldr	r2, [pc, #540]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001ca0:	2107      	movs	r1, #7
 8001ca2:	4887      	ldr	r0, [pc, #540]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001ca4:	f005 fbb8 	bl	8007418 <sniprintf>
        	snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", orderPrice);
 8001ca8:	4b86      	ldr	r3, [pc, #536]	@ (8001ec4 <KeyLogic_Action+0x288>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a86      	ldr	r2, [pc, #536]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001cae:	2107      	movs	r1, #7
 8001cb0:	4886      	ldr	r0, [pc, #536]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001cb2:	f005 fbb1 	bl	8007418 <sniprintf>
        	formatFloat(orderLiter, SevenSegBuffer[2]);
 8001cb6:	4b86      	ldr	r3, [pc, #536]	@ (8001ed0 <KeyLogic_Action+0x294>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	4885      	ldr	r0, [pc, #532]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc2:	f7ff fa91 	bl	80011e8 <formatFloat>
            break;
 8001cc6:	e2d9      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8001cc8:	4a83      	ldr	r2, [pc, #524]	@ (8001ed8 <KeyLogic_Action+0x29c>)
 8001cca:	2107      	movs	r1, #7
 8001ccc:	487c      	ldr	r0, [pc, #496]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001cce:	f005 fba3 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", roundedPrice);
 8001cd2:	4b82      	ldr	r3, [pc, #520]	@ (8001edc <KeyLogic_Action+0x2a0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001cd8:	2107      	movs	r1, #7
 8001cda:	487c      	ldr	r0, [pc, #496]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001cdc:	f005 fb9c 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4a76      	ldr	r2, [pc, #472]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	487b      	ldr	r0, [pc, #492]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001ce8:	f005 fb96 	bl	8007418 <sniprintf>
			break;
 8001cec:	e2c6      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001cee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <KeyLogic_Action+0x2a4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f107 0020 	add.w	r0, r7, #32
 8001cf6:	4a74      	ldr	r2, [pc, #464]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001cf8:	2107      	movs	r1, #7
 8001cfa:	f005 fb8d 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4a78      	ldr	r2, [pc, #480]	@ (8001ee4 <KeyLogic_Action+0x2a8>)
 8001d04:	2107      	movs	r1, #7
 8001d06:	486e      	ldr	r0, [pc, #440]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001d08:	f005 fb86 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8001d0c:	4a76      	ldr	r2, [pc, #472]	@ (8001ee8 <KeyLogic_Action+0x2ac>)
 8001d0e:	2107      	movs	r1, #7
 8001d10:	486e      	ldr	r0, [pc, #440]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001d12:	f005 fb81 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001d16:	2300      	movs	r3, #0
 8001d18:	4a68      	ldr	r2, [pc, #416]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001d1a:	2107      	movs	r1, #7
 8001d1c:	486d      	ldr	r0, [pc, #436]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001d1e:	f005 fb7b 	bl	8007418 <sniprintf>
            LEDPointFlag = -1;
 8001d22:	4b72      	ldr	r3, [pc, #456]	@ (8001eec <KeyLogic_Action+0x2b0>)
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	601a      	str	r2, [r3, #0]
            break;
 8001d2a:	e2a7      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <KeyLogic_Action+0x2a4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f107 0020 	add.w	r0, r7, #32
 8001d34:	4a64      	ldr	r2, [pc, #400]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001d36:	2107      	movs	r1, #7
 8001d38:	f005 fb6e 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4a68      	ldr	r2, [pc, #416]	@ (8001ee4 <KeyLogic_Action+0x2a8>)
 8001d42:	2107      	movs	r1, #7
 8001d44:	485e      	ldr	r0, [pc, #376]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001d46:	f005 fb67 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	4a5b      	ldr	r2, [pc, #364]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001d4e:	2107      	movs	r1, #7
 8001d50:	485e      	ldr	r0, [pc, #376]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001d52:	f005 fb61 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8001d56:	4a66      	ldr	r2, [pc, #408]	@ (8001ef0 <KeyLogic_Action+0x2b4>)
 8001d58:	2107      	movs	r1, #7
 8001d5a:	485e      	ldr	r0, [pc, #376]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001d5c:	f005 fb5c 	bl	8007418 <sniprintf>
            LEDPointFlag = -1;
 8001d60:	4b62      	ldr	r3, [pc, #392]	@ (8001eec <KeyLogic_Action+0x2b0>)
 8001d62:	f04f 32ff 	mov.w	r2, #4294967295
 8001d66:	601a      	str	r2, [r3, #0]
            break;
 8001d68:	e288      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee0 <KeyLogic_Action+0x2a4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a56      	ldr	r2, [pc, #344]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001d70:	2107      	movs	r1, #7
 8001d72:	4853      	ldr	r0, [pc, #332]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001d74:	f005 fb50 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4a50      	ldr	r2, [pc, #320]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001d7c:	2107      	movs	r1, #7
 8001d7e:	4853      	ldr	r0, [pc, #332]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001d80:	f005 fb4a 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8001d84:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef4 <KeyLogic_Action+0x2b8>)
 8001d86:	2107      	movs	r1, #7
 8001d88:	4852      	ldr	r0, [pc, #328]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001d8a:	f005 fb45 	bl	8007418 <sniprintf>
			break;
 8001d8e:	e275      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001d90:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <KeyLogic_Action+0x2a4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001d96:	2107      	movs	r1, #7
 8001d98:	4849      	ldr	r0, [pc, #292]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001d9a:	f005 fb3d 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	4a46      	ldr	r2, [pc, #280]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001da2:	2107      	movs	r1, #7
 8001da4:	4849      	ldr	r0, [pc, #292]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001da6:	f005 fb37 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 8001daa:	4a53      	ldr	r2, [pc, #332]	@ (8001ef8 <KeyLogic_Action+0x2bc>)
 8001dac:	2107      	movs	r1, #7
 8001dae:	4849      	ldr	r0, [pc, #292]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001db0:	f005 fb32 	bl	8007418 <sniprintf>
			break;
 8001db4:	e262      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 8001db6:	4a51      	ldr	r2, [pc, #324]	@ (8001efc <KeyLogic_Action+0x2c0>)
 8001db8:	2107      	movs	r1, #7
 8001dba:	4841      	ldr	r0, [pc, #260]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001dbc:	f005 fb2c 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 8001dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f00 <KeyLogic_Action+0x2c4>)
 8001dc2:	2107      	movs	r1, #7
 8001dc4:	4841      	ldr	r0, [pc, #260]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001dc6:	f005 fb27 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 8001dca:	4a4e      	ldr	r2, [pc, #312]	@ (8001f04 <KeyLogic_Action+0x2c8>)
 8001dcc:	2107      	movs	r1, #7
 8001dce:	4841      	ldr	r0, [pc, #260]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001dd0:	f005 fb22 	bl	8007418 <sniprintf>
			break;
 8001dd4:	e252      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001dd6:	4b42      	ldr	r3, [pc, #264]	@ (8001ee0 <KeyLogic_Action+0x2a4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001ddc:	2107      	movs	r1, #7
 8001dde:	4838      	ldr	r0, [pc, #224]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001de0:	f005 fb1a 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001de4:	2300      	movs	r3, #0
 8001de6:	4a35      	ldr	r2, [pc, #212]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001de8:	2107      	movs	r1, #7
 8001dea:	4838      	ldr	r0, [pc, #224]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001dec:	f005 fb14 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8001df0:	4a45      	ldr	r2, [pc, #276]	@ (8001f08 <KeyLogic_Action+0x2cc>)
 8001df2:	2107      	movs	r1, #7
 8001df4:	4837      	ldr	r0, [pc, #220]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001df6:	f005 fb0f 	bl	8007418 <sniprintf>
            break;
 8001dfa:	e23f      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001dfc:	4b38      	ldr	r3, [pc, #224]	@ (8001ee0 <KeyLogic_Action+0x2a4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a31      	ldr	r2, [pc, #196]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001e02:	2107      	movs	r1, #7
 8001e04:	482e      	ldr	r0, [pc, #184]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001e06:	f005 fb07 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001e0e:	2107      	movs	r1, #7
 8001e10:	482e      	ldr	r0, [pc, #184]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001e12:	f005 fb01 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001e16:	4a30      	ldr	r2, [pc, #192]	@ (8001ed8 <KeyLogic_Action+0x29c>)
 8001e18:	2107      	movs	r1, #7
 8001e1a:	482e      	ldr	r0, [pc, #184]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001e1c:	f005 fafc 	bl	8007418 <sniprintf>
            break;
 8001e20:	e22c      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001e22:	2300      	movs	r3, #0
 8001e24:	4a25      	ldr	r2, [pc, #148]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001e26:	2107      	movs	r1, #7
 8001e28:	4825      	ldr	r0, [pc, #148]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001e2a:	f005 faf5 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	4a22      	ldr	r2, [pc, #136]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001e32:	2107      	movs	r1, #7
 8001e34:	4825      	ldr	r0, [pc, #148]	@ (8001ecc <KeyLogic_Action+0x290>)
 8001e36:	f005 faef 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8001e3a:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <KeyLogic_Action+0x2d0>)
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ebc <KeyLogic_Action+0x280>)
 8001e3e:	2107      	movs	r1, #7
 8001e40:	4824      	ldr	r0, [pc, #144]	@ (8001ed4 <KeyLogic_Action+0x298>)
 8001e42:	f005 fae9 	bl	8007418 <sniprintf>
            break;
 8001e46:	e219      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <KeyLogic_Action+0x2d4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a31      	ldr	r2, [pc, #196]	@ (8001f14 <KeyLogic_Action+0x2d8>)
 8001e4e:	4932      	ldr	r1, [pc, #200]	@ (8001f18 <KeyLogic_Action+0x2dc>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f991 	bl	8001178 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8001e56:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <KeyLogic_Action+0x2dc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f107 0018 	add.w	r0, r7, #24
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <KeyLogic_Action+0x28c>)
 8001e60:	2107      	movs	r1, #7
 8001e62:	f005 fad9 	bl	8007418 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <KeyLogic_Action+0x2dc>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <KeyLogic_Action+0x2e0>)
 8001e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e70:	0b5b      	lsrs	r3, r3, #13
 8001e72:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001e76:	fb01 f303 	mul.w	r3, r1, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f107 0010 	add.w	r0, r7, #16
 8001e80:	4a27      	ldr	r2, [pc, #156]	@ (8001f20 <KeyLogic_Action+0x2e4>)
 8001e82:	2108      	movs	r1, #8
 8001e84:	f005 fac8 	bl	8007418 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8c:	e052      	b.n	8001f34 <KeyLogic_Action+0x2f8>
				if (i < strlen(combinedStrShift)) {
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe f9a4 	bl	80001e0 <strlen>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d941      	bls.n	8001f24 <KeyLogic_Action+0x2e8>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8001ea0:	f107 0210 	add.w	r2, r7, #16
 8001ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	7819      	ldrb	r1, [r3, #0]
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <KeyLogic_Action+0x284>)
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eae:	4413      	add	r3, r2
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e03b      	b.n	8001f2e <KeyLogic_Action+0x2f2>
 8001eb6:	bf00      	nop
 8001eb8:	200000ee 	.word	0x200000ee
 8001ebc:	08007e54 	.word	0x08007e54
 8001ec0:	20000028 	.word	0x20000028
 8001ec4:	200001cc 	.word	0x200001cc
 8001ec8:	08007e5c 	.word	0x08007e5c
 8001ecc:	2000002f 	.word	0x2000002f
 8001ed0:	200001d0 	.word	0x200001d0
 8001ed4:	20000036 	.word	0x20000036
 8001ed8:	08007e64 	.word	0x08007e64
 8001edc:	20000050 	.word	0x20000050
 8001ee0:	200000dc 	.word	0x200000dc
 8001ee4:	08007e6c 	.word	0x08007e6c
 8001ee8:	08007e70 	.word	0x08007e70
 8001eec:	20000054 	.word	0x20000054
 8001ef0:	08007e78 	.word	0x08007e78
 8001ef4:	08007e80 	.word	0x08007e80
 8001ef8:	08007e88 	.word	0x08007e88
 8001efc:	08007e90 	.word	0x08007e90
 8001f00:	08007e98 	.word	0x08007e98
 8001f04:	08007ea0 	.word	0x08007ea0
 8001f08:	08007ea8 	.word	0x08007ea8
 8001f0c:	000f423f 	.word	0x000f423f
 8001f10:	20000048 	.word	0x20000048
 8001f14:	200000e8 	.word	0x200000e8
 8001f18:	200000e4 	.word	0x200000e4
 8001f1c:	d1b71759 	.word	0xd1b71759
 8001f20:	08007eb0 	.word	0x08007eb0
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001f24:	4aad      	ldr	r2, [pc, #692]	@ (80021dc <KeyLogic_Action+0x5a0>)
 8001f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f28:	4413      	add	r3, r2
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8001f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f30:	3301      	adds	r3, #1
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	dda9      	ble.n	8001e8e <KeyLogic_Action+0x252>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001f3a:	4ba9      	ldr	r3, [pc, #676]	@ (80021e0 <KeyLogic_Action+0x5a4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4aa9      	ldr	r2, [pc, #676]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 8001f40:	2107      	movs	r1, #7
 8001f42:	48a9      	ldr	r0, [pc, #676]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 8001f44:	f005 fa68 	bl	8007418 <sniprintf>

			numBlinkRow =1;
 8001f48:	4ba8      	ldr	r3, [pc, #672]	@ (80021ec <KeyLogic_Action+0x5b0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "SHIFT "); // Set blink text
 8001f4e:	4aa8      	ldr	r2, [pc, #672]	@ (80021f0 <KeyLogic_Action+0x5b4>)
 8001f50:	2107      	movs	r1, #7
 8001f52:	48a8      	ldr	r0, [pc, #672]	@ (80021f4 <KeyLogic_Action+0x5b8>)
 8001f54:	f005 fa60 	bl	8007418 <sniprintf>
			if (xBlinkTimer == NULL) {
 8001f58:	4ba7      	ldr	r3, [pc, #668]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8188 	bne.w	8002272 <KeyLogic_Action+0x636>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 8001f62:	4ba6      	ldr	r3, [pc, #664]	@ (80021fc <KeyLogic_Action+0x5c0>)
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2300      	movs	r3, #0
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f6e:	48a4      	ldr	r0, [pc, #656]	@ (8002200 <KeyLogic_Action+0x5c4>)
 8001f70:	f004 faa0 	bl	80064b4 <xTimerCreate>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4aa0      	ldr	r2, [pc, #640]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 8001f78:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8001f7a:	4b9f      	ldr	r3, [pc, #636]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8177 	beq.w	8002272 <KeyLogic_Action+0x636>
					xTimerStart(xBlinkTimer, 0);
 8001f84:	4b9c      	ldr	r3, [pc, #624]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 8001f86:	681c      	ldr	r4, [r3, #0]
 8001f88:	f003 fe20 	bl	8005bcc <xTaskGetTickCount>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2101      	movs	r1, #1
 8001f96:	4620      	mov	r0, r4
 8001f98:	f004 faea 	bl	8006570 <xTimerGenericCommand>
				}
			}

            break;
 8001f9c:	e169      	b.n	8002272 <KeyLogic_Action+0x636>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8001f9e:	4b99      	ldr	r3, [pc, #612]	@ (8002204 <KeyLogic_Action+0x5c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a8f      	ldr	r2, [pc, #572]	@ (80021e0 <KeyLogic_Action+0x5a4>)
 8001fa4:	4998      	ldr	r1, [pc, #608]	@ (8002208 <KeyLogic_Action+0x5cc>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f898 	bl	80010dc <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8001fac:	4b96      	ldr	r3, [pc, #600]	@ (8002208 <KeyLogic_Action+0x5cc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f107 0008 	add.w	r0, r7, #8
 8001fb4:	4a8b      	ldr	r2, [pc, #556]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 8001fb6:	2107      	movs	r1, #7
 8001fb8:	f005 fa2e 	bl	8007418 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8001fbc:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <KeyLogic_Action+0x5cc>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b92      	ldr	r3, [pc, #584]	@ (800220c <KeyLogic_Action+0x5d0>)
 8001fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc6:	0b5b      	lsrs	r3, r3, #13
 8001fc8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	4638      	mov	r0, r7
 8001fd4:	4a8e      	ldr	r2, [pc, #568]	@ (8002210 <KeyLogic_Action+0x5d4>)
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	f005 fa1e 	bl	8007418 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe0:	e019      	b.n	8002016 <KeyLogic_Action+0x3da>
                if (i < strlen(combinedStr)) {
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f8fb 	bl	80001e0 <strlen>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d909      	bls.n	8002006 <KeyLogic_Action+0x3ca>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8001ff2:	463a      	mov	r2, r7
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	4413      	add	r3, r2
 8001ff8:	7819      	ldrb	r1, [r3, #0]
 8001ffa:	4a78      	ldr	r2, [pc, #480]	@ (80021dc <KeyLogic_Action+0x5a0>)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffe:	4413      	add	r3, r2
 8002000:	460a      	mov	r2, r1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e004      	b.n	8002010 <KeyLogic_Action+0x3d4>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8002006:	4a75      	ldr	r2, [pc, #468]	@ (80021dc <KeyLogic_Action+0x5a0>)
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	4413      	add	r3, r2
 800200c:	2220      	movs	r2, #32
 800200e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8002010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002012:	3301      	adds	r3, #1
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002018:	2b05      	cmp	r3, #5
 800201a:	dde2      	ble.n	8001fe2 <KeyLogic_Action+0x3a6>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 800201c:	4b70      	ldr	r3, [pc, #448]	@ (80021e0 <KeyLogic_Action+0x5a4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a70      	ldr	r2, [pc, #448]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 8002022:	2107      	movs	r1, #7
 8002024:	4870      	ldr	r0, [pc, #448]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 8002026:	f005 f9f7 	bl	8007418 <sniprintf>

            numBlinkRow =1;
 800202a:	4b70      	ldr	r3, [pc, #448]	@ (80021ec <KeyLogic_Action+0x5b0>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "TOTAL "); // Set blink text
 8002030:	4a78      	ldr	r2, [pc, #480]	@ (8002214 <KeyLogic_Action+0x5d8>)
 8002032:	2107      	movs	r1, #7
 8002034:	486f      	ldr	r0, [pc, #444]	@ (80021f4 <KeyLogic_Action+0x5b8>)
 8002036:	f005 f9ef 	bl	8007418 <sniprintf>
			if (xBlinkTimer == NULL) {
 800203a:	4b6f      	ldr	r3, [pc, #444]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 8119 	bne.w	8002276 <KeyLogic_Action+0x63a>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 8002044:	4b6d      	ldr	r3, [pc, #436]	@ (80021fc <KeyLogic_Action+0x5c0>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002050:	486b      	ldr	r0, [pc, #428]	@ (8002200 <KeyLogic_Action+0x5c4>)
 8002052:	f004 fa2f 	bl	80064b4 <xTimerCreate>
 8002056:	4603      	mov	r3, r0
 8002058:	4a67      	ldr	r2, [pc, #412]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 800205a:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 800205c:	4b66      	ldr	r3, [pc, #408]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8108 	beq.w	8002276 <KeyLogic_Action+0x63a>
					xTimerStart(xBlinkTimer, 0);
 8002066:	4b64      	ldr	r3, [pc, #400]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 8002068:	681c      	ldr	r4, [r3, #0]
 800206a:	f003 fdaf 	bl	8005bcc <xTaskGetTickCount>
 800206e:	4602      	mov	r2, r0
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	2101      	movs	r1, #1
 8002078:	4620      	mov	r0, r4
 800207a:	f004 fa79 	bl	8006570 <xTimerGenericCommand>
				}
			}



            break;
 800207e:	e0fa      	b.n	8002276 <KeyLogic_Action+0x63a>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <KeyLogic_Action+0x5dc>)
 8002082:	4a66      	ldr	r2, [pc, #408]	@ (800221c <KeyLogic_Action+0x5e0>)
 8002084:	2107      	movs	r1, #7
 8002086:	4855      	ldr	r0, [pc, #340]	@ (80021dc <KeyLogic_Action+0x5a0>)
 8002088:	f005 f9c6 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800208c:	2300      	movs	r3, #0
 800208e:	4a63      	ldr	r2, [pc, #396]	@ (800221c <KeyLogic_Action+0x5e0>)
 8002090:	2107      	movs	r1, #7
 8002092:	4855      	ldr	r0, [pc, #340]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 8002094:	f005 f9c0 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8002098:	2300      	movs	r3, #0
 800209a:	4a60      	ldr	r2, [pc, #384]	@ (800221c <KeyLogic_Action+0x5e0>)
 800209c:	2107      	movs	r1, #7
 800209e:	4860      	ldr	r0, [pc, #384]	@ (8002220 <KeyLogic_Action+0x5e4>)
 80020a0:	f005 f9ba 	bl	8007418 <sniprintf>
            break;
 80020a4:	e0ea      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T_F4:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 80020a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002224 <KeyLogic_Action+0x5e8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a4e      	ldr	r2, [pc, #312]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 80020ac:	2107      	movs	r1, #7
 80020ae:	484b      	ldr	r0, [pc, #300]	@ (80021dc <KeyLogic_Action+0x5a0>)
 80020b0:	f005 f9b2 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80020b4:	2300      	movs	r3, #0
 80020b6:	4a59      	ldr	r2, [pc, #356]	@ (800221c <KeyLogic_Action+0x5e0>)
 80020b8:	2107      	movs	r1, #7
 80020ba:	484b      	ldr	r0, [pc, #300]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 80020bc:	f005 f9ac 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DELETE");
 80020c0:	4a59      	ldr	r2, [pc, #356]	@ (8002228 <KeyLogic_Action+0x5ec>)
 80020c2:	2107      	movs	r1, #7
 80020c4:	4856      	ldr	r0, [pc, #344]	@ (8002220 <KeyLogic_Action+0x5e4>)
 80020c6:	f005 f9a7 	bl	8007418 <sniprintf>
            break;
 80020ca:	e0d7      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T_F4_PASSWORD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), " ");
 80020cc:	4a57      	ldr	r2, [pc, #348]	@ (800222c <KeyLogic_Action+0x5f0>)
 80020ce:	2107      	movs	r1, #7
 80020d0:	4842      	ldr	r0, [pc, #264]	@ (80021dc <KeyLogic_Action+0x5a0>)
 80020d2:	f005 f9a1 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 80020d6:	4a55      	ldr	r2, [pc, #340]	@ (800222c <KeyLogic_Action+0x5f0>)
 80020d8:	2107      	movs	r1, #7
 80020da:	4843      	ldr	r0, [pc, #268]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 80020dc:	f005 f99c 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DONE ");
 80020e0:	4a53      	ldr	r2, [pc, #332]	@ (8002230 <KeyLogic_Action+0x5f4>)
 80020e2:	2107      	movs	r1, #7
 80020e4:	484e      	ldr	r0, [pc, #312]	@ (8002220 <KeyLogic_Action+0x5e4>)
 80020e6:	f005 f997 	bl	8007418 <sniprintf>
			break;
 80020ea:	e0c7      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 80020ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002224 <KeyLogic_Action+0x5e8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f107 0020 	add.w	r0, r7, #32
 80020f4:	4a3b      	ldr	r2, [pc, #236]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 80020f6:	2107      	movs	r1, #7
 80020f8:	f005 f98e 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	4a4c      	ldr	r2, [pc, #304]	@ (8002234 <KeyLogic_Action+0x5f8>)
 8002102:	2107      	movs	r1, #7
 8002104:	4835      	ldr	r0, [pc, #212]	@ (80021dc <KeyLogic_Action+0x5a0>)
 8002106:	f005 f987 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800210a:	2300      	movs	r3, #0
 800210c:	4a43      	ldr	r2, [pc, #268]	@ (800221c <KeyLogic_Action+0x5e0>)
 800210e:	2107      	movs	r1, #7
 8002110:	4835      	ldr	r0, [pc, #212]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 8002112:	f005 f981 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8002116:	2300      	movs	r3, #0
 8002118:	4a40      	ldr	r2, [pc, #256]	@ (800221c <KeyLogic_Action+0x5e0>)
 800211a:	2107      	movs	r1, #7
 800211c:	4840      	ldr	r0, [pc, #256]	@ (8002220 <KeyLogic_Action+0x5e4>)
 800211e:	f005 f97b 	bl	8007418 <sniprintf>
			LEDPointFlag = -1;
 8002122:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <KeyLogic_Action+0x5fc>)
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	601a      	str	r2, [r3, #0]
			break;
 800212a:	e0a7      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_$:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 800212c:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <KeyLogic_Action+0x5e8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f107 0020 	add.w	r0, r7, #32
 8002134:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 8002136:	2107      	movs	r1, #7
 8002138:	f005 f96e 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4a3c      	ldr	r2, [pc, #240]	@ (8002234 <KeyLogic_Action+0x5f8>)
 8002142:	2107      	movs	r1, #7
 8002144:	4825      	ldr	r0, [pc, #148]	@ (80021dc <KeyLogic_Action+0x5a0>)
 8002146:	f005 f967 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
 800214a:	4a3c      	ldr	r2, [pc, #240]	@ (800223c <KeyLogic_Action+0x600>)
 800214c:	2107      	movs	r1, #7
 800214e:	4826      	ldr	r0, [pc, #152]	@ (80021e8 <KeyLogic_Action+0x5ac>)
 8002150:	f005 f962 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <KeyLogic_Action+0x604>)
 8002156:	2107      	movs	r1, #7
 8002158:	4831      	ldr	r0, [pc, #196]	@ (8002220 <KeyLogic_Action+0x5e4>)
 800215a:	f005 f95d 	bl	8007418 <sniprintf>
			break;
 800215e:	e08d      	b.n	800227c <KeyLogic_Action+0x640>
        case SEQ_PRESSED_L:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8002160:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <KeyLogic_Action+0x5e8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f107 0020 	add.w	r0, r7, #32
 8002168:	4a1e      	ldr	r2, [pc, #120]	@ (80021e4 <KeyLogic_Action+0x5a8>)
 800216a:	2107      	movs	r1, #7
 800216c:	f005 f954 	bl	8007418 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <KeyLogic_Action+0x5f8>)
 8002176:	2107      	movs	r1, #7
 8002178:	4818      	ldr	r0, [pc, #96]	@ (80021dc <KeyLogic_Action+0x5a0>)
 800217a:	f005 f94d 	bl	8007418 <sniprintf>

			numBlinkRow =2;
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <KeyLogic_Action+0x5b0>)
 8002180:	2202      	movs	r2, #2
 8002182:	601a      	str	r2, [r3, #0]
			snprintf(blinkText1, sizeof(blinkText1), "SET   "); // Set blink text
 8002184:	4a2d      	ldr	r2, [pc, #180]	@ (800223c <KeyLogic_Action+0x600>)
 8002186:	2107      	movs	r1, #7
 8002188:	482e      	ldr	r0, [pc, #184]	@ (8002244 <KeyLogic_Action+0x608>)
 800218a:	f005 f945 	bl	8007418 <sniprintf>
			snprintf(blinkText, sizeof(blinkText), "LIT   ");
 800218e:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <KeyLogic_Action+0x60c>)
 8002190:	2107      	movs	r1, #7
 8002192:	4818      	ldr	r0, [pc, #96]	@ (80021f4 <KeyLogic_Action+0x5b8>)
 8002194:	f005 f940 	bl	8007418 <sniprintf>
			if (xBlinkTimer == NULL) {
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d16c      	bne.n	800227a <KeyLogic_Action+0x63e>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 80021a0:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <KeyLogic_Action+0x5c0>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2300      	movs	r3, #0
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80021ac:	4814      	ldr	r0, [pc, #80]	@ (8002200 <KeyLogic_Action+0x5c4>)
 80021ae:	f004 f981 	bl	80064b4 <xTimerCreate>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a10      	ldr	r2, [pc, #64]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 80021b6:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05c      	beq.n	800227a <KeyLogic_Action+0x63e>
					xTimerStart(xBlinkTimer, 0);
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <KeyLogic_Action+0x5bc>)
 80021c2:	681c      	ldr	r4, [r3, #0]
 80021c4:	f003 fd02 	bl	8005bcc <xTaskGetTickCount>
 80021c8:	4602      	mov	r2, r0
 80021ca:	2300      	movs	r3, #0
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2300      	movs	r3, #0
 80021d0:	2101      	movs	r1, #1
 80021d2:	4620      	mov	r0, r4
 80021d4:	f004 f9cc 	bl	8006570 <xTimerGenericCommand>
				}
			}

//			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
//			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "LIT   ");
			break;
 80021d8:	e04f      	b.n	800227a <KeyLogic_Action+0x63e>
 80021da:	bf00      	nop
 80021dc:	20000028 	.word	0x20000028
 80021e0:	200000e8 	.word	0x200000e8
 80021e4:	08007e5c 	.word	0x08007e5c
 80021e8:	2000002f 	.word	0x2000002f
 80021ec:	20000004 	.word	0x20000004
 80021f0:	08007ebc 	.word	0x08007ebc
 80021f4:	200000f4 	.word	0x200000f4
 80021f8:	200000f0 	.word	0x200000f0
 80021fc:	08000dbd 	.word	0x08000dbd
 8002200:	08007ec4 	.word	0x08007ec4
 8002204:	20000044 	.word	0x20000044
 8002208:	200000e4 	.word	0x200000e4
 800220c:	d1b71759 	.word	0xd1b71759
 8002210:	08007ed0 	.word	0x08007ed0
 8002214:	08007ed8 	.word	0x08007ed8
 8002218:	00051615 	.word	0x00051615
 800221c:	08007e54 	.word	0x08007e54
 8002220:	20000036 	.word	0x20000036
 8002224:	200000dc 	.word	0x200000dc
 8002228:	08007ee0 	.word	0x08007ee0
 800222c:	08007e44 	.word	0x08007e44
 8002230:	08007ee8 	.word	0x08007ee8
 8002234:	08007e6c 	.word	0x08007e6c
 8002238:	20000054 	.word	0x20000054
 800223c:	08007ef0 	.word	0x08007ef0
 8002240:	08007e64 	.word	0x08007e64
 8002244:	200000fc 	.word	0x200000fc
 8002248:	08007ef8 	.word	0x08007ef8
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 800224c:	2300      	movs	r3, #0
 800224e:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <KeyLogic_Action+0x648>)
 8002250:	2107      	movs	r1, #7
 8002252:	480d      	ldr	r0, [pc, #52]	@ (8002288 <KeyLogic_Action+0x64c>)
 8002254:	f005 f8e0 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8002258:	2300      	movs	r3, #0
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <KeyLogic_Action+0x648>)
 800225c:	2107      	movs	r1, #7
 800225e:	480b      	ldr	r0, [pc, #44]	@ (800228c <KeyLogic_Action+0x650>)
 8002260:	f005 f8da 	bl	8007418 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8002264:	2300      	movs	r3, #0
 8002266:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <KeyLogic_Action+0x648>)
 8002268:	2107      	movs	r1, #7
 800226a:	4809      	ldr	r0, [pc, #36]	@ (8002290 <KeyLogic_Action+0x654>)
 800226c:	f005 f8d4 	bl	8007418 <sniprintf>
            break;
 8002270:	e004      	b.n	800227c <KeyLogic_Action+0x640>
            break;
 8002272:	bf00      	nop
 8002274:	e002      	b.n	800227c <KeyLogic_Action+0x640>
            break;
 8002276:	bf00      	nop
 8002278:	e000      	b.n	800227c <KeyLogic_Action+0x640>
			break;
 800227a:	bf00      	nop
    }
}
 800227c:	bf00      	nop
 800227e:	3734      	adds	r7, #52	@ 0x34
 8002280:	46bd      	mov	sp, r7
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	08007e54 	.word	0x08007e54
 8002288:	20000028 	.word	0x20000028
 800228c:	2000002f 	.word	0x2000002f
 8002290:	20000036 	.word	0x20000036

08002294 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80022a2:	d907      	bls.n	80022b4 <CharToSegment+0x20>
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b39      	cmp	r3, #57	@ 0x39
 80022a8:	d804      	bhi.n	80022b4 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	3b30      	subs	r3, #48	@ 0x30
 80022ae:	4a38      	ldr	r2, [pc, #224]	@ (8002390 <CharToSegment+0xfc>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	e066      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'L') {
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b4c      	cmp	r3, #76	@ 0x4c
 80022b8:	d102      	bne.n	80022c0 <CharToSegment+0x2c>
        return specialCharMap[0];
 80022ba:	4b36      	ldr	r3, [pc, #216]	@ (8002394 <CharToSegment+0x100>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	e060      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == '.') {
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80022c4:	d102      	bne.n	80022cc <CharToSegment+0x38>
        return specialCharMap[1];
 80022c6:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <CharToSegment+0x100>)
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	e05a      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'T') {
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2b54      	cmp	r3, #84	@ 0x54
 80022d0:	d102      	bne.n	80022d8 <CharToSegment+0x44>
        return specialCharMap[2];
 80022d2:	4b30      	ldr	r3, [pc, #192]	@ (8002394 <CharToSegment+0x100>)
 80022d4:	789b      	ldrb	r3, [r3, #2]
 80022d6:	e054      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'O') {
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b4f      	cmp	r3, #79	@ 0x4f
 80022dc:	d102      	bne.n	80022e4 <CharToSegment+0x50>
        return specialCharMap[3];
 80022de:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <CharToSegment+0x100>)
 80022e0:	78db      	ldrb	r3, [r3, #3]
 80022e2:	e04e      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'A') {
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b41      	cmp	r3, #65	@ 0x41
 80022e8:	d102      	bne.n	80022f0 <CharToSegment+0x5c>
        return specialCharMap[4];
 80022ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002394 <CharToSegment+0x100>)
 80022ec:	791b      	ldrb	r3, [r3, #4]
 80022ee:	e048      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'S') {
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b53      	cmp	r3, #83	@ 0x53
 80022f4:	d102      	bne.n	80022fc <CharToSegment+0x68>
        return specialCharMap[5];
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <CharToSegment+0x100>)
 80022f8:	795b      	ldrb	r3, [r3, #5]
 80022fa:	e042      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'H') {
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	2b48      	cmp	r3, #72	@ 0x48
 8002300:	d102      	bne.n	8002308 <CharToSegment+0x74>
        return specialCharMap[6];
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <CharToSegment+0x100>)
 8002304:	799b      	ldrb	r3, [r3, #6]
 8002306:	e03c      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'I') {
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b49      	cmp	r3, #73	@ 0x49
 800230c:	d102      	bne.n	8002314 <CharToSegment+0x80>
        return specialCharMap[7];
 800230e:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <CharToSegment+0x100>)
 8002310:	79db      	ldrb	r3, [r3, #7]
 8002312:	e036      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'F') {
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b46      	cmp	r3, #70	@ 0x46
 8002318:	d102      	bne.n	8002320 <CharToSegment+0x8c>
        return specialCharMap[8];
 800231a:	4b1e      	ldr	r3, [pc, #120]	@ (8002394 <CharToSegment+0x100>)
 800231c:	7a1b      	ldrb	r3, [r3, #8]
 800231e:	e030      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'G') {
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	2b47      	cmp	r3, #71	@ 0x47
 8002324:	d102      	bne.n	800232c <CharToSegment+0x98>
        return specialCharMap[9];
 8002326:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <CharToSegment+0x100>)
 8002328:	7a5b      	ldrb	r3, [r3, #9]
 800232a:	e02a      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'P') {
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b50      	cmp	r3, #80	@ 0x50
 8002330:	d102      	bne.n	8002338 <CharToSegment+0xa4>
        return specialCharMap[10];
 8002332:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <CharToSegment+0x100>)
 8002334:	7a9b      	ldrb	r3, [r3, #10]
 8002336:	e024      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'C') {
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b43      	cmp	r3, #67	@ 0x43
 800233c:	d102      	bne.n	8002344 <CharToSegment+0xb0>
        return specialCharMap[11];
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <CharToSegment+0x100>)
 8002340:	7adb      	ldrb	r3, [r3, #11]
 8002342:	e01e      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'E') {
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b45      	cmp	r3, #69	@ 0x45
 8002348:	d102      	bne.n	8002350 <CharToSegment+0xbc>
        return specialCharMap[12];
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <CharToSegment+0x100>)
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	e018      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'U') {
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	2b55      	cmp	r3, #85	@ 0x55
 8002354:	d102      	bne.n	800235c <CharToSegment+0xc8>
        return specialCharMap[13];
 8002356:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <CharToSegment+0x100>)
 8002358:	7b5b      	ldrb	r3, [r3, #13]
 800235a:	e012      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'N') {
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002360:	d102      	bne.n	8002368 <CharToSegment+0xd4>
        return specialCharMap[14];
 8002362:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <CharToSegment+0x100>)
 8002364:	7b9b      	ldrb	r3, [r3, #14]
 8002366:	e00c      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'R') {
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b52      	cmp	r3, #82	@ 0x52
 800236c:	d102      	bne.n	8002374 <CharToSegment+0xe0>
        return specialCharMap[15];
 800236e:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <CharToSegment+0x100>)
 8002370:	7bdb      	ldrb	r3, [r3, #15]
 8002372:	e006      	b.n	8002382 <CharToSegment+0xee>
    } else if (c == 'D') {
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	2b44      	cmp	r3, #68	@ 0x44
 8002378:	d102      	bne.n	8002380 <CharToSegment+0xec>
        return specialCharMap[16];
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <CharToSegment+0x100>)
 800237c:	7c1b      	ldrb	r3, [r3, #16]
 800237e:	e000      	b.n	8002382 <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 8002380:	23ff      	movs	r3, #255	@ 0xff
    }
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	20000014 	.word	0x20000014

08002398 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e035      	b.n	8002416 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fd ff12 	bl	80001e0 <strlen>
 80023bc:	4603      	mov	r3, r0
 80023be:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d81f      	bhi.n	8002406 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dd15      	ble.n	80023fa <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	441a      	add	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	1e59      	subs	r1, r3, #1
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	1acb      	subs	r3, r1, r3
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff55 	bl	8002294 <CharToSegment>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4619      	mov	r1, r3
 80023ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002428 <SevenSegLEDsHandler+0x90>)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	460a      	mov	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e00a      	b.n	8002410 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 80023fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002428 <SevenSegLEDsHandler+0x90>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	22ff      	movs	r2, #255	@ 0xff
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e004      	b.n	8002410 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <SevenSegLEDsHandler+0x90>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	22ff      	movs	r2, #255	@ 0xff
 800240e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3301      	adds	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b02      	cmp	r3, #2
 800241a:	ddc6      	ble.n	80023aa <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 800241c:	4b02      	ldr	r3, [pc, #8]	@ (8002428 <SevenSegLEDsHandler+0x90>)
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000118 	.word	0x20000118

0800242c <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	70fb      	strb	r3, [r7, #3]
 8002438:	4613      	mov	r3, r2
 800243a:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffa9 	bl	8002398 <SevenSegLEDsHandler>
 8002446:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	2b05      	cmp	r3, #5
 800244c:	d820      	bhi.n	8002490 <UpdateDisplayBuffer+0x64>
 800244e:	a201      	add	r2, pc, #4	@ (adr r2, 8002454 <UpdateDisplayBuffer+0x28>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002473 	.word	0x08002473
 800245c:	08002479 	.word	0x08002479
 8002460:	0800247f 	.word	0x0800247f
 8002464:	08002485 	.word	0x08002485
 8002468:	0800248b 	.word	0x0800248b
        case 0:
            curr_scan = 0b11111110;
 800246c:	23fe      	movs	r3, #254	@ 0xfe
 800246e:	73fb      	strb	r3, [r7, #15]
            break;
 8002470:	e011      	b.n	8002496 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 8002472:	23fd      	movs	r3, #253	@ 0xfd
 8002474:	73fb      	strb	r3, [r7, #15]
            break;
 8002476:	e00e      	b.n	8002496 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8002478:	23fb      	movs	r3, #251	@ 0xfb
 800247a:	73fb      	strb	r3, [r7, #15]
            break;
 800247c:	e00b      	b.n	8002496 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 800247e:	23f7      	movs	r3, #247	@ 0xf7
 8002480:	73fb      	strb	r3, [r7, #15]
            break;
 8002482:	e008      	b.n	8002496 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8002484:	23ef      	movs	r3, #239	@ 0xef
 8002486:	73fb      	strb	r3, [r7, #15]
            break;
 8002488:	e005      	b.n	8002496 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 800248a:	23df      	movs	r3, #223	@ 0xdf
 800248c:	73fb      	strb	r3, [r7, #15]
            break;
 800248e:	e002      	b.n	8002496 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8002490:	23ff      	movs	r3, #255	@ 0xff
 8002492:	73fb      	strb	r3, [r7, #15]
            break;
 8002494:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 8002496:	4b57      	ldr	r3, [pc, #348]	@ (80025f4 <UpdateDisplayBuffer+0x1c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db72      	blt.n	8002584 <UpdateDisplayBuffer+0x158>
 800249e:	4b55      	ldr	r3, [pc, #340]	@ (80025f4 <UpdateDisplayBuffer+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	dc6e      	bgt.n	8002584 <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	4b52      	ldr	r3, [pc, #328]	@ (80025f4 <UpdateDisplayBuffer+0x1c8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d136      	bne.n	800251e <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80024b0:	78ba      	ldrb	r2, [r7, #2]
 80024b2:	4951      	ldr	r1, [pc, #324]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	22ff      	movs	r2, #255	@ 0xff
 80024be:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 80024c0:	78ba      	ldrb	r2, [r7, #2]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	7898      	ldrb	r0, [r3, #2]
 80024c6:	494c      	ldr	r1, [pc, #304]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	3301      	adds	r3, #1
 80024d2:	4602      	mov	r2, r0
 80024d4:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 80024d6:	78ba      	ldrb	r2, [r7, #2]
 80024d8:	4947      	ldr	r1, [pc, #284]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	440b      	add	r3, r1
 80024e2:	3302      	adds	r3, #2
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	78ba      	ldrb	r2, [r7, #2]
 80024f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024f4:	b2d8      	uxtb	r0, r3
 80024f6:	4940      	ldr	r1, [pc, #256]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	440b      	add	r3, r1
 8002500:	3303      	adds	r3, #3
 8002502:	4602      	mov	r2, r0
 8002504:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 8002506:	78ba      	ldrb	r2, [r7, #2]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	7818      	ldrb	r0, [r3, #0]
 800250c:	493a      	ldr	r1, [pc, #232]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	440b      	add	r3, r1
 8002516:	3304      	adds	r3, #4
 8002518:	4602      	mov	r2, r0
 800251a:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 800251c:	e065      	b.n	80025ea <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800251e:	78ba      	ldrb	r2, [r7, #2]
 8002520:	4935      	ldr	r1, [pc, #212]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	440b      	add	r3, r1
 800252a:	22ff      	movs	r2, #255	@ 0xff
 800252c:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 800252e:	78ba      	ldrb	r2, [r7, #2]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	7898      	ldrb	r0, [r3, #2]
 8002534:	4930      	ldr	r1, [pc, #192]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	440b      	add	r3, r1
 800253e:	3301      	adds	r3, #1
 8002540:	4602      	mov	r2, r0
 8002542:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 8002544:	78ba      	ldrb	r2, [r7, #2]
 8002546:	492c      	ldr	r1, [pc, #176]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	440b      	add	r3, r1
 8002550:	3302      	adds	r3, #2
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 8002556:	78ba      	ldrb	r2, [r7, #2]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	7858      	ldrb	r0, [r3, #1]
 800255c:	4926      	ldr	r1, [pc, #152]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	440b      	add	r3, r1
 8002566:	3303      	adds	r3, #3
 8002568:	4602      	mov	r2, r0
 800256a:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 800256c:	78ba      	ldrb	r2, [r7, #2]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	7818      	ldrb	r0, [r3, #0]
 8002572:	4921      	ldr	r1, [pc, #132]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	440b      	add	r3, r1
 800257c:	3304      	adds	r3, #4
 800257e:	4602      	mov	r2, r0
 8002580:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 8002582:	e032      	b.n	80025ea <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8002584:	78ba      	ldrb	r2, [r7, #2]
 8002586:	491c      	ldr	r1, [pc, #112]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	440b      	add	r3, r1
 8002590:	22ff      	movs	r2, #255	@ 0xff
 8002592:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 8002594:	78ba      	ldrb	r2, [r7, #2]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	7898      	ldrb	r0, [r3, #2]
 800259a:	4917      	ldr	r1, [pc, #92]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	3301      	adds	r3, #1
 80025a6:	4602      	mov	r2, r0
 80025a8:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 80025aa:	78ba      	ldrb	r2, [r7, #2]
 80025ac:	4912      	ldr	r1, [pc, #72]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	3302      	adds	r3, #2
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 80025bc:	78ba      	ldrb	r2, [r7, #2]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	7858      	ldrb	r0, [r3, #1]
 80025c2:	490d      	ldr	r1, [pc, #52]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	3303      	adds	r3, #3
 80025ce:	4602      	mov	r2, r0
 80025d0:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 80025d2:	78ba      	ldrb	r2, [r7, #2]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	7818      	ldrb	r0, [r3, #0]
 80025d8:	4907      	ldr	r1, [pc, #28]	@ (80025f8 <UpdateDisplayBuffer+0x1cc>)
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	3304      	adds	r3, #4
 80025e4:	4602      	mov	r2, r0
 80025e6:	701a      	strb	r2, [r3, #0]
    }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000054 	.word	0x20000054
 80025f8:	2000010c 	.word	0x2000010c

080025fc <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <SevenSegLEDsScan+0x7c>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	bfb8      	it	lt
 8002612:	425b      	neglt	r3, r3
 8002614:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <SevenSegLEDsScan+0x80>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	4619      	mov	r1, r3
 8002620:	4817      	ldr	r0, [pc, #92]	@ (8002680 <SevenSegLEDsScan+0x84>)
 8002622:	f7ff ff03 	bl	800242c <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002626:	b672      	cpsid	i
}
 8002628:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 800262a:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <SevenSegLEDsScan+0x7c>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <SevenSegLEDsScan+0x88>)
 800263a:	4413      	add	r3, r2
 800263c:	2105      	movs	r1, #5
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f824 	bl	800268c <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8002644:	4a0c      	ldr	r2, [pc, #48]	@ (8002678 <SevenSegLEDsScan+0x7c>)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800264a:	b662      	cpsie	i
}
 800264c:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 800264e:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <SevenSegLEDsScan+0x80>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <SevenSegLEDsScan+0x8c>)
 8002658:	fb83 3102 	smull	r3, r1, r3, r2
 800265c:	17d3      	asrs	r3, r2, #31
 800265e:	1ac9      	subs	r1, r1, r3
 8002660:	460b      	mov	r3, r1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	440b      	add	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	1ad1      	subs	r1, r2, r3
 800266a:	b2ca      	uxtb	r2, r1
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <SevenSegLEDsScan+0x80>)
 800266e:	701a      	strb	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000116 	.word	0x20000116
 800267c:	20000108 	.word	0x20000108
 8002680:	20000028 	.word	0x20000028
 8002684:	2000010c 	.word	0x2000010c
 8002688:	2aaaaaab 	.word	0x2aaaaaab

0800268c <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8002696:	2200      	movs	r2, #0
 8002698:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800269c:	4823      	ldr	r0, [pc, #140]	@ (800272c <ShiftOut_SPI+0xa0>)
 800269e:	f000 fead 	bl	80033fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80026a2:	2201      	movs	r2, #1
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	4822      	ldr	r0, [pc, #136]	@ (8002730 <ShiftOut_SPI+0xa4>)
 80026a8:	f000 fea8 	bl	80033fc <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e003      	b.n	80026ba <ShiftOut_SPI+0x2e>
 80026b2:	bf00      	nop
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c0:	dbf7      	blt.n	80026b2 <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80026c2:	bf00      	nop
 80026c4:	481b      	ldr	r0, [pc, #108]	@ (8002734 <ShiftOut_SPI+0xa8>)
 80026c6:	f001 fcf5 	bl	80040b4 <HAL_SPI_GetState>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d1f9      	bne.n	80026c4 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4816      	ldr	r0, [pc, #88]	@ (8002734 <ShiftOut_SPI+0xa8>)
 80026dc:	f001 fba7 	bl	8003e2e <HAL_SPI_Transmit>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 80026e6:	f000 f9e5 	bl	8002ab4 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	e003      	b.n	80026f8 <ShiftOut_SPI+0x6c>
 80026f0:	bf00      	nop
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026fe:	dbf7      	blt.n	80026f0 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002700:	bf00      	nop
 8002702:	480c      	ldr	r0, [pc, #48]	@ (8002734 <ShiftOut_SPI+0xa8>)
 8002704:	f001 fcd6 	bl	80040b4 <HAL_SPI_GetState>
 8002708:	4603      	mov	r3, r0
 800270a:	2b01      	cmp	r3, #1
 800270c:	d1f9      	bne.n	8002702 <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002714:	4805      	ldr	r0, [pc, #20]	@ (800272c <ShiftOut_SPI+0xa0>)
 8002716:	f000 fe71 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	2180      	movs	r1, #128	@ 0x80
 800271e:	4804      	ldr	r0, [pc, #16]	@ (8002730 <ShiftOut_SPI+0xa4>)
 8002720:	f000 fe6c 	bl	80033fc <HAL_GPIO_WritePin>

}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40020400 	.word	0x40020400
 8002730:	40020800 	.word	0x40020800
 8002734:	2000011c 	.word	0x2000011c

08002738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800273c:	f000 fb9e 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002740:	f000 f828 	bl	8002794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002744:	f000 f8fa 	bl	800293c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002748:	f000 f88c 	bl	8002864 <MX_SPI1_Init>
  MX_SPI2_Init();
 800274c:	f000 f8c0 	bl	80028d0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002750:	f002 f852 	bl	80047f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8002754:	4a09      	ldr	r2, [pc, #36]	@ (800277c <main+0x44>)
 8002756:	2100      	movs	r1, #0
 8002758:	4809      	ldr	r0, [pc, #36]	@ (8002780 <main+0x48>)
 800275a:	f002 f897 	bl	800488c <osThreadNew>
 800275e:	4603      	mov	r3, r0
 8002760:	4a08      	ldr	r2, [pc, #32]	@ (8002784 <main+0x4c>)
 8002762:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8002764:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <main+0x50>)
 8002766:	2100      	movs	r1, #0
 8002768:	4808      	ldr	r0, [pc, #32]	@ (800278c <main+0x54>)
 800276a:	f002 f88f 	bl	800488c <osThreadNew>
 800276e:	4603      	mov	r3, r0
 8002770:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <main+0x58>)
 8002772:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002774:	f002 f864 	bl	8004840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <main+0x40>
 800277c:	08007f3c 	.word	0x08007f3c
 8002780:	08002a41 	.word	0x08002a41
 8002784:	200001d4 	.word	0x200001d4
 8002788:	08007f60 	.word	0x08007f60
 800278c:	08002a7d 	.word	0x08002a7d
 8002790:	200001d8 	.word	0x200001d8

08002794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b094      	sub	sp, #80	@ 0x50
 8002798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	2230      	movs	r2, #48	@ 0x30
 80027a0:	2100      	movs	r1, #0
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 fe6c 	bl	8007480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	4b27      	ldr	r3, [pc, #156]	@ (800285c <SystemClock_Config+0xc8>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	4a26      	ldr	r2, [pc, #152]	@ (800285c <SystemClock_Config+0xc8>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c8:	4b24      	ldr	r3, [pc, #144]	@ (800285c <SystemClock_Config+0xc8>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d4:	2300      	movs	r3, #0
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <SystemClock_Config+0xcc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <SystemClock_Config+0xcc>)
 80027de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <SystemClock_Config+0xcc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027f4:	2301      	movs	r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027f8:	2310      	movs	r3, #16
 80027fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027fc:	2302      	movs	r3, #2
 80027fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002800:	2300      	movs	r3, #0
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002804:	2308      	movs	r3, #8
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002808:	2364      	movs	r3, #100	@ 0x64
 800280a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800280c:	2302      	movs	r3, #2
 800280e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002810:	2304      	movs	r3, #4
 8002812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002814:	f107 0320 	add.w	r3, r7, #32
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fe09 	bl	8003430 <HAL_RCC_OscConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002824:	f000 f946 	bl	8002ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002828:	230f      	movs	r3, #15
 800282a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800282c:	2302      	movs	r3, #2
 800282e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2103      	movs	r1, #3
 8002844:	4618      	mov	r0, r3
 8002846:	f001 f86b 	bl	8003920 <HAL_RCC_ClockConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002850:	f000 f930 	bl	8002ab4 <Error_Handler>
  }
}
 8002854:	bf00      	nop
 8002856:	3750      	adds	r7, #80	@ 0x50
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000

08002864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <MX_SPI1_Init+0x64>)
 800286a:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <MX_SPI1_Init+0x68>)
 800286c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800286e:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <MX_SPI1_Init+0x64>)
 8002870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002876:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <MX_SPI1_Init+0x64>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <MX_SPI1_Init+0x64>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <MX_SPI1_Init+0x64>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <MX_SPI1_Init+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <MX_SPI1_Init+0x64>)
 8002890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <MX_SPI1_Init+0x64>)
 8002898:	2220      	movs	r2, #32
 800289a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <MX_SPI1_Init+0x64>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <MX_SPI1_Init+0x64>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <MX_SPI1_Init+0x64>)
 80028b0:	220a      	movs	r2, #10
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028b4:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <MX_SPI1_Init+0x64>)
 80028b6:	f001 fa31 	bl	8003d1c <HAL_SPI_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028c0:	f000 f8f8 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000011c 	.word	0x2000011c
 80028cc:	40013000 	.word	0x40013000

080028d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028d6:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <MX_SPI2_Init+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ee:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <MX_SPI2_Init+0x64>)
 80028fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002900:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <MX_SPI2_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002908:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <MX_SPI2_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <MX_SPI2_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <MX_SPI2_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <MX_SPI2_Init+0x64>)
 800291c:	220a      	movs	r2, #10
 800291e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002920:	4804      	ldr	r0, [pc, #16]	@ (8002934 <MX_SPI2_Init+0x64>)
 8002922:	f001 f9fb 	bl	8003d1c <HAL_SPI_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800292c:	f000 f8c2 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000174 	.word	0x20000174
 8002938:	40003800 	.word	0x40003800

0800293c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	4b37      	ldr	r3, [pc, #220]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	4a36      	ldr	r2, [pc, #216]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 800295c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002960:	6313      	str	r3, [r2, #48]	@ 0x30
 8002962:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b30      	ldr	r3, [pc, #192]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a2f      	ldr	r2, [pc, #188]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6313      	str	r3, [r2, #48]	@ 0x30
 800299a:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a21      	ldr	r2, [pc, #132]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a34 <MX_GPIO_Init+0xf8>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80029c2:	2200      	movs	r2, #0
 80029c4:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 80029c8:	481b      	ldr	r0, [pc, #108]	@ (8002a38 <MX_GPIO_Init+0xfc>)
 80029ca:	f000 fd17 	bl	80033fc <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	481a      	ldr	r0, [pc, #104]	@ (8002a3c <MX_GPIO_Init+0x100>)
 80029d4:	f000 fd12 	bl	80033fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80029d8:	231f      	movs	r3, #31
 80029da:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	4813      	ldr	r0, [pc, #76]	@ (8002a38 <MX_GPIO_Init+0xfc>)
 80029ec:	f000 fb6a 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80029f0:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 80029f4:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <MX_GPIO_Init+0xfc>)
 8002a0a:	f000 fb5b 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <MX_GPIO_Init+0x100>)
 8002a26:	f000 fb4d 	bl	80030c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	@ 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800

08002a40 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8002a48:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <Led3x6Run+0x38>)
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a52:	6018      	str	r0, [r3, #0]
 8002a54:	3304      	adds	r3, #4
 8002a56:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8002a58:	f7ff fdd0 	bl	80025fc <SevenSegLEDsScan>
	  osDelay(1);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f001 ffa7 	bl	80049b0 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	2105      	movs	r1, #5
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe0f 	bl	800268c <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f001 ff9e 	bl	80049b0 <osDelay>
	  SevenSegLEDsScan();
 8002a74:	bf00      	nop
 8002a76:	e7ef      	b.n	8002a58 <Led3x6Run+0x18>
 8002a78:	08007f1c 	.word	0x08007f1c

08002a7c <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 8002a84:	f7fe fc0c 	bl	80012a0 <KeyLogic>
	 KeyLogic_Action();
 8002a88:	f7ff f8d8 	bl	8001c3c <KeyLogic_Action>
	 osDelay(1);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f001 ff8f 	bl	80049b0 <osDelay>
	 KeyLogic();
 8002a92:	bf00      	nop
 8002a94:	e7f6      	b.n	8002a84 <KeyPad4x5Run+0x8>

08002a96 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002aa8:	f000 fa0a 	bl	8002ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab8:	b672      	cpsid	i
}
 8002aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <Error_Handler+0x8>

08002ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_MspInit+0x54>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4a11      	ldr	r2, [pc, #68]	@ (8002b14 <HAL_MspInit+0x54>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_MspInit+0x54>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_MspInit+0x54>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <HAL_MspInit+0x54>)
 8002aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <HAL_MspInit+0x54>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	210f      	movs	r1, #15
 8002b02:	f06f 0001 	mvn.w	r0, #1
 8002b06:	f000 fab3 	bl	8003070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	@ 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a41      	ldr	r2, [pc, #260]	@ (8002c3c <HAL_SPI_MspInit+0x124>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d12c      	bne.n	8002b94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a38      	ldr	r2, [pc, #224]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b36      	ldr	r3, [pc, #216]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b72:	23a0      	movs	r3, #160	@ 0xa0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b82:	2305      	movs	r3, #5
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	482d      	ldr	r0, [pc, #180]	@ (8002c44 <HAL_SPI_MspInit+0x12c>)
 8002b8e:	f000 fa99 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b92:	e04f      	b.n	8002c34 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2b      	ldr	r2, [pc, #172]	@ (8002c48 <HAL_SPI_MspInit+0x130>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d14a      	bne.n	8002c34 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a26      	ldr	r2, [pc, #152]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_SPI_MspInit+0x128>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c02:	2305      	movs	r3, #5
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480f      	ldr	r0, [pc, #60]	@ (8002c4c <HAL_SPI_MspInit+0x134>)
 8002c0e:	f000 fa59 	bl	80030c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c20:	2303      	movs	r3, #3
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c24:	2305      	movs	r3, #5
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4808      	ldr	r0, [pc, #32]	@ (8002c50 <HAL_SPI_MspInit+0x138>)
 8002c30:	f000 fa48 	bl	80030c4 <HAL_GPIO_Init>
}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	@ 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40013000 	.word	0x40013000
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000
 8002c48:	40003800 	.word	0x40003800
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020400 	.word	0x40020400

08002c54 <HAL_InitTick>:
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	@ 0x38
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_InitTick+0xe8>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	4a33      	ldr	r2, [pc, #204]	@ (8002d3c <HAL_InitTick+0xe8>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c74:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <HAL_InitTick+0xe8>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f107 0210 	add.w	r2, r7, #16
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f814 	bl	8003cb8 <HAL_RCC_GetClockConfig>
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <HAL_InitTick+0x4e>
 8002c9a:	f000 fff9 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8002c9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ca0:	e004      	b.n	8002cac <HAL_InitTick+0x58>
 8002ca2:	f000 fff5 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	4a24      	ldr	r2, [pc, #144]	@ (8002d40 <HAL_InitTick+0xec>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	0c9b      	lsrs	r3, r3, #18
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cba:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002cbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002cc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	6053      	str	r3, [r2, #4]
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
 8002ce2:	4818      	ldr	r0, [pc, #96]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002ce4:	f001 fad0 	bl	8004288 <HAL_TIM_Base_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002cee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11b      	bne.n	8002d2e <HAL_InitTick+0xda>
 8002cf6:	4813      	ldr	r0, [pc, #76]	@ (8002d44 <HAL_InitTick+0xf0>)
 8002cf8:	f001 fb20 	bl	800433c <HAL_TIM_Base_Start_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002d02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d111      	bne.n	8002d2e <HAL_InitTick+0xda>
 8002d0a:	201c      	movs	r0, #28
 8002d0c:	f000 f9cc 	bl	80030a8 <HAL_NVIC_EnableIRQ>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b0f      	cmp	r3, #15
 8002d14:	d808      	bhi.n	8002d28 <HAL_InitTick+0xd4>
 8002d16:	2200      	movs	r2, #0
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	201c      	movs	r0, #28
 8002d1c:	f000 f9a8 	bl	8003070 <HAL_NVIC_SetPriority>
 8002d20:	4a09      	ldr	r2, [pc, #36]	@ (8002d48 <HAL_InitTick+0xf4>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e002      	b.n	8002d2e <HAL_InitTick+0xda>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d32:	4618      	mov	r0, r3
 8002d34:	3738      	adds	r7, #56	@ 0x38
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	431bde83 	.word	0x431bde83
 8002d44:	200001dc 	.word	0x200001dc
 8002d48:	2000005c 	.word	0x2000005c

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <NMI_Handler+0x4>

08002d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <MemManage_Handler+0x4>

08002d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <BusFault_Handler+0x4>

08002d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <UsageFault_Handler+0x4>

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d88:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <TIM2_IRQHandler+0x10>)
 8002d8a:	f001 fb39 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200001dc 	.word	0x200001dc

08002d98 <_sbrk>:
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <_sbrk+0x5c>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <_sbrk+0x60>)
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <_sbrk+0x64>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x22>
 8002db4:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <_sbrk+0x64>)
 8002db6:	4a12      	ldr	r2, [pc, #72]	@ (8002e00 <_sbrk+0x68>)
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	4b10      	ldr	r3, [pc, #64]	@ (8002dfc <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <_sbrk+0x40>
 8002dc8:	f004 fbb8 	bl	800753c <__errno>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x54>
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20020000 	.word	0x20020000
 8002df8:	00000400 	.word	0x00000400
 8002dfc:	20000224 	.word	0x20000224
 8002e00:	20004d60 	.word	0x20004d60

08002e04 <SystemInit>:
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <SystemInit+0x20>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0e:	4a05      	ldr	r2, [pc, #20]	@ (8002e24 <SystemInit+0x20>)
 8002e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <Reset_Handler>:
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e60 <LoopFillZerobss+0xe>
 8002e2c:	f7ff ffea 	bl	8002e04 <SystemInit>
 8002e30:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <LoopFillZerobss+0x12>)
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <LoopFillZerobss+0x16>)
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <LoopFillZerobss+0x1a>)
 8002e36:	2300      	movs	r3, #0
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:
 8002e3a:	58d4      	ldr	r4, [r2, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:
 8002e40:	18c4      	adds	r4, r0, r3
 8002e42:	428c      	cmp	r4, r1
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <LoopFillZerobss+0x1e>)
 8002e48:	4c0a      	ldr	r4, [pc, #40]	@ (8002e74 <LoopFillZerobss+0x22>)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:
 8002e52:	42a2      	cmp	r2, r4
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>
 8002e56:	f004 fb77 	bl	8007548 <__libc_init_array>
 8002e5a:	f7ff fc6d 	bl	8002738 <main>
 8002e5e:	4770      	bx	lr
 8002e60:	20020000 	.word	0x20020000
 8002e64:	20000000 	.word	0x20000000
 8002e68:	200000b8 	.word	0x200000b8
 8002e6c:	08007fe0 	.word	0x08007fe0
 8002e70:	200000b8 	.word	0x200000b8
 8002e74:	20004d5c 	.word	0x20004d5c

08002e78 <ADC_IRQHandler>:
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>
	...

08002e7c <HAL_Init>:
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_Init+0x40>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_Init+0x40>)
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	@ (8002ebc <HAL_Init+0x40>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f000 f8d8 	bl	800305a <HAL_NVIC_SetPriorityGrouping>
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f7ff fed2 	bl	8002c54 <HAL_InitTick>
 8002eb0:	f7ff fe06 	bl	8002ac0 <HAL_MspInit>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_IncTick>:
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <HAL_IncTick+0x20>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_IncTick+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <HAL_IncTick+0x24>)
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000060 	.word	0x20000060
 8002ee4:	20000228 	.word	0x20000228

08002ee8 <HAL_GetTick>:
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4b03      	ldr	r3, [pc, #12]	@ (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000228 	.word	0x20000228

08002f00 <__NVIC_SetPriorityGrouping>:
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	60d3      	str	r3, [r2, #12]
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_GetPriorityGrouping>:
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <__NVIC_EnableIRQ+0x38>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	@ (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	@ (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_NVIC_SetPriorityGrouping>:
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ff4c 	bl	8002f00 <__NVIC_SetPriorityGrouping>
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_NVIC_SetPriority>:
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	f7ff ff61 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 8003086:	6178      	str	r0, [r7, #20]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	6978      	ldr	r0, [r7, #20]
 800308e:	f7ff ffb1 	bl	8002ff4 <NVIC_EncodePriority>
 8003092:	4602      	mov	r2, r0
 8003094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff80 	bl	8002fa0 <__NVIC_SetPriority>
 80030a0:	bf00      	nop
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_NVIC_EnableIRQ>:
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff54 	bl	8002f64 <__NVIC_EnableIRQ>
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_GPIO_Init>:
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	@ 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e159      	b.n	8003394 <HAL_GPIO_Init+0x2d0>
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 8148 	bne.w	800338e <HAL_GPIO_Init+0x2ca>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d005      	beq.n	8003116 <HAL_GPIO_Init+0x52>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d130      	bne.n	8003178 <HAL_GPIO_Init+0xb4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 0201 	and.w	r2, r3, #1
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b03      	cmp	r3, #3
 8003182:	d017      	beq.n	80031b4 <HAL_GPIO_Init+0xf0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	60da      	str	r2, [r3, #12]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x144>
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a2 	beq.w	800338e <HAL_GPIO_Init+0x2ca>
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b57      	ldr	r3, [pc, #348]	@ (80033ac <HAL_GPIO_Init+0x2e8>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003252:	4a56      	ldr	r2, [pc, #344]	@ (80033ac <HAL_GPIO_Init+0x2e8>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003258:	6453      	str	r3, [r2, #68]	@ 0x44
 800325a:	4b54      	ldr	r3, [pc, #336]	@ (80033ac <HAL_GPIO_Init+0x2e8>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_GPIO_Init+0x2ec>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a49      	ldr	r2, [pc, #292]	@ (80033b4 <HAL_GPIO_Init+0x2f0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x202>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a48      	ldr	r2, [pc, #288]	@ (80033b8 <HAL_GPIO_Init+0x2f4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x1fe>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a47      	ldr	r2, [pc, #284]	@ (80033bc <HAL_GPIO_Init+0x2f8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x1fa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a46      	ldr	r2, [pc, #280]	@ (80033c0 <HAL_GPIO_Init+0x2fc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x1f6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a45      	ldr	r2, [pc, #276]	@ (80033c4 <HAL_GPIO_Init+0x300>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x1f2>
 80032b2:	2304      	movs	r3, #4
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032b6:	2307      	movs	r3, #7
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x204>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	4935      	ldr	r1, [pc, #212]	@ (80033b0 <HAL_GPIO_Init+0x2ec>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80032e6:	4b38      	ldr	r3, [pc, #224]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x246>
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	4a2f      	ldr	r2, [pc, #188]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]
 8003310:	4b2d      	ldr	r3, [pc, #180]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x270>
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	4a24      	ldr	r2, [pc, #144]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]
 800333a:	4b23      	ldr	r3, [pc, #140]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x29a>
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	4a1a      	ldr	r2, [pc, #104]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]
 8003364:	4b18      	ldr	r3, [pc, #96]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2c4>
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	4a0f      	ldr	r2, [pc, #60]	@ (80033c8 <HAL_GPIO_Init+0x304>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f aea2 	bls.w	80030e0 <HAL_GPIO_Init+0x1c>
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_ReadPin>:
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	807b      	strh	r3, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	887b      	ldrh	r3, [r7, #2]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <HAL_GPIO_ReadPin+0x1e>
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e001      	b.n	80033ee <HAL_GPIO_ReadPin+0x22>
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_WritePin>:
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x26>
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_RCC_OscConfig>:
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
 800343e:	2301      	movs	r3, #1
 8003440:	e267      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
 800345a:	4b85      	ldr	r3, [pc, #532]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b08      	cmp	r3, #8
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
 8003466:	4b82      	ldr	r3, [pc, #520]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
 8003474:	4b7e      	ldr	r3, [pc, #504]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003488:	2301      	movs	r3, #1
 800348a:	e242      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b76      	ldr	r3, [pc, #472]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b70      	ldr	r3, [pc, #448]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6c      	ldr	r2, [pc, #432]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b69      	ldr	r3, [pc, #420]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a68      	ldr	r2, [pc, #416]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b66      	ldr	r3, [pc, #408]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a65      	ldr	r2, [pc, #404]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
 80034e8:	f7ff fcfe 	bl	8002ee8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
 80034f0:	f7ff fcfa 	bl	8002ee8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
 80034fe:	2303      	movs	r3, #3
 8003500:	e207      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003502:	4b5b      	ldr	r3, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
 8003510:	f7ff fcea 	bl	8002ee8 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
 8003518:	f7ff fce6 	bl	8002ee8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
 8003526:	2303      	movs	r3, #3
 8003528:	e1f3      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 800352a:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
 8003538:	bf00      	nop
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x1de>
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x13a>
 8003552:	4b47      	ldr	r3, [pc, #284]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
 800355e:	4b44      	ldr	r3, [pc, #272]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
 800356a:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 800357e:	2301      	movs	r3, #1
 8003580:	e1c7      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003582:	4b3b      	ldr	r3, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4937      	ldr	r1, [pc, #220]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1b2>
 80035a0:	4b34      	ldr	r3, [pc, #208]	@ (8003674 <HAL_RCC_OscConfig+0x244>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f7ff fc9f 	bl	8002ee8 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x190>
 80035ae:	f7ff fc9b 	bl	8002ee8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x190>
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a8      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80035c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x17e>
 80035cc:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4925      	ldr	r1, [pc, #148]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
 80035e2:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <HAL_RCC_OscConfig+0x244>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f7ff fc7e 	bl	8002ee8 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1d2>
 80035f0:	f7ff fc7a 	bl	8002ee8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1d2>
 80035fe:	2303      	movs	r3, #3
 8003600:	e187      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003602:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1c0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d036      	beq.n	8003688 <HAL_RCC_OscConfig+0x258>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x220>
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_RCC_OscConfig+0x248>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f7ff fc5e 	bl	8002ee8 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
 8003630:	f7ff fc5a 	bl	8002ee8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x212>
 800363e:	2303      	movs	r3, #3
 8003640:	e167      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
 800364e:	e01b      	b.n	8003688 <HAL_RCC_OscConfig+0x258>
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_OscConfig+0x248>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f7ff fc47 	bl	8002ee8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]
 800365c:	e00e      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
 800365e:	f7ff fc43 	bl	8002ee8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d907      	bls.n	800367c <HAL_RCC_OscConfig+0x24c>
 800366c:	2303      	movs	r3, #3
 800366e:	e150      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	42470000 	.word	0x42470000
 8003678:	42470e80 	.word	0x42470e80
 800367c:	4b88      	ldr	r3, [pc, #544]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ea      	bne.n	800365e <HAL_RCC_OscConfig+0x22e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8097 	beq.w	80037c4 <HAL_RCC_OscConfig+0x394>
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
 800369a:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_RCC_OscConfig+0x296>
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	4b7d      	ldr	r3, [pc, #500]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a7c      	ldr	r2, [pc, #496]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
 80036c6:	4b77      	ldr	r3, [pc, #476]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2d4>
 80036d2:	4b74      	ldr	r3, [pc, #464]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a73      	ldr	r2, [pc, #460]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	f7ff fc03 	bl	8002ee8 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
 80036e6:	f7ff fbff 	bl	8002ee8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
 80036f4:	2303      	movs	r3, #3
 80036f6:	e10c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80036f8:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2b6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x2ea>
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a63      	ldr	r2, [pc, #396]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b05      	cmp	r3, #5
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x30c>
 8003722:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a5e      	ldr	r2, [pc, #376]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	4b5c      	ldr	r3, [pc, #368]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a5b      	ldr	r2, [pc, #364]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800373c:	4b58      	ldr	r3, [pc, #352]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	4b55      	ldr	r3, [pc, #340]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	4a54      	ldr	r2, [pc, #336]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	@ 0x70
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCC_OscConfig+0x358>
 800375c:	f7ff fbc4 	bl	8002ee8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x34a>
 8003764:	f7ff fbc0 	bl	8002ee8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x34a>
 8003776:	2303      	movs	r3, #3
 8003778:	e0cb      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 800377a:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCC_OscConfig+0x334>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x382>
 8003788:	f7ff fbae 	bl	8002ee8 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
 8003790:	f7ff fbaa 	bl	8002ee8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x376>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0b5      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80037a6:	4b3e      	ldr	r3, [pc, #248]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ee      	bne.n	8003790 <HAL_RCC_OscConfig+0x360>
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x394>
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	4a38      	ldr	r2, [pc, #224]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a1 	beq.w	8003910 <HAL_RCC_OscConfig+0x4e0>
 80037ce:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d05c      	beq.n	8003894 <HAL_RCC_OscConfig+0x464>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d141      	bne.n	8003866 <HAL_RCC_OscConfig+0x436>
 80037e2:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f7ff fb7e 	bl	8002ee8 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x3d2>
 80037f0:	f7ff fb7a 	bl	8002ee8 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x3d2>
 80037fe:	2303      	movs	r3, #3
 8003800:	e087      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x3c0>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	3b01      	subs	r3, #1
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	491b      	ldr	r1, [pc, #108]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f7ff fb53 	bl	8002ee8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x428>
 8003846:	f7ff fb4f 	bl	8002ee8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x428>
 8003854:	2303      	movs	r3, #3
 8003856:	e05c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x416>
 8003864:	e054      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f7ff fb3c 	bl	8002ee8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x456>
 8003874:	f7ff fb38 	bl	8002ee8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x456>
 8003882:	2303      	movs	r3, #3
 8003884:	e045      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x444>
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x47c>
 800389c:	2301      	movs	r3, #1
 800389e:	e038      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470060 	.word	0x42470060
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x4ec>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d028      	beq.n	800390c <HAL_RCC_OscConfig+0x4dc>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d121      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d11a      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e2:	0192      	lsls	r2, r2, #6
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	3b01      	subs	r3, #1
 80038f6:	041b      	lsls	r3, r3, #16
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x4e0>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003910:	2300      	movs	r3, #0
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_RCC_ClockConfig>:
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x14>
 8003930:	2301      	movs	r3, #1
 8003932:	e0cc      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 8003934:	4b68      	ldr	r3, [pc, #416]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d90c      	bls.n	800395c <HAL_RCC_ClockConfig+0x3c>
 8003942:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x3c>
 8003958:	2301      	movs	r3, #1
 800395a:	e0b8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_ClockConfig+0x8a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x60>
 8003974:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a58      	ldr	r2, [pc, #352]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800397e:	6093      	str	r3, [r2, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x78>
 800398c:	4b53      	ldr	r3, [pc, #332]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a52      	ldr	r2, [pc, #328]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003996:	6093      	str	r3, [r2, #8]
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	494d      	ldr	r1, [pc, #308]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d044      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x120>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xae>
 80039be:	4b47      	ldr	r3, [pc, #284]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d119      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e07f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d003      	beq.n	80039de <HAL_RCC_ClockConfig+0xbe>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xce>
 80039de:	4b3f      	ldr	r3, [pc, #252]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 80039ee:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e067      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 80039fe:	4b37      	ldr	r3, [pc, #220]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4934      	ldr	r1, [pc, #208]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]
 8003a10:	f7ff fa6a 	bl	8002ee8 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
 8003a18:	f7ff fa66 	bl	8002ee8 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e04f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 8003a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf8>
 8003a40:	4b25      	ldr	r3, [pc, #148]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d20c      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x148>
 8003a4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	4b20      	ldr	r3, [pc, #128]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x148>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e032      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x166>
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4916      	ldr	r1, [pc, #88]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x186>
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490e      	ldr	r1, [pc, #56]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
 8003aa6:	f000 f821 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490a      	ldr	r1, [pc, #40]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f8c4 	bl	8002c54 <HAL_InitTick>
 8003acc:	2300      	movs	r3, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08007f84 	.word	0x08007f84
 8003ae4:	20000058 	.word	0x20000058
 8003ae8:	2000005c 	.word	0x2000005c

08003aec <HAL_RCC_GetSysClockFreq>:
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b090      	sub	sp, #64	@ 0x40
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	2300      	movs	r3, #0
 8003af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af8:	2300      	movs	r3, #0
 8003afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003afc:	2300      	movs	r3, #0
 8003afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b00:	2300      	movs	r3, #0
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b04:	4b59      	ldr	r3, [pc, #356]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d00d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x40>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f200 80a1 	bhi.w	8003c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1e:	e09b      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b20:	4b53      	ldr	r3, [pc, #332]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b24:	e09b      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x172>
 8003b26:	4b53      	ldr	r3, [pc, #332]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b2a:	e098      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x172>
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b36:	4b4d      	ldr	r3, [pc, #308]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0xa8>
 8003b42:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b54:	2100      	movs	r1, #0
 8003b56:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b58:	fb03 f201 	mul.w	r2, r3, r1
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	4a43      	ldr	r2, [pc, #268]	@ (8003c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b66:	fba0 1202 	umull	r1, r2, r0, r2
 8003b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b72:	4413      	add	r3, r2
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	61fa      	str	r2, [r7, #28]
 8003b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b86:	f7fc ffa1 	bl	8000acc <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4613      	mov	r3, r2
 8003b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b92:	e053      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x150>
 8003b94:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	617a      	str	r2, [r7, #20]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ba6:	f04f 0b00 	mov.w	fp, #0
 8003baa:	4652      	mov	r2, sl
 8003bac:	465b      	mov	r3, fp
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	0159      	lsls	r1, r3, #5
 8003bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbc:	0150      	lsls	r0, r2, #5
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003bc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bde:	ebb2 0408 	subs.w	r4, r2, r8
 8003be2:	eb63 0509 	sbc.w	r5, r3, r9
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	00eb      	lsls	r3, r5, #3
 8003bf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf4:	00e2      	lsls	r2, r4, #3
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	461d      	mov	r5, r3
 8003bfa:	eb14 030a 	adds.w	r3, r4, sl
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	eb45 030b 	adc.w	r3, r5, fp
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c12:	4629      	mov	r1, r5
 8003c14:	028b      	lsls	r3, r1, #10
 8003c16:	4621      	mov	r1, r4
 8003c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	028a      	lsls	r2, r1, #10
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c26:	2200      	movs	r2, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c30:	f7fc ff4c 	bl	8000acc <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x172>
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c5c:	bf00      	nop
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	4618      	mov	r0, r3
 8003c62:	3740      	adds	r7, #64	@ 0x40
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	017d7840 	.word	0x017d7840

08003c78 <HAL_RCC_GetHCLKFreq>:
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	4b03      	ldr	r3, [pc, #12]	@ (8003c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000058 	.word	0x20000058

08003c90 <HAL_RCC_GetPCLK1Freq>:
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	f7ff fff0 	bl	8003c78 <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08007f94 	.word	0x08007f94

08003cb8 <HAL_RCC_GetClockConfig>:
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	08db      	lsrs	r3, r3, #3
 8003cf2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <HAL_RCC_GetClockConfig+0x60>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0207 	and.w	r2, r3, #7
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40023c00 	.word	0x40023c00

08003d1c <HAL_SPI_Init>:
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_SPI_Init+0x12>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07b      	b.n	8003e26 <HAL_SPI_Init+0x10a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_SPI_Init+0x2c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3e:	d009      	beq.n	8003d54 <HAL_SPI_Init+0x38>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
 8003d46:	e005      	b.n	8003d54 <HAL_SPI_Init+0x38>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	615a      	str	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_SPI_Init+0x58>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fed2 	bl	8002b18 <HAL_SPI_MspInit>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	ea42 0103 	orr.w	r1, r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	f003 0104 	and.w	r1, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	f003 0210 	and.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e14:	61da      	str	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003e24:	2300      	movs	r3, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SPI_Transmit>:
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b088      	sub	sp, #32
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	603b      	str	r3, [r7, #0]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_SPI_Transmit+0x22>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e12d      	b.n	80040ac <HAL_SPI_Transmit+0x27e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003e58:	f7ff f846 	bl	8002ee8 <HAL_GetTick>
 8003e5c:	61b8      	str	r0, [r7, #24]
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	82fb      	strh	r3, [r7, #22]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d002      	beq.n	8003e74 <HAL_SPI_Transmit+0x46>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e116      	b.n	80040a2 <HAL_SPI_Transmit+0x274>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Transmit+0x52>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <HAL_SPI_Transmit+0x58>
 8003e80:	2301      	movs	r3, #1
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e10d      	b.n	80040a2 <HAL_SPI_Transmit+0x274>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	869a      	strh	r2, [r3, #52]	@ 0x34
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ecc:	d10f      	bne.n	8003eee <HAL_SPI_Transmit+0xc0>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d007      	beq.n	8003f0c <HAL_SPI_Transmit+0xde>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f14:	d14f      	bne.n	8003fb6 <HAL_SPI_Transmit+0x188>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Transmit+0xf6>
 8003f1e:	8afb      	ldrh	r3, [r7, #22]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d142      	bne.n	8003faa <HAL_SPI_Transmit+0x17c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	881a      	ldrh	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	1c9a      	adds	r2, r3, #2
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f48:	e02f      	b.n	8003faa <HAL_SPI_Transmit+0x17c>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d112      	bne.n	8003f7e <HAL_SPI_Transmit+0x150>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f7c:	e015      	b.n	8003faa <HAL_SPI_Transmit+0x17c>
 8003f7e:	f7fe ffb3 	bl	8002ee8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d803      	bhi.n	8003f96 <HAL_SPI_Transmit+0x168>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d102      	bne.n	8003f9c <HAL_SPI_Transmit+0x16e>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <HAL_SPI_Transmit+0x17c>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003fa8:	e07b      	b.n	80040a2 <HAL_SPI_Transmit+0x274>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ca      	bne.n	8003f4a <HAL_SPI_Transmit+0x11c>
 8003fb4:	e050      	b.n	8004058 <HAL_SPI_Transmit+0x22a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_SPI_Transmit+0x196>
 8003fbe:	8afb      	ldrh	r3, [r7, #22]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d144      	bne.n	800404e <HAL_SPI_Transmit+0x220>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fea:	e030      	b.n	800404e <HAL_SPI_Transmit+0x220>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d113      	bne.n	8004022 <HAL_SPI_Transmit+0x1f4>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004020:	e015      	b.n	800404e <HAL_SPI_Transmit+0x220>
 8004022:	f7fe ff61 	bl	8002ee8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d803      	bhi.n	800403a <HAL_SPI_Transmit+0x20c>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d102      	bne.n	8004040 <HAL_SPI_Transmit+0x212>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_SPI_Transmit+0x220>
 8004040:	2303      	movs	r3, #3
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800404c:	e029      	b.n	80040a2 <HAL_SPI_Transmit+0x274>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1c9      	bne.n	8003fec <HAL_SPI_Transmit+0x1be>
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f8bf 	bl	80041e0 <SPI_EndRxTxTransaction>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SPI_Transmit+0x240>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <HAL_SPI_Transmit+0x25e>
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_SPI_Transmit+0x26c>
 8004094:	2301      	movs	r3, #1
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e003      	b.n	80040a2 <HAL_SPI_Transmit+0x274>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80040aa:	7ffb      	ldrb	r3, [r7, #31]
 80040ac:	4618      	mov	r0, r3
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_SPI_GetState>:
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <SPI_WaitFlagStateUntilTimeout>:
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	71fb      	strb	r3, [r7, #7]
 80040e0:	f7fe ff02 	bl	8002ee8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	f7fe fefa 	bl	8002ee8 <HAL_GetTick>
 80040f4:	61b8      	str	r0, [r7, #24]
 80040f6:	4b39      	ldr	r3, [pc, #228]	@ (80041dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	015b      	lsls	r3, r3, #5
 80040fc:	0d1b      	lsrs	r3, r3, #20
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e054      	b.n	80041b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d050      	beq.n	80041b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004110:	f7fe feea 	bl	8002ee8 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	429a      	cmp	r2, r3
 800411e:	d902      	bls.n	8004126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d13d      	bne.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413e:	d111      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004148:	d004      	beq.n	8004154 <SPI_WaitFlagStateUntilTimeout+0x84>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004152:	d107      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416c:	d10f      	bne.n	800418e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800419e:	2303      	movs	r3, #3
 80041a0:	e017      	b.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0x102>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0xdc>
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d19b      	bne.n	8004108 <SPI_WaitFlagStateUntilTimeout+0x38>
 80041d0:	2300      	movs	r3, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000058 	.word	0x20000058

080041e0 <SPI_EndRxTxTransaction>:
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2201      	movs	r2, #1
 80041f4:	2102      	movs	r1, #2
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff ff6a 	bl	80040d0 <SPI_WaitFlagStateUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <SPI_EndRxTxTransaction+0x32>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54
 800420e:	2303      	movs	r3, #3
 8004210:	e032      	b.n	8004278 <SPI_EndRxTxTransaction+0x98>
 8004212:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <SPI_EndRxTxTransaction+0xa0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1b      	ldr	r2, [pc, #108]	@ (8004284 <SPI_EndRxTxTransaction+0xa4>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	0d5b      	lsrs	r3, r3, #21
 800421e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004230:	d112      	bne.n	8004258 <SPI_EndRxTxTransaction+0x78>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2200      	movs	r2, #0
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff ff47 	bl	80040d0 <SPI_WaitFlagStateUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d016      	beq.n	8004276 <SPI_EndRxTxTransaction+0x96>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
 8004254:	2303      	movs	r3, #3
 8004256:	e00f      	b.n	8004278 <SPI_EndRxTxTransaction+0x98>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <SPI_EndRxTxTransaction+0x94>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3b01      	subs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426e:	2b80      	cmp	r3, #128	@ 0x80
 8004270:	d0f2      	beq.n	8004258 <SPI_EndRxTxTransaction+0x78>
 8004272:	e000      	b.n	8004276 <SPI_EndRxTxTransaction+0x96>
 8004274:	bf00      	nop
 8004276:	2300      	movs	r3, #0
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000058 	.word	0x20000058
 8004284:	165e9f81 	.word	0x165e9f81

08004288 <HAL_TIM_Base_Init>:
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_TIM_Base_Init+0x12>
 8004296:	2301      	movs	r3, #1
 8004298:	e041      	b.n	800431e <HAL_TIM_Base_Init+0x96>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_Base_Init+0x2c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f839 	bl	8004326 <HAL_TIM_Base_MspInit>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 f9b2 	bl	8004630 <TIM_Base_SetConfig>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800431c:	2300      	movs	r3, #0
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_Base_MspInit>:
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <HAL_TIM_Base_Start_IT>:
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d001      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x18>
 8004350:	2301      	movs	r3, #1
 8004352:	e044      	b.n	80043de <HAL_TIM_Base_Start_IT+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1e      	ldr	r2, [pc, #120]	@ (80043ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d018      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437e:	d013      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00e      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x6c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <HAL_TIM_Base_Start_IT+0xc0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d111      	bne.n	80043cc <HAL_TIM_Base_Start_IT+0x90>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b06      	cmp	r3, #6
 80043b8:	d010      	beq.n	80043dc <HAL_TIM_Base_Start_IT+0xa0>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e007      	b.n	80043dc <HAL_TIM_Base_Start_IT+0xa0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	2300      	movs	r3, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40014000 	.word	0x40014000

08004400 <HAL_TIM_IRQHandler>:
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d020      	beq.n	8004464 <HAL_TIM_IRQHandler+0x64>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_TIM_IRQHandler+0x64>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0202 	mvn.w	r2, #2
 8004434:	611a      	str	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	771a      	strb	r2, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x52>
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8d2 	bl	80045f4 <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0x5e>
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f8c4 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f8d5 	bl	8004608 <HAL_TIM_PWM_PulseFinishedCallback>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d020      	beq.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0204 	mvn.w	r2, #4
 8004480:	611a      	str	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	771a      	strb	r2, [r3, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x9e>
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8ac 	bl	80045f4 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xaa>
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f89e 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8af 	bl	8004608 <HAL_TIM_PWM_PulseFinishedCallback>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d020      	beq.n	80044fc <HAL_TIM_IRQHandler+0xfc>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <HAL_TIM_IRQHandler+0xfc>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0208 	mvn.w	r2, #8
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2204      	movs	r2, #4
 80044d2:	771a      	strb	r2, [r3, #28]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0xea>
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f886 	bl	80045f4 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xf6>
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f878 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f889 	bl	8004608 <HAL_TIM_PWM_PulseFinishedCallback>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d020      	beq.n	8004548 <HAL_TIM_IRQHandler+0x148>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <HAL_TIM_IRQHandler+0x148>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0210 	mvn.w	r2, #16
 8004518:	611a      	str	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2208      	movs	r2, #8
 800451e:	771a      	strb	r2, [r3, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0x136>
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f860 	bl	80045f4 <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0x142>
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f852 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f863 	bl	8004608 <HAL_TIM_PWM_PulseFinishedCallback>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_TIM_IRQHandler+0x16c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_TIM_IRQHandler+0x16c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0201 	mvn.w	r2, #1
 8004564:	611a      	str	r2, [r3, #16]
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fe fa95 	bl	8002a96 <HAL_TIM_PeriodElapsedCallback>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_TIM_IRQHandler+0x190>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_TIM_IRQHandler+0x190>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004588:	611a      	str	r2, [r3, #16]
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8e6 	bl	800475c <HAL_TIMEx_BreakCallback>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x1b4>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x1b4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f834 	bl	800461c <HAL_TIM_TriggerCallback>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x1d8>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x1d8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0220 	mvn.w	r2, #32
 80045d0:	611a      	str	r2, [r3, #16]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8b8 	bl	8004748 <HAL_TIMEx_CommutCallback>
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_TIM_OC_DelayElapsedCallback>:
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIM_IC_CaptureCallback>:
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIM_TriggerCallback>:
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <TIM_Base_SetConfig>:
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3a      	ldr	r2, [pc, #232]	@ (800472c <TIM_Base_SetConfig+0xfc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00f      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a37      	ldr	r2, [pc, #220]	@ (8004730 <TIM_Base_SetConfig+0x100>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a36      	ldr	r2, [pc, #216]	@ (8004734 <TIM_Base_SetConfig+0x104>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0x38>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a35      	ldr	r2, [pc, #212]	@ (8004738 <TIM_Base_SetConfig+0x108>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d108      	bne.n	800467a <TIM_Base_SetConfig+0x4a>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2b      	ldr	r2, [pc, #172]	@ (800472c <TIM_Base_SetConfig+0xfc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01b      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d017      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a28      	ldr	r2, [pc, #160]	@ (8004730 <TIM_Base_SetConfig+0x100>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a27      	ldr	r2, [pc, #156]	@ (8004734 <TIM_Base_SetConfig+0x104>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00f      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a26      	ldr	r2, [pc, #152]	@ (8004738 <TIM_Base_SetConfig+0x108>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a25      	ldr	r2, [pc, #148]	@ (800473c <TIM_Base_SetConfig+0x10c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a24      	ldr	r2, [pc, #144]	@ (8004740 <TIM_Base_SetConfig+0x110>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <TIM_Base_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0x9c>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <TIM_Base_SetConfig+0xfc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0xd0>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <TIM_Base_SetConfig+0xee>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <HAL_TIMEx_CommutCallback>:
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_TIMEx_BreakCallback>:
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <__NVIC_SetPriority>:
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	71fb      	strb	r3, [r7, #7]
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	2b00      	cmp	r3, #0
 8004782:	db0a      	blt.n	800479a <__NVIC_SetPriority+0x2a>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	490c      	ldr	r1, [pc, #48]	@ (80047bc <__NVIC_SetPriority+0x4c>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	0112      	lsls	r2, r2, #4
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	440b      	add	r3, r1
 8004794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8004798:	e00a      	b.n	80047b0 <__NVIC_SetPriority+0x40>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4908      	ldr	r1, [pc, #32]	@ (80047c0 <__NVIC_SetPriority+0x50>)
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	3b04      	subs	r3, #4
 80047a8:	0112      	lsls	r2, r2, #4
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	440b      	add	r3, r1
 80047ae:	761a      	strb	r2, [r3, #24]
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000e100 	.word	0xe000e100
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <SysTick_Handler>:
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <SysTick_Handler+0x1c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f001 fd46 	bl	800625c <xTaskGetSchedulerState>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d001      	beq.n	80047da <SysTick_Handler+0x16>
 80047d6:	f002 fb9f 	bl	8006f18 <xPortSysTickHandler>
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010

080047e4 <SVC_Setup>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	2100      	movs	r1, #0
 80047ea:	f06f 0004 	mvn.w	r0, #4
 80047ee:	f7ff ffbf 	bl	8004770 <__NVIC_SetPriority>
 80047f2:	bf00      	nop
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <osKernelInitialize>:
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	f3ef 8305 	mrs	r3, IPSR
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <osKernelInitialize+0x1a>
 800480a:	f06f 0305 	mvn.w	r3, #5
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	e00c      	b.n	800482c <osKernelInitialize+0x34>
 8004812:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <osKernelInitialize+0x44>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <osKernelInitialize+0x2e>
 800481a:	4b08      	ldr	r3, [pc, #32]	@ (800483c <osKernelInitialize+0x44>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	e002      	b.n	800482c <osKernelInitialize+0x34>
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2000022c 	.word	0x2000022c

08004840 <osKernelStart>:
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	f3ef 8305 	mrs	r3, IPSR
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <osKernelStart+0x1a>
 8004852:	f06f 0305 	mvn.w	r3, #5
 8004856:	607b      	str	r3, [r7, #4]
 8004858:	e010      	b.n	800487c <osKernelStart+0x3c>
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <osKernelStart+0x48>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d109      	bne.n	8004876 <osKernelStart+0x36>
 8004862:	f7ff ffbf 	bl	80047e4 <SVC_Setup>
 8004866:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <osKernelStart+0x48>)
 8004868:	2202      	movs	r2, #2
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f001 f892 	bl	8005994 <vTaskStartScheduler>
 8004870:	2300      	movs	r3, #0
 8004872:	607b      	str	r3, [r7, #4]
 8004874:	e002      	b.n	800487c <osKernelStart+0x3c>
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	2000022c 	.word	0x2000022c

0800488c <osThreadNew>:
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	@ 0x38
 8004890:	af04      	add	r7, sp, #16
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	f3ef 8305 	mrs	r3, IPSR
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d17e      	bne.n	80049a6 <osThreadNew+0x11a>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d07b      	beq.n	80049a6 <osThreadNew+0x11a>
 80048ae:	2380      	movs	r3, #128	@ 0x80
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	2318      	movs	r3, #24
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d045      	beq.n	8004952 <osThreadNew+0xc6>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <osThreadNew+0x48>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <osThreadNew+0x56>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <osThreadNew+0x6e>
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b38      	cmp	r3, #56	@ 0x38
 80048ec:	d805      	bhi.n	80048fa <osThreadNew+0x6e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <osThreadNew+0x72>
 80048fa:	2300      	movs	r3, #0
 80048fc:	e054      	b.n	80049a8 <osThreadNew+0x11c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <osThreadNew+0x82>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00e      	beq.n	8004934 <osThreadNew+0xa8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2ba7      	cmp	r3, #167	@ 0xa7
 800491c:	d90a      	bls.n	8004934 <osThreadNew+0xa8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <osThreadNew+0xa8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <osThreadNew+0xa8>
 800492e:	2301      	movs	r3, #1
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e010      	b.n	8004956 <osThreadNew+0xca>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10c      	bne.n	8004956 <osThreadNew+0xca>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d108      	bne.n	8004956 <osThreadNew+0xca>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <osThreadNew+0xca>
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	e001      	b.n	8004956 <osThreadNew+0xca>
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d110      	bne.n	800497e <osThreadNew+0xf2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6892      	ldr	r2, [r2, #8]
 8004964:	9202      	str	r2, [sp, #8]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6a3a      	ldr	r2, [r7, #32]
 8004970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fe1a 	bl	80055ac <xTaskCreateStatic>
 8004978:	4603      	mov	r3, r0
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	e013      	b.n	80049a6 <osThreadNew+0x11a>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d110      	bne.n	80049a6 <osThreadNew+0x11a>
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	b29a      	uxth	r2, r3
 8004988:	f107 0310 	add.w	r3, r7, #16
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fe68 	bl	800566c <xTaskCreate>
 800499c:	4603      	mov	r3, r0
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <osThreadNew+0x11a>
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4618      	mov	r0, r3
 80049aa:	3728      	adds	r7, #40	@ 0x28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <osDelay>:
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	f3ef 8305 	mrs	r3, IPSR
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <osDelay+0x1c>
 80049c4:	f06f 0305 	mvn.w	r3, #5
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e007      	b.n	80049dc <osDelay+0x2c>
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <osDelay+0x2c>
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 ffa6 	bl	8005928 <vTaskDelay>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <vApplicationGetIdleTaskMemory>:
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <vApplicationGetIdleTaskMemory+0x2c>)
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4a06      	ldr	r2, [pc, #24]	@ (8004a18 <vApplicationGetIdleTaskMemory+0x30>)
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2280      	movs	r2, #128	@ 0x80
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000230 	.word	0x20000230
 8004a18:	200002d8 	.word	0x200002d8

08004a1c <vApplicationGetTimerTaskMemory>:
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a07      	ldr	r2, [pc, #28]	@ (8004a48 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4a06      	ldr	r2, [pc, #24]	@ (8004a4c <vApplicationGetTimerTaskMemory+0x30>)
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	200004d8 	.word	0x200004d8
 8004a4c:	20000580 	.word	0x20000580

08004a50 <vListInitialise>:
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f103 0208 	add.w	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f103 0208 	add.w	r2, r3, #8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	60da      	str	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f103 0208 	add.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	611a      	str	r2, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <vListInitialiseItem>:
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <vListInsertEnd>:
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	605a      	str	r2, [r3, #4]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	609a      	str	r2, [r3, #8]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	611a      	str	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <vListInsert>:
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d103      	bne.n	8004b12 <vListInsert+0x20>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e00c      	b.n	8004b2c <vListInsert+0x3a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3308      	adds	r3, #8
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e002      	b.n	8004b20 <vListInsert+0x2e>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d2f6      	bcs.n	8004b1a <vListInsert+0x28>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	611a      	str	r2, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <uxListRemove>:
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6892      	ldr	r2, [r2, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6852      	ldr	r2, [r2, #4]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d103      	bne.n	8004b98 <uxListRemove+0x34>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1e5a      	subs	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <xQueueGenericReset>:
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <xQueueGenericReset+0x2c>
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xQueueGenericReset+0x28>
 8004be4:	f002 f908 	bl	8006df8 <vPortEnterCritical>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	3b01      	subs	r3, #1
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	441a      	add	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	60da      	str	r2, [r3, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	22ff      	movs	r2, #255	@ 0xff
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	22ff      	movs	r2, #255	@ 0xff
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d114      	bne.n	8004c64 <xQueueGenericReset+0xac>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01a      	beq.n	8004c78 <xQueueGenericReset+0xc0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3310      	adds	r3, #16
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f942 	bl	8005ed0 <xTaskRemoveFromEventList>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d012      	beq.n	8004c78 <xQueueGenericReset+0xc0>
 8004c52:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <xQueueGenericReset+0xd0>)
 8004c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	e009      	b.n	8004c78 <xQueueGenericReset+0xc0>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3310      	adds	r3, #16
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fef1 	bl	8004a50 <vListInitialise>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3324      	adds	r3, #36	@ 0x24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff feec 	bl	8004a50 <vListInitialise>
 8004c78:	f002 f8f0 	bl	8006e5c <vPortExitCritical>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <xQueueGenericCreateStatic>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08e      	sub	sp, #56	@ 0x38
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xQueueGenericCreateStatic+0x2c>
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericCreateStatic+0x28>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <xQueueGenericCreateStatic+0x4a>
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <xQueueGenericCreateStatic+0x46>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d002      	beq.n	8004ce2 <xQueueGenericCreateStatic+0x56>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <xQueueGenericCreateStatic+0x5a>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <xQueueGenericCreateStatic+0x5c>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <xQueueGenericCreateStatic+0x78>
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <xQueueGenericCreateStatic+0x74>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <xQueueGenericCreateStatic+0x84>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <xQueueGenericCreateStatic+0x88>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <xQueueGenericCreateStatic+0x8a>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xQueueGenericCreateStatic+0xa6>
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xQueueGenericCreateStatic+0xa2>
 8004d32:	2350      	movs	r3, #80	@ 0x50
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b50      	cmp	r3, #80	@ 0x50
 8004d3a:	d00b      	beq.n	8004d54 <xQueueGenericCreateStatic+0xc8>
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueGenericCreateStatic+0xc4>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <xQueueGenericCreateStatic+0xf0>
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f805 	bl	8004d86 <prvInitialiseNewQueue>
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3730      	adds	r7, #48	@ 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <prvInitialiseNewQueue>:
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	70fb      	strb	r3, [r7, #3]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <prvInitialiseNewQueue+0x1c>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e002      	b.n	8004da8 <prvInitialiseNewQueue+0x22>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40
 8004db4:	2101      	movs	r1, #1
 8004db6:	69b8      	ldr	r0, [r7, #24]
 8004db8:	f7ff fefe 	bl	8004bb8 <xQueueGenericReset>
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <xQueueGenericSend>:
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	@ 0x38
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <xQueueGenericSend+0x34>
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xQueueGenericSend+0x30>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <xQueueGenericSend+0x42>
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <xQueueGenericSend+0x46>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <xQueueGenericSend+0x48>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <xQueueGenericSend+0x64>
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueGenericSend+0x60>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d103      	bne.n	8004e3e <xQueueGenericSend+0x72>
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <xQueueGenericSend+0x76>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <xQueueGenericSend+0x78>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <xQueueGenericSend+0x94>
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <xQueueGenericSend+0x90>
 8004e60:	f001 f9fc 	bl	800625c <xTaskGetSchedulerState>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <xQueueGenericSend+0xa4>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <xQueueGenericSend+0xa8>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <xQueueGenericSend+0xaa>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10b      	bne.n	8004e92 <xQueueGenericSend+0xc6>
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <xQueueGenericSend+0xc2>
 8004e92:	f001 ffb1 	bl	8006df8 <vPortEnterCritical>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <xQueueGenericSend+0xdc>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d129      	bne.n	8004efc <xQueueGenericSend+0x130>
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eae:	f000 fa0f 	bl	80052d0 <prvCopyDataToQueue>
 8004eb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <xQueueGenericSend+0x112>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	3324      	adds	r3, #36	@ 0x24
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 f805 	bl	8005ed0 <xTaskRemoveFromEventList>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <xQueueGenericSend+0x128>
 8004ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8004fcc <xQueueGenericSend+0x200>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	e00a      	b.n	8004ef4 <xQueueGenericSend+0x128>
 8004ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <xQueueGenericSend+0x128>
 8004ee4:	4b39      	ldr	r3, [pc, #228]	@ (8004fcc <xQueueGenericSend+0x200>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f001 ffb2 	bl	8006e5c <vPortExitCritical>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e063      	b.n	8004fc4 <xQueueGenericSend+0x1f8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <xQueueGenericSend+0x13e>
 8004f02:	f001 ffab 	bl	8006e5c <vPortExitCritical>
 8004f06:	2300      	movs	r3, #0
 8004f08:	e05c      	b.n	8004fc4 <xQueueGenericSend+0x1f8>
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <xQueueGenericSend+0x152>
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 f83f 	bl	8005f98 <vTaskInternalSetTimeOutState>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1e:	f001 ff9d 	bl	8006e5c <vPortExitCritical>
 8004f22:	f000 fda7 	bl	8005a74 <vTaskSuspendAll>
 8004f26:	f001 ff67 	bl	8006df8 <vPortEnterCritical>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f30:	b25b      	sxtb	r3, r3
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d103      	bne.n	8004f40 <xQueueGenericSend+0x174>
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f46:	b25b      	sxtb	r3, r3
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d103      	bne.n	8004f56 <xQueueGenericSend+0x18a>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f56:	f001 ff81 	bl	8006e5c <vPortExitCritical>
 8004f5a:	1d3a      	adds	r2, r7, #4
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 f82e 	bl	8005fc4 <xTaskCheckForTimeOut>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d124      	bne.n	8004fb8 <xQueueGenericSend+0x1ec>
 8004f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f70:	f000 faa6 	bl	80054c0 <prvIsQueueFull>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <xQueueGenericSend+0x1e0>
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 ff52 	bl	8005e2c <vTaskPlaceOnEventList>
 8004f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f8a:	f000 fa31 	bl	80053f0 <prvUnlockQueue>
 8004f8e:	f000 fd7f 	bl	8005a90 <xTaskResumeAll>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f47f af7c 	bne.w	8004e92 <xQueueGenericSend+0xc6>
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <xQueueGenericSend+0x200>)
 8004f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	e772      	b.n	8004e92 <xQueueGenericSend+0xc6>
 8004fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fae:	f000 fa1f 	bl	80053f0 <prvUnlockQueue>
 8004fb2:	f000 fd6d 	bl	8005a90 <xTaskResumeAll>
 8004fb6:	e76c      	b.n	8004e92 <xQueueGenericSend+0xc6>
 8004fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fba:	f000 fa19 	bl	80053f0 <prvUnlockQueue>
 8004fbe:	f000 fd67 	bl	8005a90 <xTaskResumeAll>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3738      	adds	r7, #56	@ 0x38
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	e000ed04 	.word	0xe000ed04

08004fd0 <xQueueGenericSendFromISR>:
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b090      	sub	sp, #64	@ 0x40
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <xQueueGenericSendFromISR+0x30>
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xQueueGenericSendFromISR+0x2c>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <xQueueGenericSendFromISR+0x3e>
 8005006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <xQueueGenericSendFromISR+0x42>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSendFromISR+0x44>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <xQueueGenericSendFromISR+0x60>
 8005018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	e7fd      	b.n	800502c <xQueueGenericSendFromISR+0x5c>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d103      	bne.n	800503e <xQueueGenericSendFromISR+0x6e>
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <xQueueGenericSendFromISR+0x72>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <xQueueGenericSendFromISR+0x74>
 8005042:	2300      	movs	r3, #0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <xQueueGenericSendFromISR+0x90>
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	e7fd      	b.n	800505c <xQueueGenericSendFromISR+0x8c>
 8005060:	f001 ffaa 	bl	8006fb8 <vPortValidateInterruptPriority>
 8005064:	f3ef 8211 	mrs	r2, BASEPRI
 8005068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	61fa      	str	r2, [r7, #28]
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <xQueueGenericSendFromISR+0xc2>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d12f      	bne.n	80050f2 <xQueueGenericSendFromISR+0x122>
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005098:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050a8:	f000 f912 	bl	80052d0 <prvCopyDataToQueue>
 80050ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d112      	bne.n	80050dc <xQueueGenericSendFromISR+0x10c>
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d016      	beq.n	80050ec <xQueueGenericSendFromISR+0x11c>
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	3324      	adds	r3, #36	@ 0x24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 ff04 	bl	8005ed0 <xTaskRemoveFromEventList>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <xQueueGenericSendFromISR+0x11c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <xQueueGenericSendFromISR+0x11c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e007      	b.n	80050ec <xQueueGenericSendFromISR+0x11c>
 80050dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050e0:	3301      	adds	r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	b25a      	sxtb	r2, r3
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ec:	2301      	movs	r3, #1
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050f0:	e001      	b.n	80050f6 <xQueueGenericSendFromISR+0x126>
 80050f2:	2300      	movs	r3, #0
 80050f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	bf00      	nop
 8005102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005104:	4618      	mov	r0, r3
 8005106:	3740      	adds	r7, #64	@ 0x40
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <xQueueReceive>:
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	@ 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <xQueueReceive+0x32>
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xQueueReceive+0x2e>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <xQueueReceive+0x40>
 8005144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <xQueueReceive+0x44>
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <xQueueReceive+0x46>
 8005150:	2300      	movs	r3, #0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10b      	bne.n	800516e <xQueueReceive+0x62>
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <xQueueReceive+0x5e>
 800516e:	f001 f875 	bl	800625c <xTaskGetSchedulerState>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <xQueueReceive+0x72>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <xQueueReceive+0x76>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <xQueueReceive+0x78>
 8005182:	2300      	movs	r3, #0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <xQueueReceive+0x94>
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xQueueReceive+0x90>
 80051a0:	f001 fe2a 	bl	8006df8 <vPortEnterCritical>
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <xQueueReceive+0xe4>
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b4:	f000 f8f6 	bl	80053a4 <prvCopyDataFromQueue>
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	639a      	str	r2, [r3, #56]	@ 0x38
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00f      	beq.n	80051e8 <xQueueReceive+0xdc>
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	3310      	adds	r3, #16
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fe7f 	bl	8005ed0 <xTaskRemoveFromEventList>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <xQueueReceive+0xdc>
 80051d8:	4b3c      	ldr	r3, [pc, #240]	@ (80052cc <xQueueReceive+0x1c0>)
 80051da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f001 fe38 	bl	8006e5c <vPortExitCritical>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e069      	b.n	80052c4 <xQueueReceive+0x1b8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <xQueueReceive+0xf2>
 80051f6:	f001 fe31 	bl	8006e5c <vPortExitCritical>
 80051fa:	2300      	movs	r3, #0
 80051fc:	e062      	b.n	80052c4 <xQueueReceive+0x1b8>
 80051fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <xQueueReceive+0x106>
 8005204:	f107 0310 	add.w	r3, r7, #16
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fec5 	bl	8005f98 <vTaskInternalSetTimeOutState>
 800520e:	2301      	movs	r3, #1
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005212:	f001 fe23 	bl	8006e5c <vPortExitCritical>
 8005216:	f000 fc2d 	bl	8005a74 <vTaskSuspendAll>
 800521a:	f001 fded 	bl	8006df8 <vPortEnterCritical>
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005224:	b25b      	sxtb	r3, r3
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d103      	bne.n	8005234 <xQueueReceive+0x128>
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800523a:	b25b      	sxtb	r3, r3
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d103      	bne.n	800524a <xQueueReceive+0x13e>
 8005242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800524a:	f001 fe07 	bl	8006e5c <vPortExitCritical>
 800524e:	1d3a      	adds	r2, r7, #4
 8005250:	f107 0310 	add.w	r3, r7, #16
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f000 feb4 	bl	8005fc4 <xTaskCheckForTimeOut>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d123      	bne.n	80052aa <xQueueReceive+0x19e>
 8005262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005264:	f000 f916 	bl	8005494 <prvIsQueueEmpty>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <xQueueReceive+0x192>
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	3324      	adds	r3, #36	@ 0x24
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fdd8 	bl	8005e2c <vTaskPlaceOnEventList>
 800527c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800527e:	f000 f8b7 	bl	80053f0 <prvUnlockQueue>
 8005282:	f000 fc05 	bl	8005a90 <xTaskResumeAll>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d189      	bne.n	80051a0 <xQueueReceive+0x94>
 800528c:	4b0f      	ldr	r3, [pc, #60]	@ (80052cc <xQueueReceive+0x1c0>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	e780      	b.n	80051a0 <xQueueReceive+0x94>
 800529e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a0:	f000 f8a6 	bl	80053f0 <prvUnlockQueue>
 80052a4:	f000 fbf4 	bl	8005a90 <xTaskResumeAll>
 80052a8:	e77a      	b.n	80051a0 <xQueueReceive+0x94>
 80052aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052ac:	f000 f8a0 	bl	80053f0 <prvUnlockQueue>
 80052b0:	f000 fbee 	bl	8005a90 <xTaskResumeAll>
 80052b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052b6:	f000 f8ed 	bl	8005494 <prvIsQueueEmpty>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f43f af6f 	beq.w	80051a0 <xQueueReceive+0x94>
 80052c2:	2300      	movs	r3, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	3730      	adds	r7, #48	@ 0x30
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <prvCopyDataToQueue>:
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10d      	bne.n	800530a <prvCopyDataToQueue+0x3a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d14d      	bne.n	8005392 <prvCopyDataToQueue+0xc2>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 ffcc 	bl	8006298 <xTaskPriorityDisinherit>
 8005300:	6178      	str	r0, [r7, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	e043      	b.n	8005392 <prvCopyDataToQueue+0xc2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d119      	bne.n	8005344 <prvCopyDataToQueue+0x74>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6858      	ldr	r0, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	461a      	mov	r2, r3
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	f002 f93a 	bl	8007594 <memcpy>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	441a      	add	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d32b      	bcc.n	8005392 <prvCopyDataToQueue+0xc2>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]
 8005342:	e026      	b.n	8005392 <prvCopyDataToQueue+0xc2>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68d8      	ldr	r0, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	461a      	mov	r2, r3
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	f002 f920 	bl	8007594 <memcpy>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	425b      	negs	r3, r3
 800535e:	441a      	add	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d207      	bcs.n	8005380 <prvCopyDataToQueue+0xb0>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	425b      	negs	r3, r3
 800537a:	441a      	add	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d105      	bne.n	8005392 <prvCopyDataToQueue+0xc2>
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <prvCopyDataToQueue+0xc2>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3b01      	subs	r3, #1
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <prvCopyDataFromQueue>:
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d018      	beq.n	80053e8 <prvCopyDataFromQueue+0x44>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	441a      	add	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d303      	bcc.n	80053d8 <prvCopyDataFromQueue+0x34>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68d9      	ldr	r1, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	461a      	mov	r2, r3
 80053e2:	6838      	ldr	r0, [r7, #0]
 80053e4:	f002 f8d6 	bl	8007594 <memcpy>
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvUnlockQueue>:
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	f001 fcfe 	bl	8006df8 <vPortEnterCritical>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e011      	b.n	800542a <prvUnlockQueue+0x3a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d012      	beq.n	8005434 <prvUnlockQueue+0x44>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3324      	adds	r3, #36	@ 0x24
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fd5c 	bl	8005ed0 <xTaskRemoveFromEventList>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <prvUnlockQueue+0x32>
 800541e:	f000 fe35 	bl	800608c <vTaskMissedYield>
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	3b01      	subs	r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	dce9      	bgt.n	8005406 <prvUnlockQueue+0x16>
 8005432:	e000      	b.n	8005436 <prvUnlockQueue+0x46>
 8005434:	bf00      	nop
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	22ff      	movs	r2, #255	@ 0xff
 800543a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800543e:	f001 fd0d 	bl	8006e5c <vPortExitCritical>
 8005442:	f001 fcd9 	bl	8006df8 <vPortEnterCritical>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800544c:	73bb      	strb	r3, [r7, #14]
 800544e:	e011      	b.n	8005474 <prvUnlockQueue+0x84>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <prvUnlockQueue+0x8e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3310      	adds	r3, #16
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fd37 	bl	8005ed0 <xTaskRemoveFromEventList>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <prvUnlockQueue+0x7c>
 8005468:	f000 fe10 	bl	800608c <vTaskMissedYield>
 800546c:	7bbb      	ldrb	r3, [r7, #14]
 800546e:	3b01      	subs	r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	73bb      	strb	r3, [r7, #14]
 8005474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dce9      	bgt.n	8005450 <prvUnlockQueue+0x60>
 800547c:	e000      	b.n	8005480 <prvUnlockQueue+0x90>
 800547e:	bf00      	nop
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	22ff      	movs	r2, #255	@ 0xff
 8005484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005488:	f001 fce8 	bl	8006e5c <vPortExitCritical>
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvIsQueueEmpty>:
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	f001 fcac 	bl	8006df8 <vPortEnterCritical>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <prvIsQueueEmpty+0x1a>
 80054a8:	2301      	movs	r3, #1
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e001      	b.n	80054b2 <prvIsQueueEmpty+0x1e>
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	f001 fcd3 	bl	8006e5c <vPortExitCritical>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <prvIsQueueFull>:
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	f001 fc96 	bl	8006df8 <vPortEnterCritical>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d102      	bne.n	80054de <prvIsQueueFull+0x1e>
 80054d8:	2301      	movs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e001      	b.n	80054e2 <prvIsQueueFull+0x22>
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	f001 fcbb 	bl	8006e5c <vPortExitCritical>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <vQueueAddToRegistry>:
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e014      	b.n	800552a <vQueueAddToRegistry+0x3a>
 8005500:	4a0f      	ldr	r2, [pc, #60]	@ (8005540 <vQueueAddToRegistry+0x50>)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10b      	bne.n	8005524 <vQueueAddToRegistry+0x34>
 800550c:	490c      	ldr	r1, [pc, #48]	@ (8005540 <vQueueAddToRegistry+0x50>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005516:	4a0a      	ldr	r2, [pc, #40]	@ (8005540 <vQueueAddToRegistry+0x50>)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e006      	b.n	8005532 <vQueueAddToRegistry+0x42>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b07      	cmp	r3, #7
 800552e:	d9e7      	bls.n	8005500 <vQueueAddToRegistry+0x10>
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000980 	.word	0x20000980

08005544 <vQueueWaitForMessageRestricted>:
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	f001 fc50 	bl	8006df8 <vPortEnterCritical>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800555e:	b25b      	sxtb	r3, r3
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d103      	bne.n	800556e <vQueueWaitForMessageRestricted+0x2a>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005574:	b25b      	sxtb	r3, r3
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d103      	bne.n	8005584 <vQueueWaitForMessageRestricted+0x40>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005584:	f001 fc6a 	bl	8006e5c <vPortExitCritical>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <vQueueWaitForMessageRestricted+0x5a>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	3324      	adds	r3, #36	@ 0x24
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fc6d 	bl	8005e78 <vTaskPlaceOnEventListRestricted>
 800559e:	6978      	ldr	r0, [r7, #20]
 80055a0:	f7ff ff26 	bl	80053f0 <prvUnlockQueue>
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <xTaskCreateStatic>:
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08e      	sub	sp, #56	@ 0x38
 80055b0:	af04      	add	r7, sp, #16
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <xTaskCreateStatic+0x2c>
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <xTaskCreateStatic+0x28>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <xTaskCreateStatic+0x4a>
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <xTaskCreateStatic+0x46>
 80055f6:	23a8      	movs	r3, #168	@ 0xa8
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2ba8      	cmp	r3, #168	@ 0xa8
 80055fe:	d00b      	beq.n	8005618 <xTaskCreateStatic+0x6c>
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xTaskCreateStatic+0x68>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01e      	beq.n	800565e <xTaskCreateStatic+0xb2>
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01b      	beq.n	800565e <xTaskCreateStatic+0xb2>
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800562e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	2202      	movs	r2, #2
 8005634:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 8005638:	2300      	movs	r3, #0
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	9302      	str	r3, [sp, #8]
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f851 	bl	80056f8 <prvInitialiseNewTask>
 8005656:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005658:	f000 f8f6 	bl	8005848 <prvAddNewTaskToReadyList>
 800565c:	e001      	b.n	8005662 <xTaskCreateStatic+0xb6>
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	4618      	mov	r0, r3
 8005666:	3728      	adds	r7, #40	@ 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <xTaskCreate>:
 800566c:	b580      	push	{r7, lr}
 800566e:	b08c      	sub	sp, #48	@ 0x30
 8005670:	af04      	add	r7, sp, #16
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fcdb 	bl	800703c <pvPortMalloc>
 8005686:	6178      	str	r0, [r7, #20]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00e      	beq.n	80056ac <xTaskCreate+0x40>
 800568e:	20a8      	movs	r0, #168	@ 0xa8
 8005690:	f001 fcd4 	bl	800703c <pvPortMalloc>
 8005694:	61f8      	str	r0, [r7, #28]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xTaskCreate+0x38>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80056a2:	e005      	b.n	80056b0 <xTaskCreate+0x44>
 80056a4:	6978      	ldr	r0, [r7, #20]
 80056a6:	f001 fd97 	bl	80071d8 <vPortFree>
 80056aa:	e001      	b.n	80056b0 <xTaskCreate+0x44>
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d017      	beq.n	80056e6 <xTaskCreate+0x7a>
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	2300      	movs	r3, #0
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	9302      	str	r3, [sp, #8]
 80056c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f80f 	bl	80056f8 <prvInitialiseNewTask>
 80056da:	69f8      	ldr	r0, [r7, #28]
 80056dc:	f000 f8b4 	bl	8005848 <prvAddNewTaskToReadyList>
 80056e0:	2301      	movs	r3, #1
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e002      	b.n	80056ec <xTaskCreate+0x80>
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <prvInitialiseNewTask>:
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
 8005706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005708:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	461a      	mov	r2, r3
 8005710:	21a5      	movs	r1, #165	@ 0xa5
 8005712:	f001 feb5 	bl	8007480 <memset>
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005720:	3b01      	subs	r3, #1
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <prvInitialiseNewTask+0x5a>
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <prvInitialiseNewTask+0x56>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01f      	beq.n	8005798 <prvInitialiseNewTask+0xa0>
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e012      	b.n	8005784 <prvInitialiseNewTask+0x8c>
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	3334      	adds	r3, #52	@ 0x34
 800576e:	460a      	mov	r2, r1
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <prvInitialiseNewTask+0x94>
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d9e9      	bls.n	800575e <prvInitialiseNewTask+0x66>
 800578a:	e000      	b.n	800578e <prvInitialiseNewTask+0x96>
 800578c:	bf00      	nop
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005796:	e003      	b.n	80057a0 <prvInitialiseNewTask+0xa8>
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	2b37      	cmp	r3, #55	@ 0x37
 80057a4:	d901      	bls.n	80057aa <prvInitialiseNewTask+0xb2>
 80057a6:	2337      	movs	r3, #55	@ 0x37
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	2200      	movs	r2, #0
 80057ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	3304      	adds	r3, #4
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff f965 	bl	8004a90 <vListInitialiseItem>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	3318      	adds	r3, #24
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff f960 	bl	8004a90 <vListInitialiseItem>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d4:	611a      	str	r2, [r3, #16]
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	619a      	str	r2, [r3, #24]
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	3354      	adds	r3, #84	@ 0x54
 80057fa:	224c      	movs	r2, #76	@ 0x4c
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fe3e 	bl	8007480 <memset>
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	4a0d      	ldr	r2, [pc, #52]	@ (800583c <prvInitialiseNewTask+0x144>)
 8005808:	659a      	str	r2, [r3, #88]	@ 0x58
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	4a0c      	ldr	r2, [pc, #48]	@ (8005840 <prvInitialiseNewTask+0x148>)
 800580e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	4a0c      	ldr	r2, [pc, #48]	@ (8005844 <prvInitialiseNewTask+0x14c>)
 8005814:	661a      	str	r2, [r3, #96]	@ 0x60
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	68f9      	ldr	r1, [r7, #12]
 800581a:	69b8      	ldr	r0, [r7, #24]
 800581c:	f001 f9b8 	bl	8006b90 <pxPortInitialiseStack>
 8005820:	4602      	mov	r2, r0
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <prvInitialiseNewTask+0x13a>
 800582c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	bf00      	nop
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20004c14 	.word	0x20004c14
 8005840:	20004c7c 	.word	0x20004c7c
 8005844:	20004ce4 	.word	0x20004ce4

08005848 <prvAddNewTaskToReadyList>:
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	f001 fad2 	bl	8006df8 <vPortEnterCritical>
 8005854:	4b2d      	ldr	r3, [pc, #180]	@ (800590c <prvAddNewTaskToReadyList+0xc4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	4a2c      	ldr	r2, [pc, #176]	@ (800590c <prvAddNewTaskToReadyList+0xc4>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <prvAddNewTaskToReadyList+0xc8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <prvAddNewTaskToReadyList+0x32>
 8005866:	4a2a      	ldr	r2, [pc, #168]	@ (8005910 <prvAddNewTaskToReadyList+0xc8>)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	4b27      	ldr	r3, [pc, #156]	@ (800590c <prvAddNewTaskToReadyList+0xc4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d110      	bne.n	8005896 <prvAddNewTaskToReadyList+0x4e>
 8005874:	f000 fc2e 	bl	80060d4 <prvInitialiseTaskLists>
 8005878:	e00d      	b.n	8005896 <prvAddNewTaskToReadyList+0x4e>
 800587a:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <prvAddNewTaskToReadyList+0xcc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <prvAddNewTaskToReadyList+0x4e>
 8005882:	4b23      	ldr	r3, [pc, #140]	@ (8005910 <prvAddNewTaskToReadyList+0xc8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	429a      	cmp	r2, r3
 800588e:	d802      	bhi.n	8005896 <prvAddNewTaskToReadyList+0x4e>
 8005890:	4a1f      	ldr	r2, [pc, #124]	@ (8005910 <prvAddNewTaskToReadyList+0xc8>)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4b20      	ldr	r3, [pc, #128]	@ (8005918 <prvAddNewTaskToReadyList+0xd0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	4a1e      	ldr	r2, [pc, #120]	@ (8005918 <prvAddNewTaskToReadyList+0xd0>)
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005918 <prvAddNewTaskToReadyList+0xd0>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <prvAddNewTaskToReadyList+0xd4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d903      	bls.n	80058bc <prvAddNewTaskToReadyList+0x74>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	4a18      	ldr	r2, [pc, #96]	@ (800591c <prvAddNewTaskToReadyList+0xd4>)
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a15      	ldr	r2, [pc, #84]	@ (8005920 <prvAddNewTaskToReadyList+0xd8>)
 80058ca:	441a      	add	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f7ff f8e9 	bl	8004aaa <vListInsertEnd>
 80058d8:	f001 fac0 	bl	8006e5c <vPortExitCritical>
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <prvAddNewTaskToReadyList+0xcc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <prvAddNewTaskToReadyList+0xba>
 80058e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <prvAddNewTaskToReadyList+0xc8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d207      	bcs.n	8005902 <prvAddNewTaskToReadyList+0xba>
 80058f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005924 <prvAddNewTaskToReadyList+0xdc>)
 80058f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000e94 	.word	0x20000e94
 8005910:	200009c0 	.word	0x200009c0
 8005914:	20000ea0 	.word	0x20000ea0
 8005918:	20000eb0 	.word	0x20000eb0
 800591c:	20000e9c 	.word	0x20000e9c
 8005920:	200009c4 	.word	0x200009c4
 8005924:	e000ed04 	.word	0xe000ed04

08005928 <vTaskDelay>:
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d018      	beq.n	800596c <vTaskDelay+0x44>
 800593a:	4b14      	ldr	r3, [pc, #80]	@ (800598c <vTaskDelay+0x64>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00b      	beq.n	800595a <vTaskDelay+0x32>
 8005942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	e7fd      	b.n	8005956 <vTaskDelay+0x2e>
 800595a:	f000 f88b 	bl	8005a74 <vTaskSuspendAll>
 800595e:	2100      	movs	r1, #0
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fd09 	bl	8006378 <prvAddCurrentTaskToDelayedList>
 8005966:	f000 f893 	bl	8005a90 <xTaskResumeAll>
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d107      	bne.n	8005982 <vTaskDelay+0x5a>
 8005972:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <vTaskDelay+0x68>)
 8005974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000ebc 	.word	0x20000ebc
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <vTaskStartScheduler>:
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	@ 0x28
 8005998:	af04      	add	r7, sp, #16
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	2300      	movs	r3, #0
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	463a      	mov	r2, r7
 80059a4:	1d39      	adds	r1, r7, #4
 80059a6:	f107 0308 	add.w	r3, r7, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff f81c 	bl	80049e8 <vApplicationGetIdleTaskMemory>
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	9202      	str	r2, [sp, #8]
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	460a      	mov	r2, r1
 80059c2:	4924      	ldr	r1, [pc, #144]	@ (8005a54 <vTaskStartScheduler+0xc0>)
 80059c4:	4824      	ldr	r0, [pc, #144]	@ (8005a58 <vTaskStartScheduler+0xc4>)
 80059c6:	f7ff fdf1 	bl	80055ac <xTaskCreateStatic>
 80059ca:	4603      	mov	r3, r0
 80059cc:	4a23      	ldr	r2, [pc, #140]	@ (8005a5c <vTaskStartScheduler+0xc8>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b22      	ldr	r3, [pc, #136]	@ (8005a5c <vTaskStartScheduler+0xc8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <vTaskStartScheduler+0x4a>
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e001      	b.n	80059e2 <vTaskStartScheduler+0x4e>
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d102      	bne.n	80059ee <vTaskStartScheduler+0x5a>
 80059e8:	f000 fd1a 	bl	8006420 <xTimerCreateTimerTask>
 80059ec:	6178      	str	r0, [r7, #20]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d11b      	bne.n	8005a2c <vTaskStartScheduler+0x98>
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	bf00      	nop
 8005a08:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <vTaskStartScheduler+0xcc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3354      	adds	r3, #84	@ 0x54
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <vTaskStartScheduler+0xd0>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b15      	ldr	r3, [pc, #84]	@ (8005a68 <vTaskStartScheduler+0xd4>)
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <vTaskStartScheduler+0xd8>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <vTaskStartScheduler+0xdc>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f001 f943 	bl	8006cb0 <xPortStartScheduler>
 8005a2a:	e00f      	b.n	8005a4c <vTaskStartScheduler+0xb8>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d10b      	bne.n	8005a4c <vTaskStartScheduler+0xb8>
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	e7fd      	b.n	8005a48 <vTaskStartScheduler+0xb4>
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	08007f24 	.word	0x08007f24
 8005a58:	080060a5 	.word	0x080060a5
 8005a5c:	20000eb8 	.word	0x20000eb8
 8005a60:	200009c0 	.word	0x200009c0
 8005a64:	20000068 	.word	0x20000068
 8005a68:	20000eb4 	.word	0x20000eb4
 8005a6c:	20000ea0 	.word	0x20000ea0
 8005a70:	20000e98 	.word	0x20000e98

08005a74 <vTaskSuspendAll>:
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <vTaskSuspendAll+0x18>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	4a03      	ldr	r2, [pc, #12]	@ (8005a8c <vTaskSuspendAll+0x18>)
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000ebc 	.word	0x20000ebc

08005a90 <xTaskResumeAll>:
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	4b42      	ldr	r3, [pc, #264]	@ (8005ba8 <xTaskResumeAll+0x118>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <xTaskResumeAll+0x2e>
 8005aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <xTaskResumeAll+0x2a>
 8005abe:	f001 f99b 	bl	8006df8 <vPortEnterCritical>
 8005ac2:	4b39      	ldr	r3, [pc, #228]	@ (8005ba8 <xTaskResumeAll+0x118>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4a37      	ldr	r2, [pc, #220]	@ (8005ba8 <xTaskResumeAll+0x118>)
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b36      	ldr	r3, [pc, #216]	@ (8005ba8 <xTaskResumeAll+0x118>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d162      	bne.n	8005b9a <xTaskResumeAll+0x10a>
 8005ad4:	4b35      	ldr	r3, [pc, #212]	@ (8005bac <xTaskResumeAll+0x11c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d05e      	beq.n	8005b9a <xTaskResumeAll+0x10a>
 8005adc:	e02f      	b.n	8005b3e <xTaskResumeAll+0xae>
 8005ade:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <xTaskResumeAll+0x120>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3318      	adds	r3, #24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff f83a 	bl	8004b64 <uxListRemove>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff f835 	bl	8004b64 <uxListRemove>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afe:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb4 <xTaskResumeAll+0x124>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d903      	bls.n	8005b0e <xTaskResumeAll+0x7e>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb4 <xTaskResumeAll+0x124>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4a27      	ldr	r2, [pc, #156]	@ (8005bb8 <xTaskResumeAll+0x128>)
 8005b1c:	441a      	add	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fe ffc0 	bl	8004aaa <vListInsertEnd>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	4b23      	ldr	r3, [pc, #140]	@ (8005bbc <xTaskResumeAll+0x12c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d302      	bcc.n	8005b3e <xTaskResumeAll+0xae>
 8005b38:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <xTaskResumeAll+0x130>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb0 <xTaskResumeAll+0x120>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1cb      	bne.n	8005ade <xTaskResumeAll+0x4e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <xTaskResumeAll+0xc0>
 8005b4c:	f000 fb66 	bl	800621c <prvResetNextTaskUnblockTime>
 8005b50:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc4 <xTaskResumeAll+0x134>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <xTaskResumeAll+0xee>
 8005b5c:	f000 f846 	bl	8005bec <xTaskIncrementTick>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <xTaskResumeAll+0xdc>
 8005b66:	4b16      	ldr	r3, [pc, #88]	@ (8005bc0 <xTaskResumeAll+0x130>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f1      	bne.n	8005b5c <xTaskResumeAll+0xcc>
 8005b78:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <xTaskResumeAll+0x134>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	4b10      	ldr	r3, [pc, #64]	@ (8005bc0 <xTaskResumeAll+0x130>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <xTaskResumeAll+0x10a>
 8005b86:	2301      	movs	r3, #1
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc8 <xTaskResumeAll+0x138>)
 8005b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f001 f95f 	bl	8006e5c <vPortExitCritical>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000ebc 	.word	0x20000ebc
 8005bac:	20000e94 	.word	0x20000e94
 8005bb0:	20000e54 	.word	0x20000e54
 8005bb4:	20000e9c 	.word	0x20000e9c
 8005bb8:	200009c4 	.word	0x200009c4
 8005bbc:	200009c0 	.word	0x200009c0
 8005bc0:	20000ea8 	.word	0x20000ea8
 8005bc4:	20000ea4 	.word	0x20000ea4
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <xTaskGetTickCount>:
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4b05      	ldr	r3, [pc, #20]	@ (8005be8 <xTaskGetTickCount+0x1c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000e98 	.word	0x20000e98

08005bec <xTaskIncrementTick>:
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8005d34 <xTaskIncrementTick+0x148>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 8090 	bne.w	8005d20 <xTaskIncrementTick+0x134>
 8005c00:	4b4d      	ldr	r3, [pc, #308]	@ (8005d38 <xTaskIncrementTick+0x14c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	4a4b      	ldr	r2, [pc, #300]	@ (8005d38 <xTaskIncrementTick+0x14c>)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d121      	bne.n	8005c58 <xTaskIncrementTick+0x6c>
 8005c14:	4b49      	ldr	r3, [pc, #292]	@ (8005d3c <xTaskIncrementTick+0x150>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <xTaskIncrementTick+0x4a>
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <xTaskIncrementTick+0x46>
 8005c36:	4b41      	ldr	r3, [pc, #260]	@ (8005d3c <xTaskIncrementTick+0x150>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <xTaskIncrementTick+0x154>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a3e      	ldr	r2, [pc, #248]	@ (8005d3c <xTaskIncrementTick+0x150>)
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	4a3e      	ldr	r2, [pc, #248]	@ (8005d40 <xTaskIncrementTick+0x154>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d44 <xTaskIncrementTick+0x158>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	4a3c      	ldr	r2, [pc, #240]	@ (8005d44 <xTaskIncrementTick+0x158>)
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	f000 fae2 	bl	800621c <prvResetNextTaskUnblockTime>
 8005c58:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <xTaskIncrementTick+0x15c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d349      	bcc.n	8005cf6 <xTaskIncrementTick+0x10a>
 8005c62:	4b36      	ldr	r3, [pc, #216]	@ (8005d3c <xTaskIncrementTick+0x150>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <xTaskIncrementTick+0x8a>
 8005c6c:	4b36      	ldr	r3, [pc, #216]	@ (8005d48 <xTaskIncrementTick+0x15c>)
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	e03f      	b.n	8005cf6 <xTaskIncrementTick+0x10a>
 8005c76:	4b31      	ldr	r3, [pc, #196]	@ (8005d3c <xTaskIncrementTick+0x150>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d203      	bcs.n	8005c96 <xTaskIncrementTick+0xaa>
 8005c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005d48 <xTaskIncrementTick+0x15c>)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e02f      	b.n	8005cf6 <xTaskIncrementTick+0x10a>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe ff62 	bl	8004b64 <uxListRemove>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <xTaskIncrementTick+0xc6>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	3318      	adds	r3, #24
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe ff59 	bl	8004b64 <uxListRemove>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb6:	4b25      	ldr	r3, [pc, #148]	@ (8005d4c <xTaskIncrementTick+0x160>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d903      	bls.n	8005cc6 <xTaskIncrementTick+0xda>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	4a22      	ldr	r2, [pc, #136]	@ (8005d4c <xTaskIncrementTick+0x160>)
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <xTaskIncrementTick+0x164>)
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fe fee4 	bl	8004aaa <vListInsertEnd>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <xTaskIncrementTick+0x168>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d3b8      	bcc.n	8005c62 <xTaskIncrementTick+0x76>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e7b5      	b.n	8005c62 <xTaskIncrementTick+0x76>
 8005cf6:	4b17      	ldr	r3, [pc, #92]	@ (8005d54 <xTaskIncrementTick+0x168>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfc:	4914      	ldr	r1, [pc, #80]	@ (8005d50 <xTaskIncrementTick+0x164>)
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d901      	bls.n	8005d12 <xTaskIncrementTick+0x126>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <xTaskIncrementTick+0x16c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <xTaskIncrementTick+0x13e>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e004      	b.n	8005d2a <xTaskIncrementTick+0x13e>
 8005d20:	4b0e      	ldr	r3, [pc, #56]	@ (8005d5c <xTaskIncrementTick+0x170>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	4a0d      	ldr	r2, [pc, #52]	@ (8005d5c <xTaskIncrementTick+0x170>)
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000ebc 	.word	0x20000ebc
 8005d38:	20000e98 	.word	0x20000e98
 8005d3c:	20000e4c 	.word	0x20000e4c
 8005d40:	20000e50 	.word	0x20000e50
 8005d44:	20000eac 	.word	0x20000eac
 8005d48:	20000eb4 	.word	0x20000eb4
 8005d4c:	20000e9c 	.word	0x20000e9c
 8005d50:	200009c4 	.word	0x200009c4
 8005d54:	200009c0 	.word	0x200009c0
 8005d58:	20000ea8 	.word	0x20000ea8
 8005d5c:	20000ea4 	.word	0x20000ea4

08005d60 <vTaskSwitchContext>:
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4b2b      	ldr	r3, [pc, #172]	@ (8005e14 <vTaskSwitchContext+0xb4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <vTaskSwitchContext+0x16>
 8005d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005e18 <vTaskSwitchContext+0xb8>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e047      	b.n	8005e06 <vTaskSwitchContext+0xa6>
 8005d76:	4b28      	ldr	r3, [pc, #160]	@ (8005e18 <vTaskSwitchContext+0xb8>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	4b27      	ldr	r3, [pc, #156]	@ (8005e1c <vTaskSwitchContext+0xbc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e011      	b.n	8005da8 <vTaskSwitchContext+0x48>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <vTaskSwitchContext+0x42>
 8005d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	e7fd      	b.n	8005d9e <vTaskSwitchContext+0x3e>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	491d      	ldr	r1, [pc, #116]	@ (8005e20 <vTaskSwitchContext+0xc0>)
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0e3      	beq.n	8005d84 <vTaskSwitchContext+0x24>
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4a16      	ldr	r2, [pc, #88]	@ (8005e20 <vTaskSwitchContext+0xc0>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d104      	bne.n	8005dec <vTaskSwitchContext+0x8c>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <vTaskSwitchContext+0xc4>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4a09      	ldr	r2, [pc, #36]	@ (8005e1c <vTaskSwitchContext+0xbc>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <vTaskSwitchContext+0xc4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3354      	adds	r3, #84	@ 0x54
 8005e02:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <vTaskSwitchContext+0xc8>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000ebc 	.word	0x20000ebc
 8005e18:	20000ea8 	.word	0x20000ea8
 8005e1c:	20000e9c 	.word	0x20000e9c
 8005e20:	200009c4 	.word	0x200009c4
 8005e24:	200009c0 	.word	0x200009c0
 8005e28:	20000068 	.word	0x20000068

08005e2c <vTaskPlaceOnEventList>:
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <vTaskPlaceOnEventList+0x28>
 8005e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	bf00      	nop
 8005e50:	bf00      	nop
 8005e52:	e7fd      	b.n	8005e50 <vTaskPlaceOnEventList+0x24>
 8005e54:	4b07      	ldr	r3, [pc, #28]	@ (8005e74 <vTaskPlaceOnEventList+0x48>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3318      	adds	r3, #24
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fe fe48 	bl	8004af2 <vListInsert>
 8005e62:	2101      	movs	r1, #1
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f000 fa87 	bl	8006378 <prvAddCurrentTaskToDelayedList>
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200009c0 	.word	0x200009c0

08005e78 <vTaskPlaceOnEventListRestricted>:
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <vTaskPlaceOnEventListRestricted+0x2a>
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <vTaskPlaceOnEventListRestricted+0x26>
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <vTaskPlaceOnEventListRestricted+0x54>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3318      	adds	r3, #24
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7fe fdfd 	bl	8004aaa <vListInsertEnd>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <vTaskPlaceOnEventListRestricted+0x44>
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f000 fa5a 	bl	8006378 <prvAddCurrentTaskToDelayedList>
 8005ec4:	bf00      	nop
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	200009c0 	.word	0x200009c0

08005ed0 <xTaskRemoveFromEventList>:
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <xTaskRemoveFromEventList+0x2e>
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xTaskRemoveFromEventList+0x2a>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3318      	adds	r3, #24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fe2e 	bl	8004b64 <uxListRemove>
 8005f08:	4b1d      	ldr	r3, [pc, #116]	@ (8005f80 <xTaskRemoveFromEventList+0xb0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d11d      	bne.n	8005f4c <xTaskRemoveFromEventList+0x7c>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fe25 	bl	8004b64 <uxListRemove>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1e:	4b19      	ldr	r3, [pc, #100]	@ (8005f84 <xTaskRemoveFromEventList+0xb4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d903      	bls.n	8005f2e <xTaskRemoveFromEventList+0x5e>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	4a16      	ldr	r2, [pc, #88]	@ (8005f84 <xTaskRemoveFromEventList+0xb4>)
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4a13      	ldr	r2, [pc, #76]	@ (8005f88 <xTaskRemoveFromEventList+0xb8>)
 8005f3c:	441a      	add	r2, r3
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7fe fdb0 	bl	8004aaa <vListInsertEnd>
 8005f4a:	e005      	b.n	8005f58 <xTaskRemoveFromEventList+0x88>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	3318      	adds	r3, #24
 8005f50:	4619      	mov	r1, r3
 8005f52:	480e      	ldr	r0, [pc, #56]	@ (8005f8c <xTaskRemoveFromEventList+0xbc>)
 8005f54:	f7fe fda9 	bl	8004aaa <vListInsertEnd>
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f90 <xTaskRemoveFromEventList+0xc0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d905      	bls.n	8005f72 <xTaskRemoveFromEventList+0xa2>
 8005f66:	2301      	movs	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <xTaskRemoveFromEventList+0xc4>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e001      	b.n	8005f76 <xTaskRemoveFromEventList+0xa6>
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000ebc 	.word	0x20000ebc
 8005f84:	20000e9c 	.word	0x20000e9c
 8005f88:	200009c4 	.word	0x200009c4
 8005f8c:	20000e54 	.word	0x20000e54
 8005f90:	200009c0 	.word	0x200009c0
 8005f94:	20000ea8 	.word	0x20000ea8

08005f98 <vTaskInternalSetTimeOutState>:
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <vTaskInternalSetTimeOutState+0x24>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	4b05      	ldr	r3, [pc, #20]	@ (8005fc0 <vTaskInternalSetTimeOutState+0x28>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	605a      	str	r2, [r3, #4]
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	20000eac 	.word	0x20000eac
 8005fc0:	20000e98 	.word	0x20000e98

08005fc4 <xTaskCheckForTimeOut>:
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10b      	bne.n	8005fec <xTaskCheckForTimeOut+0x28>
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <xTaskCheckForTimeOut+0x24>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <xTaskCheckForTimeOut+0x46>
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <xTaskCheckForTimeOut+0x42>
 800600a:	f000 fef5 	bl	8006df8 <vPortEnterCritical>
 800600e:	4b1d      	ldr	r3, [pc, #116]	@ (8006084 <xTaskCheckForTimeOut+0xc0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d102      	bne.n	800602e <xTaskCheckForTimeOut+0x6a>
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e023      	b.n	8006076 <xTaskCheckForTimeOut+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <xTaskCheckForTimeOut+0xc4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d007      	beq.n	800604a <xTaskCheckForTimeOut+0x86>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <xTaskCheckForTimeOut+0x86>
 8006044:	2301      	movs	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	e015      	b.n	8006076 <xTaskCheckForTimeOut+0xb2>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	429a      	cmp	r2, r3
 8006052:	d20b      	bcs.n	800606c <xTaskCheckForTimeOut+0xa8>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad2      	subs	r2, r2, r3
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff ff99 	bl	8005f98 <vTaskInternalSetTimeOutState>
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e004      	b.n	8006076 <xTaskCheckForTimeOut+0xb2>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	2301      	movs	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	f000 fef1 	bl	8006e5c <vPortExitCritical>
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20000e98 	.word	0x20000e98
 8006088:	20000eac 	.word	0x20000eac

0800608c <vTaskMissedYield>:
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
 8006090:	4b03      	ldr	r3, [pc, #12]	@ (80060a0 <vTaskMissedYield+0x14>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	bf00      	nop
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000ea8 	.word	0x20000ea8

080060a4 <prvIdleTask>:
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	f000 f852 	bl	8006154 <prvCheckTasksWaitingTermination>
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <prvIdleTask+0x28>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d9f9      	bls.n	80060ac <prvIdleTask+0x8>
 80060b8:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <prvIdleTask+0x2c>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	e7f0      	b.n	80060ac <prvIdleTask+0x8>
 80060ca:	bf00      	nop
 80060cc:	200009c4 	.word	0x200009c4
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <prvInitialiseTaskLists>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	e00c      	b.n	80060fa <prvInitialiseTaskLists+0x26>
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4a12      	ldr	r2, [pc, #72]	@ (8006134 <prvInitialiseTaskLists+0x60>)
 80060ec:	4413      	add	r3, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fcae 	bl	8004a50 <vListInitialise>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3301      	adds	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b37      	cmp	r3, #55	@ 0x37
 80060fe:	d9ef      	bls.n	80060e0 <prvInitialiseTaskLists+0xc>
 8006100:	480d      	ldr	r0, [pc, #52]	@ (8006138 <prvInitialiseTaskLists+0x64>)
 8006102:	f7fe fca5 	bl	8004a50 <vListInitialise>
 8006106:	480d      	ldr	r0, [pc, #52]	@ (800613c <prvInitialiseTaskLists+0x68>)
 8006108:	f7fe fca2 	bl	8004a50 <vListInitialise>
 800610c:	480c      	ldr	r0, [pc, #48]	@ (8006140 <prvInitialiseTaskLists+0x6c>)
 800610e:	f7fe fc9f 	bl	8004a50 <vListInitialise>
 8006112:	480c      	ldr	r0, [pc, #48]	@ (8006144 <prvInitialiseTaskLists+0x70>)
 8006114:	f7fe fc9c 	bl	8004a50 <vListInitialise>
 8006118:	480b      	ldr	r0, [pc, #44]	@ (8006148 <prvInitialiseTaskLists+0x74>)
 800611a:	f7fe fc99 	bl	8004a50 <vListInitialise>
 800611e:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <prvInitialiseTaskLists+0x78>)
 8006120:	4a05      	ldr	r2, [pc, #20]	@ (8006138 <prvInitialiseTaskLists+0x64>)
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <prvInitialiseTaskLists+0x7c>)
 8006126:	4a05      	ldr	r2, [pc, #20]	@ (800613c <prvInitialiseTaskLists+0x68>)
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200009c4 	.word	0x200009c4
 8006138:	20000e24 	.word	0x20000e24
 800613c:	20000e38 	.word	0x20000e38
 8006140:	20000e54 	.word	0x20000e54
 8006144:	20000e68 	.word	0x20000e68
 8006148:	20000e80 	.word	0x20000e80
 800614c:	20000e4c 	.word	0x20000e4c
 8006150:	20000e50 	.word	0x20000e50

08006154 <prvCheckTasksWaitingTermination>:
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	e019      	b.n	8006190 <prvCheckTasksWaitingTermination+0x3c>
 800615c:	f000 fe4c 	bl	8006df8 <vPortEnterCritical>
 8006160:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <prvCheckTasksWaitingTermination+0x50>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3304      	adds	r3, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fcf9 	bl	8004b64 <uxListRemove>
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <prvCheckTasksWaitingTermination+0x54>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	4a0b      	ldr	r2, [pc, #44]	@ (80061a8 <prvCheckTasksWaitingTermination+0x54>)
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <prvCheckTasksWaitingTermination+0x58>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3b01      	subs	r3, #1
 8006182:	4a0a      	ldr	r2, [pc, #40]	@ (80061ac <prvCheckTasksWaitingTermination+0x58>)
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	f000 fe69 	bl	8006e5c <vPortExitCritical>
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f810 	bl	80061b0 <prvDeleteTCB>
 8006190:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <prvCheckTasksWaitingTermination+0x58>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e1      	bne.n	800615c <prvCheckTasksWaitingTermination+0x8>
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000e68 	.word	0x20000e68
 80061a8:	20000e94 	.word	0x20000e94
 80061ac:	20000e7c 	.word	0x20000e7c

080061b0 <prvDeleteTCB>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3354      	adds	r3, #84	@ 0x54
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f967 	bl	8007490 <_reclaim_reent>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d108      	bne.n	80061de <prvDeleteTCB+0x2e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d0:	4618      	mov	r0, r3
 80061d2:	f001 f801 	bl	80071d8 <vPortFree>
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fffe 	bl	80071d8 <vPortFree>
 80061dc:	e019      	b.n	8006212 <prvDeleteTCB+0x62>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d103      	bne.n	80061f0 <prvDeleteTCB+0x40>
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fff5 	bl	80071d8 <vPortFree>
 80061ee:	e010      	b.n	8006212 <prvDeleteTCB+0x62>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d00b      	beq.n	8006212 <prvDeleteTCB+0x62>
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <prvDeleteTCB+0x5e>
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <prvResetNextTaskUnblockTime>:
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	4b0c      	ldr	r3, [pc, #48]	@ (8006254 <prvResetNextTaskUnblockTime+0x38>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <prvResetNextTaskUnblockTime+0x1a>
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <prvResetNextTaskUnblockTime+0x3c>)
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e008      	b.n	8006248 <prvResetNextTaskUnblockTime+0x2c>
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <prvResetNextTaskUnblockTime+0x38>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	607b      	str	r3, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a04      	ldr	r2, [pc, #16]	@ (8006258 <prvResetNextTaskUnblockTime+0x3c>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20000e4c 	.word	0x20000e4c
 8006258:	20000eb4 	.word	0x20000eb4

0800625c <xTaskGetSchedulerState>:
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <xTaskGetSchedulerState+0x34>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <xTaskGetSchedulerState+0x14>
 800626a:	2301      	movs	r3, #1
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e008      	b.n	8006282 <xTaskGetSchedulerState+0x26>
 8006270:	4b08      	ldr	r3, [pc, #32]	@ (8006294 <xTaskGetSchedulerState+0x38>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <xTaskGetSchedulerState+0x22>
 8006278:	2302      	movs	r3, #2
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e001      	b.n	8006282 <xTaskGetSchedulerState+0x26>
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000ea0 	.word	0x20000ea0
 8006294:	20000ebc 	.word	0x20000ebc

08006298 <xTaskPriorityDisinherit>:
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d058      	beq.n	8006360 <xTaskPriorityDisinherit+0xc8>
 80062ae:	4b2f      	ldr	r3, [pc, #188]	@ (800636c <xTaskPriorityDisinherit+0xd4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d00b      	beq.n	80062d0 <xTaskPriorityDisinherit+0x38>
 80062b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	bf00      	nop
 80062cc:	bf00      	nop
 80062ce:	e7fd      	b.n	80062cc <xTaskPriorityDisinherit+0x34>
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10b      	bne.n	80062f0 <xTaskPriorityDisinherit+0x58>
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	e7fd      	b.n	80062ec <xTaskPriorityDisinherit+0x54>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f4:	1e5a      	subs	r2, r3, #1
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006302:	429a      	cmp	r2, r3
 8006304:	d02c      	beq.n	8006360 <xTaskPriorityDisinherit+0xc8>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800630a:	2b00      	cmp	r3, #0
 800630c:	d128      	bne.n	8006360 <xTaskPriorityDisinherit+0xc8>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3304      	adds	r3, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fc26 	bl	8004b64 <uxListRemove>
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	619a      	str	r2, [r3, #24]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006330:	4b0f      	ldr	r3, [pc, #60]	@ (8006370 <xTaskPriorityDisinherit+0xd8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d903      	bls.n	8006340 <xTaskPriorityDisinherit+0xa8>
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	4a0c      	ldr	r2, [pc, #48]	@ (8006370 <xTaskPriorityDisinherit+0xd8>)
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4a09      	ldr	r2, [pc, #36]	@ (8006374 <xTaskPriorityDisinherit+0xdc>)
 800634e:	441a      	add	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	3304      	adds	r3, #4
 8006354:	4619      	mov	r1, r3
 8006356:	4610      	mov	r0, r2
 8006358:	f7fe fba7 	bl	8004aaa <vListInsertEnd>
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200009c0 	.word	0x200009c0
 8006370:	20000e9c 	.word	0x20000e9c
 8006374:	200009c4 	.word	0x200009c4

08006378 <prvAddCurrentTaskToDelayedList>:
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	4b21      	ldr	r3, [pc, #132]	@ (8006408 <prvAddCurrentTaskToDelayedList+0x90>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	4b20      	ldr	r3, [pc, #128]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3304      	adds	r3, #4
 800638e:	4618      	mov	r0, r3
 8006390:	f7fe fbe8 	bl	8004b64 <uxListRemove>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d10a      	bne.n	80063b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <prvAddCurrentTaskToDelayedList+0x3a>
 80063a2:	4b1a      	ldr	r3, [pc, #104]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4819      	ldr	r0, [pc, #100]	@ (8006410 <prvAddCurrentTaskToDelayedList+0x98>)
 80063ac:	f7fe fb7d 	bl	8004aaa <vListInsertEnd>
 80063b0:	e026      	b.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	4b14      	ldr	r3, [pc, #80]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d209      	bcs.n	80063de <prvAddCurrentTaskToDelayedList+0x66>
 80063ca:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fe fb8b 	bl	8004af2 <vListInsert>
 80063dc:	e010      	b.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
 80063de:	4b0e      	ldr	r3, [pc, #56]	@ (8006418 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b0a      	ldr	r3, [pc, #40]	@ (800640c <prvAddCurrentTaskToDelayedList+0x94>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe fb81 	bl	8004af2 <vListInsert>
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <prvAddCurrentTaskToDelayedList+0xa4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d202      	bcs.n	8006400 <prvAddCurrentTaskToDelayedList+0x88>
 80063fa:	4a08      	ldr	r2, [pc, #32]	@ (800641c <prvAddCurrentTaskToDelayedList+0xa4>)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000e98 	.word	0x20000e98
 800640c:	200009c0 	.word	0x200009c0
 8006410:	20000e80 	.word	0x20000e80
 8006414:	20000e50 	.word	0x20000e50
 8006418:	20000e4c 	.word	0x20000e4c
 800641c:	20000eb4 	.word	0x20000eb4

08006420 <xTimerCreateTimerTask>:
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af04      	add	r7, sp, #16
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	f000 fb71 	bl	8006b10 <prvCheckForValidListAndQueue>
 800642e:	4b1d      	ldr	r3, [pc, #116]	@ (80064a4 <xTimerCreateTimerTask+0x84>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d021      	beq.n	800647a <xTimerCreateTimerTask+0x5a>
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	2300      	movs	r3, #0
 800643c:	60bb      	str	r3, [r7, #8]
 800643e:	1d3a      	adds	r2, r7, #4
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	f107 030c 	add.w	r3, r7, #12
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe fae7 	bl	8004a1c <vApplicationGetTimerTaskMemory>
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	9202      	str	r2, [sp, #8]
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	2302      	movs	r3, #2
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	460a      	mov	r2, r1
 8006460:	4911      	ldr	r1, [pc, #68]	@ (80064a8 <xTimerCreateTimerTask+0x88>)
 8006462:	4812      	ldr	r0, [pc, #72]	@ (80064ac <xTimerCreateTimerTask+0x8c>)
 8006464:	f7ff f8a2 	bl	80055ac <xTaskCreateStatic>
 8006468:	4603      	mov	r3, r0
 800646a:	4a11      	ldr	r2, [pc, #68]	@ (80064b0 <xTimerCreateTimerTask+0x90>)
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <xTimerCreateTimerTask+0x90>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xTimerCreateTimerTask+0x5a>
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <xTimerCreateTimerTask+0x78>
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <xTimerCreateTimerTask+0x74>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000ef0 	.word	0x20000ef0
 80064a8:	08007f2c 	.word	0x08007f2c
 80064ac:	080066a9 	.word	0x080066a9
 80064b0:	20000ef4 	.word	0x20000ef4

080064b4 <xTimerCreate>:
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	202c      	movs	r0, #44	@ 0x2c
 80064c4:	f000 fdba 	bl	800703c <pvPortMalloc>
 80064c8:	6178      	str	r0, [r7, #20]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <xTimerCreate+0x38>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f805 	bl	80064f6 <prvInitialiseNewTimer>
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <prvInitialiseNewTimer>:
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10b      	bne.n	8006522 <prvInitialiseNewTimer+0x2c>
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <prvInitialiseNewTimer+0x28>
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01e      	beq.n	8006566 <prvInitialiseNewTimer+0x70>
 8006528:	f000 faf2 	bl	8006b10 <prvCheckForValidListAndQueue>
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	619a      	str	r2, [r3, #24]
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	61da      	str	r2, [r3, #28]
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	6a3a      	ldr	r2, [r7, #32]
 8006542:	621a      	str	r2, [r3, #32]
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe faa1 	bl	8004a90 <vListInitialiseItem>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <prvInitialiseNewTimer+0x70>
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	b2da      	uxtb	r2, r3
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006566:	bf00      	nop
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <xTimerGenericCommand>:
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <xTimerGenericCommand+0x30>
 8006588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xTimerGenericCommand+0x2c>
 80065a0:	4b19      	ldr	r3, [pc, #100]	@ (8006608 <xTimerGenericCommand+0x98>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d02a      	beq.n	80065fe <xTimerGenericCommand+0x8e>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	dc18      	bgt.n	80065ec <xTimerGenericCommand+0x7c>
 80065ba:	f7ff fe4f 	bl	800625c <xTaskGetSchedulerState>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d109      	bne.n	80065d8 <xTimerGenericCommand+0x68>
 80065c4:	4b10      	ldr	r3, [pc, #64]	@ (8006608 <xTimerGenericCommand+0x98>)
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	f107 0110 	add.w	r1, r7, #16
 80065cc:	2300      	movs	r3, #0
 80065ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d0:	f7fe fbfc 	bl	8004dcc <xQueueGenericSend>
 80065d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80065d6:	e012      	b.n	80065fe <xTimerGenericCommand+0x8e>
 80065d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006608 <xTimerGenericCommand+0x98>)
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	f107 0110 	add.w	r1, r7, #16
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	f7fe fbf2 	bl	8004dcc <xQueueGenericSend>
 80065e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80065ea:	e008      	b.n	80065fe <xTimerGenericCommand+0x8e>
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <xTimerGenericCommand+0x98>)
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	f107 0110 	add.w	r1, r7, #16
 80065f4:	2300      	movs	r3, #0
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	f7fe fcea 	bl	8004fd0 <xQueueGenericSendFromISR>
 80065fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	3728      	adds	r7, #40	@ 0x28
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000ef0 	.word	0x20000ef0

0800660c <prvProcessExpiredTimer>:
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af02      	add	r7, sp, #8
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	4b23      	ldr	r3, [pc, #140]	@ (80066a4 <prvProcessExpiredTimer+0x98>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	3304      	adds	r3, #4
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fa9d 	bl	8004b64 <uxListRemove>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d023      	beq.n	8006680 <prvProcessExpiredTimer+0x74>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	18d1      	adds	r1, r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	6978      	ldr	r0, [r7, #20]
 8006646:	f000 f8d5 	bl	80067f4 <prvInsertTimerInActiveList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d020      	beq.n	8006692 <prvProcessExpiredTimer+0x86>
 8006650:	2300      	movs	r3, #0
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	2100      	movs	r1, #0
 800665a:	6978      	ldr	r0, [r7, #20]
 800665c:	f7ff ff88 	bl	8006570 <xTimerGenericCommand>
 8006660:	6138      	str	r0, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d114      	bne.n	8006692 <prvProcessExpiredTimer+0x86>
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <prvProcessExpiredTimer+0x70>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	4798      	blx	r3
 800669a:	bf00      	nop
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000ee8 	.word	0x20000ee8

080066a8 <prvTimerTask>:
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	f107 0308 	add.w	r3, r7, #8
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 f859 	bl	800676c <prvGetNextExpireTime>
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f805 	bl	80066d0 <prvProcessTimerOrBlockTask>
 80066c6:	f000 f8d7 	bl	8006878 <prvProcessReceivedCommands>
 80066ca:	bf00      	nop
 80066cc:	e7f0      	b.n	80066b0 <prvTimerTask+0x8>
	...

080066d0 <prvProcessTimerOrBlockTask>:
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	f7ff f9cb 	bl	8005a74 <vTaskSuspendAll>
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f866 	bl	80067b4 <prvSampleTimeNow>
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d130      	bne.n	8006752 <prvProcessTimerOrBlockTask+0x82>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <prvProcessTimerOrBlockTask+0x3c>
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d806      	bhi.n	800670c <prvProcessTimerOrBlockTask+0x3c>
 80066fe:	f7ff f9c7 	bl	8005a90 <xTaskResumeAll>
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff81 	bl	800660c <prvProcessExpiredTimer>
 800670a:	e024      	b.n	8006756 <prvProcessTimerOrBlockTask+0x86>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <prvProcessTimerOrBlockTask+0x54>
 8006712:	4b13      	ldr	r3, [pc, #76]	@ (8006760 <prvProcessTimerOrBlockTask+0x90>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <prvProcessTimerOrBlockTask+0x50>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <prvProcessTimerOrBlockTask+0x52>
 8006720:	2300      	movs	r3, #0
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4b0f      	ldr	r3, [pc, #60]	@ (8006764 <prvProcessTimerOrBlockTask+0x94>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	f7fe ff07 	bl	8005544 <vQueueWaitForMessageRestricted>
 8006736:	f7ff f9ab 	bl	8005a90 <xTaskResumeAll>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <prvProcessTimerOrBlockTask+0x86>
 8006740:	4b09      	ldr	r3, [pc, #36]	@ (8006768 <prvProcessTimerOrBlockTask+0x98>)
 8006742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	e001      	b.n	8006756 <prvProcessTimerOrBlockTask+0x86>
 8006752:	f7ff f99d 	bl	8005a90 <xTaskResumeAll>
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000eec 	.word	0x20000eec
 8006764:	20000ef0 	.word	0x20000ef0
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <prvGetNextExpireTime>:
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	4b0e      	ldr	r3, [pc, #56]	@ (80067b0 <prvGetNextExpireTime+0x44>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <prvGetNextExpireTime+0x16>
 800677e:	2201      	movs	r2, #1
 8006780:	e000      	b.n	8006784 <prvGetNextExpireTime+0x18>
 8006782:	2200      	movs	r2, #0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <prvGetNextExpireTime+0x30>
 8006790:	4b07      	ldr	r3, [pc, #28]	@ (80067b0 <prvGetNextExpireTime+0x44>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e001      	b.n	80067a0 <prvGetNextExpireTime+0x34>
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000ee8 	.word	0x20000ee8

080067b4 <prvSampleTimeNow>:
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	f7ff fa06 	bl	8005bcc <xTaskGetTickCount>
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <prvSampleTimeNow+0x3c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d205      	bcs.n	80067d8 <prvSampleTimeNow+0x24>
 80067cc:	f000 f93a 	bl	8006a44 <prvSwitchTimerLists>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e002      	b.n	80067de <prvSampleTimeNow+0x2a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	4a04      	ldr	r2, [pc, #16]	@ (80067f0 <prvSampleTimeNow+0x3c>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000ef8 	.word	0x20000ef8

080067f4 <prvInsertTimerInActiveList>:
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	605a      	str	r2, [r3, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	611a      	str	r2, [r3, #16]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d812      	bhi.n	8006840 <prvInsertTimerInActiveList+0x4c>
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <prvInsertTimerInActiveList+0x3a>
 8006828:	2301      	movs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e01b      	b.n	8006866 <prvInsertTimerInActiveList+0x72>
 800682e:	4b10      	ldr	r3, [pc, #64]	@ (8006870 <prvInsertTimerInActiveList+0x7c>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7fe f95a 	bl	8004af2 <vListInsert>
 800683e:	e012      	b.n	8006866 <prvInsertTimerInActiveList+0x72>
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d206      	bcs.n	8006856 <prvInsertTimerInActiveList+0x62>
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d302      	bcc.n	8006856 <prvInsertTimerInActiveList+0x62>
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e007      	b.n	8006866 <prvInsertTimerInActiveList+0x72>
 8006856:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <prvInsertTimerInActiveList+0x80>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3304      	adds	r3, #4
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f7fe f946 	bl	8004af2 <vListInsert>
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000eec 	.word	0x20000eec
 8006874:	20000ee8 	.word	0x20000ee8

08006878 <prvProcessReceivedCommands>:
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	@ 0x38
 800687c:	af02      	add	r7, sp, #8
 800687e:	e0ce      	b.n	8006a1e <prvProcessReceivedCommands+0x1a6>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	da19      	bge.n	80068ba <prvProcessReceivedCommands+0x42>
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	3304      	adds	r3, #4
 800688a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <prvProcessReceivedCommands+0x32>
 8006892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	e7fd      	b.n	80068a6 <prvProcessReceivedCommands+0x2e>
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b0:	6850      	ldr	r0, [r2, #4]
 80068b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b4:	6892      	ldr	r2, [r2, #8]
 80068b6:	4611      	mov	r1, r2
 80068b8:	4798      	blx	r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f2c0 80ae 	blt.w	8006a1e <prvProcessReceivedCommands+0x1a6>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <prvProcessReceivedCommands+0x60>
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	3304      	adds	r3, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe f946 	bl	8004b64 <uxListRemove>
 80068d8:	463b      	mov	r3, r7
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff ff6a 	bl	80067b4 <prvSampleTimeNow>
 80068e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b09      	cmp	r3, #9
 80068e6:	f200 8097 	bhi.w	8006a18 <prvProcessReceivedCommands+0x1a0>
 80068ea:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <prvProcessReceivedCommands+0x78>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006919 	.word	0x08006919
 80068fc:	0800698f 	.word	0x0800698f
 8006900:	080069a3 	.word	0x080069a3
 8006904:	080069ef 	.word	0x080069ef
 8006908:	08006919 	.word	0x08006919
 800690c:	08006919 	.word	0x08006919
 8006910:	0800698f 	.word	0x0800698f
 8006914:	080069a3 	.word	0x080069a3
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800691e:	f043 0301 	orr.w	r3, r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	18d1      	adds	r1, r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006938:	f7ff ff5c 	bl	80067f4 <prvInsertTimerInActiveList>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d06c      	beq.n	8006a1c <prvProcessReceivedCommands+0x1a4>
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006948:	4798      	blx	r3
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d061      	beq.n	8006a1c <prvProcessReceivedCommands+0x1a4>
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	441a      	add	r2, r3
 8006960:	2300      	movs	r3, #0
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	2100      	movs	r1, #0
 8006968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800696a:	f7ff fe01 	bl	8006570 <xTimerGenericCommand>
 800696e:	6238      	str	r0, [r7, #32]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d152      	bne.n	8006a1c <prvProcessReceivedCommands+0x1a4>
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <prvProcessReceivedCommands+0x112>
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	b2da      	uxtb	r2, r3
 800699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80069a0:	e03d      	b.n	8006a1e <prvProcessReceivedCommands+0x1a6>
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	619a      	str	r2, [r3, #24]
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <prvProcessReceivedCommands+0x162>
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <prvProcessReceivedCommands+0x15e>
 80069da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	18d1      	adds	r1, r2, r3
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069e8:	f7ff ff04 	bl	80067f4 <prvInsertTimerInActiveList>
 80069ec:	e017      	b.n	8006a1e <prvProcessReceivedCommands+0x1a6>
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <prvProcessReceivedCommands+0x18c>
 80069fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069fe:	f000 fbeb 	bl	80071d8 <vPortFree>
 8006a02:	e00c      	b.n	8006a1e <prvProcessReceivedCommands+0x1a6>
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8006a16:	e002      	b.n	8006a1e <prvProcessReceivedCommands+0x1a6>
 8006a18:	bf00      	nop
 8006a1a:	e000      	b.n	8006a1e <prvProcessReceivedCommands+0x1a6>
 8006a1c:	bf00      	nop
 8006a1e:	4b08      	ldr	r3, [pc, #32]	@ (8006a40 <prvProcessReceivedCommands+0x1c8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	1d39      	adds	r1, r7, #4
 8006a24:	2200      	movs	r2, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fb70 	bl	800510c <xQueueReceive>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f47f af26 	bne.w	8006880 <prvProcessReceivedCommands+0x8>
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	3730      	adds	r7, #48	@ 0x30
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000ef0 	.word	0x20000ef0

08006a44 <prvSwitchTimerLists>:
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	e049      	b.n	8006ae0 <prvSwitchTimerLists+0x9c>
 8006a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8006b08 <prvSwitchTimerLists+0xc4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	4b2c      	ldr	r3, [pc, #176]	@ (8006b08 <prvSwitchTimerLists+0xc4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe f87d 	bl	8004b64 <uxListRemove>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	4798      	blx	r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d02f      	beq.n	8006ae0 <prvSwitchTimerLists+0x9c>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4413      	add	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d90e      	bls.n	8006ab0 <prvSwitchTimerLists+0x6c>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	605a      	str	r2, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b08 <prvSwitchTimerLists+0xc4>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7fe f822 	bl	8004af2 <vListInsert>
 8006aae:	e017      	b.n	8006ae0 <prvSwitchTimerLists+0x9c>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	2100      	movs	r1, #0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff fd58 	bl	8006570 <xTimerGenericCommand>
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <prvSwitchTimerLists+0x9c>
 8006ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <prvSwitchTimerLists+0x98>
 8006ae0:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <prvSwitchTimerLists+0xc4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1b0      	bne.n	8006a4c <prvSwitchTimerLists+0x8>
 8006aea:	4b07      	ldr	r3, [pc, #28]	@ (8006b08 <prvSwitchTimerLists+0xc4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	4b06      	ldr	r3, [pc, #24]	@ (8006b0c <prvSwitchTimerLists+0xc8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a04      	ldr	r2, [pc, #16]	@ (8006b08 <prvSwitchTimerLists+0xc4>)
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4a04      	ldr	r2, [pc, #16]	@ (8006b0c <prvSwitchTimerLists+0xc8>)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	bf00      	nop
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000ee8 	.word	0x20000ee8
 8006b0c:	20000eec 	.word	0x20000eec

08006b10 <prvCheckForValidListAndQueue>:
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	f000 f96f 	bl	8006df8 <vPortEnterCritical>
 8006b1a:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <prvCheckForValidListAndQueue+0x60>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d120      	bne.n	8006b64 <prvCheckForValidListAndQueue+0x54>
 8006b22:	4814      	ldr	r0, [pc, #80]	@ (8006b74 <prvCheckForValidListAndQueue+0x64>)
 8006b24:	f7fd ff94 	bl	8004a50 <vListInitialise>
 8006b28:	4813      	ldr	r0, [pc, #76]	@ (8006b78 <prvCheckForValidListAndQueue+0x68>)
 8006b2a:	f7fd ff91 	bl	8004a50 <vListInitialise>
 8006b2e:	4b13      	ldr	r3, [pc, #76]	@ (8006b7c <prvCheckForValidListAndQueue+0x6c>)
 8006b30:	4a10      	ldr	r2, [pc, #64]	@ (8006b74 <prvCheckForValidListAndQueue+0x64>)
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	4b12      	ldr	r3, [pc, #72]	@ (8006b80 <prvCheckForValidListAndQueue+0x70>)
 8006b36:	4a10      	ldr	r2, [pc, #64]	@ (8006b78 <prvCheckForValidListAndQueue+0x68>)
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4b11      	ldr	r3, [pc, #68]	@ (8006b84 <prvCheckForValidListAndQueue+0x74>)
 8006b40:	4a11      	ldr	r2, [pc, #68]	@ (8006b88 <prvCheckForValidListAndQueue+0x78>)
 8006b42:	2110      	movs	r1, #16
 8006b44:	200a      	movs	r0, #10
 8006b46:	f7fe f8a1 	bl	8004c8c <xQueueGenericCreateStatic>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4a08      	ldr	r2, [pc, #32]	@ (8006b70 <prvCheckForValidListAndQueue+0x60>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4b07      	ldr	r3, [pc, #28]	@ (8006b70 <prvCheckForValidListAndQueue+0x60>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <prvCheckForValidListAndQueue+0x54>
 8006b58:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <prvCheckForValidListAndQueue+0x60>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	490b      	ldr	r1, [pc, #44]	@ (8006b8c <prvCheckForValidListAndQueue+0x7c>)
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fcc6 	bl	80054f0 <vQueueAddToRegistry>
 8006b64:	f000 f97a 	bl	8006e5c <vPortExitCritical>
 8006b68:	bf00      	nop
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000ef0 	.word	0x20000ef0
 8006b74:	20000ec0 	.word	0x20000ec0
 8006b78:	20000ed4 	.word	0x20000ed4
 8006b7c:	20000ee8 	.word	0x20000ee8
 8006b80:	20000eec 	.word	0x20000eec
 8006b84:	20000f9c 	.word	0x20000f9c
 8006b88:	20000efc 	.word	0x20000efc
 8006b8c:	08007f34 	.word	0x08007f34

08006b90 <pxPortInitialiseStack>:
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3b04      	subs	r3, #4
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3b04      	subs	r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf4 <pxPortInitialiseStack+0x64>)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3b14      	subs	r3, #20
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f06f 0202 	mvn.w	r2, #2
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b20      	subs	r3, #32
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	08006bf9 	.word	0x08006bf9

08006bf8 <prvTaskExitError>:
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <prvTaskExitError+0x58>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d00b      	beq.n	8006c24 <prvTaskExitError+0x2c>
 8006c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
 8006c22:	e7fd      	b.n	8006c20 <prvTaskExitError+0x28>
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0fc      	beq.n	8006c3a <prvTaskExitError+0x42>
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000064 	.word	0x20000064
	...

08006c60 <SVC_Handler>:
 8006c60:	4b07      	ldr	r3, [pc, #28]	@ (8006c80 <pxCurrentTCBConst2>)
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6808      	ldr	r0, [r1, #0]
 8006c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	f380 8809 	msr	PSP, r0
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8811 	msr	BASEPRI, r0
 8006c7a:	4770      	bx	lr
 8006c7c:	f3af 8000 	nop.w

08006c80 <pxCurrentTCBConst2>:
 8006c80:	200009c0 	.word	0x200009c0
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <prvPortStartFirstTask>:
 8006c88:	4808      	ldr	r0, [pc, #32]	@ (8006cac <prvPortStartFirstTask+0x24>)
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	6800      	ldr	r0, [r0, #0]
 8006c8e:	f380 8808 	msr	MSP, r0
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8814 	msr	CONTROL, r0
 8006c9a:	b662      	cpsie	i
 8006c9c:	b661      	cpsie	f
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	df00      	svc	0
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e000ed08 	.word	0xe000ed08

08006cb0 <xPortStartScheduler>:
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4b47      	ldr	r3, [pc, #284]	@ (8006dd4 <xPortStartScheduler+0x124>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a47      	ldr	r2, [pc, #284]	@ (8006dd8 <xPortStartScheduler+0x128>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10b      	bne.n	8006cd8 <xPortStartScheduler+0x28>
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <xPortStartScheduler+0x24>
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd4 <xPortStartScheduler+0x124>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8006ddc <xPortStartScheduler+0x12c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d10b      	bne.n	8006cfa <xPortStartScheduler+0x4a>
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <xPortStartScheduler+0x46>
 8006cfa:	4b39      	ldr	r3, [pc, #228]	@ (8006de0 <xPortStartScheduler+0x130>)
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	607b      	str	r3, [r7, #4]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	22ff      	movs	r2, #255	@ 0xff
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	70fb      	strb	r3, [r7, #3]
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b31      	ldr	r3, [pc, #196]	@ (8006de4 <xPortStartScheduler+0x134>)
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	4b31      	ldr	r3, [pc, #196]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d24:	2207      	movs	r2, #7
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e009      	b.n	8006d3e <xPortStartScheduler+0x8e>
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	4a2d      	ldr	r2, [pc, #180]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	70fb      	strb	r3, [r7, #3]
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d46:	2b80      	cmp	r3, #128	@ 0x80
 8006d48:	d0ef      	beq.n	8006d2a <xPortStartScheduler+0x7a>
 8006d4a:	4b27      	ldr	r3, [pc, #156]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1c3 0307 	rsb	r3, r3, #7
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d00b      	beq.n	8006d6e <xPortStartScheduler+0xbe>
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60bb      	str	r3, [r7, #8]
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xPortStartScheduler+0xba>
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	4a1c      	ldr	r2, [pc, #112]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d80:	4a19      	ldr	r2, [pc, #100]	@ (8006de8 <xPortStartScheduler+0x138>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	4b17      	ldr	r3, [pc, #92]	@ (8006dec <xPortStartScheduler+0x13c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <xPortStartScheduler+0x13c>)
 8006d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	4b14      	ldr	r3, [pc, #80]	@ (8006dec <xPortStartScheduler+0x13c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a13      	ldr	r2, [pc, #76]	@ (8006dec <xPortStartScheduler+0x13c>)
 8006d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	f000 f8da 	bl	8006f5c <vPortSetupTimerInterrupt>
 8006da8:	4b11      	ldr	r3, [pc, #68]	@ (8006df0 <xPortStartScheduler+0x140>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f000 f8f9 	bl	8006fa4 <vPortEnableVFP>
 8006db2:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <xPortStartScheduler+0x144>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a0f      	ldr	r2, [pc, #60]	@ (8006df4 <xPortStartScheduler+0x144>)
 8006db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	f7ff ff63 	bl	8006c88 <prvPortStartFirstTask>
 8006dc2:	f7fe ffcd 	bl	8005d60 <vTaskSwitchContext>
 8006dc6:	f7ff ff17 	bl	8006bf8 <prvTaskExitError>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	e000ed00 	.word	0xe000ed00
 8006dd8:	410fc271 	.word	0x410fc271
 8006ddc:	410fc270 	.word	0x410fc270
 8006de0:	e000e400 	.word	0xe000e400
 8006de4:	20000fec 	.word	0x20000fec
 8006de8:	20000ff0 	.word	0x20000ff0
 8006dec:	e000ed20 	.word	0xe000ed20
 8006df0:	20000064 	.word	0x20000064
 8006df4:	e000ef34 	.word	0xe000ef34

08006df8 <vPortEnterCritical>:
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	bf00      	nop
 8006e12:	4b10      	ldr	r3, [pc, #64]	@ (8006e54 <vPortEnterCritical+0x5c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	4a0e      	ldr	r2, [pc, #56]	@ (8006e54 <vPortEnterCritical+0x5c>)
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <vPortEnterCritical+0x5c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d110      	bne.n	8006e46 <vPortEnterCritical+0x4e>
 8006e24:	4b0c      	ldr	r3, [pc, #48]	@ (8006e58 <vPortEnterCritical+0x60>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <vPortEnterCritical+0x4e>
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vPortEnterCritical+0x4a>
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000064 	.word	0x20000064
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <vPortExitCritical>:
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4b12      	ldr	r3, [pc, #72]	@ (8006eac <vPortExitCritical+0x50>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <vPortExitCritical+0x26>
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	607b      	str	r3, [r7, #4]
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <vPortExitCritical+0x22>
 8006e82:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <vPortExitCritical+0x50>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	4a08      	ldr	r2, [pc, #32]	@ (8006eac <vPortExitCritical+0x50>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vPortExitCritical+0x50>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <vPortExitCritical+0x44>
 8006e94:	2300      	movs	r3, #0
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20000064 	.word	0x20000064

08006eb0 <PendSV_Handler>:
 8006eb0:	f3ef 8009 	mrs	r0, PSP
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	4b15      	ldr	r3, [pc, #84]	@ (8006f10 <pxCurrentTCBConst>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f01e 0f10 	tst.w	lr, #16
 8006ec0:	bf08      	it	eq
 8006ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eca:	6010      	str	r0, [r2, #0]
 8006ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ed4:	f380 8811 	msr	BASEPRI, r0
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f7fe ff3e 	bl	8005d60 <vTaskSwitchContext>
 8006ee4:	f04f 0000 	mov.w	r0, #0
 8006ee8:	f380 8811 	msr	BASEPRI, r0
 8006eec:	bc09      	pop	{r0, r3}
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	6808      	ldr	r0, [r1, #0]
 8006ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef6:	f01e 0f10 	tst.w	lr, #16
 8006efa:	bf08      	it	eq
 8006efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f00:	f380 8809 	msr	PSP, r0
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w

08006f10 <pxCurrentTCBConst>:
 8006f10:	200009c0 	.word	0x200009c0
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <xPortSysTickHandler>:
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	607b      	str	r3, [r7, #4]
 8006f30:	bf00      	nop
 8006f32:	f7fe fe5b 	bl	8005bec <xTaskIncrementTick>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <xPortSysTickHandler+0x2c>
 8006f3c:	4b06      	ldr	r3, [pc, #24]	@ (8006f58 <xPortSysTickHandler+0x40>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vPortSetupTimerInterrupt>:
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	4b0b      	ldr	r3, [pc, #44]	@ (8006f90 <vPortSetupTimerInterrupt+0x34>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <vPortSetupTimerInterrupt+0x38>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <vPortSetupTimerInterrupt+0x3c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	@ (8006f9c <vPortSetupTimerInterrupt+0x40>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	4a09      	ldr	r2, [pc, #36]	@ (8006fa0 <vPortSetupTimerInterrupt+0x44>)
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	4b04      	ldr	r3, [pc, #16]	@ (8006f90 <vPortSetupTimerInterrupt+0x34>)
 8006f80:	2207      	movs	r2, #7
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	e000e010 	.word	0xe000e010
 8006f94:	e000e018 	.word	0xe000e018
 8006f98:	20000058 	.word	0x20000058
 8006f9c:	10624dd3 	.word	0x10624dd3
 8006fa0:	e000e014 	.word	0xe000e014

08006fa4 <vPortEnableVFP>:
 8006fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006fb4 <vPortEnableVFP+0x10>
 8006fa8:	6801      	ldr	r1, [r0, #0]
 8006faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006fae:	6001      	str	r1, [r0, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	e000ed88 	.word	0xe000ed88

08006fb8 <vPortValidateInterruptPriority>:
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	f3ef 8305 	mrs	r3, IPSR
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	d915      	bls.n	8006ff6 <vPortValidateInterruptPriority+0x3e>
 8006fca:	4a18      	ldr	r2, [pc, #96]	@ (800702c <vPortValidateInterruptPriority+0x74>)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	72fb      	strb	r3, [r7, #11]
 8006fd4:	4b16      	ldr	r3, [pc, #88]	@ (8007030 <vPortValidateInterruptPriority+0x78>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	7afa      	ldrb	r2, [r7, #11]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d20b      	bcs.n	8006ff6 <vPortValidateInterruptPriority+0x3e>
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <vPortValidateInterruptPriority+0x3a>
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <vPortValidateInterruptPriority+0x7c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8007038 <vPortValidateInterruptPriority+0x80>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d90b      	bls.n	800701e <vPortValidateInterruptPriority+0x66>
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <vPortValidateInterruptPriority+0x62>
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000e3f0 	.word	0xe000e3f0
 8007030:	20000fec 	.word	0x20000fec
 8007034:	e000ed0c 	.word	0xe000ed0c
 8007038:	20000ff0 	.word	0x20000ff0

0800703c <pvPortMalloc>:
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	f7fe fd14 	bl	8005a74 <vTaskSuspendAll>
 800704c:	4b5c      	ldr	r3, [pc, #368]	@ (80071c0 <pvPortMalloc+0x184>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <pvPortMalloc+0x1c>
 8007054:	f000 f924 	bl	80072a0 <prvHeapInit>
 8007058:	4b5a      	ldr	r3, [pc, #360]	@ (80071c4 <pvPortMalloc+0x188>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 8095 	bne.w	8007190 <pvPortMalloc+0x154>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01e      	beq.n	80070aa <pvPortMalloc+0x6e>
 800706c:	2208      	movs	r2, #8
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d015      	beq.n	80070aa <pvPortMalloc+0x6e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f023 0307 	bic.w	r3, r3, #7
 8007084:	3308      	adds	r3, #8
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <pvPortMalloc+0x6e>
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	e7fd      	b.n	80070a6 <pvPortMalloc+0x6a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d06f      	beq.n	8007190 <pvPortMalloc+0x154>
 80070b0:	4b45      	ldr	r3, [pc, #276]	@ (80071c8 <pvPortMalloc+0x18c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d86a      	bhi.n	8007190 <pvPortMalloc+0x154>
 80070ba:	4b44      	ldr	r3, [pc, #272]	@ (80071cc <pvPortMalloc+0x190>)
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	4b43      	ldr	r3, [pc, #268]	@ (80071cc <pvPortMalloc+0x190>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c4:	e004      	b.n	80070d0 <pvPortMalloc+0x94>
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d903      	bls.n	80070e2 <pvPortMalloc+0xa6>
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f1      	bne.n	80070c6 <pvPortMalloc+0x8a>
 80070e2:	4b37      	ldr	r3, [pc, #220]	@ (80071c0 <pvPortMalloc+0x184>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d051      	beq.n	8007190 <pvPortMalloc+0x154>
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2208      	movs	r2, #8
 80070f2:	4413      	add	r3, r2
 80070f4:	61fb      	str	r3, [r7, #28]
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	2308      	movs	r3, #8
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	429a      	cmp	r2, r3
 800710c:	d920      	bls.n	8007150 <pvPortMalloc+0x114>
 800710e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <pvPortMalloc+0xfc>
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	613b      	str	r3, [r7, #16]
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <pvPortMalloc+0xf8>
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	605a      	str	r2, [r3, #4]
 800714a:	69b8      	ldr	r0, [r7, #24]
 800714c:	f000 f90a 	bl	8007364 <prvInsertBlockIntoFreeList>
 8007150:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <pvPortMalloc+0x18c>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <pvPortMalloc+0x18c>)
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <pvPortMalloc+0x18c>)
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4b1b      	ldr	r3, [pc, #108]	@ (80071d0 <pvPortMalloc+0x194>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d203      	bcs.n	8007172 <pvPortMalloc+0x136>
 800716a:	4b17      	ldr	r3, [pc, #92]	@ (80071c8 <pvPortMalloc+0x18c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a18      	ldr	r2, [pc, #96]	@ (80071d0 <pvPortMalloc+0x194>)
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <pvPortMalloc+0x188>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	431a      	orrs	r2, r3
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	605a      	str	r2, [r3, #4]
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	4b13      	ldr	r3, [pc, #76]	@ (80071d4 <pvPortMalloc+0x198>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	4a11      	ldr	r2, [pc, #68]	@ (80071d4 <pvPortMalloc+0x198>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	f7fe fc7e 	bl	8005a90 <xTaskResumeAll>
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <pvPortMalloc+0x17a>
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <pvPortMalloc+0x176>
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4618      	mov	r0, r3
 80071ba:	3728      	adds	r7, #40	@ 0x28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20004bfc 	.word	0x20004bfc
 80071c4:	20004c10 	.word	0x20004c10
 80071c8:	20004c00 	.word	0x20004c00
 80071cc:	20004bf4 	.word	0x20004bf4
 80071d0:	20004c04 	.word	0x20004c04
 80071d4:	20004c08 	.word	0x20004c08

080071d8 <vPortFree>:
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d04f      	beq.n	800728a <vPortFree+0xb2>
 80071ea:	2308      	movs	r3, #8
 80071ec:	425b      	negs	r3, r3
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4413      	add	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b25      	ldr	r3, [pc, #148]	@ (8007294 <vPortFree+0xbc>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4013      	ands	r3, r2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <vPortFree+0x46>
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	e7fd      	b.n	800721a <vPortFree+0x42>
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <vPortFree+0x66>
 8007226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	e7fd      	b.n	800723a <vPortFree+0x62>
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <vPortFree+0xbc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4013      	ands	r3, r2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01e      	beq.n	800728a <vPortFree+0xb2>
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11a      	bne.n	800728a <vPortFree+0xb2>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	4b0e      	ldr	r3, [pc, #56]	@ (8007294 <vPortFree+0xbc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	43db      	mvns	r3, r3
 800725e:	401a      	ands	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	f7fe fc06 	bl	8005a74 <vTaskSuspendAll>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <vPortFree+0xc0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4413      	add	r3, r2
 8007272:	4a09      	ldr	r2, [pc, #36]	@ (8007298 <vPortFree+0xc0>)
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	6938      	ldr	r0, [r7, #16]
 8007278:	f000 f874 	bl	8007364 <prvInsertBlockIntoFreeList>
 800727c:	4b07      	ldr	r3, [pc, #28]	@ (800729c <vPortFree+0xc4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	4a06      	ldr	r2, [pc, #24]	@ (800729c <vPortFree+0xc4>)
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	f7fe fc03 	bl	8005a90 <xTaskResumeAll>
 800728a:	bf00      	nop
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20004c10 	.word	0x20004c10
 8007298:	20004c00 	.word	0x20004c00
 800729c:	20004c0c 	.word	0x20004c0c

080072a0 <prvHeapInit>:
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80072aa:	60bb      	str	r3, [r7, #8]
 80072ac:	4b27      	ldr	r3, [pc, #156]	@ (800734c <prvHeapInit+0xac>)
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00c      	beq.n	80072d4 <prvHeapInit+0x34>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3307      	adds	r3, #7
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0307 	bic.w	r3, r3, #7
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	4a1f      	ldr	r2, [pc, #124]	@ (800734c <prvHeapInit+0xac>)
 80072d0:	4413      	add	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007350 <prvHeapInit+0xb0>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	4b1c      	ldr	r3, [pc, #112]	@ (8007350 <prvHeapInit+0xb0>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	605a      	str	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	4413      	add	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	2208      	movs	r2, #8
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a15      	ldr	r2, [pc, #84]	@ (8007354 <prvHeapInit+0xb4>)
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	4b14      	ldr	r3, [pc, #80]	@ (8007354 <prvHeapInit+0xb4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
 800730a:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <prvHeapInit+0xb4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	605a      	str	r2, [r3, #4]
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <prvHeapInit+0xb4>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	4a0a      	ldr	r2, [pc, #40]	@ (8007358 <prvHeapInit+0xb8>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	4a09      	ldr	r2, [pc, #36]	@ (800735c <prvHeapInit+0xbc>)
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	4b09      	ldr	r3, [pc, #36]	@ (8007360 <prvHeapInit+0xc0>)
 800733a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20000ff4 	.word	0x20000ff4
 8007350:	20004bf4 	.word	0x20004bf4
 8007354:	20004bfc 	.word	0x20004bfc
 8007358:	20004c04 	.word	0x20004c04
 800735c:	20004c00 	.word	0x20004c00
 8007360:	20004c10 	.word	0x20004c10

08007364 <prvInsertBlockIntoFreeList>:
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	4b28      	ldr	r3, [pc, #160]	@ (8007410 <prvInsertBlockIntoFreeList+0xac>)
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e002      	b.n	8007378 <prvInsertBlockIntoFreeList+0x14>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	429a      	cmp	r2, r3
 8007380:	d8f7      	bhi.n	8007372 <prvInsertBlockIntoFreeList+0xe>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	60bb      	str	r3, [r7, #8]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d108      	bne.n	80073a6 <prvInsertBlockIntoFreeList+0x42>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	441a      	add	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	441a      	add	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d118      	bne.n	80073ec <prvInsertBlockIntoFreeList+0x88>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4b15      	ldr	r3, [pc, #84]	@ (8007414 <prvInsertBlockIntoFreeList+0xb0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d00d      	beq.n	80073e2 <prvInsertBlockIntoFreeList+0x7e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	441a      	add	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	605a      	str	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	e008      	b.n	80073f4 <prvInsertBlockIntoFreeList+0x90>
 80073e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <prvInsertBlockIntoFreeList+0xb0>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e003      	b.n	80073f4 <prvInsertBlockIntoFreeList+0x90>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d002      	beq.n	8007402 <prvInsertBlockIntoFreeList+0x9e>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	20004bf4 	.word	0x20004bf4
 8007414:	20004bfc 	.word	0x20004bfc

08007418 <sniprintf>:
 8007418:	b40c      	push	{r2, r3}
 800741a:	b530      	push	{r4, r5, lr}
 800741c:	4b17      	ldr	r3, [pc, #92]	@ (800747c <sniprintf+0x64>)
 800741e:	1e0c      	subs	r4, r1, #0
 8007420:	681d      	ldr	r5, [r3, #0]
 8007422:	b09d      	sub	sp, #116	@ 0x74
 8007424:	da08      	bge.n	8007438 <sniprintf+0x20>
 8007426:	238b      	movs	r3, #139	@ 0x8b
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	b01d      	add	sp, #116	@ 0x74
 8007430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007434:	b002      	add	sp, #8
 8007436:	4770      	bx	lr
 8007438:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800743c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007440:	bf14      	ite	ne
 8007442:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007446:	4623      	moveq	r3, r4
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	9307      	str	r3, [sp, #28]
 800744c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007450:	9002      	str	r0, [sp, #8]
 8007452:	9006      	str	r0, [sp, #24]
 8007454:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007458:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800745a:	ab21      	add	r3, sp, #132	@ 0x84
 800745c:	a902      	add	r1, sp, #8
 800745e:	4628      	mov	r0, r5
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	f000 f9f9 	bl	8007858 <_svfiprintf_r>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	bfbc      	itt	lt
 800746a:	238b      	movlt	r3, #139	@ 0x8b
 800746c:	602b      	strlt	r3, [r5, #0]
 800746e:	2c00      	cmp	r4, #0
 8007470:	d0dd      	beq.n	800742e <sniprintf+0x16>
 8007472:	9b02      	ldr	r3, [sp, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e7d9      	b.n	800742e <sniprintf+0x16>
 800747a:	bf00      	nop
 800747c:	20000068 	.word	0x20000068

08007480 <memset>:
 8007480:	4402      	add	r2, r0
 8007482:	4603      	mov	r3, r0
 8007484:	4293      	cmp	r3, r2
 8007486:	d100      	bne.n	800748a <memset+0xa>
 8007488:	4770      	bx	lr
 800748a:	f803 1b01 	strb.w	r1, [r3], #1
 800748e:	e7f9      	b.n	8007484 <memset+0x4>

08007490 <_reclaim_reent>:
 8007490:	4b29      	ldr	r3, [pc, #164]	@ (8007538 <_reclaim_reent+0xa8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4283      	cmp	r3, r0
 8007496:	b570      	push	{r4, r5, r6, lr}
 8007498:	4604      	mov	r4, r0
 800749a:	d04b      	beq.n	8007534 <_reclaim_reent+0xa4>
 800749c:	69c3      	ldr	r3, [r0, #28]
 800749e:	b1ab      	cbz	r3, 80074cc <_reclaim_reent+0x3c>
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	b16b      	cbz	r3, 80074c0 <_reclaim_reent+0x30>
 80074a4:	2500      	movs	r5, #0
 80074a6:	69e3      	ldr	r3, [r4, #28]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	5959      	ldr	r1, [r3, r5]
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d13b      	bne.n	8007528 <_reclaim_reent+0x98>
 80074b0:	3504      	adds	r5, #4
 80074b2:	2d80      	cmp	r5, #128	@ 0x80
 80074b4:	d1f7      	bne.n	80074a6 <_reclaim_reent+0x16>
 80074b6:	69e3      	ldr	r3, [r4, #28]
 80074b8:	4620      	mov	r0, r4
 80074ba:	68d9      	ldr	r1, [r3, #12]
 80074bc:	f000 f878 	bl	80075b0 <_free_r>
 80074c0:	69e3      	ldr	r3, [r4, #28]
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	b111      	cbz	r1, 80074cc <_reclaim_reent+0x3c>
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f872 	bl	80075b0 <_free_r>
 80074cc:	6961      	ldr	r1, [r4, #20]
 80074ce:	b111      	cbz	r1, 80074d6 <_reclaim_reent+0x46>
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 f86d 	bl	80075b0 <_free_r>
 80074d6:	69e1      	ldr	r1, [r4, #28]
 80074d8:	b111      	cbz	r1, 80074e0 <_reclaim_reent+0x50>
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 f868 	bl	80075b0 <_free_r>
 80074e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80074e2:	b111      	cbz	r1, 80074ea <_reclaim_reent+0x5a>
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 f863 	bl	80075b0 <_free_r>
 80074ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ec:	b111      	cbz	r1, 80074f4 <_reclaim_reent+0x64>
 80074ee:	4620      	mov	r0, r4
 80074f0:	f000 f85e 	bl	80075b0 <_free_r>
 80074f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80074f6:	b111      	cbz	r1, 80074fe <_reclaim_reent+0x6e>
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 f859 	bl	80075b0 <_free_r>
 80074fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007500:	b111      	cbz	r1, 8007508 <_reclaim_reent+0x78>
 8007502:	4620      	mov	r0, r4
 8007504:	f000 f854 	bl	80075b0 <_free_r>
 8007508:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800750a:	b111      	cbz	r1, 8007512 <_reclaim_reent+0x82>
 800750c:	4620      	mov	r0, r4
 800750e:	f000 f84f 	bl	80075b0 <_free_r>
 8007512:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007514:	b111      	cbz	r1, 800751c <_reclaim_reent+0x8c>
 8007516:	4620      	mov	r0, r4
 8007518:	f000 f84a 	bl	80075b0 <_free_r>
 800751c:	6a23      	ldr	r3, [r4, #32]
 800751e:	b14b      	cbz	r3, 8007534 <_reclaim_reent+0xa4>
 8007520:	4620      	mov	r0, r4
 8007522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007526:	4718      	bx	r3
 8007528:	680e      	ldr	r6, [r1, #0]
 800752a:	4620      	mov	r0, r4
 800752c:	f000 f840 	bl	80075b0 <_free_r>
 8007530:	4631      	mov	r1, r6
 8007532:	e7bb      	b.n	80074ac <_reclaim_reent+0x1c>
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	bf00      	nop
 8007538:	20000068 	.word	0x20000068

0800753c <__errno>:
 800753c:	4b01      	ldr	r3, [pc, #4]	@ (8007544 <__errno+0x8>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000068 	.word	0x20000068

08007548 <__libc_init_array>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4d0d      	ldr	r5, [pc, #52]	@ (8007580 <__libc_init_array+0x38>)
 800754c:	4c0d      	ldr	r4, [pc, #52]	@ (8007584 <__libc_init_array+0x3c>)
 800754e:	1b64      	subs	r4, r4, r5
 8007550:	10a4      	asrs	r4, r4, #2
 8007552:	2600      	movs	r6, #0
 8007554:	42a6      	cmp	r6, r4
 8007556:	d109      	bne.n	800756c <__libc_init_array+0x24>
 8007558:	4d0b      	ldr	r5, [pc, #44]	@ (8007588 <__libc_init_array+0x40>)
 800755a:	4c0c      	ldr	r4, [pc, #48]	@ (800758c <__libc_init_array+0x44>)
 800755c:	f000 fc66 	bl	8007e2c <_init>
 8007560:	1b64      	subs	r4, r4, r5
 8007562:	10a4      	asrs	r4, r4, #2
 8007564:	2600      	movs	r6, #0
 8007566:	42a6      	cmp	r6, r4
 8007568:	d105      	bne.n	8007576 <__libc_init_array+0x2e>
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007570:	4798      	blx	r3
 8007572:	3601      	adds	r6, #1
 8007574:	e7ee      	b.n	8007554 <__libc_init_array+0xc>
 8007576:	f855 3b04 	ldr.w	r3, [r5], #4
 800757a:	4798      	blx	r3
 800757c:	3601      	adds	r6, #1
 800757e:	e7f2      	b.n	8007566 <__libc_init_array+0x1e>
 8007580:	08007fd8 	.word	0x08007fd8
 8007584:	08007fd8 	.word	0x08007fd8
 8007588:	08007fd8 	.word	0x08007fd8
 800758c:	08007fdc 	.word	0x08007fdc

08007590 <__retarget_lock_acquire_recursive>:
 8007590:	4770      	bx	lr

08007592 <__retarget_lock_release_recursive>:
 8007592:	4770      	bx	lr

08007594 <memcpy>:
 8007594:	440a      	add	r2, r1
 8007596:	4291      	cmp	r1, r2
 8007598:	f100 33ff 	add.w	r3, r0, #4294967295
 800759c:	d100      	bne.n	80075a0 <memcpy+0xc>
 800759e:	4770      	bx	lr
 80075a0:	b510      	push	{r4, lr}
 80075a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075aa:	4291      	cmp	r1, r2
 80075ac:	d1f9      	bne.n	80075a2 <memcpy+0xe>
 80075ae:	bd10      	pop	{r4, pc}

080075b0 <_free_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4605      	mov	r5, r0
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d041      	beq.n	800763c <_free_r+0x8c>
 80075b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075bc:	1f0c      	subs	r4, r1, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bfb8      	it	lt
 80075c2:	18e4      	addlt	r4, r4, r3
 80075c4:	f000 f8e0 	bl	8007788 <__malloc_lock>
 80075c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007640 <_free_r+0x90>)
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	b933      	cbnz	r3, 80075dc <_free_r+0x2c>
 80075ce:	6063      	str	r3, [r4, #4]
 80075d0:	6014      	str	r4, [r2, #0]
 80075d2:	4628      	mov	r0, r5
 80075d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d8:	f000 b8dc 	b.w	8007794 <__malloc_unlock>
 80075dc:	42a3      	cmp	r3, r4
 80075de:	d908      	bls.n	80075f2 <_free_r+0x42>
 80075e0:	6820      	ldr	r0, [r4, #0]
 80075e2:	1821      	adds	r1, r4, r0
 80075e4:	428b      	cmp	r3, r1
 80075e6:	bf01      	itttt	eq
 80075e8:	6819      	ldreq	r1, [r3, #0]
 80075ea:	685b      	ldreq	r3, [r3, #4]
 80075ec:	1809      	addeq	r1, r1, r0
 80075ee:	6021      	streq	r1, [r4, #0]
 80075f0:	e7ed      	b.n	80075ce <_free_r+0x1e>
 80075f2:	461a      	mov	r2, r3
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	b10b      	cbz	r3, 80075fc <_free_r+0x4c>
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d9fa      	bls.n	80075f2 <_free_r+0x42>
 80075fc:	6811      	ldr	r1, [r2, #0]
 80075fe:	1850      	adds	r0, r2, r1
 8007600:	42a0      	cmp	r0, r4
 8007602:	d10b      	bne.n	800761c <_free_r+0x6c>
 8007604:	6820      	ldr	r0, [r4, #0]
 8007606:	4401      	add	r1, r0
 8007608:	1850      	adds	r0, r2, r1
 800760a:	4283      	cmp	r3, r0
 800760c:	6011      	str	r1, [r2, #0]
 800760e:	d1e0      	bne.n	80075d2 <_free_r+0x22>
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	6053      	str	r3, [r2, #4]
 8007616:	4408      	add	r0, r1
 8007618:	6010      	str	r0, [r2, #0]
 800761a:	e7da      	b.n	80075d2 <_free_r+0x22>
 800761c:	d902      	bls.n	8007624 <_free_r+0x74>
 800761e:	230c      	movs	r3, #12
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	e7d6      	b.n	80075d2 <_free_r+0x22>
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	1821      	adds	r1, r4, r0
 8007628:	428b      	cmp	r3, r1
 800762a:	bf04      	itt	eq
 800762c:	6819      	ldreq	r1, [r3, #0]
 800762e:	685b      	ldreq	r3, [r3, #4]
 8007630:	6063      	str	r3, [r4, #4]
 8007632:	bf04      	itt	eq
 8007634:	1809      	addeq	r1, r1, r0
 8007636:	6021      	streq	r1, [r4, #0]
 8007638:	6054      	str	r4, [r2, #4]
 800763a:	e7ca      	b.n	80075d2 <_free_r+0x22>
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	bf00      	nop
 8007640:	20004d58 	.word	0x20004d58

08007644 <sbrk_aligned>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4e0f      	ldr	r6, [pc, #60]	@ (8007684 <sbrk_aligned+0x40>)
 8007648:	460c      	mov	r4, r1
 800764a:	6831      	ldr	r1, [r6, #0]
 800764c:	4605      	mov	r5, r0
 800764e:	b911      	cbnz	r1, 8007656 <sbrk_aligned+0x12>
 8007650:	f000 fba6 	bl	8007da0 <_sbrk_r>
 8007654:	6030      	str	r0, [r6, #0]
 8007656:	4621      	mov	r1, r4
 8007658:	4628      	mov	r0, r5
 800765a:	f000 fba1 	bl	8007da0 <_sbrk_r>
 800765e:	1c43      	adds	r3, r0, #1
 8007660:	d103      	bne.n	800766a <sbrk_aligned+0x26>
 8007662:	f04f 34ff 	mov.w	r4, #4294967295
 8007666:	4620      	mov	r0, r4
 8007668:	bd70      	pop	{r4, r5, r6, pc}
 800766a:	1cc4      	adds	r4, r0, #3
 800766c:	f024 0403 	bic.w	r4, r4, #3
 8007670:	42a0      	cmp	r0, r4
 8007672:	d0f8      	beq.n	8007666 <sbrk_aligned+0x22>
 8007674:	1a21      	subs	r1, r4, r0
 8007676:	4628      	mov	r0, r5
 8007678:	f000 fb92 	bl	8007da0 <_sbrk_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d1f2      	bne.n	8007666 <sbrk_aligned+0x22>
 8007680:	e7ef      	b.n	8007662 <sbrk_aligned+0x1e>
 8007682:	bf00      	nop
 8007684:	20004d54 	.word	0x20004d54

08007688 <_malloc_r>:
 8007688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800768c:	1ccd      	adds	r5, r1, #3
 800768e:	f025 0503 	bic.w	r5, r5, #3
 8007692:	3508      	adds	r5, #8
 8007694:	2d0c      	cmp	r5, #12
 8007696:	bf38      	it	cc
 8007698:	250c      	movcc	r5, #12
 800769a:	2d00      	cmp	r5, #0
 800769c:	4606      	mov	r6, r0
 800769e:	db01      	blt.n	80076a4 <_malloc_r+0x1c>
 80076a0:	42a9      	cmp	r1, r5
 80076a2:	d904      	bls.n	80076ae <_malloc_r+0x26>
 80076a4:	230c      	movs	r3, #12
 80076a6:	6033      	str	r3, [r6, #0]
 80076a8:	2000      	movs	r0, #0
 80076aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007784 <_malloc_r+0xfc>
 80076b2:	f000 f869 	bl	8007788 <__malloc_lock>
 80076b6:	f8d8 3000 	ldr.w	r3, [r8]
 80076ba:	461c      	mov	r4, r3
 80076bc:	bb44      	cbnz	r4, 8007710 <_malloc_r+0x88>
 80076be:	4629      	mov	r1, r5
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ffbf 	bl	8007644 <sbrk_aligned>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	4604      	mov	r4, r0
 80076ca:	d158      	bne.n	800777e <_malloc_r+0xf6>
 80076cc:	f8d8 4000 	ldr.w	r4, [r8]
 80076d0:	4627      	mov	r7, r4
 80076d2:	2f00      	cmp	r7, #0
 80076d4:	d143      	bne.n	800775e <_malloc_r+0xd6>
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	d04b      	beq.n	8007772 <_malloc_r+0xea>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	4639      	mov	r1, r7
 80076de:	4630      	mov	r0, r6
 80076e0:	eb04 0903 	add.w	r9, r4, r3
 80076e4:	f000 fb5c 	bl	8007da0 <_sbrk_r>
 80076e8:	4581      	cmp	r9, r0
 80076ea:	d142      	bne.n	8007772 <_malloc_r+0xea>
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	1a6d      	subs	r5, r5, r1
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ffa6 	bl	8007644 <sbrk_aligned>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d03a      	beq.n	8007772 <_malloc_r+0xea>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	442b      	add	r3, r5
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	f8d8 3000 	ldr.w	r3, [r8]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	bb62      	cbnz	r2, 8007764 <_malloc_r+0xdc>
 800770a:	f8c8 7000 	str.w	r7, [r8]
 800770e:	e00f      	b.n	8007730 <_malloc_r+0xa8>
 8007710:	6822      	ldr	r2, [r4, #0]
 8007712:	1b52      	subs	r2, r2, r5
 8007714:	d420      	bmi.n	8007758 <_malloc_r+0xd0>
 8007716:	2a0b      	cmp	r2, #11
 8007718:	d917      	bls.n	800774a <_malloc_r+0xc2>
 800771a:	1961      	adds	r1, r4, r5
 800771c:	42a3      	cmp	r3, r4
 800771e:	6025      	str	r5, [r4, #0]
 8007720:	bf18      	it	ne
 8007722:	6059      	strne	r1, [r3, #4]
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	bf08      	it	eq
 8007728:	f8c8 1000 	streq.w	r1, [r8]
 800772c:	5162      	str	r2, [r4, r5]
 800772e:	604b      	str	r3, [r1, #4]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f82f 	bl	8007794 <__malloc_unlock>
 8007736:	f104 000b 	add.w	r0, r4, #11
 800773a:	1d23      	adds	r3, r4, #4
 800773c:	f020 0007 	bic.w	r0, r0, #7
 8007740:	1ac2      	subs	r2, r0, r3
 8007742:	bf1c      	itt	ne
 8007744:	1a1b      	subne	r3, r3, r0
 8007746:	50a3      	strne	r3, [r4, r2]
 8007748:	e7af      	b.n	80076aa <_malloc_r+0x22>
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	42a3      	cmp	r3, r4
 800774e:	bf0c      	ite	eq
 8007750:	f8c8 2000 	streq.w	r2, [r8]
 8007754:	605a      	strne	r2, [r3, #4]
 8007756:	e7eb      	b.n	8007730 <_malloc_r+0xa8>
 8007758:	4623      	mov	r3, r4
 800775a:	6864      	ldr	r4, [r4, #4]
 800775c:	e7ae      	b.n	80076bc <_malloc_r+0x34>
 800775e:	463c      	mov	r4, r7
 8007760:	687f      	ldr	r7, [r7, #4]
 8007762:	e7b6      	b.n	80076d2 <_malloc_r+0x4a>
 8007764:	461a      	mov	r2, r3
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	42a3      	cmp	r3, r4
 800776a:	d1fb      	bne.n	8007764 <_malloc_r+0xdc>
 800776c:	2300      	movs	r3, #0
 800776e:	6053      	str	r3, [r2, #4]
 8007770:	e7de      	b.n	8007730 <_malloc_r+0xa8>
 8007772:	230c      	movs	r3, #12
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	4630      	mov	r0, r6
 8007778:	f000 f80c 	bl	8007794 <__malloc_unlock>
 800777c:	e794      	b.n	80076a8 <_malloc_r+0x20>
 800777e:	6005      	str	r5, [r0, #0]
 8007780:	e7d6      	b.n	8007730 <_malloc_r+0xa8>
 8007782:	bf00      	nop
 8007784:	20004d58 	.word	0x20004d58

08007788 <__malloc_lock>:
 8007788:	4801      	ldr	r0, [pc, #4]	@ (8007790 <__malloc_lock+0x8>)
 800778a:	f7ff bf01 	b.w	8007590 <__retarget_lock_acquire_recursive>
 800778e:	bf00      	nop
 8007790:	20004d50 	.word	0x20004d50

08007794 <__malloc_unlock>:
 8007794:	4801      	ldr	r0, [pc, #4]	@ (800779c <__malloc_unlock+0x8>)
 8007796:	f7ff befc 	b.w	8007592 <__retarget_lock_release_recursive>
 800779a:	bf00      	nop
 800779c:	20004d50 	.word	0x20004d50

080077a0 <__ssputs_r>:
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	688e      	ldr	r6, [r1, #8]
 80077a6:	461f      	mov	r7, r3
 80077a8:	42be      	cmp	r6, r7
 80077aa:	680b      	ldr	r3, [r1, #0]
 80077ac:	4682      	mov	sl, r0
 80077ae:	460c      	mov	r4, r1
 80077b0:	4690      	mov	r8, r2
 80077b2:	d82d      	bhi.n	8007810 <__ssputs_r+0x70>
 80077b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077bc:	d026      	beq.n	800780c <__ssputs_r+0x6c>
 80077be:	6965      	ldr	r5, [r4, #20]
 80077c0:	6909      	ldr	r1, [r1, #16]
 80077c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c6:	eba3 0901 	sub.w	r9, r3, r1
 80077ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077ce:	1c7b      	adds	r3, r7, #1
 80077d0:	444b      	add	r3, r9
 80077d2:	106d      	asrs	r5, r5, #1
 80077d4:	429d      	cmp	r5, r3
 80077d6:	bf38      	it	cc
 80077d8:	461d      	movcc	r5, r3
 80077da:	0553      	lsls	r3, r2, #21
 80077dc:	d527      	bpl.n	800782e <__ssputs_r+0x8e>
 80077de:	4629      	mov	r1, r5
 80077e0:	f7ff ff52 	bl	8007688 <_malloc_r>
 80077e4:	4606      	mov	r6, r0
 80077e6:	b360      	cbz	r0, 8007842 <__ssputs_r+0xa2>
 80077e8:	6921      	ldr	r1, [r4, #16]
 80077ea:	464a      	mov	r2, r9
 80077ec:	f7ff fed2 	bl	8007594 <memcpy>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	6126      	str	r6, [r4, #16]
 80077fe:	6165      	str	r5, [r4, #20]
 8007800:	444e      	add	r6, r9
 8007802:	eba5 0509 	sub.w	r5, r5, r9
 8007806:	6026      	str	r6, [r4, #0]
 8007808:	60a5      	str	r5, [r4, #8]
 800780a:	463e      	mov	r6, r7
 800780c:	42be      	cmp	r6, r7
 800780e:	d900      	bls.n	8007812 <__ssputs_r+0x72>
 8007810:	463e      	mov	r6, r7
 8007812:	6820      	ldr	r0, [r4, #0]
 8007814:	4632      	mov	r2, r6
 8007816:	4641      	mov	r1, r8
 8007818:	f000 faa8 	bl	8007d6c <memmove>
 800781c:	68a3      	ldr	r3, [r4, #8]
 800781e:	1b9b      	subs	r3, r3, r6
 8007820:	60a3      	str	r3, [r4, #8]
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	4433      	add	r3, r6
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	2000      	movs	r0, #0
 800782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782e:	462a      	mov	r2, r5
 8007830:	f000 fac6 	bl	8007dc0 <_realloc_r>
 8007834:	4606      	mov	r6, r0
 8007836:	2800      	cmp	r0, #0
 8007838:	d1e0      	bne.n	80077fc <__ssputs_r+0x5c>
 800783a:	6921      	ldr	r1, [r4, #16]
 800783c:	4650      	mov	r0, sl
 800783e:	f7ff feb7 	bl	80075b0 <_free_r>
 8007842:	230c      	movs	r3, #12
 8007844:	f8ca 3000 	str.w	r3, [sl]
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	f04f 30ff 	mov.w	r0, #4294967295
 8007854:	e7e9      	b.n	800782a <__ssputs_r+0x8a>
	...

08007858 <_svfiprintf_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	4698      	mov	r8, r3
 800785e:	898b      	ldrh	r3, [r1, #12]
 8007860:	061b      	lsls	r3, r3, #24
 8007862:	b09d      	sub	sp, #116	@ 0x74
 8007864:	4607      	mov	r7, r0
 8007866:	460d      	mov	r5, r1
 8007868:	4614      	mov	r4, r2
 800786a:	d510      	bpl.n	800788e <_svfiprintf_r+0x36>
 800786c:	690b      	ldr	r3, [r1, #16]
 800786e:	b973      	cbnz	r3, 800788e <_svfiprintf_r+0x36>
 8007870:	2140      	movs	r1, #64	@ 0x40
 8007872:	f7ff ff09 	bl	8007688 <_malloc_r>
 8007876:	6028      	str	r0, [r5, #0]
 8007878:	6128      	str	r0, [r5, #16]
 800787a:	b930      	cbnz	r0, 800788a <_svfiprintf_r+0x32>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	b01d      	add	sp, #116	@ 0x74
 8007886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788a:	2340      	movs	r3, #64	@ 0x40
 800788c:	616b      	str	r3, [r5, #20]
 800788e:	2300      	movs	r3, #0
 8007890:	9309      	str	r3, [sp, #36]	@ 0x24
 8007892:	2320      	movs	r3, #32
 8007894:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007898:	f8cd 800c 	str.w	r8, [sp, #12]
 800789c:	2330      	movs	r3, #48	@ 0x30
 800789e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a3c <_svfiprintf_r+0x1e4>
 80078a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078a6:	f04f 0901 	mov.w	r9, #1
 80078aa:	4623      	mov	r3, r4
 80078ac:	469a      	mov	sl, r3
 80078ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078b2:	b10a      	cbz	r2, 80078b8 <_svfiprintf_r+0x60>
 80078b4:	2a25      	cmp	r2, #37	@ 0x25
 80078b6:	d1f9      	bne.n	80078ac <_svfiprintf_r+0x54>
 80078b8:	ebba 0b04 	subs.w	fp, sl, r4
 80078bc:	d00b      	beq.n	80078d6 <_svfiprintf_r+0x7e>
 80078be:	465b      	mov	r3, fp
 80078c0:	4622      	mov	r2, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff ff6b 	bl	80077a0 <__ssputs_r>
 80078ca:	3001      	adds	r0, #1
 80078cc:	f000 80a7 	beq.w	8007a1e <_svfiprintf_r+0x1c6>
 80078d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d2:	445a      	add	r2, fp
 80078d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80078d6:	f89a 3000 	ldrb.w	r3, [sl]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 809f 	beq.w	8007a1e <_svfiprintf_r+0x1c6>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f04f 32ff 	mov.w	r2, #4294967295
 80078e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ea:	f10a 0a01 	add.w	sl, sl, #1
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	9307      	str	r3, [sp, #28]
 80078f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80078f8:	4654      	mov	r4, sl
 80078fa:	2205      	movs	r2, #5
 80078fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007900:	484e      	ldr	r0, [pc, #312]	@ (8007a3c <_svfiprintf_r+0x1e4>)
 8007902:	f7f8 fc75 	bl	80001f0 <memchr>
 8007906:	9a04      	ldr	r2, [sp, #16]
 8007908:	b9d8      	cbnz	r0, 8007942 <_svfiprintf_r+0xea>
 800790a:	06d0      	lsls	r0, r2, #27
 800790c:	bf44      	itt	mi
 800790e:	2320      	movmi	r3, #32
 8007910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007914:	0711      	lsls	r1, r2, #28
 8007916:	bf44      	itt	mi
 8007918:	232b      	movmi	r3, #43	@ 0x2b
 800791a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800791e:	f89a 3000 	ldrb.w	r3, [sl]
 8007922:	2b2a      	cmp	r3, #42	@ 0x2a
 8007924:	d015      	beq.n	8007952 <_svfiprintf_r+0xfa>
 8007926:	9a07      	ldr	r2, [sp, #28]
 8007928:	4654      	mov	r4, sl
 800792a:	2000      	movs	r0, #0
 800792c:	f04f 0c0a 	mov.w	ip, #10
 8007930:	4621      	mov	r1, r4
 8007932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007936:	3b30      	subs	r3, #48	@ 0x30
 8007938:	2b09      	cmp	r3, #9
 800793a:	d94b      	bls.n	80079d4 <_svfiprintf_r+0x17c>
 800793c:	b1b0      	cbz	r0, 800796c <_svfiprintf_r+0x114>
 800793e:	9207      	str	r2, [sp, #28]
 8007940:	e014      	b.n	800796c <_svfiprintf_r+0x114>
 8007942:	eba0 0308 	sub.w	r3, r0, r8
 8007946:	fa09 f303 	lsl.w	r3, r9, r3
 800794a:	4313      	orrs	r3, r2
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	46a2      	mov	sl, r4
 8007950:	e7d2      	b.n	80078f8 <_svfiprintf_r+0xa0>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	1d19      	adds	r1, r3, #4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	9103      	str	r1, [sp, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	bfbb      	ittet	lt
 800795e:	425b      	neglt	r3, r3
 8007960:	f042 0202 	orrlt.w	r2, r2, #2
 8007964:	9307      	strge	r3, [sp, #28]
 8007966:	9307      	strlt	r3, [sp, #28]
 8007968:	bfb8      	it	lt
 800796a:	9204      	strlt	r2, [sp, #16]
 800796c:	7823      	ldrb	r3, [r4, #0]
 800796e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007970:	d10a      	bne.n	8007988 <_svfiprintf_r+0x130>
 8007972:	7863      	ldrb	r3, [r4, #1]
 8007974:	2b2a      	cmp	r3, #42	@ 0x2a
 8007976:	d132      	bne.n	80079de <_svfiprintf_r+0x186>
 8007978:	9b03      	ldr	r3, [sp, #12]
 800797a:	1d1a      	adds	r2, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	9203      	str	r2, [sp, #12]
 8007980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007984:	3402      	adds	r4, #2
 8007986:	9305      	str	r3, [sp, #20]
 8007988:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a4c <_svfiprintf_r+0x1f4>
 800798c:	7821      	ldrb	r1, [r4, #0]
 800798e:	2203      	movs	r2, #3
 8007990:	4650      	mov	r0, sl
 8007992:	f7f8 fc2d 	bl	80001f0 <memchr>
 8007996:	b138      	cbz	r0, 80079a8 <_svfiprintf_r+0x150>
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	eba0 000a 	sub.w	r0, r0, sl
 800799e:	2240      	movs	r2, #64	@ 0x40
 80079a0:	4082      	lsls	r2, r0
 80079a2:	4313      	orrs	r3, r2
 80079a4:	3401      	adds	r4, #1
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ac:	4824      	ldr	r0, [pc, #144]	@ (8007a40 <_svfiprintf_r+0x1e8>)
 80079ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079b2:	2206      	movs	r2, #6
 80079b4:	f7f8 fc1c 	bl	80001f0 <memchr>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d036      	beq.n	8007a2a <_svfiprintf_r+0x1d2>
 80079bc:	4b21      	ldr	r3, [pc, #132]	@ (8007a44 <_svfiprintf_r+0x1ec>)
 80079be:	bb1b      	cbnz	r3, 8007a08 <_svfiprintf_r+0x1b0>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	3307      	adds	r3, #7
 80079c4:	f023 0307 	bic.w	r3, r3, #7
 80079c8:	3308      	adds	r3, #8
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ce:	4433      	add	r3, r6
 80079d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80079d2:	e76a      	b.n	80078aa <_svfiprintf_r+0x52>
 80079d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d8:	460c      	mov	r4, r1
 80079da:	2001      	movs	r0, #1
 80079dc:	e7a8      	b.n	8007930 <_svfiprintf_r+0xd8>
 80079de:	2300      	movs	r3, #0
 80079e0:	3401      	adds	r4, #1
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	4619      	mov	r1, r3
 80079e6:	f04f 0c0a 	mov.w	ip, #10
 80079ea:	4620      	mov	r0, r4
 80079ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079f0:	3a30      	subs	r2, #48	@ 0x30
 80079f2:	2a09      	cmp	r2, #9
 80079f4:	d903      	bls.n	80079fe <_svfiprintf_r+0x1a6>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0c6      	beq.n	8007988 <_svfiprintf_r+0x130>
 80079fa:	9105      	str	r1, [sp, #20]
 80079fc:	e7c4      	b.n	8007988 <_svfiprintf_r+0x130>
 80079fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a02:	4604      	mov	r4, r0
 8007a04:	2301      	movs	r3, #1
 8007a06:	e7f0      	b.n	80079ea <_svfiprintf_r+0x192>
 8007a08:	ab03      	add	r3, sp, #12
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <_svfiprintf_r+0x1f0>)
 8007a10:	a904      	add	r1, sp, #16
 8007a12:	4638      	mov	r0, r7
 8007a14:	f3af 8000 	nop.w
 8007a18:	1c42      	adds	r2, r0, #1
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	d1d6      	bne.n	80079cc <_svfiprintf_r+0x174>
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	065b      	lsls	r3, r3, #25
 8007a22:	f53f af2d 	bmi.w	8007880 <_svfiprintf_r+0x28>
 8007a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a28:	e72c      	b.n	8007884 <_svfiprintf_r+0x2c>
 8007a2a:	ab03      	add	r3, sp, #12
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	462a      	mov	r2, r5
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <_svfiprintf_r+0x1f0>)
 8007a32:	a904      	add	r1, sp, #16
 8007a34:	4638      	mov	r0, r7
 8007a36:	f000 f879 	bl	8007b2c <_printf_i>
 8007a3a:	e7ed      	b.n	8007a18 <_svfiprintf_r+0x1c0>
 8007a3c:	08007f9c 	.word	0x08007f9c
 8007a40:	08007fa6 	.word	0x08007fa6
 8007a44:	00000000 	.word	0x00000000
 8007a48:	080077a1 	.word	0x080077a1
 8007a4c:	08007fa2 	.word	0x08007fa2

08007a50 <_printf_common>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4616      	mov	r6, r2
 8007a56:	4698      	mov	r8, r3
 8007a58:	688a      	ldr	r2, [r1, #8]
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bfb8      	it	lt
 8007a64:	4613      	movlt	r3, r2
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	b10a      	cbz	r2, 8007a76 <_printf_common+0x26>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6033      	str	r3, [r6, #0]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	0699      	lsls	r1, r3, #26
 8007a7a:	bf42      	ittt	mi
 8007a7c:	6833      	ldrmi	r3, [r6, #0]
 8007a7e:	3302      	addmi	r3, #2
 8007a80:	6033      	strmi	r3, [r6, #0]
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	f015 0506 	ands.w	r5, r5, #6
 8007a88:	d106      	bne.n	8007a98 <_printf_common+0x48>
 8007a8a:	f104 0a19 	add.w	sl, r4, #25
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	6832      	ldr	r2, [r6, #0]
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc26      	bgt.n	8007ae6 <_printf_common+0x96>
 8007a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	3b00      	subs	r3, #0
 8007aa0:	bf18      	it	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	0692      	lsls	r2, r2, #26
 8007aa6:	d42b      	bmi.n	8007b00 <_printf_common+0xb0>
 8007aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007aac:	4641      	mov	r1, r8
 8007aae:	4638      	mov	r0, r7
 8007ab0:	47c8      	blx	r9
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d01e      	beq.n	8007af4 <_printf_common+0xa4>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	6922      	ldr	r2, [r4, #16]
 8007aba:	f003 0306 	and.w	r3, r3, #6
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	bf02      	ittt	eq
 8007ac2:	68e5      	ldreq	r5, [r4, #12]
 8007ac4:	6833      	ldreq	r3, [r6, #0]
 8007ac6:	1aed      	subeq	r5, r5, r3
 8007ac8:	68a3      	ldr	r3, [r4, #8]
 8007aca:	bf0c      	ite	eq
 8007acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad0:	2500      	movne	r5, #0
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	bfc4      	itt	gt
 8007ad6:	1a9b      	subgt	r3, r3, r2
 8007ad8:	18ed      	addgt	r5, r5, r3
 8007ada:	2600      	movs	r6, #0
 8007adc:	341a      	adds	r4, #26
 8007ade:	42b5      	cmp	r5, r6
 8007ae0:	d11a      	bne.n	8007b18 <_printf_common+0xc8>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e008      	b.n	8007af8 <_printf_common+0xa8>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4652      	mov	r2, sl
 8007aea:	4641      	mov	r1, r8
 8007aec:	4638      	mov	r0, r7
 8007aee:	47c8      	blx	r9
 8007af0:	3001      	adds	r0, #1
 8007af2:	d103      	bne.n	8007afc <_printf_common+0xac>
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afc:	3501      	adds	r5, #1
 8007afe:	e7c6      	b.n	8007a8e <_printf_common+0x3e>
 8007b00:	18e1      	adds	r1, r4, r3
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	2030      	movs	r0, #48	@ 0x30
 8007b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b0a:	4422      	add	r2, r4
 8007b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b14:	3302      	adds	r3, #2
 8007b16:	e7c7      	b.n	8007aa8 <_printf_common+0x58>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	4638      	mov	r0, r7
 8007b20:	47c8      	blx	r9
 8007b22:	3001      	adds	r0, #1
 8007b24:	d0e6      	beq.n	8007af4 <_printf_common+0xa4>
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7d9      	b.n	8007ade <_printf_common+0x8e>
	...

08007b2c <_printf_i>:
 8007b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	7e0f      	ldrb	r7, [r1, #24]
 8007b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b34:	2f78      	cmp	r7, #120	@ 0x78
 8007b36:	4691      	mov	r9, r2
 8007b38:	4680      	mov	r8, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	469a      	mov	sl, r3
 8007b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b42:	d807      	bhi.n	8007b54 <_printf_i+0x28>
 8007b44:	2f62      	cmp	r7, #98	@ 0x62
 8007b46:	d80a      	bhi.n	8007b5e <_printf_i+0x32>
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	f000 80d2 	beq.w	8007cf2 <_printf_i+0x1c6>
 8007b4e:	2f58      	cmp	r7, #88	@ 0x58
 8007b50:	f000 80b9 	beq.w	8007cc6 <_printf_i+0x19a>
 8007b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b5c:	e03a      	b.n	8007bd4 <_printf_i+0xa8>
 8007b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b62:	2b15      	cmp	r3, #21
 8007b64:	d8f6      	bhi.n	8007b54 <_printf_i+0x28>
 8007b66:	a101      	add	r1, pc, #4	@ (adr r1, 8007b6c <_printf_i+0x40>)
 8007b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007b55 	.word	0x08007b55
 8007b78:	08007b55 	.word	0x08007b55
 8007b7c:	08007b55 	.word	0x08007b55
 8007b80:	08007b55 	.word	0x08007b55
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007b55 	.word	0x08007b55
 8007b8c:	08007b55 	.word	0x08007b55
 8007b90:	08007b55 	.word	0x08007b55
 8007b94:	08007b55 	.word	0x08007b55
 8007b98:	08007cd9 	.word	0x08007cd9
 8007b9c:	08007c03 	.word	0x08007c03
 8007ba0:	08007c93 	.word	0x08007c93
 8007ba4:	08007b55 	.word	0x08007b55
 8007ba8:	08007b55 	.word	0x08007b55
 8007bac:	08007cfb 	.word	0x08007cfb
 8007bb0:	08007b55 	.word	0x08007b55
 8007bb4:	08007c03 	.word	0x08007c03
 8007bb8:	08007b55 	.word	0x08007b55
 8007bbc:	08007b55 	.word	0x08007b55
 8007bc0:	08007c9b 	.word	0x08007c9b
 8007bc4:	6833      	ldr	r3, [r6, #0]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6032      	str	r2, [r6, #0]
 8007bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e09d      	b.n	8007d14 <_printf_i+0x1e8>
 8007bd8:	6833      	ldr	r3, [r6, #0]
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	1d19      	adds	r1, r3, #4
 8007bde:	6031      	str	r1, [r6, #0]
 8007be0:	0606      	lsls	r6, r0, #24
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0xbc>
 8007be4:	681d      	ldr	r5, [r3, #0]
 8007be6:	e003      	b.n	8007bf0 <_printf_i+0xc4>
 8007be8:	0645      	lsls	r5, r0, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0xb8>
 8007bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	da03      	bge.n	8007bfc <_printf_i+0xd0>
 8007bf4:	232d      	movs	r3, #45	@ 0x2d
 8007bf6:	426d      	negs	r5, r5
 8007bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bfc:	4859      	ldr	r0, [pc, #356]	@ (8007d64 <_printf_i+0x238>)
 8007bfe:	230a      	movs	r3, #10
 8007c00:	e011      	b.n	8007c26 <_printf_i+0xfa>
 8007c02:	6821      	ldr	r1, [r4, #0]
 8007c04:	6833      	ldr	r3, [r6, #0]
 8007c06:	0608      	lsls	r0, r1, #24
 8007c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c0c:	d402      	bmi.n	8007c14 <_printf_i+0xe8>
 8007c0e:	0649      	lsls	r1, r1, #25
 8007c10:	bf48      	it	mi
 8007c12:	b2ad      	uxthmi	r5, r5
 8007c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c16:	4853      	ldr	r0, [pc, #332]	@ (8007d64 <_printf_i+0x238>)
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	bf14      	ite	ne
 8007c1c:	230a      	movne	r3, #10
 8007c1e:	2308      	moveq	r3, #8
 8007c20:	2100      	movs	r1, #0
 8007c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c26:	6866      	ldr	r6, [r4, #4]
 8007c28:	60a6      	str	r6, [r4, #8]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	bfa2      	ittt	ge
 8007c2e:	6821      	ldrge	r1, [r4, #0]
 8007c30:	f021 0104 	bicge.w	r1, r1, #4
 8007c34:	6021      	strge	r1, [r4, #0]
 8007c36:	b90d      	cbnz	r5, 8007c3c <_printf_i+0x110>
 8007c38:	2e00      	cmp	r6, #0
 8007c3a:	d04b      	beq.n	8007cd4 <_printf_i+0x1a8>
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c42:	fb03 5711 	mls	r7, r3, r1, r5
 8007c46:	5dc7      	ldrb	r7, [r0, r7]
 8007c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c4c:	462f      	mov	r7, r5
 8007c4e:	42bb      	cmp	r3, r7
 8007c50:	460d      	mov	r5, r1
 8007c52:	d9f4      	bls.n	8007c3e <_printf_i+0x112>
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d10b      	bne.n	8007c70 <_printf_i+0x144>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	07df      	lsls	r7, r3, #31
 8007c5c:	d508      	bpl.n	8007c70 <_printf_i+0x144>
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	6861      	ldr	r1, [r4, #4]
 8007c62:	4299      	cmp	r1, r3
 8007c64:	bfde      	ittt	le
 8007c66:	2330      	movle	r3, #48	@ 0x30
 8007c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c70:	1b92      	subs	r2, r2, r6
 8007c72:	6122      	str	r2, [r4, #16]
 8007c74:	f8cd a000 	str.w	sl, [sp]
 8007c78:	464b      	mov	r3, r9
 8007c7a:	aa03      	add	r2, sp, #12
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7ff fee6 	bl	8007a50 <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d14a      	bne.n	8007d1e <_printf_i+0x1f2>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	b004      	add	sp, #16
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	f043 0320 	orr.w	r3, r3, #32
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	4833      	ldr	r0, [pc, #204]	@ (8007d68 <_printf_i+0x23c>)
 8007c9c:	2778      	movs	r7, #120	@ 0x78
 8007c9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	6831      	ldr	r1, [r6, #0]
 8007ca6:	061f      	lsls	r7, r3, #24
 8007ca8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cac:	d402      	bmi.n	8007cb4 <_printf_i+0x188>
 8007cae:	065f      	lsls	r7, r3, #25
 8007cb0:	bf48      	it	mi
 8007cb2:	b2ad      	uxthmi	r5, r5
 8007cb4:	6031      	str	r1, [r6, #0]
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	bf44      	itt	mi
 8007cba:	f043 0320 	orrmi.w	r3, r3, #32
 8007cbe:	6023      	strmi	r3, [r4, #0]
 8007cc0:	b11d      	cbz	r5, 8007cca <_printf_i+0x19e>
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	e7ac      	b.n	8007c20 <_printf_i+0xf4>
 8007cc6:	4827      	ldr	r0, [pc, #156]	@ (8007d64 <_printf_i+0x238>)
 8007cc8:	e7e9      	b.n	8007c9e <_printf_i+0x172>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	f023 0320 	bic.w	r3, r3, #32
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	e7f6      	b.n	8007cc2 <_printf_i+0x196>
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	e7bd      	b.n	8007c54 <_printf_i+0x128>
 8007cd8:	6833      	ldr	r3, [r6, #0]
 8007cda:	6825      	ldr	r5, [r4, #0]
 8007cdc:	6961      	ldr	r1, [r4, #20]
 8007cde:	1d18      	adds	r0, r3, #4
 8007ce0:	6030      	str	r0, [r6, #0]
 8007ce2:	062e      	lsls	r6, r5, #24
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	d501      	bpl.n	8007cec <_printf_i+0x1c0>
 8007ce8:	6019      	str	r1, [r3, #0]
 8007cea:	e002      	b.n	8007cf2 <_printf_i+0x1c6>
 8007cec:	0668      	lsls	r0, r5, #25
 8007cee:	d5fb      	bpl.n	8007ce8 <_printf_i+0x1bc>
 8007cf0:	8019      	strh	r1, [r3, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	4616      	mov	r6, r2
 8007cf8:	e7bc      	b.n	8007c74 <_printf_i+0x148>
 8007cfa:	6833      	ldr	r3, [r6, #0]
 8007cfc:	1d1a      	adds	r2, r3, #4
 8007cfe:	6032      	str	r2, [r6, #0]
 8007d00:	681e      	ldr	r6, [r3, #0]
 8007d02:	6862      	ldr	r2, [r4, #4]
 8007d04:	2100      	movs	r1, #0
 8007d06:	4630      	mov	r0, r6
 8007d08:	f7f8 fa72 	bl	80001f0 <memchr>
 8007d0c:	b108      	cbz	r0, 8007d12 <_printf_i+0x1e6>
 8007d0e:	1b80      	subs	r0, r0, r6
 8007d10:	6060      	str	r0, [r4, #4]
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	2300      	movs	r3, #0
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d1c:	e7aa      	b.n	8007c74 <_printf_i+0x148>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	4632      	mov	r2, r6
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d0ad      	beq.n	8007c88 <_printf_i+0x15c>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	d413      	bmi.n	8007d5a <_printf_i+0x22e>
 8007d32:	68e0      	ldr	r0, [r4, #12]
 8007d34:	9b03      	ldr	r3, [sp, #12]
 8007d36:	4298      	cmp	r0, r3
 8007d38:	bfb8      	it	lt
 8007d3a:	4618      	movlt	r0, r3
 8007d3c:	e7a6      	b.n	8007c8c <_printf_i+0x160>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	4632      	mov	r2, r6
 8007d42:	4649      	mov	r1, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	47d0      	blx	sl
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d09d      	beq.n	8007c88 <_printf_i+0x15c>
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	68e3      	ldr	r3, [r4, #12]
 8007d50:	9903      	ldr	r1, [sp, #12]
 8007d52:	1a5b      	subs	r3, r3, r1
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dcf2      	bgt.n	8007d3e <_printf_i+0x212>
 8007d58:	e7eb      	b.n	8007d32 <_printf_i+0x206>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	f104 0619 	add.w	r6, r4, #25
 8007d60:	e7f5      	b.n	8007d4e <_printf_i+0x222>
 8007d62:	bf00      	nop
 8007d64:	08007fad 	.word	0x08007fad
 8007d68:	08007fbe 	.word	0x08007fbe

08007d6c <memmove>:
 8007d6c:	4288      	cmp	r0, r1
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	eb01 0402 	add.w	r4, r1, r2
 8007d74:	d902      	bls.n	8007d7c <memmove+0x10>
 8007d76:	4284      	cmp	r4, r0
 8007d78:	4623      	mov	r3, r4
 8007d7a:	d807      	bhi.n	8007d8c <memmove+0x20>
 8007d7c:	1e43      	subs	r3, r0, #1
 8007d7e:	42a1      	cmp	r1, r4
 8007d80:	d008      	beq.n	8007d94 <memmove+0x28>
 8007d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d8a:	e7f8      	b.n	8007d7e <memmove+0x12>
 8007d8c:	4402      	add	r2, r0
 8007d8e:	4601      	mov	r1, r0
 8007d90:	428a      	cmp	r2, r1
 8007d92:	d100      	bne.n	8007d96 <memmove+0x2a>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d9e:	e7f7      	b.n	8007d90 <memmove+0x24>

08007da0 <_sbrk_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	@ (8007dbc <_sbrk_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7fa fff4 	bl	8002d98 <_sbrk>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_sbrk_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_sbrk_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20004d4c 	.word	0x20004d4c

08007dc0 <_realloc_r>:
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	4615      	mov	r5, r2
 8007dc8:	460c      	mov	r4, r1
 8007dca:	b921      	cbnz	r1, 8007dd6 <_realloc_r+0x16>
 8007dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	f7ff bc59 	b.w	8007688 <_malloc_r>
 8007dd6:	b92a      	cbnz	r2, 8007de4 <_realloc_r+0x24>
 8007dd8:	f7ff fbea 	bl	80075b0 <_free_r>
 8007ddc:	2400      	movs	r4, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	f000 f81a 	bl	8007e1c <_malloc_usable_size_r>
 8007de8:	4285      	cmp	r5, r0
 8007dea:	4606      	mov	r6, r0
 8007dec:	d802      	bhi.n	8007df4 <_realloc_r+0x34>
 8007dee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007df2:	d8f4      	bhi.n	8007dde <_realloc_r+0x1e>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4640      	mov	r0, r8
 8007df8:	f7ff fc46 	bl	8007688 <_malloc_r>
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d0ec      	beq.n	8007ddc <_realloc_r+0x1c>
 8007e02:	42b5      	cmp	r5, r6
 8007e04:	462a      	mov	r2, r5
 8007e06:	4621      	mov	r1, r4
 8007e08:	bf28      	it	cs
 8007e0a:	4632      	movcs	r2, r6
 8007e0c:	f7ff fbc2 	bl	8007594 <memcpy>
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f7ff fbcc 	bl	80075b0 <_free_r>
 8007e18:	463c      	mov	r4, r7
 8007e1a:	e7e0      	b.n	8007dde <_realloc_r+0x1e>

08007e1c <_malloc_usable_size_r>:
 8007e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e20:	1f18      	subs	r0, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbc      	itt	lt
 8007e26:	580b      	ldrlt	r3, [r1, r0]
 8007e28:	18c0      	addlt	r0, r0, r3
 8007e2a:	4770      	bx	lr

08007e2c <_init>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr

08007e38 <_fini>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr
