
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006c54  08006c54  00007c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d84  08006d84  000080ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006d84  08006d84  00007d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d8c  08006d8c  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d8c  08006d8c  00007d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d90  08006d90  00007d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08006d94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  200000ac  08006e40  000080ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d2c  08006e40  00008d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f8b  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  0001f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00023ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938d  00000000  00000000  00024c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017354  00000000  00000000  0003dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098774  00000000  00000000  0005530f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eda83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000edac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f3400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c3c 	.word	0x08006c3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08006c3c 	.word	0x08006c3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ScanColumns>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 80c0 	bhi.w	8000712 <ScanColumns+0x192>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ScanColumns+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	08000605 	.word	0x08000605
 80005a0:	0800065f 	.word	0x0800065f
 80005a4:	080006b9 	.word	0x080006b9
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80005a8:	2101      	movs	r1, #1
 80005aa:	4861      	ldr	r0, [pc, #388]	@ (8000730 <ScanColumns+0x1b0>)
 80005ac:	f001 fe74 	bl	8002298 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <ScanColumns+0x3a>
 80005b6:	2343      	movs	r3, #67	@ 0x43
 80005b8:	e0b5      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 80005ba:	2102      	movs	r1, #2
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <ScanColumns+0x1b0>)
 80005be:	f001 fe6b 	bl	8002298 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <ScanColumns+0x4c>
 80005c8:	2337      	movs	r3, #55	@ 0x37
 80005ca:	e0ac      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 80005cc:	2104      	movs	r1, #4
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <ScanColumns+0x1b0>)
 80005d0:	f001 fe62 	bl	8002298 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ScanColumns+0x5e>
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	e0a3      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 80005de:	2108      	movs	r1, #8
 80005e0:	4853      	ldr	r0, [pc, #332]	@ (8000730 <ScanColumns+0x1b0>)
 80005e2:	f001 fe59 	bl	8002298 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <ScanColumns+0x70>
 80005ec:	2331      	movs	r3, #49	@ 0x31
 80005ee:	e09a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 80005f0:	2110      	movs	r1, #16
 80005f2:	484f      	ldr	r0, [pc, #316]	@ (8000730 <ScanColumns+0x1b0>)
 80005f4:	f001 fe50 	bl	8002298 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 808b 	bne.w	8000716 <ScanColumns+0x196>
 8000600:	2341      	movs	r3, #65	@ 0x41
 8000602:	e090      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000604:	2101      	movs	r1, #1
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <ScanColumns+0x1b0>)
 8000608:	f001 fe46 	bl	8002298 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ScanColumns+0x96>
 8000612:	2330      	movs	r3, #48	@ 0x30
 8000614:	e087      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000616:	2102      	movs	r1, #2
 8000618:	4845      	ldr	r0, [pc, #276]	@ (8000730 <ScanColumns+0x1b0>)
 800061a:	f001 fe3d 	bl	8002298 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ScanColumns+0xa8>
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	e07e      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000628:	2104      	movs	r1, #4
 800062a:	4841      	ldr	r0, [pc, #260]	@ (8000730 <ScanColumns+0x1b0>)
 800062c:	f001 fe34 	bl	8002298 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <ScanColumns+0xba>
 8000636:	2335      	movs	r3, #53	@ 0x35
 8000638:	e075      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800063a:	2108      	movs	r1, #8
 800063c:	483c      	ldr	r0, [pc, #240]	@ (8000730 <ScanColumns+0x1b0>)
 800063e:	f001 fe2b 	bl	8002298 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <ScanColumns+0xcc>
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	e06c      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800064c:	2110      	movs	r1, #16
 800064e:	4838      	ldr	r0, [pc, #224]	@ (8000730 <ScanColumns+0x1b0>)
 8000650:	f001 fe22 	bl	8002298 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d15f      	bne.n	800071a <ScanColumns+0x19a>
 800065a:	2342      	movs	r3, #66	@ 0x42
 800065c:	e063      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 800065e:	2101      	movs	r1, #1
 8000660:	4833      	ldr	r0, [pc, #204]	@ (8000730 <ScanColumns+0x1b0>)
 8000662:	f001 fe19 	bl	8002298 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <ScanColumns+0xf0>
 800066c:	2345      	movs	r3, #69	@ 0x45
 800066e:	e05a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000670:	2102      	movs	r1, #2
 8000672:	482f      	ldr	r0, [pc, #188]	@ (8000730 <ScanColumns+0x1b0>)
 8000674:	f001 fe10 	bl	8002298 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <ScanColumns+0x102>
 800067e:	2339      	movs	r3, #57	@ 0x39
 8000680:	e051      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000682:	2104      	movs	r1, #4
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <ScanColumns+0x1b0>)
 8000686:	f001 fe07 	bl	8002298 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <ScanColumns+0x114>
 8000690:	2336      	movs	r3, #54	@ 0x36
 8000692:	e048      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000694:	2108      	movs	r1, #8
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <ScanColumns+0x1b0>)
 8000698:	f001 fdfe 	bl	8002298 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <ScanColumns+0x126>
 80006a2:	2333      	movs	r3, #51	@ 0x33
 80006a4:	e03f      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80006a6:	2110      	movs	r1, #16
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <ScanColumns+0x1b0>)
 80006aa:	f001 fdf5 	bl	8002298 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d134      	bne.n	800071e <ScanColumns+0x19e>
 80006b4:	2344      	movs	r3, #68	@ 0x44
 80006b6:	e036      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 80006b8:	2101      	movs	r1, #1
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <ScanColumns+0x1b0>)
 80006bc:	f001 fdec 	bl	8002298 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <ScanColumns+0x14a>
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	e02d      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 80006ca:	2102      	movs	r1, #2
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <ScanColumns+0x1b0>)
 80006ce:	f001 fde3 	bl	8002298 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <ScanColumns+0x15c>
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	e024      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 80006dc:	2104      	movs	r1, #4
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <ScanColumns+0x1b0>)
 80006e0:	f001 fdda 	bl	8002298 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <ScanColumns+0x16e>
 80006ea:	2324      	movs	r3, #36	@ 0x24
 80006ec:	e01b      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 80006ee:	2108      	movs	r1, #8
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <ScanColumns+0x1b0>)
 80006f2:	f001 fdd1 	bl	8002298 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <ScanColumns+0x180>
 80006fc:	234c      	movs	r3, #76	@ 0x4c
 80006fe:	e012      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <ScanColumns+0x1b0>)
 8000704:	f001 fdc8 	bl	8002298 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <ScanColumns+0x1a2>
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	e009      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000712:	23ff      	movs	r3, #255	@ 0xff
 8000714:	e007      	b.n	8000726 <ScanColumns+0x1a6>
            break;
 8000716:	bf00      	nop
 8000718:	e004      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071a:	bf00      	nop
 800071c:	e002      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 8000722:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000724:	23ff      	movs	r3, #255	@ 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400

08000734 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000740:	f001 fdc2 	bl	80022c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800074c:	f001 fdbc 	bl	80022c8 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff15 	bl	8000580 <ScanColumns>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d001      	beq.n	8000764 <KeyPad_Scan+0x30>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	e041      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800076a:	f001 fdad 	bl	80022c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000774:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000776:	f001 fda7 	bl	80022c8 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff00 	bl	8000580 <ScanColumns>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d001      	beq.n	800078e <KeyPad_Scan+0x5a>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	e02c      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000796:	f001 fd97 	bl	80022c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007a2:	f001 fd91 	bl	80022c8 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff feea 	bl	8000580 <ScanColumns>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <KeyPad_Scan+0x86>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	e016      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007c2:	f001 fd81 	bl	80022c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007ce:	f001 fd7b 	bl	80022c8 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fed4 	bl	8000580 <ScanColumns>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <KeyPad_Scan+0xb2>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	e000      	b.n	80007e8 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80007e6:	23ff      	movs	r3, #255	@ 0xff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020400 	.word	0x40020400

080007f4 <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <formatTotalLiters+0x80>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d815      	bhi.n	8000834 <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <formatTotalLiters+0x84>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <formatTotalLiters+0x84>)
 800081a:	fba3 1302 	umull	r1, r3, r3, r2
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	4916      	ldr	r1, [pc, #88]	@ (800087c <formatTotalLiters+0x88>)
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <formatTotalLiters+0x8c>)
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000832:	e018      	b.n	8000866 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <formatTotalLiters+0x90>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0e5a      	lsrs	r2, r3, #25
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <formatTotalLiters+0x90>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0e5b      	lsrs	r3, r3, #25
 800084c:	490e      	ldr	r1, [pc, #56]	@ (8000888 <formatTotalLiters+0x94>)
 800084e:	fb01 f303 	mul.w	r3, r1, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <formatTotalLiters+0x98>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	095a      	lsrs	r2, r3, #5
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <formatTotalLiters+0x8c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	05f5e0ff 	.word	0x05f5e0ff
 8000878:	431bde83 	.word	0x431bde83
 800087c:	000f4240 	.word	0x000f4240
 8000880:	20000048 	.word	0x20000048
 8000884:	55e63b89 	.word	0x55e63b89
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	51eb851f 	.word	0x51eb851f

08000890 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <formatTotalLitersShift+0x60>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d815      	bhi.n	80008d0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9a      	lsrs	r2, r3, #18
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	490e      	ldr	r1, [pc, #56]	@ (80008f8 <formatTotalLitersShift+0x68>)
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -11;
	}
}
 80008ce:	e009      	b.n	80008e4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -11;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008de:	f06f 020a 	mvn.w	r2, #10
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	3b9ac9ff 	.word	0x3b9ac9ff
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	20000048 	.word	0x20000048

08000900 <KeyLogic>:


void KeyLogic() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8000906:	f004 f8c7 	bl	8004a98 <xTaskGetTickCount>
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800090c:	f7ff ff12 	bl	8000734 <KeyPad_Scan>
 8000910:	4603      	mov	r3, r0
 8000912:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000914:	4bae      	ldr	r3, [pc, #696]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d85a      	bhi.n	80009d2 <KeyLogic+0xd2>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <KeyLogic+0x24>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	0800094f 	.word	0x0800094f
 800092c:	0800097b 	.word	0x0800097b
 8000930:	080009ab 	.word	0x080009ab
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d044      	beq.n	80009c4 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800093a:	4aa6      	ldr	r2, [pc, #664]	@ (8000bd4 <KeyLogic+0x2d4>)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000940:	4aa5      	ldr	r2, [pc, #660]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8000946:	4ba2      	ldr	r3, [pc, #648]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800094c:	e03a      	b.n	80009c4 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800094e:	4ba2      	ldr	r3, [pc, #648]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b31      	cmp	r3, #49	@ 0x31
 8000958:	d936      	bls.n	80009c8 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800095a:	4b9e      	ldr	r3, [pc, #632]	@ (8000bd4 <KeyLogic+0x2d4>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d106      	bne.n	8000972 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8000964:	4b9a      	ldr	r3, [pc, #616]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800096a:	4a9c      	ldr	r2, [pc, #624]	@ (8000bdc <KeyLogic+0x2dc>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8000970:	e02a      	b.n	80009c8 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8000972:	4b97      	ldr	r3, [pc, #604]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
            break;
 8000978:	e026      	b.n	80009c8 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800097a:	4b96      	ldr	r3, [pc, #600]	@ (8000bd4 <KeyLogic+0x2d4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10a      	bne.n	800099a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8000984:	4b95      	ldr	r3, [pc, #596]	@ (8000bdc <KeyLogic+0x2dc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000990:	d31c      	bcc.n	80009cc <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000992:	4b8f      	ldr	r3, [pc, #572]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000994:	2203      	movs	r2, #3
 8000996:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000998:	e018      	b.n	80009cc <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800099a:	4b8e      	ldr	r3, [pc, #568]	@ (8000bd4 <KeyLogic+0x2d4>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b90      	ldr	r3, [pc, #576]	@ (8000be0 <KeyLogic+0x2e0>)
 80009a0:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009a2:	4b8b      	ldr	r3, [pc, #556]	@ (8000bd0 <KeyLogic+0x2d0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
            break;
 80009a8:	e010      	b.n	80009cc <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80009aa:	4b8a      	ldr	r3, [pc, #552]	@ (8000bd4 <KeyLogic+0x2d4>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d00d      	beq.n	80009d0 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80009b4:	4b87      	ldr	r3, [pc, #540]	@ (8000bd4 <KeyLogic+0x2d4>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b89      	ldr	r3, [pc, #548]	@ (8000be0 <KeyLogic+0x2e0>)
 80009ba:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009bc:	4b84      	ldr	r3, [pc, #528]	@ (8000bd0 <KeyLogic+0x2d0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80009c2:	e005      	b.n	80009d0 <KeyLogic+0xd0>
            break;
 80009c4:	bf00      	nop
 80009c6:	e004      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009d0:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 80009d2:	4b83      	ldr	r3, [pc, #524]	@ (8000be0 <KeyLogic+0x2e0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2bff      	cmp	r3, #255	@ 0xff
 80009d8:	f000 81e2 	beq.w	8000da0 <KeyLogic+0x4a0>
		switch (keyPressed) {
 80009dc:	4b80      	ldr	r3, [pc, #512]	@ (8000be0 <KeyLogic+0x2e0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3b24      	subs	r3, #36	@ 0x24
 80009e2:	2b30      	cmp	r3, #48	@ 0x30
 80009e4:	f200 818f 	bhi.w	8000d06 <KeyLogic+0x406>
 80009e8:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <KeyLogic+0xf0>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000c6b 	.word	0x08000c6b
 80009f4:	08000d07 	.word	0x08000d07
 80009f8:	08000d07 	.word	0x08000d07
 80009fc:	08000d07 	.word	0x08000d07
 8000a00:	08000d07 	.word	0x08000d07
 8000a04:	08000d07 	.word	0x08000d07
 8000a08:	08000d07 	.word	0x08000d07
 8000a0c:	08000d07 	.word	0x08000d07
 8000a10:	08000d07 	.word	0x08000d07
 8000a14:	08000d07 	.word	0x08000d07
 8000a18:	08000d07 	.word	0x08000d07
 8000a1c:	08000d07 	.word	0x08000d07
 8000a20:	08000d07 	.word	0x08000d07
 8000a24:	08000d07 	.word	0x08000d07
 8000a28:	08000d07 	.word	0x08000d07
 8000a2c:	08000d07 	.word	0x08000d07
 8000a30:	08000d07 	.word	0x08000d07
 8000a34:	08000d07 	.word	0x08000d07
 8000a38:	08000d07 	.word	0x08000d07
 8000a3c:	08000d07 	.word	0x08000d07
 8000a40:	08000d07 	.word	0x08000d07
 8000a44:	08000d07 	.word	0x08000d07
 8000a48:	08000d07 	.word	0x08000d07
 8000a4c:	08000d07 	.word	0x08000d07
 8000a50:	08000d07 	.word	0x08000d07
 8000a54:	08000d07 	.word	0x08000d07
 8000a58:	08000d07 	.word	0x08000d07
 8000a5c:	08000d07 	.word	0x08000d07
 8000a60:	08000d07 	.word	0x08000d07
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000add 	.word	0x08000add
 8000a6c:	08000b03 	.word	0x08000b03
 8000a70:	08000cb3 	.word	0x08000cb3
 8000a74:	08000b29 	.word	0x08000b29
 8000a78:	08000ce3 	.word	0x08000ce3
 8000a7c:	08000d07 	.word	0x08000d07
 8000a80:	08000d07 	.word	0x08000d07
 8000a84:	08000d07 	.word	0x08000d07
 8000a88:	08000d07 	.word	0x08000d07
 8000a8c:	08000d07 	.word	0x08000d07
 8000a90:	08000c8f 	.word	0x08000c8f
 8000a94:	08000d07 	.word	0x08000d07
 8000a98:	08000d07 	.word	0x08000d07
 8000a9c:	08000d07 	.word	0x08000d07
 8000aa0:	08000c23 	.word	0x08000c23
 8000aa4:	08000d07 	.word	0x08000d07
 8000aa8:	08000d07 	.word	0x08000d07
 8000aac:	08000d07 	.word	0x08000d07
 8000ab0:	08000c47 	.word	0x08000c47
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	484b      	ldr	r0, [pc, #300]	@ (8000be8 <KeyLogic+0x2e8>)
 8000abc:	f005 fbb4 	bl	8006228 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 8000ac0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ac4:	4a47      	ldr	r2, [pc, #284]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	4848      	ldr	r0, [pc, #288]	@ (8000bec <KeyLogic+0x2ec>)
 8000aca:	f005 fbad 	bl	8006228 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	4a44      	ldr	r2, [pc, #272]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	4846      	ldr	r0, [pc, #280]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000ad6:	f005 fba7 	bl	8006228 <sniprintf>
				break;
 8000ada:	e161      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000adc:	2300      	movs	r3, #0
 8000ade:	4a41      	ldr	r2, [pc, #260]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	4841      	ldr	r0, [pc, #260]	@ (8000be8 <KeyLogic+0x2e8>)
 8000ae4:	f005 fba0 	bl	8006228 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000ae8:	4b42      	ldr	r3, [pc, #264]	@ (8000bf4 <KeyLogic+0x2f4>)
 8000aea:	4a3e      	ldr	r2, [pc, #248]	@ (8000be4 <KeyLogic+0x2e4>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	483f      	ldr	r0, [pc, #252]	@ (8000bec <KeyLogic+0x2ec>)
 8000af0:	f005 fb9a 	bl	8006228 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000af4:	2300      	movs	r3, #0
 8000af6:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <KeyLogic+0x2e4>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	483d      	ldr	r0, [pc, #244]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000afc:	f005 fb94 	bl	8006228 <sniprintf>
				break;
 8000b00:	e14e      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000b02:	2300      	movs	r3, #0
 8000b04:	4a37      	ldr	r2, [pc, #220]	@ (8000be4 <KeyLogic+0x2e4>)
 8000b06:	2107      	movs	r1, #7
 8000b08:	4837      	ldr	r0, [pc, #220]	@ (8000be8 <KeyLogic+0x2e8>)
 8000b0a:	f005 fb8d 	bl	8006228 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4a34      	ldr	r2, [pc, #208]	@ (8000be4 <KeyLogic+0x2e4>)
 8000b12:	2107      	movs	r1, #7
 8000b14:	4835      	ldr	r0, [pc, #212]	@ (8000bec <KeyLogic+0x2ec>)
 8000b16:	f005 fb87 	bl	8006228 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4a31      	ldr	r2, [pc, #196]	@ (8000be4 <KeyLogic+0x2e4>)
 8000b1e:	2107      	movs	r1, #7
 8000b20:	4833      	ldr	r0, [pc, #204]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000b22:	f005 fb81 	bl	8006228 <sniprintf>
				break;
 8000b26:	e13b      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 8000b28:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <KeyLogic+0x238>
					seqState = SEQ_DISP_PRICE;
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000b36:	e133      	b.n	8000da0 <KeyLogic+0x4a0>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000b38:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	d10f      	bne.n	8000b60 <KeyLogic+0x260>
					accumulatedNumber==password) {
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <KeyLogic+0x300>)
 8000b46:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d109      	bne.n	8000b60 <KeyLogic+0x260>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b4e:	2206      	movs	r2, #6
 8000b50:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <KeyLogic+0x304>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b58:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e05f      	b.n	8000c20 <KeyLogic+0x320>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 8000b60:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	d10d      	bne.n	8000b84 <KeyLogic+0x284>
					currPrice = accumulatedNumber;
 8000b68:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a26      	ldr	r2, [pc, #152]	@ (8000c08 <KeyLogic+0x308>)
 8000b6e:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <KeyLogic+0x304>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
				break;
 8000b82:	e10d      	b.n	8000da0 <KeyLogic+0x4a0>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&accumulatedNumber == password){
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d10f      	bne.n	8000bac <KeyLogic+0x2ac>
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <KeyLogic+0x300>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d109      	bne.n	8000bac <KeyLogic+0x2ac>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <KeyLogic+0x304>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <KeyLogic+0x2fc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e039      	b.n	8000c20 <KeyLogic+0x320>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d12b      	bne.n	8000c0c <KeyLogic+0x30c>
					password = accumulatedNumber;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <KeyLogic+0x2fc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a11      	ldr	r2, [pc, #68]	@ (8000c00 <KeyLogic+0x300>)
 8000bba:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <KeyLogic+0x304>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <KeyLogic+0x2fc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
				break;
 8000bce:	e0e7      	b.n	8000da0 <KeyLogic+0x4a0>
 8000bd0:	200000e0 	.word	0x200000e0
 8000bd4:	20000001 	.word	0x20000001
 8000bd8:	200000c8 	.word	0x200000c8
 8000bdc:	200000cc 	.word	0x200000cc
 8000be0:	20000000 	.word	0x20000000
 8000be4:	08006c54 	.word	0x08006c54
 8000be8:	20000020 	.word	0x20000020
 8000bec:	20000027 	.word	0x20000027
 8000bf0:	2000002e 	.word	0x2000002e
 8000bf4:	000186a0 	.word	0x000186a0
 8000bf8:	200000e1 	.word	0x200000e1
 8000bfc:	200000d0 	.word	0x200000d0
 8000c00:	20000038 	.word	0x20000038
 8000c04:	200000d4 	.word	0x200000d4
 8000c08:	20000044 	.word	0x20000044
					seqState = SEQ_IDLE;
 8000c0c:	4b68      	ldr	r3, [pc, #416]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c12:	4b68      	ldr	r3, [pc, #416]	@ (8000db4 <KeyLogic+0x4b4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c18:	4b67      	ldr	r3, [pc, #412]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
				break;
 8000c1e:	e0bf      	b.n	8000da0 <KeyLogic+0x4a0>
 8000c20:	e0be      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8000c22:	4b63      	ldr	r3, [pc, #396]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <KeyLogic+0x332>
					seqState = SEQ_PRESSED_P;
 8000c2a:	4b61      	ldr	r3, [pc, #388]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c30:	e0b6      	b.n	8000da0 <KeyLogic+0x4a0>
					seqState = SEQ_IDLE;
 8000c32:	4b5f      	ldr	r3, [pc, #380]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c38:	4b5e      	ldr	r3, [pc, #376]	@ (8000db4 <KeyLogic+0x4b4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
				break;
 8000c44:	e0ac      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000c46:	4b5a      	ldr	r3, [pc, #360]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <KeyLogic+0x356>
					seqState = SEQ_PRESSED_T;
 8000c4e:	4b58      	ldr	r3, [pc, #352]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c54:	e0a4      	b.n	8000da0 <KeyLogic+0x4a0>
					seqState = SEQ_IDLE;
 8000c56:	4b56      	ldr	r3, [pc, #344]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c5c:	4b55      	ldr	r3, [pc, #340]	@ (8000db4 <KeyLogic+0x4b4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c62:	4b55      	ldr	r3, [pc, #340]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
				break;
 8000c68:	e09a      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 8000c6a:	4b51      	ldr	r3, [pc, #324]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d103      	bne.n	8000c7a <KeyLogic+0x37a>
					seqState = SEQ_PRESSED_T_$;
 8000c72:	4b4f      	ldr	r3, [pc, #316]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c78:	e092      	b.n	8000da0 <KeyLogic+0x4a0>
					seqState = SEQ_IDLE;
 8000c7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c80:	4b4c      	ldr	r3, [pc, #304]	@ (8000db4 <KeyLogic+0x4b4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c86:	4b4c      	ldr	r3, [pc, #304]	@ (8000db8 <KeyLogic+0x4b8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
				break;
 8000c8c:	e088      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 8000c8e:	4b48      	ldr	r3, [pc, #288]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	d103      	bne.n	8000c9e <KeyLogic+0x39e>
					seqState = SEQ_PRESSED_T_L;
 8000c96:	4b46      	ldr	r3, [pc, #280]	@ (8000db0 <KeyLogic+0x4b0>)
 8000c98:	2208      	movs	r2, #8
 8000c9a:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c9c:	e080      	b.n	8000da0 <KeyLogic+0x4a0>
					seqState = SEQ_IDLE;
 8000c9e:	4b44      	ldr	r3, [pc, #272]	@ (8000db0 <KeyLogic+0x4b0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000ca4:	4b43      	ldr	r3, [pc, #268]	@ (8000db4 <KeyLogic+0x4b4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000caa:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <KeyLogic+0x4b8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
				break;
 8000cb0:	e076      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000db0 <KeyLogic+0x4b0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d109      	bne.n	8000cce <KeyLogic+0x3ce>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8000cba:	4b3d      	ldr	r3, [pc, #244]	@ (8000db0 <KeyLogic+0x4b0>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <KeyLogic+0x4b4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <KeyLogic+0x4b8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000ccc:	e068      	b.n	8000da0 <KeyLogic+0x4a0>
					seqState = SEQ_IDLE;
 8000cce:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <KeyLogic+0x4b0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cd4:	4b37      	ldr	r3, [pc, #220]	@ (8000db4 <KeyLogic+0x4b4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cda:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <KeyLogic+0x4b8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
				break;
 8000ce0:	e05e      	b.n	8000da0 <KeyLogic+0x4a0>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000ce2:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <KeyLogic+0x4b0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d103      	bne.n	8000cf2 <KeyLogic+0x3f2>
					seqState = SEQ_PRESSED_T_F4;
 8000cea:	4b31      	ldr	r3, [pc, #196]	@ (8000db0 <KeyLogic+0x4b0>)
 8000cec:	220b      	movs	r2, #11
 8000cee:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000cf0:	e056      	b.n	8000da0 <KeyLogic+0x4a0>
					seqState = SEQ_IDLE;
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <KeyLogic+0x4b0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <KeyLogic+0x4b4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <KeyLogic+0x4b8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
				break;
 8000d04:	e04c      	b.n	8000da0 <KeyLogic+0x4a0>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <KeyLogic+0x4bc>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d0c:	d93c      	bls.n	8000d88 <KeyLogic+0x488>
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dbc <KeyLogic+0x4bc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b39      	cmp	r3, #57	@ 0x39
 8000d14:	d838      	bhi.n	8000d88 <KeyLogic+0x488>
					if(seqState==SEQ_PRESSED_P){
 8000d16:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d10c      	bne.n	8000d38 <KeyLogic+0x438>
						seqState=SEQ_PRESSED_P_NUM;
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d20:	2205      	movs	r2, #5
 8000d22:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000d24:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <KeyLogic+0x4bc>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	3b30      	subs	r3, #48	@ 0x30
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <KeyLogic+0x4b8>)
 8000d2e:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000d30:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000d36:	e031      	b.n	8000d9c <KeyLogic+0x49c>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000d38:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d00b      	beq.n	8000d58 <KeyLogic+0x458>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d007      	beq.n	8000d58 <KeyLogic+0x458>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d003      	beq.n	8000d58 <KeyLogic+0x458>
							seqState == SEQ_ENTER_NEW_PASSWORD) {
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d121      	bne.n	8000d9c <KeyLogic+0x49c>
						if (numberOfDigits < 6) {
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d81d      	bhi.n	8000d9c <KeyLogic+0x49c>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <KeyLogic+0x4b8>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <KeyLogic+0x4bc>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	3b30      	subs	r3, #48	@ 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <KeyLogic+0x4b8>)
 8000d78:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d84:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000d86:	e009      	b.n	8000d9c <KeyLogic+0x49c>
						}
					}
				}else{
					seqState = SEQ_IDLE;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <KeyLogic+0x4b0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <KeyLogic+0x4b4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <KeyLogic+0x4b8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
				}
				break;
 8000d9a:	e000      	b.n	8000d9e <KeyLogic+0x49e>
					if(seqState==SEQ_PRESSED_P){
 8000d9c:	bf00      	nop
				break;
 8000d9e:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <KeyLogic+0x4bc>)
 8000da2:	22ff      	movs	r2, #255	@ 0xff
 8000da4:	701a      	strb	r2, [r3, #0]
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000e1 	.word	0x200000e1
 8000db4:	200000d4 	.word	0x200000d4
 8000db8:	200000d0 	.word	0x200000d0
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <KeyLogic_Action>:

void KeyLogic_Action() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	@ 0x30
 8000dc4:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 8000dc6:	4bb4      	ldr	r3, [pc, #720]	@ (8001098 <KeyLogic_Action+0x2d8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b0b      	cmp	r3, #11
 8000dcc:	f200 81bc 	bhi.w	8001148 <KeyLogic_Action+0x388>
 8000dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd8 <KeyLogic_Action+0x18>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000e09 	.word	0x08000e09
 8000ddc:	08000e2f 	.word	0x08000e2f
 8000de0:	08000e53 	.word	0x08000e53
 8000de4:	08000e91 	.word	0x08000e91
 8000de8:	08000ecf 	.word	0x08000ecf
 8000dec:	08000ef3 	.word	0x08000ef3
 8000df0:	08000f17 	.word	0x08000f17
 8000df4:	08000f3b 	.word	0x08000f3b
 8000df8:	08000fff 	.word	0x08000fff
 8000dfc:	08000f61 	.word	0x08000f61
 8000e00:	080010fd 	.word	0x080010fd
 8000e04:	08001123 	.word	0x08001123
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4aa4      	ldr	r2, [pc, #656]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	48a4      	ldr	r0, [pc, #656]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000e10:	f005 fa0a 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000e14:	2300      	movs	r3, #0
 8000e16:	4aa1      	ldr	r2, [pc, #644]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	48a2      	ldr	r0, [pc, #648]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000e1c:	f005 fa04 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e20:	2300      	movs	r3, #0
 8000e22:	4a9e      	ldr	r2, [pc, #632]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000e24:	2107      	movs	r1, #7
 8000e26:	48a0      	ldr	r0, [pc, #640]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000e28:	f005 f9fe 	bl	8006228 <sniprintf>
            break;
 8000e2c:	e19f      	b.n	800116e <KeyLogic_Action+0x3ae>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8000e2e:	4a9f      	ldr	r2, [pc, #636]	@ (80010ac <KeyLogic_Action+0x2ec>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	489b      	ldr	r0, [pc, #620]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000e34:	f005 f9f8 	bl	8006228 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", currPrice);
 8000e38:	4b9d      	ldr	r3, [pc, #628]	@ (80010b0 <KeyLogic_Action+0x2f0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a97      	ldr	r2, [pc, #604]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000e3e:	2107      	movs	r1, #7
 8000e40:	4898      	ldr	r0, [pc, #608]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000e42:	f005 f9f1 	bl	8006228 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e46:	2300      	movs	r3, #0
 8000e48:	4a94      	ldr	r2, [pc, #592]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	4896      	ldr	r0, [pc, #600]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000e4e:	f005 f9eb 	bl	8006228 <sniprintf>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000e52:	4b98      	ldr	r3, [pc, #608]	@ (80010b4 <KeyLogic_Action+0x2f4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f107 0020 	add.w	r0, r7, #32
 8000e5a:	4a97      	ldr	r2, [pc, #604]	@ (80010b8 <KeyLogic_Action+0x2f8>)
 8000e5c:	2107      	movs	r1, #7
 8000e5e:	f005 f9e3 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	4a95      	ldr	r2, [pc, #596]	@ (80010bc <KeyLogic_Action+0x2fc>)
 8000e68:	2107      	movs	r1, #7
 8000e6a:	488d      	ldr	r0, [pc, #564]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000e6c:	f005 f9dc 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8000e70:	4a93      	ldr	r2, [pc, #588]	@ (80010c0 <KeyLogic_Action+0x300>)
 8000e72:	2107      	movs	r1, #7
 8000e74:	488b      	ldr	r0, [pc, #556]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000e76:	f005 f9d7 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4a87      	ldr	r2, [pc, #540]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000e7e:	2107      	movs	r1, #7
 8000e80:	4889      	ldr	r0, [pc, #548]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000e82:	f005 f9d1 	bl	8006228 <sniprintf>
            LEDPointFlag = -1;
 8000e86:	4b8f      	ldr	r3, [pc, #572]	@ (80010c4 <KeyLogic_Action+0x304>)
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	601a      	str	r2, [r3, #0]
            break;
 8000e8e:	e16e      	b.n	800116e <KeyLogic_Action+0x3ae>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000e90:	4b88      	ldr	r3, [pc, #544]	@ (80010b4 <KeyLogic_Action+0x2f4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f107 0020 	add.w	r0, r7, #32
 8000e98:	4a87      	ldr	r2, [pc, #540]	@ (80010b8 <KeyLogic_Action+0x2f8>)
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	f005 f9c4 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000ea0:	f107 0320 	add.w	r3, r7, #32
 8000ea4:	4a85      	ldr	r2, [pc, #532]	@ (80010bc <KeyLogic_Action+0x2fc>)
 8000ea6:	2107      	movs	r1, #7
 8000ea8:	487d      	ldr	r0, [pc, #500]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000eaa:	f005 f9bd 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4a7a      	ldr	r2, [pc, #488]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000eb2:	2107      	movs	r1, #7
 8000eb4:	487b      	ldr	r0, [pc, #492]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000eb6:	f005 f9b7 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8000eba:	4a83      	ldr	r2, [pc, #524]	@ (80010c8 <KeyLogic_Action+0x308>)
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	487a      	ldr	r0, [pc, #488]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000ec0:	f005 f9b2 	bl	8006228 <sniprintf>
            LEDPointFlag = -1;
 8000ec4:	4b7f      	ldr	r3, [pc, #508]	@ (80010c4 <KeyLogic_Action+0x304>)
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	601a      	str	r2, [r3, #0]
            break;
 8000ecc:	e14f      	b.n	800116e <KeyLogic_Action+0x3ae>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", accumulatedNumber);
 8000ece:	4b79      	ldr	r3, [pc, #484]	@ (80010b4 <KeyLogic_Action+0x2f4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a72      	ldr	r2, [pc, #456]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	4872      	ldr	r0, [pc, #456]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000ed8:	f005 f9a6 	bl	8006228 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000edc:	2300      	movs	r3, #0
 8000ede:	4a6f      	ldr	r2, [pc, #444]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	4870      	ldr	r0, [pc, #448]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000ee4:	f005 f9a0 	bl	8006228 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8000ee8:	4a78      	ldr	r2, [pc, #480]	@ (80010cc <KeyLogic_Action+0x30c>)
 8000eea:	2107      	movs	r1, #7
 8000eec:	486e      	ldr	r0, [pc, #440]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000eee:	f005 f99b 	bl	8006228 <sniprintf>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", accumulatedNumber);
 8000ef2:	4b70      	ldr	r3, [pc, #448]	@ (80010b4 <KeyLogic_Action+0x2f4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a69      	ldr	r2, [pc, #420]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000ef8:	2107      	movs	r1, #7
 8000efa:	4869      	ldr	r0, [pc, #420]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000efc:	f005 f994 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f00:	2300      	movs	r3, #0
 8000f02:	4a66      	ldr	r2, [pc, #408]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000f04:	2107      	movs	r1, #7
 8000f06:	4867      	ldr	r0, [pc, #412]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000f08:	f005 f98e 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8000f0c:	4a70      	ldr	r2, [pc, #448]	@ (80010d0 <KeyLogic_Action+0x310>)
 8000f0e:	2107      	movs	r1, #7
 8000f10:	4865      	ldr	r0, [pc, #404]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000f12:	f005 f989 	bl	8006228 <sniprintf>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", accumulatedNumber);
 8000f16:	4b67      	ldr	r3, [pc, #412]	@ (80010b4 <KeyLogic_Action+0x2f4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a60      	ldr	r2, [pc, #384]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000f1c:	2107      	movs	r1, #7
 8000f1e:	4860      	ldr	r0, [pc, #384]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000f20:	f005 f982 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f24:	2300      	movs	r3, #0
 8000f26:	4a5d      	ldr	r2, [pc, #372]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000f28:	2107      	movs	r1, #7
 8000f2a:	485e      	ldr	r0, [pc, #376]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000f2c:	f005 f97c 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8000f30:	4a5e      	ldr	r2, [pc, #376]	@ (80010ac <KeyLogic_Action+0x2ec>)
 8000f32:	2107      	movs	r1, #7
 8000f34:	485c      	ldr	r0, [pc, #368]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000f36:	f005 f977 	bl	8006228 <sniprintf>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4a57      	ldr	r2, [pc, #348]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000f3e:	2107      	movs	r1, #7
 8000f40:	4857      	ldr	r0, [pc, #348]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000f42:	f005 f971 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f46:	2300      	movs	r3, #0
 8000f48:	4a54      	ldr	r2, [pc, #336]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000f4a:	2107      	movs	r1, #7
 8000f4c:	4855      	ldr	r0, [pc, #340]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000f4e:	f005 f96b 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000f52:	4b60      	ldr	r3, [pc, #384]	@ (80010d4 <KeyLogic_Action+0x314>)
 8000f54:	4a51      	ldr	r2, [pc, #324]	@ (800109c <KeyLogic_Action+0x2dc>)
 8000f56:	2107      	movs	r1, #7
 8000f58:	4853      	ldr	r0, [pc, #332]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000f5a:	f005 f965 	bl	8006228 <sniprintf>
            break;
 8000f5e:	e106      	b.n	800116e <KeyLogic_Action+0x3ae>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8000f60:	4b5d      	ldr	r3, [pc, #372]	@ (80010d8 <KeyLogic_Action+0x318>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a5d      	ldr	r2, [pc, #372]	@ (80010dc <KeyLogic_Action+0x31c>)
 8000f66:	495e      	ldr	r1, [pc, #376]	@ (80010e0 <KeyLogic_Action+0x320>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fc91 	bl	8000890 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80010e0 <KeyLogic_Action+0x320>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f107 0018 	add.w	r0, r7, #24
 8000f76:	4a50      	ldr	r2, [pc, #320]	@ (80010b8 <KeyLogic_Action+0x2f8>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	f005 f955 	bl	8006228 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8000f7e:	4b58      	ldr	r3, [pc, #352]	@ (80010e0 <KeyLogic_Action+0x320>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b58      	ldr	r3, [pc, #352]	@ (80010e4 <KeyLogic_Action+0x324>)
 8000f84:	fba3 1302 	umull	r1, r3, r3, r2
 8000f88:	0b5b      	lsrs	r3, r3, #13
 8000f8a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000f8e:	fb01 f303 	mul.w	r3, r1, r3
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f107 0010 	add.w	r0, r7, #16
 8000f98:	4a53      	ldr	r2, [pc, #332]	@ (80010e8 <KeyLogic_Action+0x328>)
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	f005 f944 	bl	8006228 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fa4:	e01b      	b.n	8000fde <KeyLogic_Action+0x21e>
				if (i < strlen(combinedStrShift)) {
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f918 	bl	80001e0 <strlen>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d90a      	bls.n	8000fce <KeyLogic_Action+0x20e>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000fb8:	f107 0210 	add.w	r2, r7, #16
 8000fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fbe:	4413      	add	r3, r2
 8000fc0:	7819      	ldrb	r1, [r3, #0]
 8000fc2:	4a37      	ldr	r2, [pc, #220]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc6:	4413      	add	r3, r2
 8000fc8:	460a      	mov	r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e004      	b.n	8000fd8 <KeyLogic_Action+0x218>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000fce:	4a34      	ldr	r2, [pc, #208]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8000fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8000fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fda:	3301      	adds	r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	dde0      	ble.n	8000fa6 <KeyLogic_Action+0x1e6>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <KeyLogic_Action+0x31c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a33      	ldr	r2, [pc, #204]	@ (80010b8 <KeyLogic_Action+0x2f8>)
 8000fea:	2107      	movs	r1, #7
 8000fec:	482d      	ldr	r0, [pc, #180]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8000fee:	f005 f91b 	bl	8006228 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80010ec <KeyLogic_Action+0x32c>)
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	482c      	ldr	r0, [pc, #176]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8000ff8:	f005 f916 	bl	8006228 <sniprintf>

            break;
 8000ffc:	e0b7      	b.n	800116e <KeyLogic_Action+0x3ae>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80010f0 <KeyLogic_Action+0x330>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a36      	ldr	r2, [pc, #216]	@ (80010dc <KeyLogic_Action+0x31c>)
 8001004:	4936      	ldr	r1, [pc, #216]	@ (80010e0 <KeyLogic_Action+0x320>)
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fbf4 	bl	80007f4 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 800100c:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <KeyLogic_Action+0x320>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f107 0008 	add.w	r0, r7, #8
 8001014:	4a28      	ldr	r2, [pc, #160]	@ (80010b8 <KeyLogic_Action+0x2f8>)
 8001016:	2107      	movs	r1, #7
 8001018:	f005 f906 	bl	8006228 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 800101c:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <KeyLogic_Action+0x320>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <KeyLogic_Action+0x324>)
 8001022:	fba3 1302 	umull	r1, r3, r3, r2
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f242 7110 	movw	r1, #10000	@ 0x2710
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4638      	mov	r0, r7
 8001034:	4a2f      	ldr	r2, [pc, #188]	@ (80010f4 <KeyLogic_Action+0x334>)
 8001036:	2108      	movs	r1, #8
 8001038:	f005 f8f6 	bl	8006228 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001040:	e019      	b.n	8001076 <KeyLogic_Action+0x2b6>
                if (i < strlen(combinedStr)) {
 8001042:	463b      	mov	r3, r7
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f8cb 	bl	80001e0 <strlen>
 800104a:	4602      	mov	r2, r0
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	429a      	cmp	r2, r3
 8001050:	d909      	bls.n	8001066 <KeyLogic_Action+0x2a6>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8001052:	463a      	mov	r2, r7
 8001054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001056:	4413      	add	r3, r2
 8001058:	7819      	ldrb	r1, [r3, #0]
 800105a:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 800105c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105e:	4413      	add	r3, r2
 8001060:	460a      	mov	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e004      	b.n	8001070 <KeyLogic_Action+0x2b0>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <KeyLogic_Action+0x2e0>)
 8001068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106a:	4413      	add	r3, r2
 800106c:	2220      	movs	r2, #32
 800106e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8001070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001072:	3301      	adds	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001078:	2b05      	cmp	r3, #5
 800107a:	dde2      	ble.n	8001042 <KeyLogic_Action+0x282>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <KeyLogic_Action+0x31c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <KeyLogic_Action+0x2f8>)
 8001082:	2107      	movs	r1, #7
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <KeyLogic_Action+0x2e4>)
 8001086:	f005 f8cf 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 800108a:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <KeyLogic_Action+0x338>)
 800108c:	2107      	movs	r1, #7
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <KeyLogic_Action+0x2e8>)
 8001090:	f005 f8ca 	bl	8006228 <sniprintf>



            break;
 8001094:	e06b      	b.n	800116e <KeyLogic_Action+0x3ae>
 8001096:	bf00      	nop
 8001098:	200000e1 	.word	0x200000e1
 800109c:	08006c54 	.word	0x08006c54
 80010a0:	20000020 	.word	0x20000020
 80010a4:	20000027 	.word	0x20000027
 80010a8:	2000002e 	.word	0x2000002e
 80010ac:	08006c5c 	.word	0x08006c5c
 80010b0:	20000044 	.word	0x20000044
 80010b4:	200000d0 	.word	0x200000d0
 80010b8:	08006c64 	.word	0x08006c64
 80010bc:	08006c6c 	.word	0x08006c6c
 80010c0:	08006c70 	.word	0x08006c70
 80010c4:	20000048 	.word	0x20000048
 80010c8:	08006c78 	.word	0x08006c78
 80010cc:	08006c80 	.word	0x08006c80
 80010d0:	08006c88 	.word	0x08006c88
 80010d4:	000f423f 	.word	0x000f423f
 80010d8:	20000040 	.word	0x20000040
 80010dc:	200000dc 	.word	0x200000dc
 80010e0:	200000d8 	.word	0x200000d8
 80010e4:	d1b71759 	.word	0xd1b71759
 80010e8:	08006c90 	.word	0x08006c90
 80010ec:	08006c9c 	.word	0x08006c9c
 80010f0:	2000003c 	.word	0x2000003c
 80010f4:	08006ca4 	.word	0x08006ca4
 80010f8:	08006cac 	.word	0x08006cac



        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 80010fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <KeyLogic_Action+0x3b8>)
 80010fe:	4a1f      	ldr	r2, [pc, #124]	@ (800117c <KeyLogic_Action+0x3bc>)
 8001100:	2107      	movs	r1, #7
 8001102:	481f      	ldr	r0, [pc, #124]	@ (8001180 <KeyLogic_Action+0x3c0>)
 8001104:	f005 f890 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001108:	2300      	movs	r3, #0
 800110a:	4a1c      	ldr	r2, [pc, #112]	@ (800117c <KeyLogic_Action+0x3bc>)
 800110c:	2107      	movs	r1, #7
 800110e:	481d      	ldr	r0, [pc, #116]	@ (8001184 <KeyLogic_Action+0x3c4>)
 8001110:	f005 f88a 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001114:	2300      	movs	r3, #0
 8001116:	4a19      	ldr	r2, [pc, #100]	@ (800117c <KeyLogic_Action+0x3bc>)
 8001118:	2107      	movs	r1, #7
 800111a:	481b      	ldr	r0, [pc, #108]	@ (8001188 <KeyLogic_Action+0x3c8>)
 800111c:	f005 f884 	bl	8006228 <sniprintf>
            break;
 8001120:	e025      	b.n	800116e <KeyLogic_Action+0x3ae>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <KeyLogic_Action+0x3cc>)
 8001124:	4a15      	ldr	r2, [pc, #84]	@ (800117c <KeyLogic_Action+0x3bc>)
 8001126:	2107      	movs	r1, #7
 8001128:	4815      	ldr	r0, [pc, #84]	@ (8001180 <KeyLogic_Action+0x3c0>)
 800112a:	f005 f87d 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800112e:	2300      	movs	r3, #0
 8001130:	4a12      	ldr	r2, [pc, #72]	@ (800117c <KeyLogic_Action+0x3bc>)
 8001132:	2107      	movs	r1, #7
 8001134:	4813      	ldr	r0, [pc, #76]	@ (8001184 <KeyLogic_Action+0x3c4>)
 8001136:	f005 f877 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800113a:	2300      	movs	r3, #0
 800113c:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <KeyLogic_Action+0x3bc>)
 800113e:	2107      	movs	r1, #7
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <KeyLogic_Action+0x3c8>)
 8001142:	f005 f871 	bl	8006228 <sniprintf>
            break;
 8001146:	e012      	b.n	800116e <KeyLogic_Action+0x3ae>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001148:	2300      	movs	r3, #0
 800114a:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <KeyLogic_Action+0x3bc>)
 800114c:	2107      	movs	r1, #7
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <KeyLogic_Action+0x3c0>)
 8001150:	f005 f86a 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001154:	2300      	movs	r3, #0
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <KeyLogic_Action+0x3bc>)
 8001158:	2107      	movs	r1, #7
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <KeyLogic_Action+0x3c4>)
 800115c:	f005 f864 	bl	8006228 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001160:	2300      	movs	r3, #0
 8001162:	4a06      	ldr	r2, [pc, #24]	@ (800117c <KeyLogic_Action+0x3bc>)
 8001164:	2107      	movs	r1, #7
 8001166:	4808      	ldr	r0, [pc, #32]	@ (8001188 <KeyLogic_Action+0x3c8>)
 8001168:	f005 f85e 	bl	8006228 <sniprintf>
            break;
 800116c:	bf00      	nop
    }
}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	@ 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00051615 	.word	0x00051615
 800117c:	08006c54 	.word	0x08006c54
 8001180:	20000020 	.word	0x20000020
 8001184:	20000027 	.word	0x20000027
 8001188:	2000002e 	.word	0x2000002e
 800118c:	0006c81c 	.word	0x0006c81c

08001190 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b2f      	cmp	r3, #47	@ 0x2f
 800119e:	d907      	bls.n	80011b0 <CharToSegment+0x20>
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b39      	cmp	r3, #57	@ 0x39
 80011a4:	d804      	bhi.n	80011b0 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	3b30      	subs	r3, #48	@ 0x30
 80011aa:	4a2c      	ldr	r2, [pc, #176]	@ (800125c <CharToSegment+0xcc>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	e04e      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'L') {
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80011b4:	d102      	bne.n	80011bc <CharToSegment+0x2c>
        return specialCharMap[0];
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <CharToSegment+0xd0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	e048      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == '.') {
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b2e      	cmp	r3, #46	@ 0x2e
 80011c0:	d102      	bne.n	80011c8 <CharToSegment+0x38>
        return specialCharMap[1];
 80011c2:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <CharToSegment+0xd0>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	e042      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'T') {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b54      	cmp	r3, #84	@ 0x54
 80011cc:	d102      	bne.n	80011d4 <CharToSegment+0x44>
        return specialCharMap[2];
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <CharToSegment+0xd0>)
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	e03c      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'O') {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b4f      	cmp	r3, #79	@ 0x4f
 80011d8:	d102      	bne.n	80011e0 <CharToSegment+0x50>
        return specialCharMap[3];
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <CharToSegment+0xd0>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	e036      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'A') {
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b41      	cmp	r3, #65	@ 0x41
 80011e4:	d102      	bne.n	80011ec <CharToSegment+0x5c>
        return specialCharMap[4];
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <CharToSegment+0xd0>)
 80011e8:	791b      	ldrb	r3, [r3, #4]
 80011ea:	e030      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'S') {
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b53      	cmp	r3, #83	@ 0x53
 80011f0:	d102      	bne.n	80011f8 <CharToSegment+0x68>
        return specialCharMap[5];
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <CharToSegment+0xd0>)
 80011f4:	795b      	ldrb	r3, [r3, #5]
 80011f6:	e02a      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'H') {
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b48      	cmp	r3, #72	@ 0x48
 80011fc:	d102      	bne.n	8001204 <CharToSegment+0x74>
        return specialCharMap[6];
 80011fe:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <CharToSegment+0xd0>)
 8001200:	799b      	ldrb	r3, [r3, #6]
 8001202:	e024      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'I') {
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b49      	cmp	r3, #73	@ 0x49
 8001208:	d102      	bne.n	8001210 <CharToSegment+0x80>
        return specialCharMap[7];
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <CharToSegment+0xd0>)
 800120c:	79db      	ldrb	r3, [r3, #7]
 800120e:	e01e      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'F') {
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b46      	cmp	r3, #70	@ 0x46
 8001214:	d102      	bne.n	800121c <CharToSegment+0x8c>
        return specialCharMap[8];
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <CharToSegment+0xd0>)
 8001218:	7a1b      	ldrb	r3, [r3, #8]
 800121a:	e018      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'C') {
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b43      	cmp	r3, #67	@ 0x43
 8001220:	d102      	bne.n	8001228 <CharToSegment+0x98>
        return specialCharMap[9];
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <CharToSegment+0xd0>)
 8001224:	7a5b      	ldrb	r3, [r3, #9]
 8001226:	e012      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'E') {
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b45      	cmp	r3, #69	@ 0x45
 800122c:	d102      	bne.n	8001234 <CharToSegment+0xa4>
        return specialCharMap[10];
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <CharToSegment+0xd0>)
 8001230:	7a9b      	ldrb	r3, [r3, #10]
 8001232:	e00c      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'U') {
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b55      	cmp	r3, #85	@ 0x55
 8001238:	d102      	bne.n	8001240 <CharToSegment+0xb0>
        return specialCharMap[11];
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <CharToSegment+0xd0>)
 800123c:	7adb      	ldrb	r3, [r3, #11]
 800123e:	e006      	b.n	800124e <CharToSegment+0xbe>
    } else if (c == 'N') {
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b4e      	cmp	r3, #78	@ 0x4e
 8001244:	d102      	bne.n	800124c <CharToSegment+0xbc>
        return specialCharMap[12];
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <CharToSegment+0xd0>)
 8001248:	7b1b      	ldrb	r3, [r3, #12]
 800124a:	e000      	b.n	800124e <CharToSegment+0xbe>
    } else {
        return 0b11111111; // Blank
 800124c:	23ff      	movs	r3, #255	@ 0xff
    }
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000004 	.word	0x20000004
 8001260:	20000010 	.word	0x20000010

08001264 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e035      	b.n	80012e2 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffac 	bl	80001e0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	2b05      	cmp	r3, #5
 8001290:	d81f      	bhi.n	80012d2 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	dd15      	ble.n	80012c6 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4613      	mov	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	441a      	add	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1e59      	subs	r1, r3, #1
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff6d 	bl	8001190 <CharToSegment>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4619      	mov	r1, r3
 80012ba:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <SevenSegLEDsHandler+0x90>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	460a      	mov	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e00a      	b.n	80012dc <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 80012c6:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <SevenSegLEDsHandler+0x90>)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	22ff      	movs	r2, #255	@ 0xff
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e004      	b.n	80012dc <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <SevenSegLEDsHandler+0x90>)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	ddc6      	ble.n	8001276 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 80012e8:	4b02      	ldr	r3, [pc, #8]	@ (80012f4 <SevenSegLEDsHandler+0x90>)
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000f0 	.word	0x200000f0

080012f8 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
 8001304:	4613      	mov	r3, r2
 8001306:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	4619      	mov	r1, r3
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffa9 	bl	8001264 <SevenSegLEDsHandler>
 8001312:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b05      	cmp	r3, #5
 8001318:	d820      	bhi.n	800135c <UpdateDisplayBuffer+0x64>
 800131a:	a201      	add	r2, pc, #4	@ (adr r2, 8001320 <UpdateDisplayBuffer+0x28>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	08001339 	.word	0x08001339
 8001324:	0800133f 	.word	0x0800133f
 8001328:	08001345 	.word	0x08001345
 800132c:	0800134b 	.word	0x0800134b
 8001330:	08001351 	.word	0x08001351
 8001334:	08001357 	.word	0x08001357
        case 0:
            curr_scan = 0b11111110;
 8001338:	23fe      	movs	r3, #254	@ 0xfe
 800133a:	73fb      	strb	r3, [r7, #15]
            break;
 800133c:	e011      	b.n	8001362 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 800133e:	23fd      	movs	r3, #253	@ 0xfd
 8001340:	73fb      	strb	r3, [r7, #15]
            break;
 8001342:	e00e      	b.n	8001362 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8001344:	23fb      	movs	r3, #251	@ 0xfb
 8001346:	73fb      	strb	r3, [r7, #15]
            break;
 8001348:	e00b      	b.n	8001362 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 800134a:	23f7      	movs	r3, #247	@ 0xf7
 800134c:	73fb      	strb	r3, [r7, #15]
            break;
 800134e:	e008      	b.n	8001362 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8001350:	23ef      	movs	r3, #239	@ 0xef
 8001352:	73fb      	strb	r3, [r7, #15]
            break;
 8001354:	e005      	b.n	8001362 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8001356:	23df      	movs	r3, #223	@ 0xdf
 8001358:	73fb      	strb	r3, [r7, #15]
            break;
 800135a:	e002      	b.n	8001362 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 800135c:	23ff      	movs	r3, #255	@ 0xff
 800135e:	73fb      	strb	r3, [r7, #15]
            break;
 8001360:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 8001362:	4b57      	ldr	r3, [pc, #348]	@ (80014c0 <UpdateDisplayBuffer+0x1c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db72      	blt.n	8001450 <UpdateDisplayBuffer+0x158>
 800136a:	4b55      	ldr	r3, [pc, #340]	@ (80014c0 <UpdateDisplayBuffer+0x1c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b05      	cmp	r3, #5
 8001370:	dc6e      	bgt.n	8001450 <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	4b52      	ldr	r3, [pc, #328]	@ (80014c0 <UpdateDisplayBuffer+0x1c8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d136      	bne.n	80013ea <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800137c:	78ba      	ldrb	r2, [r7, #2]
 800137e:	4951      	ldr	r1, [pc, #324]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	440b      	add	r3, r1
 8001388:	22ff      	movs	r2, #255	@ 0xff
 800138a:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 800138c:	78ba      	ldrb	r2, [r7, #2]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	7898      	ldrb	r0, [r3, #2]
 8001392:	494c      	ldr	r1, [pc, #304]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	440b      	add	r3, r1
 800139c:	3301      	adds	r3, #1
 800139e:	4602      	mov	r2, r0
 80013a0:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 80013a2:	78ba      	ldrb	r2, [r7, #2]
 80013a4:	4947      	ldr	r1, [pc, #284]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	3302      	adds	r3, #2
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3301      	adds	r3, #1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	78ba      	ldrb	r2, [r7, #2]
 80013bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013c0:	b2d8      	uxtb	r0, r3
 80013c2:	4940      	ldr	r1, [pc, #256]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	3303      	adds	r3, #3
 80013ce:	4602      	mov	r2, r0
 80013d0:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 80013d2:	78ba      	ldrb	r2, [r7, #2]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	7818      	ldrb	r0, [r3, #0]
 80013d8:	493a      	ldr	r1, [pc, #232]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	3304      	adds	r3, #4
 80013e4:	4602      	mov	r2, r0
 80013e6:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80013e8:	e065      	b.n	80014b6 <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80013ea:	78ba      	ldrb	r2, [r7, #2]
 80013ec:	4935      	ldr	r1, [pc, #212]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	22ff      	movs	r2, #255	@ 0xff
 80013f8:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 80013fa:	78ba      	ldrb	r2, [r7, #2]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	7898      	ldrb	r0, [r3, #2]
 8001400:	4930      	ldr	r1, [pc, #192]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	440b      	add	r3, r1
 800140a:	3301      	adds	r3, #1
 800140c:	4602      	mov	r2, r0
 800140e:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 8001410:	78ba      	ldrb	r2, [r7, #2]
 8001412:	492c      	ldr	r1, [pc, #176]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	440b      	add	r3, r1
 800141c:	3302      	adds	r3, #2
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 8001422:	78ba      	ldrb	r2, [r7, #2]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	7858      	ldrb	r0, [r3, #1]
 8001428:	4926      	ldr	r1, [pc, #152]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	440b      	add	r3, r1
 8001432:	3303      	adds	r3, #3
 8001434:	4602      	mov	r2, r0
 8001436:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 8001438:	78ba      	ldrb	r2, [r7, #2]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	7818      	ldrb	r0, [r3, #0]
 800143e:	4921      	ldr	r1, [pc, #132]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	440b      	add	r3, r1
 8001448:	3304      	adds	r3, #4
 800144a:	4602      	mov	r2, r0
 800144c:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 800144e:	e032      	b.n	80014b6 <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001450:	78ba      	ldrb	r2, [r7, #2]
 8001452:	491c      	ldr	r1, [pc, #112]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	440b      	add	r3, r1
 800145c:	22ff      	movs	r2, #255	@ 0xff
 800145e:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 8001460:	78ba      	ldrb	r2, [r7, #2]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	7898      	ldrb	r0, [r3, #2]
 8001466:	4917      	ldr	r1, [pc, #92]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	440b      	add	r3, r1
 8001470:	3301      	adds	r3, #1
 8001472:	4602      	mov	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 8001476:	78ba      	ldrb	r2, [r7, #2]
 8001478:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	440b      	add	r3, r1
 8001482:	3302      	adds	r3, #2
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 8001488:	78ba      	ldrb	r2, [r7, #2]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	7858      	ldrb	r0, [r3, #1]
 800148e:	490d      	ldr	r1, [pc, #52]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	440b      	add	r3, r1
 8001498:	3303      	adds	r3, #3
 800149a:	4602      	mov	r2, r0
 800149c:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 800149e:	78ba      	ldrb	r2, [r7, #2]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	7818      	ldrb	r0, [r3, #0]
 80014a4:	4907      	ldr	r1, [pc, #28]	@ (80014c4 <UpdateDisplayBuffer+0x1cc>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	3304      	adds	r3, #4
 80014b0:	4602      	mov	r2, r0
 80014b2:	701a      	strb	r2, [r3, #0]
    }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000048 	.word	0x20000048
 80014c4:	200000e4 	.word	0x200000e4

080014c8 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <SevenSegLEDsScan+0x7c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	bfb8      	it	lt
 80014de:	425b      	neglt	r3, r3
 80014e0:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <SevenSegLEDsScan+0x80>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4817      	ldr	r0, [pc, #92]	@ (800154c <SevenSegLEDsScan+0x84>)
 80014ee:	f7ff ff03 	bl	80012f8 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f2:	b672      	cpsid	i
}
 80014f4:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <SevenSegLEDsScan+0x7c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <SevenSegLEDsScan+0x88>)
 8001506:	4413      	add	r3, r2
 8001508:	2105      	movs	r1, #5
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f824 	bl	8001558 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8001510:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <SevenSegLEDsScan+0x7c>)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001516:	b662      	cpsie	i
}
 8001518:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <SevenSegLEDsScan+0x80>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <SevenSegLEDsScan+0x8c>)
 8001524:	fb83 3102 	smull	r3, r1, r3, r2
 8001528:	17d3      	asrs	r3, r2, #31
 800152a:	1ac9      	subs	r1, r1, r3
 800152c:	460b      	mov	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	440b      	add	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	1ad1      	subs	r1, r2, r3
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <SevenSegLEDsScan+0x80>)
 800153a:	701a      	strb	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200000ee 	.word	0x200000ee
 8001548:	200000e2 	.word	0x200000e2
 800154c:	20000020 	.word	0x20000020
 8001550:	200000e4 	.word	0x200000e4
 8001554:	2aaaaaab 	.word	0x2aaaaaab

08001558 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001568:	4823      	ldr	r0, [pc, #140]	@ (80015f8 <ShiftOut_SPI+0xa0>)
 800156a:	f000 fead 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	4822      	ldr	r0, [pc, #136]	@ (80015fc <ShiftOut_SPI+0xa4>)
 8001574:	f000 fea8 	bl	80022c8 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e003      	b.n	8001586 <ShiftOut_SPI+0x2e>
 800157e:	bf00      	nop
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800158c:	dbf7      	blt.n	800157e <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800158e:	bf00      	nop
 8001590:	481b      	ldr	r0, [pc, #108]	@ (8001600 <ShiftOut_SPI+0xa8>)
 8001592:	f001 fcf5 	bl	8002f80 <HAL_SPI_GetState>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d1f9      	bne.n	8001590 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4816      	ldr	r0, [pc, #88]	@ (8001600 <ShiftOut_SPI+0xa8>)
 80015a8:	f001 fba7 	bl	8002cfa <HAL_SPI_Transmit>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 80015b2:	f000 f9e5 	bl	8001980 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	e003      	b.n	80015c4 <ShiftOut_SPI+0x6c>
 80015bc:	bf00      	nop
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ca:	dbf7      	blt.n	80015bc <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80015cc:	bf00      	nop
 80015ce:	480c      	ldr	r0, [pc, #48]	@ (8001600 <ShiftOut_SPI+0xa8>)
 80015d0:	f001 fcd6 	bl	8002f80 <HAL_SPI_GetState>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d1f9      	bne.n	80015ce <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <ShiftOut_SPI+0xa0>)
 80015e2:	f000 fe71 	bl	80022c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2180      	movs	r1, #128	@ 0x80
 80015ea:	4804      	ldr	r0, [pc, #16]	@ (80015fc <ShiftOut_SPI+0xa4>)
 80015ec:	f000 fe6c 	bl	80022c8 <HAL_GPIO_WritePin>

}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40020800 	.word	0x40020800
 8001600:	200000f4 	.word	0x200000f4

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001608:	f000 fb9e 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160c:	f000 f828 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f000 f8fa 	bl	8001808 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001614:	f000 f88c 	bl	8001730 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001618:	f000 f8c0 	bl	800179c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800161c:	f002 f852 	bl	80036c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8001620:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <main+0x44>)
 8001622:	2100      	movs	r1, #0
 8001624:	4809      	ldr	r0, [pc, #36]	@ (800164c <main+0x48>)
 8001626:	f002 f897 	bl	8003758 <osThreadNew>
 800162a:	4603      	mov	r3, r0
 800162c:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <main+0x4c>)
 800162e:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 8001630:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <main+0x50>)
 8001632:	2100      	movs	r1, #0
 8001634:	4808      	ldr	r0, [pc, #32]	@ (8001658 <main+0x54>)
 8001636:	f002 f88f 	bl	8003758 <osThreadNew>
 800163a:	4603      	mov	r3, r0
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <main+0x58>)
 800163e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001640:	f002 f864 	bl	800370c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <main+0x40>
 8001648:	08006cf0 	.word	0x08006cf0
 800164c:	0800190d 	.word	0x0800190d
 8001650:	200001a4 	.word	0x200001a4
 8001654:	08006d14 	.word	0x08006d14
 8001658:	08001949 	.word	0x08001949
 800165c:	200001a8 	.word	0x200001a8

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	@ 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fe0e 	bl	8006290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <SystemClock_Config+0xc8>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <SystemClock_Config+0xc8>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <SystemClock_Config+0xc8>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <SystemClock_Config+0xcc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a20      	ldr	r2, [pc, #128]	@ (800172c <SystemClock_Config+0xcc>)
 80016aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <SystemClock_Config+0xcc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c4:	2310      	movs	r3, #16
 80016c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016d4:	2364      	movs	r3, #100	@ 0x64
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fe09 	bl	80022fc <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f0:	f000 f946 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2103      	movs	r1, #3
 8001710:	4618      	mov	r0, r3
 8001712:	f001 f86b 	bl	80027ec <HAL_RCC_ClockConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800171c:	f000 f930 	bl	8001980 <Error_Handler>
  }
}
 8001720:	bf00      	nop
 8001722:	3750      	adds	r7, #80	@ 0x50
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001736:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <MX_SPI1_Init+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_SPI1_Init+0x64>)
 800173c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_SPI1_Init+0x64>)
 800175c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001760:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001764:	2220      	movs	r2, #32
 8001766:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_SPI1_Init+0x64>)
 800177c:	220a      	movs	r2, #10
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001782:	f001 fa31 	bl	8002be8 <HAL_SPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800178c:	f000 f8f8 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200000f4 	.word	0x200000f4
 8001798:	40013000 	.word	0x40013000

0800179c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017a2:	4a18      	ldr	r2, [pc, #96]	@ (8001804 <MX_SPI2_Init+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017e8:	220a      	movs	r2, #10
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MX_SPI2_Init+0x64>)
 80017ee:	f001 f9fb 	bl	8002be8 <HAL_SPI_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017f8:	f000 f8c2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000014c 	.word	0x2000014c
 8001804:	40003800 	.word	0x40003800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a36      	ldr	r2, [pc, #216]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <MX_GPIO_Init+0xf8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <MX_GPIO_Init+0xf8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a28      	ldr	r2, [pc, #160]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <MX_GPIO_Init+0xf8>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <MX_GPIO_Init+0xf8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800188e:	2200      	movs	r2, #0
 8001890:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8001894:	481b      	ldr	r0, [pc, #108]	@ (8001904 <MX_GPIO_Init+0xfc>)
 8001896:	f000 fd17 	bl	80022c8 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	481a      	ldr	r0, [pc, #104]	@ (8001908 <MX_GPIO_Init+0x100>)
 80018a0:	f000 fd12 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80018a4:	231f      	movs	r3, #31
 80018a6:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4813      	ldr	r0, [pc, #76]	@ (8001904 <MX_GPIO_Init+0xfc>)
 80018b8:	f000 fb6a 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80018bc:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 80018c0:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	@ (8001904 <MX_GPIO_Init+0xfc>)
 80018d6:	f000 fb5b 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <MX_GPIO_Init+0x100>)
 80018f2:	f000 fb4d 	bl	8001f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800

0800190c <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8001914:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <Led3x6Run+0x38>)
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191e:	6018      	str	r0, [r3, #0]
 8001920:	3304      	adds	r3, #4
 8001922:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8001924:	f7ff fdd0 	bl	80014c8 <SevenSegLEDsScan>
	  osDelay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f001 ffa7 	bl	800387c <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2105      	movs	r1, #5
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe0f 	bl	8001558 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f001 ff9e 	bl	800387c <osDelay>
	  SevenSegLEDsScan();
 8001940:	bf00      	nop
 8001942:	e7ef      	b.n	8001924 <Led3x6Run+0x18>
 8001944:	08006cd0 	.word	0x08006cd0

08001948 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 8001950:	f7fe ffd6 	bl	8000900 <KeyLogic>
	 KeyLogic_Action();
 8001954:	f7ff fa34 	bl	8000dc0 <KeyLogic_Action>
	 osDelay(1);
 8001958:	2001      	movs	r0, #1
 800195a:	f001 ff8f 	bl	800387c <osDelay>
	 KeyLogic();
 800195e:	bf00      	nop
 8001960:	e7f6      	b.n	8001950 <KeyPad4x5Run+0x8>

08001962 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001972:	d101      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001974:	f000 fa0a 	bl	8001d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_MspInit+0x54>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_MspInit+0x54>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_MspInit+0x54>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <HAL_MspInit+0x54>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f000 fab3 	bl	8001f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	@ 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a41      	ldr	r2, [pc, #260]	@ (8001b08 <HAL_SPI_MspInit+0x124>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	4b40      	ldr	r3, [pc, #256]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4b39      	ldr	r3, [pc, #228]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a38      	ldr	r2, [pc, #224]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a3e:	23a0      	movs	r3, #160	@ 0xa0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	482d      	ldr	r0, [pc, #180]	@ (8001b10 <HAL_SPI_MspInit+0x12c>)
 8001a5a:	f000 fa99 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a5e:	e04f      	b.n	8001b00 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <HAL_SPI_MspInit+0x130>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d14a      	bne.n	8001b00 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a26      	ldr	r2, [pc, #152]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_SPI_MspInit+0x128>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480f      	ldr	r0, [pc, #60]	@ (8001b18 <HAL_SPI_MspInit+0x134>)
 8001ada:	f000 fa59 	bl	8001f90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af0:	2305      	movs	r3, #5
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <HAL_SPI_MspInit+0x138>)
 8001afc:	f000 fa48 	bl	8001f90 <HAL_GPIO_Init>
}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	@ 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40013000 	.word	0x40013000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40003800 	.word	0x40003800
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020400 	.word	0x40020400

08001b20 <HAL_InitTick>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	@ 0x38
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_InitTick+0xe8>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <HAL_InitTick+0xe8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b40:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_InitTick+0xe8>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f107 0210 	add.w	r2, r7, #16
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 f814 	bl	8002b84 <HAL_RCC_GetClockConfig>
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <HAL_InitTick+0x4e>
 8001b66:	f000 fff9 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8001b6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b6c:	e004      	b.n	8001b78 <HAL_InitTick+0x58>
 8001b6e:	f000 fff5 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8001b72:	4603      	mov	r3, r0
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7a:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <HAL_InitTick+0xec>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	3b01      	subs	r3, #1
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b86:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001b88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	6053      	str	r3, [r2, #4]
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
 8001bae:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001bb0:	f001 fad0 	bl	8003154 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001bba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11b      	bne.n	8001bfa <HAL_InitTick+0xda>
 8001bc2:	4813      	ldr	r0, [pc, #76]	@ (8001c10 <HAL_InitTick+0xf0>)
 8001bc4:	f001 fb20 	bl	8003208 <HAL_TIM_Base_Start_IT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001bce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d111      	bne.n	8001bfa <HAL_InitTick+0xda>
 8001bd6:	201c      	movs	r0, #28
 8001bd8:	f000 f9cc 	bl	8001f74 <HAL_NVIC_EnableIRQ>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	d808      	bhi.n	8001bf4 <HAL_InitTick+0xd4>
 8001be2:	2200      	movs	r2, #0
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	201c      	movs	r0, #28
 8001be8:	f000 f9a8 	bl	8001f3c <HAL_NVIC_SetPriority>
 8001bec:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_InitTick+0xf4>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e002      	b.n	8001bfa <HAL_InitTick+0xda>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001bfa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3738      	adds	r7, #56	@ 0x38
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	200001ac 	.word	0x200001ac
 8001c14:	20000050 	.word	0x20000050

08001c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <NMI_Handler+0x4>

08001c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <MemManage_Handler+0x4>

08001c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM2_IRQHandler+0x10>)
 8001c56:	f001 fb39 	bl	80032cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200001ac 	.word	0x200001ac

08001c64 <_sbrk>:
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
 8001c94:	f004 fb5a 	bl	800634c <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	200001f4 	.word	0x200001f4
 8001ccc:	20004d30 	.word	0x20004d30

08001cd0 <SystemInit>:
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
 8001d02:	2300      	movs	r3, #0
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:
 8001d06:	58d4      	ldr	r4, [r2, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:
 8001d0c:	18c4      	adds	r4, r0, r3
 8001d0e:	428c      	cmp	r4, r1
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
 8001d16:	2300      	movs	r3, #0
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:
 8001d1e:	42a2      	cmp	r2, r4
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>
 8001d22:	f004 fb19 	bl	8006358 <__libc_init_array>
 8001d26:	f7ff fc6d 	bl	8001604 <main>
 8001d2a:	4770      	bx	lr
 8001d2c:	20020000 	.word	0x20020000
 8001d30:	20000000 	.word	0x20000000
 8001d34:	200000ac 	.word	0x200000ac
 8001d38:	08006d94 	.word	0x08006d94
 8001d3c:	200000ac 	.word	0x200000ac
 8001d40:	20004d2c 	.word	0x20004d2c

08001d44 <ADC_IRQHandler>:
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f8d8 	bl	8001f26 <HAL_NVIC_SetPriorityGrouping>
 8001d76:	200f      	movs	r0, #15
 8001d78:	f7ff fed2 	bl	8001b20 <HAL_InitTick>
 8001d7c:	f7ff fe06 	bl	800198c <HAL_MspInit>
 8001d80:	2300      	movs	r3, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_IncTick>:
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000054 	.word	0x20000054
 8001db0:	200001f8 	.word	0x200001f8

08001db4 <HAL_GetTick>:
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200001f8 	.word	0x200001f8

08001dcc <__NVIC_SetPriorityGrouping>:
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4b04      	ldr	r3, [pc, #16]	@ (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	@ (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	@ (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	@ 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_NVIC_SetPriorityGrouping>:
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4c 	bl	8001dcc <__NVIC_SetPriorityGrouping>
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_NVIC_SetPriority>:
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	f7ff ff61 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f52:	6178      	str	r0, [r7, #20]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7ff ffb1 	bl	8001ec0 <NVIC_EncodePriority>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff80 	bl	8001e6c <__NVIC_SetPriority>
 8001f6c:	bf00      	nop
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_NVIC_EnableIRQ>:
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff54 	bl	8001e30 <__NVIC_EnableIRQ>
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_GPIO_Init>:
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e159      	b.n	8002260 <HAL_GPIO_Init+0x2d0>
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8148 	bne.w	800225a <HAL_GPIO_Init+0x2ca>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a2 	beq.w	800225a <HAL_GPIO_Init+0x2ca>
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b57      	ldr	r3, [pc, #348]	@ (8002278 <HAL_GPIO_Init+0x2e8>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	4a56      	ldr	r2, [pc, #344]	@ (8002278 <HAL_GPIO_Init+0x2e8>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002124:	6453      	str	r3, [r2, #68]	@ 0x44
 8002126:	4b54      	ldr	r3, [pc, #336]	@ (8002278 <HAL_GPIO_Init+0x2e8>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_GPIO_Init+0x2ec>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a49      	ldr	r2, [pc, #292]	@ (8002280 <HAL_GPIO_Init+0x2f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x202>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a48      	ldr	r2, [pc, #288]	@ (8002284 <HAL_GPIO_Init+0x2f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x1fe>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a47      	ldr	r2, [pc, #284]	@ (8002288 <HAL_GPIO_Init+0x2f8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x1fa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a46      	ldr	r2, [pc, #280]	@ (800228c <HAL_GPIO_Init+0x2fc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x1f6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a45      	ldr	r2, [pc, #276]	@ (8002290 <HAL_GPIO_Init+0x300>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x1f2>
 800217e:	2304      	movs	r3, #4
 8002180:	e008      	b.n	8002194 <HAL_GPIO_Init+0x204>
 8002182:	2307      	movs	r3, #7
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x204>
 8002186:	2303      	movs	r3, #3
 8002188:	e004      	b.n	8002194 <HAL_GPIO_Init+0x204>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <HAL_GPIO_Init+0x204>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x204>
 8002192:	2300      	movs	r3, #0
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	f002 0203 	and.w	r2, r2, #3
 800219a:	0092      	lsls	r2, r2, #2
 800219c:	4093      	lsls	r3, r2
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	4935      	ldr	r1, [pc, #212]	@ (800227c <HAL_GPIO_Init+0x2ec>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <HAL_GPIO_Init+0x304>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x246>
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002294 <HAL_GPIO_Init+0x304>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6093      	str	r3, [r2, #8]
 80021dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <HAL_GPIO_Init+0x304>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x270>
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	4a24      	ldr	r2, [pc, #144]	@ (8002294 <HAL_GPIO_Init+0x304>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60d3      	str	r3, [r2, #12]
 8002206:	4b23      	ldr	r3, [pc, #140]	@ (8002294 <HAL_GPIO_Init+0x304>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x29a>
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <HAL_GPIO_Init+0x304>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6053      	str	r3, [r2, #4]
 8002230:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <HAL_GPIO_Init+0x304>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2c4>
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	4a0f      	ldr	r2, [pc, #60]	@ (8002294 <HAL_GPIO_Init+0x304>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3301      	adds	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b0f      	cmp	r3, #15
 8002264:	f67f aea2 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3724      	adds	r7, #36	@ 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40013800 	.word	0x40013800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_GPIO_ReadPin>:
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	807b      	strh	r3, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_GPIO_ReadPin+0x1e>
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e001      	b.n	80022ba <HAL_GPIO_ReadPin+0x22>
 80022b6:	2300      	movs	r3, #0
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_GPIO_WritePin>:
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_RCC_OscConfig>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
 800230a:	2301      	movs	r3, #1
 800230c:	e267      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
 800231a:	4b88      	ldr	r3, [pc, #544]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
 8002326:	4b85      	ldr	r3, [pc, #532]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
 8002332:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
 8002340:	4b7e      	ldr	r3, [pc, #504]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
 8002354:	2301      	movs	r3, #1
 8002356:	e242      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b76      	ldr	r3, [pc, #472]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a75      	ldr	r2, [pc, #468]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b70      	ldr	r3, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6f      	ldr	r2, [pc, #444]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6d      	ldr	r3, [pc, #436]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6c      	ldr	r2, [pc, #432]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b69      	ldr	r3, [pc, #420]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a65      	ldr	r2, [pc, #404]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
 80023b4:	f7ff fcfe 	bl	8001db4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
 80023bc:	f7ff fcfa 	bl	8001db4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e207      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 80023ce:	4b5b      	ldr	r3, [pc, #364]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
 80023dc:	f7ff fcea 	bl	8001db4 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
 80023e4:	f7ff fce6 	bl	8001db4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	@ 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f3      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 80023f6:	4b51      	ldr	r3, [pc, #324]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
 8002404:	bf00      	nop
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
 8002412:	4b4a      	ldr	r3, [pc, #296]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
 800241e:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
 800242a:	4b44      	ldr	r3, [pc, #272]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 800244a:	2301      	movs	r3, #1
 800244c:	e1c7      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4937      	ldr	r1, [pc, #220]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
 800246c:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_RCC_OscConfig+0x244>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f7ff fc9f 	bl	8001db4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
 800247a:	f7ff fc9b 	bl	8001db4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
 8002488:	2303      	movs	r3, #3
 800248a:	e1a8      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4925      	ldr	r1, [pc, #148]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_OscConfig+0x244>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f7ff fc7e 	bl	8001db4 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
 80024bc:	f7ff fc7a 	bl	8001db4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
 80024ca:	2303      	movs	r3, #3
 80024cc:	e187      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d036      	beq.n	8002554 <HAL_RCC_OscConfig+0x258>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
 80024ee:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_RCC_OscConfig+0x248>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f7ff fc5e 	bl	8001db4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
 80024fc:	f7ff fc5a 	bl	8001db4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
 800250a:	2303      	movs	r3, #3
 800250c:	e167      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x240>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e01b      	b.n	8002554 <HAL_RCC_OscConfig+0x258>
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_RCC_OscConfig+0x248>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f7ff fc47 	bl	8001db4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]
 8002528:	e00e      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
 800252a:	f7ff fc43 	bl	8001db4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d907      	bls.n	8002548 <HAL_RCC_OscConfig+0x24c>
 8002538:	2303      	movs	r3, #3
 800253a:	e150      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800253c:	40023800 	.word	0x40023800
 8002540:	42470000 	.word	0x42470000
 8002544:	42470e80 	.word	0x42470e80
 8002548:	4b88      	ldr	r3, [pc, #544]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800254a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ea      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8097 	beq.w	8002690 <HAL_RCC_OscConfig+0x394>
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
 8002566:	4b81      	ldr	r3, [pc, #516]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_RCC_OscConfig+0x296>
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	4b7d      	ldr	r3, [pc, #500]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	4a7c      	ldr	r2, [pc, #496]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	@ 0x40
 8002582:	4b7a      	ldr	r3, [pc, #488]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
 8002592:	4b77      	ldr	r3, [pc, #476]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2d4>
 800259e:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a73      	ldr	r2, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	f7ff fc03 	bl	8001db4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
 80025b2:	f7ff fbff 	bl	8001db4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x2c8>
 80025c0:	2303      	movs	r3, #3
 80025c2:	e10c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 80025c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002770 <HAL_RCC_OscConfig+0x474>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2b6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2ea>
 80025d8:	4b64      	ldr	r3, [pc, #400]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	4a63      	ldr	r2, [pc, #396]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x30c>
 80025ee:	4b5f      	ldr	r3, [pc, #380]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f2:	4a5e      	ldr	r2, [pc, #376]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fa:	4b5c      	ldr	r3, [pc, #368]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fe:	4a5b      	ldr	r2, [pc, #364]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	@ 0x70
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x324>
 8002608:	4b58      	ldr	r3, [pc, #352]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260c:	4a57      	ldr	r2, [pc, #348]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	@ 0x70
 8002614:	4b55      	ldr	r3, [pc, #340]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4a54      	ldr	r2, [pc, #336]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCC_OscConfig+0x358>
 8002628:	f7ff fbc4 	bl	8001db4 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x34a>
 8002630:	f7ff fbc0 	bl	8001db4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x34a>
 8002642:	2303      	movs	r3, #3
 8002644:	e0cb      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 8002646:	4b49      	ldr	r3, [pc, #292]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCC_OscConfig+0x334>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x382>
 8002654:	f7ff fbae 	bl	8001db4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x376>
 800265c:	f7ff fbaa 	bl	8001db4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x376>
 800266e:	2303      	movs	r3, #3
 8002670:	e0b5      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 8002672:	4b3e      	ldr	r3, [pc, #248]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ee      	bne.n	800265c <HAL_RCC_OscConfig+0x360>
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d105      	bne.n	8002690 <HAL_RCC_OscConfig+0x394>
 8002684:	4b39      	ldr	r3, [pc, #228]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	4a38      	ldr	r2, [pc, #224]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80a1 	beq.w	80027dc <HAL_RCC_OscConfig+0x4e0>
 800269a:	4b34      	ldr	r3, [pc, #208]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d05c      	beq.n	8002760 <HAL_RCC_OscConfig+0x464>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d141      	bne.n	8002732 <HAL_RCC_OscConfig+0x436>
 80026ae:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_RCC_OscConfig+0x478>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f7ff fb7e 	bl	8001db4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3d2>
 80026bc:	f7ff fb7a 	bl	8001db4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3d2>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e087      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 80026ce:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x3c0>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	3b01      	subs	r3, #1
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	491b      	ldr	r1, [pc, #108]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x478>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f7ff fb53 	bl	8001db4 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x428>
 8002712:	f7ff fb4f 	bl	8001db4 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x428>
 8002720:	2303      	movs	r3, #3
 8002722:	e05c      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x416>
 8002730:	e054      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HAL_RCC_OscConfig+0x478>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	f7ff fb3c 	bl	8001db4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x456>
 8002740:	f7ff fb38 	bl	8001db4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x456>
 800274e:	2303      	movs	r3, #3
 8002750:	e045      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_OscConfig+0x470>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x444>
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x4e0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x47c>
 8002768:	2301      	movs	r3, #1
 800276a:	e038      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	42470060 	.word	0x42470060
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d028      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	d121      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d11a      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027a8:	4013      	ands	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027ae:	0192      	lsls	r2, r2, #6
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d111      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x4e0>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x4e2>
 80027dc:	2300      	movs	r3, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_RCC_ClockConfig>:
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 8002800:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
 800280e:	4b65      	ldr	r3, [pc, #404]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
 8002840:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002862:	6093      	str	r3, [r2, #8]
 8002864:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
 80028aa:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 80028ca:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
 80028dc:	f7ff fa6a 	bl	8001db4 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
 80028e4:	f7ff fa66 	bl	8001db4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
 800291a:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
 8002940:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	@ (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f8c4 	bl	8001b20 <HAL_InitTick>
 8002998:	2300      	movs	r3, #0
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08006d38 	.word	0x08006d38
 80029b0:	2000004c 	.word	0x2000004c
 80029b4:	20000050 	.word	0x20000050

080029b8 <HAL_RCC_GetSysClockFreq>:
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b090      	sub	sp, #64	@ 0x40
 80029be:	af00      	add	r7, sp, #0
 80029c0:	2300      	movs	r3, #0
 80029c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c4:	2300      	movs	r3, #0
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c8:	2300      	movs	r3, #0
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80029cc:	2300      	movs	r3, #0
 80029ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029d0:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80a1 	bhi.w	8002b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e09b      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80029ec:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x184>)
 80029ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f0:	e09b      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x172>
 80029f2:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x188>)
 80029f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029f6:	e098      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x172>
 80029f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a02:	4b4d      	ldr	r3, [pc, #308]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa8>
 8002a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	2200      	movs	r2, #0
 8002a16:	623b      	str	r3, [r7, #32]
 8002a18:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a20:	2100      	movs	r1, #0
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a24:	fb03 f201 	mul.w	r2, r3, r1
 8002a28:	2300      	movs	r3, #0
 8002a2a:	fb00 f303 	mul.w	r3, r0, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a43      	ldr	r2, [pc, #268]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a32:	fba0 1202 	umull	r1, r2, r0, r2
 8002a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a38:	460a      	mov	r2, r1
 8002a3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a3e:	4413      	add	r3, r2
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	2200      	movs	r2, #0
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	61fa      	str	r2, [r7, #28]
 8002a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a52:	f7fd fc1d 	bl	8000290 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a5e:	e053      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x150>
 8002a60:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	2200      	movs	r2, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	617a      	str	r2, [r7, #20]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a72:	f04f 0b00 	mov.w	fp, #0
 8002a76:	4652      	mov	r2, sl
 8002a78:	465b      	mov	r3, fp
 8002a7a:	f04f 0000 	mov.w	r0, #0
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	0159      	lsls	r1, r3, #5
 8002a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a88:	0150      	lsls	r0, r2, #5
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a92:	eb63 090b 	sbc.w	r9, r3, fp
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002aa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aaa:	ebb2 0408 	subs.w	r4, r2, r8
 8002aae:	eb63 0509 	sbc.w	r5, r3, r9
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	00eb      	lsls	r3, r5, #3
 8002abc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac0:	00e2      	lsls	r2, r4, #3
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	eb14 030a 	adds.w	r3, r4, sl
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	eb45 030b 	adc.w	r3, r5, fp
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	028b      	lsls	r3, r1, #10
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae8:	4621      	mov	r1, r4
 8002aea:	028a      	lsls	r2, r1, #10
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af2:	2200      	movs	r2, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	60fa      	str	r2, [r7, #12]
 8002af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002afc:	f7fd fbc8 	bl	8000290 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	3301      	adds	r3, #1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b22:	e002      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x172>
 8002b24:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b28:	bf00      	nop
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3740      	adds	r7, #64	@ 0x40
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	017d7840 	.word	0x017d7840

08002b44 <HAL_RCC_GetHCLKFreq>:
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	2000004c 	.word	0x2000004c

08002b5c <HAL_RCC_GetPCLK1Freq>:
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08006d48 	.word	0x08006d48

08002b84 <HAL_RCC_GetClockConfig>:
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220f      	movs	r2, #15
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_GetClockConfig+0x5c>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]
 8002bc6:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <HAL_RCC_GetClockConfig+0x60>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0207 	and.w	r2, r3, #7
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40023c00 	.word	0x40023c00

08002be8 <HAL_SPI_Init>:
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_SPI_Init+0x12>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07b      	b.n	8002cf2 <HAL_SPI_Init+0x10a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <HAL_SPI_Init+0x2c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0a:	d009      	beq.n	8002c20 <HAL_SPI_Init+0x38>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
 8002c12:	e005      	b.n	8002c20 <HAL_SPI_Init+0x38>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_SPI_Init+0x58>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fed2 	bl	80019e4 <HAL_SPI_MspInit>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 0104 	and.w	r1, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f003 0210 	and.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce0:	61da      	str	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SPI_Transmit>:
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b088      	sub	sp, #32
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Transmit+0x22>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e12d      	b.n	8002f78 <HAL_SPI_Transmit+0x27e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d24:	f7ff f846 	bl	8001db4 <HAL_GetTick>
 8002d28:	61b8      	str	r0, [r7, #24]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	82fb      	strh	r3, [r7, #22]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Transmit+0x46>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e116      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Transmit+0x52>
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Transmit+0x58>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e10d      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	869a      	strh	r2, [r3, #52]	@ 0x34
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d98:	d10f      	bne.n	8002dba <HAL_SPI_Transmit+0xc0>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d007      	beq.n	8002dd8 <HAL_SPI_Transmit+0xde>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002de0:	d14f      	bne.n	8002e82 <HAL_SPI_Transmit+0x188>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Transmit+0xf6>
 8002dea:	8afb      	ldrh	r3, [r7, #22]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d142      	bne.n	8002e76 <HAL_SPI_Transmit+0x17c>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e14:	e02f      	b.n	8002e76 <HAL_SPI_Transmit+0x17c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d112      	bne.n	8002e4a <HAL_SPI_Transmit+0x150>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002e48:	e015      	b.n	8002e76 <HAL_SPI_Transmit+0x17c>
 8002e4a:	f7fe ffb3 	bl	8001db4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d803      	bhi.n	8002e62 <HAL_SPI_Transmit+0x168>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d102      	bne.n	8002e68 <HAL_SPI_Transmit+0x16e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_SPI_Transmit+0x17c>
 8002e68:	2303      	movs	r3, #3
 8002e6a:	77fb      	strb	r3, [r7, #31]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002e74:	e07b      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ca      	bne.n	8002e16 <HAL_SPI_Transmit+0x11c>
 8002e80:	e050      	b.n	8002f24 <HAL_SPI_Transmit+0x22a>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_SPI_Transmit+0x196>
 8002e8a:	8afb      	ldrh	r3, [r7, #22]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d144      	bne.n	8002f1a <HAL_SPI_Transmit+0x220>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002eb6:	e030      	b.n	8002f1a <HAL_SPI_Transmit+0x220>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d113      	bne.n	8002eee <HAL_SPI_Transmit+0x1f4>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002eec:	e015      	b.n	8002f1a <HAL_SPI_Transmit+0x220>
 8002eee:	f7fe ff61 	bl	8001db4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d803      	bhi.n	8002f06 <HAL_SPI_Transmit+0x20c>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Transmit+0x212>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <HAL_SPI_Transmit+0x220>
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002f18:	e029      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1c9      	bne.n	8002eb8 <HAL_SPI_Transmit+0x1be>
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f8bf 	bl	80030ac <SPI_EndRxTxTransaction>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_SPI_Transmit+0x240>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_SPI_Transmit+0x25e>
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_SPI_Transmit+0x26c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e003      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_SPI_GetState>:
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <SPI_WaitFlagStateUntilTimeout>:
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	f7fe ff02 	bl	8001db4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4413      	add	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	f7fe fefa 	bl	8001db4 <HAL_GetTick>
 8002fc0:	61b8      	str	r0, [r7, #24]
 8002fc2:	4b39      	ldr	r3, [pc, #228]	@ (80030a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	015b      	lsls	r3, r3, #5
 8002fc8:	0d1b      	lsrs	r3, r3, #20
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e054      	b.n	800307e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d050      	beq.n	800307e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8002fdc:	f7fe feea 	bl	8001db4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d902      	bls.n	8002ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d13d      	bne.n	800306e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800300a:	d111      	bne.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003014:	d004      	beq.n	8003020 <SPI_WaitFlagStateUntilTimeout+0x84>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800301e:	d107      	bne.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003038:	d10f      	bne.n	800305a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800306a:	2303      	movs	r3, #3
 800306c:	e017      	b.n	800309e <SPI_WaitFlagStateUntilTimeout+0x102>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	3b01      	subs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	429a      	cmp	r2, r3
 800309a:	d19b      	bne.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
 800309c:	2300      	movs	r3, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000004c 	.word	0x2000004c

080030ac <SPI_EndRxTxTransaction>:
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2201      	movs	r2, #1
 80030c0:	2102      	movs	r1, #2
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7ff ff6a 	bl	8002f9c <SPI_WaitFlagStateUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <SPI_EndRxTxTransaction+0x32>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80030da:	2303      	movs	r3, #3
 80030dc:	e032      	b.n	8003144 <SPI_EndRxTxTransaction+0x98>
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <SPI_EndRxTxTransaction+0xa0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <SPI_EndRxTxTransaction+0xa4>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	0d5b      	lsrs	r3, r3, #21
 80030ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030fc:	d112      	bne.n	8003124 <SPI_EndRxTxTransaction+0x78>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff ff47 	bl	8002f9c <SPI_WaitFlagStateUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d016      	beq.n	8003142 <SPI_EndRxTxTransaction+0x96>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003120:	2303      	movs	r3, #3
 8003122:	e00f      	b.n	8003144 <SPI_EndRxTxTransaction+0x98>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <SPI_EndRxTxTransaction+0x94>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3b01      	subs	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	d0f2      	beq.n	8003124 <SPI_EndRxTxTransaction+0x78>
 800313e:	e000      	b.n	8003142 <SPI_EndRxTxTransaction+0x96>
 8003140:	bf00      	nop
 8003142:	2300      	movs	r3, #0
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000004c 	.word	0x2000004c
 8003150:	165e9f81 	.word	0x165e9f81

08003154 <HAL_TIM_Base_Init>:
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_Base_Init+0x12>
 8003162:	2301      	movs	r3, #1
 8003164:	e041      	b.n	80031ea <HAL_TIM_Base_Init+0x96>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_Base_Init+0x2c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f839 	bl	80031f2 <HAL_TIM_Base_MspInit>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 f9b2 	bl	80034fc <TIM_Base_SetConfig>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80031e8:	2300      	movs	r3, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_TIM_Base_MspInit>:
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_TIM_Base_Start_IT>:
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d001      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e044      	b.n	80032aa <HAL_TIM_Base_Start_IT+0xa2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	60da      	str	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1e      	ldr	r2, [pc, #120]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d018      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x6c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324a:	d013      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x6c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1a      	ldr	r2, [pc, #104]	@ (80032bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00e      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x6c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a19      	ldr	r2, [pc, #100]	@ (80032c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x6c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a17      	ldr	r2, [pc, #92]	@ (80032c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x6c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	@ (80032c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_TIM_Base_Start_IT+0x90>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d010      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0xa0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e007      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0xa0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	2300      	movs	r3, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40014000 	.word	0x40014000

080032cc <HAL_TIM_IRQHandler>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d020      	beq.n	8003330 <HAL_TIM_IRQHandler+0x64>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01b      	beq.n	8003330 <HAL_TIM_IRQHandler+0x64>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0202 	mvn.w	r2, #2
 8003300:	611a      	str	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	771a      	strb	r2, [r3, #28]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_TIM_IRQHandler+0x52>
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8d2 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 800331c:	e005      	b.n	800332a <HAL_TIM_IRQHandler+0x5e>
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8c4 	bl	80034ac <HAL_TIM_OC_DelayElapsedCallback>
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8d5 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d020      	beq.n	800337c <HAL_TIM_IRQHandler+0xb0>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_TIM_IRQHandler+0xb0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0204 	mvn.w	r2, #4
 800334c:	611a      	str	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	771a      	strb	r2, [r3, #28]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x9e>
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8ac 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0xaa>
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f89e 	bl	80034ac <HAL_TIM_OC_DelayElapsedCallback>
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8af 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d020      	beq.n	80033c8 <HAL_TIM_IRQHandler+0xfc>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_TIM_IRQHandler+0xfc>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0208 	mvn.w	r2, #8
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2204      	movs	r2, #4
 800339e:	771a      	strb	r2, [r3, #28]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0xea>
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f886 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0xf6>
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f878 	bl	80034ac <HAL_TIM_OC_DelayElapsedCallback>
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f889 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_TIM_IRQHandler+0x148>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_TIM_IRQHandler+0x148>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0210 	mvn.w	r2, #16
 80033e4:	611a      	str	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	771a      	strb	r2, [r3, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x136>
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f860 	bl	80034c0 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x142>
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f852 	bl	80034ac <HAL_TIM_OC_DelayElapsedCallback>
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f863 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <HAL_TIM_IRQHandler+0x16c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <HAL_TIM_IRQHandler+0x16c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0201 	mvn.w	r2, #1
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fa95 	bl	8001962 <HAL_TIM_PeriodElapsedCallback>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_TIM_IRQHandler+0x190>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <HAL_TIM_IRQHandler+0x190>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003454:	611a      	str	r2, [r3, #16]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8e6 	bl	8003628 <HAL_TIMEx_BreakCallback>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_TIM_IRQHandler+0x1b4>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_TIM_IRQHandler+0x1b4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f834 	bl	80034e8 <HAL_TIM_TriggerCallback>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1d8>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x1d8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0220 	mvn.w	r2, #32
 800349c:	611a      	str	r2, [r3, #16]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8b8 	bl	8003614 <HAL_TIMEx_CommutCallback>
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_TIM_OC_DelayElapsedCallback>:
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIM_IC_CaptureCallback>:
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIM_TriggerCallback>:
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_Base_SetConfig>:
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3a      	ldr	r2, [pc, #232]	@ (80035f8 <TIM_Base_SetConfig+0xfc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a37      	ldr	r2, [pc, #220]	@ (80035fc <TIM_Base_SetConfig+0x100>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a36      	ldr	r2, [pc, #216]	@ (8003600 <TIM_Base_SetConfig+0x104>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a35      	ldr	r2, [pc, #212]	@ (8003604 <TIM_Base_SetConfig+0x108>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x4a>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2b      	ldr	r2, [pc, #172]	@ (80035f8 <TIM_Base_SetConfig+0xfc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01b      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003554:	d017      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a28      	ldr	r2, [pc, #160]	@ (80035fc <TIM_Base_SetConfig+0x100>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a27      	ldr	r2, [pc, #156]	@ (8003600 <TIM_Base_SetConfig+0x104>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a26      	ldr	r2, [pc, #152]	@ (8003604 <TIM_Base_SetConfig+0x108>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	@ (8003608 <TIM_Base_SetConfig+0x10c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	@ (800360c <TIM_Base_SetConfig+0x110>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a23      	ldr	r2, [pc, #140]	@ (8003610 <TIM_Base_SetConfig+0x114>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x9c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0e      	ldr	r2, [pc, #56]	@ (80035f8 <TIM_Base_SetConfig+0xfc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d103      	bne.n	80035cc <TIM_Base_SetConfig+0xd0>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	615a      	str	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <TIM_Base_SetConfig+0xee>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f023 0201 	bic.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <HAL_TIMEx_CommutCallback>:
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_BreakCallback>:
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <__NVIC_SetPriority>:
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	71fb      	strb	r3, [r7, #7]
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	2b00      	cmp	r3, #0
 800364e:	db0a      	blt.n	8003666 <__NVIC_SetPriority+0x2a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	490c      	ldr	r1, [pc, #48]	@ (8003688 <__NVIC_SetPriority+0x4c>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	440b      	add	r3, r1
 8003660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003664:	e00a      	b.n	800367c <__NVIC_SetPriority+0x40>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4908      	ldr	r1, [pc, #32]	@ (800368c <__NVIC_SetPriority+0x50>)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	3b04      	subs	r3, #4
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	440b      	add	r3, r1
 800367a:	761a      	strb	r2, [r3, #24]
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <SysTick_Handler>:
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <SysTick_Handler+0x1c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f001 fd46 	bl	8005128 <xTaskGetSchedulerState>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <SysTick_Handler+0x16>
 80036a2:	f002 fb41 	bl	8005d28 <xPortSysTickHandler>
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000e010 	.word	0xe000e010

080036b0 <SVC_Setup>:
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	f06f 0004 	mvn.w	r0, #4
 80036ba:	f7ff ffbf 	bl	800363c <__NVIC_SetPriority>
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <osKernelInitialize>:
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	f3ef 8305 	mrs	r3, IPSR
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <osKernelInitialize+0x1a>
 80036d6:	f06f 0305 	mvn.w	r3, #5
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	e00c      	b.n	80036f8 <osKernelInitialize+0x34>
 80036de:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <osKernelInitialize+0x44>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <osKernelInitialize+0x2e>
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <osKernelInitialize+0x44>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	e002      	b.n	80036f8 <osKernelInitialize+0x34>
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	200001fc 	.word	0x200001fc

0800370c <osKernelStart>:
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	f3ef 8305 	mrs	r3, IPSR
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <osKernelStart+0x1a>
 800371e:	f06f 0305 	mvn.w	r3, #5
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	e010      	b.n	8003748 <osKernelStart+0x3c>
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <osKernelStart+0x48>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d109      	bne.n	8003742 <osKernelStart+0x36>
 800372e:	f7ff ffbf 	bl	80036b0 <SVC_Setup>
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <osKernelStart+0x48>)
 8003734:	2202      	movs	r2, #2
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f001 f892 	bl	8004860 <vTaskStartScheduler>
 800373c:	2300      	movs	r3, #0
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	e002      	b.n	8003748 <osKernelStart+0x3c>
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200001fc 	.word	0x200001fc

08003758 <osThreadNew>:
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	@ 0x38
 800375c:	af04      	add	r7, sp, #16
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	f3ef 8305 	mrs	r3, IPSR
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d17e      	bne.n	8003872 <osThreadNew+0x11a>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d07b      	beq.n	8003872 <osThreadNew+0x11a>
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	2318      	movs	r3, #24
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d045      	beq.n	800381e <osThreadNew+0xc6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <osThreadNew+0x48>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <osThreadNew+0x56>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <osThreadNew+0x6e>
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b38      	cmp	r3, #56	@ 0x38
 80037b8:	d805      	bhi.n	80037c6 <osThreadNew+0x6e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <osThreadNew+0x72>
 80037c6:	2300      	movs	r3, #0
 80037c8:	e054      	b.n	8003874 <osThreadNew+0x11c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <osThreadNew+0x82>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <osThreadNew+0xa8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80037e8:	d90a      	bls.n	8003800 <osThreadNew+0xa8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <osThreadNew+0xa8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <osThreadNew+0xa8>
 80037fa:	2301      	movs	r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e010      	b.n	8003822 <osThreadNew+0xca>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10c      	bne.n	8003822 <osThreadNew+0xca>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <osThreadNew+0xca>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <osThreadNew+0xca>
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e001      	b.n	8003822 <osThreadNew+0xca>
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d110      	bne.n	800384a <osThreadNew+0xf2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6892      	ldr	r2, [r2, #8]
 8003830:	9202      	str	r2, [sp, #8]
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fe1a 	bl	8004478 <xTaskCreateStatic>
 8003844:	4603      	mov	r3, r0
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e013      	b.n	8003872 <osThreadNew+0x11a>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d110      	bne.n	8003872 <osThreadNew+0x11a>
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	b29a      	uxth	r2, r3
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fe68 	bl	8004538 <xTaskCreate>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <osThreadNew+0x11a>
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4618      	mov	r0, r3
 8003876:	3728      	adds	r7, #40	@ 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <osDelay>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	f3ef 8305 	mrs	r3, IPSR
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <osDelay+0x1c>
 8003890:	f06f 0305 	mvn.w	r3, #5
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e007      	b.n	80038a8 <osDelay+0x2c>
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <osDelay+0x2c>
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 ffa6 	bl	80047f4 <vTaskDelay>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <vApplicationGetIdleTaskMemory>:
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a07      	ldr	r2, [pc, #28]	@ (80038e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4a06      	ldr	r2, [pc, #24]	@ (80038e4 <vApplicationGetIdleTaskMemory+0x30>)
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2280      	movs	r2, #128	@ 0x80
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000200 	.word	0x20000200
 80038e4:	200002a8 	.word	0x200002a8

080038e8 <vApplicationGetTimerTaskMemory>:
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <vApplicationGetTimerTaskMemory+0x2c>)
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a06      	ldr	r2, [pc, #24]	@ (8003918 <vApplicationGetTimerTaskMemory+0x30>)
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	200004a8 	.word	0x200004a8
 8003918:	20000550 	.word	0x20000550

0800391c <vListInitialise>:
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <vListInitialiseItem>:
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <vListInsertEnd>:
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <vListInsert>:
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d103      	bne.n	80039de <vListInsert+0x20>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e00c      	b.n	80039f8 <vListInsert+0x3a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3308      	adds	r3, #8
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <vListInsert+0x2e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d2f6      	bcs.n	80039e6 <vListInsert+0x28>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <uxListRemove>:
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6892      	ldr	r2, [r2, #8]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d103      	bne.n	8003a64 <uxListRemove+0x34>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <xQueueGenericReset>:
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueGenericReset+0x2c>
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xQueueGenericReset+0x28>
 8003ab0:	f002 f8aa 	bl	8005c08 <vPortEnterCritical>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	@ 0xff
 8003af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	22ff      	movs	r2, #255	@ 0xff
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d114      	bne.n	8003b30 <xQueueGenericReset+0xac>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d01a      	beq.n	8003b44 <xQueueGenericReset+0xc0>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3310      	adds	r3, #16
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f942 	bl	8004d9c <xTaskRemoveFromEventList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <xQueueGenericReset+0xc0>
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <xQueueGenericReset+0xd0>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	e009      	b.n	8003b44 <xQueueGenericReset+0xc0>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3310      	adds	r3, #16
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fef1 	bl	800391c <vListInitialise>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3324      	adds	r3, #36	@ 0x24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff feec 	bl	800391c <vListInitialise>
 8003b44:	f002 f892 	bl	8005c6c <vPortExitCritical>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <xQueueGenericCreateStatic>:
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	@ 0x38
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <xQueueGenericCreateStatic+0x2c>
 8003b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <xQueueGenericCreateStatic+0x28>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <xQueueGenericCreateStatic+0x4a>
 8003b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	e7fd      	b.n	8003b9e <xQueueGenericCreateStatic+0x46>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <xQueueGenericCreateStatic+0x56>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <xQueueGenericCreateStatic+0x5a>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <xQueueGenericCreateStatic+0x5c>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10b      	bne.n	8003bd0 <xQueueGenericCreateStatic+0x78>
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <xQueueGenericCreateStatic+0x74>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <xQueueGenericCreateStatic+0x84>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <xQueueGenericCreateStatic+0x88>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <xQueueGenericCreateStatic+0x8a>
 8003be0:	2300      	movs	r3, #0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <xQueueGenericCreateStatic+0xa6>
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <xQueueGenericCreateStatic+0xa2>
 8003bfe:	2350      	movs	r3, #80	@ 0x50
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b50      	cmp	r3, #80	@ 0x50
 8003c06:	d00b      	beq.n	8003c20 <xQueueGenericCreateStatic+0xc8>
 8003c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	bf00      	nop
 8003c1c:	bf00      	nop
 8003c1e:	e7fd      	b.n	8003c1c <xQueueGenericCreateStatic+0xc4>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <xQueueGenericCreateStatic+0xf0>
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f805 	bl	8003c52 <prvInitialiseNewQueue>
 8003c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3730      	adds	r7, #48	@ 0x30
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <prvInitialiseNewQueue>:
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	70fb      	strb	r3, [r7, #3]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <prvInitialiseNewQueue+0x1c>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e002      	b.n	8003c74 <prvInitialiseNewQueue+0x22>
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c80:	2101      	movs	r1, #1
 8003c82:	69b8      	ldr	r0, [r7, #24]
 8003c84:	f7ff fefe 	bl	8003a84 <xQueueGenericReset>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <xQueueGenericSend>:
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08e      	sub	sp, #56	@ 0x38
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <xQueueGenericSend+0x34>
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericSend+0x30>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSend+0x42>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <xQueueGenericSend+0x46>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericSend+0x48>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <xQueueGenericSend+0x64>
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <xQueueGenericSend+0x60>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d103      	bne.n	8003d0a <xQueueGenericSend+0x72>
 8003d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <xQueueGenericSend+0x76>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <xQueueGenericSend+0x78>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <xQueueGenericSend+0x94>
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <xQueueGenericSend+0x90>
 8003d2c:	f001 f9fc 	bl	8005128 <xTaskGetSchedulerState>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <xQueueGenericSend+0xa4>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueGenericSend+0xa8>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueGenericSend+0xaa>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <xQueueGenericSend+0xc6>
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <xQueueGenericSend+0xc2>
 8003d5e:	f001 ff53 	bl	8005c08 <vPortEnterCritical>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <xQueueGenericSend+0xdc>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d129      	bne.n	8003dc8 <xQueueGenericSend+0x130>
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d7a:	f000 fa0f 	bl	800419c <prvCopyDataToQueue>
 8003d7e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <xQueueGenericSend+0x112>
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	3324      	adds	r3, #36	@ 0x24
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f805 	bl	8004d9c <xTaskRemoveFromEventList>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d013      	beq.n	8003dc0 <xQueueGenericSend+0x128>
 8003d98:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <xQueueGenericSend+0x200>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	e00a      	b.n	8003dc0 <xQueueGenericSend+0x128>
 8003daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <xQueueGenericSend+0x128>
 8003db0:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <xQueueGenericSend+0x200>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f001 ff54 	bl	8005c6c <vPortExitCritical>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e063      	b.n	8003e90 <xQueueGenericSend+0x1f8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <xQueueGenericSend+0x13e>
 8003dce:	f001 ff4d 	bl	8005c6c <vPortExitCritical>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e05c      	b.n	8003e90 <xQueueGenericSend+0x1f8>
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <xQueueGenericSend+0x152>
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 f83f 	bl	8004e64 <vTaskInternalSetTimeOutState>
 8003de6:	2301      	movs	r3, #1
 8003de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dea:	f001 ff3f 	bl	8005c6c <vPortExitCritical>
 8003dee:	f000 fda7 	bl	8004940 <vTaskSuspendAll>
 8003df2:	f001 ff09 	bl	8005c08 <vPortEnterCritical>
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dfc:	b25b      	sxtb	r3, r3
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d103      	bne.n	8003e0c <xQueueGenericSend+0x174>
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e12:	b25b      	sxtb	r3, r3
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d103      	bne.n	8003e22 <xQueueGenericSend+0x18a>
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e22:	f001 ff23 	bl	8005c6c <vPortExitCritical>
 8003e26:	1d3a      	adds	r2, r7, #4
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f82e 	bl	8004e90 <xTaskCheckForTimeOut>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d124      	bne.n	8003e84 <xQueueGenericSend+0x1ec>
 8003e3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e3c:	f000 faa6 	bl	800438c <prvIsQueueFull>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <xQueueGenericSend+0x1e0>
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	3310      	adds	r3, #16
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 ff52 	bl	8004cf8 <vTaskPlaceOnEventList>
 8003e54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e56:	f000 fa31 	bl	80042bc <prvUnlockQueue>
 8003e5a:	f000 fd7f 	bl	800495c <xTaskResumeAll>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f af7c 	bne.w	8003d5e <xQueueGenericSend+0xc6>
 8003e66:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <xQueueGenericSend+0x200>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	e772      	b.n	8003d5e <xQueueGenericSend+0xc6>
 8003e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e7a:	f000 fa1f 	bl	80042bc <prvUnlockQueue>
 8003e7e:	f000 fd6d 	bl	800495c <xTaskResumeAll>
 8003e82:	e76c      	b.n	8003d5e <xQueueGenericSend+0xc6>
 8003e84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e86:	f000 fa19 	bl	80042bc <prvUnlockQueue>
 8003e8a:	f000 fd67 	bl	800495c <xTaskResumeAll>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	3738      	adds	r7, #56	@ 0x38
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <xQueueGenericSendFromISR>:
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b090      	sub	sp, #64	@ 0x40
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10b      	bne.n	8003ecc <xQueueGenericSendFromISR+0x30>
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	e7fd      	b.n	8003ec8 <xQueueGenericSendFromISR+0x2c>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <xQueueGenericSendFromISR+0x3e>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <xQueueGenericSendFromISR+0x42>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <xQueueGenericSendFromISR+0x44>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <xQueueGenericSendFromISR+0x60>
 8003ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <xQueueGenericSendFromISR+0x5c>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d103      	bne.n	8003f0a <xQueueGenericSendFromISR+0x6e>
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <xQueueGenericSendFromISR+0x72>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <xQueueGenericSendFromISR+0x74>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <xQueueGenericSendFromISR+0x90>
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xQueueGenericSendFromISR+0x8c>
 8003f2c:	f001 ff4c 	bl	8005dc8 <vPortValidateInterruptPriority>
 8003f30:	f3ef 8211 	mrs	r2, BASEPRI
 8003f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	61fa      	str	r2, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <xQueueGenericSendFromISR+0xc2>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d12f      	bne.n	8003fbe <xQueueGenericSendFromISR+0x122>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8003f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f74:	f000 f912 	bl	800419c <prvCopyDataToQueue>
 8003f78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d112      	bne.n	8003fa8 <xQueueGenericSendFromISR+0x10c>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <xQueueGenericSendFromISR+0x11c>
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8c:	3324      	adds	r3, #36	@ 0x24
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ff04 	bl	8004d9c <xTaskRemoveFromEventList>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00e      	beq.n	8003fb8 <xQueueGenericSendFromISR+0x11c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <xQueueGenericSendFromISR+0x11c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e007      	b.n	8003fb8 <xQueueGenericSendFromISR+0x11c>
 8003fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	b25a      	sxtb	r2, r3
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fb8:	2301      	movs	r3, #1
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fbc:	e001      	b.n	8003fc2 <xQueueGenericSendFromISR+0x126>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	bf00      	nop
 8003fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3740      	adds	r7, #64	@ 0x40
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <xQueueReceive>:
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	@ 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <xQueueReceive+0x32>
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <xQueueReceive+0x2e>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <xQueueReceive+0x40>
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <xQueueReceive+0x44>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <xQueueReceive+0x46>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <xQueueReceive+0x62>
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <xQueueReceive+0x5e>
 800403a:	f001 f875 	bl	8005128 <xTaskGetSchedulerState>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <xQueueReceive+0x72>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <xQueueReceive+0x76>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <xQueueReceive+0x78>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <xQueueReceive+0x94>
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <xQueueReceive+0x90>
 800406c:	f001 fdcc 	bl	8005c08 <vPortEnterCritical>
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01f      	beq.n	80040bc <xQueueReceive+0xe4>
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004080:	f000 f8f6 	bl	8004270 <prvCopyDataFromQueue>
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38
 800408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <xQueueReceive+0xdc>
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004096:	3310      	adds	r3, #16
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fe7f 	bl	8004d9c <xTaskRemoveFromEventList>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <xQueueReceive+0xdc>
 80040a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004198 <xQueueReceive+0x1c0>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f001 fdda 	bl	8005c6c <vPortExitCritical>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e069      	b.n	8004190 <xQueueReceive+0x1b8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <xQueueReceive+0xf2>
 80040c2:	f001 fdd3 	bl	8005c6c <vPortExitCritical>
 80040c6:	2300      	movs	r3, #0
 80040c8:	e062      	b.n	8004190 <xQueueReceive+0x1b8>
 80040ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <xQueueReceive+0x106>
 80040d0:	f107 0310 	add.w	r3, r7, #16
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fec5 	bl	8004e64 <vTaskInternalSetTimeOutState>
 80040da:	2301      	movs	r3, #1
 80040dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040de:	f001 fdc5 	bl	8005c6c <vPortExitCritical>
 80040e2:	f000 fc2d 	bl	8004940 <vTaskSuspendAll>
 80040e6:	f001 fd8f 	bl	8005c08 <vPortEnterCritical>
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d103      	bne.n	8004100 <xQueueReceive+0x128>
 80040f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004106:	b25b      	sxtb	r3, r3
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d103      	bne.n	8004116 <xQueueReceive+0x13e>
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004116:	f001 fda9 	bl	8005c6c <vPortExitCritical>
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	f107 0310 	add.w	r3, r7, #16
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f000 feb4 	bl	8004e90 <xTaskCheckForTimeOut>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d123      	bne.n	8004176 <xQueueReceive+0x19e>
 800412e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004130:	f000 f916 	bl	8004360 <prvIsQueueEmpty>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <xQueueReceive+0x192>
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	3324      	adds	r3, #36	@ 0x24
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fdd8 	bl	8004cf8 <vTaskPlaceOnEventList>
 8004148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800414a:	f000 f8b7 	bl	80042bc <prvUnlockQueue>
 800414e:	f000 fc05 	bl	800495c <xTaskResumeAll>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d189      	bne.n	800406c <xQueueReceive+0x94>
 8004158:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <xQueueReceive+0x1c0>)
 800415a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	e780      	b.n	800406c <xQueueReceive+0x94>
 800416a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800416c:	f000 f8a6 	bl	80042bc <prvUnlockQueue>
 8004170:	f000 fbf4 	bl	800495c <xTaskResumeAll>
 8004174:	e77a      	b.n	800406c <xQueueReceive+0x94>
 8004176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004178:	f000 f8a0 	bl	80042bc <prvUnlockQueue>
 800417c:	f000 fbee 	bl	800495c <xTaskResumeAll>
 8004180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004182:	f000 f8ed 	bl	8004360 <prvIsQueueEmpty>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	f43f af6f 	beq.w	800406c <xQueueReceive+0x94>
 800418e:	2300      	movs	r3, #0
 8004190:	4618      	mov	r0, r3
 8004192:	3730      	adds	r7, #48	@ 0x30
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <prvCopyDataToQueue>:
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <prvCopyDataToQueue+0x3a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d14d      	bne.n	800425e <prvCopyDataToQueue+0xc2>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 ffcc 	bl	8005164 <xTaskPriorityDisinherit>
 80041cc:	6178      	str	r0, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	e043      	b.n	800425e <prvCopyDataToQueue+0xc2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d119      	bne.n	8004210 <prvCopyDataToQueue+0x74>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6858      	ldr	r0, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	461a      	mov	r2, r3
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	f002 f8dc 	bl	80063a4 <memcpy>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d32b      	bcc.n	800425e <prvCopyDataToQueue+0xc2>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e026      	b.n	800425e <prvCopyDataToQueue+0xc2>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68d8      	ldr	r0, [r3, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	461a      	mov	r2, r3
 800421a:	68b9      	ldr	r1, [r7, #8]
 800421c:	f002 f8c2 	bl	80063a4 <memcpy>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	425b      	negs	r3, r3
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d207      	bcs.n	800424c <prvCopyDataToQueue+0xb0>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	425b      	negs	r3, r3
 8004246:	441a      	add	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d105      	bne.n	800425e <prvCopyDataToQueue+0xc2>
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <prvCopyDataToQueue+0xc2>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	3b01      	subs	r3, #1
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvCopyDataFromQueue>:
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <prvCopyDataFromQueue+0x44>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	441a      	add	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	d303      	bcc.n	80042a4 <prvCopyDataFromQueue+0x34>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68d9      	ldr	r1, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	461a      	mov	r2, r3
 80042ae:	6838      	ldr	r0, [r7, #0]
 80042b0:	f002 f878 	bl	80063a4 <memcpy>
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvUnlockQueue>:
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	f001 fca0 	bl	8005c08 <vPortEnterCritical>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e011      	b.n	80042f6 <prvUnlockQueue+0x3a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <prvUnlockQueue+0x44>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3324      	adds	r3, #36	@ 0x24
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fd5c 	bl	8004d9c <xTaskRemoveFromEventList>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <prvUnlockQueue+0x32>
 80042ea:	f000 fe35 	bl	8004f58 <vTaskMissedYield>
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	dce9      	bgt.n	80042d2 <prvUnlockQueue+0x16>
 80042fe:	e000      	b.n	8004302 <prvUnlockQueue+0x46>
 8004300:	bf00      	nop
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	22ff      	movs	r2, #255	@ 0xff
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800430a:	f001 fcaf 	bl	8005c6c <vPortExitCritical>
 800430e:	f001 fc7b 	bl	8005c08 <vPortEnterCritical>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004318:	73bb      	strb	r3, [r7, #14]
 800431a:	e011      	b.n	8004340 <prvUnlockQueue+0x84>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <prvUnlockQueue+0x8e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3310      	adds	r3, #16
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fd37 	bl	8004d9c <xTaskRemoveFromEventList>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <prvUnlockQueue+0x7c>
 8004334:	f000 fe10 	bl	8004f58 <vTaskMissedYield>
 8004338:	7bbb      	ldrb	r3, [r7, #14]
 800433a:	3b01      	subs	r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	73bb      	strb	r3, [r7, #14]
 8004340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004344:	2b00      	cmp	r3, #0
 8004346:	dce9      	bgt.n	800431c <prvUnlockQueue+0x60>
 8004348:	e000      	b.n	800434c <prvUnlockQueue+0x90>
 800434a:	bf00      	nop
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	22ff      	movs	r2, #255	@ 0xff
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004354:	f001 fc8a 	bl	8005c6c <vPortExitCritical>
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <prvIsQueueEmpty>:
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	f001 fc4e 	bl	8005c08 <vPortEnterCritical>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <prvIsQueueEmpty+0x1a>
 8004374:	2301      	movs	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e001      	b.n	800437e <prvIsQueueEmpty+0x1e>
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	f001 fc75 	bl	8005c6c <vPortExitCritical>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <prvIsQueueFull>:
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	f001 fc38 	bl	8005c08 <vPortEnterCritical>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d102      	bne.n	80043aa <prvIsQueueFull+0x1e>
 80043a4:	2301      	movs	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e001      	b.n	80043ae <prvIsQueueFull+0x22>
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	f001 fc5d 	bl	8005c6c <vPortExitCritical>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <vQueueAddToRegistry>:
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e014      	b.n	80043f6 <vQueueAddToRegistry+0x3a>
 80043cc:	4a0f      	ldr	r2, [pc, #60]	@ (800440c <vQueueAddToRegistry+0x50>)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <vQueueAddToRegistry+0x34>
 80043d8:	490c      	ldr	r1, [pc, #48]	@ (800440c <vQueueAddToRegistry+0x50>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80043e2:	4a0a      	ldr	r2, [pc, #40]	@ (800440c <vQueueAddToRegistry+0x50>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	e006      	b.n	80043fe <vQueueAddToRegistry+0x42>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	d9e7      	bls.n	80043cc <vQueueAddToRegistry+0x10>
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000950 	.word	0x20000950

08004410 <vQueueWaitForMessageRestricted>:
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	f001 fbf2 	bl	8005c08 <vPortEnterCritical>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800442a:	b25b      	sxtb	r3, r3
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004430:	d103      	bne.n	800443a <vQueueWaitForMessageRestricted+0x2a>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004440:	b25b      	sxtb	r3, r3
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d103      	bne.n	8004450 <vQueueWaitForMessageRestricted+0x40>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004450:	f001 fc0c 	bl	8005c6c <vPortExitCritical>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <vQueueWaitForMessageRestricted+0x5a>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3324      	adds	r3, #36	@ 0x24
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fc6d 	bl	8004d44 <vTaskPlaceOnEventListRestricted>
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff ff26 	bl	80042bc <prvUnlockQueue>
 8004470:	bf00      	nop
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <xTaskCreateStatic>:
 8004478:	b580      	push	{r7, lr}
 800447a:	b08e      	sub	sp, #56	@ 0x38
 800447c:	af04      	add	r7, sp, #16
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10b      	bne.n	80044a4 <xTaskCreateStatic+0x2c>
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <xTaskCreateStatic+0x28>
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <xTaskCreateStatic+0x4a>
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	e7fd      	b.n	80044be <xTaskCreateStatic+0x46>
 80044c2:	23a8      	movs	r3, #168	@ 0xa8
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80044ca:	d00b      	beq.n	80044e4 <xTaskCreateStatic+0x6c>
 80044cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <xTaskCreateStatic+0x68>
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01e      	beq.n	800452a <xTaskCreateStatic+0xb2>
 80044ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01b      	beq.n	800452a <xTaskCreateStatic+0xb2>
 80044f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 8004504:	2300      	movs	r3, #0
 8004506:	9303      	str	r3, [sp, #12]
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f851 	bl	80045c4 <prvInitialiseNewTask>
 8004522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004524:	f000 f8f6 	bl	8004714 <prvAddNewTaskToReadyList>
 8004528:	e001      	b.n	800452e <xTaskCreateStatic+0xb6>
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	@ 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <xTaskCreate>:
 8004538:	b580      	push	{r7, lr}
 800453a:	b08c      	sub	sp, #48	@ 0x30
 800453c:	af04      	add	r7, sp, #16
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4618      	mov	r0, r3
 800454e:	f001 fc7d 	bl	8005e4c <pvPortMalloc>
 8004552:	6178      	str	r0, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <xTaskCreate+0x40>
 800455a:	20a8      	movs	r0, #168	@ 0xa8
 800455c:	f001 fc76 	bl	8005e4c <pvPortMalloc>
 8004560:	61f8      	str	r0, [r7, #28]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <xTaskCreate+0x38>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
 800456e:	e005      	b.n	800457c <xTaskCreate+0x44>
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f001 fd39 	bl	8005fe8 <vPortFree>
 8004576:	e001      	b.n	800457c <xTaskCreate+0x44>
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d017      	beq.n	80045b2 <xTaskCreate+0x7a>
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	2300      	movs	r3, #0
 800458e:	9303      	str	r3, [sp, #12]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	9302      	str	r3, [sp, #8]
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f80f 	bl	80045c4 <prvInitialiseNewTask>
 80045a6:	69f8      	ldr	r0, [r7, #28]
 80045a8:	f000 f8b4 	bl	8004714 <prvAddNewTaskToReadyList>
 80045ac:	2301      	movs	r3, #1
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e002      	b.n	80045b8 <xTaskCreate+0x80>
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <prvInitialiseNewTask>:
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	461a      	mov	r2, r3
 80045dc:	21a5      	movs	r1, #165	@ 0xa5
 80045de:	f001 fe57 	bl	8006290 <memset>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045ec:	3b01      	subs	r3, #1
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <prvInitialiseNewTask+0x5a>
 8004606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	e7fd      	b.n	800461a <prvInitialiseNewTask+0x56>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01f      	beq.n	8004664 <prvInitialiseNewTask+0xa0>
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	e012      	b.n	8004650 <prvInitialiseNewTask+0x8c>
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	7819      	ldrb	r1, [r3, #0]
 8004632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	3334      	adds	r3, #52	@ 0x34
 800463a:	460a      	mov	r2, r1
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <prvInitialiseNewTask+0x94>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3301      	adds	r3, #1
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	d9e9      	bls.n	800462a <prvInitialiseNewTask+0x66>
 8004656:	e000      	b.n	800465a <prvInitialiseNewTask+0x96>
 8004658:	bf00      	nop
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004662:	e003      	b.n	800466c <prvInitialiseNewTask+0xa8>
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	2b37      	cmp	r3, #55	@ 0x37
 8004670:	d901      	bls.n	8004676 <prvInitialiseNewTask+0xb2>
 8004672:	2337      	movs	r3, #55	@ 0x37
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800467a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004680:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	2200      	movs	r2, #0
 8004686:	651a      	str	r2, [r3, #80]	@ 0x50
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff f965 	bl	800395c <vListInitialiseItem>
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	3318      	adds	r3, #24
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff f960 	bl	800395c <vListInitialiseItem>
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	619a      	str	r2, [r3, #24]
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	3354      	adds	r3, #84	@ 0x54
 80046c6:	224c      	movs	r2, #76	@ 0x4c
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 fde0 	bl	8006290 <memset>
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <prvInitialiseNewTask+0x144>)
 80046d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	4a0c      	ldr	r2, [pc, #48]	@ (800470c <prvInitialiseNewTask+0x148>)
 80046da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	4a0c      	ldr	r2, [pc, #48]	@ (8004710 <prvInitialiseNewTask+0x14c>)
 80046e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	69b8      	ldr	r0, [r7, #24]
 80046e8:	f001 f95a 	bl	80059a0 <pxPortInitialiseStack>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <prvInitialiseNewTask+0x13a>
 80046f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	bf00      	nop
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20004be4 	.word	0x20004be4
 800470c:	20004c4c 	.word	0x20004c4c
 8004710:	20004cb4 	.word	0x20004cb4

08004714 <prvAddNewTaskToReadyList>:
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	f001 fa74 	bl	8005c08 <vPortEnterCritical>
 8004720:	4b2d      	ldr	r3, [pc, #180]	@ (80047d8 <prvAddNewTaskToReadyList+0xc4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4a2c      	ldr	r2, [pc, #176]	@ (80047d8 <prvAddNewTaskToReadyList+0xc4>)
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b2c      	ldr	r3, [pc, #176]	@ (80047dc <prvAddNewTaskToReadyList+0xc8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <prvAddNewTaskToReadyList+0x32>
 8004732:	4a2a      	ldr	r2, [pc, #168]	@ (80047dc <prvAddNewTaskToReadyList+0xc8>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b27      	ldr	r3, [pc, #156]	@ (80047d8 <prvAddNewTaskToReadyList+0xc4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d110      	bne.n	8004762 <prvAddNewTaskToReadyList+0x4e>
 8004740:	f000 fc2e 	bl	8004fa0 <prvInitialiseTaskLists>
 8004744:	e00d      	b.n	8004762 <prvAddNewTaskToReadyList+0x4e>
 8004746:	4b26      	ldr	r3, [pc, #152]	@ (80047e0 <prvAddNewTaskToReadyList+0xcc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d109      	bne.n	8004762 <prvAddNewTaskToReadyList+0x4e>
 800474e:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <prvAddNewTaskToReadyList+0xc8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d802      	bhi.n	8004762 <prvAddNewTaskToReadyList+0x4e>
 800475c:	4a1f      	ldr	r2, [pc, #124]	@ (80047dc <prvAddNewTaskToReadyList+0xc8>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <prvAddNewTaskToReadyList+0xd0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a1e      	ldr	r2, [pc, #120]	@ (80047e4 <prvAddNewTaskToReadyList+0xd0>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <prvAddNewTaskToReadyList+0xd0>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	645a      	str	r2, [r3, #68]	@ 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <prvAddNewTaskToReadyList+0xd4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d903      	bls.n	8004788 <prvAddNewTaskToReadyList+0x74>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <prvAddNewTaskToReadyList+0xd4>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <prvAddNewTaskToReadyList+0xd8>)
 8004796:	441a      	add	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7ff f8e9 	bl	8003976 <vListInsertEnd>
 80047a4:	f001 fa62 	bl	8005c6c <vPortExitCritical>
 80047a8:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <prvAddNewTaskToReadyList+0xcc>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <prvAddNewTaskToReadyList+0xba>
 80047b0:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <prvAddNewTaskToReadyList+0xc8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d207      	bcs.n	80047ce <prvAddNewTaskToReadyList+0xba>
 80047be:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <prvAddNewTaskToReadyList+0xdc>)
 80047c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000e64 	.word	0x20000e64
 80047dc:	20000990 	.word	0x20000990
 80047e0:	20000e70 	.word	0x20000e70
 80047e4:	20000e80 	.word	0x20000e80
 80047e8:	20000e6c 	.word	0x20000e6c
 80047ec:	20000994 	.word	0x20000994
 80047f0:	e000ed04 	.word	0xe000ed04

080047f4 <vTaskDelay>:
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d018      	beq.n	8004838 <vTaskDelay+0x44>
 8004806:	4b14      	ldr	r3, [pc, #80]	@ (8004858 <vTaskDelay+0x64>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <vTaskDelay+0x32>
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <vTaskDelay+0x2e>
 8004826:	f000 f88b 	bl	8004940 <vTaskSuspendAll>
 800482a:	2100      	movs	r1, #0
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fd09 	bl	8005244 <prvAddCurrentTaskToDelayedList>
 8004832:	f000 f893 	bl	800495c <xTaskResumeAll>
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <vTaskDelay+0x5a>
 800483e:	4b07      	ldr	r3, [pc, #28]	@ (800485c <vTaskDelay+0x68>)
 8004840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000e8c 	.word	0x20000e8c
 800485c:	e000ed04 	.word	0xe000ed04

08004860 <vTaskStartScheduler>:
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	@ 0x28
 8004864:	af04      	add	r7, sp, #16
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	463a      	mov	r2, r7
 8004870:	1d39      	adds	r1, r7, #4
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f81c 	bl	80038b4 <vApplicationGetIdleTaskMemory>
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	9202      	str	r2, [sp, #8]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	460a      	mov	r2, r1
 800488e:	4924      	ldr	r1, [pc, #144]	@ (8004920 <vTaskStartScheduler+0xc0>)
 8004890:	4824      	ldr	r0, [pc, #144]	@ (8004924 <vTaskStartScheduler+0xc4>)
 8004892:	f7ff fdf1 	bl	8004478 <xTaskCreateStatic>
 8004896:	4603      	mov	r3, r0
 8004898:	4a23      	ldr	r2, [pc, #140]	@ (8004928 <vTaskStartScheduler+0xc8>)
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	4b22      	ldr	r3, [pc, #136]	@ (8004928 <vTaskStartScheduler+0xc8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <vTaskStartScheduler+0x4a>
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e001      	b.n	80048ae <vTaskStartScheduler+0x4e>
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d102      	bne.n	80048ba <vTaskStartScheduler+0x5a>
 80048b4:	f000 fd1a 	bl	80052ec <xTimerCreateTimerTask>
 80048b8:	6178      	str	r0, [r7, #20]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d11b      	bne.n	80048f8 <vTaskStartScheduler+0x98>
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	bf00      	nop
 80048d4:	4b15      	ldr	r3, [pc, #84]	@ (800492c <vTaskStartScheduler+0xcc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3354      	adds	r3, #84	@ 0x54
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <vTaskStartScheduler+0xd0>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <vTaskStartScheduler+0xd4>)
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <vTaskStartScheduler+0xd8>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b13      	ldr	r3, [pc, #76]	@ (800493c <vTaskStartScheduler+0xdc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f001 f8e5 	bl	8005ac0 <xPortStartScheduler>
 80048f6:	e00f      	b.n	8004918 <vTaskStartScheduler+0xb8>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d10b      	bne.n	8004918 <vTaskStartScheduler+0xb8>
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <vTaskStartScheduler+0xb4>
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08006cd8 	.word	0x08006cd8
 8004924:	08004f71 	.word	0x08004f71
 8004928:	20000e88 	.word	0x20000e88
 800492c:	20000990 	.word	0x20000990
 8004930:	2000005c 	.word	0x2000005c
 8004934:	20000e84 	.word	0x20000e84
 8004938:	20000e70 	.word	0x20000e70
 800493c:	20000e68 	.word	0x20000e68

08004940 <vTaskSuspendAll>:
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
 8004944:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <vTaskSuspendAll+0x18>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	4a03      	ldr	r2, [pc, #12]	@ (8004958 <vTaskSuspendAll+0x18>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	bf00      	nop
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000e8c 	.word	0x20000e8c

0800495c <xTaskResumeAll>:
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	4b42      	ldr	r3, [pc, #264]	@ (8004a74 <xTaskResumeAll+0x118>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <xTaskResumeAll+0x2e>
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <xTaskResumeAll+0x2a>
 800498a:	f001 f93d 	bl	8005c08 <vPortEnterCritical>
 800498e:	4b39      	ldr	r3, [pc, #228]	@ (8004a74 <xTaskResumeAll+0x118>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	4a37      	ldr	r2, [pc, #220]	@ (8004a74 <xTaskResumeAll+0x118>)
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <xTaskResumeAll+0x118>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d162      	bne.n	8004a66 <xTaskResumeAll+0x10a>
 80049a0:	4b35      	ldr	r3, [pc, #212]	@ (8004a78 <xTaskResumeAll+0x11c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d05e      	beq.n	8004a66 <xTaskResumeAll+0x10a>
 80049a8:	e02f      	b.n	8004a0a <xTaskResumeAll+0xae>
 80049aa:	4b34      	ldr	r3, [pc, #208]	@ (8004a7c <xTaskResumeAll+0x120>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff f83a 	bl	8003a30 <uxListRemove>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3304      	adds	r3, #4
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff f835 	bl	8003a30 <uxListRemove>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <xTaskResumeAll+0x124>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d903      	bls.n	80049da <xTaskResumeAll+0x7e>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a80 <xTaskResumeAll+0x124>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <xTaskResumeAll+0x128>)
 80049e8:	441a      	add	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe ffc0 	bl	8003976 <vListInsertEnd>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	4b23      	ldr	r3, [pc, #140]	@ (8004a88 <xTaskResumeAll+0x12c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <xTaskResumeAll+0xae>
 8004a04:	4b21      	ldr	r3, [pc, #132]	@ (8004a8c <xTaskResumeAll+0x130>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004a7c <xTaskResumeAll+0x120>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1cb      	bne.n	80049aa <xTaskResumeAll+0x4e>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <xTaskResumeAll+0xc0>
 8004a18:	f000 fb66 	bl	80050e8 <prvResetNextTaskUnblockTime>
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a90 <xTaskResumeAll+0x134>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d010      	beq.n	8004a4a <xTaskResumeAll+0xee>
 8004a28:	f000 f846 	bl	8004ab8 <xTaskIncrementTick>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <xTaskResumeAll+0xdc>
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <xTaskResumeAll+0x130>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f1      	bne.n	8004a28 <xTaskResumeAll+0xcc>
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <xTaskResumeAll+0x134>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <xTaskResumeAll+0x130>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <xTaskResumeAll+0x10a>
 8004a52:	2301      	movs	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	4b0f      	ldr	r3, [pc, #60]	@ (8004a94 <xTaskResumeAll+0x138>)
 8004a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f001 f901 	bl	8005c6c <vPortExitCritical>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000e8c 	.word	0x20000e8c
 8004a78:	20000e64 	.word	0x20000e64
 8004a7c:	20000e24 	.word	0x20000e24
 8004a80:	20000e6c 	.word	0x20000e6c
 8004a84:	20000994 	.word	0x20000994
 8004a88:	20000990 	.word	0x20000990
 8004a8c:	20000e78 	.word	0x20000e78
 8004a90:	20000e74 	.word	0x20000e74
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <xTaskGetTickCount>:
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <xTaskGetTickCount+0x1c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000e68 	.word	0x20000e68

08004ab8 <xTaskIncrementTick>:
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c00 <xTaskIncrementTick+0x148>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8090 	bne.w	8004bec <xTaskIncrementTick+0x134>
 8004acc:	4b4d      	ldr	r3, [pc, #308]	@ (8004c04 <xTaskIncrementTick+0x14c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8004c04 <xTaskIncrementTick+0x14c>)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d121      	bne.n	8004b24 <xTaskIncrementTick+0x6c>
 8004ae0:	4b49      	ldr	r3, [pc, #292]	@ (8004c08 <xTaskIncrementTick+0x150>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <xTaskIncrementTick+0x4a>
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xTaskIncrementTick+0x46>
 8004b02:	4b41      	ldr	r3, [pc, #260]	@ (8004c08 <xTaskIncrementTick+0x150>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	4b40      	ldr	r3, [pc, #256]	@ (8004c0c <xTaskIncrementTick+0x154>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c08 <xTaskIncrementTick+0x150>)
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4a3e      	ldr	r2, [pc, #248]	@ (8004c0c <xTaskIncrementTick+0x154>)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b3e      	ldr	r3, [pc, #248]	@ (8004c10 <xTaskIncrementTick+0x158>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c10 <xTaskIncrementTick+0x158>)
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	f000 fae2 	bl	80050e8 <prvResetNextTaskUnblockTime>
 8004b24:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <xTaskIncrementTick+0x15c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d349      	bcc.n	8004bc2 <xTaskIncrementTick+0x10a>
 8004b2e:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <xTaskIncrementTick+0x150>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <xTaskIncrementTick+0x8a>
 8004b38:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <xTaskIncrementTick+0x15c>)
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e03f      	b.n	8004bc2 <xTaskIncrementTick+0x10a>
 8004b42:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <xTaskIncrementTick+0x150>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d203      	bcs.n	8004b62 <xTaskIncrementTick+0xaa>
 8004b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c14 <xTaskIncrementTick+0x15c>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e02f      	b.n	8004bc2 <xTaskIncrementTick+0x10a>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe ff62 	bl	8003a30 <uxListRemove>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <xTaskIncrementTick+0xc6>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3318      	adds	r3, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe ff59 	bl	8003a30 <uxListRemove>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	4b25      	ldr	r3, [pc, #148]	@ (8004c18 <xTaskIncrementTick+0x160>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d903      	bls.n	8004b92 <xTaskIncrementTick+0xda>
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	4a22      	ldr	r2, [pc, #136]	@ (8004c18 <xTaskIncrementTick+0x160>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c1c <xTaskIncrementTick+0x164>)
 8004ba0:	441a      	add	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fe fee4 	bl	8003976 <vListInsertEnd>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <xTaskIncrementTick+0x168>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d3b8      	bcc.n	8004b2e <xTaskIncrementTick+0x76>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e7b5      	b.n	8004b2e <xTaskIncrementTick+0x76>
 8004bc2:	4b17      	ldr	r3, [pc, #92]	@ (8004c20 <xTaskIncrementTick+0x168>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc8:	4914      	ldr	r1, [pc, #80]	@ (8004c1c <xTaskIncrementTick+0x164>)
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d901      	bls.n	8004bde <xTaskIncrementTick+0x126>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	4b11      	ldr	r3, [pc, #68]	@ (8004c24 <xTaskIncrementTick+0x16c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <xTaskIncrementTick+0x13e>
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e004      	b.n	8004bf6 <xTaskIncrementTick+0x13e>
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <xTaskIncrementTick+0x170>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004c28 <xTaskIncrementTick+0x170>)
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000e8c 	.word	0x20000e8c
 8004c04:	20000e68 	.word	0x20000e68
 8004c08:	20000e1c 	.word	0x20000e1c
 8004c0c:	20000e20 	.word	0x20000e20
 8004c10:	20000e7c 	.word	0x20000e7c
 8004c14:	20000e84 	.word	0x20000e84
 8004c18:	20000e6c 	.word	0x20000e6c
 8004c1c:	20000994 	.word	0x20000994
 8004c20:	20000990 	.word	0x20000990
 8004c24:	20000e78 	.word	0x20000e78
 8004c28:	20000e74 	.word	0x20000e74

08004c2c <vTaskSwitchContext>:
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce0 <vTaskSwitchContext+0xb4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <vTaskSwitchContext+0x16>
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce4 <vTaskSwitchContext+0xb8>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e047      	b.n	8004cd2 <vTaskSwitchContext+0xa6>
 8004c42:	4b28      	ldr	r3, [pc, #160]	@ (8004ce4 <vTaskSwitchContext+0xb8>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <vTaskSwitchContext+0xbc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e011      	b.n	8004c74 <vTaskSwitchContext+0x48>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <vTaskSwitchContext+0x42>
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <vTaskSwitchContext+0x3e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	491d      	ldr	r1, [pc, #116]	@ (8004cec <vTaskSwitchContext+0xc0>)
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0e3      	beq.n	8004c50 <vTaskSwitchContext+0x24>
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <vTaskSwitchContext+0xc0>)
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d104      	bne.n	8004cb8 <vTaskSwitchContext+0x8c>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf0 <vTaskSwitchContext+0xc4>)
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <vTaskSwitchContext+0xbc>)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <vTaskSwitchContext+0xc4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3354      	adds	r3, #84	@ 0x54
 8004cce:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <vTaskSwitchContext+0xc8>)
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000e8c 	.word	0x20000e8c
 8004ce4:	20000e78 	.word	0x20000e78
 8004ce8:	20000e6c 	.word	0x20000e6c
 8004cec:	20000994 	.word	0x20000994
 8004cf0:	20000990 	.word	0x20000990
 8004cf4:	2000005c 	.word	0x2000005c

08004cf8 <vTaskPlaceOnEventList>:
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <vTaskPlaceOnEventList+0x28>
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <vTaskPlaceOnEventList+0x24>
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <vTaskPlaceOnEventList+0x48>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3318      	adds	r3, #24
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fe fe48 	bl	80039be <vListInsert>
 8004d2e:	2101      	movs	r1, #1
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f000 fa87 	bl	8005244 <prvAddCurrentTaskToDelayedList>
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000990 	.word	0x20000990

08004d44 <vTaskPlaceOnEventListRestricted>:
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10b      	bne.n	8004d6e <vTaskPlaceOnEventListRestricted+0x2a>
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	e7fd      	b.n	8004d6a <vTaskPlaceOnEventListRestricted+0x26>
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3318      	adds	r3, #24
 8004d74:	4619      	mov	r1, r3
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7fe fdfd 	bl	8003976 <vListInsertEnd>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <vTaskPlaceOnEventListRestricted+0x44>
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	68b8      	ldr	r0, [r7, #8]
 8004d8c:	f000 fa5a 	bl	8005244 <prvAddCurrentTaskToDelayedList>
 8004d90:	bf00      	nop
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000990 	.word	0x20000990

08004d9c <xTaskRemoveFromEventList>:
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <xTaskRemoveFromEventList+0x2e>
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xTaskRemoveFromEventList+0x2a>
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3318      	adds	r3, #24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fe2e 	bl	8003a30 <uxListRemove>
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <xTaskRemoveFromEventList+0xb0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11d      	bne.n	8004e18 <xTaskRemoveFromEventList+0x7c>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fe25 	bl	8003a30 <uxListRemove>
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	4b19      	ldr	r3, [pc, #100]	@ (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d903      	bls.n	8004dfa <xTaskRemoveFromEventList+0x5e>
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df6:	4a16      	ldr	r2, [pc, #88]	@ (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a13      	ldr	r2, [pc, #76]	@ (8004e54 <xTaskRemoveFromEventList+0xb8>)
 8004e08:	441a      	add	r2, r3
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fe fdb0 	bl	8003976 <vListInsertEnd>
 8004e16:	e005      	b.n	8004e24 <xTaskRemoveFromEventList+0x88>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	480e      	ldr	r0, [pc, #56]	@ (8004e58 <xTaskRemoveFromEventList+0xbc>)
 8004e20:	f7fe fda9 	bl	8003976 <vListInsertEnd>
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e28:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <xTaskRemoveFromEventList+0xc0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d905      	bls.n	8004e3e <xTaskRemoveFromEventList+0xa2>
 8004e32:	2301      	movs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <xTaskRemoveFromEventList+0xc4>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e001      	b.n	8004e42 <xTaskRemoveFromEventList+0xa6>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000e8c 	.word	0x20000e8c
 8004e50:	20000e6c 	.word	0x20000e6c
 8004e54:	20000994 	.word	0x20000994
 8004e58:	20000e24 	.word	0x20000e24
 8004e5c:	20000990 	.word	0x20000990
 8004e60:	20000e78 	.word	0x20000e78

08004e64 <vTaskInternalSetTimeOutState>:
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <vTaskInternalSetTimeOutState+0x24>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <vTaskInternalSetTimeOutState+0x28>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	20000e7c 	.word	0x20000e7c
 8004e8c:	20000e68 	.word	0x20000e68

08004e90 <xTaskCheckForTimeOut>:
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <xTaskCheckForTimeOut+0x28>
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xTaskCheckForTimeOut+0x24>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <xTaskCheckForTimeOut+0x46>
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <xTaskCheckForTimeOut+0x42>
 8004ed6:	f000 fe97 	bl	8005c08 <vPortEnterCritical>
 8004eda:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <xTaskCheckForTimeOut+0xc0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d102      	bne.n	8004efa <xTaskCheckForTimeOut+0x6a>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e023      	b.n	8004f42 <xTaskCheckForTimeOut+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b15      	ldr	r3, [pc, #84]	@ (8004f54 <xTaskCheckForTimeOut+0xc4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d007      	beq.n	8004f16 <xTaskCheckForTimeOut+0x86>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d302      	bcc.n	8004f16 <xTaskCheckForTimeOut+0x86>
 8004f10:	2301      	movs	r3, #1
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e015      	b.n	8004f42 <xTaskCheckForTimeOut+0xb2>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d20b      	bcs.n	8004f38 <xTaskCheckForTimeOut+0xa8>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff99 	bl	8004e64 <vTaskInternalSetTimeOutState>
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e004      	b.n	8004f42 <xTaskCheckForTimeOut+0xb2>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	f000 fe93 	bl	8005c6c <vPortExitCritical>
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000e68 	.word	0x20000e68
 8004f54:	20000e7c 	.word	0x20000e7c

08004f58 <vTaskMissedYield>:
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4b03      	ldr	r3, [pc, #12]	@ (8004f6c <vTaskMissedYield+0x14>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	20000e78 	.word	0x20000e78

08004f70 <prvIdleTask>:
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	f000 f852 	bl	8005020 <prvCheckTasksWaitingTermination>
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <prvIdleTask+0x28>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d9f9      	bls.n	8004f78 <prvIdleTask+0x8>
 8004f84:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <prvIdleTask+0x2c>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	e7f0      	b.n	8004f78 <prvIdleTask+0x8>
 8004f96:	bf00      	nop
 8004f98:	20000994 	.word	0x20000994
 8004f9c:	e000ed04 	.word	0xe000ed04

08004fa0 <prvInitialiseTaskLists>:
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	e00c      	b.n	8004fc6 <prvInitialiseTaskLists+0x26>
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <prvInitialiseTaskLists+0x60>)
 8004fb8:	4413      	add	r3, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fcae 	bl	800391c <vListInitialise>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b37      	cmp	r3, #55	@ 0x37
 8004fca:	d9ef      	bls.n	8004fac <prvInitialiseTaskLists+0xc>
 8004fcc:	480d      	ldr	r0, [pc, #52]	@ (8005004 <prvInitialiseTaskLists+0x64>)
 8004fce:	f7fe fca5 	bl	800391c <vListInitialise>
 8004fd2:	480d      	ldr	r0, [pc, #52]	@ (8005008 <prvInitialiseTaskLists+0x68>)
 8004fd4:	f7fe fca2 	bl	800391c <vListInitialise>
 8004fd8:	480c      	ldr	r0, [pc, #48]	@ (800500c <prvInitialiseTaskLists+0x6c>)
 8004fda:	f7fe fc9f 	bl	800391c <vListInitialise>
 8004fde:	480c      	ldr	r0, [pc, #48]	@ (8005010 <prvInitialiseTaskLists+0x70>)
 8004fe0:	f7fe fc9c 	bl	800391c <vListInitialise>
 8004fe4:	480b      	ldr	r0, [pc, #44]	@ (8005014 <prvInitialiseTaskLists+0x74>)
 8004fe6:	f7fe fc99 	bl	800391c <vListInitialise>
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <prvInitialiseTaskLists+0x78>)
 8004fec:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <prvInitialiseTaskLists+0x64>)
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <prvInitialiseTaskLists+0x7c>)
 8004ff2:	4a05      	ldr	r2, [pc, #20]	@ (8005008 <prvInitialiseTaskLists+0x68>)
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000994 	.word	0x20000994
 8005004:	20000df4 	.word	0x20000df4
 8005008:	20000e08 	.word	0x20000e08
 800500c:	20000e24 	.word	0x20000e24
 8005010:	20000e38 	.word	0x20000e38
 8005014:	20000e50 	.word	0x20000e50
 8005018:	20000e1c 	.word	0x20000e1c
 800501c:	20000e20 	.word	0x20000e20

08005020 <prvCheckTasksWaitingTermination>:
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	e019      	b.n	800505c <prvCheckTasksWaitingTermination+0x3c>
 8005028:	f000 fdee 	bl	8005c08 <vPortEnterCritical>
 800502c:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <prvCheckTasksWaitingTermination+0x50>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fcf9 	bl	8003a30 <uxListRemove>
 800503e:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <prvCheckTasksWaitingTermination+0x54>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3b01      	subs	r3, #1
 8005044:	4a0b      	ldr	r2, [pc, #44]	@ (8005074 <prvCheckTasksWaitingTermination+0x54>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <prvCheckTasksWaitingTermination+0x58>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3b01      	subs	r3, #1
 800504e:	4a0a      	ldr	r2, [pc, #40]	@ (8005078 <prvCheckTasksWaitingTermination+0x58>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	f000 fe0b 	bl	8005c6c <vPortExitCritical>
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f810 	bl	800507c <prvDeleteTCB>
 800505c:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <prvCheckTasksWaitingTermination+0x58>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e1      	bne.n	8005028 <prvCheckTasksWaitingTermination+0x8>
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000e38 	.word	0x20000e38
 8005074:	20000e64 	.word	0x20000e64
 8005078:	20000e4c 	.word	0x20000e4c

0800507c <prvDeleteTCB>:
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3354      	adds	r3, #84	@ 0x54
 8005088:	4618      	mov	r0, r3
 800508a:	f001 f909 	bl	80062a0 <_reclaim_reent>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <prvDeleteTCB+0x2e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	4618      	mov	r0, r3
 800509e:	f000 ffa3 	bl	8005fe8 <vPortFree>
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 ffa0 	bl	8005fe8 <vPortFree>
 80050a8:	e019      	b.n	80050de <prvDeleteTCB+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d103      	bne.n	80050bc <prvDeleteTCB+0x40>
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 ff97 	bl	8005fe8 <vPortFree>
 80050ba:	e010      	b.n	80050de <prvDeleteTCB+0x62>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d00b      	beq.n	80050de <prvDeleteTCB+0x62>
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <prvDeleteTCB+0x5e>
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <prvResetNextTaskUnblockTime>:
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <prvResetNextTaskUnblockTime+0x38>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <prvResetNextTaskUnblockTime+0x1a>
 80050f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <prvResetNextTaskUnblockTime+0x3c>)
 80050fa:	f04f 32ff 	mov.w	r2, #4294967295
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e008      	b.n	8005114 <prvResetNextTaskUnblockTime+0x2c>
 8005102:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <prvResetNextTaskUnblockTime+0x38>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <prvResetNextTaskUnblockTime+0x3c>)
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000e1c 	.word	0x20000e1c
 8005124:	20000e84 	.word	0x20000e84

08005128 <xTaskGetSchedulerState>:
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <xTaskGetSchedulerState+0x34>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <xTaskGetSchedulerState+0x14>
 8005136:	2301      	movs	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	e008      	b.n	800514e <xTaskGetSchedulerState+0x26>
 800513c:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <xTaskGetSchedulerState+0x38>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <xTaskGetSchedulerState+0x22>
 8005144:	2302      	movs	r3, #2
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	e001      	b.n	800514e <xTaskGetSchedulerState+0x26>
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000e70 	.word	0x20000e70
 8005160:	20000e8c 	.word	0x20000e8c

08005164 <xTaskPriorityDisinherit>:
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d058      	beq.n	800522c <xTaskPriorityDisinherit+0xc8>
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <xTaskPriorityDisinherit+0xd4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	429a      	cmp	r2, r3
 8005182:	d00b      	beq.n	800519c <xTaskPriorityDisinherit+0x38>
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <xTaskPriorityDisinherit+0x34>
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <xTaskPriorityDisinherit+0x58>
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xTaskPriorityDisinherit+0x54>
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c0:	1e5a      	subs	r2, r3, #1
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d02c      	beq.n	800522c <xTaskPriorityDisinherit+0xc8>
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d128      	bne.n	800522c <xTaskPriorityDisinherit+0xc8>
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3304      	adds	r3, #4
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fc26 	bl	8003a30 <uxListRemove>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fc:	4b0f      	ldr	r3, [pc, #60]	@ (800523c <xTaskPriorityDisinherit+0xd8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <xTaskPriorityDisinherit+0xa8>
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	4a0c      	ldr	r2, [pc, #48]	@ (800523c <xTaskPriorityDisinherit+0xd8>)
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <xTaskPriorityDisinherit+0xdc>)
 800521a:	441a      	add	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7fe fba7 	bl	8003976 <vListInsertEnd>
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000990 	.word	0x20000990
 800523c:	20000e6c 	.word	0x20000e6c
 8005240:	20000994 	.word	0x20000994

08005244 <prvAddCurrentTaskToDelayedList>:
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
 800524e:	4b21      	ldr	r3, [pc, #132]	@ (80052d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	4b20      	ldr	r3, [pc, #128]	@ (80052d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3304      	adds	r3, #4
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fbe8 	bl	8003a30 <uxListRemove>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d10a      	bne.n	800527e <prvAddCurrentTaskToDelayedList+0x3a>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <prvAddCurrentTaskToDelayedList+0x3a>
 800526e:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4819      	ldr	r0, [pc, #100]	@ (80052dc <prvAddCurrentTaskToDelayedList+0x98>)
 8005278:	f7fe fb7d 	bl	8003976 <vListInsertEnd>
 800527c:	e026      	b.n	80052cc <prvAddCurrentTaskToDelayedList+0x88>
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	4b14      	ldr	r3, [pc, #80]	@ (80052d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	429a      	cmp	r2, r3
 8005294:	d209      	bcs.n	80052aa <prvAddCurrentTaskToDelayedList+0x66>
 8005296:	4b12      	ldr	r3, [pc, #72]	@ (80052e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b0f      	ldr	r3, [pc, #60]	@ (80052d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe fb8b 	bl	80039be <vListInsert>
 80052a8:	e010      	b.n	80052cc <prvAddCurrentTaskToDelayedList+0x88>
 80052aa:	4b0e      	ldr	r3, [pc, #56]	@ (80052e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7fe fb81 	bl	80039be <vListInsert>
 80052bc:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d202      	bcs.n	80052cc <prvAddCurrentTaskToDelayedList+0x88>
 80052c6:	4a08      	ldr	r2, [pc, #32]	@ (80052e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000e68 	.word	0x20000e68
 80052d8:	20000990 	.word	0x20000990
 80052dc:	20000e50 	.word	0x20000e50
 80052e0:	20000e20 	.word	0x20000e20
 80052e4:	20000e1c 	.word	0x20000e1c
 80052e8:	20000e84 	.word	0x20000e84

080052ec <xTimerCreateTimerTask>:
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af04      	add	r7, sp, #16
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	f000 fb13 	bl	8005920 <prvCheckForValidListAndQueue>
 80052fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <xTimerCreateTimerTask+0x84>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d021      	beq.n	8005346 <xTimerCreateTimerTask+0x5a>
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	1d3a      	adds	r2, r7, #4
 800530c:	f107 0108 	add.w	r1, r7, #8
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fae7 	bl	80038e8 <vApplicationGetTimerTaskMemory>
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	9202      	str	r2, [sp, #8]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	2302      	movs	r3, #2
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	460a      	mov	r2, r1
 800532c:	4911      	ldr	r1, [pc, #68]	@ (8005374 <xTimerCreateTimerTask+0x88>)
 800532e:	4812      	ldr	r0, [pc, #72]	@ (8005378 <xTimerCreateTimerTask+0x8c>)
 8005330:	f7ff f8a2 	bl	8004478 <xTaskCreateStatic>
 8005334:	4603      	mov	r3, r0
 8005336:	4a11      	ldr	r2, [pc, #68]	@ (800537c <xTimerCreateTimerTask+0x90>)
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b10      	ldr	r3, [pc, #64]	@ (800537c <xTimerCreateTimerTask+0x90>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <xTimerCreateTimerTask+0x5a>
 8005342:	2301      	movs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10b      	bne.n	8005364 <xTimerCreateTimerTask+0x78>
 800534c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	bf00      	nop
 8005360:	bf00      	nop
 8005362:	e7fd      	b.n	8005360 <xTimerCreateTimerTask+0x74>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000ec0 	.word	0x20000ec0
 8005374:	08006ce0 	.word	0x08006ce0
 8005378:	080054b9 	.word	0x080054b9
 800537c:	20000ec4 	.word	0x20000ec4

08005380 <xTimerGenericCommand>:
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	@ 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <xTimerGenericCommand+0x30>
 8005398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <xTimerGenericCommand+0x2c>
 80053b0:	4b19      	ldr	r3, [pc, #100]	@ (8005418 <xTimerGenericCommand+0x98>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02a      	beq.n	800540e <xTimerGenericCommand+0x8e>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	dc18      	bgt.n	80053fc <xTimerGenericCommand+0x7c>
 80053ca:	f7ff fead 	bl	8005128 <xTaskGetSchedulerState>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d109      	bne.n	80053e8 <xTimerGenericCommand+0x68>
 80053d4:	4b10      	ldr	r3, [pc, #64]	@ (8005418 <xTimerGenericCommand+0x98>)
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	f107 0110 	add.w	r1, r7, #16
 80053dc:	2300      	movs	r3, #0
 80053de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e0:	f7fe fc5a 	bl	8003c98 <xQueueGenericSend>
 80053e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80053e6:	e012      	b.n	800540e <xTimerGenericCommand+0x8e>
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <xTimerGenericCommand+0x98>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	f107 0110 	add.w	r1, r7, #16
 80053f0:	2300      	movs	r3, #0
 80053f2:	2200      	movs	r2, #0
 80053f4:	f7fe fc50 	bl	8003c98 <xQueueGenericSend>
 80053f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80053fa:	e008      	b.n	800540e <xTimerGenericCommand+0x8e>
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <xTimerGenericCommand+0x98>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	f107 0110 	add.w	r1, r7, #16
 8005404:	2300      	movs	r3, #0
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	f7fe fd48 	bl	8003e9c <xQueueGenericSendFromISR>
 800540c:	6278      	str	r0, [r7, #36]	@ 0x24
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	4618      	mov	r0, r3
 8005412:	3728      	adds	r7, #40	@ 0x28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000ec0 	.word	0x20000ec0

0800541c <prvProcessExpiredTimer>:
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	4b23      	ldr	r3, [pc, #140]	@ (80054b4 <prvProcessExpiredTimer+0x98>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3304      	adds	r3, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe fafb 	bl	8003a30 <uxListRemove>
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d023      	beq.n	8005490 <prvProcessExpiredTimer+0x74>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	18d1      	adds	r1, r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	6978      	ldr	r0, [r7, #20]
 8005456:	f000 f8d5 	bl	8005604 <prvInsertTimerInActiveList>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <prvProcessExpiredTimer+0x86>
 8005460:	2300      	movs	r3, #0
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2300      	movs	r3, #0
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	2100      	movs	r1, #0
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7ff ff88 	bl	8005380 <xTimerGenericCommand>
 8005470:	6138      	str	r0, [r7, #16]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d114      	bne.n	80054a2 <prvProcessExpiredTimer+0x86>
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <prvProcessExpiredTimer+0x70>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	6978      	ldr	r0, [r7, #20]
 80054a8:	4798      	blx	r3
 80054aa:	bf00      	nop
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000eb8 	.word	0x20000eb8

080054b8 <prvTimerTask>:
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	f107 0308 	add.w	r3, r7, #8
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 f859 	bl	800557c <prvGetNextExpireTime>
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4619      	mov	r1, r3
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f805 	bl	80054e0 <prvProcessTimerOrBlockTask>
 80054d6:	f000 f8d7 	bl	8005688 <prvProcessReceivedCommands>
 80054da:	bf00      	nop
 80054dc:	e7f0      	b.n	80054c0 <prvTimerTask+0x8>
	...

080054e0 <prvProcessTimerOrBlockTask>:
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
 80054ea:	f7ff fa29 	bl	8004940 <vTaskSuspendAll>
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f866 	bl	80055c4 <prvSampleTimeNow>
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d130      	bne.n	8005562 <prvProcessTimerOrBlockTask+0x82>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <prvProcessTimerOrBlockTask+0x3c>
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	429a      	cmp	r2, r3
 800550c:	d806      	bhi.n	800551c <prvProcessTimerOrBlockTask+0x3c>
 800550e:	f7ff fa25 	bl	800495c <xTaskResumeAll>
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff ff81 	bl	800541c <prvProcessExpiredTimer>
 800551a:	e024      	b.n	8005566 <prvProcessTimerOrBlockTask+0x86>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d008      	beq.n	8005534 <prvProcessTimerOrBlockTask+0x54>
 8005522:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <prvProcessTimerOrBlockTask+0x90>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <prvProcessTimerOrBlockTask+0x50>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <prvProcessTimerOrBlockTask+0x52>
 8005530:	2300      	movs	r3, #0
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <prvProcessTimerOrBlockTask+0x94>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	f7fe ff65 	bl	8004410 <vQueueWaitForMessageRestricted>
 8005546:	f7ff fa09 	bl	800495c <xTaskResumeAll>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <prvProcessTimerOrBlockTask+0x86>
 8005550:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <prvProcessTimerOrBlockTask+0x98>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	e001      	b.n	8005566 <prvProcessTimerOrBlockTask+0x86>
 8005562:	f7ff f9fb 	bl	800495c <xTaskResumeAll>
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000ebc 	.word	0x20000ebc
 8005574:	20000ec0 	.word	0x20000ec0
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <prvGetNextExpireTime>:
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	4b0e      	ldr	r3, [pc, #56]	@ (80055c0 <prvGetNextExpireTime+0x44>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <prvGetNextExpireTime+0x16>
 800558e:	2201      	movs	r2, #1
 8005590:	e000      	b.n	8005594 <prvGetNextExpireTime+0x18>
 8005592:	2200      	movs	r2, #0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <prvGetNextExpireTime+0x30>
 80055a0:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <prvGetNextExpireTime+0x44>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e001      	b.n	80055b0 <prvGetNextExpireTime+0x34>
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000eb8 	.word	0x20000eb8

080055c4 <prvSampleTimeNow>:
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	f7ff fa64 	bl	8004a98 <xTaskGetTickCount>
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <prvSampleTimeNow+0x3c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d205      	bcs.n	80055e8 <prvSampleTimeNow+0x24>
 80055dc:	f000 f93a 	bl	8005854 <prvSwitchTimerLists>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e002      	b.n	80055ee <prvSampleTimeNow+0x2a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	4a04      	ldr	r2, [pc, #16]	@ (8005600 <prvSampleTimeNow+0x3c>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000ec8 	.word	0x20000ec8

08005604 <prvInsertTimerInActiveList>:
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	611a      	str	r2, [r3, #16]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d812      	bhi.n	8005650 <prvInsertTimerInActiveList+0x4c>
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <prvInsertTimerInActiveList+0x3a>
 8005638:	2301      	movs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e01b      	b.n	8005676 <prvInsertTimerInActiveList+0x72>
 800563e:	4b10      	ldr	r3, [pc, #64]	@ (8005680 <prvInsertTimerInActiveList+0x7c>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f7fe f9b8 	bl	80039be <vListInsert>
 800564e:	e012      	b.n	8005676 <prvInsertTimerInActiveList+0x72>
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d206      	bcs.n	8005666 <prvInsertTimerInActiveList+0x62>
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <prvInsertTimerInActiveList+0x62>
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e007      	b.n	8005676 <prvInsertTimerInActiveList+0x72>
 8005666:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <prvInsertTimerInActiveList+0x80>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7fe f9a4 	bl	80039be <vListInsert>
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000ebc 	.word	0x20000ebc
 8005684:	20000eb8 	.word	0x20000eb8

08005688 <prvProcessReceivedCommands>:
 8005688:	b580      	push	{r7, lr}
 800568a:	b08e      	sub	sp, #56	@ 0x38
 800568c:	af02      	add	r7, sp, #8
 800568e:	e0ce      	b.n	800582e <prvProcessReceivedCommands+0x1a6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da19      	bge.n	80056ca <prvProcessReceivedCommands+0x42>
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	3304      	adds	r3, #4
 800569a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <prvProcessReceivedCommands+0x32>
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <prvProcessReceivedCommands+0x2e>
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c0:	6850      	ldr	r0, [r2, #4]
 80056c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c4:	6892      	ldr	r2, [r2, #8]
 80056c6:	4611      	mov	r1, r2
 80056c8:	4798      	blx	r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f2c0 80ae 	blt.w	800582e <prvProcessReceivedCommands+0x1a6>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <prvProcessReceivedCommands+0x60>
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe f9a4 	bl	8003a30 <uxListRemove>
 80056e8:	463b      	mov	r3, r7
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ff6a 	bl	80055c4 <prvSampleTimeNow>
 80056f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b09      	cmp	r3, #9
 80056f6:	f200 8097 	bhi.w	8005828 <prvProcessReceivedCommands+0x1a0>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <prvProcessReceivedCommands+0x78>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005729 	.word	0x08005729
 8005704:	08005729 	.word	0x08005729
 8005708:	08005729 	.word	0x08005729
 800570c:	0800579f 	.word	0x0800579f
 8005710:	080057b3 	.word	0x080057b3
 8005714:	080057ff 	.word	0x080057ff
 8005718:	08005729 	.word	0x08005729
 800571c:	08005729 	.word	0x08005729
 8005720:	0800579f 	.word	0x0800579f
 8005724:	080057b3 	.word	0x080057b3
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	b2da      	uxtb	r2, r3
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	18d1      	adds	r1, r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005748:	f7ff ff5c 	bl	8005604 <prvInsertTimerInActiveList>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d06c      	beq.n	800582c <prvProcessReceivedCommands+0x1a4>
 8005752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005758:	4798      	blx	r3
 800575a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d061      	beq.n	800582c <prvProcessReceivedCommands+0x1a4>
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	441a      	add	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	2300      	movs	r3, #0
 8005776:	2100      	movs	r1, #0
 8005778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800577a:	f7ff fe01 	bl	8005380 <xTimerGenericCommand>
 800577e:	6238      	str	r0, [r7, #32]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d152      	bne.n	800582c <prvProcessReceivedCommands+0x1a4>
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <prvProcessReceivedCommands+0x112>
 800579e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80057b0:	e03d      	b.n	800582e <prvProcessReceivedCommands+0x1a6>
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c8:	619a      	str	r2, [r3, #24]
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10b      	bne.n	80057ea <prvProcessReceivedCommands+0x162>
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <prvProcessReceivedCommands+0x15e>
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	18d1      	adds	r1, r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f8:	f7ff ff04 	bl	8005604 <prvInsertTimerInActiveList>
 80057fc:	e017      	b.n	800582e <prvProcessReceivedCommands+0x1a6>
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <prvProcessReceivedCommands+0x18c>
 800580c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800580e:	f000 fbeb 	bl	8005fe8 <vPortFree>
 8005812:	e00c      	b.n	800582e <prvProcessReceivedCommands+0x1a6>
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	b2da      	uxtb	r2, r3
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8005826:	e002      	b.n	800582e <prvProcessReceivedCommands+0x1a6>
 8005828:	bf00      	nop
 800582a:	e000      	b.n	800582e <prvProcessReceivedCommands+0x1a6>
 800582c:	bf00      	nop
 800582e:	4b08      	ldr	r3, [pc, #32]	@ (8005850 <prvProcessReceivedCommands+0x1c8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	1d39      	adds	r1, r7, #4
 8005834:	2200      	movs	r2, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe fbce 	bl	8003fd8 <xQueueReceive>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f47f af26 	bne.w	8005690 <prvProcessReceivedCommands+0x8>
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	3730      	adds	r7, #48	@ 0x30
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000ec0 	.word	0x20000ec0

08005854 <prvSwitchTimerLists>:
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af02      	add	r7, sp, #8
 800585a:	e049      	b.n	80058f0 <prvSwitchTimerLists+0x9c>
 800585c:	4b2e      	ldr	r3, [pc, #184]	@ (8005918 <prvSwitchTimerLists+0xc4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	4b2c      	ldr	r3, [pc, #176]	@ (8005918 <prvSwitchTimerLists+0xc4>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe f8db 	bl	8003a30 <uxListRemove>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	4798      	blx	r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02f      	beq.n	80058f0 <prvSwitchTimerLists+0x9c>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d90e      	bls.n	80058c0 <prvSwitchTimerLists+0x6c>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	605a      	str	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005918 <prvSwitchTimerLists+0xc4>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f7fe f880 	bl	80039be <vListInsert>
 80058be:	e017      	b.n	80058f0 <prvSwitchTimerLists+0x9c>
 80058c0:	2300      	movs	r3, #0
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	2100      	movs	r1, #0
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff fd58 	bl	8005380 <xTimerGenericCommand>
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <prvSwitchTimerLists+0x9c>
 80058d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	bf00      	nop
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <prvSwitchTimerLists+0x98>
 80058f0:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <prvSwitchTimerLists+0xc4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1b0      	bne.n	800585c <prvSwitchTimerLists+0x8>
 80058fa:	4b07      	ldr	r3, [pc, #28]	@ (8005918 <prvSwitchTimerLists+0xc4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <prvSwitchTimerLists+0xc8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a04      	ldr	r2, [pc, #16]	@ (8005918 <prvSwitchTimerLists+0xc4>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	4a04      	ldr	r2, [pc, #16]	@ (800591c <prvSwitchTimerLists+0xc8>)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000eb8 	.word	0x20000eb8
 800591c:	20000ebc 	.word	0x20000ebc

08005920 <prvCheckForValidListAndQueue>:
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af02      	add	r7, sp, #8
 8005926:	f000 f96f 	bl	8005c08 <vPortEnterCritical>
 800592a:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <prvCheckForValidListAndQueue+0x60>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d120      	bne.n	8005974 <prvCheckForValidListAndQueue+0x54>
 8005932:	4814      	ldr	r0, [pc, #80]	@ (8005984 <prvCheckForValidListAndQueue+0x64>)
 8005934:	f7fd fff2 	bl	800391c <vListInitialise>
 8005938:	4813      	ldr	r0, [pc, #76]	@ (8005988 <prvCheckForValidListAndQueue+0x68>)
 800593a:	f7fd ffef 	bl	800391c <vListInitialise>
 800593e:	4b13      	ldr	r3, [pc, #76]	@ (800598c <prvCheckForValidListAndQueue+0x6c>)
 8005940:	4a10      	ldr	r2, [pc, #64]	@ (8005984 <prvCheckForValidListAndQueue+0x64>)
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	4b12      	ldr	r3, [pc, #72]	@ (8005990 <prvCheckForValidListAndQueue+0x70>)
 8005946:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <prvCheckForValidListAndQueue+0x68>)
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <prvCheckForValidListAndQueue+0x74>)
 8005950:	4a11      	ldr	r2, [pc, #68]	@ (8005998 <prvCheckForValidListAndQueue+0x78>)
 8005952:	2110      	movs	r1, #16
 8005954:	200a      	movs	r0, #10
 8005956:	f7fe f8ff 	bl	8003b58 <xQueueGenericCreateStatic>
 800595a:	4603      	mov	r3, r0
 800595c:	4a08      	ldr	r2, [pc, #32]	@ (8005980 <prvCheckForValidListAndQueue+0x60>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <prvCheckForValidListAndQueue+0x60>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <prvCheckForValidListAndQueue+0x54>
 8005968:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <prvCheckForValidListAndQueue+0x60>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	490b      	ldr	r1, [pc, #44]	@ (800599c <prvCheckForValidListAndQueue+0x7c>)
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fd24 	bl	80043bc <vQueueAddToRegistry>
 8005974:	f000 f97a 	bl	8005c6c <vPortExitCritical>
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000ec0 	.word	0x20000ec0
 8005984:	20000e90 	.word	0x20000e90
 8005988:	20000ea4 	.word	0x20000ea4
 800598c:	20000eb8 	.word	0x20000eb8
 8005990:	20000ebc 	.word	0x20000ebc
 8005994:	20000f6c 	.word	0x20000f6c
 8005998:	20000ecc 	.word	0x20000ecc
 800599c:	08006ce8 	.word	0x08006ce8

080059a0 <pxPortInitialiseStack>:
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3b04      	subs	r3, #4
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3b04      	subs	r3, #4
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3b04      	subs	r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a04 <pxPortInitialiseStack+0x64>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3b14      	subs	r3, #20
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3b04      	subs	r3, #4
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f06f 0202 	mvn.w	r2, #2
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3b20      	subs	r3, #32
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	08005a09 	.word	0x08005a09

08005a08 <prvTaskExitError>:
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <prvTaskExitError+0x58>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1a:	d00b      	beq.n	8005a34 <prvTaskExitError+0x2c>
 8005a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	e7fd      	b.n	8005a30 <prvTaskExitError+0x28>
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0fc      	beq.n	8005a4a <prvTaskExitError+0x42>
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000058 	.word	0x20000058
	...

08005a70 <SVC_Handler>:
 8005a70:	4b07      	ldr	r3, [pc, #28]	@ (8005a90 <pxCurrentTCBConst2>)
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	6808      	ldr	r0, [r1, #0]
 8005a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	f380 8809 	msr	PSP, r0
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8811 	msr	BASEPRI, r0
 8005a8a:	4770      	bx	lr
 8005a8c:	f3af 8000 	nop.w

08005a90 <pxCurrentTCBConst2>:
 8005a90:	20000990 	.word	0x20000990
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop

08005a98 <prvPortStartFirstTask>:
 8005a98:	4808      	ldr	r0, [pc, #32]	@ (8005abc <prvPortStartFirstTask+0x24>)
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	f380 8808 	msr	MSP, r0
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8814 	msr	CONTROL, r0
 8005aaa:	b662      	cpsie	i
 8005aac:	b661      	cpsie	f
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	df00      	svc	0
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e000ed08 	.word	0xe000ed08

08005ac0 <xPortStartScheduler>:
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4b47      	ldr	r3, [pc, #284]	@ (8005be4 <xPortStartScheduler+0x124>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a47      	ldr	r2, [pc, #284]	@ (8005be8 <xPortStartScheduler+0x128>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10b      	bne.n	8005ae8 <xPortStartScheduler+0x28>
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xPortStartScheduler+0x24>
 8005ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8005be4 <xPortStartScheduler+0x124>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3f      	ldr	r2, [pc, #252]	@ (8005bec <xPortStartScheduler+0x12c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10b      	bne.n	8005b0a <xPortStartScheduler+0x4a>
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	e7fd      	b.n	8005b06 <xPortStartScheduler+0x46>
 8005b0a:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <xPortStartScheduler+0x130>)
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	22ff      	movs	r2, #255	@ 0xff
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	70fb      	strb	r3, [r7, #3]
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <xPortStartScheduler+0x134>)
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b34:	2207      	movs	r2, #7
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e009      	b.n	8005b4e <xPortStartScheduler+0x8e>
 8005b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	70fb      	strb	r3, [r7, #3]
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b56:	2b80      	cmp	r3, #128	@ 0x80
 8005b58:	d0ef      	beq.n	8005b3a <xPortStartScheduler+0x7a>
 8005b5a:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1c3 0307 	rsb	r3, r3, #7
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d00b      	beq.n	8005b7e <xPortStartScheduler+0xbe>
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	e7fd      	b.n	8005b7a <xPortStartScheduler+0xba>
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b90:	4a19      	ldr	r2, [pc, #100]	@ (8005bf8 <xPortStartScheduler+0x138>)
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	4b17      	ldr	r3, [pc, #92]	@ (8005bfc <xPortStartScheduler+0x13c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a16      	ldr	r2, [pc, #88]	@ (8005bfc <xPortStartScheduler+0x13c>)
 8005ba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <xPortStartScheduler+0x13c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a13      	ldr	r2, [pc, #76]	@ (8005bfc <xPortStartScheduler+0x13c>)
 8005bae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	f000 f8da 	bl	8005d6c <vPortSetupTimerInterrupt>
 8005bb8:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <xPortStartScheduler+0x140>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f000 f8f9 	bl	8005db4 <vPortEnableVFP>
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <xPortStartScheduler+0x144>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005c04 <xPortStartScheduler+0x144>)
 8005bc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	f7ff ff63 	bl	8005a98 <prvPortStartFirstTask>
 8005bd2:	f7ff f82b 	bl	8004c2c <vTaskSwitchContext>
 8005bd6:	f7ff ff17 	bl	8005a08 <prvTaskExitError>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	e000ed00 	.word	0xe000ed00
 8005be8:	410fc271 	.word	0x410fc271
 8005bec:	410fc270 	.word	0x410fc270
 8005bf0:	e000e400 	.word	0xe000e400
 8005bf4:	20000fbc 	.word	0x20000fbc
 8005bf8:	20000fc0 	.word	0x20000fc0
 8005bfc:	e000ed20 	.word	0xe000ed20
 8005c00:	20000058 	.word	0x20000058
 8005c04:	e000ef34 	.word	0xe000ef34

08005c08 <vPortEnterCritical>:
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	607b      	str	r3, [r7, #4]
 8005c20:	bf00      	nop
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <vPortEnterCritical+0x5c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a0e      	ldr	r2, [pc, #56]	@ (8005c64 <vPortEnterCritical+0x5c>)
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <vPortEnterCritical+0x5c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d110      	bne.n	8005c56 <vPortEnterCritical+0x4e>
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <vPortEnterCritical+0x60>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <vPortEnterCritical+0x4e>
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <vPortEnterCritical+0x4a>
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000058 	.word	0x20000058
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <vPortExitCritical>:
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4b12      	ldr	r3, [pc, #72]	@ (8005cbc <vPortExitCritical+0x50>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <vPortExitCritical+0x26>
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	607b      	str	r3, [r7, #4]
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <vPortExitCritical+0x22>
 8005c92:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <vPortExitCritical+0x50>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <vPortExitCritical+0x50>)
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	4b07      	ldr	r3, [pc, #28]	@ (8005cbc <vPortExitCritical+0x50>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d105      	bne.n	8005cb0 <vPortExitCritical+0x44>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20000058 	.word	0x20000058

08005cc0 <PendSV_Handler>:
 8005cc0:	f3ef 8009 	mrs	r0, PSP
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <pxCurrentTCBConst>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	f01e 0f10 	tst.w	lr, #16
 8005cd0:	bf08      	it	eq
 8005cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ce4:	f380 8811 	msr	BASEPRI, r0
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f7fe ff9c 	bl	8004c2c <vTaskSwitchContext>
 8005cf4:	f04f 0000 	mov.w	r0, #0
 8005cf8:	f380 8811 	msr	BASEPRI, r0
 8005cfc:	bc09      	pop	{r0, r3}
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d06:	f01e 0f10 	tst.w	lr, #16
 8005d0a:	bf08      	it	eq
 8005d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d10:	f380 8809 	msr	PSP, r0
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst>:
 8005d20:	20000990 	.word	0x20000990
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <xPortSysTickHandler>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	bf00      	nop
 8005d42:	f7fe feb9 	bl	8004ab8 <xTaskIncrementTick>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <xPortSysTickHandler+0x2c>
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <xPortSysTickHandler+0x40>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	2300      	movs	r3, #0
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <vPortSetupTimerInterrupt>:
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <vPortSetupTimerInterrupt+0x38>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <vPortSetupTimerInterrupt+0x3c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a0a      	ldr	r2, [pc, #40]	@ (8005dac <vPortSetupTimerInterrupt+0x40>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	4a09      	ldr	r2, [pc, #36]	@ (8005db0 <vPortSetupTimerInterrupt+0x44>)
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <vPortSetupTimerInterrupt+0x34>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	e000e010 	.word	0xe000e010
 8005da4:	e000e018 	.word	0xe000e018
 8005da8:	2000004c 	.word	0x2000004c
 8005dac:	10624dd3 	.word	0x10624dd3
 8005db0:	e000e014 	.word	0xe000e014

08005db4 <vPortEnableVFP>:
 8005db4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005dc4 <vPortEnableVFP+0x10>
 8005db8:	6801      	ldr	r1, [r0, #0]
 8005dba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005dbe:	6001      	str	r1, [r0, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	e000ed88 	.word	0xe000ed88

08005dc8 <vPortValidateInterruptPriority>:
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	f3ef 8305 	mrs	r3, IPSR
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d915      	bls.n	8005e06 <vPortValidateInterruptPriority+0x3e>
 8005dda:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <vPortValidateInterruptPriority+0x74>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	72fb      	strb	r3, [r7, #11]
 8005de4:	4b16      	ldr	r3, [pc, #88]	@ (8005e40 <vPortValidateInterruptPriority+0x78>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	7afa      	ldrb	r2, [r7, #11]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d20b      	bcs.n	8005e06 <vPortValidateInterruptPriority+0x3e>
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <vPortValidateInterruptPriority+0x3a>
 8005e06:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <vPortValidateInterruptPriority+0x7c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e48 <vPortValidateInterruptPriority+0x80>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d90b      	bls.n	8005e2e <vPortValidateInterruptPriority+0x66>
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <vPortValidateInterruptPriority+0x62>
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	e000e3f0 	.word	0xe000e3f0
 8005e40:	20000fbc 	.word	0x20000fbc
 8005e44:	e000ed0c 	.word	0xe000ed0c
 8005e48:	20000fc0 	.word	0x20000fc0

08005e4c <pvPortMalloc>:
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	@ 0x28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	2300      	movs	r3, #0
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	f7fe fd72 	bl	8004940 <vTaskSuspendAll>
 8005e5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd0 <pvPortMalloc+0x184>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <pvPortMalloc+0x1c>
 8005e64:	f000 f924 	bl	80060b0 <prvHeapInit>
 8005e68:	4b5a      	ldr	r3, [pc, #360]	@ (8005fd4 <pvPortMalloc+0x188>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8095 	bne.w	8005fa0 <pvPortMalloc+0x154>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01e      	beq.n	8005eba <pvPortMalloc+0x6e>
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4413      	add	r3, r2
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d015      	beq.n	8005eba <pvPortMalloc+0x6e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f023 0307 	bic.w	r3, r3, #7
 8005e94:	3308      	adds	r3, #8
 8005e96:	607b      	str	r3, [r7, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <pvPortMalloc+0x6e>
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <pvPortMalloc+0x6a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d06f      	beq.n	8005fa0 <pvPortMalloc+0x154>
 8005ec0:	4b45      	ldr	r3, [pc, #276]	@ (8005fd8 <pvPortMalloc+0x18c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d86a      	bhi.n	8005fa0 <pvPortMalloc+0x154>
 8005eca:	4b44      	ldr	r3, [pc, #272]	@ (8005fdc <pvPortMalloc+0x190>)
 8005ecc:	623b      	str	r3, [r7, #32]
 8005ece:	4b43      	ldr	r3, [pc, #268]	@ (8005fdc <pvPortMalloc+0x190>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed4:	e004      	b.n	8005ee0 <pvPortMalloc+0x94>
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	623b      	str	r3, [r7, #32]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d903      	bls.n	8005ef2 <pvPortMalloc+0xa6>
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f1      	bne.n	8005ed6 <pvPortMalloc+0x8a>
 8005ef2:	4b37      	ldr	r3, [pc, #220]	@ (8005fd0 <pvPortMalloc+0x184>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d051      	beq.n	8005fa0 <pvPortMalloc+0x154>
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	4413      	add	r3, r2
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	2308      	movs	r3, #8
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d920      	bls.n	8005f60 <pvPortMalloc+0x114>
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4413      	add	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <pvPortMalloc+0xfc>
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	bf00      	nop
 8005f44:	bf00      	nop
 8005f46:	e7fd      	b.n	8005f44 <pvPortMalloc+0xf8>
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	69b8      	ldr	r0, [r7, #24]
 8005f5c:	f000 f90a 	bl	8006174 <prvInsertBlockIntoFreeList>
 8005f60:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd8 <pvPortMalloc+0x18c>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <pvPortMalloc+0x18c>)
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <pvPortMalloc+0x18c>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe0 <pvPortMalloc+0x194>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d203      	bcs.n	8005f82 <pvPortMalloc+0x136>
 8005f7a:	4b17      	ldr	r3, [pc, #92]	@ (8005fd8 <pvPortMalloc+0x18c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <pvPortMalloc+0x194>)
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <pvPortMalloc+0x188>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	605a      	str	r2, [r3, #4]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	4b13      	ldr	r3, [pc, #76]	@ (8005fe4 <pvPortMalloc+0x198>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	4a11      	ldr	r2, [pc, #68]	@ (8005fe4 <pvPortMalloc+0x198>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	f7fe fcdc 	bl	800495c <xTaskResumeAll>
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <pvPortMalloc+0x17a>
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <pvPortMalloc+0x176>
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3728      	adds	r7, #40	@ 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20004bcc 	.word	0x20004bcc
 8005fd4:	20004be0 	.word	0x20004be0
 8005fd8:	20004bd0 	.word	0x20004bd0
 8005fdc:	20004bc4 	.word	0x20004bc4
 8005fe0:	20004bd4 	.word	0x20004bd4
 8005fe4:	20004bd8 	.word	0x20004bd8

08005fe8 <vPortFree>:
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d04f      	beq.n	800609a <vPortFree+0xb2>
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	4b25      	ldr	r3, [pc, #148]	@ (80060a4 <vPortFree+0xbc>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <vPortFree+0x46>
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <vPortFree+0x42>
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <vPortFree+0x66>
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <vPortFree+0x62>
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4b14      	ldr	r3, [pc, #80]	@ (80060a4 <vPortFree+0xbc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01e      	beq.n	800609a <vPortFree+0xb2>
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11a      	bne.n	800609a <vPortFree+0xb2>
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	4b0e      	ldr	r3, [pc, #56]	@ (80060a4 <vPortFree+0xbc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	43db      	mvns	r3, r3
 800606e:	401a      	ands	r2, r3
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	f7fe fc64 	bl	8004940 <vTaskSuspendAll>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <vPortFree+0xc0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4413      	add	r3, r2
 8006082:	4a09      	ldr	r2, [pc, #36]	@ (80060a8 <vPortFree+0xc0>)
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f000 f874 	bl	8006174 <prvInsertBlockIntoFreeList>
 800608c:	4b07      	ldr	r3, [pc, #28]	@ (80060ac <vPortFree+0xc4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	4a06      	ldr	r2, [pc, #24]	@ (80060ac <vPortFree+0xc4>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	f7fe fc61 	bl	800495c <xTaskResumeAll>
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20004be0 	.word	0x20004be0
 80060a8:	20004bd0 	.word	0x20004bd0
 80060ac:	20004bdc 	.word	0x20004bdc

080060b0 <prvHeapInit>:
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	4b27      	ldr	r3, [pc, #156]	@ (800615c <prvHeapInit+0xac>)
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <prvHeapInit+0x34>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3307      	adds	r3, #7
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	4a1f      	ldr	r2, [pc, #124]	@ (800615c <prvHeapInit+0xac>)
 80060e0:	4413      	add	r3, r2
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <prvHeapInit+0xb0>)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006160 <prvHeapInit+0xb0>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	2208      	movs	r2, #8
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <prvHeapInit+0xb4>)
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <prvHeapInit+0xb4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	605a      	str	r2, [r3, #4]
 800611a:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <prvHeapInit+0xb4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <prvHeapInit+0xb4>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <prvHeapInit+0xb8>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4a09      	ldr	r2, [pc, #36]	@ (800616c <prvHeapInit+0xbc>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <prvHeapInit+0xc0>)
 800614a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	20000fc4 	.word	0x20000fc4
 8006160:	20004bc4 	.word	0x20004bc4
 8006164:	20004bcc 	.word	0x20004bcc
 8006168:	20004bd4 	.word	0x20004bd4
 800616c:	20004bd0 	.word	0x20004bd0
 8006170:	20004be0 	.word	0x20004be0

08006174 <prvInsertBlockIntoFreeList>:
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	4b28      	ldr	r3, [pc, #160]	@ (8006220 <prvInsertBlockIntoFreeList+0xac>)
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e002      	b.n	8006188 <prvInsertBlockIntoFreeList+0x14>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d8f7      	bhi.n	8006182 <prvInsertBlockIntoFreeList+0xe>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4413      	add	r3, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d108      	bne.n	80061b6 <prvInsertBlockIntoFreeList+0x42>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	441a      	add	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d118      	bne.n	80061fc <prvInsertBlockIntoFreeList+0x88>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4b15      	ldr	r3, [pc, #84]	@ (8006224 <prvInsertBlockIntoFreeList+0xb0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d00d      	beq.n	80061f2 <prvInsertBlockIntoFreeList+0x7e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	441a      	add	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e008      	b.n	8006204 <prvInsertBlockIntoFreeList+0x90>
 80061f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <prvInsertBlockIntoFreeList+0xb0>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e003      	b.n	8006204 <prvInsertBlockIntoFreeList+0x90>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d002      	beq.n	8006212 <prvInsertBlockIntoFreeList+0x9e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20004bc4 	.word	0x20004bc4
 8006224:	20004bcc 	.word	0x20004bcc

08006228 <sniprintf>:
 8006228:	b40c      	push	{r2, r3}
 800622a:	b530      	push	{r4, r5, lr}
 800622c:	4b17      	ldr	r3, [pc, #92]	@ (800628c <sniprintf+0x64>)
 800622e:	1e0c      	subs	r4, r1, #0
 8006230:	681d      	ldr	r5, [r3, #0]
 8006232:	b09d      	sub	sp, #116	@ 0x74
 8006234:	da08      	bge.n	8006248 <sniprintf+0x20>
 8006236:	238b      	movs	r3, #139	@ 0x8b
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	b01d      	add	sp, #116	@ 0x74
 8006240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006244:	b002      	add	sp, #8
 8006246:	4770      	bx	lr
 8006248:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800624c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006250:	bf14      	ite	ne
 8006252:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006256:	4623      	moveq	r3, r4
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	9307      	str	r3, [sp, #28]
 800625c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006260:	9002      	str	r0, [sp, #8]
 8006262:	9006      	str	r0, [sp, #24]
 8006264:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006268:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800626a:	ab21      	add	r3, sp, #132	@ 0x84
 800626c:	a902      	add	r1, sp, #8
 800626e:	4628      	mov	r0, r5
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	f000 f9f9 	bl	8006668 <_svfiprintf_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	bfbc      	itt	lt
 800627a:	238b      	movlt	r3, #139	@ 0x8b
 800627c:	602b      	strlt	r3, [r5, #0]
 800627e:	2c00      	cmp	r4, #0
 8006280:	d0dd      	beq.n	800623e <sniprintf+0x16>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e7d9      	b.n	800623e <sniprintf+0x16>
 800628a:	bf00      	nop
 800628c:	2000005c 	.word	0x2000005c

08006290 <memset>:
 8006290:	4402      	add	r2, r0
 8006292:	4603      	mov	r3, r0
 8006294:	4293      	cmp	r3, r2
 8006296:	d100      	bne.n	800629a <memset+0xa>
 8006298:	4770      	bx	lr
 800629a:	f803 1b01 	strb.w	r1, [r3], #1
 800629e:	e7f9      	b.n	8006294 <memset+0x4>

080062a0 <_reclaim_reent>:
 80062a0:	4b29      	ldr	r3, [pc, #164]	@ (8006348 <_reclaim_reent+0xa8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4283      	cmp	r3, r0
 80062a6:	b570      	push	{r4, r5, r6, lr}
 80062a8:	4604      	mov	r4, r0
 80062aa:	d04b      	beq.n	8006344 <_reclaim_reent+0xa4>
 80062ac:	69c3      	ldr	r3, [r0, #28]
 80062ae:	b1ab      	cbz	r3, 80062dc <_reclaim_reent+0x3c>
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	b16b      	cbz	r3, 80062d0 <_reclaim_reent+0x30>
 80062b4:	2500      	movs	r5, #0
 80062b6:	69e3      	ldr	r3, [r4, #28]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	5959      	ldr	r1, [r3, r5]
 80062bc:	2900      	cmp	r1, #0
 80062be:	d13b      	bne.n	8006338 <_reclaim_reent+0x98>
 80062c0:	3504      	adds	r5, #4
 80062c2:	2d80      	cmp	r5, #128	@ 0x80
 80062c4:	d1f7      	bne.n	80062b6 <_reclaim_reent+0x16>
 80062c6:	69e3      	ldr	r3, [r4, #28]
 80062c8:	4620      	mov	r0, r4
 80062ca:	68d9      	ldr	r1, [r3, #12]
 80062cc:	f000 f878 	bl	80063c0 <_free_r>
 80062d0:	69e3      	ldr	r3, [r4, #28]
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	b111      	cbz	r1, 80062dc <_reclaim_reent+0x3c>
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 f872 	bl	80063c0 <_free_r>
 80062dc:	6961      	ldr	r1, [r4, #20]
 80062de:	b111      	cbz	r1, 80062e6 <_reclaim_reent+0x46>
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 f86d 	bl	80063c0 <_free_r>
 80062e6:	69e1      	ldr	r1, [r4, #28]
 80062e8:	b111      	cbz	r1, 80062f0 <_reclaim_reent+0x50>
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 f868 	bl	80063c0 <_free_r>
 80062f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80062f2:	b111      	cbz	r1, 80062fa <_reclaim_reent+0x5a>
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 f863 	bl	80063c0 <_free_r>
 80062fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062fc:	b111      	cbz	r1, 8006304 <_reclaim_reent+0x64>
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 f85e 	bl	80063c0 <_free_r>
 8006304:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006306:	b111      	cbz	r1, 800630e <_reclaim_reent+0x6e>
 8006308:	4620      	mov	r0, r4
 800630a:	f000 f859 	bl	80063c0 <_free_r>
 800630e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006310:	b111      	cbz	r1, 8006318 <_reclaim_reent+0x78>
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f854 	bl	80063c0 <_free_r>
 8006318:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800631a:	b111      	cbz	r1, 8006322 <_reclaim_reent+0x82>
 800631c:	4620      	mov	r0, r4
 800631e:	f000 f84f 	bl	80063c0 <_free_r>
 8006322:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006324:	b111      	cbz	r1, 800632c <_reclaim_reent+0x8c>
 8006326:	4620      	mov	r0, r4
 8006328:	f000 f84a 	bl	80063c0 <_free_r>
 800632c:	6a23      	ldr	r3, [r4, #32]
 800632e:	b14b      	cbz	r3, 8006344 <_reclaim_reent+0xa4>
 8006330:	4620      	mov	r0, r4
 8006332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006336:	4718      	bx	r3
 8006338:	680e      	ldr	r6, [r1, #0]
 800633a:	4620      	mov	r0, r4
 800633c:	f000 f840 	bl	80063c0 <_free_r>
 8006340:	4631      	mov	r1, r6
 8006342:	e7bb      	b.n	80062bc <_reclaim_reent+0x1c>
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	bf00      	nop
 8006348:	2000005c 	.word	0x2000005c

0800634c <__errno>:
 800634c:	4b01      	ldr	r3, [pc, #4]	@ (8006354 <__errno+0x8>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	2000005c 	.word	0x2000005c

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4d0d      	ldr	r5, [pc, #52]	@ (8006390 <__libc_init_array+0x38>)
 800635c:	4c0d      	ldr	r4, [pc, #52]	@ (8006394 <__libc_init_array+0x3c>)
 800635e:	1b64      	subs	r4, r4, r5
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2600      	movs	r6, #0
 8006364:	42a6      	cmp	r6, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	4d0b      	ldr	r5, [pc, #44]	@ (8006398 <__libc_init_array+0x40>)
 800636a:	4c0c      	ldr	r4, [pc, #48]	@ (800639c <__libc_init_array+0x44>)
 800636c:	f000 fc66 	bl	8006c3c <_init>
 8006370:	1b64      	subs	r4, r4, r5
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	2600      	movs	r6, #0
 8006376:	42a6      	cmp	r6, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006380:	4798      	blx	r3
 8006382:	3601      	adds	r6, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f855 3b04 	ldr.w	r3, [r5], #4
 800638a:	4798      	blx	r3
 800638c:	3601      	adds	r6, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	08006d8c 	.word	0x08006d8c
 8006394:	08006d8c 	.word	0x08006d8c
 8006398:	08006d8c 	.word	0x08006d8c
 800639c:	08006d90 	.word	0x08006d90

080063a0 <__retarget_lock_acquire_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_release_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <memcpy>:
 80063a4:	440a      	add	r2, r1
 80063a6:	4291      	cmp	r1, r2
 80063a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ac:	d100      	bne.n	80063b0 <memcpy+0xc>
 80063ae:	4770      	bx	lr
 80063b0:	b510      	push	{r4, lr}
 80063b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ba:	4291      	cmp	r1, r2
 80063bc:	d1f9      	bne.n	80063b2 <memcpy+0xe>
 80063be:	bd10      	pop	{r4, pc}

080063c0 <_free_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4605      	mov	r5, r0
 80063c4:	2900      	cmp	r1, #0
 80063c6:	d041      	beq.n	800644c <_free_r+0x8c>
 80063c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063cc:	1f0c      	subs	r4, r1, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bfb8      	it	lt
 80063d2:	18e4      	addlt	r4, r4, r3
 80063d4:	f000 f8e0 	bl	8006598 <__malloc_lock>
 80063d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006450 <_free_r+0x90>)
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	b933      	cbnz	r3, 80063ec <_free_r+0x2c>
 80063de:	6063      	str	r3, [r4, #4]
 80063e0:	6014      	str	r4, [r2, #0]
 80063e2:	4628      	mov	r0, r5
 80063e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e8:	f000 b8dc 	b.w	80065a4 <__malloc_unlock>
 80063ec:	42a3      	cmp	r3, r4
 80063ee:	d908      	bls.n	8006402 <_free_r+0x42>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	1821      	adds	r1, r4, r0
 80063f4:	428b      	cmp	r3, r1
 80063f6:	bf01      	itttt	eq
 80063f8:	6819      	ldreq	r1, [r3, #0]
 80063fa:	685b      	ldreq	r3, [r3, #4]
 80063fc:	1809      	addeq	r1, r1, r0
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	e7ed      	b.n	80063de <_free_r+0x1e>
 8006402:	461a      	mov	r2, r3
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b10b      	cbz	r3, 800640c <_free_r+0x4c>
 8006408:	42a3      	cmp	r3, r4
 800640a:	d9fa      	bls.n	8006402 <_free_r+0x42>
 800640c:	6811      	ldr	r1, [r2, #0]
 800640e:	1850      	adds	r0, r2, r1
 8006410:	42a0      	cmp	r0, r4
 8006412:	d10b      	bne.n	800642c <_free_r+0x6c>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	4401      	add	r1, r0
 8006418:	1850      	adds	r0, r2, r1
 800641a:	4283      	cmp	r3, r0
 800641c:	6011      	str	r1, [r2, #0]
 800641e:	d1e0      	bne.n	80063e2 <_free_r+0x22>
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	6053      	str	r3, [r2, #4]
 8006426:	4408      	add	r0, r1
 8006428:	6010      	str	r0, [r2, #0]
 800642a:	e7da      	b.n	80063e2 <_free_r+0x22>
 800642c:	d902      	bls.n	8006434 <_free_r+0x74>
 800642e:	230c      	movs	r3, #12
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	e7d6      	b.n	80063e2 <_free_r+0x22>
 8006434:	6820      	ldr	r0, [r4, #0]
 8006436:	1821      	adds	r1, r4, r0
 8006438:	428b      	cmp	r3, r1
 800643a:	bf04      	itt	eq
 800643c:	6819      	ldreq	r1, [r3, #0]
 800643e:	685b      	ldreq	r3, [r3, #4]
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	bf04      	itt	eq
 8006444:	1809      	addeq	r1, r1, r0
 8006446:	6021      	streq	r1, [r4, #0]
 8006448:	6054      	str	r4, [r2, #4]
 800644a:	e7ca      	b.n	80063e2 <_free_r+0x22>
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	20004d28 	.word	0x20004d28

08006454 <sbrk_aligned>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4e0f      	ldr	r6, [pc, #60]	@ (8006494 <sbrk_aligned+0x40>)
 8006458:	460c      	mov	r4, r1
 800645a:	6831      	ldr	r1, [r6, #0]
 800645c:	4605      	mov	r5, r0
 800645e:	b911      	cbnz	r1, 8006466 <sbrk_aligned+0x12>
 8006460:	f000 fba6 	bl	8006bb0 <_sbrk_r>
 8006464:	6030      	str	r0, [r6, #0]
 8006466:	4621      	mov	r1, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f000 fba1 	bl	8006bb0 <_sbrk_r>
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	d103      	bne.n	800647a <sbrk_aligned+0x26>
 8006472:	f04f 34ff 	mov.w	r4, #4294967295
 8006476:	4620      	mov	r0, r4
 8006478:	bd70      	pop	{r4, r5, r6, pc}
 800647a:	1cc4      	adds	r4, r0, #3
 800647c:	f024 0403 	bic.w	r4, r4, #3
 8006480:	42a0      	cmp	r0, r4
 8006482:	d0f8      	beq.n	8006476 <sbrk_aligned+0x22>
 8006484:	1a21      	subs	r1, r4, r0
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fb92 	bl	8006bb0 <_sbrk_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d1f2      	bne.n	8006476 <sbrk_aligned+0x22>
 8006490:	e7ef      	b.n	8006472 <sbrk_aligned+0x1e>
 8006492:	bf00      	nop
 8006494:	20004d24 	.word	0x20004d24

08006498 <_malloc_r>:
 8006498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800649c:	1ccd      	adds	r5, r1, #3
 800649e:	f025 0503 	bic.w	r5, r5, #3
 80064a2:	3508      	adds	r5, #8
 80064a4:	2d0c      	cmp	r5, #12
 80064a6:	bf38      	it	cc
 80064a8:	250c      	movcc	r5, #12
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	4606      	mov	r6, r0
 80064ae:	db01      	blt.n	80064b4 <_malloc_r+0x1c>
 80064b0:	42a9      	cmp	r1, r5
 80064b2:	d904      	bls.n	80064be <_malloc_r+0x26>
 80064b4:	230c      	movs	r3, #12
 80064b6:	6033      	str	r3, [r6, #0]
 80064b8:	2000      	movs	r0, #0
 80064ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006594 <_malloc_r+0xfc>
 80064c2:	f000 f869 	bl	8006598 <__malloc_lock>
 80064c6:	f8d8 3000 	ldr.w	r3, [r8]
 80064ca:	461c      	mov	r4, r3
 80064cc:	bb44      	cbnz	r4, 8006520 <_malloc_r+0x88>
 80064ce:	4629      	mov	r1, r5
 80064d0:	4630      	mov	r0, r6
 80064d2:	f7ff ffbf 	bl	8006454 <sbrk_aligned>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	4604      	mov	r4, r0
 80064da:	d158      	bne.n	800658e <_malloc_r+0xf6>
 80064dc:	f8d8 4000 	ldr.w	r4, [r8]
 80064e0:	4627      	mov	r7, r4
 80064e2:	2f00      	cmp	r7, #0
 80064e4:	d143      	bne.n	800656e <_malloc_r+0xd6>
 80064e6:	2c00      	cmp	r4, #0
 80064e8:	d04b      	beq.n	8006582 <_malloc_r+0xea>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	4639      	mov	r1, r7
 80064ee:	4630      	mov	r0, r6
 80064f0:	eb04 0903 	add.w	r9, r4, r3
 80064f4:	f000 fb5c 	bl	8006bb0 <_sbrk_r>
 80064f8:	4581      	cmp	r9, r0
 80064fa:	d142      	bne.n	8006582 <_malloc_r+0xea>
 80064fc:	6821      	ldr	r1, [r4, #0]
 80064fe:	1a6d      	subs	r5, r5, r1
 8006500:	4629      	mov	r1, r5
 8006502:	4630      	mov	r0, r6
 8006504:	f7ff ffa6 	bl	8006454 <sbrk_aligned>
 8006508:	3001      	adds	r0, #1
 800650a:	d03a      	beq.n	8006582 <_malloc_r+0xea>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	442b      	add	r3, r5
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	f8d8 3000 	ldr.w	r3, [r8]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	bb62      	cbnz	r2, 8006574 <_malloc_r+0xdc>
 800651a:	f8c8 7000 	str.w	r7, [r8]
 800651e:	e00f      	b.n	8006540 <_malloc_r+0xa8>
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	1b52      	subs	r2, r2, r5
 8006524:	d420      	bmi.n	8006568 <_malloc_r+0xd0>
 8006526:	2a0b      	cmp	r2, #11
 8006528:	d917      	bls.n	800655a <_malloc_r+0xc2>
 800652a:	1961      	adds	r1, r4, r5
 800652c:	42a3      	cmp	r3, r4
 800652e:	6025      	str	r5, [r4, #0]
 8006530:	bf18      	it	ne
 8006532:	6059      	strne	r1, [r3, #4]
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	bf08      	it	eq
 8006538:	f8c8 1000 	streq.w	r1, [r8]
 800653c:	5162      	str	r2, [r4, r5]
 800653e:	604b      	str	r3, [r1, #4]
 8006540:	4630      	mov	r0, r6
 8006542:	f000 f82f 	bl	80065a4 <__malloc_unlock>
 8006546:	f104 000b 	add.w	r0, r4, #11
 800654a:	1d23      	adds	r3, r4, #4
 800654c:	f020 0007 	bic.w	r0, r0, #7
 8006550:	1ac2      	subs	r2, r0, r3
 8006552:	bf1c      	itt	ne
 8006554:	1a1b      	subne	r3, r3, r0
 8006556:	50a3      	strne	r3, [r4, r2]
 8006558:	e7af      	b.n	80064ba <_malloc_r+0x22>
 800655a:	6862      	ldr	r2, [r4, #4]
 800655c:	42a3      	cmp	r3, r4
 800655e:	bf0c      	ite	eq
 8006560:	f8c8 2000 	streq.w	r2, [r8]
 8006564:	605a      	strne	r2, [r3, #4]
 8006566:	e7eb      	b.n	8006540 <_malloc_r+0xa8>
 8006568:	4623      	mov	r3, r4
 800656a:	6864      	ldr	r4, [r4, #4]
 800656c:	e7ae      	b.n	80064cc <_malloc_r+0x34>
 800656e:	463c      	mov	r4, r7
 8006570:	687f      	ldr	r7, [r7, #4]
 8006572:	e7b6      	b.n	80064e2 <_malloc_r+0x4a>
 8006574:	461a      	mov	r2, r3
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	42a3      	cmp	r3, r4
 800657a:	d1fb      	bne.n	8006574 <_malloc_r+0xdc>
 800657c:	2300      	movs	r3, #0
 800657e:	6053      	str	r3, [r2, #4]
 8006580:	e7de      	b.n	8006540 <_malloc_r+0xa8>
 8006582:	230c      	movs	r3, #12
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	4630      	mov	r0, r6
 8006588:	f000 f80c 	bl	80065a4 <__malloc_unlock>
 800658c:	e794      	b.n	80064b8 <_malloc_r+0x20>
 800658e:	6005      	str	r5, [r0, #0]
 8006590:	e7d6      	b.n	8006540 <_malloc_r+0xa8>
 8006592:	bf00      	nop
 8006594:	20004d28 	.word	0x20004d28

08006598 <__malloc_lock>:
 8006598:	4801      	ldr	r0, [pc, #4]	@ (80065a0 <__malloc_lock+0x8>)
 800659a:	f7ff bf01 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 800659e:	bf00      	nop
 80065a0:	20004d20 	.word	0x20004d20

080065a4 <__malloc_unlock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	@ (80065ac <__malloc_unlock+0x8>)
 80065a6:	f7ff befc 	b.w	80063a2 <__retarget_lock_release_recursive>
 80065aa:	bf00      	nop
 80065ac:	20004d20 	.word	0x20004d20

080065b0 <__ssputs_r>:
 80065b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	688e      	ldr	r6, [r1, #8]
 80065b6:	461f      	mov	r7, r3
 80065b8:	42be      	cmp	r6, r7
 80065ba:	680b      	ldr	r3, [r1, #0]
 80065bc:	4682      	mov	sl, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	4690      	mov	r8, r2
 80065c2:	d82d      	bhi.n	8006620 <__ssputs_r+0x70>
 80065c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065cc:	d026      	beq.n	800661c <__ssputs_r+0x6c>
 80065ce:	6965      	ldr	r5, [r4, #20]
 80065d0:	6909      	ldr	r1, [r1, #16]
 80065d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d6:	eba3 0901 	sub.w	r9, r3, r1
 80065da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065de:	1c7b      	adds	r3, r7, #1
 80065e0:	444b      	add	r3, r9
 80065e2:	106d      	asrs	r5, r5, #1
 80065e4:	429d      	cmp	r5, r3
 80065e6:	bf38      	it	cc
 80065e8:	461d      	movcc	r5, r3
 80065ea:	0553      	lsls	r3, r2, #21
 80065ec:	d527      	bpl.n	800663e <__ssputs_r+0x8e>
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7ff ff52 	bl	8006498 <_malloc_r>
 80065f4:	4606      	mov	r6, r0
 80065f6:	b360      	cbz	r0, 8006652 <__ssputs_r+0xa2>
 80065f8:	6921      	ldr	r1, [r4, #16]
 80065fa:	464a      	mov	r2, r9
 80065fc:	f7ff fed2 	bl	80063a4 <memcpy>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	6126      	str	r6, [r4, #16]
 800660e:	6165      	str	r5, [r4, #20]
 8006610:	444e      	add	r6, r9
 8006612:	eba5 0509 	sub.w	r5, r5, r9
 8006616:	6026      	str	r6, [r4, #0]
 8006618:	60a5      	str	r5, [r4, #8]
 800661a:	463e      	mov	r6, r7
 800661c:	42be      	cmp	r6, r7
 800661e:	d900      	bls.n	8006622 <__ssputs_r+0x72>
 8006620:	463e      	mov	r6, r7
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	4632      	mov	r2, r6
 8006626:	4641      	mov	r1, r8
 8006628:	f000 faa8 	bl	8006b7c <memmove>
 800662c:	68a3      	ldr	r3, [r4, #8]
 800662e:	1b9b      	subs	r3, r3, r6
 8006630:	60a3      	str	r3, [r4, #8]
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	4433      	add	r3, r6
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	2000      	movs	r0, #0
 800663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663e:	462a      	mov	r2, r5
 8006640:	f000 fac6 	bl	8006bd0 <_realloc_r>
 8006644:	4606      	mov	r6, r0
 8006646:	2800      	cmp	r0, #0
 8006648:	d1e0      	bne.n	800660c <__ssputs_r+0x5c>
 800664a:	6921      	ldr	r1, [r4, #16]
 800664c:	4650      	mov	r0, sl
 800664e:	f7ff feb7 	bl	80063c0 <_free_r>
 8006652:	230c      	movs	r3, #12
 8006654:	f8ca 3000 	str.w	r3, [sl]
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800665e:	81a3      	strh	r3, [r4, #12]
 8006660:	f04f 30ff 	mov.w	r0, #4294967295
 8006664:	e7e9      	b.n	800663a <__ssputs_r+0x8a>
	...

08006668 <_svfiprintf_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	4698      	mov	r8, r3
 800666e:	898b      	ldrh	r3, [r1, #12]
 8006670:	061b      	lsls	r3, r3, #24
 8006672:	b09d      	sub	sp, #116	@ 0x74
 8006674:	4607      	mov	r7, r0
 8006676:	460d      	mov	r5, r1
 8006678:	4614      	mov	r4, r2
 800667a:	d510      	bpl.n	800669e <_svfiprintf_r+0x36>
 800667c:	690b      	ldr	r3, [r1, #16]
 800667e:	b973      	cbnz	r3, 800669e <_svfiprintf_r+0x36>
 8006680:	2140      	movs	r1, #64	@ 0x40
 8006682:	f7ff ff09 	bl	8006498 <_malloc_r>
 8006686:	6028      	str	r0, [r5, #0]
 8006688:	6128      	str	r0, [r5, #16]
 800668a:	b930      	cbnz	r0, 800669a <_svfiprintf_r+0x32>
 800668c:	230c      	movs	r3, #12
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	b01d      	add	sp, #116	@ 0x74
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	2340      	movs	r3, #64	@ 0x40
 800669c:	616b      	str	r3, [r5, #20]
 800669e:	2300      	movs	r3, #0
 80066a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a2:	2320      	movs	r3, #32
 80066a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ac:	2330      	movs	r3, #48	@ 0x30
 80066ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800684c <_svfiprintf_r+0x1e4>
 80066b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066b6:	f04f 0901 	mov.w	r9, #1
 80066ba:	4623      	mov	r3, r4
 80066bc:	469a      	mov	sl, r3
 80066be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066c2:	b10a      	cbz	r2, 80066c8 <_svfiprintf_r+0x60>
 80066c4:	2a25      	cmp	r2, #37	@ 0x25
 80066c6:	d1f9      	bne.n	80066bc <_svfiprintf_r+0x54>
 80066c8:	ebba 0b04 	subs.w	fp, sl, r4
 80066cc:	d00b      	beq.n	80066e6 <_svfiprintf_r+0x7e>
 80066ce:	465b      	mov	r3, fp
 80066d0:	4622      	mov	r2, r4
 80066d2:	4629      	mov	r1, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ff6b 	bl	80065b0 <__ssputs_r>
 80066da:	3001      	adds	r0, #1
 80066dc:	f000 80a7 	beq.w	800682e <_svfiprintf_r+0x1c6>
 80066e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066e2:	445a      	add	r2, fp
 80066e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80066e6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 809f 	beq.w	800682e <_svfiprintf_r+0x1c6>
 80066f0:	2300      	movs	r3, #0
 80066f2:	f04f 32ff 	mov.w	r2, #4294967295
 80066f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066fa:	f10a 0a01 	add.w	sl, sl, #1
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	9307      	str	r3, [sp, #28]
 8006702:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006706:	931a      	str	r3, [sp, #104]	@ 0x68
 8006708:	4654      	mov	r4, sl
 800670a:	2205      	movs	r2, #5
 800670c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006710:	484e      	ldr	r0, [pc, #312]	@ (800684c <_svfiprintf_r+0x1e4>)
 8006712:	f7f9 fd6d 	bl	80001f0 <memchr>
 8006716:	9a04      	ldr	r2, [sp, #16]
 8006718:	b9d8      	cbnz	r0, 8006752 <_svfiprintf_r+0xea>
 800671a:	06d0      	lsls	r0, r2, #27
 800671c:	bf44      	itt	mi
 800671e:	2320      	movmi	r3, #32
 8006720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006724:	0711      	lsls	r1, r2, #28
 8006726:	bf44      	itt	mi
 8006728:	232b      	movmi	r3, #43	@ 0x2b
 800672a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800672e:	f89a 3000 	ldrb.w	r3, [sl]
 8006732:	2b2a      	cmp	r3, #42	@ 0x2a
 8006734:	d015      	beq.n	8006762 <_svfiprintf_r+0xfa>
 8006736:	9a07      	ldr	r2, [sp, #28]
 8006738:	4654      	mov	r4, sl
 800673a:	2000      	movs	r0, #0
 800673c:	f04f 0c0a 	mov.w	ip, #10
 8006740:	4621      	mov	r1, r4
 8006742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006746:	3b30      	subs	r3, #48	@ 0x30
 8006748:	2b09      	cmp	r3, #9
 800674a:	d94b      	bls.n	80067e4 <_svfiprintf_r+0x17c>
 800674c:	b1b0      	cbz	r0, 800677c <_svfiprintf_r+0x114>
 800674e:	9207      	str	r2, [sp, #28]
 8006750:	e014      	b.n	800677c <_svfiprintf_r+0x114>
 8006752:	eba0 0308 	sub.w	r3, r0, r8
 8006756:	fa09 f303 	lsl.w	r3, r9, r3
 800675a:	4313      	orrs	r3, r2
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	46a2      	mov	sl, r4
 8006760:	e7d2      	b.n	8006708 <_svfiprintf_r+0xa0>
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	1d19      	adds	r1, r3, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	9103      	str	r1, [sp, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfbb      	ittet	lt
 800676e:	425b      	neglt	r3, r3
 8006770:	f042 0202 	orrlt.w	r2, r2, #2
 8006774:	9307      	strge	r3, [sp, #28]
 8006776:	9307      	strlt	r3, [sp, #28]
 8006778:	bfb8      	it	lt
 800677a:	9204      	strlt	r2, [sp, #16]
 800677c:	7823      	ldrb	r3, [r4, #0]
 800677e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006780:	d10a      	bne.n	8006798 <_svfiprintf_r+0x130>
 8006782:	7863      	ldrb	r3, [r4, #1]
 8006784:	2b2a      	cmp	r3, #42	@ 0x2a
 8006786:	d132      	bne.n	80067ee <_svfiprintf_r+0x186>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	9203      	str	r2, [sp, #12]
 8006790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006794:	3402      	adds	r4, #2
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800685c <_svfiprintf_r+0x1f4>
 800679c:	7821      	ldrb	r1, [r4, #0]
 800679e:	2203      	movs	r2, #3
 80067a0:	4650      	mov	r0, sl
 80067a2:	f7f9 fd25 	bl	80001f0 <memchr>
 80067a6:	b138      	cbz	r0, 80067b8 <_svfiprintf_r+0x150>
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	eba0 000a 	sub.w	r0, r0, sl
 80067ae:	2240      	movs	r2, #64	@ 0x40
 80067b0:	4082      	lsls	r2, r0
 80067b2:	4313      	orrs	r3, r2
 80067b4:	3401      	adds	r4, #1
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067bc:	4824      	ldr	r0, [pc, #144]	@ (8006850 <_svfiprintf_r+0x1e8>)
 80067be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067c2:	2206      	movs	r2, #6
 80067c4:	f7f9 fd14 	bl	80001f0 <memchr>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d036      	beq.n	800683a <_svfiprintf_r+0x1d2>
 80067cc:	4b21      	ldr	r3, [pc, #132]	@ (8006854 <_svfiprintf_r+0x1ec>)
 80067ce:	bb1b      	cbnz	r3, 8006818 <_svfiprintf_r+0x1b0>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	3307      	adds	r3, #7
 80067d4:	f023 0307 	bic.w	r3, r3, #7
 80067d8:	3308      	adds	r3, #8
 80067da:	9303      	str	r3, [sp, #12]
 80067dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067de:	4433      	add	r3, r6
 80067e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80067e2:	e76a      	b.n	80066ba <_svfiprintf_r+0x52>
 80067e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e8:	460c      	mov	r4, r1
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7a8      	b.n	8006740 <_svfiprintf_r+0xd8>
 80067ee:	2300      	movs	r3, #0
 80067f0:	3401      	adds	r4, #1
 80067f2:	9305      	str	r3, [sp, #20]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	4620      	mov	r0, r4
 80067fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006800:	3a30      	subs	r2, #48	@ 0x30
 8006802:	2a09      	cmp	r2, #9
 8006804:	d903      	bls.n	800680e <_svfiprintf_r+0x1a6>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0c6      	beq.n	8006798 <_svfiprintf_r+0x130>
 800680a:	9105      	str	r1, [sp, #20]
 800680c:	e7c4      	b.n	8006798 <_svfiprintf_r+0x130>
 800680e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006812:	4604      	mov	r4, r0
 8006814:	2301      	movs	r3, #1
 8006816:	e7f0      	b.n	80067fa <_svfiprintf_r+0x192>
 8006818:	ab03      	add	r3, sp, #12
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	462a      	mov	r2, r5
 800681e:	4b0e      	ldr	r3, [pc, #56]	@ (8006858 <_svfiprintf_r+0x1f0>)
 8006820:	a904      	add	r1, sp, #16
 8006822:	4638      	mov	r0, r7
 8006824:	f3af 8000 	nop.w
 8006828:	1c42      	adds	r2, r0, #1
 800682a:	4606      	mov	r6, r0
 800682c:	d1d6      	bne.n	80067dc <_svfiprintf_r+0x174>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	065b      	lsls	r3, r3, #25
 8006832:	f53f af2d 	bmi.w	8006690 <_svfiprintf_r+0x28>
 8006836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006838:	e72c      	b.n	8006694 <_svfiprintf_r+0x2c>
 800683a:	ab03      	add	r3, sp, #12
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	462a      	mov	r2, r5
 8006840:	4b05      	ldr	r3, [pc, #20]	@ (8006858 <_svfiprintf_r+0x1f0>)
 8006842:	a904      	add	r1, sp, #16
 8006844:	4638      	mov	r0, r7
 8006846:	f000 f879 	bl	800693c <_printf_i>
 800684a:	e7ed      	b.n	8006828 <_svfiprintf_r+0x1c0>
 800684c:	08006d50 	.word	0x08006d50
 8006850:	08006d5a 	.word	0x08006d5a
 8006854:	00000000 	.word	0x00000000
 8006858:	080065b1 	.word	0x080065b1
 800685c:	08006d56 	.word	0x08006d56

08006860 <_printf_common>:
 8006860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006864:	4616      	mov	r6, r2
 8006866:	4698      	mov	r8, r3
 8006868:	688a      	ldr	r2, [r1, #8]
 800686a:	690b      	ldr	r3, [r1, #16]
 800686c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006870:	4293      	cmp	r3, r2
 8006872:	bfb8      	it	lt
 8006874:	4613      	movlt	r3, r2
 8006876:	6033      	str	r3, [r6, #0]
 8006878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800687c:	4607      	mov	r7, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b10a      	cbz	r2, 8006886 <_printf_common+0x26>
 8006882:	3301      	adds	r3, #1
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	0699      	lsls	r1, r3, #26
 800688a:	bf42      	ittt	mi
 800688c:	6833      	ldrmi	r3, [r6, #0]
 800688e:	3302      	addmi	r3, #2
 8006890:	6033      	strmi	r3, [r6, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	f015 0506 	ands.w	r5, r5, #6
 8006898:	d106      	bne.n	80068a8 <_printf_common+0x48>
 800689a:	f104 0a19 	add.w	sl, r4, #25
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	6832      	ldr	r2, [r6, #0]
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dc26      	bgt.n	80068f6 <_printf_common+0x96>
 80068a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	3b00      	subs	r3, #0
 80068b0:	bf18      	it	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d42b      	bmi.n	8006910 <_printf_common+0xb0>
 80068b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068bc:	4641      	mov	r1, r8
 80068be:	4638      	mov	r0, r7
 80068c0:	47c8      	blx	r9
 80068c2:	3001      	adds	r0, #1
 80068c4:	d01e      	beq.n	8006904 <_printf_common+0xa4>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	f003 0306 	and.w	r3, r3, #6
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	bf02      	ittt	eq
 80068d2:	68e5      	ldreq	r5, [r4, #12]
 80068d4:	6833      	ldreq	r3, [r6, #0]
 80068d6:	1aed      	subeq	r5, r5, r3
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	bf0c      	ite	eq
 80068dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068e0:	2500      	movne	r5, #0
 80068e2:	4293      	cmp	r3, r2
 80068e4:	bfc4      	itt	gt
 80068e6:	1a9b      	subgt	r3, r3, r2
 80068e8:	18ed      	addgt	r5, r5, r3
 80068ea:	2600      	movs	r6, #0
 80068ec:	341a      	adds	r4, #26
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d11a      	bne.n	8006928 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e008      	b.n	8006908 <_printf_common+0xa8>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4652      	mov	r2, sl
 80068fa:	4641      	mov	r1, r8
 80068fc:	4638      	mov	r0, r7
 80068fe:	47c8      	blx	r9
 8006900:	3001      	adds	r0, #1
 8006902:	d103      	bne.n	800690c <_printf_common+0xac>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690c:	3501      	adds	r5, #1
 800690e:	e7c6      	b.n	800689e <_printf_common+0x3e>
 8006910:	18e1      	adds	r1, r4, r3
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	2030      	movs	r0, #48	@ 0x30
 8006916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800691a:	4422      	add	r2, r4
 800691c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006924:	3302      	adds	r3, #2
 8006926:	e7c7      	b.n	80068b8 <_printf_common+0x58>
 8006928:	2301      	movs	r3, #1
 800692a:	4622      	mov	r2, r4
 800692c:	4641      	mov	r1, r8
 800692e:	4638      	mov	r0, r7
 8006930:	47c8      	blx	r9
 8006932:	3001      	adds	r0, #1
 8006934:	d0e6      	beq.n	8006904 <_printf_common+0xa4>
 8006936:	3601      	adds	r6, #1
 8006938:	e7d9      	b.n	80068ee <_printf_common+0x8e>
	...

0800693c <_printf_i>:
 800693c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	7e0f      	ldrb	r7, [r1, #24]
 8006942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006944:	2f78      	cmp	r7, #120	@ 0x78
 8006946:	4691      	mov	r9, r2
 8006948:	4680      	mov	r8, r0
 800694a:	460c      	mov	r4, r1
 800694c:	469a      	mov	sl, r3
 800694e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006952:	d807      	bhi.n	8006964 <_printf_i+0x28>
 8006954:	2f62      	cmp	r7, #98	@ 0x62
 8006956:	d80a      	bhi.n	800696e <_printf_i+0x32>
 8006958:	2f00      	cmp	r7, #0
 800695a:	f000 80d2 	beq.w	8006b02 <_printf_i+0x1c6>
 800695e:	2f58      	cmp	r7, #88	@ 0x58
 8006960:	f000 80b9 	beq.w	8006ad6 <_printf_i+0x19a>
 8006964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800696c:	e03a      	b.n	80069e4 <_printf_i+0xa8>
 800696e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006972:	2b15      	cmp	r3, #21
 8006974:	d8f6      	bhi.n	8006964 <_printf_i+0x28>
 8006976:	a101      	add	r1, pc, #4	@ (adr r1, 800697c <_printf_i+0x40>)
 8006978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069e9 	.word	0x080069e9
 8006984:	08006965 	.word	0x08006965
 8006988:	08006965 	.word	0x08006965
 800698c:	08006965 	.word	0x08006965
 8006990:	08006965 	.word	0x08006965
 8006994:	080069e9 	.word	0x080069e9
 8006998:	08006965 	.word	0x08006965
 800699c:	08006965 	.word	0x08006965
 80069a0:	08006965 	.word	0x08006965
 80069a4:	08006965 	.word	0x08006965
 80069a8:	08006ae9 	.word	0x08006ae9
 80069ac:	08006a13 	.word	0x08006a13
 80069b0:	08006aa3 	.word	0x08006aa3
 80069b4:	08006965 	.word	0x08006965
 80069b8:	08006965 	.word	0x08006965
 80069bc:	08006b0b 	.word	0x08006b0b
 80069c0:	08006965 	.word	0x08006965
 80069c4:	08006a13 	.word	0x08006a13
 80069c8:	08006965 	.word	0x08006965
 80069cc:	08006965 	.word	0x08006965
 80069d0:	08006aab 	.word	0x08006aab
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	1d1a      	adds	r2, r3, #4
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6032      	str	r2, [r6, #0]
 80069dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069e4:	2301      	movs	r3, #1
 80069e6:	e09d      	b.n	8006b24 <_printf_i+0x1e8>
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	1d19      	adds	r1, r3, #4
 80069ee:	6031      	str	r1, [r6, #0]
 80069f0:	0606      	lsls	r6, r0, #24
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0xbc>
 80069f4:	681d      	ldr	r5, [r3, #0]
 80069f6:	e003      	b.n	8006a00 <_printf_i+0xc4>
 80069f8:	0645      	lsls	r5, r0, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0xb8>
 80069fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	da03      	bge.n	8006a0c <_printf_i+0xd0>
 8006a04:	232d      	movs	r3, #45	@ 0x2d
 8006a06:	426d      	negs	r5, r5
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a0c:	4859      	ldr	r0, [pc, #356]	@ (8006b74 <_printf_i+0x238>)
 8006a0e:	230a      	movs	r3, #10
 8006a10:	e011      	b.n	8006a36 <_printf_i+0xfa>
 8006a12:	6821      	ldr	r1, [r4, #0]
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	0608      	lsls	r0, r1, #24
 8006a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a1c:	d402      	bmi.n	8006a24 <_printf_i+0xe8>
 8006a1e:	0649      	lsls	r1, r1, #25
 8006a20:	bf48      	it	mi
 8006a22:	b2ad      	uxthmi	r5, r5
 8006a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a26:	4853      	ldr	r0, [pc, #332]	@ (8006b74 <_printf_i+0x238>)
 8006a28:	6033      	str	r3, [r6, #0]
 8006a2a:	bf14      	ite	ne
 8006a2c:	230a      	movne	r3, #10
 8006a2e:	2308      	moveq	r3, #8
 8006a30:	2100      	movs	r1, #0
 8006a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a36:	6866      	ldr	r6, [r4, #4]
 8006a38:	60a6      	str	r6, [r4, #8]
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	bfa2      	ittt	ge
 8006a3e:	6821      	ldrge	r1, [r4, #0]
 8006a40:	f021 0104 	bicge.w	r1, r1, #4
 8006a44:	6021      	strge	r1, [r4, #0]
 8006a46:	b90d      	cbnz	r5, 8006a4c <_printf_i+0x110>
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	d04b      	beq.n	8006ae4 <_printf_i+0x1a8>
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a52:	fb03 5711 	mls	r7, r3, r1, r5
 8006a56:	5dc7      	ldrb	r7, [r0, r7]
 8006a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a5c:	462f      	mov	r7, r5
 8006a5e:	42bb      	cmp	r3, r7
 8006a60:	460d      	mov	r5, r1
 8006a62:	d9f4      	bls.n	8006a4e <_printf_i+0x112>
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d10b      	bne.n	8006a80 <_printf_i+0x144>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	07df      	lsls	r7, r3, #31
 8006a6c:	d508      	bpl.n	8006a80 <_printf_i+0x144>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	6861      	ldr	r1, [r4, #4]
 8006a72:	4299      	cmp	r1, r3
 8006a74:	bfde      	ittt	le
 8006a76:	2330      	movle	r3, #48	@ 0x30
 8006a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a80:	1b92      	subs	r2, r2, r6
 8006a82:	6122      	str	r2, [r4, #16]
 8006a84:	f8cd a000 	str.w	sl, [sp]
 8006a88:	464b      	mov	r3, r9
 8006a8a:	aa03      	add	r2, sp, #12
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7ff fee6 	bl	8006860 <_printf_common>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d14a      	bne.n	8006b2e <_printf_i+0x1f2>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	b004      	add	sp, #16
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f043 0320 	orr.w	r3, r3, #32
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	4833      	ldr	r0, [pc, #204]	@ (8006b78 <_printf_i+0x23c>)
 8006aac:	2778      	movs	r7, #120	@ 0x78
 8006aae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	6831      	ldr	r1, [r6, #0]
 8006ab6:	061f      	lsls	r7, r3, #24
 8006ab8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006abc:	d402      	bmi.n	8006ac4 <_printf_i+0x188>
 8006abe:	065f      	lsls	r7, r3, #25
 8006ac0:	bf48      	it	mi
 8006ac2:	b2ad      	uxthmi	r5, r5
 8006ac4:	6031      	str	r1, [r6, #0]
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	bf44      	itt	mi
 8006aca:	f043 0320 	orrmi.w	r3, r3, #32
 8006ace:	6023      	strmi	r3, [r4, #0]
 8006ad0:	b11d      	cbz	r5, 8006ada <_printf_i+0x19e>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	e7ac      	b.n	8006a30 <_printf_i+0xf4>
 8006ad6:	4827      	ldr	r0, [pc, #156]	@ (8006b74 <_printf_i+0x238>)
 8006ad8:	e7e9      	b.n	8006aae <_printf_i+0x172>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f023 0320 	bic.w	r3, r3, #32
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	e7f6      	b.n	8006ad2 <_printf_i+0x196>
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	e7bd      	b.n	8006a64 <_printf_i+0x128>
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	6825      	ldr	r5, [r4, #0]
 8006aec:	6961      	ldr	r1, [r4, #20]
 8006aee:	1d18      	adds	r0, r3, #4
 8006af0:	6030      	str	r0, [r6, #0]
 8006af2:	062e      	lsls	r6, r5, #24
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0x1c0>
 8006af8:	6019      	str	r1, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <_printf_i+0x1c6>
 8006afc:	0668      	lsls	r0, r5, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0x1bc>
 8006b00:	8019      	strh	r1, [r3, #0]
 8006b02:	2300      	movs	r3, #0
 8006b04:	6123      	str	r3, [r4, #16]
 8006b06:	4616      	mov	r6, r2
 8006b08:	e7bc      	b.n	8006a84 <_printf_i+0x148>
 8006b0a:	6833      	ldr	r3, [r6, #0]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	6032      	str	r2, [r6, #0]
 8006b10:	681e      	ldr	r6, [r3, #0]
 8006b12:	6862      	ldr	r2, [r4, #4]
 8006b14:	2100      	movs	r1, #0
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7f9 fb6a 	bl	80001f0 <memchr>
 8006b1c:	b108      	cbz	r0, 8006b22 <_printf_i+0x1e6>
 8006b1e:	1b80      	subs	r0, r0, r6
 8006b20:	6060      	str	r0, [r4, #4]
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	2300      	movs	r3, #0
 8006b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b2c:	e7aa      	b.n	8006a84 <_printf_i+0x148>
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	4632      	mov	r2, r6
 8006b32:	4649      	mov	r1, r9
 8006b34:	4640      	mov	r0, r8
 8006b36:	47d0      	blx	sl
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d0ad      	beq.n	8006a98 <_printf_i+0x15c>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	079b      	lsls	r3, r3, #30
 8006b40:	d413      	bmi.n	8006b6a <_printf_i+0x22e>
 8006b42:	68e0      	ldr	r0, [r4, #12]
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	4298      	cmp	r0, r3
 8006b48:	bfb8      	it	lt
 8006b4a:	4618      	movlt	r0, r3
 8006b4c:	e7a6      	b.n	8006a9c <_printf_i+0x160>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4632      	mov	r2, r6
 8006b52:	4649      	mov	r1, r9
 8006b54:	4640      	mov	r0, r8
 8006b56:	47d0      	blx	sl
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d09d      	beq.n	8006a98 <_printf_i+0x15c>
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	68e3      	ldr	r3, [r4, #12]
 8006b60:	9903      	ldr	r1, [sp, #12]
 8006b62:	1a5b      	subs	r3, r3, r1
 8006b64:	42ab      	cmp	r3, r5
 8006b66:	dcf2      	bgt.n	8006b4e <_printf_i+0x212>
 8006b68:	e7eb      	b.n	8006b42 <_printf_i+0x206>
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	f104 0619 	add.w	r6, r4, #25
 8006b70:	e7f5      	b.n	8006b5e <_printf_i+0x222>
 8006b72:	bf00      	nop
 8006b74:	08006d61 	.word	0x08006d61
 8006b78:	08006d72 	.word	0x08006d72

08006b7c <memmove>:
 8006b7c:	4288      	cmp	r0, r1
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	eb01 0402 	add.w	r4, r1, r2
 8006b84:	d902      	bls.n	8006b8c <memmove+0x10>
 8006b86:	4284      	cmp	r4, r0
 8006b88:	4623      	mov	r3, r4
 8006b8a:	d807      	bhi.n	8006b9c <memmove+0x20>
 8006b8c:	1e43      	subs	r3, r0, #1
 8006b8e:	42a1      	cmp	r1, r4
 8006b90:	d008      	beq.n	8006ba4 <memmove+0x28>
 8006b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b9a:	e7f8      	b.n	8006b8e <memmove+0x12>
 8006b9c:	4402      	add	r2, r0
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	428a      	cmp	r2, r1
 8006ba2:	d100      	bne.n	8006ba6 <memmove+0x2a>
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bae:	e7f7      	b.n	8006ba0 <memmove+0x24>

08006bb0 <_sbrk_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d06      	ldr	r5, [pc, #24]	@ (8006bcc <_sbrk_r+0x1c>)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	f7fb f852 	bl	8001c64 <_sbrk>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_sbrk_r+0x1a>
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_sbrk_r+0x1a>
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20004d1c 	.word	0x20004d1c

08006bd0 <_realloc_r>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4615      	mov	r5, r2
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b921      	cbnz	r1, 8006be6 <_realloc_r+0x16>
 8006bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4611      	mov	r1, r2
 8006be2:	f7ff bc59 	b.w	8006498 <_malloc_r>
 8006be6:	b92a      	cbnz	r2, 8006bf4 <_realloc_r+0x24>
 8006be8:	f7ff fbea 	bl	80063c0 <_free_r>
 8006bec:	2400      	movs	r4, #0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	f000 f81a 	bl	8006c2c <_malloc_usable_size_r>
 8006bf8:	4285      	cmp	r5, r0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	d802      	bhi.n	8006c04 <_realloc_r+0x34>
 8006bfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c02:	d8f4      	bhi.n	8006bee <_realloc_r+0x1e>
 8006c04:	4629      	mov	r1, r5
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff fc46 	bl	8006498 <_malloc_r>
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d0ec      	beq.n	8006bec <_realloc_r+0x1c>
 8006c12:	42b5      	cmp	r5, r6
 8006c14:	462a      	mov	r2, r5
 8006c16:	4621      	mov	r1, r4
 8006c18:	bf28      	it	cs
 8006c1a:	4632      	movcs	r2, r6
 8006c1c:	f7ff fbc2 	bl	80063a4 <memcpy>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff fbcc 	bl	80063c0 <_free_r>
 8006c28:	463c      	mov	r4, r7
 8006c2a:	e7e0      	b.n	8006bee <_realloc_r+0x1e>

08006c2c <_malloc_usable_size_r>:
 8006c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c30:	1f18      	subs	r0, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bfbc      	itt	lt
 8006c36:	580b      	ldrlt	r3, [r1, r0]
 8006c38:	18c0      	addlt	r0, r0, r3
 8006c3a:	4770      	bx	lr

08006c3c <_init>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr

08006c48 <_fini>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr
