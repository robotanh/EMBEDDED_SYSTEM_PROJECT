
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007c94  08007c94  00008c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e20  08007e20  000090b8  2**0
                  CONTENTS
  4 .ARM          00000008  08007e20  08007e20  00008e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e28  08007e28  000090b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e28  08007e28  00008e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e2c  08007e2c  00008e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08007e30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca4  200000b8  08007ee8  000090b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d5c  08007ee8  00009d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017280  00000000  00000000  000090e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387e  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00023be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb9  00000000  00000000  00025058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019419  00000000  00000000  00026011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c15  00000000  00000000  0003f42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988d9  00000000  00000000  0005603f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  000ee95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f44ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c7c 	.word	0x08007c7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08007c7c 	.word	0x08007c7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <vBlinkTimerCallback>:
//												HELPER FUNCTIONS													//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Timer callback function
void vBlinkTimerCallback(TimerHandle_t xTimer) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    static int toggle = 0;
    toggle = !toggle;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dd6:	601a      	str	r2, [r3, #0]
    if (toggle) {
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <vBlinkTimerCallback+0x90>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d018      	beq.n	8000e12 <vBlinkTimerCallback+0x56>
    	if(numBlinkRow == 1) snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), blinkText);
 8000de0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <vBlinkTimerCallback+0x38>
 8000de8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e54 <vBlinkTimerCallback+0x98>)
 8000dea:	2107      	movs	r1, #7
 8000dec:	481a      	ldr	r0, [pc, #104]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000dee:	f006 fa3b 	bl	8007268 <sniprintf>
    	else if (numBlinkRow == 2){
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
    	}
    }
}
 8000df2:	e026      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	else if (numBlinkRow == 2){
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d122      	bne.n	8000e42 <vBlinkTimerCallback+0x86>
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), blinkText);
 8000dfc:	4a15      	ldr	r2, [pc, #84]	@ (8000e54 <vBlinkTimerCallback+0x98>)
 8000dfe:	2107      	movs	r1, #7
 8000e00:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e02:	f006 fa31 	bl	8007268 <sniprintf>
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), blinkText1);
 8000e06:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <vBlinkTimerCallback+0xa0>)
 8000e08:	2107      	movs	r1, #7
 8000e0a:	4815      	ldr	r0, [pc, #84]	@ (8000e60 <vBlinkTimerCallback+0xa4>)
 8000e0c:	f006 fa2c 	bl	8007268 <sniprintf>
}
 8000e10:	e017      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	if(numBlinkRow == 1) snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d105      	bne.n	8000e26 <vBlinkTimerCallback+0x6a>
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e1c:	2107      	movs	r1, #7
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e20:	f006 fa22 	bl	8007268 <sniprintf>
}
 8000e24:	e00d      	b.n	8000e42 <vBlinkTimerCallback+0x86>
    	else if (numBlinkRow == 2){
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <vBlinkTimerCallback+0x94>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d109      	bne.n	8000e42 <vBlinkTimerCallback+0x86>
    		snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " ");
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <vBlinkTimerCallback+0x9c>)
 8000e34:	f006 fa18 	bl	8007268 <sniprintf>
    		snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <vBlinkTimerCallback+0xa8>)
 8000e3a:	2107      	movs	r1, #7
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <vBlinkTimerCallback+0xa4>)
 8000e3e:	f006 fa13 	bl	8007268 <sniprintf>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000104 	.word	0x20000104
 8000e50:	20000004 	.word	0x20000004
 8000e54:	200000f4 	.word	0x200000f4
 8000e58:	20000036 	.word	0x20000036
 8000e5c:	200000fc 	.word	0x200000fc
 8000e60:	2000002f 	.word	0x2000002f
 8000e64:	08007c94 	.word	0x08007c94

08000e68 <ScanColumns>:
}
void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	f200 80c0 	bhi.w	8000ffa <ScanColumns+0x192>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <ScanColumns+0x18>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000eed 	.word	0x08000eed
 8000e88:	08000f47 	.word	0x08000f47
 8000e8c:	08000fa1 	.word	0x08000fa1
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 8000e90:	2101      	movs	r1, #1
 8000e92:	4861      	ldr	r0, [pc, #388]	@ (8001018 <ScanColumns+0x1b0>)
 8000e94:	f002 f9c8 	bl	8003228 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <ScanColumns+0x3a>
 8000e9e:	2343      	movs	r3, #67	@ 0x43
 8000ea0:	e0b5      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	485c      	ldr	r0, [pc, #368]	@ (8001018 <ScanColumns+0x1b0>)
 8000ea6:	f002 f9bf 	bl	8003228 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <ScanColumns+0x4c>
 8000eb0:	2337      	movs	r3, #55	@ 0x37
 8000eb2:	e0ac      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4858      	ldr	r0, [pc, #352]	@ (8001018 <ScanColumns+0x1b0>)
 8000eb8:	f002 f9b6 	bl	8003228 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <ScanColumns+0x5e>
 8000ec2:	2334      	movs	r3, #52	@ 0x34
 8000ec4:	e0a3      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4853      	ldr	r0, [pc, #332]	@ (8001018 <ScanColumns+0x1b0>)
 8000eca:	f002 f9ad 	bl	8003228 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <ScanColumns+0x70>
 8000ed4:	2331      	movs	r3, #49	@ 0x31
 8000ed6:	e09a      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 8000ed8:	2110      	movs	r1, #16
 8000eda:	484f      	ldr	r0, [pc, #316]	@ (8001018 <ScanColumns+0x1b0>)
 8000edc:	f002 f9a4 	bl	8003228 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 808b 	bne.w	8000ffe <ScanColumns+0x196>
 8000ee8:	2341      	movs	r3, #65	@ 0x41
 8000eea:	e090      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000eec:	2101      	movs	r1, #1
 8000eee:	484a      	ldr	r0, [pc, #296]	@ (8001018 <ScanColumns+0x1b0>)
 8000ef0:	f002 f99a 	bl	8003228 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <ScanColumns+0x96>
 8000efa:	2330      	movs	r3, #48	@ 0x30
 8000efc:	e087      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000efe:	2102      	movs	r1, #2
 8000f00:	4845      	ldr	r0, [pc, #276]	@ (8001018 <ScanColumns+0x1b0>)
 8000f02:	f002 f991 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <ScanColumns+0xa8>
 8000f0c:	2338      	movs	r3, #56	@ 0x38
 8000f0e:	e07e      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000f10:	2104      	movs	r1, #4
 8000f12:	4841      	ldr	r0, [pc, #260]	@ (8001018 <ScanColumns+0x1b0>)
 8000f14:	f002 f988 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <ScanColumns+0xba>
 8000f1e:	2335      	movs	r3, #53	@ 0x35
 8000f20:	e075      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 8000f22:	2108      	movs	r1, #8
 8000f24:	483c      	ldr	r0, [pc, #240]	@ (8001018 <ScanColumns+0x1b0>)
 8000f26:	f002 f97f 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <ScanColumns+0xcc>
 8000f30:	2332      	movs	r3, #50	@ 0x32
 8000f32:	e06c      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 8000f34:	2110      	movs	r1, #16
 8000f36:	4838      	ldr	r0, [pc, #224]	@ (8001018 <ScanColumns+0x1b0>)
 8000f38:	f002 f976 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d15f      	bne.n	8001002 <ScanColumns+0x19a>
 8000f42:	2342      	movs	r3, #66	@ 0x42
 8000f44:	e063      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 8000f46:	2101      	movs	r1, #1
 8000f48:	4833      	ldr	r0, [pc, #204]	@ (8001018 <ScanColumns+0x1b0>)
 8000f4a:	f002 f96d 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <ScanColumns+0xf0>
 8000f54:	2345      	movs	r3, #69	@ 0x45
 8000f56:	e05a      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000f58:	2102      	movs	r1, #2
 8000f5a:	482f      	ldr	r0, [pc, #188]	@ (8001018 <ScanColumns+0x1b0>)
 8000f5c:	f002 f964 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <ScanColumns+0x102>
 8000f66:	2339      	movs	r3, #57	@ 0x39
 8000f68:	e051      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	482a      	ldr	r0, [pc, #168]	@ (8001018 <ScanColumns+0x1b0>)
 8000f6e:	f002 f95b 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <ScanColumns+0x114>
 8000f78:	2336      	movs	r3, #54	@ 0x36
 8000f7a:	e048      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000f7c:	2108      	movs	r1, #8
 8000f7e:	4826      	ldr	r0, [pc, #152]	@ (8001018 <ScanColumns+0x1b0>)
 8000f80:	f002 f952 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <ScanColumns+0x126>
 8000f8a:	2333      	movs	r3, #51	@ 0x33
 8000f8c:	e03f      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4821      	ldr	r0, [pc, #132]	@ (8001018 <ScanColumns+0x1b0>)
 8000f92:	f002 f949 	bl	8003228 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d134      	bne.n	8001006 <ScanColumns+0x19e>
 8000f9c:	2344      	movs	r3, #68	@ 0x44
 8000f9e:	e036      	b.n	800100e <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	481d      	ldr	r0, [pc, #116]	@ (8001018 <ScanColumns+0x1b0>)
 8000fa4:	f002 f940 	bl	8003228 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <ScanColumns+0x14a>
 8000fae:	2354      	movs	r3, #84	@ 0x54
 8000fb0:	e02d      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4818      	ldr	r0, [pc, #96]	@ (8001018 <ScanColumns+0x1b0>)
 8000fb6:	f002 f937 	bl	8003228 <HAL_GPIO_ReadPin>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <ScanColumns+0x15c>
 8000fc0:	2350      	movs	r3, #80	@ 0x50
 8000fc2:	e024      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4814      	ldr	r0, [pc, #80]	@ (8001018 <ScanColumns+0x1b0>)
 8000fc8:	f002 f92e 	bl	8003228 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <ScanColumns+0x16e>
 8000fd2:	2324      	movs	r3, #36	@ 0x24
 8000fd4:	e01b      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <ScanColumns+0x1b0>)
 8000fda:	f002 f925 	bl	8003228 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <ScanColumns+0x180>
 8000fe4:	234c      	movs	r3, #76	@ 0x4c
 8000fe6:	e012      	b.n	800100e <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000fe8:	2110      	movs	r1, #16
 8000fea:	480b      	ldr	r0, [pc, #44]	@ (8001018 <ScanColumns+0x1b0>)
 8000fec:	f002 f91c 	bl	8003228 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <ScanColumns+0x1a2>
 8000ff6:	2346      	movs	r3, #70	@ 0x46
 8000ff8:	e009      	b.n	800100e <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000ffa:	23ff      	movs	r3, #255	@ 0xff
 8000ffc:	e007      	b.n	800100e <ScanColumns+0x1a6>
            break;
 8000ffe:	bf00      	nop
 8001000:	e004      	b.n	800100c <ScanColumns+0x1a4>
            break;
 8001002:	bf00      	nop
 8001004:	e002      	b.n	800100c <ScanColumns+0x1a4>
            break;
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <ScanColumns+0x1a4>
            break;
 800100a:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 800100c:	23ff      	movs	r3, #255	@ 0xff
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020400 	.word	0x40020400

0800101c <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2140      	movs	r1, #64	@ 0x40
 8001026:	482c      	ldr	r0, [pc, #176]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001028:	f002 f916 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001032:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001034:	f002 f910 	bl	8003258 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ff15 	bl	8000e68 <ScanColumns>
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2bff      	cmp	r3, #255	@ 0xff
 8001046:	d001      	beq.n	800104c <KeyPad_Scan+0x30>
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	e041      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	4821      	ldr	r0, [pc, #132]	@ (80010d8 <KeyPad_Scan+0xbc>)
 8001052:	f002 f901 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7150 	mov.w	r1, #832	@ 0x340
 800105c:	481e      	ldr	r0, [pc, #120]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800105e:	f002 f8fb 	bl	8003258 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff00 	bl	8000e68 <ScanColumns>
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2bff      	cmp	r3, #255	@ 0xff
 8001070:	d001      	beq.n	8001076 <KeyPad_Scan+0x5a>
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	e02c      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107c:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800107e:	f002 f8eb 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <KeyPad_Scan+0xbc>)
 800108a:	f002 f8e5 	bl	8003258 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff feea 	bl	8000e68 <ScanColumns>
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2bff      	cmp	r3, #255	@ 0xff
 800109c:	d001      	beq.n	80010a2 <KeyPad_Scan+0x86>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	e016      	b.n	80010d0 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <KeyPad_Scan+0xbc>)
 80010aa:	f002 f8d5 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <KeyPad_Scan+0xbc>)
 80010b6:	f002 f8cf 	bl	8003258 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fed4 	bl	8000e68 <ScanColumns>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d001      	beq.n	80010ce <KeyPad_Scan+0xb2>
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	e000      	b.n	80010d0 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80010ce:	23ff      	movs	r3, #255	@ 0xff
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020400 	.word	0x40020400

080010dc <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <formatTotalLiters+0x80>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d815      	bhi.n	800111c <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <formatTotalLiters+0x84>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9a      	lsrs	r2, r3, #18
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <formatTotalLiters+0x84>)
 8001102:	fba3 1302 	umull	r1, r3, r3, r2
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	4916      	ldr	r1, [pc, #88]	@ (8001164 <formatTotalLiters+0x88>)
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <formatTotalLiters+0x8c>)
 8001116:	2203      	movs	r2, #3
 8001118:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 800111a:	e018      	b.n	800114e <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <formatTotalLiters+0x90>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0e5a      	lsrs	r2, r3, #25
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <formatTotalLiters+0x90>)
 800112e:	fba3 1302 	umull	r1, r3, r3, r2
 8001132:	0e5b      	lsrs	r3, r3, #25
 8001134:	490e      	ldr	r1, [pc, #56]	@ (8001170 <formatTotalLiters+0x94>)
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <formatTotalLiters+0x98>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	095a      	lsrs	r2, r3, #5
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <formatTotalLiters+0x8c>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	05f5e0ff 	.word	0x05f5e0ff
 8001160:	431bde83 	.word	0x431bde83
 8001164:	000f4240 	.word	0x000f4240
 8001168:	20000054 	.word	0x20000054
 800116c:	55e63b89 	.word	0x55e63b89
 8001170:	05f5e100 	.word	0x05f5e100
 8001174:	51eb851f 	.word	0x51eb851f

08001178 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <formatTotalLitersShift+0x60>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d815      	bhi.n	80011b8 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <formatTotalLitersShift+0x64>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <formatTotalLitersShift+0x64>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0c9b      	lsrs	r3, r3, #18
 80011a4:	490e      	ldr	r1, [pc, #56]	@ (80011e0 <formatTotalLitersShift+0x68>)
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <formatTotalLitersShift+0x6c>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80011b6:	e009      	b.n	80011cc <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <formatTotalLitersShift+0x6c>)
 80011c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	3b9ac9ff 	.word	0x3b9ac9ff
 80011dc:	431bde83 	.word	0x431bde83
 80011e0:	000f4240 	.word	0x000f4240
 80011e4:	20000054 	.word	0x20000054

080011e8 <formatFloat>:

void formatFloat(float value, char* buffer)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80011f2:	6038      	str	r0, [r7, #0]
    int integerPart = (int)value;
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	ee17 3a90 	vmov	r3, s15
 8001200:	60fb      	str	r3, [r7, #12]
    int decimalPart = (int)((value - integerPart) * 100);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001240 <formatFloat+0x58>
 8001218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 3a90 	vmov	r3, s15
 8001224:	60bb      	str	r3, [r7, #8]

    snprintf(buffer, 7, "%03d.%02d", integerPart, decimalPart);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <formatFloat+0x5c>)
 800122e:	2107      	movs	r1, #7
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f006 f819 	bl	8007268 <sniprintf>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	42c80000 	.word	0x42c80000
 8001244:	08007c98 	.word	0x08007c98

08001248 <setOrderPrice>:

void setOrderPrice (uint32_t inputPrice)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	orderPrice=inputPrice;
 8001250:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <setOrderPrice+0x4c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
	orderLiter=(double)orderPrice/(double)roundedPrice;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <setOrderPrice+0x4c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f95a 	bl	8000514 <__aeabi_ui2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <setOrderPrice+0x50>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f953 	bl	8000514 <__aeabi_ui2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff faf1 	bl	800085c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fbd3 	bl	8000a2c <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <setOrderPrice+0x54>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	200001cc 	.word	0x200001cc
 8001298:	20000050 	.word	0x20000050
 800129c:	200001d0 	.word	0x200001d0

080012a0 <setOrderLiter>:
void setOrderLiter(uint32_t inputLiter){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	orderLiter=inputLiter;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <setOrderLiter+0x48>)
 80012b4:	edc3 7a00 	vstr	s15, [r3]
	orderPrice=orderLiter*roundedPrice;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <setOrderLiter+0x4c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <setOrderLiter+0x48>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d2:	ee17 2a90 	vmov	r2, s15
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <setOrderLiter+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200001d0 	.word	0x200001d0
 80012ec:	20000050 	.word	0x20000050
 80012f0:	200001cc 	.word	0x200001cc

080012f4 <IdleEnv>:
void IdleEnv(){
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	numberOfDigits = 0;
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <IdleEnv+0x1c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	accumulatedNumber = 0;
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <IdleEnv+0x20>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200000e0 	.word	0x200000e0
 8001314:	200000dc 	.word	0x200000dc

08001318 <setIdle>:
void setIdle(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	seqState=SEQ_IDLE;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <setIdle+0x14>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	IdleEnv();
 8001322:	f7ff ffe7 	bl	80012f4 <IdleEnv>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000ee 	.word	0x200000ee

08001330 <KeyLogic>:
//																													//
//													KEY LOGIC FSM													//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void KeyLogic() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8001336:	f004 fb77 	bl	8005a28 <xTaskGetTickCount>
 800133a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800133c:	f7ff fe6e 	bl	800101c <KeyPad_Scan>
 8001340:	4603      	mov	r3, r0
 8001342:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8001344:	4bae      	ldr	r3, [pc, #696]	@ (8001600 <KeyLogic+0x2d0>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d85a      	bhi.n	8001402 <KeyLogic+0xd2>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <KeyLogic+0x24>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800137f 	.word	0x0800137f
 800135c:	080013ab 	.word	0x080013ab
 8001360:	080013db 	.word	0x080013db
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2bff      	cmp	r3, #255	@ 0xff
 8001368:	d044      	beq.n	80013f4 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800136a:	4aa6      	ldr	r2, [pc, #664]	@ (8001604 <KeyLogic+0x2d4>)
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8001370:	4aa5      	ldr	r2, [pc, #660]	@ (8001608 <KeyLogic+0x2d8>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8001376:	4ba2      	ldr	r3, [pc, #648]	@ (8001600 <KeyLogic+0x2d0>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800137c:	e03a      	b.n	80013f4 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800137e:	4ba2      	ldr	r3, [pc, #648]	@ (8001608 <KeyLogic+0x2d8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b31      	cmp	r3, #49	@ 0x31
 8001388:	d936      	bls.n	80013f8 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800138a:	4b9e      	ldr	r3, [pc, #632]	@ (8001604 <KeyLogic+0x2d4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	429a      	cmp	r2, r3
 8001392:	d106      	bne.n	80013a2 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8001394:	4b9a      	ldr	r3, [pc, #616]	@ (8001600 <KeyLogic+0x2d0>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800139a:	4a9c      	ldr	r2, [pc, #624]	@ (800160c <KeyLogic+0x2dc>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 80013a0:	e02a      	b.n	80013f8 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 80013a2:	4b97      	ldr	r3, [pc, #604]	@ (8001600 <KeyLogic+0x2d0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
            break;
 80013a8:	e026      	b.n	80013f8 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 80013aa:	4b96      	ldr	r3, [pc, #600]	@ (8001604 <KeyLogic+0x2d4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	78fa      	ldrb	r2, [r7, #3]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d10a      	bne.n	80013ca <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 80013b4:	4b95      	ldr	r3, [pc, #596]	@ (800160c <KeyLogic+0x2dc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80013c0:	d31c      	bcc.n	80013fc <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 80013c2:	4b8f      	ldr	r3, [pc, #572]	@ (8001600 <KeyLogic+0x2d0>)
 80013c4:	2203      	movs	r2, #3
 80013c6:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 80013c8:	e018      	b.n	80013fc <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 80013ca:	4b8e      	ldr	r3, [pc, #568]	@ (8001604 <KeyLogic+0x2d4>)
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	4b90      	ldr	r3, [pc, #576]	@ (8001610 <KeyLogic+0x2e0>)
 80013d0:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80013d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001600 <KeyLogic+0x2d0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
            break;
 80013d8:	e010      	b.n	80013fc <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80013da:	4b8a      	ldr	r3, [pc, #552]	@ (8001604 <KeyLogic+0x2d4>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d00d      	beq.n	8001400 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80013e4:	4b87      	ldr	r3, [pc, #540]	@ (8001604 <KeyLogic+0x2d4>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b89      	ldr	r3, [pc, #548]	@ (8001610 <KeyLogic+0x2e0>)
 80013ea:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80013ec:	4b84      	ldr	r3, [pc, #528]	@ (8001600 <KeyLogic+0x2d0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80013f2:	e005      	b.n	8001400 <KeyLogic+0xd0>
            break;
 80013f4:	bf00      	nop
 80013f6:	e004      	b.n	8001402 <KeyLogic+0xd2>
            break;
 80013f8:	bf00      	nop
 80013fa:	e002      	b.n	8001402 <KeyLogic+0xd2>
            break;
 80013fc:	bf00      	nop
 80013fe:	e000      	b.n	8001402 <KeyLogic+0xd2>
            break;
 8001400:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 8001402:	4b83      	ldr	r3, [pc, #524]	@ (8001610 <KeyLogic+0x2e0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2bff      	cmp	r3, #255	@ 0xff
 8001408:	f000 8335 	beq.w	8001a76 <KeyLogic+0x746>
		switch (keyPressed) {
 800140c:	4b80      	ldr	r3, [pc, #512]	@ (8001610 <KeyLogic+0x2e0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	3b24      	subs	r3, #36	@ 0x24
 8001412:	2b30      	cmp	r3, #48	@ 0x30
 8001414:	f200 82ab 	bhi.w	800196e <KeyLogic+0x63e>
 8001418:	a201      	add	r2, pc, #4	@ (adr r2, 8001420 <KeyLogic+0xf0>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001923 	.word	0x08001923
 8001424:	0800196f 	.word	0x0800196f
 8001428:	0800196f 	.word	0x0800196f
 800142c:	0800196f 	.word	0x0800196f
 8001430:	0800196f 	.word	0x0800196f
 8001434:	0800196f 	.word	0x0800196f
 8001438:	0800196f 	.word	0x0800196f
 800143c:	0800196f 	.word	0x0800196f
 8001440:	0800196f 	.word	0x0800196f
 8001444:	0800196f 	.word	0x0800196f
 8001448:	0800196f 	.word	0x0800196f
 800144c:	0800196f 	.word	0x0800196f
 8001450:	0800196f 	.word	0x0800196f
 8001454:	0800196f 	.word	0x0800196f
 8001458:	0800196f 	.word	0x0800196f
 800145c:	0800196f 	.word	0x0800196f
 8001460:	0800196f 	.word	0x0800196f
 8001464:	0800196f 	.word	0x0800196f
 8001468:	0800196f 	.word	0x0800196f
 800146c:	0800196f 	.word	0x0800196f
 8001470:	0800196f 	.word	0x0800196f
 8001474:	0800196f 	.word	0x0800196f
 8001478:	0800196f 	.word	0x0800196f
 800147c:	0800196f 	.word	0x0800196f
 8001480:	0800196f 	.word	0x0800196f
 8001484:	0800196f 	.word	0x0800196f
 8001488:	0800196f 	.word	0x0800196f
 800148c:	0800196f 	.word	0x0800196f
 8001490:	0800196f 	.word	0x0800196f
 8001494:	080014e5 	.word	0x080014e5
 8001498:	08001511 	.word	0x08001511
 800149c:	080015c9 	.word	0x080015c9
 80014a0:	0800154d 	.word	0x0800154d
 80014a4:	080015ef 	.word	0x080015ef
 80014a8:	0800158d 	.word	0x0800158d
 80014ac:	0800196f 	.word	0x0800196f
 80014b0:	0800196f 	.word	0x0800196f
 80014b4:	0800196f 	.word	0x0800196f
 80014b8:	0800196f 	.word	0x0800196f
 80014bc:	0800196f 	.word	0x0800196f
 80014c0:	08001949 	.word	0x08001949
 80014c4:	0800196f 	.word	0x0800196f
 80014c8:	0800196f 	.word	0x0800196f
 80014cc:	0800196f 	.word	0x0800196f
 80014d0:	080018f7 	.word	0x080018f7
 80014d4:	0800196f 	.word	0x0800196f
 80014d8:	0800196f 	.word	0x0800196f
 80014dc:	0800196f 	.word	0x0800196f
 80014e0:	0800190d 	.word	0x0800190d
/////////////////////////////////////////////////////KEY F1/////////////////////////////////////////////////////////
			case 'A':
				if(seqState==SEQ_IDLE){					// F1
 80014e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001614 <KeyLogic+0x2e4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d104      	bne.n	80014f6 <KeyLogic+0x1c6>
					setOrderPrice(10000);
 80014ec:	f242 7010 	movw	r0, #10000	@ 0x2710
 80014f0:	f7ff feaa 	bl	8001248 <setOrderPrice>
					setOrderLiter(1);
					setIdle();
				}else{
					setIdle();
				}
				break;
 80014f4:	e2bf      	b.n	8001a76 <KeyLogic+0x746>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F1
 80014f6:	4b47      	ldr	r3, [pc, #284]	@ (8001614 <KeyLogic+0x2e4>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d105      	bne.n	800150a <KeyLogic+0x1da>
					setOrderLiter(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fece 	bl	80012a0 <setOrderLiter>
					setIdle();
 8001504:	f7ff ff08 	bl	8001318 <setIdle>
				break;
 8001508:	e2b5      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 800150a:	f7ff ff05 	bl	8001318 <setIdle>
				break;
 800150e:	e2b2      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY F2/////////////////////////////////////////////////////////
			case 'B':
				if(seqState==SEQ_IDLE){					// F2
 8001510:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <KeyLogic+0x2e4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d104      	bne.n	8001522 <KeyLogic+0x1f2>
					setOrderPrice(15000);
 8001518:	f643 2098 	movw	r0, #15000	@ 0x3a98
 800151c:	f7ff fe94 	bl	8001248 <setOrderPrice>
				}else if(seqState==SEQ_PRESSED_P){		// P -> F2
					seqState=SEQ_PRESSED_P_F2_PSWRD;
				}else{
					setIdle();
				}
				break;
 8001520:	e2a9      	b.n	8001a76 <KeyLogic+0x746>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F2
 8001522:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <KeyLogic+0x2e4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d105      	bne.n	8001536 <KeyLogic+0x206>
					setOrderLiter(2);
 800152a:	2002      	movs	r0, #2
 800152c:	f7ff feb8 	bl	80012a0 <setOrderLiter>
					setIdle();
 8001530:	f7ff fef2 	bl	8001318 <setIdle>
				break;
 8001534:	e29f      	b.n	8001a76 <KeyLogic+0x746>
				}else if(seqState==SEQ_PRESSED_P){		// P -> F2
 8001536:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <KeyLogic+0x2e4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d103      	bne.n	8001546 <KeyLogic+0x216>
					seqState=SEQ_PRESSED_P_F2_PSWRD;
 800153e:	4b35      	ldr	r3, [pc, #212]	@ (8001614 <KeyLogic+0x2e4>)
 8001540:	2206      	movs	r2, #6
 8001542:	701a      	strb	r2, [r3, #0]
				break;
 8001544:	e297      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 8001546:	f7ff fee7 	bl	8001318 <setIdle>
				break;
 800154a:	e294      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY F3/////////////////////////////////////////////////////////
			case 'D':
				if(seqState==SEQ_IDLE){					// F3
 800154c:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <KeyLogic+0x2e4>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <KeyLogic+0x22e>
					setOrderPrice(20000);
 8001554:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001558:	f7ff fe76 	bl	8001248 <setOrderPrice>
					seqState = SEQ_ENTER_OLD_PASSWORD;
					IdleEnv();
				} else {
					setIdle();
				}
				break;
 800155c:	e28b      	b.n	8001a76 <KeyLogic+0x746>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F3
 800155e:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <KeyLogic+0x2e4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b10      	cmp	r3, #16
 8001564:	d105      	bne.n	8001572 <KeyLogic+0x242>
					setOrderLiter(5);
 8001566:	2005      	movs	r0, #5
 8001568:	f7ff fe9a 	bl	80012a0 <setOrderLiter>
					setIdle();
 800156c:	f7ff fed4 	bl	8001318 <setIdle>
				break;
 8001570:	e281      	b.n	8001a76 <KeyLogic+0x746>
				}else if (seqState == SEQ_PRESSED_T) {	// T -> F3
 8001572:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <KeyLogic+0x2e4>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b0a      	cmp	r3, #10
 8001578:	d105      	bne.n	8001586 <KeyLogic+0x256>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 800157a:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <KeyLogic+0x2e4>)
 800157c:	2202      	movs	r2, #2
 800157e:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001580:	f7ff feb8 	bl	80012f4 <IdleEnv>
				break;
 8001584:	e277      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 8001586:	f7ff fec7 	bl	8001318 <setIdle>
				break;
 800158a:	e274      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY F4/////////////////////////////////////////////////////////
			case 'F':
				if(seqState==SEQ_IDLE){					// F4
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <KeyLogic+0x2e4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <KeyLogic+0x26e>
					setOrderPrice(50000);
 8001594:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001598:	f7ff fe56 	bl	8001248 <setOrderPrice>
				}else if (seqState == SEQ_PRESSED_T) {	// T -> F4
					seqState = SEQ_PRESSED_T_F4;
				} else {
					setIdle();
				}
				break;
 800159c:	e26b      	b.n	8001a76 <KeyLogic+0x746>
				}else if(seqState==SEQ_PRESSED_L){		// L -> F4
 800159e:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <KeyLogic+0x2e4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d105      	bne.n	80015b2 <KeyLogic+0x282>
					setOrderLiter(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	f7ff fe7a 	bl	80012a0 <setOrderLiter>
					setIdle();
 80015ac:	f7ff feb4 	bl	8001318 <setIdle>
				break;
 80015b0:	e261      	b.n	8001a76 <KeyLogic+0x746>
				}else if (seqState == SEQ_PRESSED_T) {	// T -> F4
 80015b2:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <KeyLogic+0x2e4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d103      	bne.n	80015c2 <KeyLogic+0x292>
					seqState = SEQ_PRESSED_T_F4;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <KeyLogic+0x2e4>)
 80015bc:	220e      	movs	r2, #14
 80015be:	701a      	strb	r2, [r3, #0]
				break;
 80015c0:	e259      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 80015c2:	f7ff fea9 	bl	8001318 <setIdle>
				break;
 80015c6:	e256      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80015c8:	2300      	movs	r3, #0
 80015ca:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <KeyLogic+0x2e8>)
 80015cc:	2107      	movs	r1, #7
 80015ce:	4813      	ldr	r0, [pc, #76]	@ (800161c <KeyLogic+0x2ec>)
 80015d0:	f005 fe4a 	bl	8007268 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80015d4:	2300      	movs	r3, #0
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <KeyLogic+0x2e8>)
 80015d8:	2107      	movs	r1, #7
 80015da:	4811      	ldr	r0, [pc, #68]	@ (8001620 <KeyLogic+0x2f0>)
 80015dc:	f005 fe44 	bl	8007268 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 80015e0:	2301      	movs	r3, #1
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <KeyLogic+0x2e8>)
 80015e4:	2107      	movs	r1, #7
 80015e6:	480f      	ldr	r0, [pc, #60]	@ (8001624 <KeyLogic+0x2f4>)
 80015e8:	f005 fe3e 	bl	8007268 <sniprintf>
				break;
 80015ec:	e243      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){											// {SEQ_IDLE}: 						E to display roundPrice
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <KeyLogic+0x2e4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d118      	bne.n	8001628 <KeyLogic+0x2f8>
					seqState = SEQ_DISP_PRICE;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <KeyLogic+0x2e4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
					password = accumulatedNumber;
					setIdle();
				}else {
					setIdle();
				}
				break;
 80015fc:	e23b      	b.n	8001a76 <KeyLogic+0x746>
 80015fe:	bf00      	nop
 8001600:	200000ed 	.word	0x200000ed
 8001604:	20000001 	.word	0x20000001
 8001608:	200000d4 	.word	0x200000d4
 800160c:	200000d8 	.word	0x200000d8
 8001610:	20000000 	.word	0x20000000
 8001614:	200000ee 	.word	0x200000ee
 8001618:	08007ca4 	.word	0x08007ca4
 800161c:	20000028 	.word	0x20000028
 8001620:	2000002f 	.word	0x2000002f
 8001624:	20000036 	.word	0x20000036
				}else if (seqState == SEQ_PRESSED_$){								// {SEQ_PRESSED_$}: 				$ -> [OrderPrice] -> E to set Order Price
 8001628:	4b9b      	ldr	r3, [pc, #620]	@ (8001898 <KeyLogic+0x568>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b11      	cmp	r3, #17
 800162e:	d107      	bne.n	8001640 <KeyLogic+0x310>
					setOrderPrice(accumulatedNumber);
 8001630:	4b9a      	ldr	r3, [pc, #616]	@ (800189c <KeyLogic+0x56c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe07 	bl	8001248 <setOrderPrice>
					setIdle();
 800163a:	f7ff fe6d 	bl	8001318 <setIdle>
				break;
 800163e:	e21a      	b.n	8001a76 <KeyLogic+0x746>
				}else if (seqState == SEQ_PRESSED_L){								// {SEQ_PRESSED_L}: 				L -> [OrderLiter] -> E to set Order Liter
 8001640:	4b95      	ldr	r3, [pc, #596]	@ (8001898 <KeyLogic+0x568>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b10      	cmp	r3, #16
 8001646:	d107      	bne.n	8001658 <KeyLogic+0x328>
					setOrderLiter(accumulatedNumber);
 8001648:	4b94      	ldr	r3, [pc, #592]	@ (800189c <KeyLogic+0x56c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe27 	bl	80012a0 <setOrderLiter>
					setIdle();
 8001652:	f7ff fe61 	bl	8001318 <setIdle>
				break;
 8001656:	e20e      	b.n	8001a76 <KeyLogic+0x746>
				}else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_PSWRD_SETPRICE}
 8001658:	4b8f      	ldr	r3, [pc, #572]	@ (8001898 <KeyLogic+0x568>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d10b      	bne.n	8001678 <KeyLogic+0x348>
					accumulatedNumber==password) {
 8001660:	4b8e      	ldr	r3, [pc, #568]	@ (800189c <KeyLogic+0x56c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b8e      	ldr	r3, [pc, #568]	@ (80018a0 <KeyLogic+0x570>)
 8001666:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_NUM&&							// {SEQ_PRESSED_P_NUM}:				P -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_PSWRD_SETPRICE}
 8001668:	429a      	cmp	r2, r3
 800166a:	d105      	bne.n	8001678 <KeyLogic+0x348>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 800166c:	4b8a      	ldr	r3, [pc, #552]	@ (8001898 <KeyLogic+0x568>)
 800166e:	2209      	movs	r2, #9
 8001670:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001672:	f7ff fe3f 	bl	80012f4 <IdleEnv>
 8001676:	e13d      	b.n	80018f4 <KeyLogic+0x5c4>
				}else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){					//  {SEQ_PRESSED_P_PSWRD_SETPRICE}: P -> [PSSWRD] -> E -> [PRICE] -> E to set currPrice and apply roundPrice settings
 8001678:	4b87      	ldr	r3, [pc, #540]	@ (8001898 <KeyLogic+0x568>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b09      	cmp	r3, #9
 800167e:	d16c      	bne.n	800175a <KeyLogic+0x42a>
					currPrice = accumulatedNumber;
 8001680:	4b86      	ldr	r3, [pc, #536]	@ (800189c <KeyLogic+0x56c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a87      	ldr	r2, [pc, #540]	@ (80018a4 <KeyLogic+0x574>)
 8001686:	6013      	str	r3, [r2, #0]
					switch (currentPriceState){
 8001688:	4b87      	ldr	r3, [pc, #540]	@ (80018a8 <KeyLogic+0x578>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <KeyLogic+0x366>
 8001690:	2b01      	cmp	r3, #1
 8001692:	d02d      	beq.n	80016f0 <KeyLogic+0x3c0>
 8001694:	e059      	b.n	800174a <KeyLogic+0x41a>
							if(currPrice%50<25){
 8001696:	4b83      	ldr	r3, [pc, #524]	@ (80018a4 <KeyLogic+0x574>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b84      	ldr	r3, [pc, #528]	@ (80018ac <KeyLogic+0x57c>)
 800169c:	fba3 1302 	umull	r1, r3, r3, r2
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	2132      	movs	r1, #50	@ 0x32
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b18      	cmp	r3, #24
 80016ac:	d80f      	bhi.n	80016ce <KeyLogic+0x39e>
								roundedPrice=currPrice-(currPrice%50);
 80016ae:	4b7d      	ldr	r3, [pc, #500]	@ (80018a4 <KeyLogic+0x574>)
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	4b7c      	ldr	r3, [pc, #496]	@ (80018a4 <KeyLogic+0x574>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b7d      	ldr	r3, [pc, #500]	@ (80018ac <KeyLogic+0x57c>)
 80016b8:	fba3 0302 	umull	r0, r3, r3, r2
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	2032      	movs	r0, #50	@ 0x32
 80016c0:	fb00 f303 	mul.w	r3, r0, r3
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	4a79      	ldr	r2, [pc, #484]	@ (80018b0 <KeyLogic+0x580>)
 80016ca:	6013      	str	r3, [r2, #0]
							break;
 80016cc:	e042      	b.n	8001754 <KeyLogic+0x424>
								roundedPrice=currPrice-(currPrice%50)+50;
 80016ce:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <KeyLogic+0x574>)
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	4b74      	ldr	r3, [pc, #464]	@ (80018a4 <KeyLogic+0x574>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b75      	ldr	r3, [pc, #468]	@ (80018ac <KeyLogic+0x57c>)
 80016d8:	fba3 0302 	umull	r0, r3, r3, r2
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	2032      	movs	r0, #50	@ 0x32
 80016e0:	fb00 f303 	mul.w	r3, r0, r3
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	3332      	adds	r3, #50	@ 0x32
 80016ea:	4a71      	ldr	r2, [pc, #452]	@ (80018b0 <KeyLogic+0x580>)
 80016ec:	6013      	str	r3, [r2, #0]
							break;
 80016ee:	e031      	b.n	8001754 <KeyLogic+0x424>
							if(currPrice%100<50){
 80016f0:	4b6c      	ldr	r3, [pc, #432]	@ (80018a4 <KeyLogic+0x574>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b6d      	ldr	r3, [pc, #436]	@ (80018ac <KeyLogic+0x57c>)
 80016f6:	fba3 1302 	umull	r1, r3, r3, r2
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2164      	movs	r1, #100	@ 0x64
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b31      	cmp	r3, #49	@ 0x31
 8001706:	d80f      	bhi.n	8001728 <KeyLogic+0x3f8>
								roundedPrice=currPrice-(currPrice%100);
 8001708:	4b66      	ldr	r3, [pc, #408]	@ (80018a4 <KeyLogic+0x574>)
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	4b65      	ldr	r3, [pc, #404]	@ (80018a4 <KeyLogic+0x574>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b66      	ldr	r3, [pc, #408]	@ (80018ac <KeyLogic+0x57c>)
 8001712:	fba3 0302 	umull	r0, r3, r3, r2
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2064      	movs	r0, #100	@ 0x64
 800171a:	fb00 f303 	mul.w	r3, r0, r3
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	1acb      	subs	r3, r1, r3
 8001722:	4a63      	ldr	r2, [pc, #396]	@ (80018b0 <KeyLogic+0x580>)
 8001724:	6013      	str	r3, [r2, #0]
							break;
 8001726:	e015      	b.n	8001754 <KeyLogic+0x424>
								roundedPrice=currPrice-(currPrice%100)+100;
 8001728:	4b5e      	ldr	r3, [pc, #376]	@ (80018a4 <KeyLogic+0x574>)
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	4b5d      	ldr	r3, [pc, #372]	@ (80018a4 <KeyLogic+0x574>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b5e      	ldr	r3, [pc, #376]	@ (80018ac <KeyLogic+0x57c>)
 8001732:	fba3 0302 	umull	r0, r3, r3, r2
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2064      	movs	r0, #100	@ 0x64
 800173a:	fb00 f303 	mul.w	r3, r0, r3
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	1acb      	subs	r3, r1, r3
 8001742:	3364      	adds	r3, #100	@ 0x64
 8001744:	4a5a      	ldr	r2, [pc, #360]	@ (80018b0 <KeyLogic+0x580>)
 8001746:	6013      	str	r3, [r2, #0]
							break;
 8001748:	e004      	b.n	8001754 <KeyLogic+0x424>
							roundedPrice=currPrice;
 800174a:	4b56      	ldr	r3, [pc, #344]	@ (80018a4 <KeyLogic+0x574>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <KeyLogic+0x580>)
 8001750:	6013      	str	r3, [r2, #0]
							break;
 8001752:	bf00      	nop
					setIdle();
 8001754:	f7ff fde0 	bl	8001318 <setIdle>
				break;
 8001758:	e18d      	b.n	8001a76 <KeyLogic+0x746>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&						// {SEQ_PRESSED_P_F2_PSWRD}:		P -> F2 -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_F2_PSWRD_ROUND}
 800175a:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <KeyLogic+0x568>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b06      	cmp	r3, #6
 8001760:	d10b      	bne.n	800177a <KeyLogic+0x44a>
						accumulatedNumber==password){
 8001762:	4b4e      	ldr	r3, [pc, #312]	@ (800189c <KeyLogic+0x56c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b4e      	ldr	r3, [pc, #312]	@ (80018a0 <KeyLogic+0x570>)
 8001768:	681b      	ldr	r3, [r3, #0]
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD&&						// {SEQ_PRESSED_P_F2_PSWRD}:		P -> F2 -> [PSSWRD] -> E to go to {SEQ_PRESSED_P_F2_PSWRD_ROUND}
 800176a:	429a      	cmp	r2, r3
 800176c:	d105      	bne.n	800177a <KeyLogic+0x44a>
					seqState = SEQ_PRESSED_P_F2_PSWRD_ROUND;
 800176e:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <KeyLogic+0x568>)
 8001770:	2207      	movs	r2, #7
 8001772:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 8001774:	f7ff fdbe 	bl	80012f4 <IdleEnv>
 8001778:	e0bc      	b.n	80018f4 <KeyLogic+0x5c4>
				}else if (seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){				// {SEQ_PRESSED_P_F2_PSWRD_ROUND}:	P -> F2 -> [PSSWRD] -> E -> [0|1|2] -> E to confirm roundPrice
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <KeyLogic+0x568>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b07      	cmp	r3, #7
 8001780:	d176      	bne.n	8001870 <KeyLogic+0x540>
					switch(accumulatedNumber){
 8001782:	4b46      	ldr	r3, [pc, #280]	@ (800189c <KeyLogic+0x56c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d066      	beq.n	8001858 <KeyLogic+0x528>
 800178a:	2b02      	cmp	r3, #2
 800178c:	d86c      	bhi.n	8001868 <KeyLogic+0x538>
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <KeyLogic+0x468>
 8001792:	2b01      	cmp	r3, #1
 8001794:	d030      	beq.n	80017f8 <KeyLogic+0x4c8>
							break;
 8001796:	e067      	b.n	8001868 <KeyLogic+0x538>
							if(currPrice%50<25){
 8001798:	4b42      	ldr	r3, [pc, #264]	@ (80018a4 <KeyLogic+0x574>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <KeyLogic+0x57c>)
 800179e:	fba3 1302 	umull	r1, r3, r3, r2
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	2132      	movs	r1, #50	@ 0x32
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b18      	cmp	r3, #24
 80017ae:	d80f      	bhi.n	80017d0 <KeyLogic+0x4a0>
								roundedPrice=currPrice-(currPrice%50);
 80017b0:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <KeyLogic+0x574>)
 80017b2:	6819      	ldr	r1, [r3, #0]
 80017b4:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <KeyLogic+0x574>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <KeyLogic+0x57c>)
 80017ba:	fba3 0302 	umull	r0, r3, r3, r2
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	2032      	movs	r0, #50	@ 0x32
 80017c2:	fb00 f303 	mul.w	r3, r0, r3
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	1acb      	subs	r3, r1, r3
 80017ca:	4a39      	ldr	r2, [pc, #228]	@ (80018b0 <KeyLogic+0x580>)
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00f      	b.n	80017f0 <KeyLogic+0x4c0>
								roundedPrice=currPrice-(currPrice%50)+50;
 80017d0:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <KeyLogic+0x574>)
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	4b33      	ldr	r3, [pc, #204]	@ (80018a4 <KeyLogic+0x574>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <KeyLogic+0x57c>)
 80017da:	fba3 0302 	umull	r0, r3, r3, r2
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	2032      	movs	r0, #50	@ 0x32
 80017e2:	fb00 f303 	mul.w	r3, r0, r3
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	1acb      	subs	r3, r1, r3
 80017ea:	3332      	adds	r3, #50	@ 0x32
 80017ec:	4a30      	ldr	r2, [pc, #192]	@ (80018b0 <KeyLogic+0x580>)
 80017ee:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_50;
 80017f0:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <KeyLogic+0x578>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
							break;
 80017f6:	e038      	b.n	800186a <KeyLogic+0x53a>
							if(currPrice%100<50){
 80017f8:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <KeyLogic+0x574>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <KeyLogic+0x57c>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2164      	movs	r1, #100	@ 0x64
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b31      	cmp	r3, #49	@ 0x31
 800180e:	d80f      	bhi.n	8001830 <KeyLogic+0x500>
								roundedPrice=currPrice-(currPrice%100);
 8001810:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <KeyLogic+0x574>)
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <KeyLogic+0x574>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <KeyLogic+0x57c>)
 800181a:	fba3 0302 	umull	r0, r3, r3, r2
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2064      	movs	r0, #100	@ 0x64
 8001822:	fb00 f303 	mul.w	r3, r0, r3
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	1acb      	subs	r3, r1, r3
 800182a:	4a21      	ldr	r2, [pc, #132]	@ (80018b0 <KeyLogic+0x580>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00f      	b.n	8001850 <KeyLogic+0x520>
								roundedPrice=currPrice-(currPrice%100)+100;
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <KeyLogic+0x574>)
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <KeyLogic+0x574>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <KeyLogic+0x57c>)
 800183a:	fba3 0302 	umull	r0, r3, r3, r2
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2064      	movs	r0, #100	@ 0x64
 8001842:	fb00 f303 	mul.w	r3, r0, r3
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	3364      	adds	r3, #100	@ 0x64
 800184c:	4a18      	ldr	r2, [pc, #96]	@ (80018b0 <KeyLogic+0x580>)
 800184e:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_ROUND_100;
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <KeyLogic+0x578>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
							break;
 8001856:	e008      	b.n	800186a <KeyLogic+0x53a>
							roundedPrice=currPrice;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <KeyLogic+0x574>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <KeyLogic+0x580>)
 800185e:	6013      	str	r3, [r2, #0]
							currentPriceState=PRICE_DEFAULT;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <KeyLogic+0x578>)
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
							break;
 8001866:	e000      	b.n	800186a <KeyLogic+0x53a>
							break;
 8001868:	bf00      	nop
					setIdle();
 800186a:	f7ff fd55 	bl	8001318 <setIdle>
				break;
 800186e:	e102      	b.n	8001a76 <KeyLogic+0x746>
				}else if(seqState == SEQ_PRESSED_T_F4&&    							// {SEQ_PRESSED_T_F4}: T -> F4 -> [PSSWRD] -> E to delete totalLitersShift
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <KeyLogic+0x568>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b0e      	cmp	r3, #14
 8001876:	d11f      	bne.n	80018b8 <KeyLogic+0x588>
						accumulatedNumber == password){
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <KeyLogic+0x56c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <KeyLogic+0x570>)
 800187e:	681b      	ldr	r3, [r3, #0]
				}else if(seqState == SEQ_PRESSED_T_F4&&    							// {SEQ_PRESSED_T_F4}: T -> F4 -> [PSSWRD] -> E to delete totalLitersShift
 8001880:	429a      	cmp	r2, r3
 8001882:	d119      	bne.n	80018b8 <KeyLogic+0x588>
					seqState = SEQ_PRESSED_T_F4_PASSWORD;
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <KeyLogic+0x568>)
 8001886:	220f      	movs	r2, #15
 8001888:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 800188a:	f7ff fd33 	bl	80012f4 <IdleEnv>
					totalLitersShift = 0;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <KeyLogic+0x584>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e02e      	b.n	80018f4 <KeyLogic+0x5c4>
 8001896:	bf00      	nop
 8001898:	200000ee 	.word	0x200000ee
 800189c:	200000dc 	.word	0x200000dc
 80018a0:	20000040 	.word	0x20000040
 80018a4:	2000004c 	.word	0x2000004c
 80018a8:	200000ec 	.word	0x200000ec
 80018ac:	51eb851f 	.word	0x51eb851f
 80018b0:	20000050 	.word	0x20000050
 80018b4:	20000048 	.word	0x20000048
				}else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80018b8:	4b72      	ldr	r3, [pc, #456]	@ (8001a84 <KeyLogic+0x754>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d10b      	bne.n	80018d8 <KeyLogic+0x5a8>
						accumulatedNumber == password){
 80018c0:	4b71      	ldr	r3, [pc, #452]	@ (8001a88 <KeyLogic+0x758>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b71      	ldr	r3, [pc, #452]	@ (8001a8c <KeyLogic+0x75c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
				}else if(seqState == SEQ_ENTER_OLD_PASSWORD&&
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d105      	bne.n	80018d8 <KeyLogic+0x5a8>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 80018cc:	4b6d      	ldr	r3, [pc, #436]	@ (8001a84 <KeyLogic+0x754>)
 80018ce:	2203      	movs	r2, #3
 80018d0:	701a      	strb	r2, [r3, #0]
					IdleEnv();
 80018d2:	f7ff fd0f 	bl	80012f4 <IdleEnv>
 80018d6:	e00d      	b.n	80018f4 <KeyLogic+0x5c4>
				}else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 80018d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <KeyLogic+0x754>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d106      	bne.n	80018ee <KeyLogic+0x5be>
					password = accumulatedNumber;
 80018e0:	4b69      	ldr	r3, [pc, #420]	@ (8001a88 <KeyLogic+0x758>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a69      	ldr	r2, [pc, #420]	@ (8001a8c <KeyLogic+0x75c>)
 80018e6:	6013      	str	r3, [r2, #0]
					setIdle();
 80018e8:	f7ff fd16 	bl	8001318 <setIdle>
				break;
 80018ec:	e0c3      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 80018ee:	f7ff fd13 	bl	8001318 <setIdle>
				break;
 80018f2:	e0c0      	b.n	8001a76 <KeyLogic+0x746>
 80018f4:	e0bf      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 80018f6:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <KeyLogic+0x754>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <KeyLogic+0x5d6>
					seqState = SEQ_PRESSED_P;
 80018fe:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <KeyLogic+0x754>)
 8001900:	2205      	movs	r2, #5
 8001902:	701a      	strb	r2, [r3, #0]
				} else {
					setIdle();
				}
				break;
 8001904:	e0b7      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 8001906:	f7ff fd07 	bl	8001318 <setIdle>
				break;
 800190a:	e0b4      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 800190c:	4b5d      	ldr	r3, [pc, #372]	@ (8001a84 <KeyLogic+0x754>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d103      	bne.n	800191c <KeyLogic+0x5ec>
					seqState = SEQ_PRESSED_T;
 8001914:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <KeyLogic+0x754>)
 8001916:	220a      	movs	r2, #10
 8001918:	701a      	strb	r2, [r3, #0]
				} else {
					setIdle();
				}
				break;
 800191a:	e0ac      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 800191c:	f7ff fcfc 	bl	8001318 <setIdle>
				break;
 8001920:	e0a9      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_IDLE) {
 8001922:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <KeyLogic+0x754>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <KeyLogic+0x602>
					seqState = SEQ_PRESSED_$;
 800192a:	4b56      	ldr	r3, [pc, #344]	@ (8001a84 <KeyLogic+0x754>)
 800192c:	2211      	movs	r2, #17
 800192e:	701a      	strb	r2, [r3, #0]
				}else if (seqState == SEQ_PRESSED_T) {
					seqState = SEQ_PRESSED_T_$;
				} else {
					setIdle();
				}
				break;
 8001930:	e0a1      	b.n	8001a76 <KeyLogic+0x746>
				}else if (seqState == SEQ_PRESSED_T) {
 8001932:	4b54      	ldr	r3, [pc, #336]	@ (8001a84 <KeyLogic+0x754>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b0a      	cmp	r3, #10
 8001938:	d103      	bne.n	8001942 <KeyLogic+0x612>
					seqState = SEQ_PRESSED_T_$;
 800193a:	4b52      	ldr	r3, [pc, #328]	@ (8001a84 <KeyLogic+0x754>)
 800193c:	220c      	movs	r2, #12
 800193e:	701a      	strb	r2, [r3, #0]
				break;
 8001940:	e099      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 8001942:	f7ff fce9 	bl	8001318 <setIdle>
				break;
 8001946:	e096      	b.n	8001a76 <KeyLogic+0x746>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_IDLE) {
 8001948:	4b4e      	ldr	r3, [pc, #312]	@ (8001a84 <KeyLogic+0x754>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d103      	bne.n	8001958 <KeyLogic+0x628>
					seqState = SEQ_PRESSED_L;
 8001950:	4b4c      	ldr	r3, [pc, #304]	@ (8001a84 <KeyLogic+0x754>)
 8001952:	2210      	movs	r2, #16
 8001954:	701a      	strb	r2, [r3, #0]
				} else if (seqState == SEQ_PRESSED_T) {
					seqState = SEQ_PRESSED_T_L;
				} else {
					setIdle();
				}
				break;
 8001956:	e08e      	b.n	8001a76 <KeyLogic+0x746>
				} else if (seqState == SEQ_PRESSED_T) {
 8001958:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <KeyLogic+0x754>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d103      	bne.n	8001968 <KeyLogic+0x638>
					seqState = SEQ_PRESSED_T_L;
 8001960:	4b48      	ldr	r3, [pc, #288]	@ (8001a84 <KeyLogic+0x754>)
 8001962:	220b      	movs	r2, #11
 8001964:	701a      	strb	r2, [r3, #0]
				break;
 8001966:	e086      	b.n	8001a76 <KeyLogic+0x746>
					setIdle();
 8001968:	f7ff fcd6 	bl	8001318 <setIdle>
				break;
 800196c:	e083      	b.n	8001a76 <KeyLogic+0x746>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 800196e:	4b48      	ldr	r3, [pc, #288]	@ (8001a90 <KeyLogic+0x760>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b2f      	cmp	r3, #47	@ 0x2f
 8001974:	d97a      	bls.n	8001a6c <KeyLogic+0x73c>
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <KeyLogic+0x760>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b39      	cmp	r3, #57	@ 0x39
 800197c:	d876      	bhi.n	8001a6c <KeyLogic+0x73c>
					if(seqState==SEQ_PRESSED_P){
 800197e:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <KeyLogic+0x754>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d10c      	bne.n	80019a0 <KeyLogic+0x670>
						seqState=SEQ_PRESSED_P_NUM;
 8001986:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <KeyLogic+0x754>)
 8001988:	2208      	movs	r2, #8
 800198a:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 800198c:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <KeyLogic+0x760>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3b30      	subs	r3, #48	@ 0x30
 8001992:	461a      	mov	r2, r3
 8001994:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <KeyLogic+0x758>)
 8001996:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <KeyLogic+0x764>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 800199e:	e068      	b.n	8001a72 <KeyLogic+0x742>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 80019a0:	4b38      	ldr	r3, [pc, #224]	@ (8001a84 <KeyLogic+0x754>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d01f      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 80019a8:	4b36      	ldr	r3, [pc, #216]	@ (8001a84 <KeyLogic+0x754>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 80019ac:	2b06      	cmp	r3, #6
 80019ae:	d01b      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <KeyLogic+0x754>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_F2_PSWRD ||
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d017      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_PRESSED_T_F4||
 80019b8:	4b32      	ldr	r3, [pc, #200]	@ (8001a84 <KeyLogic+0x754>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 80019bc:	2b0e      	cmp	r3, #14
 80019be:	d013      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 80019c0:	4b30      	ldr	r3, [pc, #192]	@ (8001a84 <KeyLogic+0x754>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_T_F4||
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d00f      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 80019c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <KeyLogic+0x754>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d00b      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_NUMBER ||
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <KeyLogic+0x754>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d007      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_PRESSED_$||
 80019d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a84 <KeyLogic+0x754>)
 80019da:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_NUMBER ||
 80019dc:	2b11      	cmp	r3, #17
 80019de:	d003      	beq.n	80019e8 <KeyLogic+0x6b8>
							seqState == SEQ_PRESSED_L
 80019e0:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <KeyLogic+0x754>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_$||
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d117      	bne.n	8001a18 <KeyLogic+0x6e8>
							) {
						if (numberOfDigits < 6) {
 80019e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <KeyLogic+0x764>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d83c      	bhi.n	8001a6a <KeyLogic+0x73a>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 80019f0:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <KeyLogic+0x758>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <KeyLogic+0x760>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	3b30      	subs	r3, #48	@ 0x30
 8001a06:	4a20      	ldr	r2, [pc, #128]	@ (8001a88 <KeyLogic+0x758>)
 8001a08:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001a0a:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <KeyLogic+0x764>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <KeyLogic+0x764>)
 8001a14:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8001a16:	e028      	b.n	8001a6a <KeyLogic+0x73a>
						}
					}else if(seqState == SEQ_PRESSED_P_F2_PSWRD_ROUND){
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <KeyLogic+0x754>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	d117      	bne.n	8001a50 <KeyLogic+0x720>
						if (numberOfDigits < 1) {
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <KeyLogic+0x764>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d124      	bne.n	8001a72 <KeyLogic+0x742>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <KeyLogic+0x758>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <KeyLogic+0x760>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b30      	subs	r3, #48	@ 0x30
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <KeyLogic+0x758>)
 8001a40:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <KeyLogic+0x764>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <KeyLogic+0x764>)
 8001a4c:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001a4e:	e010      	b.n	8001a72 <KeyLogic+0x742>
						}
					}else{
						seqState = SEQ_NUMBER;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <KeyLogic+0x754>)
 8001a52:	2204      	movs	r2, #4
 8001a54:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <KeyLogic+0x760>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3b30      	subs	r3, #48	@ 0x30
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <KeyLogic+0x758>)
 8001a60:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <KeyLogic+0x764>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8001a68:	e003      	b.n	8001a72 <KeyLogic+0x742>
 8001a6a:	e002      	b.n	8001a72 <KeyLogic+0x742>
					}
				}else{
					setIdle();
 8001a6c:	f7ff fc54 	bl	8001318 <setIdle>
				}
				break;
 8001a70:	e000      	b.n	8001a74 <KeyLogic+0x744>
					if(seqState==SEQ_PRESSED_P){
 8001a72:	bf00      	nop
				break;
 8001a74:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <KeyLogic+0x760>)
 8001a78:	22ff      	movs	r2, #255	@ 0xff
 8001a7a:	701a      	strb	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200000ee 	.word	0x200000ee
 8001a88:	200000dc 	.word	0x200000dc
 8001a8c:	20000040 	.word	0x20000040
 8001a90:	20000000 	.word	0x20000000
 8001a94:	200000e0 	.word	0x200000e0

08001a98 <KeyLogic_Action>:
//																													//
//												KEY LOGIC ACTION FSM												//
//																													//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void KeyLogic_Action() {
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b08f      	sub	sp, #60	@ 0x3c
 8001a9c:	af02      	add	r7, sp, #8
    char buffer[7];
    switch (seqState) {
 8001a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8001d14 <KeyLogic_Action+0x27c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b11      	cmp	r3, #17
 8001aa4:	f200 8300 	bhi.w	80020a8 <KeyLogic_Action+0x610>
 8001aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <KeyLogic_Action+0x18>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001af9 	.word	0x08001af9
 8001ab4:	08001b25 	.word	0x08001b25
 8001ab8:	08001b4b 	.word	0x08001b4b
 8001abc:	08001b89 	.word	0x08001b89
 8001ac0:	08001f49 	.word	0x08001f49
 8001ac4:	08001bc7 	.word	0x08001bc7
 8001ac8:	08001bed 	.word	0x08001bed
 8001acc:	08001c13 	.word	0x08001c13
 8001ad0:	08001c33 	.word	0x08001c33
 8001ad4:	08001c59 	.word	0x08001c59
 8001ad8:	08001c7f 	.word	0x08001c7f
 8001adc:	08001dfb 	.word	0x08001dfb
 8001ae0:	08001ca5 	.word	0x08001ca5
 8001ae4:	08001edd 	.word	0x08001edd
 8001ae8:	08001f03 	.word	0x08001f03
 8001aec:	08001f29 	.word	0x08001f29
 8001af0:	08001fbd 	.word	0x08001fbd
 8001af4:	08001f89 	.word	0x08001f89
        case SEQ_IDLE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001af8:	2300      	movs	r3, #0
 8001afa:	4a87      	ldr	r2, [pc, #540]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001afc:	2107      	movs	r1, #7
 8001afe:	4887      	ldr	r0, [pc, #540]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001b00:	f005 fbb2 	bl	8007268 <sniprintf>
        	snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", orderPrice);
 8001b04:	4b86      	ldr	r3, [pc, #536]	@ (8001d20 <KeyLogic_Action+0x288>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a86      	ldr	r2, [pc, #536]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001b0a:	2107      	movs	r1, #7
 8001b0c:	4886      	ldr	r0, [pc, #536]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001b0e:	f005 fbab 	bl	8007268 <sniprintf>
        	formatFloat(orderLiter, SevenSegBuffer[2]);
 8001b12:	4b86      	ldr	r3, [pc, #536]	@ (8001d2c <KeyLogic_Action+0x294>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	4885      	ldr	r0, [pc, #532]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	f7ff fb63 	bl	80011e8 <formatFloat>
            break;
 8001b22:	e2d9      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8001b24:	4a83      	ldr	r2, [pc, #524]	@ (8001d34 <KeyLogic_Action+0x29c>)
 8001b26:	2107      	movs	r1, #7
 8001b28:	487c      	ldr	r0, [pc, #496]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001b2a:	f005 fb9d 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", roundedPrice);
 8001b2e:	4b82      	ldr	r3, [pc, #520]	@ (8001d38 <KeyLogic_Action+0x2a0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7c      	ldr	r2, [pc, #496]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001b34:	2107      	movs	r1, #7
 8001b36:	487c      	ldr	r0, [pc, #496]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001b38:	f005 fb96 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4a76      	ldr	r2, [pc, #472]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001b40:	2107      	movs	r1, #7
 8001b42:	487b      	ldr	r0, [pc, #492]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001b44:	f005 fb90 	bl	8007268 <sniprintf>
			break;
 8001b48:	e2c6      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <KeyLogic_Action+0x2a4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f107 0020 	add.w	r0, r7, #32
 8001b52:	4a74      	ldr	r2, [pc, #464]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001b54:	2107      	movs	r1, #7
 8001b56:	f005 fb87 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	4a78      	ldr	r2, [pc, #480]	@ (8001d40 <KeyLogic_Action+0x2a8>)
 8001b60:	2107      	movs	r1, #7
 8001b62:	486e      	ldr	r0, [pc, #440]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001b64:	f005 fb80 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8001b68:	4a76      	ldr	r2, [pc, #472]	@ (8001d44 <KeyLogic_Action+0x2ac>)
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	486e      	ldr	r0, [pc, #440]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001b6e:	f005 fb7b 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001b72:	2300      	movs	r3, #0
 8001b74:	4a68      	ldr	r2, [pc, #416]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001b76:	2107      	movs	r1, #7
 8001b78:	486d      	ldr	r0, [pc, #436]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001b7a:	f005 fb75 	bl	8007268 <sniprintf>
            LEDPointFlag = -1;
 8001b7e:	4b72      	ldr	r3, [pc, #456]	@ (8001d48 <KeyLogic_Action+0x2b0>)
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b84:	601a      	str	r2, [r3, #0]
            break;
 8001b86:	e2a7      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001b88:	4b6c      	ldr	r3, [pc, #432]	@ (8001d3c <KeyLogic_Action+0x2a4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f107 0020 	add.w	r0, r7, #32
 8001b90:	4a64      	ldr	r2, [pc, #400]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001b92:	2107      	movs	r1, #7
 8001b94:	f005 fb68 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	4a68      	ldr	r2, [pc, #416]	@ (8001d40 <KeyLogic_Action+0x2a8>)
 8001b9e:	2107      	movs	r1, #7
 8001ba0:	485e      	ldr	r0, [pc, #376]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001ba2:	f005 fb61 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001baa:	2107      	movs	r1, #7
 8001bac:	485e      	ldr	r0, [pc, #376]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001bae:	f005 fb5b 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8001bb2:	4a66      	ldr	r2, [pc, #408]	@ (8001d4c <KeyLogic_Action+0x2b4>)
 8001bb4:	2107      	movs	r1, #7
 8001bb6:	485e      	ldr	r0, [pc, #376]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001bb8:	f005 fb56 	bl	8007268 <sniprintf>
            LEDPointFlag = -1;
 8001bbc:	4b62      	ldr	r3, [pc, #392]	@ (8001d48 <KeyLogic_Action+0x2b0>)
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc2:	601a      	str	r2, [r3, #0]
            break;
 8001bc4:	e288      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d3c <KeyLogic_Action+0x2a4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a56      	ldr	r2, [pc, #344]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001bcc:	2107      	movs	r1, #7
 8001bce:	4853      	ldr	r0, [pc, #332]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001bd0:	f005 fb4a 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001bd8:	2107      	movs	r1, #7
 8001bda:	4853      	ldr	r0, [pc, #332]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001bdc:	f005 fb44 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8001be0:	4a5b      	ldr	r2, [pc, #364]	@ (8001d50 <KeyLogic_Action+0x2b8>)
 8001be2:	2107      	movs	r1, #7
 8001be4:	4852      	ldr	r0, [pc, #328]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001be6:	f005 fb3f 	bl	8007268 <sniprintf>
			break;
 8001bea:	e275      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_F2_PSWRD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <KeyLogic_Action+0x2a4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001bf2:	2107      	movs	r1, #7
 8001bf4:	4849      	ldr	r0, [pc, #292]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001bf6:	f005 fb37 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	4a46      	ldr	r2, [pc, #280]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001bfe:	2107      	movs	r1, #7
 8001c00:	4849      	ldr	r0, [pc, #292]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001c02:	f005 fb31 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SL ARO");
 8001c06:	4a53      	ldr	r2, [pc, #332]	@ (8001d54 <KeyLogic_Action+0x2bc>)
 8001c08:	2107      	movs	r1, #7
 8001c0a:	4849      	ldr	r0, [pc, #292]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001c0c:	f005 fb2c 	bl	8007268 <sniprintf>
			break;
 8001c10:	e262      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_F2_PSWRD_ROUND:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "0.  50");
 8001c12:	4a51      	ldr	r2, [pc, #324]	@ (8001d58 <KeyLogic_Action+0x2c0>)
 8001c14:	2107      	movs	r1, #7
 8001c16:	4841      	ldr	r0, [pc, #260]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001c18:	f005 fb26 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "1. 100");
 8001c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d5c <KeyLogic_Action+0x2c4>)
 8001c1e:	2107      	movs	r1, #7
 8001c20:	4841      	ldr	r0, [pc, #260]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001c22:	f005 fb21 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "2. 1..");
 8001c26:	4a4e      	ldr	r2, [pc, #312]	@ (8001d60 <KeyLogic_Action+0x2c8>)
 8001c28:	2107      	movs	r1, #7
 8001c2a:	4841      	ldr	r0, [pc, #260]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001c2c:	f005 fb1c 	bl	8007268 <sniprintf>
			break;
 8001c30:	e252      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <KeyLogic_Action+0x2a4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a3b      	ldr	r2, [pc, #236]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001c38:	2107      	movs	r1, #7
 8001c3a:	4838      	ldr	r0, [pc, #224]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001c3c:	f005 fb14 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001c40:	2300      	movs	r3, #0
 8001c42:	4a35      	ldr	r2, [pc, #212]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001c44:	2107      	movs	r1, #7
 8001c46:	4838      	ldr	r0, [pc, #224]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001c48:	f005 fb0e 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8001c4c:	4a45      	ldr	r2, [pc, #276]	@ (8001d64 <KeyLogic_Action+0x2cc>)
 8001c4e:	2107      	movs	r1, #7
 8001c50:	4837      	ldr	r0, [pc, #220]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001c52:	f005 fb09 	bl	8007268 <sniprintf>
            break;
 8001c56:	e23f      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001c58:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <KeyLogic_Action+0x2a4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001c5e:	2107      	movs	r1, #7
 8001c60:	482e      	ldr	r0, [pc, #184]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001c62:	f005 fb01 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001c66:	2300      	movs	r3, #0
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	482e      	ldr	r0, [pc, #184]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001c6e:	f005 fafb 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001c72:	4a30      	ldr	r2, [pc, #192]	@ (8001d34 <KeyLogic_Action+0x29c>)
 8001c74:	2107      	movs	r1, #7
 8001c76:	482e      	ldr	r0, [pc, #184]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001c78:	f005 faf6 	bl	8007268 <sniprintf>
            break;
 8001c7c:	e22c      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	4a25      	ldr	r2, [pc, #148]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001c82:	2107      	movs	r1, #7
 8001c84:	4825      	ldr	r0, [pc, #148]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001c86:	f005 faef 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001c8e:	2107      	movs	r1, #7
 8001c90:	4825      	ldr	r0, [pc, #148]	@ (8001d28 <KeyLogic_Action+0x290>)
 8001c92:	f005 fae9 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8001c96:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <KeyLogic_Action+0x2d0>)
 8001c98:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <KeyLogic_Action+0x280>)
 8001c9a:	2107      	movs	r1, #7
 8001c9c:	4824      	ldr	r0, [pc, #144]	@ (8001d30 <KeyLogic_Action+0x298>)
 8001c9e:	f005 fae3 	bl	8007268 <sniprintf>
            break;
 8001ca2:	e219      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8001ca4:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <KeyLogic_Action+0x2d4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a31      	ldr	r2, [pc, #196]	@ (8001d70 <KeyLogic_Action+0x2d8>)
 8001caa:	4932      	ldr	r1, [pc, #200]	@ (8001d74 <KeyLogic_Action+0x2dc>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fa63 	bl	8001178 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8001cb2:	4b30      	ldr	r3, [pc, #192]	@ (8001d74 <KeyLogic_Action+0x2dc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f107 0018 	add.w	r0, r7, #24
 8001cba:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <KeyLogic_Action+0x28c>)
 8001cbc:	2107      	movs	r1, #7
 8001cbe:	f005 fad3 	bl	8007268 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <KeyLogic_Action+0x2dc>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <KeyLogic_Action+0x2e0>)
 8001cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ccc:	0b5b      	lsrs	r3, r3, #13
 8001cce:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f107 0010 	add.w	r0, r7, #16
 8001cdc:	4a27      	ldr	r2, [pc, #156]	@ (8001d7c <KeyLogic_Action+0x2e4>)
 8001cde:	2108      	movs	r1, #8
 8001ce0:	f005 fac2 	bl	8007268 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ce8:	e052      	b.n	8001d90 <KeyLogic_Action+0x2f8>
				if (i < strlen(combinedStrShift)) {
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fa76 	bl	80001e0 <strlen>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d941      	bls.n	8001d80 <KeyLogic_Action+0x2e8>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d02:	4413      	add	r3, r2
 8001d04:	7819      	ldrb	r1, [r3, #0]
 8001d06:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <KeyLogic_Action+0x284>)
 8001d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e03b      	b.n	8001d8a <KeyLogic_Action+0x2f2>
 8001d12:	bf00      	nop
 8001d14:	200000ee 	.word	0x200000ee
 8001d18:	08007ca4 	.word	0x08007ca4
 8001d1c:	20000028 	.word	0x20000028
 8001d20:	200001cc 	.word	0x200001cc
 8001d24:	08007cac 	.word	0x08007cac
 8001d28:	2000002f 	.word	0x2000002f
 8001d2c:	200001d0 	.word	0x200001d0
 8001d30:	20000036 	.word	0x20000036
 8001d34:	08007cb4 	.word	0x08007cb4
 8001d38:	20000050 	.word	0x20000050
 8001d3c:	200000dc 	.word	0x200000dc
 8001d40:	08007cbc 	.word	0x08007cbc
 8001d44:	08007cc0 	.word	0x08007cc0
 8001d48:	20000054 	.word	0x20000054
 8001d4c:	08007cc8 	.word	0x08007cc8
 8001d50:	08007cd0 	.word	0x08007cd0
 8001d54:	08007cd8 	.word	0x08007cd8
 8001d58:	08007ce0 	.word	0x08007ce0
 8001d5c:	08007ce8 	.word	0x08007ce8
 8001d60:	08007cf0 	.word	0x08007cf0
 8001d64:	08007cf8 	.word	0x08007cf8
 8001d68:	000f423f 	.word	0x000f423f
 8001d6c:	20000048 	.word	0x20000048
 8001d70:	200000e8 	.word	0x200000e8
 8001d74:	200000e4 	.word	0x200000e4
 8001d78:	d1b71759 	.word	0xd1b71759
 8001d7c:	08007d00 	.word	0x08007d00
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001d80:	4aad      	ldr	r2, [pc, #692]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d84:	4413      	add	r3, r2
 8001d86:	2220      	movs	r2, #32
 8001d88:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8001d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	dda9      	ble.n	8001cea <KeyLogic_Action+0x252>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001d96:	4ba9      	ldr	r3, [pc, #676]	@ (800203c <KeyLogic_Action+0x5a4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4aa9      	ldr	r2, [pc, #676]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001d9c:	2107      	movs	r1, #7
 8001d9e:	48a9      	ldr	r0, [pc, #676]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001da0:	f005 fa62 	bl	8007268 <sniprintf>

			numBlinkRow =1;
 8001da4:	4ba8      	ldr	r3, [pc, #672]	@ (8002048 <KeyLogic_Action+0x5b0>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "SHIFT "); // Set blink text
 8001daa:	4aa8      	ldr	r2, [pc, #672]	@ (800204c <KeyLogic_Action+0x5b4>)
 8001dac:	2107      	movs	r1, #7
 8001dae:	48a8      	ldr	r0, [pc, #672]	@ (8002050 <KeyLogic_Action+0x5b8>)
 8001db0:	f005 fa5a 	bl	8007268 <sniprintf>
			if (xBlinkTimer == NULL) {
 8001db4:	4ba7      	ldr	r3, [pc, #668]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f040 8188 	bne.w	80020ce <KeyLogic_Action+0x636>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 8001dbe:	4ba6      	ldr	r3, [pc, #664]	@ (8002058 <KeyLogic_Action+0x5c0>)
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001dca:	48a4      	ldr	r0, [pc, #656]	@ (800205c <KeyLogic_Action+0x5c4>)
 8001dcc:	f004 faa0 	bl	8006310 <xTimerCreate>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4aa0      	ldr	r2, [pc, #640]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001dd4:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8001dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8177 	beq.w	80020ce <KeyLogic_Action+0x636>
					xTimerStart(xBlinkTimer, 0);
 8001de0:	4b9c      	ldr	r3, [pc, #624]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001de2:	681c      	ldr	r4, [r3, #0]
 8001de4:	f003 fe20 	bl	8005a28 <xTaskGetTickCount>
 8001de8:	4602      	mov	r2, r0
 8001dea:	2300      	movs	r3, #0
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	2101      	movs	r1, #1
 8001df2:	4620      	mov	r0, r4
 8001df4:	f004 faea 	bl	80063cc <xTimerGenericCommand>
				}
			}

            break;
 8001df8:	e169      	b.n	80020ce <KeyLogic_Action+0x636>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 8001dfa:	4b99      	ldr	r3, [pc, #612]	@ (8002060 <KeyLogic_Action+0x5c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a8f      	ldr	r2, [pc, #572]	@ (800203c <KeyLogic_Action+0x5a4>)
 8001e00:	4998      	ldr	r1, [pc, #608]	@ (8002064 <KeyLogic_Action+0x5cc>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f96a 	bl	80010dc <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8001e08:	4b96      	ldr	r3, [pc, #600]	@ (8002064 <KeyLogic_Action+0x5cc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f107 0008 	add.w	r0, r7, #8
 8001e10:	4a8b      	ldr	r2, [pc, #556]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001e12:	2107      	movs	r1, #7
 8001e14:	f005 fa28 	bl	8007268 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8001e18:	4b92      	ldr	r3, [pc, #584]	@ (8002064 <KeyLogic_Action+0x5cc>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b92      	ldr	r3, [pc, #584]	@ (8002068 <KeyLogic_Action+0x5d0>)
 8001e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e22:	0b5b      	lsrs	r3, r3, #13
 8001e24:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	4638      	mov	r0, r7
 8001e30:	4a8e      	ldr	r2, [pc, #568]	@ (800206c <KeyLogic_Action+0x5d4>)
 8001e32:	2108      	movs	r1, #8
 8001e34:	f005 fa18 	bl	8007268 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3c:	e019      	b.n	8001e72 <KeyLogic_Action+0x3da>
                if (i < strlen(combinedStr)) {
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe f9cd 	bl	80001e0 <strlen>
 8001e46:	4602      	mov	r2, r0
 8001e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d909      	bls.n	8001e62 <KeyLogic_Action+0x3ca>
                    SevenSegBuffer[0][i] = combinedStr[i];
 8001e4e:	463a      	mov	r2, r7
 8001e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e52:	4413      	add	r3, r2
 8001e54:	7819      	ldrb	r1, [r3, #0]
 8001e56:	4a78      	ldr	r2, [pc, #480]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5a:	4413      	add	r3, r2
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	e004      	b.n	8001e6c <KeyLogic_Action+0x3d4>
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8001e62:	4a75      	ldr	r2, [pc, #468]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e66:	4413      	add	r3, r2
 8001e68:	2220      	movs	r2, #32
 8001e6a:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 8001e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6e:	3301      	adds	r3, #1
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	dde2      	ble.n	8001e3e <KeyLogic_Action+0x3a6>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001e78:	4b70      	ldr	r3, [pc, #448]	@ (800203c <KeyLogic_Action+0x5a4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a70      	ldr	r2, [pc, #448]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001e7e:	2107      	movs	r1, #7
 8001e80:	4870      	ldr	r0, [pc, #448]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001e82:	f005 f9f1 	bl	8007268 <sniprintf>

            numBlinkRow =1;
 8001e86:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <KeyLogic_Action+0x5b0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
			snprintf(blinkText, sizeof(blinkText), "TOTAL "); // Set blink text
 8001e8c:	4a78      	ldr	r2, [pc, #480]	@ (8002070 <KeyLogic_Action+0x5d8>)
 8001e8e:	2107      	movs	r1, #7
 8001e90:	486f      	ldr	r0, [pc, #444]	@ (8002050 <KeyLogic_Action+0x5b8>)
 8001e92:	f005 f9e9 	bl	8007268 <sniprintf>
			if (xBlinkTimer == NULL) {
 8001e96:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8119 	bne.w	80020d2 <KeyLogic_Action+0x63a>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	@ (8002058 <KeyLogic_Action+0x5c0>)
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001eac:	486b      	ldr	r0, [pc, #428]	@ (800205c <KeyLogic_Action+0x5c4>)
 8001eae:	f004 fa2f 	bl	8006310 <xTimerCreate>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a67      	ldr	r2, [pc, #412]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001eb6:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8001eb8:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 8108 	beq.w	80020d2 <KeyLogic_Action+0x63a>
					xTimerStart(xBlinkTimer, 0);
 8001ec2:	4b64      	ldr	r3, [pc, #400]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001ec4:	681c      	ldr	r4, [r3, #0]
 8001ec6:	f003 fdaf 	bl	8005a28 <xTaskGetTickCount>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f004 fa79 	bl	80063cc <xTimerGenericCommand>
				}
			}



            break;
 8001eda:	e0fa      	b.n	80020d2 <KeyLogic_Action+0x63a>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8001edc:	4b65      	ldr	r3, [pc, #404]	@ (8002074 <KeyLogic_Action+0x5dc>)
 8001ede:	4a66      	ldr	r2, [pc, #408]	@ (8002078 <KeyLogic_Action+0x5e0>)
 8001ee0:	2107      	movs	r1, #7
 8001ee2:	4855      	ldr	r0, [pc, #340]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001ee4:	f005 f9c0 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4a63      	ldr	r2, [pc, #396]	@ (8002078 <KeyLogic_Action+0x5e0>)
 8001eec:	2107      	movs	r1, #7
 8001eee:	4855      	ldr	r0, [pc, #340]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001ef0:	f005 f9ba 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4a60      	ldr	r2, [pc, #384]	@ (8002078 <KeyLogic_Action+0x5e0>)
 8001ef8:	2107      	movs	r1, #7
 8001efa:	4860      	ldr	r0, [pc, #384]	@ (800207c <KeyLogic_Action+0x5e4>)
 8001efc:	f005 f9b4 	bl	8007268 <sniprintf>
            break;
 8001f00:	e0ea      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T_F4:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8001f02:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <KeyLogic_Action+0x5e8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001f08:	2107      	movs	r1, #7
 8001f0a:	484b      	ldr	r0, [pc, #300]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001f0c:	f005 f9ac 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001f10:	2300      	movs	r3, #0
 8001f12:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <KeyLogic_Action+0x5e0>)
 8001f14:	2107      	movs	r1, #7
 8001f16:	484b      	ldr	r0, [pc, #300]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001f18:	f005 f9a6 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DELETE");
 8001f1c:	4a59      	ldr	r2, [pc, #356]	@ (8002084 <KeyLogic_Action+0x5ec>)
 8001f1e:	2107      	movs	r1, #7
 8001f20:	4856      	ldr	r0, [pc, #344]	@ (800207c <KeyLogic_Action+0x5e4>)
 8001f22:	f005 f9a1 	bl	8007268 <sniprintf>
            break;
 8001f26:	e0d7      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_T_F4_PASSWORD:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), " ");
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <KeyLogic_Action+0x5f0>)
 8001f2a:	2107      	movs	r1, #7
 8001f2c:	4842      	ldr	r0, [pc, #264]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001f2e:	f005 f99b 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), " ");
 8001f32:	4a55      	ldr	r2, [pc, #340]	@ (8002088 <KeyLogic_Action+0x5f0>)
 8001f34:	2107      	movs	r1, #7
 8001f36:	4843      	ldr	r0, [pc, #268]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001f38:	f005 f996 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "DONE ");
 8001f3c:	4a53      	ldr	r2, [pc, #332]	@ (800208c <KeyLogic_Action+0x5f4>)
 8001f3e:	2107      	movs	r1, #7
 8001f40:	484e      	ldr	r0, [pc, #312]	@ (800207c <KeyLogic_Action+0x5e4>)
 8001f42:	f005 f991 	bl	8007268 <sniprintf>
			break;
 8001f46:	e0c7      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001f48:	4b4d      	ldr	r3, [pc, #308]	@ (8002080 <KeyLogic_Action+0x5e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f107 0020 	add.w	r0, r7, #32
 8001f50:	4a3b      	ldr	r2, [pc, #236]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001f52:	2107      	movs	r1, #7
 8001f54:	f005 f988 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <KeyLogic_Action+0x5f8>)
 8001f5e:	2107      	movs	r1, #7
 8001f60:	4835      	ldr	r0, [pc, #212]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001f62:	f005 f981 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001f66:	2300      	movs	r3, #0
 8001f68:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <KeyLogic_Action+0x5e0>)
 8001f6a:	2107      	movs	r1, #7
 8001f6c:	4835      	ldr	r0, [pc, #212]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001f6e:	f005 f97b 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001f72:	2300      	movs	r3, #0
 8001f74:	4a40      	ldr	r2, [pc, #256]	@ (8002078 <KeyLogic_Action+0x5e0>)
 8001f76:	2107      	movs	r1, #7
 8001f78:	4840      	ldr	r0, [pc, #256]	@ (800207c <KeyLogic_Action+0x5e4>)
 8001f7a:	f005 f975 	bl	8007268 <sniprintf>
			LEDPointFlag = -1;
 8001f7e:	4b45      	ldr	r3, [pc, #276]	@ (8002094 <KeyLogic_Action+0x5fc>)
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f84:	601a      	str	r2, [r3, #0]
			break;
 8001f86:	e0a7      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_$:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001f88:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <KeyLogic_Action+0x5e8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f107 0020 	add.w	r0, r7, #32
 8001f90:	4a2b      	ldr	r2, [pc, #172]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001f92:	2107      	movs	r1, #7
 8001f94:	f005 f968 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8002090 <KeyLogic_Action+0x5f8>)
 8001f9e:	2107      	movs	r1, #7
 8001fa0:	4825      	ldr	r0, [pc, #148]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001fa2:	f005 f961 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8002098 <KeyLogic_Action+0x600>)
 8001fa8:	2107      	movs	r1, #7
 8001faa:	4826      	ldr	r0, [pc, #152]	@ (8002044 <KeyLogic_Action+0x5ac>)
 8001fac:	f005 f95c 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <KeyLogic_Action+0x604>)
 8001fb2:	2107      	movs	r1, #7
 8001fb4:	4831      	ldr	r0, [pc, #196]	@ (800207c <KeyLogic_Action+0x5e4>)
 8001fb6:	f005 f957 	bl	8007268 <sniprintf>
			break;
 8001fba:	e08d      	b.n	80020d8 <KeyLogic_Action+0x640>
        case SEQ_PRESSED_L:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001fbc:	4b30      	ldr	r3, [pc, #192]	@ (8002080 <KeyLogic_Action+0x5e8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f107 0020 	add.w	r0, r7, #32
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <KeyLogic_Action+0x5a8>)
 8001fc6:	2107      	movs	r1, #7
 8001fc8:	f005 f94e 	bl	8007268 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <KeyLogic_Action+0x5f8>)
 8001fd2:	2107      	movs	r1, #7
 8001fd4:	4818      	ldr	r0, [pc, #96]	@ (8002038 <KeyLogic_Action+0x5a0>)
 8001fd6:	f005 f947 	bl	8007268 <sniprintf>

			numBlinkRow =2;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <KeyLogic_Action+0x5b0>)
 8001fdc:	2202      	movs	r2, #2
 8001fde:	601a      	str	r2, [r3, #0]
			snprintf(blinkText1, sizeof(blinkText1), "SET   "); // Set blink text
 8001fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <KeyLogic_Action+0x600>)
 8001fe2:	2107      	movs	r1, #7
 8001fe4:	482e      	ldr	r0, [pc, #184]	@ (80020a0 <KeyLogic_Action+0x608>)
 8001fe6:	f005 f93f 	bl	8007268 <sniprintf>
			snprintf(blinkText, sizeof(blinkText), "LIT   ");
 8001fea:	4a2e      	ldr	r2, [pc, #184]	@ (80020a4 <KeyLogic_Action+0x60c>)
 8001fec:	2107      	movs	r1, #7
 8001fee:	4818      	ldr	r0, [pc, #96]	@ (8002050 <KeyLogic_Action+0x5b8>)
 8001ff0:	f005 f93a 	bl	8007268 <sniprintf>
			if (xBlinkTimer == NULL) {
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d16c      	bne.n	80020d6 <KeyLogic_Action+0x63e>
				xBlinkTimer = xTimerCreate("BlinkTimer", pdMS_TO_TICKS(300), pdTRUE, (void *)0, vBlinkTimerCallback);
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <KeyLogic_Action+0x5c0>)
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2300      	movs	r3, #0
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002008:	4814      	ldr	r0, [pc, #80]	@ (800205c <KeyLogic_Action+0x5c4>)
 800200a:	f004 f981 	bl	8006310 <xTimerCreate>
 800200e:	4603      	mov	r3, r0
 8002010:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8002012:	6013      	str	r3, [r2, #0]
				if (xBlinkTimer != NULL) {
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <KeyLogic_Action+0x5bc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d05c      	beq.n	80020d6 <KeyLogic_Action+0x63e>
					xTimerStart(xBlinkTimer, 0);
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <KeyLogic_Action+0x5bc>)
 800201e:	681c      	ldr	r4, [r3, #0]
 8002020:	f003 fd02 	bl	8005a28 <xTaskGetTickCount>
 8002024:	4602      	mov	r2, r0
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	2101      	movs	r1, #1
 800202e:	4620      	mov	r0, r4
 8002030:	f004 f9cc 	bl	80063cc <xTimerGenericCommand>
				}
			}

//			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "SET   ");
//			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "LIT   ");
			break;
 8002034:	e04f      	b.n	80020d6 <KeyLogic_Action+0x63e>
 8002036:	bf00      	nop
 8002038:	20000028 	.word	0x20000028
 800203c:	200000e8 	.word	0x200000e8
 8002040:	08007cac 	.word	0x08007cac
 8002044:	2000002f 	.word	0x2000002f
 8002048:	20000004 	.word	0x20000004
 800204c:	08007d0c 	.word	0x08007d0c
 8002050:	200000f4 	.word	0x200000f4
 8002054:	200000f0 	.word	0x200000f0
 8002058:	08000dbd 	.word	0x08000dbd
 800205c:	08007d14 	.word	0x08007d14
 8002060:	20000044 	.word	0x20000044
 8002064:	200000e4 	.word	0x200000e4
 8002068:	d1b71759 	.word	0xd1b71759
 800206c:	08007d20 	.word	0x08007d20
 8002070:	08007d28 	.word	0x08007d28
 8002074:	00051615 	.word	0x00051615
 8002078:	08007ca4 	.word	0x08007ca4
 800207c:	20000036 	.word	0x20000036
 8002080:	200000dc 	.word	0x200000dc
 8002084:	08007d30 	.word	0x08007d30
 8002088:	08007c94 	.word	0x08007c94
 800208c:	08007d38 	.word	0x08007d38
 8002090:	08007cbc 	.word	0x08007cbc
 8002094:	20000054 	.word	0x20000054
 8002098:	08007d40 	.word	0x08007d40
 800209c:	08007cb4 	.word	0x08007cb4
 80020a0:	200000fc 	.word	0x200000fc
 80020a4:	08007d48 	.word	0x08007d48
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80020a8:	2300      	movs	r3, #0
 80020aa:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <KeyLogic_Action+0x648>)
 80020ac:	2107      	movs	r1, #7
 80020ae:	480d      	ldr	r0, [pc, #52]	@ (80020e4 <KeyLogic_Action+0x64c>)
 80020b0:	f005 f8da 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80020b4:	2300      	movs	r3, #0
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <KeyLogic_Action+0x648>)
 80020b8:	2107      	movs	r1, #7
 80020ba:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <KeyLogic_Action+0x650>)
 80020bc:	f005 f8d4 	bl	8007268 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80020c0:	2300      	movs	r3, #0
 80020c2:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <KeyLogic_Action+0x648>)
 80020c4:	2107      	movs	r1, #7
 80020c6:	4809      	ldr	r0, [pc, #36]	@ (80020ec <KeyLogic_Action+0x654>)
 80020c8:	f005 f8ce 	bl	8007268 <sniprintf>
            break;
 80020cc:	e004      	b.n	80020d8 <KeyLogic_Action+0x640>
            break;
 80020ce:	bf00      	nop
 80020d0:	e002      	b.n	80020d8 <KeyLogic_Action+0x640>
            break;
 80020d2:	bf00      	nop
 80020d4:	e000      	b.n	80020d8 <KeyLogic_Action+0x640>
			break;
 80020d6:	bf00      	nop
    }
}
 80020d8:	bf00      	nop
 80020da:	3734      	adds	r7, #52	@ 0x34
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}
 80020e0:	08007ca4 	.word	0x08007ca4
 80020e4:	20000028 	.word	0x20000028
 80020e8:	2000002f 	.word	0x2000002f
 80020ec:	20000036 	.word	0x20000036

080020f0 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80020fe:	d907      	bls.n	8002110 <CharToSegment+0x20>
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b39      	cmp	r3, #57	@ 0x39
 8002104:	d804      	bhi.n	8002110 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	3b30      	subs	r3, #48	@ 0x30
 800210a:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <CharToSegment+0xfc>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	e066      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'L') {
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	2b4c      	cmp	r3, #76	@ 0x4c
 8002114:	d102      	bne.n	800211c <CharToSegment+0x2c>
        return specialCharMap[0];
 8002116:	4b36      	ldr	r3, [pc, #216]	@ (80021f0 <CharToSegment+0x100>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	e060      	b.n	80021de <CharToSegment+0xee>
    } else if (c == '.') {
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002120:	d102      	bne.n	8002128 <CharToSegment+0x38>
        return specialCharMap[1];
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <CharToSegment+0x100>)
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	e05a      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'T') {
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	2b54      	cmp	r3, #84	@ 0x54
 800212c:	d102      	bne.n	8002134 <CharToSegment+0x44>
        return specialCharMap[2];
 800212e:	4b30      	ldr	r3, [pc, #192]	@ (80021f0 <CharToSegment+0x100>)
 8002130:	789b      	ldrb	r3, [r3, #2]
 8002132:	e054      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'O') {
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b4f      	cmp	r3, #79	@ 0x4f
 8002138:	d102      	bne.n	8002140 <CharToSegment+0x50>
        return specialCharMap[3];
 800213a:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <CharToSegment+0x100>)
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	e04e      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'A') {
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b41      	cmp	r3, #65	@ 0x41
 8002144:	d102      	bne.n	800214c <CharToSegment+0x5c>
        return specialCharMap[4];
 8002146:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <CharToSegment+0x100>)
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	e048      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'S') {
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b53      	cmp	r3, #83	@ 0x53
 8002150:	d102      	bne.n	8002158 <CharToSegment+0x68>
        return specialCharMap[5];
 8002152:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <CharToSegment+0x100>)
 8002154:	795b      	ldrb	r3, [r3, #5]
 8002156:	e042      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'H') {
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b48      	cmp	r3, #72	@ 0x48
 800215c:	d102      	bne.n	8002164 <CharToSegment+0x74>
        return specialCharMap[6];
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <CharToSegment+0x100>)
 8002160:	799b      	ldrb	r3, [r3, #6]
 8002162:	e03c      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'I') {
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b49      	cmp	r3, #73	@ 0x49
 8002168:	d102      	bne.n	8002170 <CharToSegment+0x80>
        return specialCharMap[7];
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <CharToSegment+0x100>)
 800216c:	79db      	ldrb	r3, [r3, #7]
 800216e:	e036      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'F') {
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b46      	cmp	r3, #70	@ 0x46
 8002174:	d102      	bne.n	800217c <CharToSegment+0x8c>
        return specialCharMap[8];
 8002176:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <CharToSegment+0x100>)
 8002178:	7a1b      	ldrb	r3, [r3, #8]
 800217a:	e030      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'G') {
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b47      	cmp	r3, #71	@ 0x47
 8002180:	d102      	bne.n	8002188 <CharToSegment+0x98>
        return specialCharMap[9];
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <CharToSegment+0x100>)
 8002184:	7a5b      	ldrb	r3, [r3, #9]
 8002186:	e02a      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'P') {
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b50      	cmp	r3, #80	@ 0x50
 800218c:	d102      	bne.n	8002194 <CharToSegment+0xa4>
        return specialCharMap[10];
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <CharToSegment+0x100>)
 8002190:	7a9b      	ldrb	r3, [r3, #10]
 8002192:	e024      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'C') {
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b43      	cmp	r3, #67	@ 0x43
 8002198:	d102      	bne.n	80021a0 <CharToSegment+0xb0>
        return specialCharMap[11];
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <CharToSegment+0x100>)
 800219c:	7adb      	ldrb	r3, [r3, #11]
 800219e:	e01e      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'E') {
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b45      	cmp	r3, #69	@ 0x45
 80021a4:	d102      	bne.n	80021ac <CharToSegment+0xbc>
        return specialCharMap[12];
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <CharToSegment+0x100>)
 80021a8:	7b1b      	ldrb	r3, [r3, #12]
 80021aa:	e018      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'U') {
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b55      	cmp	r3, #85	@ 0x55
 80021b0:	d102      	bne.n	80021b8 <CharToSegment+0xc8>
        return specialCharMap[13];
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <CharToSegment+0x100>)
 80021b4:	7b5b      	ldrb	r3, [r3, #13]
 80021b6:	e012      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'N') {
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80021bc:	d102      	bne.n	80021c4 <CharToSegment+0xd4>
        return specialCharMap[14];
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <CharToSegment+0x100>)
 80021c0:	7b9b      	ldrb	r3, [r3, #14]
 80021c2:	e00c      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'R') {
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b52      	cmp	r3, #82	@ 0x52
 80021c8:	d102      	bne.n	80021d0 <CharToSegment+0xe0>
        return specialCharMap[15];
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <CharToSegment+0x100>)
 80021cc:	7bdb      	ldrb	r3, [r3, #15]
 80021ce:	e006      	b.n	80021de <CharToSegment+0xee>
    } else if (c == 'D') {
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b44      	cmp	r3, #68	@ 0x44
 80021d4:	d102      	bne.n	80021dc <CharToSegment+0xec>
        return specialCharMap[16];
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <CharToSegment+0x100>)
 80021d8:	7c1b      	ldrb	r3, [r3, #16]
 80021da:	e000      	b.n	80021de <CharToSegment+0xee>
    } else {
        return 0b11111111; // Blank
 80021dc:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000014 	.word	0x20000014

080021f4 <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e035      	b.n	8002272 <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7fd ffe4 	bl	80001e0 <strlen>
 8002218:	4603      	mov	r3, r0
 800221a:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d81f      	bhi.n	8002262 <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	dd15      	ble.n	8002256 <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	441a      	add	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1e59      	subs	r1, r3, #1
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	1acb      	subs	r3, r1, r3
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff55 	bl	80020f0 <CharToSegment>
 8002246:	4603      	mov	r3, r0
 8002248:	4619      	mov	r1, r3
 800224a:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <SevenSegLEDsHandler+0x90>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	460a      	mov	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e00a      	b.n	800226c <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 8002256:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <SevenSegLEDsHandler+0x90>)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	22ff      	movs	r2, #255	@ 0xff
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e004      	b.n	800226c <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 8002262:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <SevenSegLEDsHandler+0x90>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	22ff      	movs	r2, #255	@ 0xff
 800226a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b02      	cmp	r3, #2
 8002276:	ddc6      	ble.n	8002206 <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8002278:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <SevenSegLEDsHandler+0x90>)
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000118 	.word	0x20000118

08002288 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
 8002294:	4613      	mov	r3, r2
 8002296:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffa9 	bl	80021f4 <SevenSegLEDsHandler>
 80022a2:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d820      	bhi.n	80022ec <UpdateDisplayBuffer+0x64>
 80022aa:	a201      	add	r2, pc, #4	@ (adr r2, 80022b0 <UpdateDisplayBuffer+0x28>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	080022c9 	.word	0x080022c9
 80022b4:	080022cf 	.word	0x080022cf
 80022b8:	080022d5 	.word	0x080022d5
 80022bc:	080022db 	.word	0x080022db
 80022c0:	080022e1 	.word	0x080022e1
 80022c4:	080022e7 	.word	0x080022e7
        case 0:
            curr_scan = 0b11111110;
 80022c8:	23fe      	movs	r3, #254	@ 0xfe
 80022ca:	73fb      	strb	r3, [r7, #15]
            break;
 80022cc:	e011      	b.n	80022f2 <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 80022ce:	23fd      	movs	r3, #253	@ 0xfd
 80022d0:	73fb      	strb	r3, [r7, #15]
            break;
 80022d2:	e00e      	b.n	80022f2 <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 80022d4:	23fb      	movs	r3, #251	@ 0xfb
 80022d6:	73fb      	strb	r3, [r7, #15]
            break;
 80022d8:	e00b      	b.n	80022f2 <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 80022da:	23f7      	movs	r3, #247	@ 0xf7
 80022dc:	73fb      	strb	r3, [r7, #15]
            break;
 80022de:	e008      	b.n	80022f2 <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 80022e0:	23ef      	movs	r3, #239	@ 0xef
 80022e2:	73fb      	strb	r3, [r7, #15]
            break;
 80022e4:	e005      	b.n	80022f2 <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 80022e6:	23df      	movs	r3, #223	@ 0xdf
 80022e8:	73fb      	strb	r3, [r7, #15]
            break;
 80022ea:	e002      	b.n	80022f2 <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 80022ec:	23ff      	movs	r3, #255	@ 0xff
 80022ee:	73fb      	strb	r3, [r7, #15]
            break;
 80022f0:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 80022f2:	4b57      	ldr	r3, [pc, #348]	@ (8002450 <UpdateDisplayBuffer+0x1c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db72      	blt.n	80023e0 <UpdateDisplayBuffer+0x158>
 80022fa:	4b55      	ldr	r3, [pc, #340]	@ (8002450 <UpdateDisplayBuffer+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	dc6e      	bgt.n	80023e0 <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4b52      	ldr	r3, [pc, #328]	@ (8002450 <UpdateDisplayBuffer+0x1c8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d136      	bne.n	800237a <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800230c:	78ba      	ldrb	r2, [r7, #2]
 800230e:	4951      	ldr	r1, [pc, #324]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	440b      	add	r3, r1
 8002318:	22ff      	movs	r2, #255	@ 0xff
 800231a:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 800231c:	78ba      	ldrb	r2, [r7, #2]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	7898      	ldrb	r0, [r3, #2]
 8002322:	494c      	ldr	r1, [pc, #304]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	440b      	add	r3, r1
 800232c:	3301      	adds	r3, #1
 800232e:	4602      	mov	r2, r0
 8002330:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 8002332:	78ba      	ldrb	r2, [r7, #2]
 8002334:	4947      	ldr	r1, [pc, #284]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	440b      	add	r3, r1
 800233e:	3302      	adds	r3, #2
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3301      	adds	r3, #1
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	78ba      	ldrb	r2, [r7, #2]
 800234c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002350:	b2d8      	uxtb	r0, r3
 8002352:	4940      	ldr	r1, [pc, #256]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	440b      	add	r3, r1
 800235c:	3303      	adds	r3, #3
 800235e:	4602      	mov	r2, r0
 8002360:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 8002362:	78ba      	ldrb	r2, [r7, #2]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	7818      	ldrb	r0, [r3, #0]
 8002368:	493a      	ldr	r1, [pc, #232]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	440b      	add	r3, r1
 8002372:	3304      	adds	r3, #4
 8002374:	4602      	mov	r2, r0
 8002376:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 8002378:	e065      	b.n	8002446 <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 800237a:	78ba      	ldrb	r2, [r7, #2]
 800237c:	4935      	ldr	r1, [pc, #212]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	440b      	add	r3, r1
 8002386:	22ff      	movs	r2, #255	@ 0xff
 8002388:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 800238a:	78ba      	ldrb	r2, [r7, #2]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	7898      	ldrb	r0, [r3, #2]
 8002390:	4930      	ldr	r1, [pc, #192]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	440b      	add	r3, r1
 800239a:	3301      	adds	r3, #1
 800239c:	4602      	mov	r2, r0
 800239e:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 80023a0:	78ba      	ldrb	r2, [r7, #2]
 80023a2:	492c      	ldr	r1, [pc, #176]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	3302      	adds	r3, #2
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 80023b2:	78ba      	ldrb	r2, [r7, #2]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	7858      	ldrb	r0, [r3, #1]
 80023b8:	4926      	ldr	r1, [pc, #152]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	3303      	adds	r3, #3
 80023c4:	4602      	mov	r2, r0
 80023c6:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 80023c8:	78ba      	ldrb	r2, [r7, #2]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	7818      	ldrb	r0, [r3, #0]
 80023ce:	4921      	ldr	r1, [pc, #132]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	3304      	adds	r3, #4
 80023da:	4602      	mov	r2, r0
 80023dc:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80023de:	e032      	b.n	8002446 <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80023e0:	78ba      	ldrb	r2, [r7, #2]
 80023e2:	491c      	ldr	r1, [pc, #112]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	22ff      	movs	r2, #255	@ 0xff
 80023ee:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 80023f0:	78ba      	ldrb	r2, [r7, #2]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	7898      	ldrb	r0, [r3, #2]
 80023f6:	4917      	ldr	r1, [pc, #92]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	440b      	add	r3, r1
 8002400:	3301      	adds	r3, #1
 8002402:	4602      	mov	r2, r0
 8002404:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 8002406:	78ba      	ldrb	r2, [r7, #2]
 8002408:	4912      	ldr	r1, [pc, #72]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	440b      	add	r3, r1
 8002412:	3302      	adds	r3, #2
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 8002418:	78ba      	ldrb	r2, [r7, #2]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	7858      	ldrb	r0, [r3, #1]
 800241e:	490d      	ldr	r1, [pc, #52]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	440b      	add	r3, r1
 8002428:	3303      	adds	r3, #3
 800242a:	4602      	mov	r2, r0
 800242c:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 800242e:	78ba      	ldrb	r2, [r7, #2]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	7818      	ldrb	r0, [r3, #0]
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <UpdateDisplayBuffer+0x1cc>)
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	440b      	add	r3, r1
 800243e:	3304      	adds	r3, #4
 8002440:	4602      	mov	r2, r0
 8002442:	701a      	strb	r2, [r3, #0]
    }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000054 	.word	0x20000054
 8002454:	2000010c 	.word	0x2000010c

08002458 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <SevenSegLEDsScan+0x7c>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	bfb8      	it	lt
 800246e:	425b      	neglt	r3, r3
 8002470:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <SevenSegLEDsScan+0x80>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	4619      	mov	r1, r3
 800247c:	4817      	ldr	r0, [pc, #92]	@ (80024dc <SevenSegLEDsScan+0x84>)
 800247e:	f7ff ff03 	bl	8002288 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002482:	b672      	cpsid	i
}
 8002484:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8002486:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <SevenSegLEDsScan+0x7c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <SevenSegLEDsScan+0x88>)
 8002496:	4413      	add	r3, r2
 8002498:	2105      	movs	r1, #5
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f824 	bl	80024e8 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 80024a0:	4a0c      	ldr	r2, [pc, #48]	@ (80024d4 <SevenSegLEDsScan+0x7c>)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024a6:	b662      	cpsie	i
}
 80024a8:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <SevenSegLEDsScan+0x80>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <SevenSegLEDsScan+0x8c>)
 80024b4:	fb83 3102 	smull	r3, r1, r3, r2
 80024b8:	17d3      	asrs	r3, r2, #31
 80024ba:	1ac9      	subs	r1, r1, r3
 80024bc:	460b      	mov	r3, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	440b      	add	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	1ad1      	subs	r1, r2, r3
 80024c6:	b2ca      	uxtb	r2, r1
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <SevenSegLEDsScan+0x80>)
 80024ca:	701a      	strb	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000116 	.word	0x20000116
 80024d8:	20000108 	.word	0x20000108
 80024dc:	20000028 	.word	0x20000028
 80024e0:	2000010c 	.word	0x2000010c
 80024e4:	2aaaaaab 	.word	0x2aaaaaab

080024e8 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024f8:	4823      	ldr	r0, [pc, #140]	@ (8002588 <ShiftOut_SPI+0xa0>)
 80024fa:	f000 fead 	bl	8003258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	4822      	ldr	r0, [pc, #136]	@ (800258c <ShiftOut_SPI+0xa4>)
 8002504:	f000 fea8 	bl	8003258 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e003      	b.n	8002516 <ShiftOut_SPI+0x2e>
 800250e:	bf00      	nop
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3301      	adds	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800251c:	dbf7      	blt.n	800250e <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800251e:	bf00      	nop
 8002520:	481b      	ldr	r0, [pc, #108]	@ (8002590 <ShiftOut_SPI+0xa8>)
 8002522:	f001 fcf5 	bl	8003f10 <HAL_SPI_GetState>
 8002526:	4603      	mov	r3, r0
 8002528:	2b01      	cmp	r3, #1
 800252a:	d1f9      	bne.n	8002520 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b29a      	uxth	r2, r3
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4816      	ldr	r0, [pc, #88]	@ (8002590 <ShiftOut_SPI+0xa8>)
 8002538:	f001 fba7 	bl	8003c8a <HAL_SPI_Transmit>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 8002542:	f000 f9e5 	bl	8002910 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	e003      	b.n	8002554 <ShiftOut_SPI+0x6c>
 800254c:	bf00      	nop
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3301      	adds	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800255a:	dbf7      	blt.n	800254c <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800255c:	bf00      	nop
 800255e:	480c      	ldr	r0, [pc, #48]	@ (8002590 <ShiftOut_SPI+0xa8>)
 8002560:	f001 fcd6 	bl	8003f10 <HAL_SPI_GetState>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d1f9      	bne.n	800255e <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002570:	4805      	ldr	r0, [pc, #20]	@ (8002588 <ShiftOut_SPI+0xa0>)
 8002572:	f000 fe71 	bl	8003258 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	2180      	movs	r1, #128	@ 0x80
 800257a:	4804      	ldr	r0, [pc, #16]	@ (800258c <ShiftOut_SPI+0xa4>)
 800257c:	f000 fe6c 	bl	8003258 <HAL_GPIO_WritePin>

}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	2000011c 	.word	0x2000011c

08002594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002598:	f000 fb9e 	bl	8002cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800259c:	f000 f828 	bl	80025f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a0:	f000 f8fa 	bl	8002798 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025a4:	f000 f88c 	bl	80026c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80025a8:	f000 f8c0 	bl	800272c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025ac:	f002 f852 	bl	8004654 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80025b0:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <main+0x44>)
 80025b2:	2100      	movs	r1, #0
 80025b4:	4809      	ldr	r0, [pc, #36]	@ (80025dc <main+0x48>)
 80025b6:	f002 f897 	bl	80046e8 <osThreadNew>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <main+0x4c>)
 80025be:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80025c0:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <main+0x50>)
 80025c2:	2100      	movs	r1, #0
 80025c4:	4808      	ldr	r0, [pc, #32]	@ (80025e8 <main+0x54>)
 80025c6:	f002 f88f 	bl	80046e8 <osThreadNew>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <main+0x58>)
 80025ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80025d0:	f002 f864 	bl	800469c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <main+0x40>
 80025d8:	08007d8c 	.word	0x08007d8c
 80025dc:	0800289d 	.word	0x0800289d
 80025e0:	200001d4 	.word	0x200001d4
 80025e4:	08007db0 	.word	0x08007db0
 80025e8:	080028d9 	.word	0x080028d9
 80025ec:	200001d8 	.word	0x200001d8

080025f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b094      	sub	sp, #80	@ 0x50
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0320 	add.w	r3, r7, #32
 80025fa:	2230      	movs	r2, #48	@ 0x30
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fe66 	bl	80072d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	4b27      	ldr	r3, [pc, #156]	@ (80026b8 <SystemClock_Config+0xc8>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a26      	ldr	r2, [pc, #152]	@ (80026b8 <SystemClock_Config+0xc8>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <SystemClock_Config+0xc8>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <SystemClock_Config+0xcc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a20      	ldr	r2, [pc, #128]	@ (80026bc <SystemClock_Config+0xcc>)
 800263a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <SystemClock_Config+0xcc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	2301      	movs	r3, #1
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002654:	2310      	movs	r3, #16
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002658:	2302      	movs	r3, #2
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800265c:	2300      	movs	r3, #0
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002660:	2308      	movs	r3, #8
 8002662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002664:	2364      	movs	r3, #100	@ 0x64
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002668:	2302      	movs	r3, #2
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800266c:	2304      	movs	r3, #4
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002670:	f107 0320 	add.w	r3, r7, #32
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fe09 	bl	800328c <HAL_RCC_OscConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002680:	f000 f946 	bl	8002910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002684:	230f      	movs	r3, #15
 8002686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	2103      	movs	r1, #3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 f86b 	bl	800377c <HAL_RCC_ClockConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026ac:	f000 f930 	bl	8002910 <Error_Handler>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3750      	adds	r7, #80	@ 0x50
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40007000 	.word	0x40007000

080026c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026c6:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <MX_SPI1_Init+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ca:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80026f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026f4:	2220      	movs	r2, #32
 80026f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <MX_SPI1_Init+0x64>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <MX_SPI1_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002704:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <MX_SPI1_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <MX_SPI1_Init+0x64>)
 800270c:	220a      	movs	r2, #10
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002710:	4804      	ldr	r0, [pc, #16]	@ (8002724 <MX_SPI1_Init+0x64>)
 8002712:	f001 fa31 	bl	8003b78 <HAL_SPI_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800271c:	f000 f8f8 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000011c 	.word	0x2000011c
 8002728:	40013000 	.word	0x40013000

0800272c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002730:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002732:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <MX_SPI2_Init+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002736:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800273c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <MX_SPI2_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800275c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800275e:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002760:	2200      	movs	r2, #0
 8002762:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <MX_SPI2_Init+0x64>)
 800276c:	2200      	movs	r2, #0
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002770:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <MX_SPI2_Init+0x64>)
 8002778:	220a      	movs	r2, #10
 800277a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	@ (8002790 <MX_SPI2_Init+0x64>)
 800277e:	f001 f9fb 	bl	8003b78 <HAL_SPI_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002788:	f000 f8c2 	bl	8002910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000174 	.word	0x20000174
 8002794:	40003800 	.word	0x40003800

08002798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a36      	ldr	r2, [pc, #216]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b29      	ldr	r3, [pc, #164]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <MX_GPIO_Init+0xf8>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <MX_GPIO_Init+0xf8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <MX_GPIO_Init+0xf8>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <MX_GPIO_Init+0xf8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800281e:	2200      	movs	r2, #0
 8002820:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8002824:	481b      	ldr	r0, [pc, #108]	@ (8002894 <MX_GPIO_Init+0xfc>)
 8002826:	f000 fd17 	bl	8003258 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2180      	movs	r1, #128	@ 0x80
 800282e:	481a      	ldr	r0, [pc, #104]	@ (8002898 <MX_GPIO_Init+0x100>)
 8002830:	f000 fd12 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002834:	231f      	movs	r3, #31
 8002836:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283c:	2301      	movs	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	4813      	ldr	r0, [pc, #76]	@ (8002894 <MX_GPIO_Init+0xfc>)
 8002848:	f000 fb6a 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800284c:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8002850:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002852:	2301      	movs	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	480b      	ldr	r0, [pc, #44]	@ (8002894 <MX_GPIO_Init+0xfc>)
 8002866:	f000 fb5b 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	@ (8002898 <MX_GPIO_Init+0x100>)
 8002882:	f000 fb4d 	bl	8002f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	@ 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800

0800289c <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 80028a4:	4a0b      	ldr	r2, [pc, #44]	@ (80028d4 <Led3x6Run+0x38>)
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ae:	6018      	str	r0, [r3, #0]
 80028b0:	3304      	adds	r3, #4
 80028b2:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 80028b4:	f7ff fdd0 	bl	8002458 <SevenSegLEDsScan>
	  osDelay(1);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f001 ffa7 	bl	800480c <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	2105      	movs	r1, #5
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe0f 	bl	80024e8 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 80028ca:	2001      	movs	r0, #1
 80028cc:	f001 ff9e 	bl	800480c <osDelay>
	  SevenSegLEDsScan();
 80028d0:	bf00      	nop
 80028d2:	e7ef      	b.n	80028b4 <Led3x6Run+0x18>
 80028d4:	08007d6c 	.word	0x08007d6c

080028d8 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 80028e0:	f7fe fd26 	bl	8001330 <KeyLogic>
	 KeyLogic_Action();
 80028e4:	f7ff f8d8 	bl	8001a98 <KeyLogic_Action>
	 osDelay(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f001 ff8f 	bl	800480c <osDelay>
	 KeyLogic();
 80028ee:	bf00      	nop
 80028f0:	e7f6      	b.n	80028e0 <KeyPad4x5Run+0x8>

080028f2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002902:	d101      	bne.n	8002908 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002904:	f000 fa0a 	bl	8002d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002914:	b672      	cpsid	i
}
 8002916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <Error_Handler+0x8>

0800291c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_MspInit+0x54>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	4a11      	ldr	r2, [pc, #68]	@ (8002970 <HAL_MspInit+0x54>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002930:	6453      	str	r3, [r2, #68]	@ 0x44
 8002932:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <HAL_MspInit+0x54>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_MspInit+0x54>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_MspInit+0x54>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	@ 0x40
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_MspInit+0x54>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	210f      	movs	r1, #15
 800295e:	f06f 0001 	mvn.w	r0, #1
 8002962:	f000 fab3 	bl	8002ecc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	@ 0x30
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a41      	ldr	r2, [pc, #260]	@ (8002a98 <HAL_SPI_MspInit+0x124>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12c      	bne.n	80029f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	4b40      	ldr	r3, [pc, #256]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 80029a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a6:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b39      	ldr	r3, [pc, #228]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a38      	ldr	r2, [pc, #224]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029ce:	23a0      	movs	r3, #160	@ 0xa0
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029de:	2305      	movs	r3, #5
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	482d      	ldr	r0, [pc, #180]	@ (8002aa0 <HAL_SPI_MspInit+0x12c>)
 80029ea:	f000 fa99 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029ee:	e04f      	b.n	8002a90 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa4 <HAL_SPI_MspInit+0x130>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d14a      	bne.n	8002a90 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	4a26      	ldr	r2, [pc, #152]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a18      	ldr	r2, [pc, #96]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <HAL_SPI_MspInit+0x128>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a4e:	2308      	movs	r3, #8
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a62:	f107 031c 	add.w	r3, r7, #28
 8002a66:	4619      	mov	r1, r3
 8002a68:	480f      	ldr	r0, [pc, #60]	@ (8002aa8 <HAL_SPI_MspInit+0x134>)
 8002a6a:	f000 fa59 	bl	8002f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a74:	2302      	movs	r3, #2
 8002a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a80:	2305      	movs	r3, #5
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4808      	ldr	r0, [pc, #32]	@ (8002aac <HAL_SPI_MspInit+0x138>)
 8002a8c:	f000 fa48 	bl	8002f20 <HAL_GPIO_Init>
}
 8002a90:	bf00      	nop
 8002a92:	3730      	adds	r7, #48	@ 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40013000 	.word	0x40013000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40003800 	.word	0x40003800
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020400 	.word	0x40020400

08002ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08e      	sub	sp, #56	@ 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_InitTick+0xe8>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	4a33      	ldr	r2, [pc, #204]	@ (8002b98 <HAL_InitTick+0xe8>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad0:	4b31      	ldr	r3, [pc, #196]	@ (8002b98 <HAL_InitTick+0xe8>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002adc:	f107 0210 	add.w	r2, r7, #16
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 f814 	bl	8003b14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002af6:	f000 fff9 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8002afa:	6378      	str	r0, [r7, #52]	@ 0x34
 8002afc:	e004      	b.n	8002b08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002afe:	f000 fff5 	bl	8003aec <HAL_RCC_GetPCLK1Freq>
 8002b02:	4603      	mov	r3, r0
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	4a24      	ldr	r2, [pc, #144]	@ (8002b9c <HAL_InitTick+0xec>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	0c9b      	lsrs	r3, r3, #18
 8002b12:	3b01      	subs	r3, #1
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002b16:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002b26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002b3e:	4818      	ldr	r0, [pc, #96]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b40:	f001 fad0 	bl	80040e4 <HAL_TIM_Base_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002b4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11b      	bne.n	8002b8a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002b52:	4813      	ldr	r0, [pc, #76]	@ (8002ba0 <HAL_InitTick+0xf0>)
 8002b54:	f001 fb20 	bl	8004198 <HAL_TIM_Base_Start_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002b5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d111      	bne.n	8002b8a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b66:	201c      	movs	r0, #28
 8002b68:	f000 f9cc 	bl	8002f04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d808      	bhi.n	8002b84 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002b72:	2200      	movs	r2, #0
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	201c      	movs	r0, #28
 8002b78:	f000 f9a8 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b7c:	4a09      	ldr	r2, [pc, #36]	@ (8002ba4 <HAL_InitTick+0xf4>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e002      	b.n	8002b8a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3738      	adds	r7, #56	@ 0x38
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	431bde83 	.word	0x431bde83
 8002ba0:	200001dc 	.word	0x200001dc
 8002ba4:	2000005c 	.word	0x2000005c

08002ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <NMI_Handler+0x4>

08002bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <MemManage_Handler+0x4>

08002bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <BusFault_Handler+0x4>

08002bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <UsageFault_Handler+0x4>

08002bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <TIM2_IRQHandler+0x10>)
 8002be6:	f001 fb39 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200001dc 	.word	0x200001dc

08002bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <_sbrk+0x5c>)
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <_sbrk+0x60>)
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <_sbrk+0x64>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <_sbrk+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c24:	f004 fbb2 	bl	800738c <__errno>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c32:	e009      	b.n	8002c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <_sbrk+0x64>)
 8002c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20020000 	.word	0x20020000
 8002c54:	00000400 	.word	0x00000400
 8002c58:	20000224 	.word	0x20000224
 8002c5c:	20004d60 	.word	0x20004d60

08002c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <SystemInit+0x20>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <SystemInit+0x20>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c88:	f7ff ffea 	bl	8002c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c8e:	490d      	ldr	r1, [pc, #52]	@ (8002cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c94:	e002      	b.n	8002c9c <LoopCopyDataInit>

08002c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9a:	3304      	adds	r3, #4

08002c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca0:	d3f9      	bcc.n	8002c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca8:	e001      	b.n	8002cae <LoopFillZerobss>

08002caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cac:	3204      	adds	r2, #4

08002cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb0:	d3fb      	bcc.n	8002caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f004 fb71 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb6:	f7ff fc6d 	bl	8002594 <main>
  bx  lr    
 8002cba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002cc8:	08007e30 	.word	0x08007e30
  ldr r2, =_sbss
 8002ccc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002cd0:	20004d5c 	.word	0x20004d5c

08002cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC_IRQHandler>
	...

08002cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <HAL_Init+0x40>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <HAL_Init+0x40>)
 8002cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	@ (8002d18 <HAL_Init+0x40>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 f8d8 	bl	8002eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d06:	200f      	movs	r0, #15
 8002d08:	f7ff fed2 	bl	8002ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0c:	f7ff fe06 	bl	800291c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000060 	.word	0x20000060
 8002d40:	20000228 	.word	0x20000228

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	@ (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000228 	.word	0x20000228

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	@ (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	@ (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	@ (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	@ (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	@ 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ff4c 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ede:	f7ff ff61 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f7ff ffb1 	bl	8002e50 <NVIC_EncodePriority>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff80 	bl	8002dfc <__NVIC_SetPriority>
}
 8002efc:	bf00      	nop
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff54 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	e159      	b.n	80031f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	f040 8148 	bne.w	80031ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d005      	beq.n	8002f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d130      	bne.n	8002fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 0201 	and.w	r2, r3, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d017      	beq.n	8003010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d123      	bne.n	8003064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	08da      	lsrs	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3208      	adds	r2, #8
 8003024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a2 	beq.w	80031ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b57      	ldr	r3, [pc, #348]	@ (8003208 <HAL_GPIO_Init+0x2e8>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	4a56      	ldr	r2, [pc, #344]	@ (8003208 <HAL_GPIO_Init+0x2e8>)
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b6:	4b54      	ldr	r3, [pc, #336]	@ (8003208 <HAL_GPIO_Init+0x2e8>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030c2:	4a52      	ldr	r2, [pc, #328]	@ (800320c <HAL_GPIO_Init+0x2ec>)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a49      	ldr	r2, [pc, #292]	@ (8003210 <HAL_GPIO_Init+0x2f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d019      	beq.n	8003122 <HAL_GPIO_Init+0x202>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a48      	ldr	r2, [pc, #288]	@ (8003214 <HAL_GPIO_Init+0x2f4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_GPIO_Init+0x1fe>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a47      	ldr	r2, [pc, #284]	@ (8003218 <HAL_GPIO_Init+0x2f8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00d      	beq.n	800311a <HAL_GPIO_Init+0x1fa>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a46      	ldr	r2, [pc, #280]	@ (800321c <HAL_GPIO_Init+0x2fc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <HAL_GPIO_Init+0x1f6>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a45      	ldr	r2, [pc, #276]	@ (8003220 <HAL_GPIO_Init+0x300>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_GPIO_Init+0x1f2>
 800310e:	2304      	movs	r3, #4
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x204>
 8003112:	2307      	movs	r3, #7
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x204>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x204>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x204>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x204>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003134:	4935      	ldr	r1, [pc, #212]	@ (800320c <HAL_GPIO_Init+0x2ec>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003142:	4b38      	ldr	r3, [pc, #224]	@ (8003224 <HAL_GPIO_Init+0x304>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003166:	4a2f      	ldr	r2, [pc, #188]	@ (8003224 <HAL_GPIO_Init+0x304>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316c:	4b2d      	ldr	r3, [pc, #180]	@ (8003224 <HAL_GPIO_Init+0x304>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003190:	4a24      	ldr	r2, [pc, #144]	@ (8003224 <HAL_GPIO_Init+0x304>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <HAL_GPIO_Init+0x304>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003224 <HAL_GPIO_Init+0x304>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c0:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <HAL_GPIO_Init+0x304>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003224 <HAL_GPIO_Init+0x304>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f aea2 	bls.w	8002f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3724      	adds	r7, #36	@ 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e001      	b.n	800324a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e267      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d075      	beq.n	8003396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d00c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d112      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c2:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	4b7e      	ldr	r3, [pc, #504]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05b      	beq.n	8003394 <HAL_RCC_OscConfig+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d157      	bne.n	8003394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e242      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x74>
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b70      	ldr	r3, [pc, #448]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6f      	ldr	r2, [pc, #444]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b6d      	ldr	r3, [pc, #436]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6c      	ldr	r2, [pc, #432]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003324:	4b69      	ldr	r3, [pc, #420]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a68      	ldr	r2, [pc, #416]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b66      	ldr	r3, [pc, #408]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a65      	ldr	r2, [pc, #404]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7ff fcfe 	bl	8002d44 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334c:	f7ff fcfa 	bl	8002d44 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e207      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xc0>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7ff fcea 	bl	8002d44 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7ff fce6 	bl	8002d44 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1f3      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0xe8>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d063      	beq.n	800346a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	4b4a      	ldr	r3, [pc, #296]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1c7      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4937      	ldr	r1, [pc, #220]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x244>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7ff fc9f 	bl	8002d44 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340a:	f7ff fc9b 	bl	8002d44 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1a8      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4925      	ldr	r1, [pc, #148]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_RCC_OscConfig+0x244>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7ff fc7e 	bl	8002d44 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7ff fc7a 	bl	8002d44 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e187      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d036      	beq.n	80034e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <HAL_RCC_OscConfig+0x248>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7ff fc5e 	bl	8002d44 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348c:	f7ff fc5a 	bl	8002d44 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e167      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x200>
 80034aa:	e01b      	b.n	80034e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <HAL_RCC_OscConfig+0x248>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7ff fc47 	bl	8002d44 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	e00e      	b.n	80034d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ba:	f7ff fc43 	bl	8002d44 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d907      	bls.n	80034d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e150      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470000 	.word	0x42470000
 80034d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80034da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ea      	bne.n	80034ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8097 	beq.w	8003620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b81      	ldr	r3, [pc, #516]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b7d      	ldr	r3, [pc, #500]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4a7c      	ldr	r2, [pc, #496]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	@ 0x40
 8003512:	4b7a      	ldr	r3, [pc, #488]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b77      	ldr	r3, [pc, #476]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b74      	ldr	r3, [pc, #464]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a73      	ldr	r2, [pc, #460]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7ff fc03 	bl	8002d44 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7ff fbff 	bl	8002d44 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e10c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x2ea>
 8003568:	4b64      	ldr	r3, [pc, #400]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a63      	ldr	r2, [pc, #396]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	e01c      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x30c>
 800357e:	4b5f      	ldr	r3, [pc, #380]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	4a5e      	ldr	r2, [pc, #376]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	@ 0x70
 800358a:	4b5c      	ldr	r3, [pc, #368]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	4a5b      	ldr	r2, [pc, #364]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	@ 0x70
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003598:	4b58      	ldr	r3, [pc, #352]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	4a57      	ldr	r2, [pc, #348]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a4:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	4a54      	ldr	r2, [pc, #336]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7ff fbc4 	bl	8002d44 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7ff fbc0 	bl	8002d44 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0cb      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e4:	f7ff fbae 	bl	8002d44 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7ff fbaa 	bl	8002d44 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0b5      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	4b3e      	ldr	r3, [pc, #248]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b39      	ldr	r3, [pc, #228]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	4a38      	ldr	r2, [pc, #224]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a1 	beq.w	800376c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362a:	4b34      	ldr	r3, [pc, #208]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d05c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d141      	bne.n	80036c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7ff fb7e 	bl	8002d44 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7ff fb7a 	bl	8002d44 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e087      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	491b      	ldr	r1, [pc, #108]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <HAL_RCC_OscConfig+0x478>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7ff fb53 	bl	8002d44 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7ff fb4f 	bl	8002d44 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e05c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x416>
 80036c0:	e054      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <HAL_RCC_OscConfig+0x478>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7ff fb3c 	bl	8002d44 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7ff fb38 	bl	8002d44 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e045      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
 80036ee:	e03d      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e038      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80036fc:	40023800 	.word	0x40023800
 8003700:	40007000 	.word	0x40007000
 8003704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <HAL_RCC_OscConfig+0x4ec>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d028      	beq.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d121      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11a      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800373e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	3b01      	subs	r3, #1
 8003752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7ff fa6a 	bl	8002d44 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7ff fa66 	bl	8002d44 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f8c4 	bl	8002ab0 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	08007dd4 	.word	0x08007dd4
 8003940:	20000058 	.word	0x20000058
 8003944:	2000005c 	.word	0x2000005c

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b090      	sub	sp, #64	@ 0x40
 800394e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34
 8003954:	2300      	movs	r3, #0
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003958:	2300      	movs	r3, #0
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003960:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d00d      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x40>
 800396c:	2b08      	cmp	r3, #8
 800396e:	f200 80a1 	bhi.w	8003ab4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003976:	2b04      	cmp	r3, #4
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3a>
 800397a:	e09b      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x184>)
 800397e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003980:	e09b      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003982:	4b53      	ldr	r3, [pc, #332]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003984:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003986:	e098      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003988:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003992:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039b0:	2100      	movs	r1, #0
 80039b2:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039b4:	fb03 f201 	mul.w	r2, r3, r1
 80039b8:	2300      	movs	r3, #0
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	4413      	add	r3, r2
 80039c0:	4a43      	ldr	r2, [pc, #268]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c2:	fba0 1202 	umull	r1, r2, r0, r2
 80039c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c8:	460a      	mov	r2, r1
 80039ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ce:	4413      	add	r3, r2
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d4:	2200      	movs	r2, #0
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	61fa      	str	r2, [r7, #28]
 80039da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039e2:	f7fd f873 	bl	8000acc <__aeabi_uldivmod>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4613      	mov	r3, r2
 80039ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ee:	e053      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f0:	4b35      	ldr	r3, [pc, #212]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	2200      	movs	r2, #0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	617a      	str	r2, [r7, #20]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a02:	f04f 0b00 	mov.w	fp, #0
 8003a06:	4652      	mov	r2, sl
 8003a08:	465b      	mov	r3, fp
 8003a0a:	f04f 0000 	mov.w	r0, #0
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	0159      	lsls	r1, r3, #5
 8003a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a18:	0150      	lsls	r0, r2, #5
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a22:	eb63 090b 	sbc.w	r9, r3, fp
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	00eb      	lsls	r3, r5, #3
 8003a4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a50:	00e2      	lsls	r2, r4, #3
 8003a52:	4614      	mov	r4, r2
 8003a54:	461d      	mov	r5, r3
 8003a56:	eb14 030a 	adds.w	r3, r4, sl
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	eb45 030b 	adc.w	r3, r5, fp
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6e:	4629      	mov	r1, r5
 8003a70:	028b      	lsls	r3, r1, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a78:	4621      	mov	r1, r4
 8003a7a:	028a      	lsls	r2, r1, #10
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a82:	2200      	movs	r2, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	60fa      	str	r2, [r7, #12]
 8003a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a8c:	f7fd f81e 	bl	8000acc <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003aa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3740      	adds	r7, #64	@ 0x40
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	017d7840 	.word	0x017d7840

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000058 	.word	0x20000058

08003aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af0:	f7ff fff0 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	4903      	ldr	r1, [pc, #12]	@ (8003b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	08007de4 	.word	0x08007de4

08003b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	220f      	movs	r2, #15
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_RCC_GetClockConfig+0x5c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0203 	and.w	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <HAL_RCC_GetClockConfig+0x5c>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <HAL_RCC_GetClockConfig+0x5c>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b56:	4b07      	ldr	r3, [pc, #28]	@ (8003b74 <HAL_RCC_GetClockConfig+0x60>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0207 	and.w	r2, r3, #7
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40023c00 	.word	0x40023c00

08003b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07b      	b.n	8003c82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d108      	bne.n	8003ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b9a:	d009      	beq.n	8003bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
 8003ba2:	e005      	b.n	8003bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fe fed2 	bl	8002974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c34:	ea42 0103 	orr.w	r1, r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0104 	and.w	r1, r3, #4
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	f003 0210 	and.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b088      	sub	sp, #32
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_SPI_Transmit+0x22>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e12d      	b.n	8003f08 <HAL_SPI_Transmit+0x27e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb4:	f7ff f846 	bl	8002d44 <HAL_GetTick>
 8003cb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cce:	e116      	b.n	8003efe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Transmit+0x52>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce0:	e10d      	b.n	8003efe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	88fa      	ldrh	r2, [r7, #6]
 8003cfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d28:	d10f      	bne.n	8003d4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d007      	beq.n	8003d68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d70:	d14f      	bne.n	8003e12 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_Transmit+0xf6>
 8003d7a:	8afb      	ldrh	r3, [r7, #22]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d142      	bne.n	8003e06 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003da4:	e02f      	b.n	8003e06 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d112      	bne.n	8003dda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	881a      	ldrh	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003dd8:	e015      	b.n	8003e06 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dda:	f7fe ffb3 	bl	8002d44 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d803      	bhi.n	8003df2 <HAL_SPI_Transmit+0x168>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003df0:	d102      	bne.n	8003df8 <HAL_SPI_Transmit+0x16e>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e04:	e07b      	b.n	8003efe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ca      	bne.n	8003da6 <HAL_SPI_Transmit+0x11c>
 8003e10:	e050      	b.n	8003eb4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Transmit+0x196>
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d144      	bne.n	8003eaa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e46:	e030      	b.n	8003eaa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d113      	bne.n	8003e7e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e7c:	e015      	b.n	8003eaa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e7e:	f7fe ff61 	bl	8002d44 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d803      	bhi.n	8003e96 <HAL_SPI_Transmit+0x20c>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e94:	d102      	bne.n	8003e9c <HAL_SPI_Transmit+0x212>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ea8:	e029      	b.n	8003efe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1c9      	bne.n	8003e48 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8bf 	bl	800403c <SPI_EndRxTxTransaction>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e003      	b.n	8003efe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f1e:	b2db      	uxtb	r3, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f3c:	f7fe ff02 	bl	8002d44 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	4413      	add	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f4c:	f7fe fefa 	bl	8002d44 <HAL_GetTick>
 8003f50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	015b      	lsls	r3, r3, #5
 8003f58:	0d1b      	lsrs	r3, r3, #20
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f62:	e054      	b.n	800400e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f6a:	d050      	beq.n	800400e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f6c:	f7fe feea 	bl	8002d44 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d902      	bls.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13d      	bne.n	8003ffe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f9a:	d111      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa4:	d004      	beq.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fae:	d107      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc8:	d10f      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e017      	b.n	800402e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3b01      	subs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d19b      	bne.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000058 	.word	0x20000058

0800403c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2201      	movs	r2, #1
 8004050:	2102      	movs	r1, #2
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff ff6a 	bl	8003f2c <SPI_WaitFlagStateUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e032      	b.n	80040d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800406e:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <SPI_EndRxTxTransaction+0xa0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	@ (80040e0 <SPI_EndRxTxTransaction+0xa4>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0d5b      	lsrs	r3, r3, #21
 800407a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800408c:	d112      	bne.n	80040b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	2180      	movs	r1, #128	@ 0x80
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ff47 	bl	8003f2c <SPI_WaitFlagStateUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e00f      	b.n	80040d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	3b01      	subs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ca:	2b80      	cmp	r3, #128	@ 0x80
 80040cc:	d0f2      	beq.n	80040b4 <SPI_EndRxTxTransaction+0x78>
 80040ce:	e000      	b.n	80040d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80040d0:	bf00      	nop
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000058 	.word	0x20000058
 80040e0:	165e9f81 	.word	0x165e9f81

080040e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e041      	b.n	800417a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f839 	bl	8004182 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 f9b2 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e044      	b.n	800423a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_TIM_Base_Start_IT+0xb0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041da:	d013      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <HAL_TIM_Base_Start_IT+0xb4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <HAL_TIM_Base_Start_IT+0xb8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <HAL_TIM_Base_Start_IT+0xbc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x6c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a16      	ldr	r2, [pc, #88]	@ (8004258 <HAL_TIM_Base_Start_IT+0xc0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d111      	bne.n	8004228 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d010      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	e007      	b.n	8004238 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010000 	.word	0x40010000
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800
 8004254:	40000c00 	.word	0x40000c00
 8004258:	40014000 	.word	0x40014000

0800425c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0202 	mvn.w	r2, #2
 8004290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8d2 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f8c4 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8d5 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0204 	mvn.w	r2, #4
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8ac 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f89e 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8af 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f886 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f878 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f889 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2208      	movs	r2, #8
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f860 	bl	8004450 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f852 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f863 	bl	8004464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0201 	mvn.w	r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe fa95 	bl	80028f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8e6 	bl	80045b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f834 	bl	8004478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0220 	mvn.w	r2, #32
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8b8 	bl	80045a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3a      	ldr	r2, [pc, #232]	@ (8004588 <TIM_Base_SetConfig+0xfc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00f      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044aa:	d00b      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a37      	ldr	r2, [pc, #220]	@ (800458c <TIM_Base_SetConfig+0x100>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a36      	ldr	r2, [pc, #216]	@ (8004590 <TIM_Base_SetConfig+0x104>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a35      	ldr	r2, [pc, #212]	@ (8004594 <TIM_Base_SetConfig+0x108>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004588 <TIM_Base_SetConfig+0xfc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01b      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e4:	d017      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <TIM_Base_SetConfig+0x100>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <TIM_Base_SetConfig+0x104>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00f      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a26      	ldr	r2, [pc, #152]	@ (8004594 <TIM_Base_SetConfig+0x108>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00b      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a25      	ldr	r2, [pc, #148]	@ (8004598 <TIM_Base_SetConfig+0x10c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a24      	ldr	r2, [pc, #144]	@ (800459c <TIM_Base_SetConfig+0x110>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a23      	ldr	r2, [pc, #140]	@ (80045a0 <TIM_Base_SetConfig+0x114>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800451c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a0e      	ldr	r2, [pc, #56]	@ (8004588 <TIM_Base_SetConfig+0xfc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d103      	bne.n	800455c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	611a      	str	r2, [r3, #16]
  }
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <__NVIC_SetPriority>:
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db0a      	blt.n	80045f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	490c      	ldr	r1, [pc, #48]	@ (8004618 <__NVIC_SetPriority+0x4c>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	0112      	lsls	r2, r2, #4
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	440b      	add	r3, r1
 80045f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045f4:	e00a      	b.n	800460c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4908      	ldr	r1, [pc, #32]	@ (800461c <__NVIC_SetPriority+0x50>)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	3b04      	subs	r3, #4
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	440b      	add	r3, r1
 800460a:	761a      	strb	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000e100 	.word	0xe000e100
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004624:	4b05      	ldr	r3, [pc, #20]	@ (800463c <SysTick_Handler+0x1c>)
 8004626:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004628:	f001 fd46 	bl	80060b8 <xTaskGetSchedulerState>
 800462c:	4603      	mov	r3, r0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004632:	f002 fb99 	bl	8006d68 <xPortSysTickHandler>
  }
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	e000e010 	.word	0xe000e010

08004640 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004644:	2100      	movs	r1, #0
 8004646:	f06f 0004 	mvn.w	r0, #4
 800464a:	f7ff ffbf 	bl	80045cc <__NVIC_SetPriority>
#endif
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465a:	f3ef 8305 	mrs	r3, IPSR
 800465e:	603b      	str	r3, [r7, #0]
  return(result);
 8004660:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004666:	f06f 0305 	mvn.w	r3, #5
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e00c      	b.n	8004688 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800466e:	4b0a      	ldr	r3, [pc, #40]	@ (8004698 <osKernelInitialize+0x44>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004676:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <osKernelInitialize+0x44>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e002      	b.n	8004688 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004688:	687b      	ldr	r3, [r7, #4]
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	2000022c 	.word	0x2000022c

0800469c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a2:	f3ef 8305 	mrs	r3, IPSR
 80046a6:	603b      	str	r3, [r7, #0]
  return(result);
 80046a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80046ae:	f06f 0305 	mvn.w	r3, #5
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	e010      	b.n	80046d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <osKernelStart+0x48>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d109      	bne.n	80046d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046be:	f7ff ffbf 	bl	8004640 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046c2:	4b08      	ldr	r3, [pc, #32]	@ (80046e4 <osKernelStart+0x48>)
 80046c4:	2202      	movs	r2, #2
 80046c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046c8:	f001 f892 	bl	80057f0 <vTaskStartScheduler>
      stat = osOK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	e002      	b.n	80046d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046d8:	687b      	ldr	r3, [r7, #4]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	2000022c 	.word	0x2000022c

080046e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08e      	sub	sp, #56	@ 0x38
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f8:	f3ef 8305 	mrs	r3, IPSR
 80046fc:	617b      	str	r3, [r7, #20]
  return(result);
 80046fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004700:	2b00      	cmp	r3, #0
 8004702:	d17e      	bne.n	8004802 <osThreadNew+0x11a>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d07b      	beq.n	8004802 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800470a:	2380      	movs	r3, #128	@ 0x80
 800470c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800470e:	2318      	movs	r3, #24
 8004710:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800471a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d045      	beq.n	80047ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <osThreadNew+0x48>
        name = attr->name;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <osThreadNew+0x6e>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b38      	cmp	r3, #56	@ 0x38
 8004748:	d805      	bhi.n	8004756 <osThreadNew+0x6e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <osThreadNew+0x72>
        return (NULL);
 8004756:	2300      	movs	r3, #0
 8004758:	e054      	b.n	8004804 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <osThreadNew+0xa8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2ba7      	cmp	r3, #167	@ 0xa7
 8004778:	d90a      	bls.n	8004790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <osThreadNew+0xa8>
        mem = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e010      	b.n	80047b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10c      	bne.n	80047b2 <osThreadNew+0xca>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <osThreadNew+0xca>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <osThreadNew+0xca>
          mem = 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e001      	b.n	80047b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d110      	bne.n	80047da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fe1a 	bl	8005408 <xTaskCreateStatic>
 80047d4:	4603      	mov	r3, r0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	e013      	b.n	8004802 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d110      	bne.n	8004802 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	f107 0310 	add.w	r3, r7, #16
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fe68 	bl	80054c8 <xTaskCreate>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d001      	beq.n	8004802 <osThreadNew+0x11a>
            hTask = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004802:	693b      	ldr	r3, [r7, #16]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3728      	adds	r7, #40	@ 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004814:	f3ef 8305 	mrs	r3, IPSR
 8004818:	60bb      	str	r3, [r7, #8]
  return(result);
 800481a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <osDelay+0x1c>
    stat = osErrorISR;
 8004820:	f06f 0305 	mvn.w	r3, #5
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e007      	b.n	8004838 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ffa6 	bl	8005784 <vTaskDelay>
    }
  }

  return (stat);
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a07      	ldr	r2, [pc, #28]	@ (8004870 <vApplicationGetIdleTaskMemory+0x2c>)
 8004854:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a06      	ldr	r2, [pc, #24]	@ (8004874 <vApplicationGetIdleTaskMemory+0x30>)
 800485a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000230 	.word	0x20000230
 8004874:	200002d8 	.word	0x200002d8

08004878 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a07      	ldr	r2, [pc, #28]	@ (80048a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004888:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <vApplicationGetTimerTaskMemory+0x30>)
 800488e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004896:	601a      	str	r2, [r3, #0]
}
 8004898:	bf00      	nop
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	200004d8 	.word	0x200004d8
 80048a8:	20000580 	.word	0x20000580

080048ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f103 0208 	add.w	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 0208 	add.w	r2, r3, #8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f103 0208 	add.w	r2, r3, #8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004964:	d103      	bne.n	800496e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e00c      	b.n	8004988 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3308      	adds	r3, #8
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e002      	b.n	800497c <vListInsert+0x2e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	429a      	cmp	r2, r3
 8004986:	d2f6      	bcs.n	8004976 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6892      	ldr	r2, [r2, #8]
 80049d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6852      	ldr	r2, [r2, #4]
 80049e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d103      	bne.n	80049f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1e5a      	subs	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a40:	f002 f902 	bl	8006c48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	3b01      	subs	r3, #1
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	22ff      	movs	r2, #255	@ 0xff
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	22ff      	movs	r2, #255	@ 0xff
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d114      	bne.n	8004ac0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01a      	beq.n	8004ad4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f942 	bl	8005d2c <xTaskRemoveFromEventList>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d012      	beq.n	8004ad4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <xQueueGenericReset+0xd0>)
 8004ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	e009      	b.n	8004ad4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3310      	adds	r3, #16
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fef1 	bl	80048ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3324      	adds	r3, #36	@ 0x24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff feec 	bl	80048ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ad4:	f002 f8ea 	bl	8006cac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ad8:	2301      	movs	r3, #1
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	@ 0x38
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <xQueueGenericCreateStatic+0x56>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <xQueueGenericCreateStatic+0x5a>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericCreateStatic+0x5c>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <xQueueGenericCreateStatic+0x84>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <xQueueGenericCreateStatic+0x88>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <xQueueGenericCreateStatic+0x8a>
 8004b70:	2300      	movs	r3, #0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	61fb      	str	r3, [r7, #28]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b8e:	2350      	movs	r3, #80	@ 0x50
 8004b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b50      	cmp	r3, #80	@ 0x50
 8004b96:	d00b      	beq.n	8004bb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	61bb      	str	r3, [r7, #24]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f805 	bl	8004be2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3730      	adds	r7, #48	@ 0x30
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c10:	2101      	movs	r1, #1
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f7ff fefe 	bl	8004a14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08e      	sub	sp, #56	@ 0x38
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c36:	2300      	movs	r3, #0
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xQueueGenericSend+0x34>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <xQueueGenericSend+0x42>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <xQueueGenericSend+0x46>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <xQueueGenericSend+0x48>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <xQueueGenericSend+0x64>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSend+0x72>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <xQueueGenericSend+0x76>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <xQueueGenericSend+0x78>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <xQueueGenericSend+0x94>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	623b      	str	r3, [r7, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	bf00      	nop
 8004cba:	e7fd      	b.n	8004cb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cbc:	f001 f9fc 	bl	80060b8 <xTaskGetSchedulerState>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <xQueueGenericSend+0xa4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <xQueueGenericSend+0xa8>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <xQueueGenericSend+0xaa>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <xQueueGenericSend+0xc6>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61fb      	str	r3, [r7, #28]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cee:	f001 ffab 	bl	8006c48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <xQueueGenericSend+0xdc>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d129      	bne.n	8004d58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d0a:	f000 fa0f 	bl	800512c <prvCopyDataToQueue>
 8004d0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	3324      	adds	r3, #36	@ 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 f805 	bl	8005d2c <xTaskRemoveFromEventList>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d28:	4b3f      	ldr	r3, [pc, #252]	@ (8004e28 <xQueueGenericSend+0x200>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	e00a      	b.n	8004d50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d40:	4b39      	ldr	r3, [pc, #228]	@ (8004e28 <xQueueGenericSend+0x200>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d50:	f001 ffac 	bl	8006cac <vPortExitCritical>
				return pdPASS;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e063      	b.n	8004e20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5e:	f001 ffa5 	bl	8006cac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e05c      	b.n	8004e20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f83f 	bl	8005df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d7a:	f001 ff97 	bl	8006cac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7e:	f000 fda7 	bl	80058d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d82:	f001 ff61 	bl	8006c48 <vPortEnterCritical>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d92:	d103      	bne.n	8004d9c <xQueueGenericSend+0x174>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004da2:	b25b      	sxtb	r3, r3
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da8:	d103      	bne.n	8004db2 <xQueueGenericSend+0x18a>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004db2:	f001 ff7b 	bl	8006cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db6:	1d3a      	adds	r2, r7, #4
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f82e 	bl	8005e20 <xTaskCheckForTimeOut>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d124      	bne.n	8004e14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dcc:	f000 faa6 	bl	800531c <prvIsQueueFull>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	3310      	adds	r3, #16
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ff52 	bl	8005c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004de6:	f000 fa31 	bl	800524c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dea:	f000 fd7f 	bl	80058ec <xTaskResumeAll>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af7c 	bne.w	8004cee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <xQueueGenericSend+0x200>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	e772      	b.n	8004cee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e0a:	f000 fa1f 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0e:	f000 fd6d 	bl	80058ec <xTaskResumeAll>
 8004e12:	e76c      	b.n	8004cee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e16:	f000 fa19 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e1a:	f000 fd67 	bl	80058ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3738      	adds	r7, #56	@ 0x38
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b090      	sub	sp, #64	@ 0x40
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <xQueueGenericSendFromISR+0x3e>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueGenericSendFromISR+0x42>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueGenericSendFromISR+0x44>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <xQueueGenericSendFromISR+0x6e>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <xQueueGenericSendFromISR+0x72>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueGenericSendFromISR+0x74>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	bf00      	nop
 8004eba:	e7fd      	b.n	8004eb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ebc:	f001 ffa4 	bl	8006e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ec0:	f3ef 8211 	mrs	r2, BASEPRI
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d302      	bcc.n	8004eee <xQueueGenericSendFromISR+0xc2>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d12f      	bne.n	8004f4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f04:	f000 f912 	bl	800512c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f10:	d112      	bne.n	8004f38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	3324      	adds	r3, #36	@ 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 ff04 	bl	8005d2c <xTaskRemoveFromEventList>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00e      	beq.n	8004f48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e007      	b.n	8004f48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	b25a      	sxtb	r2, r3
 8004f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f4c:	e001      	b.n	8004f52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3740      	adds	r7, #64	@ 0x40
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	@ 0x30
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10b      	bne.n	8004f9a <xQueueReceive+0x32>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	623b      	str	r3, [r7, #32]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <xQueueReceive+0x40>
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <xQueueReceive+0x44>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <xQueueReceive+0x46>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xQueueReceive+0x62>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	61fb      	str	r3, [r7, #28]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fca:	f001 f875 	bl	80060b8 <xTaskGetSchedulerState>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <xQueueReceive+0x72>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <xQueueReceive+0x76>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueReceive+0x78>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xQueueReceive+0x94>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	61bb      	str	r3, [r7, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffc:	f001 fe24 	bl	8006c48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005010:	f000 f8f6 	bl	8005200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fe7f 	bl	8005d2c <xTaskRemoveFromEventList>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <xQueueReceive+0x1c0>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005044:	f001 fe32 	bl	8006cac <vPortExitCritical>
				return pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	e069      	b.n	8005120 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005052:	f001 fe2b 	bl	8006cac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005056:	2300      	movs	r3, #0
 8005058:	e062      	b.n	8005120 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fec5 	bl	8005df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800506e:	f001 fe1d 	bl	8006cac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005072:	f000 fc2d 	bl	80058d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005076:	f001 fde7 	bl	8006c48 <vPortEnterCritical>
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005086:	d103      	bne.n	8005090 <xQueueReceive+0x128>
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005096:	b25b      	sxtb	r3, r3
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800509c:	d103      	bne.n	80050a6 <xQueueReceive+0x13e>
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a6:	f001 fe01 	bl	8006cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050aa:	1d3a      	adds	r2, r7, #4
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 feb4 	bl	8005e20 <xTaskCheckForTimeOut>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d123      	bne.n	8005106 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c0:	f000 f916 	bl	80052f0 <prvIsQueueEmpty>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	3324      	adds	r3, #36	@ 0x24
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fdd8 	bl	8005c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050da:	f000 f8b7 	bl	800524c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050de:	f000 fc05 	bl	80058ec <xTaskResumeAll>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d189      	bne.n	8004ffc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <xQueueReceive+0x1c0>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e780      	b.n	8004ffc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fc:	f000 f8a6 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005100:	f000 fbf4 	bl	80058ec <xTaskResumeAll>
 8005104:	e77a      	b.n	8004ffc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005108:	f000 f8a0 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800510c:	f000 fbee 	bl	80058ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005112:	f000 f8ed 	bl	80052f0 <prvIsQueueEmpty>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	f43f af6f 	beq.w	8004ffc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800511e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005120:	4618      	mov	r0, r3
 8005122:	3730      	adds	r7, #48	@ 0x30
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d14d      	bne.n	80051ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ffcc 	bl	80060f4 <xTaskPriorityDisinherit>
 800515c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	e043      	b.n	80051ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d119      	bne.n	80051a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6858      	ldr	r0, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	461a      	mov	r2, r3
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	f002 f934 	bl	80073e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d32b      	bcc.n	80051ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e026      	b.n	80051ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68d8      	ldr	r0, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a8:	461a      	mov	r2, r3
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	f002 f91a 	bl	80073e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	425b      	negs	r3, r3
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d207      	bcs.n	80051dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	425b      	negs	r3, r3
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d105      	bne.n	80051ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051f6:	697b      	ldr	r3, [r7, #20]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	441a      	add	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d303      	bcc.n	8005234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f002 f8d0 	bl	80073e4 <memcpy>
	}
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005254:	f001 fcf8 	bl	8006c48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800525e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005260:	e011      	b.n	8005286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	@ 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fd5c 	bl	8005d2c <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800527a:	f000 fe35 	bl	8005ee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	3b01      	subs	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dce9      	bgt.n	8005262 <prvUnlockQueue+0x16>
 800528e:	e000      	b.n	8005292 <prvUnlockQueue+0x46>
					break;
 8005290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22ff      	movs	r2, #255	@ 0xff
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800529a:	f001 fd07 	bl	8006cac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800529e:	f001 fcd3 	bl	8006c48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052aa:	e011      	b.n	80052d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d012      	beq.n	80052da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fd37 	bl	8005d2c <xTaskRemoveFromEventList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052c4:	f000 fe10 	bl	8005ee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dce9      	bgt.n	80052ac <prvUnlockQueue+0x60>
 80052d8:	e000      	b.n	80052dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	22ff      	movs	r2, #255	@ 0xff
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052e4:	f001 fce2 	bl	8006cac <vPortExitCritical>
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f8:	f001 fca6 	bl	8006c48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e001      	b.n	800530e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800530e:	f001 fccd 	bl	8006cac <vPortExitCritical>

	return xReturn;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005324:	f001 fc90 	bl	8006c48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	429a      	cmp	r2, r3
 8005332:	d102      	bne.n	800533a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e001      	b.n	800533e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800533e:	f001 fcb5 	bl	8006cac <vPortExitCritical>

	return xReturn;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e014      	b.n	8005386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800535c:	4a0f      	ldr	r2, [pc, #60]	@ (800539c <vQueueAddToRegistry+0x50>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005368:	490c      	ldr	r1, [pc, #48]	@ (800539c <vQueueAddToRegistry+0x50>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <vQueueAddToRegistry+0x50>)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800537e:	e006      	b.n	800538e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b07      	cmp	r3, #7
 800538a:	d9e7      	bls.n	800535c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	20000980 	.word	0x20000980

080053a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053b0:	f001 fc4a 	bl	8006c48 <vPortEnterCritical>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053ba:	b25b      	sxtb	r3, r3
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053c0:	d103      	bne.n	80053ca <vQueueWaitForMessageRestricted+0x2a>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053d6:	d103      	bne.n	80053e0 <vQueueWaitForMessageRestricted+0x40>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053e0:	f001 fc64 	bl	8006cac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3324      	adds	r3, #36	@ 0x24
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fc6d 	bl	8005cd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053fa:	6978      	ldr	r0, [r7, #20]
 80053fc:	f7ff ff26 	bl	800524c <prvUnlockQueue>
	}
 8005400:	bf00      	nop
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	@ 0x38
 800540c:	af04      	add	r7, sp, #16
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xTaskCreateStatic+0x2c>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	623b      	str	r3, [r7, #32]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <xTaskCreateStatic+0x4a>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	61fb      	str	r3, [r7, #28]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005452:	23a8      	movs	r3, #168	@ 0xa8
 8005454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2ba8      	cmp	r3, #168	@ 0xa8
 800545a:	d00b      	beq.n	8005474 <xTaskCreateStatic+0x6c>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	61bb      	str	r3, [r7, #24]
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005474:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01e      	beq.n	80054ba <xTaskCreateStatic+0xb2>
 800547c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800548c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548e:	2202      	movs	r2, #2
 8005490:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005494:	2300      	movs	r3, #0
 8005496:	9303      	str	r3, [sp, #12]
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f851 	bl	8005554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054b4:	f000 f8f6 	bl	80056a4 <prvAddNewTaskToReadyList>
 80054b8:	e001      	b.n	80054be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054be:	697b      	ldr	r3, [r7, #20]
	}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3728      	adds	r7, #40	@ 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	@ 0x30
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fcd5 	bl	8006e8c <pvPortMalloc>
 80054e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ea:	20a8      	movs	r0, #168	@ 0xa8
 80054ec:	f001 fcce 	bl	8006e8c <pvPortMalloc>
 80054f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80054fe:	e005      	b.n	800550c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f001 fd91 	bl	8007028 <vPortFree>
 8005506:	e001      	b.n	800550c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d017      	beq.n	8005542 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	2300      	movs	r3, #0
 800551e:	9303      	str	r3, [sp, #12]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f80f 	bl	8005554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005536:	69f8      	ldr	r0, [r7, #28]
 8005538:	f000 f8b4 	bl	80056a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800553c:	2301      	movs	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e002      	b.n	8005548 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005546:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005548:	69bb      	ldr	r3, [r7, #24]
	}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	461a      	mov	r2, r3
 800556c:	21a5      	movs	r1, #165	@ 0xa5
 800556e:	f001 feaf 	bl	80072d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800557c:	3b01      	subs	r3, #1
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	617b      	str	r3, [r7, #20]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01f      	beq.n	80055f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e012      	b.n	80055e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	3334      	adds	r3, #52	@ 0x34
 80055ca:	460a      	mov	r2, r1
 80055cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d006      	beq.n	80055e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	3301      	adds	r3, #1
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d9e9      	bls.n	80055ba <prvInitialiseNewTask+0x66>
 80055e6:	e000      	b.n	80055ea <prvInitialiseNewTask+0x96>
			{
				break;
 80055e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055f2:	e003      	b.n	80055fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	2b37      	cmp	r3, #55	@ 0x37
 8005600:	d901      	bls.n	8005606 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005602:	2337      	movs	r3, #55	@ 0x37
 8005604:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800560a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005610:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	2200      	movs	r2, #0
 8005616:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff f965 	bl	80048ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	3318      	adds	r3, #24
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff f960 	bl	80048ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005630:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	2200      	movs	r2, #0
 8005646:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	3354      	adds	r3, #84	@ 0x54
 8005656:	224c      	movs	r2, #76	@ 0x4c
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f001 fe38 	bl	80072d0 <memset>
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	4a0d      	ldr	r2, [pc, #52]	@ (8005698 <prvInitialiseNewTask+0x144>)
 8005664:	659a      	str	r2, [r3, #88]	@ 0x58
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	4a0c      	ldr	r2, [pc, #48]	@ (800569c <prvInitialiseNewTask+0x148>)
 800566a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	4a0c      	ldr	r2, [pc, #48]	@ (80056a0 <prvInitialiseNewTask+0x14c>)
 8005670:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	69b8      	ldr	r0, [r7, #24]
 8005678:	f001 f9b8 	bl	80069ec <pxPortInitialiseStack>
 800567c:	4602      	mov	r2, r0
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800568e:	bf00      	nop
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20004c14 	.word	0x20004c14
 800569c:	20004c7c 	.word	0x20004c7c
 80056a0:	20004ce4 	.word	0x20004ce4

080056a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056ac:	f001 facc 	bl	8006c48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005768 <prvAddNewTaskToReadyList+0xc4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <prvAddNewTaskToReadyList+0xc4>)
 80056b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056ba:	4b2c      	ldr	r3, [pc, #176]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056c2:	4a2a      	ldr	r2, [pc, #168]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056c8:	4b27      	ldr	r3, [pc, #156]	@ (8005768 <prvAddNewTaskToReadyList+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d110      	bne.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d0:	f000 fc2e 	bl	8005f30 <prvInitialiseTaskLists>
 80056d4:	e00d      	b.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056d6:	4b26      	ldr	r3, [pc, #152]	@ (8005770 <prvAddNewTaskToReadyList+0xcc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056de:	4b23      	ldr	r3, [pc, #140]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d802      	bhi.n	80056f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056ec:	4a1f      	ldr	r2, [pc, #124]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <prvAddNewTaskToReadyList+0xd0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <prvAddNewTaskToReadyList+0xd0>)
 80056fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <prvAddNewTaskToReadyList+0xd0>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005708:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <prvAddNewTaskToReadyList+0xd4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d903      	bls.n	8005718 <prvAddNewTaskToReadyList+0x74>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <prvAddNewTaskToReadyList+0xd4>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a15      	ldr	r2, [pc, #84]	@ (800577c <prvAddNewTaskToReadyList+0xd8>)
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff f8e9 	bl	8004906 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005734:	f001 faba 	bl	8006cac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005738:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <prvAddNewTaskToReadyList+0xcc>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005740:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <prvAddNewTaskToReadyList+0xc8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574a:	429a      	cmp	r2, r3
 800574c:	d207      	bcs.n	800575e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <prvAddNewTaskToReadyList+0xdc>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000e94 	.word	0x20000e94
 800576c:	200009c0 	.word	0x200009c0
 8005770:	20000ea0 	.word	0x20000ea0
 8005774:	20000eb0 	.word	0x20000eb0
 8005778:	20000e9c 	.word	0x20000e9c
 800577c:	200009c4 	.word	0x200009c4
 8005780:	e000ed04 	.word	0xe000ed04

08005784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d018      	beq.n	80057c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005796:	4b14      	ldr	r3, [pc, #80]	@ (80057e8 <vTaskDelay+0x64>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <vTaskDelay+0x32>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60bb      	str	r3, [r7, #8]
}
 80057b0:	bf00      	nop
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057b6:	f000 f88b 	bl	80058d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fd09 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057c2:	f000 f893 	bl	80058ec <xTaskResumeAll>
 80057c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057ce:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <vTaskDelay+0x68>)
 80057d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000ebc 	.word	0x20000ebc
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	@ 0x28
 80057f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057fe:	463a      	mov	r2, r7
 8005800:	1d39      	adds	r1, r7, #4
 8005802:	f107 0308 	add.w	r3, r7, #8
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff f81c 	bl	8004844 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	2300      	movs	r3, #0
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2300      	movs	r3, #0
 800581c:	460a      	mov	r2, r1
 800581e:	4924      	ldr	r1, [pc, #144]	@ (80058b0 <vTaskStartScheduler+0xc0>)
 8005820:	4824      	ldr	r0, [pc, #144]	@ (80058b4 <vTaskStartScheduler+0xc4>)
 8005822:	f7ff fdf1 	bl	8005408 <xTaskCreateStatic>
 8005826:	4603      	mov	r3, r0
 8005828:	4a23      	ldr	r2, [pc, #140]	@ (80058b8 <vTaskStartScheduler+0xc8>)
 800582a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800582c:	4b22      	ldr	r3, [pc, #136]	@ (80058b8 <vTaskStartScheduler+0xc8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e001      	b.n	800583e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005844:	f000 fd1a 	bl	800627c <xTimerCreateTimerTask>
 8005848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d11b      	bne.n	8005888 <vTaskStartScheduler+0x98>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
}
 8005862:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005864:	4b15      	ldr	r3, [pc, #84]	@ (80058bc <vTaskStartScheduler+0xcc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3354      	adds	r3, #84	@ 0x54
 800586a:	4a15      	ldr	r2, [pc, #84]	@ (80058c0 <vTaskStartScheduler+0xd0>)
 800586c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800586e:	4b15      	ldr	r3, [pc, #84]	@ (80058c4 <vTaskStartScheduler+0xd4>)
 8005870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005874:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005876:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <vTaskStartScheduler+0xd8>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800587c:	4b13      	ldr	r3, [pc, #76]	@ (80058cc <vTaskStartScheduler+0xdc>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005882:	f001 f93d 	bl	8006b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005886:	e00f      	b.n	80058a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800588e:	d10b      	bne.n	80058a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <vTaskStartScheduler+0xb4>
}
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	08007d74 	.word	0x08007d74
 80058b4:	08005f01 	.word	0x08005f01
 80058b8:	20000eb8 	.word	0x20000eb8
 80058bc:	200009c0 	.word	0x200009c0
 80058c0:	20000068 	.word	0x20000068
 80058c4:	20000eb4 	.word	0x20000eb4
 80058c8:	20000ea0 	.word	0x20000ea0
 80058cc:	20000e98 	.word	0x20000e98

080058d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058d4:	4b04      	ldr	r3, [pc, #16]	@ (80058e8 <vTaskSuspendAll+0x18>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	4a03      	ldr	r2, [pc, #12]	@ (80058e8 <vTaskSuspendAll+0x18>)
 80058dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058de:	bf00      	nop
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	20000ebc 	.word	0x20000ebc

080058ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058fa:	4b42      	ldr	r3, [pc, #264]	@ (8005a04 <xTaskResumeAll+0x118>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <xTaskResumeAll+0x2e>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	603b      	str	r3, [r7, #0]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800591a:	f001 f995 	bl	8006c48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800591e:	4b39      	ldr	r3, [pc, #228]	@ (8005a04 <xTaskResumeAll+0x118>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3b01      	subs	r3, #1
 8005924:	4a37      	ldr	r2, [pc, #220]	@ (8005a04 <xTaskResumeAll+0x118>)
 8005926:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005928:	4b36      	ldr	r3, [pc, #216]	@ (8005a04 <xTaskResumeAll+0x118>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d162      	bne.n	80059f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005930:	4b35      	ldr	r3, [pc, #212]	@ (8005a08 <xTaskResumeAll+0x11c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05e      	beq.n	80059f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005938:	e02f      	b.n	800599a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593a:	4b34      	ldr	r3, [pc, #208]	@ (8005a0c <xTaskResumeAll+0x120>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3318      	adds	r3, #24
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff f83a 	bl	80049c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3304      	adds	r3, #4
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff f835 	bl	80049c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a10 <xTaskResumeAll+0x124>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d903      	bls.n	800596a <xTaskResumeAll+0x7e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4a2a      	ldr	r2, [pc, #168]	@ (8005a10 <xTaskResumeAll+0x124>)
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4a27      	ldr	r2, [pc, #156]	@ (8005a14 <xTaskResumeAll+0x128>)
 8005978:	441a      	add	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f7fe ffc0 	bl	8004906 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	4b23      	ldr	r3, [pc, #140]	@ (8005a18 <xTaskResumeAll+0x12c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	429a      	cmp	r2, r3
 8005992:	d302      	bcc.n	800599a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005994:	4b21      	ldr	r3, [pc, #132]	@ (8005a1c <xTaskResumeAll+0x130>)
 8005996:	2201      	movs	r2, #1
 8005998:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a0c <xTaskResumeAll+0x120>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1cb      	bne.n	800593a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059a8:	f000 fb66 	bl	8006078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <xTaskResumeAll+0x134>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d010      	beq.n	80059da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059b8:	f000 f846 	bl	8005a48 <xTaskIncrementTick>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059c2:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <xTaskResumeAll+0x130>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f1      	bne.n	80059b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <xTaskResumeAll+0x134>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <xTaskResumeAll+0x130>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <xTaskResumeAll+0x138>)
 80059e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059f6:	f001 f959 	bl	8006cac <vPortExitCritical>

	return xAlreadyYielded;
 80059fa:	68bb      	ldr	r3, [r7, #8]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000ebc 	.word	0x20000ebc
 8005a08:	20000e94 	.word	0x20000e94
 8005a0c:	20000e54 	.word	0x20000e54
 8005a10:	20000e9c 	.word	0x20000e9c
 8005a14:	200009c4 	.word	0x200009c4
 8005a18:	200009c0 	.word	0x200009c0
 8005a1c:	20000ea8 	.word	0x20000ea8
 8005a20:	20000ea4 	.word	0x20000ea4
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a2e:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <xTaskGetTickCount+0x1c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a34:	687b      	ldr	r3, [r7, #4]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000e98 	.word	0x20000e98

08005a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a52:	4b4f      	ldr	r3, [pc, #316]	@ (8005b90 <xTaskIncrementTick+0x148>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 8090 	bne.w	8005b7c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b94 <xTaskIncrementTick+0x14c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a64:	4a4b      	ldr	r2, [pc, #300]	@ (8005b94 <xTaskIncrementTick+0x14c>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d121      	bne.n	8005ab4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a70:	4b49      	ldr	r3, [pc, #292]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	603b      	str	r3, [r7, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <xTaskIncrementTick+0x46>
 8005a92:	4b41      	ldr	r3, [pc, #260]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	4b40      	ldr	r3, [pc, #256]	@ (8005b9c <xTaskIncrementTick+0x154>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8005b9c <xTaskIncrementTick+0x154>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba0 <xTaskIncrementTick+0x158>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a3c      	ldr	r2, [pc, #240]	@ (8005ba0 <xTaskIncrementTick+0x158>)
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	f000 fae2 	bl	8006078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba4 <xTaskIncrementTick+0x15c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d349      	bcc.n	8005b52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005abe:	4b36      	ldr	r3, [pc, #216]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac8:	4b36      	ldr	r3, [pc, #216]	@ (8005ba4 <xTaskIncrementTick+0x15c>)
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ace:	601a      	str	r2, [r3, #0]
					break;
 8005ad0:	e03f      	b.n	8005b52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <xTaskIncrementTick+0x150>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d203      	bcs.n	8005af2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005aea:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba4 <xTaskIncrementTick+0x15c>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005af0:	e02f      	b.n	8005b52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe ff62 	bl	80049c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe ff59 	bl	80049c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b12:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <xTaskIncrementTick+0x160>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d903      	bls.n	8005b22 <xTaskIncrementTick+0xda>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <xTaskIncrementTick+0x160>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bac <xTaskIncrementTick+0x164>)
 8005b30:	441a      	add	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7fe fee4 	bl	8004906 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <xTaskIncrementTick+0x168>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d3b8      	bcc.n	8005abe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b50:	e7b5      	b.n	8005abe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b52:	4b17      	ldr	r3, [pc, #92]	@ (8005bb0 <xTaskIncrementTick+0x168>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	4914      	ldr	r1, [pc, #80]	@ (8005bac <xTaskIncrementTick+0x164>)
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d901      	bls.n	8005b6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b6e:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <xTaskIncrementTick+0x16c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e004      	b.n	8005b86 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb8 <xTaskIncrementTick+0x170>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <xTaskIncrementTick+0x170>)
 8005b84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000ebc 	.word	0x20000ebc
 8005b94:	20000e98 	.word	0x20000e98
 8005b98:	20000e4c 	.word	0x20000e4c
 8005b9c:	20000e50 	.word	0x20000e50
 8005ba0:	20000eac 	.word	0x20000eac
 8005ba4:	20000eb4 	.word	0x20000eb4
 8005ba8:	20000e9c 	.word	0x20000e9c
 8005bac:	200009c4 	.word	0x200009c4
 8005bb0:	200009c0 	.word	0x200009c0
 8005bb4:	20000ea8 	.word	0x20000ea8
 8005bb8:	20000ea4 	.word	0x20000ea4

08005bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c70 <vTaskSwitchContext+0xb4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bca:	4b2a      	ldr	r3, [pc, #168]	@ (8005c74 <vTaskSwitchContext+0xb8>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd0:	e047      	b.n	8005c62 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005bd2:	4b28      	ldr	r3, [pc, #160]	@ (8005c74 <vTaskSwitchContext+0xb8>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <vTaskSwitchContext+0xbc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e011      	b.n	8005c04 <vTaskSwitchContext+0x48>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <vTaskSwitchContext+0x42>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	607b      	str	r3, [r7, #4]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vTaskSwitchContext+0x3e>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	491d      	ldr	r1, [pc, #116]	@ (8005c7c <vTaskSwitchContext+0xc0>)
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0e3      	beq.n	8005be0 <vTaskSwitchContext+0x24>
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <vTaskSwitchContext+0xc0>)
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d104      	bne.n	8005c48 <vTaskSwitchContext+0x8c>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <vTaskSwitchContext+0xc4>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4a09      	ldr	r2, [pc, #36]	@ (8005c78 <vTaskSwitchContext+0xbc>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c58:	4b09      	ldr	r3, [pc, #36]	@ (8005c80 <vTaskSwitchContext+0xc4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3354      	adds	r3, #84	@ 0x54
 8005c5e:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <vTaskSwitchContext+0xc8>)
 8005c60:	6013      	str	r3, [r2, #0]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000ebc 	.word	0x20000ebc
 8005c74:	20000ea8 	.word	0x20000ea8
 8005c78:	20000e9c 	.word	0x20000e9c
 8005c7c:	200009c4 	.word	0x200009c4
 8005c80:	200009c0 	.word	0x200009c0
 8005c84:	20000068 	.word	0x20000068

08005c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cb0:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <vTaskPlaceOnEventList+0x48>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fe fe48 	bl	800494e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6838      	ldr	r0, [r7, #0]
 8005cc2:	f000 fa87 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	200009c0 	.word	0x200009c0

08005cd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	617b      	str	r3, [r7, #20]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3318      	adds	r3, #24
 8005d04:	4619      	mov	r1, r3
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7fe fdfd 	bl	8004906 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	f000 fa5a 	bl	80061d4 <prvAddCurrentTaskToDelayedList>
	}
 8005d20:	bf00      	nop
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200009c0 	.word	0x200009c0

08005d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	60fb      	str	r3, [r7, #12]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fe2e 	bl	80049c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d64:	4b1d      	ldr	r3, [pc, #116]	@ (8005ddc <xTaskRemoveFromEventList+0xb0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe fe25 	bl	80049c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <xTaskRemoveFromEventList+0xb4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d903      	bls.n	8005d8a <xTaskRemoveFromEventList+0x5e>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	4a16      	ldr	r2, [pc, #88]	@ (8005de0 <xTaskRemoveFromEventList+0xb4>)
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8e:	4613      	mov	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4a13      	ldr	r2, [pc, #76]	@ (8005de4 <xTaskRemoveFromEventList+0xb8>)
 8005d98:	441a      	add	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe fdb0 	bl	8004906 <vListInsertEnd>
 8005da6:	e005      	b.n	8005db4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3318      	adds	r3, #24
 8005dac:	4619      	mov	r1, r3
 8005dae:	480e      	ldr	r0, [pc, #56]	@ (8005de8 <xTaskRemoveFromEventList+0xbc>)
 8005db0:	f7fe fda9 	bl	8004906 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <xTaskRemoveFromEventList+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d905      	bls.n	8005dce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <xTaskRemoveFromEventList+0xc4>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e001      	b.n	8005dd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dd2:	697b      	ldr	r3, [r7, #20]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000ebc 	.word	0x20000ebc
 8005de0:	20000e9c 	.word	0x20000e9c
 8005de4:	200009c4 	.word	0x200009c4
 8005de8:	20000e54 	.word	0x20000e54
 8005dec:	200009c0 	.word	0x200009c0
 8005df0:	20000ea8 	.word	0x20000ea8

08005df4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	@ (8005e18 <vTaskInternalSetTimeOutState+0x24>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <vTaskInternalSetTimeOutState+0x28>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	605a      	str	r2, [r3, #4]
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	20000eac 	.word	0x20000eac
 8005e1c:	20000e98 	.word	0x20000e98

08005e20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	60fb      	str	r3, [r7, #12]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e66:	f000 feef 	bl	8006c48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee0 <xTaskCheckForTimeOut+0xc0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e82:	d102      	bne.n	8005e8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e023      	b.n	8005ed2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ee4 <xTaskCheckForTimeOut+0xc4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d007      	beq.n	8005ea6 <xTaskCheckForTimeOut+0x86>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d302      	bcc.n	8005ea6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e015      	b.n	8005ed2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d20b      	bcs.n	8005ec8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1ad2      	subs	r2, r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff99 	bl	8005df4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e004      	b.n	8005ed2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ed2:	f000 feeb 	bl	8006cac <vPortExitCritical>

	return xReturn;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000e98 	.word	0x20000e98
 8005ee4:	20000eac 	.word	0x20000eac

08005ee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <vTaskMissedYield+0x14>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	20000ea8 	.word	0x20000ea8

08005f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f08:	f000 f852 	bl	8005fb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <prvIdleTask+0x28>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d9f9      	bls.n	8005f08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f14:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <prvIdleTask+0x2c>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f24:	e7f0      	b.n	8005f08 <prvIdleTask+0x8>
 8005f26:	bf00      	nop
 8005f28:	200009c4 	.word	0x200009c4
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	e00c      	b.n	8005f56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a12      	ldr	r2, [pc, #72]	@ (8005f90 <prvInitialiseTaskLists+0x60>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fcae 	bl	80048ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3301      	adds	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b37      	cmp	r3, #55	@ 0x37
 8005f5a:	d9ef      	bls.n	8005f3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f5c:	480d      	ldr	r0, [pc, #52]	@ (8005f94 <prvInitialiseTaskLists+0x64>)
 8005f5e:	f7fe fca5 	bl	80048ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f62:	480d      	ldr	r0, [pc, #52]	@ (8005f98 <prvInitialiseTaskLists+0x68>)
 8005f64:	f7fe fca2 	bl	80048ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f68:	480c      	ldr	r0, [pc, #48]	@ (8005f9c <prvInitialiseTaskLists+0x6c>)
 8005f6a:	f7fe fc9f 	bl	80048ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f6e:	480c      	ldr	r0, [pc, #48]	@ (8005fa0 <prvInitialiseTaskLists+0x70>)
 8005f70:	f7fe fc9c 	bl	80048ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f74:	480b      	ldr	r0, [pc, #44]	@ (8005fa4 <prvInitialiseTaskLists+0x74>)
 8005f76:	f7fe fc99 	bl	80048ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <prvInitialiseTaskLists+0x78>)
 8005f7c:	4a05      	ldr	r2, [pc, #20]	@ (8005f94 <prvInitialiseTaskLists+0x64>)
 8005f7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f80:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <prvInitialiseTaskLists+0x7c>)
 8005f82:	4a05      	ldr	r2, [pc, #20]	@ (8005f98 <prvInitialiseTaskLists+0x68>)
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200009c4 	.word	0x200009c4
 8005f94:	20000e24 	.word	0x20000e24
 8005f98:	20000e38 	.word	0x20000e38
 8005f9c:	20000e54 	.word	0x20000e54
 8005fa0:	20000e68 	.word	0x20000e68
 8005fa4:	20000e80 	.word	0x20000e80
 8005fa8:	20000e4c 	.word	0x20000e4c
 8005fac:	20000e50 	.word	0x20000e50

08005fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fb6:	e019      	b.n	8005fec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fb8:	f000 fe46 	bl	8006c48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbc:	4b10      	ldr	r3, [pc, #64]	@ (8006000 <prvCheckTasksWaitingTermination+0x50>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fcf9 	bl	80049c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fce:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <prvCheckTasksWaitingTermination+0x54>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8006004 <prvCheckTasksWaitingTermination+0x54>)
 8005fd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006008 <prvCheckTasksWaitingTermination+0x58>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	4a0a      	ldr	r2, [pc, #40]	@ (8006008 <prvCheckTasksWaitingTermination+0x58>)
 8005fe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fe2:	f000 fe63 	bl	8006cac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f810 	bl	800600c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fec:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <prvCheckTasksWaitingTermination+0x58>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e1      	bne.n	8005fb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000e68 	.word	0x20000e68
 8006004:	20000e94 	.word	0x20000e94
 8006008:	20000e7c 	.word	0x20000e7c

0800600c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3354      	adds	r3, #84	@ 0x54
 8006018:	4618      	mov	r0, r3
 800601a:	f001 f961 	bl	80072e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fffb 	bl	8007028 <vPortFree>
				vPortFree( pxTCB );
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fff8 	bl	8007028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006038:	e019      	b.n	800606e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006040:	2b01      	cmp	r3, #1
 8006042:	d103      	bne.n	800604c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 ffef 	bl	8007028 <vPortFree>
	}
 800604a:	e010      	b.n	800606e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006052:	2b02      	cmp	r3, #2
 8006054:	d00b      	beq.n	800606e <prvDeleteTCB+0x62>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60fb      	str	r3, [r7, #12]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <prvDeleteTCB+0x5e>
	}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800607e:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <prvResetNextTaskUnblockTime+0x38>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <prvResetNextTaskUnblockTime+0x3c>)
 800608a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800608e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006090:	e008      	b.n	80060a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006092:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <prvResetNextTaskUnblockTime+0x38>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4a04      	ldr	r2, [pc, #16]	@ (80060b4 <prvResetNextTaskUnblockTime+0x3c>)
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000e4c 	.word	0x20000e4c
 80060b4:	20000eb4 	.word	0x20000eb4

080060b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060be:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <xTaskGetSchedulerState+0x34>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060c6:	2301      	movs	r3, #1
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	e008      	b.n	80060de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060cc:	4b08      	ldr	r3, [pc, #32]	@ (80060f0 <xTaskGetSchedulerState+0x38>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060d4:	2302      	movs	r3, #2
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e001      	b.n	80060de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060de:	687b      	ldr	r3, [r7, #4]
	}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000ea0 	.word	0x20000ea0
 80060f0:	20000ebc 	.word	0x20000ebc

080060f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d058      	beq.n	80061bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800610a:	4b2f      	ldr	r3, [pc, #188]	@ (80061c8 <xTaskPriorityDisinherit+0xd4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d00b      	beq.n	800612c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
}
 8006126:	bf00      	nop
 8006128:	bf00      	nop
 800612a:	e7fd      	b.n	8006128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60bb      	str	r3, [r7, #8]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800615e:	429a      	cmp	r2, r3
 8006160:	d02c      	beq.n	80061bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	2b00      	cmp	r3, #0
 8006168:	d128      	bne.n	80061bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fc26 	bl	80049c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4b0f      	ldr	r3, [pc, #60]	@ (80061cc <xTaskPriorityDisinherit+0xd8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d903      	bls.n	800619c <xTaskPriorityDisinherit+0xa8>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	4a0c      	ldr	r2, [pc, #48]	@ (80061cc <xTaskPriorityDisinherit+0xd8>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a09      	ldr	r2, [pc, #36]	@ (80061d0 <xTaskPriorityDisinherit+0xdc>)
 80061aa:	441a      	add	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe fba7 	bl	8004906 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061bc:	697b      	ldr	r3, [r7, #20]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200009c0 	.word	0x200009c0
 80061cc:	20000e9c 	.word	0x20000e9c
 80061d0:	200009c4 	.word	0x200009c4

080061d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061de:	4b21      	ldr	r3, [pc, #132]	@ (8006264 <prvAddCurrentTaskToDelayedList+0x90>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e4:	4b20      	ldr	r3, [pc, #128]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fbe8 	bl	80049c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061f6:	d10a      	bne.n	800620e <prvAddCurrentTaskToDelayedList+0x3a>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4819      	ldr	r0, [pc, #100]	@ (800626c <prvAddCurrentTaskToDelayedList+0x98>)
 8006208:	f7fe fb7d 	bl	8004906 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800620c:	e026      	b.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006216:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	429a      	cmp	r2, r3
 8006224:	d209      	bcs.n	800623a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006226:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b0f      	ldr	r3, [pc, #60]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3304      	adds	r3, #4
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7fe fb8b 	bl	800494e <vListInsert>
}
 8006238:	e010      	b.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <prvAddCurrentTaskToDelayedList+0x94>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fb81 	bl	800494e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800624c:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d202      	bcs.n	800625c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006256:	4a08      	ldr	r2, [pc, #32]	@ (8006278 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20000e98 	.word	0x20000e98
 8006268:	200009c0 	.word	0x200009c0
 800626c:	20000e80 	.word	0x20000e80
 8006270:	20000e50 	.word	0x20000e50
 8006274:	20000e4c 	.word	0x20000e4c
 8006278:	20000eb4 	.word	0x20000eb4

0800627c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006286:	f000 fb71 	bl	800696c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800628a:	4b1d      	ldr	r3, [pc, #116]	@ (8006300 <xTimerCreateTimerTask+0x84>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d021      	beq.n	80062d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800629a:	1d3a      	adds	r2, r7, #4
 800629c:	f107 0108 	add.w	r1, r7, #8
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fae7 	bl	8004878 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	9202      	str	r2, [sp, #8]
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	2302      	movs	r3, #2
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	460a      	mov	r2, r1
 80062bc:	4911      	ldr	r1, [pc, #68]	@ (8006304 <xTimerCreateTimerTask+0x88>)
 80062be:	4812      	ldr	r0, [pc, #72]	@ (8006308 <xTimerCreateTimerTask+0x8c>)
 80062c0:	f7ff f8a2 	bl	8005408 <xTaskCreateStatic>
 80062c4:	4603      	mov	r3, r0
 80062c6:	4a11      	ldr	r2, [pc, #68]	@ (800630c <xTimerCreateTimerTask+0x90>)
 80062c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ca:	4b10      	ldr	r3, [pc, #64]	@ (800630c <xTimerCreateTimerTask+0x90>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062d2:	2301      	movs	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	613b      	str	r3, [r7, #16]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062f4:	697b      	ldr	r3, [r7, #20]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000ef0 	.word	0x20000ef0
 8006304:	08007d7c 	.word	0x08007d7c
 8006308:	08006505 	.word	0x08006505
 800630c:	20000ef4 	.word	0x20000ef4

08006310 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800631e:	202c      	movs	r0, #44	@ 0x2c
 8006320:	f000 fdb4 	bl	8006e8c <pvPortMalloc>
 8006324:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00d      	beq.n	8006348 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f805 	bl	8006352 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006348:	697b      	ldr	r3, [r7, #20]
	}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	617b      	str	r3, [r7, #20]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006384:	f000 faf2 	bl	800696c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe faa1 	bl	80048ec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80063c2:	bf00      	nop
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	@ 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <xTimerGenericCommand+0x30>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	623b      	str	r3, [r7, #32]
}
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063fc:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <xTimerGenericCommand+0x98>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02a      	beq.n	800645a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b05      	cmp	r3, #5
 8006414:	dc18      	bgt.n	8006448 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006416:	f7ff fe4f 	bl	80060b8 <xTaskGetSchedulerState>
 800641a:	4603      	mov	r3, r0
 800641c:	2b02      	cmp	r3, #2
 800641e:	d109      	bne.n	8006434 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006420:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <xTimerGenericCommand+0x98>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	f107 0110 	add.w	r1, r7, #16
 8006428:	2300      	movs	r3, #0
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	f7fe fbfc 	bl	8004c28 <xQueueGenericSend>
 8006430:	6278      	str	r0, [r7, #36]	@ 0x24
 8006432:	e012      	b.n	800645a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006434:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <xTimerGenericCommand+0x98>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	f107 0110 	add.w	r1, r7, #16
 800643c:	2300      	movs	r3, #0
 800643e:	2200      	movs	r2, #0
 8006440:	f7fe fbf2 	bl	8004c28 <xQueueGenericSend>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24
 8006446:	e008      	b.n	800645a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006448:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <xTimerGenericCommand+0x98>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f107 0110 	add.w	r1, r7, #16
 8006450:	2300      	movs	r3, #0
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	f7fe fcea 	bl	8004e2c <xQueueGenericSendFromISR>
 8006458:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800645c:	4618      	mov	r0, r3
 800645e:	3728      	adds	r7, #40	@ 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000ef0 	.word	0x20000ef0

08006468 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b23      	ldr	r3, [pc, #140]	@ (8006500 <prvProcessExpiredTimer+0x98>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fa9d 	bl	80049c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d023      	beq.n	80064dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	18d1      	adds	r1, r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	6978      	ldr	r0, [r7, #20]
 80064a2:	f000 f8d5 	bl	8006650 <prvInsertTimerInActiveList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d020      	beq.n	80064ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	2100      	movs	r1, #0
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f7ff ff88 	bl	80063cc <xTimerGenericCommand>
 80064bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d114      	bne.n	80064ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fb      	str	r3, [r7, #12]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	6978      	ldr	r0, [r7, #20]
 80064f4:	4798      	blx	r3
}
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000ee8 	.word	0x20000ee8

08006504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f859 	bl	80065c8 <prvGetNextExpireTime>
 8006516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f805 	bl	800652c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006522:	f000 f8d7 	bl	80066d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006526:	bf00      	nop
 8006528:	e7f0      	b.n	800650c <prvTimerTask+0x8>
	...

0800652c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006536:	f7ff f9cb 	bl	80058d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f866 	bl	8006610 <prvSampleTimeNow>
 8006544:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d130      	bne.n	80065ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <prvProcessTimerOrBlockTask+0x3c>
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	429a      	cmp	r2, r3
 8006558:	d806      	bhi.n	8006568 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800655a:	f7ff f9c7 	bl	80058ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff81 	bl	8006468 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006566:	e024      	b.n	80065b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800656e:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <prvProcessTimerOrBlockTask+0x90>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <prvProcessTimerOrBlockTask+0x50>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <prvProcessTimerOrBlockTask+0x52>
 800657c:	2300      	movs	r3, #0
 800657e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006580:	4b0f      	ldr	r3, [pc, #60]	@ (80065c0 <prvProcessTimerOrBlockTask+0x94>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	4619      	mov	r1, r3
 800658e:	f7fe ff07 	bl	80053a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006592:	f7ff f9ab 	bl	80058ec <xTaskResumeAll>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800659c:	4b09      	ldr	r3, [pc, #36]	@ (80065c4 <prvProcessTimerOrBlockTask+0x98>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
}
 80065ac:	e001      	b.n	80065b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065ae:	f7ff f99d 	bl	80058ec <xTaskResumeAll>
}
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000eec 	.word	0x20000eec
 80065c0:	20000ef0 	.word	0x20000ef0
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065d0:	4b0e      	ldr	r3, [pc, #56]	@ (800660c <prvGetNextExpireTime+0x44>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <prvGetNextExpireTime+0x16>
 80065da:	2201      	movs	r2, #1
 80065dc:	e000      	b.n	80065e0 <prvGetNextExpireTime+0x18>
 80065de:	2200      	movs	r2, #0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065ec:	4b07      	ldr	r3, [pc, #28]	@ (800660c <prvGetNextExpireTime+0x44>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e001      	b.n	80065fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000ee8 	.word	0x20000ee8

08006610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006618:	f7ff fa06 	bl	8005a28 <xTaskGetTickCount>
 800661c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800661e:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <prvSampleTimeNow+0x3c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	429a      	cmp	r2, r3
 8006626:	d205      	bcs.n	8006634 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006628:	f000 f93a 	bl	80068a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e002      	b.n	800663a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800663a:	4a04      	ldr	r2, [pc, #16]	@ (800664c <prvSampleTimeNow+0x3c>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000ef8 	.word	0x20000ef8

08006650 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d812      	bhi.n	800669c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e01b      	b.n	80066c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800668a:	4b10      	ldr	r3, [pc, #64]	@ (80066cc <prvInsertTimerInActiveList+0x7c>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe f95a 	bl	800494e <vListInsert>
 800669a:	e012      	b.n	80066c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d206      	bcs.n	80066b2 <prvInsertTimerInActiveList+0x62>
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e007      	b.n	80066c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066b2:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <prvInsertTimerInActiveList+0x80>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7fe f946 	bl	800494e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066c2:	697b      	ldr	r3, [r7, #20]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000eec 	.word	0x20000eec
 80066d0:	20000ee8 	.word	0x20000ee8

080066d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08e      	sub	sp, #56	@ 0x38
 80066d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066da:	e0ce      	b.n	800687a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da19      	bge.n	8006716 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	3304      	adds	r3, #4
 80066e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	61fb      	str	r3, [r7, #28]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800670c:	6850      	ldr	r0, [r2, #4]
 800670e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006710:	6892      	ldr	r2, [r2, #8]
 8006712:	4611      	mov	r1, r2
 8006714:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f2c0 80ae 	blt.w	800687a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe f946 	bl	80049c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006734:	463b      	mov	r3, r7
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff ff6a 	bl	8006610 <prvSampleTimeNow>
 800673c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b09      	cmp	r3, #9
 8006742:	f200 8097 	bhi.w	8006874 <prvProcessReceivedCommands+0x1a0>
 8006746:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <prvProcessReceivedCommands+0x78>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	08006775 	.word	0x08006775
 8006750:	08006775 	.word	0x08006775
 8006754:	08006775 	.word	0x08006775
 8006758:	080067eb 	.word	0x080067eb
 800675c:	080067ff 	.word	0x080067ff
 8006760:	0800684b 	.word	0x0800684b
 8006764:	08006775 	.word	0x08006775
 8006768:	08006775 	.word	0x08006775
 800676c:	080067eb 	.word	0x080067eb
 8006770:	080067ff 	.word	0x080067ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	18d1      	adds	r1, r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006794:	f7ff ff5c 	bl	8006650 <prvInsertTimerInActiveList>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d06c      	beq.n	8006878 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d061      	beq.n	8006878 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	441a      	add	r2, r3
 80067bc:	2300      	movs	r3, #0
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	2300      	movs	r3, #0
 80067c2:	2100      	movs	r1, #0
 80067c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c6:	f7ff fe01 	bl	80063cc <xTimerGenericCommand>
 80067ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d152      	bne.n	8006878 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61bb      	str	r3, [r7, #24]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067fc:	e03d      	b.n	800687a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	617b      	str	r3, [r7, #20]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	18d1      	adds	r1, r2, r3
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006844:	f7ff ff04 	bl	8006650 <prvInsertTimerInActiveList>
					break;
 8006848:	e017      	b.n	800687a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800684a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800685a:	f000 fbe5 	bl	8007028 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800685e:	e00c      	b.n	800687a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006872:	e002      	b.n	800687a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <prvProcessReceivedCommands+0x1a6>
					break;
 8006878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800687a:	4b08      	ldr	r3, [pc, #32]	@ (800689c <prvProcessReceivedCommands+0x1c8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	1d39      	adds	r1, r7, #4
 8006880:	2200      	movs	r2, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fb70 	bl	8004f68 <xQueueReceive>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	f47f af26 	bne.w	80066dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	3730      	adds	r7, #48	@ 0x30
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000ef0 	.word	0x20000ef0

080068a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068a6:	e049      	b.n	800693c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006964 <prvSwitchTimerLists+0xc4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006964 <prvSwitchTimerLists+0xc4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3304      	adds	r3, #4
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fe f87d 	bl	80049c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d02f      	beq.n	800693c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90e      	bls.n	800690c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006964 <prvSwitchTimerLists+0xc4>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3304      	adds	r3, #4
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f7fe f822 	bl	800494e <vListInsert>
 800690a:	e017      	b.n	800693c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800690c:	2300      	movs	r3, #0
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	2300      	movs	r3, #0
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	2100      	movs	r1, #0
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fd58 	bl	80063cc <xTimerGenericCommand>
 800691c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	603b      	str	r3, [r7, #0]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800693c:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <prvSwitchTimerLists+0xc4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1b0      	bne.n	80068a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006946:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <prvSwitchTimerLists+0xc4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <prvSwitchTimerLists+0xc8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a04      	ldr	r2, [pc, #16]	@ (8006964 <prvSwitchTimerLists+0xc4>)
 8006952:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006954:	4a04      	ldr	r2, [pc, #16]	@ (8006968 <prvSwitchTimerLists+0xc8>)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	6013      	str	r3, [r2, #0]
}
 800695a:	bf00      	nop
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000ee8 	.word	0x20000ee8
 8006968:	20000eec 	.word	0x20000eec

0800696c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006972:	f000 f969 	bl	8006c48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006976:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <prvCheckForValidListAndQueue+0x60>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d120      	bne.n	80069c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800697e:	4814      	ldr	r0, [pc, #80]	@ (80069d0 <prvCheckForValidListAndQueue+0x64>)
 8006980:	f7fd ff94 	bl	80048ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006984:	4813      	ldr	r0, [pc, #76]	@ (80069d4 <prvCheckForValidListAndQueue+0x68>)
 8006986:	f7fd ff91 	bl	80048ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800698a:	4b13      	ldr	r3, [pc, #76]	@ (80069d8 <prvCheckForValidListAndQueue+0x6c>)
 800698c:	4a10      	ldr	r2, [pc, #64]	@ (80069d0 <prvCheckForValidListAndQueue+0x64>)
 800698e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006990:	4b12      	ldr	r3, [pc, #72]	@ (80069dc <prvCheckForValidListAndQueue+0x70>)
 8006992:	4a10      	ldr	r2, [pc, #64]	@ (80069d4 <prvCheckForValidListAndQueue+0x68>)
 8006994:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006996:	2300      	movs	r3, #0
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4b11      	ldr	r3, [pc, #68]	@ (80069e0 <prvCheckForValidListAndQueue+0x74>)
 800699c:	4a11      	ldr	r2, [pc, #68]	@ (80069e4 <prvCheckForValidListAndQueue+0x78>)
 800699e:	2110      	movs	r1, #16
 80069a0:	200a      	movs	r0, #10
 80069a2:	f7fe f8a1 	bl	8004ae8 <xQueueGenericCreateStatic>
 80069a6:	4603      	mov	r3, r0
 80069a8:	4a08      	ldr	r2, [pc, #32]	@ (80069cc <prvCheckForValidListAndQueue+0x60>)
 80069aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069ac:	4b07      	ldr	r3, [pc, #28]	@ (80069cc <prvCheckForValidListAndQueue+0x60>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069b4:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <prvCheckForValidListAndQueue+0x60>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	490b      	ldr	r1, [pc, #44]	@ (80069e8 <prvCheckForValidListAndQueue+0x7c>)
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fcc6 	bl	800534c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069c0:	f000 f974 	bl	8006cac <vPortExitCritical>
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000ef0 	.word	0x20000ef0
 80069d0:	20000ec0 	.word	0x20000ec0
 80069d4:	20000ed4 	.word	0x20000ed4
 80069d8:	20000ee8 	.word	0x20000ee8
 80069dc:	20000eec 	.word	0x20000eec
 80069e0:	20000f9c 	.word	0x20000f9c
 80069e4:	20000efc 	.word	0x20000efc
 80069e8:	08007d84 	.word	0x08007d84

080069ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3b04      	subs	r3, #4
 80069fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3b04      	subs	r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006a50 <pxPortInitialiseStack+0x64>)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3b14      	subs	r3, #20
 8006a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3b04      	subs	r3, #4
 8006a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f06f 0202 	mvn.w	r2, #2
 8006a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3b20      	subs	r3, #32
 8006a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	08006a55 	.word	0x08006a55

08006a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a5e:	4b13      	ldr	r3, [pc, #76]	@ (8006aac <prvTaskExitError+0x58>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a66:	d00b      	beq.n	8006a80 <prvTaskExitError+0x2c>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	60fb      	str	r3, [r7, #12]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <prvTaskExitError+0x28>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	60bb      	str	r3, [r7, #8]
}
 8006a92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a94:	bf00      	nop
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0fc      	beq.n	8006a96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20000064 	.word	0x20000064

08006ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <pxCurrentTCBConst2>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	f380 8809 	msr	PSP, r0
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	4770      	bx	lr
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst2>:
 8006ad0:	200009c0 	.word	0x200009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop

08006ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ad8:	4808      	ldr	r0, [pc, #32]	@ (8006afc <prvPortStartFirstTask+0x24>)
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f380 8808 	msr	MSP, r0
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8814 	msr	CONTROL, r0
 8006aea:	b662      	cpsie	i
 8006aec:	b661      	cpsie	f
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	df00      	svc	0
 8006af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006afa:	bf00      	nop
 8006afc:	e000ed08 	.word	0xe000ed08

08006b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b06:	4b47      	ldr	r3, [pc, #284]	@ (8006c24 <xPortStartScheduler+0x124>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a47      	ldr	r2, [pc, #284]	@ (8006c28 <xPortStartScheduler+0x128>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10b      	bne.n	8006b28 <xPortStartScheduler+0x28>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	613b      	str	r3, [r7, #16]
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b28:	4b3e      	ldr	r3, [pc, #248]	@ (8006c24 <xPortStartScheduler+0x124>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c2c <xPortStartScheduler+0x12c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d10b      	bne.n	8006b4a <xPortStartScheduler+0x4a>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60fb      	str	r3, [r7, #12]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b4a:	4b39      	ldr	r3, [pc, #228]	@ (8006c30 <xPortStartScheduler+0x130>)
 8006b4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	22ff      	movs	r2, #255	@ 0xff
 8006b5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <xPortStartScheduler+0x134>)
 8006b70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b72:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006b74:	2207      	movs	r2, #7
 8006b76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b78:	e009      	b.n	8006b8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4a2d      	ldr	r2, [pc, #180]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006b82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b8e:	78fb      	ldrb	r3, [r7, #3]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b96:	2b80      	cmp	r3, #128	@ 0x80
 8006b98:	d0ef      	beq.n	8006b7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b9a:	4b27      	ldr	r3, [pc, #156]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d00b      	beq.n	8006bbe <xPortStartScheduler+0xbe>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60bb      	str	r3, [r7, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006bc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bd0:	4a19      	ldr	r2, [pc, #100]	@ (8006c38 <xPortStartScheduler+0x138>)
 8006bd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bdc:	4b17      	ldr	r3, [pc, #92]	@ (8006c3c <xPortStartScheduler+0x13c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a16      	ldr	r2, [pc, #88]	@ (8006c3c <xPortStartScheduler+0x13c>)
 8006be2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006be6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006be8:	4b14      	ldr	r3, [pc, #80]	@ (8006c3c <xPortStartScheduler+0x13c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a13      	ldr	r2, [pc, #76]	@ (8006c3c <xPortStartScheduler+0x13c>)
 8006bee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bf4:	f000 f8da 	bl	8006dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bf8:	4b11      	ldr	r3, [pc, #68]	@ (8006c40 <xPortStartScheduler+0x140>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bfe:	f000 f8f9 	bl	8006df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c02:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <xPortStartScheduler+0x144>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a0f      	ldr	r2, [pc, #60]	@ (8006c44 <xPortStartScheduler+0x144>)
 8006c08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c0e:	f7ff ff63 	bl	8006ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c12:	f7fe ffd3 	bl	8005bbc <vTaskSwitchContext>
	prvTaskExitError();
 8006c16:	f7ff ff1d 	bl	8006a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	e000ed00 	.word	0xe000ed00
 8006c28:	410fc271 	.word	0x410fc271
 8006c2c:	410fc270 	.word	0x410fc270
 8006c30:	e000e400 	.word	0xe000e400
 8006c34:	20000fec 	.word	0x20000fec
 8006c38:	20000ff0 	.word	0x20000ff0
 8006c3c:	e000ed20 	.word	0xe000ed20
 8006c40:	20000064 	.word	0x20000064
 8006c44:	e000ef34 	.word	0xe000ef34

08006c48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	607b      	str	r3, [r7, #4]
}
 8006c60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c62:	4b10      	ldr	r3, [pc, #64]	@ (8006ca4 <vPortEnterCritical+0x5c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca4 <vPortEnterCritical+0x5c>)
 8006c6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <vPortEnterCritical+0x5c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d110      	bne.n	8006c96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <vPortEnterCritical+0x60>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00b      	beq.n	8006c96 <vPortEnterCritical+0x4e>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	603b      	str	r3, [r7, #0]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <vPortEnterCritical+0x4a>
	}
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000064 	.word	0x20000064
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cb2:	4b12      	ldr	r3, [pc, #72]	@ (8006cfc <vPortExitCritical+0x50>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10b      	bne.n	8006cd2 <vPortExitCritical+0x26>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	607b      	str	r3, [r7, #4]
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <vPortExitCritical+0x50>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4a08      	ldr	r2, [pc, #32]	@ (8006cfc <vPortExitCritical+0x50>)
 8006cda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cdc:	4b07      	ldr	r3, [pc, #28]	@ (8006cfc <vPortExitCritical+0x50>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <vPortExitCritical+0x44>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	20000064 	.word	0x20000064

08006d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d00:	f3ef 8009 	mrs	r0, PSP
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	4b15      	ldr	r3, [pc, #84]	@ (8006d60 <pxCurrentTCBConst>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	f01e 0f10 	tst.w	lr, #16
 8006d10:	bf08      	it	eq
 8006d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1a:	6010      	str	r0, [r2, #0]
 8006d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d24:	f380 8811 	msr	BASEPRI, r0
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f7fe ff44 	bl	8005bbc <vTaskSwitchContext>
 8006d34:	f04f 0000 	mov.w	r0, #0
 8006d38:	f380 8811 	msr	BASEPRI, r0
 8006d3c:	bc09      	pop	{r0, r3}
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	6808      	ldr	r0, [r1, #0]
 8006d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d46:	f01e 0f10 	tst.w	lr, #16
 8006d4a:	bf08      	it	eq
 8006d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d50:	f380 8809 	msr	PSP, r0
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst>:
 8006d60:	200009c0 	.word	0x200009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	607b      	str	r3, [r7, #4]
}
 8006d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d82:	f7fe fe61 	bl	8005a48 <xTaskIncrementTick>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d8c:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <xPortSysTickHandler+0x40>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	2300      	movs	r3, #0
 8006d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f383 8811 	msr	BASEPRI, r3
}
 8006d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006db0:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <vPortSetupTimerInterrupt+0x34>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <vPortSetupTimerInterrupt+0x38>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006de8 <vPortSetupTimerInterrupt+0x3c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dec <vPortSetupTimerInterrupt+0x40>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	099b      	lsrs	r3, r3, #6
 8006dc8:	4a09      	ldr	r2, [pc, #36]	@ (8006df0 <vPortSetupTimerInterrupt+0x44>)
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dce:	4b04      	ldr	r3, [pc, #16]	@ (8006de0 <vPortSetupTimerInterrupt+0x34>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	e000e010 	.word	0xe000e010
 8006de4:	e000e018 	.word	0xe000e018
 8006de8:	20000058 	.word	0x20000058
 8006dec:	10624dd3 	.word	0x10624dd3
 8006df0:	e000e014 	.word	0xe000e014

08006df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006df4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e04 <vPortEnableVFP+0x10>
 8006df8:	6801      	ldr	r1, [r0, #0]
 8006dfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dfe:	6001      	str	r1, [r0, #0]
 8006e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e02:	bf00      	nop
 8006e04:	e000ed88 	.word	0xe000ed88

08006e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e0e:	f3ef 8305 	mrs	r3, IPSR
 8006e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d915      	bls.n	8006e46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e1a:	4a18      	ldr	r2, [pc, #96]	@ (8006e7c <vPortValidateInterruptPriority+0x74>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e24:	4b16      	ldr	r3, [pc, #88]	@ (8006e80 <vPortValidateInterruptPriority+0x78>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	7afa      	ldrb	r2, [r7, #11]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d20b      	bcs.n	8006e46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e46:	4b0f      	ldr	r3, [pc, #60]	@ (8006e84 <vPortValidateInterruptPriority+0x7c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e88 <vPortValidateInterruptPriority+0x80>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d90b      	bls.n	8006e6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	603b      	str	r3, [r7, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <vPortValidateInterruptPriority+0x62>
	}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	e000e3f0 	.word	0xe000e3f0
 8006e80:	20000fec 	.word	0x20000fec
 8006e84:	e000ed0c 	.word	0xe000ed0c
 8006e88:	20000ff0 	.word	0x20000ff0

08006e8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	@ 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e98:	f7fe fd1a 	bl	80058d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007010 <pvPortMalloc+0x184>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ea4:	f000 f924 	bl	80070f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8007014 <pvPortMalloc+0x188>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 8095 	bne.w	8006fe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01e      	beq.n	8006efa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d015      	beq.n	8006efa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f023 0307 	bic.w	r3, r3, #7
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <pvPortMalloc+0x6e>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	617b      	str	r3, [r7, #20]
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	e7fd      	b.n	8006ef6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d06f      	beq.n	8006fe0 <pvPortMalloc+0x154>
 8006f00:	4b45      	ldr	r3, [pc, #276]	@ (8007018 <pvPortMalloc+0x18c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d86a      	bhi.n	8006fe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f0a:	4b44      	ldr	r3, [pc, #272]	@ (800701c <pvPortMalloc+0x190>)
 8006f0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f0e:	4b43      	ldr	r3, [pc, #268]	@ (800701c <pvPortMalloc+0x190>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f14:	e004      	b.n	8006f20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d903      	bls.n	8006f32 <pvPortMalloc+0xa6>
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f1      	bne.n	8006f16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f32:	4b37      	ldr	r3, [pc, #220]	@ (8007010 <pvPortMalloc+0x184>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d051      	beq.n	8006fe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2208      	movs	r2, #8
 8006f42:	4413      	add	r3, r2
 8006f44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	1ad2      	subs	r2, r2, r3
 8006f56:	2308      	movs	r3, #8
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d920      	bls.n	8006fa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <pvPortMalloc+0xfc>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	613b      	str	r3, [r7, #16]
}
 8006f82:	bf00      	nop
 8006f84:	bf00      	nop
 8006f86:	e7fd      	b.n	8006f84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f9a:	69b8      	ldr	r0, [r7, #24]
 8006f9c:	f000 f90a 	bl	80071b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8007018 <pvPortMalloc+0x18c>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	4a1b      	ldr	r2, [pc, #108]	@ (8007018 <pvPortMalloc+0x18c>)
 8006fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fae:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <pvPortMalloc+0x18c>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <pvPortMalloc+0x194>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d203      	bcs.n	8006fc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fba:	4b17      	ldr	r3, [pc, #92]	@ (8007018 <pvPortMalloc+0x18c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a18      	ldr	r2, [pc, #96]	@ (8007020 <pvPortMalloc+0x194>)
 8006fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	4b13      	ldr	r3, [pc, #76]	@ (8007014 <pvPortMalloc+0x188>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fd6:	4b13      	ldr	r3, [pc, #76]	@ (8007024 <pvPortMalloc+0x198>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	4a11      	ldr	r2, [pc, #68]	@ (8007024 <pvPortMalloc+0x198>)
 8006fde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fe0:	f7fe fc84 	bl	80058ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <pvPortMalloc+0x17a>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	60fb      	str	r3, [r7, #12]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <pvPortMalloc+0x176>
	return pvReturn;
 8007006:	69fb      	ldr	r3, [r7, #28]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3728      	adds	r7, #40	@ 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20004bfc 	.word	0x20004bfc
 8007014:	20004c10 	.word	0x20004c10
 8007018:	20004c00 	.word	0x20004c00
 800701c:	20004bf4 	.word	0x20004bf4
 8007020:	20004c04 	.word	0x20004c04
 8007024:	20004c08 	.word	0x20004c08

08007028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d04f      	beq.n	80070da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800703a:	2308      	movs	r3, #8
 800703c:	425b      	negs	r3, r3
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4b25      	ldr	r3, [pc, #148]	@ (80070e4 <vPortFree+0xbc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <vPortFree+0x46>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <vPortFree+0x66>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <vPortFree+0xbc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01e      	beq.n	80070da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11a      	bne.n	80070da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	4b0e      	ldr	r3, [pc, #56]	@ (80070e4 <vPortFree+0xbc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	401a      	ands	r2, r3
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070b4:	f7fe fc0c 	bl	80058d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <vPortFree+0xc0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4413      	add	r3, r2
 80070c2:	4a09      	ldr	r2, [pc, #36]	@ (80070e8 <vPortFree+0xc0>)
 80070c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070c6:	6938      	ldr	r0, [r7, #16]
 80070c8:	f000 f874 	bl	80071b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <vPortFree+0xc4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	4a06      	ldr	r2, [pc, #24]	@ (80070ec <vPortFree+0xc4>)
 80070d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070d6:	f7fe fc09 	bl	80058ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070da:	bf00      	nop
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20004c10 	.word	0x20004c10
 80070e8:	20004c00 	.word	0x20004c00
 80070ec:	20004c0c 	.word	0x20004c0c

080070f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80070fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070fc:	4b27      	ldr	r3, [pc, #156]	@ (800719c <prvHeapInit+0xac>)
 80070fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00c      	beq.n	8007124 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3307      	adds	r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0307 	bic.w	r3, r3, #7
 8007116:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	4a1f      	ldr	r2, [pc, #124]	@ (800719c <prvHeapInit+0xac>)
 8007120:	4413      	add	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007128:	4a1d      	ldr	r2, [pc, #116]	@ (80071a0 <prvHeapInit+0xb0>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800712e:	4b1c      	ldr	r3, [pc, #112]	@ (80071a0 <prvHeapInit+0xb0>)
 8007130:	2200      	movs	r2, #0
 8007132:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	4413      	add	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800713c:	2208      	movs	r2, #8
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4a15      	ldr	r2, [pc, #84]	@ (80071a4 <prvHeapInit+0xb4>)
 8007150:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007152:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <prvHeapInit+0xb4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800715a:	4b12      	ldr	r3, [pc, #72]	@ (80071a4 <prvHeapInit+0xb4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007170:	4b0c      	ldr	r3, [pc, #48]	@ (80071a4 <prvHeapInit+0xb4>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4a0a      	ldr	r2, [pc, #40]	@ (80071a8 <prvHeapInit+0xb8>)
 800717e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4a09      	ldr	r2, [pc, #36]	@ (80071ac <prvHeapInit+0xbc>)
 8007186:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007188:	4b09      	ldr	r3, [pc, #36]	@ (80071b0 <prvHeapInit+0xc0>)
 800718a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800718e:	601a      	str	r2, [r3, #0]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	20000ff4 	.word	0x20000ff4
 80071a0:	20004bf4 	.word	0x20004bf4
 80071a4:	20004bfc 	.word	0x20004bfc
 80071a8:	20004c04 	.word	0x20004c04
 80071ac:	20004c00 	.word	0x20004c00
 80071b0:	20004c10 	.word	0x20004c10

080071b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071bc:	4b28      	ldr	r3, [pc, #160]	@ (8007260 <prvInsertBlockIntoFreeList+0xac>)
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e002      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x14>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d8f7      	bhi.n	80071c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d108      	bne.n	80071f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	441a      	add	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	441a      	add	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d118      	bne.n	800723c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b15      	ldr	r3, [pc, #84]	@ (8007264 <prvInsertBlockIntoFreeList+0xb0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d00d      	beq.n	8007232 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	441a      	add	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e008      	b.n	8007244 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007232:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <prvInsertBlockIntoFreeList+0xb0>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e003      	b.n	8007244 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d002      	beq.n	8007252 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20004bf4 	.word	0x20004bf4
 8007264:	20004bfc 	.word	0x20004bfc

08007268 <sniprintf>:
 8007268:	b40c      	push	{r2, r3}
 800726a:	b530      	push	{r4, r5, lr}
 800726c:	4b17      	ldr	r3, [pc, #92]	@ (80072cc <sniprintf+0x64>)
 800726e:	1e0c      	subs	r4, r1, #0
 8007270:	681d      	ldr	r5, [r3, #0]
 8007272:	b09d      	sub	sp, #116	@ 0x74
 8007274:	da08      	bge.n	8007288 <sniprintf+0x20>
 8007276:	238b      	movs	r3, #139	@ 0x8b
 8007278:	602b      	str	r3, [r5, #0]
 800727a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800727e:	b01d      	add	sp, #116	@ 0x74
 8007280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007284:	b002      	add	sp, #8
 8007286:	4770      	bx	lr
 8007288:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800728c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007290:	bf14      	ite	ne
 8007292:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007296:	4623      	moveq	r3, r4
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072a0:	9002      	str	r0, [sp, #8]
 80072a2:	9006      	str	r0, [sp, #24]
 80072a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072aa:	ab21      	add	r3, sp, #132	@ 0x84
 80072ac:	a902      	add	r1, sp, #8
 80072ae:	4628      	mov	r0, r5
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	f000 f9f9 	bl	80076a8 <_svfiprintf_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	bfbc      	itt	lt
 80072ba:	238b      	movlt	r3, #139	@ 0x8b
 80072bc:	602b      	strlt	r3, [r5, #0]
 80072be:	2c00      	cmp	r4, #0
 80072c0:	d0dd      	beq.n	800727e <sniprintf+0x16>
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	2200      	movs	r2, #0
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	e7d9      	b.n	800727e <sniprintf+0x16>
 80072ca:	bf00      	nop
 80072cc:	20000068 	.word	0x20000068

080072d0 <memset>:
 80072d0:	4402      	add	r2, r0
 80072d2:	4603      	mov	r3, r0
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d100      	bne.n	80072da <memset+0xa>
 80072d8:	4770      	bx	lr
 80072da:	f803 1b01 	strb.w	r1, [r3], #1
 80072de:	e7f9      	b.n	80072d4 <memset+0x4>

080072e0 <_reclaim_reent>:
 80072e0:	4b29      	ldr	r3, [pc, #164]	@ (8007388 <_reclaim_reent+0xa8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4283      	cmp	r3, r0
 80072e6:	b570      	push	{r4, r5, r6, lr}
 80072e8:	4604      	mov	r4, r0
 80072ea:	d04b      	beq.n	8007384 <_reclaim_reent+0xa4>
 80072ec:	69c3      	ldr	r3, [r0, #28]
 80072ee:	b1ab      	cbz	r3, 800731c <_reclaim_reent+0x3c>
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	b16b      	cbz	r3, 8007310 <_reclaim_reent+0x30>
 80072f4:	2500      	movs	r5, #0
 80072f6:	69e3      	ldr	r3, [r4, #28]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	5959      	ldr	r1, [r3, r5]
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d13b      	bne.n	8007378 <_reclaim_reent+0x98>
 8007300:	3504      	adds	r5, #4
 8007302:	2d80      	cmp	r5, #128	@ 0x80
 8007304:	d1f7      	bne.n	80072f6 <_reclaim_reent+0x16>
 8007306:	69e3      	ldr	r3, [r4, #28]
 8007308:	4620      	mov	r0, r4
 800730a:	68d9      	ldr	r1, [r3, #12]
 800730c:	f000 f878 	bl	8007400 <_free_r>
 8007310:	69e3      	ldr	r3, [r4, #28]
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	b111      	cbz	r1, 800731c <_reclaim_reent+0x3c>
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f872 	bl	8007400 <_free_r>
 800731c:	6961      	ldr	r1, [r4, #20]
 800731e:	b111      	cbz	r1, 8007326 <_reclaim_reent+0x46>
 8007320:	4620      	mov	r0, r4
 8007322:	f000 f86d 	bl	8007400 <_free_r>
 8007326:	69e1      	ldr	r1, [r4, #28]
 8007328:	b111      	cbz	r1, 8007330 <_reclaim_reent+0x50>
 800732a:	4620      	mov	r0, r4
 800732c:	f000 f868 	bl	8007400 <_free_r>
 8007330:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007332:	b111      	cbz	r1, 800733a <_reclaim_reent+0x5a>
 8007334:	4620      	mov	r0, r4
 8007336:	f000 f863 	bl	8007400 <_free_r>
 800733a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800733c:	b111      	cbz	r1, 8007344 <_reclaim_reent+0x64>
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f85e 	bl	8007400 <_free_r>
 8007344:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007346:	b111      	cbz	r1, 800734e <_reclaim_reent+0x6e>
 8007348:	4620      	mov	r0, r4
 800734a:	f000 f859 	bl	8007400 <_free_r>
 800734e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007350:	b111      	cbz	r1, 8007358 <_reclaim_reent+0x78>
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f854 	bl	8007400 <_free_r>
 8007358:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800735a:	b111      	cbz	r1, 8007362 <_reclaim_reent+0x82>
 800735c:	4620      	mov	r0, r4
 800735e:	f000 f84f 	bl	8007400 <_free_r>
 8007362:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007364:	b111      	cbz	r1, 800736c <_reclaim_reent+0x8c>
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f84a 	bl	8007400 <_free_r>
 800736c:	6a23      	ldr	r3, [r4, #32]
 800736e:	b14b      	cbz	r3, 8007384 <_reclaim_reent+0xa4>
 8007370:	4620      	mov	r0, r4
 8007372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007376:	4718      	bx	r3
 8007378:	680e      	ldr	r6, [r1, #0]
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f840 	bl	8007400 <_free_r>
 8007380:	4631      	mov	r1, r6
 8007382:	e7bb      	b.n	80072fc <_reclaim_reent+0x1c>
 8007384:	bd70      	pop	{r4, r5, r6, pc}
 8007386:	bf00      	nop
 8007388:	20000068 	.word	0x20000068

0800738c <__errno>:
 800738c:	4b01      	ldr	r3, [pc, #4]	@ (8007394 <__errno+0x8>)
 800738e:	6818      	ldr	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000068 	.word	0x20000068

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4d0d      	ldr	r5, [pc, #52]	@ (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	@ (80073d4 <__libc_init_array+0x3c>)
 800739e:	1b64      	subs	r4, r4, r5
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2600      	movs	r6, #0
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4d0b      	ldr	r5, [pc, #44]	@ (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	@ (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 fc66 	bl	8007c7c <_init>
 80073b0:	1b64      	subs	r4, r4, r5
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2600      	movs	r6, #0
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08007e28 	.word	0x08007e28
 80073d4:	08007e28 	.word	0x08007e28
 80073d8:	08007e28 	.word	0x08007e28
 80073dc:	08007e2c 	.word	0x08007e2c

080073e0 <__retarget_lock_acquire_recursive>:
 80073e0:	4770      	bx	lr

080073e2 <__retarget_lock_release_recursive>:
 80073e2:	4770      	bx	lr

080073e4 <memcpy>:
 80073e4:	440a      	add	r2, r1
 80073e6:	4291      	cmp	r1, r2
 80073e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80073ec:	d100      	bne.n	80073f0 <memcpy+0xc>
 80073ee:	4770      	bx	lr
 80073f0:	b510      	push	{r4, lr}
 80073f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073fa:	4291      	cmp	r1, r2
 80073fc:	d1f9      	bne.n	80073f2 <memcpy+0xe>
 80073fe:	bd10      	pop	{r4, pc}

08007400 <_free_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4605      	mov	r5, r0
 8007404:	2900      	cmp	r1, #0
 8007406:	d041      	beq.n	800748c <_free_r+0x8c>
 8007408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740c:	1f0c      	subs	r4, r1, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfb8      	it	lt
 8007412:	18e4      	addlt	r4, r4, r3
 8007414:	f000 f8e0 	bl	80075d8 <__malloc_lock>
 8007418:	4a1d      	ldr	r2, [pc, #116]	@ (8007490 <_free_r+0x90>)
 800741a:	6813      	ldr	r3, [r2, #0]
 800741c:	b933      	cbnz	r3, 800742c <_free_r+0x2c>
 800741e:	6063      	str	r3, [r4, #4]
 8007420:	6014      	str	r4, [r2, #0]
 8007422:	4628      	mov	r0, r5
 8007424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007428:	f000 b8dc 	b.w	80075e4 <__malloc_unlock>
 800742c:	42a3      	cmp	r3, r4
 800742e:	d908      	bls.n	8007442 <_free_r+0x42>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	1821      	adds	r1, r4, r0
 8007434:	428b      	cmp	r3, r1
 8007436:	bf01      	itttt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	1809      	addeq	r1, r1, r0
 800743e:	6021      	streq	r1, [r4, #0]
 8007440:	e7ed      	b.n	800741e <_free_r+0x1e>
 8007442:	461a      	mov	r2, r3
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	b10b      	cbz	r3, 800744c <_free_r+0x4c>
 8007448:	42a3      	cmp	r3, r4
 800744a:	d9fa      	bls.n	8007442 <_free_r+0x42>
 800744c:	6811      	ldr	r1, [r2, #0]
 800744e:	1850      	adds	r0, r2, r1
 8007450:	42a0      	cmp	r0, r4
 8007452:	d10b      	bne.n	800746c <_free_r+0x6c>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	4401      	add	r1, r0
 8007458:	1850      	adds	r0, r2, r1
 800745a:	4283      	cmp	r3, r0
 800745c:	6011      	str	r1, [r2, #0]
 800745e:	d1e0      	bne.n	8007422 <_free_r+0x22>
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	6053      	str	r3, [r2, #4]
 8007466:	4408      	add	r0, r1
 8007468:	6010      	str	r0, [r2, #0]
 800746a:	e7da      	b.n	8007422 <_free_r+0x22>
 800746c:	d902      	bls.n	8007474 <_free_r+0x74>
 800746e:	230c      	movs	r3, #12
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	e7d6      	b.n	8007422 <_free_r+0x22>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	1821      	adds	r1, r4, r0
 8007478:	428b      	cmp	r3, r1
 800747a:	bf04      	itt	eq
 800747c:	6819      	ldreq	r1, [r3, #0]
 800747e:	685b      	ldreq	r3, [r3, #4]
 8007480:	6063      	str	r3, [r4, #4]
 8007482:	bf04      	itt	eq
 8007484:	1809      	addeq	r1, r1, r0
 8007486:	6021      	streq	r1, [r4, #0]
 8007488:	6054      	str	r4, [r2, #4]
 800748a:	e7ca      	b.n	8007422 <_free_r+0x22>
 800748c:	bd38      	pop	{r3, r4, r5, pc}
 800748e:	bf00      	nop
 8007490:	20004d58 	.word	0x20004d58

08007494 <sbrk_aligned>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4e0f      	ldr	r6, [pc, #60]	@ (80074d4 <sbrk_aligned+0x40>)
 8007498:	460c      	mov	r4, r1
 800749a:	6831      	ldr	r1, [r6, #0]
 800749c:	4605      	mov	r5, r0
 800749e:	b911      	cbnz	r1, 80074a6 <sbrk_aligned+0x12>
 80074a0:	f000 fba6 	bl	8007bf0 <_sbrk_r>
 80074a4:	6030      	str	r0, [r6, #0]
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fba1 	bl	8007bf0 <_sbrk_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d103      	bne.n	80074ba <sbrk_aligned+0x26>
 80074b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074b6:	4620      	mov	r0, r4
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	1cc4      	adds	r4, r0, #3
 80074bc:	f024 0403 	bic.w	r4, r4, #3
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d0f8      	beq.n	80074b6 <sbrk_aligned+0x22>
 80074c4:	1a21      	subs	r1, r4, r0
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 fb92 	bl	8007bf0 <_sbrk_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d1f2      	bne.n	80074b6 <sbrk_aligned+0x22>
 80074d0:	e7ef      	b.n	80074b2 <sbrk_aligned+0x1e>
 80074d2:	bf00      	nop
 80074d4:	20004d54 	.word	0x20004d54

080074d8 <_malloc_r>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	1ccd      	adds	r5, r1, #3
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	4606      	mov	r6, r0
 80074ee:	db01      	blt.n	80074f4 <_malloc_r+0x1c>
 80074f0:	42a9      	cmp	r1, r5
 80074f2:	d904      	bls.n	80074fe <_malloc_r+0x26>
 80074f4:	230c      	movs	r3, #12
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	2000      	movs	r0, #0
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075d4 <_malloc_r+0xfc>
 8007502:	f000 f869 	bl	80075d8 <__malloc_lock>
 8007506:	f8d8 3000 	ldr.w	r3, [r8]
 800750a:	461c      	mov	r4, r3
 800750c:	bb44      	cbnz	r4, 8007560 <_malloc_r+0x88>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ffbf 	bl	8007494 <sbrk_aligned>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	4604      	mov	r4, r0
 800751a:	d158      	bne.n	80075ce <_malloc_r+0xf6>
 800751c:	f8d8 4000 	ldr.w	r4, [r8]
 8007520:	4627      	mov	r7, r4
 8007522:	2f00      	cmp	r7, #0
 8007524:	d143      	bne.n	80075ae <_malloc_r+0xd6>
 8007526:	2c00      	cmp	r4, #0
 8007528:	d04b      	beq.n	80075c2 <_malloc_r+0xea>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	4639      	mov	r1, r7
 800752e:	4630      	mov	r0, r6
 8007530:	eb04 0903 	add.w	r9, r4, r3
 8007534:	f000 fb5c 	bl	8007bf0 <_sbrk_r>
 8007538:	4581      	cmp	r9, r0
 800753a:	d142      	bne.n	80075c2 <_malloc_r+0xea>
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	1a6d      	subs	r5, r5, r1
 8007540:	4629      	mov	r1, r5
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ffa6 	bl	8007494 <sbrk_aligned>
 8007548:	3001      	adds	r0, #1
 800754a:	d03a      	beq.n	80075c2 <_malloc_r+0xea>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	442b      	add	r3, r5
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	f8d8 3000 	ldr.w	r3, [r8]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	bb62      	cbnz	r2, 80075b4 <_malloc_r+0xdc>
 800755a:	f8c8 7000 	str.w	r7, [r8]
 800755e:	e00f      	b.n	8007580 <_malloc_r+0xa8>
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	1b52      	subs	r2, r2, r5
 8007564:	d420      	bmi.n	80075a8 <_malloc_r+0xd0>
 8007566:	2a0b      	cmp	r2, #11
 8007568:	d917      	bls.n	800759a <_malloc_r+0xc2>
 800756a:	1961      	adds	r1, r4, r5
 800756c:	42a3      	cmp	r3, r4
 800756e:	6025      	str	r5, [r4, #0]
 8007570:	bf18      	it	ne
 8007572:	6059      	strne	r1, [r3, #4]
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	bf08      	it	eq
 8007578:	f8c8 1000 	streq.w	r1, [r8]
 800757c:	5162      	str	r2, [r4, r5]
 800757e:	604b      	str	r3, [r1, #4]
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f82f 	bl	80075e4 <__malloc_unlock>
 8007586:	f104 000b 	add.w	r0, r4, #11
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	f020 0007 	bic.w	r0, r0, #7
 8007590:	1ac2      	subs	r2, r0, r3
 8007592:	bf1c      	itt	ne
 8007594:	1a1b      	subne	r3, r3, r0
 8007596:	50a3      	strne	r3, [r4, r2]
 8007598:	e7af      	b.n	80074fa <_malloc_r+0x22>
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	42a3      	cmp	r3, r4
 800759e:	bf0c      	ite	eq
 80075a0:	f8c8 2000 	streq.w	r2, [r8]
 80075a4:	605a      	strne	r2, [r3, #4]
 80075a6:	e7eb      	b.n	8007580 <_malloc_r+0xa8>
 80075a8:	4623      	mov	r3, r4
 80075aa:	6864      	ldr	r4, [r4, #4]
 80075ac:	e7ae      	b.n	800750c <_malloc_r+0x34>
 80075ae:	463c      	mov	r4, r7
 80075b0:	687f      	ldr	r7, [r7, #4]
 80075b2:	e7b6      	b.n	8007522 <_malloc_r+0x4a>
 80075b4:	461a      	mov	r2, r3
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d1fb      	bne.n	80075b4 <_malloc_r+0xdc>
 80075bc:	2300      	movs	r3, #0
 80075be:	6053      	str	r3, [r2, #4]
 80075c0:	e7de      	b.n	8007580 <_malloc_r+0xa8>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6033      	str	r3, [r6, #0]
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f80c 	bl	80075e4 <__malloc_unlock>
 80075cc:	e794      	b.n	80074f8 <_malloc_r+0x20>
 80075ce:	6005      	str	r5, [r0, #0]
 80075d0:	e7d6      	b.n	8007580 <_malloc_r+0xa8>
 80075d2:	bf00      	nop
 80075d4:	20004d58 	.word	0x20004d58

080075d8 <__malloc_lock>:
 80075d8:	4801      	ldr	r0, [pc, #4]	@ (80075e0 <__malloc_lock+0x8>)
 80075da:	f7ff bf01 	b.w	80073e0 <__retarget_lock_acquire_recursive>
 80075de:	bf00      	nop
 80075e0:	20004d50 	.word	0x20004d50

080075e4 <__malloc_unlock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__malloc_unlock+0x8>)
 80075e6:	f7ff befc 	b.w	80073e2 <__retarget_lock_release_recursive>
 80075ea:	bf00      	nop
 80075ec:	20004d50 	.word	0x20004d50

080075f0 <__ssputs_r>:
 80075f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	688e      	ldr	r6, [r1, #8]
 80075f6:	461f      	mov	r7, r3
 80075f8:	42be      	cmp	r6, r7
 80075fa:	680b      	ldr	r3, [r1, #0]
 80075fc:	4682      	mov	sl, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	4690      	mov	r8, r2
 8007602:	d82d      	bhi.n	8007660 <__ssputs_r+0x70>
 8007604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007608:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800760c:	d026      	beq.n	800765c <__ssputs_r+0x6c>
 800760e:	6965      	ldr	r5, [r4, #20]
 8007610:	6909      	ldr	r1, [r1, #16]
 8007612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007616:	eba3 0901 	sub.w	r9, r3, r1
 800761a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800761e:	1c7b      	adds	r3, r7, #1
 8007620:	444b      	add	r3, r9
 8007622:	106d      	asrs	r5, r5, #1
 8007624:	429d      	cmp	r5, r3
 8007626:	bf38      	it	cc
 8007628:	461d      	movcc	r5, r3
 800762a:	0553      	lsls	r3, r2, #21
 800762c:	d527      	bpl.n	800767e <__ssputs_r+0x8e>
 800762e:	4629      	mov	r1, r5
 8007630:	f7ff ff52 	bl	80074d8 <_malloc_r>
 8007634:	4606      	mov	r6, r0
 8007636:	b360      	cbz	r0, 8007692 <__ssputs_r+0xa2>
 8007638:	6921      	ldr	r1, [r4, #16]
 800763a:	464a      	mov	r2, r9
 800763c:	f7ff fed2 	bl	80073e4 <memcpy>
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800764a:	81a3      	strh	r3, [r4, #12]
 800764c:	6126      	str	r6, [r4, #16]
 800764e:	6165      	str	r5, [r4, #20]
 8007650:	444e      	add	r6, r9
 8007652:	eba5 0509 	sub.w	r5, r5, r9
 8007656:	6026      	str	r6, [r4, #0]
 8007658:	60a5      	str	r5, [r4, #8]
 800765a:	463e      	mov	r6, r7
 800765c:	42be      	cmp	r6, r7
 800765e:	d900      	bls.n	8007662 <__ssputs_r+0x72>
 8007660:	463e      	mov	r6, r7
 8007662:	6820      	ldr	r0, [r4, #0]
 8007664:	4632      	mov	r2, r6
 8007666:	4641      	mov	r1, r8
 8007668:	f000 faa8 	bl	8007bbc <memmove>
 800766c:	68a3      	ldr	r3, [r4, #8]
 800766e:	1b9b      	subs	r3, r3, r6
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	4433      	add	r3, r6
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	2000      	movs	r0, #0
 800767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767e:	462a      	mov	r2, r5
 8007680:	f000 fac6 	bl	8007c10 <_realloc_r>
 8007684:	4606      	mov	r6, r0
 8007686:	2800      	cmp	r0, #0
 8007688:	d1e0      	bne.n	800764c <__ssputs_r+0x5c>
 800768a:	6921      	ldr	r1, [r4, #16]
 800768c:	4650      	mov	r0, sl
 800768e:	f7ff feb7 	bl	8007400 <_free_r>
 8007692:	230c      	movs	r3, #12
 8007694:	f8ca 3000 	str.w	r3, [sl]
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076a4:	e7e9      	b.n	800767a <__ssputs_r+0x8a>
	...

080076a8 <_svfiprintf_r>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	4698      	mov	r8, r3
 80076ae:	898b      	ldrh	r3, [r1, #12]
 80076b0:	061b      	lsls	r3, r3, #24
 80076b2:	b09d      	sub	sp, #116	@ 0x74
 80076b4:	4607      	mov	r7, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	4614      	mov	r4, r2
 80076ba:	d510      	bpl.n	80076de <_svfiprintf_r+0x36>
 80076bc:	690b      	ldr	r3, [r1, #16]
 80076be:	b973      	cbnz	r3, 80076de <_svfiprintf_r+0x36>
 80076c0:	2140      	movs	r1, #64	@ 0x40
 80076c2:	f7ff ff09 	bl	80074d8 <_malloc_r>
 80076c6:	6028      	str	r0, [r5, #0]
 80076c8:	6128      	str	r0, [r5, #16]
 80076ca:	b930      	cbnz	r0, 80076da <_svfiprintf_r+0x32>
 80076cc:	230c      	movs	r3, #12
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076d4:	b01d      	add	sp, #116	@ 0x74
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	2340      	movs	r3, #64	@ 0x40
 80076dc:	616b      	str	r3, [r5, #20]
 80076de:	2300      	movs	r3, #0
 80076e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e2:	2320      	movs	r3, #32
 80076e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ec:	2330      	movs	r3, #48	@ 0x30
 80076ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800788c <_svfiprintf_r+0x1e4>
 80076f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076f6:	f04f 0901 	mov.w	r9, #1
 80076fa:	4623      	mov	r3, r4
 80076fc:	469a      	mov	sl, r3
 80076fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007702:	b10a      	cbz	r2, 8007708 <_svfiprintf_r+0x60>
 8007704:	2a25      	cmp	r2, #37	@ 0x25
 8007706:	d1f9      	bne.n	80076fc <_svfiprintf_r+0x54>
 8007708:	ebba 0b04 	subs.w	fp, sl, r4
 800770c:	d00b      	beq.n	8007726 <_svfiprintf_r+0x7e>
 800770e:	465b      	mov	r3, fp
 8007710:	4622      	mov	r2, r4
 8007712:	4629      	mov	r1, r5
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff ff6b 	bl	80075f0 <__ssputs_r>
 800771a:	3001      	adds	r0, #1
 800771c:	f000 80a7 	beq.w	800786e <_svfiprintf_r+0x1c6>
 8007720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007722:	445a      	add	r2, fp
 8007724:	9209      	str	r2, [sp, #36]	@ 0x24
 8007726:	f89a 3000 	ldrb.w	r3, [sl]
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 809f 	beq.w	800786e <_svfiprintf_r+0x1c6>
 8007730:	2300      	movs	r3, #0
 8007732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800773a:	f10a 0a01 	add.w	sl, sl, #1
 800773e:	9304      	str	r3, [sp, #16]
 8007740:	9307      	str	r3, [sp, #28]
 8007742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007746:	931a      	str	r3, [sp, #104]	@ 0x68
 8007748:	4654      	mov	r4, sl
 800774a:	2205      	movs	r2, #5
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	484e      	ldr	r0, [pc, #312]	@ (800788c <_svfiprintf_r+0x1e4>)
 8007752:	f7f8 fd4d 	bl	80001f0 <memchr>
 8007756:	9a04      	ldr	r2, [sp, #16]
 8007758:	b9d8      	cbnz	r0, 8007792 <_svfiprintf_r+0xea>
 800775a:	06d0      	lsls	r0, r2, #27
 800775c:	bf44      	itt	mi
 800775e:	2320      	movmi	r3, #32
 8007760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007764:	0711      	lsls	r1, r2, #28
 8007766:	bf44      	itt	mi
 8007768:	232b      	movmi	r3, #43	@ 0x2b
 800776a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800776e:	f89a 3000 	ldrb.w	r3, [sl]
 8007772:	2b2a      	cmp	r3, #42	@ 0x2a
 8007774:	d015      	beq.n	80077a2 <_svfiprintf_r+0xfa>
 8007776:	9a07      	ldr	r2, [sp, #28]
 8007778:	4654      	mov	r4, sl
 800777a:	2000      	movs	r0, #0
 800777c:	f04f 0c0a 	mov.w	ip, #10
 8007780:	4621      	mov	r1, r4
 8007782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007786:	3b30      	subs	r3, #48	@ 0x30
 8007788:	2b09      	cmp	r3, #9
 800778a:	d94b      	bls.n	8007824 <_svfiprintf_r+0x17c>
 800778c:	b1b0      	cbz	r0, 80077bc <_svfiprintf_r+0x114>
 800778e:	9207      	str	r2, [sp, #28]
 8007790:	e014      	b.n	80077bc <_svfiprintf_r+0x114>
 8007792:	eba0 0308 	sub.w	r3, r0, r8
 8007796:	fa09 f303 	lsl.w	r3, r9, r3
 800779a:	4313      	orrs	r3, r2
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	46a2      	mov	sl, r4
 80077a0:	e7d2      	b.n	8007748 <_svfiprintf_r+0xa0>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	1d19      	adds	r1, r3, #4
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	9103      	str	r1, [sp, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfbb      	ittet	lt
 80077ae:	425b      	neglt	r3, r3
 80077b0:	f042 0202 	orrlt.w	r2, r2, #2
 80077b4:	9307      	strge	r3, [sp, #28]
 80077b6:	9307      	strlt	r3, [sp, #28]
 80077b8:	bfb8      	it	lt
 80077ba:	9204      	strlt	r2, [sp, #16]
 80077bc:	7823      	ldrb	r3, [r4, #0]
 80077be:	2b2e      	cmp	r3, #46	@ 0x2e
 80077c0:	d10a      	bne.n	80077d8 <_svfiprintf_r+0x130>
 80077c2:	7863      	ldrb	r3, [r4, #1]
 80077c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077c6:	d132      	bne.n	800782e <_svfiprintf_r+0x186>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	9203      	str	r2, [sp, #12]
 80077d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077d4:	3402      	adds	r4, #2
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800789c <_svfiprintf_r+0x1f4>
 80077dc:	7821      	ldrb	r1, [r4, #0]
 80077de:	2203      	movs	r2, #3
 80077e0:	4650      	mov	r0, sl
 80077e2:	f7f8 fd05 	bl	80001f0 <memchr>
 80077e6:	b138      	cbz	r0, 80077f8 <_svfiprintf_r+0x150>
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	eba0 000a 	sub.w	r0, r0, sl
 80077ee:	2240      	movs	r2, #64	@ 0x40
 80077f0:	4082      	lsls	r2, r0
 80077f2:	4313      	orrs	r3, r2
 80077f4:	3401      	adds	r4, #1
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fc:	4824      	ldr	r0, [pc, #144]	@ (8007890 <_svfiprintf_r+0x1e8>)
 80077fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007802:	2206      	movs	r2, #6
 8007804:	f7f8 fcf4 	bl	80001f0 <memchr>
 8007808:	2800      	cmp	r0, #0
 800780a:	d036      	beq.n	800787a <_svfiprintf_r+0x1d2>
 800780c:	4b21      	ldr	r3, [pc, #132]	@ (8007894 <_svfiprintf_r+0x1ec>)
 800780e:	bb1b      	cbnz	r3, 8007858 <_svfiprintf_r+0x1b0>
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	3307      	adds	r3, #7
 8007814:	f023 0307 	bic.w	r3, r3, #7
 8007818:	3308      	adds	r3, #8
 800781a:	9303      	str	r3, [sp, #12]
 800781c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781e:	4433      	add	r3, r6
 8007820:	9309      	str	r3, [sp, #36]	@ 0x24
 8007822:	e76a      	b.n	80076fa <_svfiprintf_r+0x52>
 8007824:	fb0c 3202 	mla	r2, ip, r2, r3
 8007828:	460c      	mov	r4, r1
 800782a:	2001      	movs	r0, #1
 800782c:	e7a8      	b.n	8007780 <_svfiprintf_r+0xd8>
 800782e:	2300      	movs	r3, #0
 8007830:	3401      	adds	r4, #1
 8007832:	9305      	str	r3, [sp, #20]
 8007834:	4619      	mov	r1, r3
 8007836:	f04f 0c0a 	mov.w	ip, #10
 800783a:	4620      	mov	r0, r4
 800783c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007840:	3a30      	subs	r2, #48	@ 0x30
 8007842:	2a09      	cmp	r2, #9
 8007844:	d903      	bls.n	800784e <_svfiprintf_r+0x1a6>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0c6      	beq.n	80077d8 <_svfiprintf_r+0x130>
 800784a:	9105      	str	r1, [sp, #20]
 800784c:	e7c4      	b.n	80077d8 <_svfiprintf_r+0x130>
 800784e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007852:	4604      	mov	r4, r0
 8007854:	2301      	movs	r3, #1
 8007856:	e7f0      	b.n	800783a <_svfiprintf_r+0x192>
 8007858:	ab03      	add	r3, sp, #12
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	462a      	mov	r2, r5
 800785e:	4b0e      	ldr	r3, [pc, #56]	@ (8007898 <_svfiprintf_r+0x1f0>)
 8007860:	a904      	add	r1, sp, #16
 8007862:	4638      	mov	r0, r7
 8007864:	f3af 8000 	nop.w
 8007868:	1c42      	adds	r2, r0, #1
 800786a:	4606      	mov	r6, r0
 800786c:	d1d6      	bne.n	800781c <_svfiprintf_r+0x174>
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	065b      	lsls	r3, r3, #25
 8007872:	f53f af2d 	bmi.w	80076d0 <_svfiprintf_r+0x28>
 8007876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007878:	e72c      	b.n	80076d4 <_svfiprintf_r+0x2c>
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462a      	mov	r2, r5
 8007880:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <_svfiprintf_r+0x1f0>)
 8007882:	a904      	add	r1, sp, #16
 8007884:	4638      	mov	r0, r7
 8007886:	f000 f879 	bl	800797c <_printf_i>
 800788a:	e7ed      	b.n	8007868 <_svfiprintf_r+0x1c0>
 800788c:	08007dec 	.word	0x08007dec
 8007890:	08007df6 	.word	0x08007df6
 8007894:	00000000 	.word	0x00000000
 8007898:	080075f1 	.word	0x080075f1
 800789c:	08007df2 	.word	0x08007df2

080078a0 <_printf_common>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	4616      	mov	r6, r2
 80078a6:	4698      	mov	r8, r3
 80078a8:	688a      	ldr	r2, [r1, #8]
 80078aa:	690b      	ldr	r3, [r1, #16]
 80078ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	bfb8      	it	lt
 80078b4:	4613      	movlt	r3, r2
 80078b6:	6033      	str	r3, [r6, #0]
 80078b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078bc:	4607      	mov	r7, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	b10a      	cbz	r2, 80078c6 <_printf_common+0x26>
 80078c2:	3301      	adds	r3, #1
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	0699      	lsls	r1, r3, #26
 80078ca:	bf42      	ittt	mi
 80078cc:	6833      	ldrmi	r3, [r6, #0]
 80078ce:	3302      	addmi	r3, #2
 80078d0:	6033      	strmi	r3, [r6, #0]
 80078d2:	6825      	ldr	r5, [r4, #0]
 80078d4:	f015 0506 	ands.w	r5, r5, #6
 80078d8:	d106      	bne.n	80078e8 <_printf_common+0x48>
 80078da:	f104 0a19 	add.w	sl, r4, #25
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	6832      	ldr	r2, [r6, #0]
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	42ab      	cmp	r3, r5
 80078e6:	dc26      	bgt.n	8007936 <_printf_common+0x96>
 80078e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078ec:	6822      	ldr	r2, [r4, #0]
 80078ee:	3b00      	subs	r3, #0
 80078f0:	bf18      	it	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	0692      	lsls	r2, r2, #26
 80078f6:	d42b      	bmi.n	8007950 <_printf_common+0xb0>
 80078f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078fc:	4641      	mov	r1, r8
 80078fe:	4638      	mov	r0, r7
 8007900:	47c8      	blx	r9
 8007902:	3001      	adds	r0, #1
 8007904:	d01e      	beq.n	8007944 <_printf_common+0xa4>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	6922      	ldr	r2, [r4, #16]
 800790a:	f003 0306 	and.w	r3, r3, #6
 800790e:	2b04      	cmp	r3, #4
 8007910:	bf02      	ittt	eq
 8007912:	68e5      	ldreq	r5, [r4, #12]
 8007914:	6833      	ldreq	r3, [r6, #0]
 8007916:	1aed      	subeq	r5, r5, r3
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	bf0c      	ite	eq
 800791c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007920:	2500      	movne	r5, #0
 8007922:	4293      	cmp	r3, r2
 8007924:	bfc4      	itt	gt
 8007926:	1a9b      	subgt	r3, r3, r2
 8007928:	18ed      	addgt	r5, r5, r3
 800792a:	2600      	movs	r6, #0
 800792c:	341a      	adds	r4, #26
 800792e:	42b5      	cmp	r5, r6
 8007930:	d11a      	bne.n	8007968 <_printf_common+0xc8>
 8007932:	2000      	movs	r0, #0
 8007934:	e008      	b.n	8007948 <_printf_common+0xa8>
 8007936:	2301      	movs	r3, #1
 8007938:	4652      	mov	r2, sl
 800793a:	4641      	mov	r1, r8
 800793c:	4638      	mov	r0, r7
 800793e:	47c8      	blx	r9
 8007940:	3001      	adds	r0, #1
 8007942:	d103      	bne.n	800794c <_printf_common+0xac>
 8007944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794c:	3501      	adds	r5, #1
 800794e:	e7c6      	b.n	80078de <_printf_common+0x3e>
 8007950:	18e1      	adds	r1, r4, r3
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	2030      	movs	r0, #48	@ 0x30
 8007956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800795a:	4422      	add	r2, r4
 800795c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007964:	3302      	adds	r3, #2
 8007966:	e7c7      	b.n	80078f8 <_printf_common+0x58>
 8007968:	2301      	movs	r3, #1
 800796a:	4622      	mov	r2, r4
 800796c:	4641      	mov	r1, r8
 800796e:	4638      	mov	r0, r7
 8007970:	47c8      	blx	r9
 8007972:	3001      	adds	r0, #1
 8007974:	d0e6      	beq.n	8007944 <_printf_common+0xa4>
 8007976:	3601      	adds	r6, #1
 8007978:	e7d9      	b.n	800792e <_printf_common+0x8e>
	...

0800797c <_printf_i>:
 800797c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007980:	7e0f      	ldrb	r7, [r1, #24]
 8007982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007984:	2f78      	cmp	r7, #120	@ 0x78
 8007986:	4691      	mov	r9, r2
 8007988:	4680      	mov	r8, r0
 800798a:	460c      	mov	r4, r1
 800798c:	469a      	mov	sl, r3
 800798e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007992:	d807      	bhi.n	80079a4 <_printf_i+0x28>
 8007994:	2f62      	cmp	r7, #98	@ 0x62
 8007996:	d80a      	bhi.n	80079ae <_printf_i+0x32>
 8007998:	2f00      	cmp	r7, #0
 800799a:	f000 80d2 	beq.w	8007b42 <_printf_i+0x1c6>
 800799e:	2f58      	cmp	r7, #88	@ 0x58
 80079a0:	f000 80b9 	beq.w	8007b16 <_printf_i+0x19a>
 80079a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079ac:	e03a      	b.n	8007a24 <_printf_i+0xa8>
 80079ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079b2:	2b15      	cmp	r3, #21
 80079b4:	d8f6      	bhi.n	80079a4 <_printf_i+0x28>
 80079b6:	a101      	add	r1, pc, #4	@ (adr r1, 80079bc <_printf_i+0x40>)
 80079b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079bc:	08007a15 	.word	0x08007a15
 80079c0:	08007a29 	.word	0x08007a29
 80079c4:	080079a5 	.word	0x080079a5
 80079c8:	080079a5 	.word	0x080079a5
 80079cc:	080079a5 	.word	0x080079a5
 80079d0:	080079a5 	.word	0x080079a5
 80079d4:	08007a29 	.word	0x08007a29
 80079d8:	080079a5 	.word	0x080079a5
 80079dc:	080079a5 	.word	0x080079a5
 80079e0:	080079a5 	.word	0x080079a5
 80079e4:	080079a5 	.word	0x080079a5
 80079e8:	08007b29 	.word	0x08007b29
 80079ec:	08007a53 	.word	0x08007a53
 80079f0:	08007ae3 	.word	0x08007ae3
 80079f4:	080079a5 	.word	0x080079a5
 80079f8:	080079a5 	.word	0x080079a5
 80079fc:	08007b4b 	.word	0x08007b4b
 8007a00:	080079a5 	.word	0x080079a5
 8007a04:	08007a53 	.word	0x08007a53
 8007a08:	080079a5 	.word	0x080079a5
 8007a0c:	080079a5 	.word	0x080079a5
 8007a10:	08007aeb 	.word	0x08007aeb
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	1d1a      	adds	r2, r3, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6032      	str	r2, [r6, #0]
 8007a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a24:	2301      	movs	r3, #1
 8007a26:	e09d      	b.n	8007b64 <_printf_i+0x1e8>
 8007a28:	6833      	ldr	r3, [r6, #0]
 8007a2a:	6820      	ldr	r0, [r4, #0]
 8007a2c:	1d19      	adds	r1, r3, #4
 8007a2e:	6031      	str	r1, [r6, #0]
 8007a30:	0606      	lsls	r6, r0, #24
 8007a32:	d501      	bpl.n	8007a38 <_printf_i+0xbc>
 8007a34:	681d      	ldr	r5, [r3, #0]
 8007a36:	e003      	b.n	8007a40 <_printf_i+0xc4>
 8007a38:	0645      	lsls	r5, r0, #25
 8007a3a:	d5fb      	bpl.n	8007a34 <_printf_i+0xb8>
 8007a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	da03      	bge.n	8007a4c <_printf_i+0xd0>
 8007a44:	232d      	movs	r3, #45	@ 0x2d
 8007a46:	426d      	negs	r5, r5
 8007a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a4c:	4859      	ldr	r0, [pc, #356]	@ (8007bb4 <_printf_i+0x238>)
 8007a4e:	230a      	movs	r3, #10
 8007a50:	e011      	b.n	8007a76 <_printf_i+0xfa>
 8007a52:	6821      	ldr	r1, [r4, #0]
 8007a54:	6833      	ldr	r3, [r6, #0]
 8007a56:	0608      	lsls	r0, r1, #24
 8007a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a5c:	d402      	bmi.n	8007a64 <_printf_i+0xe8>
 8007a5e:	0649      	lsls	r1, r1, #25
 8007a60:	bf48      	it	mi
 8007a62:	b2ad      	uxthmi	r5, r5
 8007a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a66:	4853      	ldr	r0, [pc, #332]	@ (8007bb4 <_printf_i+0x238>)
 8007a68:	6033      	str	r3, [r6, #0]
 8007a6a:	bf14      	ite	ne
 8007a6c:	230a      	movne	r3, #10
 8007a6e:	2308      	moveq	r3, #8
 8007a70:	2100      	movs	r1, #0
 8007a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a76:	6866      	ldr	r6, [r4, #4]
 8007a78:	60a6      	str	r6, [r4, #8]
 8007a7a:	2e00      	cmp	r6, #0
 8007a7c:	bfa2      	ittt	ge
 8007a7e:	6821      	ldrge	r1, [r4, #0]
 8007a80:	f021 0104 	bicge.w	r1, r1, #4
 8007a84:	6021      	strge	r1, [r4, #0]
 8007a86:	b90d      	cbnz	r5, 8007a8c <_printf_i+0x110>
 8007a88:	2e00      	cmp	r6, #0
 8007a8a:	d04b      	beq.n	8007b24 <_printf_i+0x1a8>
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a92:	fb03 5711 	mls	r7, r3, r1, r5
 8007a96:	5dc7      	ldrb	r7, [r0, r7]
 8007a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a9c:	462f      	mov	r7, r5
 8007a9e:	42bb      	cmp	r3, r7
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	d9f4      	bls.n	8007a8e <_printf_i+0x112>
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d10b      	bne.n	8007ac0 <_printf_i+0x144>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	07df      	lsls	r7, r3, #31
 8007aac:	d508      	bpl.n	8007ac0 <_printf_i+0x144>
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	6861      	ldr	r1, [r4, #4]
 8007ab2:	4299      	cmp	r1, r3
 8007ab4:	bfde      	ittt	le
 8007ab6:	2330      	movle	r3, #48	@ 0x30
 8007ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007abc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ac0:	1b92      	subs	r2, r2, r6
 8007ac2:	6122      	str	r2, [r4, #16]
 8007ac4:	f8cd a000 	str.w	sl, [sp]
 8007ac8:	464b      	mov	r3, r9
 8007aca:	aa03      	add	r2, sp, #12
 8007acc:	4621      	mov	r1, r4
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f7ff fee6 	bl	80078a0 <_printf_common>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d14a      	bne.n	8007b6e <_printf_i+0x1f2>
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007adc:	b004      	add	sp, #16
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	f043 0320 	orr.w	r3, r3, #32
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	4833      	ldr	r0, [pc, #204]	@ (8007bb8 <_printf_i+0x23c>)
 8007aec:	2778      	movs	r7, #120	@ 0x78
 8007aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	6831      	ldr	r1, [r6, #0]
 8007af6:	061f      	lsls	r7, r3, #24
 8007af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007afc:	d402      	bmi.n	8007b04 <_printf_i+0x188>
 8007afe:	065f      	lsls	r7, r3, #25
 8007b00:	bf48      	it	mi
 8007b02:	b2ad      	uxthmi	r5, r5
 8007b04:	6031      	str	r1, [r6, #0]
 8007b06:	07d9      	lsls	r1, r3, #31
 8007b08:	bf44      	itt	mi
 8007b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b0e:	6023      	strmi	r3, [r4, #0]
 8007b10:	b11d      	cbz	r5, 8007b1a <_printf_i+0x19e>
 8007b12:	2310      	movs	r3, #16
 8007b14:	e7ac      	b.n	8007a70 <_printf_i+0xf4>
 8007b16:	4827      	ldr	r0, [pc, #156]	@ (8007bb4 <_printf_i+0x238>)
 8007b18:	e7e9      	b.n	8007aee <_printf_i+0x172>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	f023 0320 	bic.w	r3, r3, #32
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	e7f6      	b.n	8007b12 <_printf_i+0x196>
 8007b24:	4616      	mov	r6, r2
 8007b26:	e7bd      	b.n	8007aa4 <_printf_i+0x128>
 8007b28:	6833      	ldr	r3, [r6, #0]
 8007b2a:	6825      	ldr	r5, [r4, #0]
 8007b2c:	6961      	ldr	r1, [r4, #20]
 8007b2e:	1d18      	adds	r0, r3, #4
 8007b30:	6030      	str	r0, [r6, #0]
 8007b32:	062e      	lsls	r6, r5, #24
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0x1c0>
 8007b38:	6019      	str	r1, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0x1c6>
 8007b3c:	0668      	lsls	r0, r5, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0x1bc>
 8007b40:	8019      	strh	r1, [r3, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	4616      	mov	r6, r2
 8007b48:	e7bc      	b.n	8007ac4 <_printf_i+0x148>
 8007b4a:	6833      	ldr	r3, [r6, #0]
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	6032      	str	r2, [r6, #0]
 8007b50:	681e      	ldr	r6, [r3, #0]
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	2100      	movs	r1, #0
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7f8 fb4a 	bl	80001f0 <memchr>
 8007b5c:	b108      	cbz	r0, 8007b62 <_printf_i+0x1e6>
 8007b5e:	1b80      	subs	r0, r0, r6
 8007b60:	6060      	str	r0, [r4, #4]
 8007b62:	6863      	ldr	r3, [r4, #4]
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	2300      	movs	r3, #0
 8007b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b6c:	e7aa      	b.n	8007ac4 <_printf_i+0x148>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	4632      	mov	r2, r6
 8007b72:	4649      	mov	r1, r9
 8007b74:	4640      	mov	r0, r8
 8007b76:	47d0      	blx	sl
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d0ad      	beq.n	8007ad8 <_printf_i+0x15c>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	d413      	bmi.n	8007baa <_printf_i+0x22e>
 8007b82:	68e0      	ldr	r0, [r4, #12]
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	4298      	cmp	r0, r3
 8007b88:	bfb8      	it	lt
 8007b8a:	4618      	movlt	r0, r3
 8007b8c:	e7a6      	b.n	8007adc <_printf_i+0x160>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4632      	mov	r2, r6
 8007b92:	4649      	mov	r1, r9
 8007b94:	4640      	mov	r0, r8
 8007b96:	47d0      	blx	sl
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d09d      	beq.n	8007ad8 <_printf_i+0x15c>
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	9903      	ldr	r1, [sp, #12]
 8007ba2:	1a5b      	subs	r3, r3, r1
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dcf2      	bgt.n	8007b8e <_printf_i+0x212>
 8007ba8:	e7eb      	b.n	8007b82 <_printf_i+0x206>
 8007baa:	2500      	movs	r5, #0
 8007bac:	f104 0619 	add.w	r6, r4, #25
 8007bb0:	e7f5      	b.n	8007b9e <_printf_i+0x222>
 8007bb2:	bf00      	nop
 8007bb4:	08007dfd 	.word	0x08007dfd
 8007bb8:	08007e0e 	.word	0x08007e0e

08007bbc <memmove>:
 8007bbc:	4288      	cmp	r0, r1
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	eb01 0402 	add.w	r4, r1, r2
 8007bc4:	d902      	bls.n	8007bcc <memmove+0x10>
 8007bc6:	4284      	cmp	r4, r0
 8007bc8:	4623      	mov	r3, r4
 8007bca:	d807      	bhi.n	8007bdc <memmove+0x20>
 8007bcc:	1e43      	subs	r3, r0, #1
 8007bce:	42a1      	cmp	r1, r4
 8007bd0:	d008      	beq.n	8007be4 <memmove+0x28>
 8007bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bda:	e7f8      	b.n	8007bce <memmove+0x12>
 8007bdc:	4402      	add	r2, r0
 8007bde:	4601      	mov	r1, r0
 8007be0:	428a      	cmp	r2, r1
 8007be2:	d100      	bne.n	8007be6 <memmove+0x2a>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bee:	e7f7      	b.n	8007be0 <memmove+0x24>

08007bf0 <_sbrk_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d06      	ldr	r5, [pc, #24]	@ (8007c0c <_sbrk_r+0x1c>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	602b      	str	r3, [r5, #0]
 8007bfc:	f7fa fffa 	bl	8002bf4 <_sbrk>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_sbrk_r+0x1a>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_sbrk_r+0x1a>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20004d4c 	.word	0x20004d4c

08007c10 <_realloc_r>:
 8007c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	4680      	mov	r8, r0
 8007c16:	4615      	mov	r5, r2
 8007c18:	460c      	mov	r4, r1
 8007c1a:	b921      	cbnz	r1, 8007c26 <_realloc_r+0x16>
 8007c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c20:	4611      	mov	r1, r2
 8007c22:	f7ff bc59 	b.w	80074d8 <_malloc_r>
 8007c26:	b92a      	cbnz	r2, 8007c34 <_realloc_r+0x24>
 8007c28:	f7ff fbea 	bl	8007400 <_free_r>
 8007c2c:	2400      	movs	r4, #0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c34:	f000 f81a 	bl	8007c6c <_malloc_usable_size_r>
 8007c38:	4285      	cmp	r5, r0
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	d802      	bhi.n	8007c44 <_realloc_r+0x34>
 8007c3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c42:	d8f4      	bhi.n	8007c2e <_realloc_r+0x1e>
 8007c44:	4629      	mov	r1, r5
 8007c46:	4640      	mov	r0, r8
 8007c48:	f7ff fc46 	bl	80074d8 <_malloc_r>
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0ec      	beq.n	8007c2c <_realloc_r+0x1c>
 8007c52:	42b5      	cmp	r5, r6
 8007c54:	462a      	mov	r2, r5
 8007c56:	4621      	mov	r1, r4
 8007c58:	bf28      	it	cs
 8007c5a:	4632      	movcs	r2, r6
 8007c5c:	f7ff fbc2 	bl	80073e4 <memcpy>
 8007c60:	4621      	mov	r1, r4
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff fbcc 	bl	8007400 <_free_r>
 8007c68:	463c      	mov	r4, r7
 8007c6a:	e7e0      	b.n	8007c2e <_realloc_r+0x1e>

08007c6c <_malloc_usable_size_r>:
 8007c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c70:	1f18      	subs	r0, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfbc      	itt	lt
 8007c76:	580b      	ldrlt	r3, [r1, r0]
 8007c78:	18c0      	addlt	r0, r0, r3
 8007c7a:	4770      	bx	lr

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr
