
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006ce4  08006ce4  00007ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  000080ac  2**0
                  CONTENTS
  4 .ARM          00000008  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e1c  08006e1c  000080ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00007e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08006e24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c80  200000ac  08006ed0  000080ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d2c  08006ed0  00008d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f91  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  0001f06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8e  00000000  00000000  00023ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001938d  00000000  00000000  00024c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001732e  00000000  00000000  0003dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098760  00000000  00000000  000552f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eda51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000eda94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f33cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ccc 	.word	0x08006ccc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08006ccc 	.word	0x08006ccc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ScanColumns>:

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}

uint8_t ScanColumns(uint8_t row) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b03      	cmp	r3, #3
 800058e:	f200 80c0 	bhi.w	8000712 <ScanColumns+0x192>
 8000592:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <ScanColumns+0x18>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	080005a9 	.word	0x080005a9
 800059c:	08000605 	.word	0x08000605
 80005a0:	0800065f 	.word	0x0800065f
 80005a4:	080006b9 	.word	0x080006b9
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80005a8:	2101      	movs	r1, #1
 80005aa:	4861      	ldr	r0, [pc, #388]	@ (8000730 <ScanColumns+0x1b0>)
 80005ac:	f001 fec0 	bl	8002330 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <ScanColumns+0x3a>
 80005b6:	2343      	movs	r3, #67	@ 0x43
 80005b8:	e0b5      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 80005ba:	2102      	movs	r1, #2
 80005bc:	485c      	ldr	r0, [pc, #368]	@ (8000730 <ScanColumns+0x1b0>)
 80005be:	f001 feb7 	bl	8002330 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d101      	bne.n	80005cc <ScanColumns+0x4c>
 80005c8:	2337      	movs	r3, #55	@ 0x37
 80005ca:	e0ac      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 80005cc:	2104      	movs	r1, #4
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <ScanColumns+0x1b0>)
 80005d0:	f001 feae 	bl	8002330 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <ScanColumns+0x5e>
 80005da:	2334      	movs	r3, #52	@ 0x34
 80005dc:	e0a3      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 80005de:	2108      	movs	r1, #8
 80005e0:	4853      	ldr	r0, [pc, #332]	@ (8000730 <ScanColumns+0x1b0>)
 80005e2:	f001 fea5 	bl	8002330 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <ScanColumns+0x70>
 80005ec:	2331      	movs	r3, #49	@ 0x31
 80005ee:	e09a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 80005f0:	2110      	movs	r1, #16
 80005f2:	484f      	ldr	r0, [pc, #316]	@ (8000730 <ScanColumns+0x1b0>)
 80005f4:	f001 fe9c 	bl	8002330 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f040 808b 	bne.w	8000716 <ScanColumns+0x196>
 8000600:	2341      	movs	r3, #65	@ 0x41
 8000602:	e090      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000604:	2101      	movs	r1, #1
 8000606:	484a      	ldr	r0, [pc, #296]	@ (8000730 <ScanColumns+0x1b0>)
 8000608:	f001 fe92 	bl	8002330 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <ScanColumns+0x96>
 8000612:	2330      	movs	r3, #48	@ 0x30
 8000614:	e087      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000616:	2102      	movs	r1, #2
 8000618:	4845      	ldr	r0, [pc, #276]	@ (8000730 <ScanColumns+0x1b0>)
 800061a:	f001 fe89 	bl	8002330 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <ScanColumns+0xa8>
 8000624:	2338      	movs	r3, #56	@ 0x38
 8000626:	e07e      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000628:	2104      	movs	r1, #4
 800062a:	4841      	ldr	r0, [pc, #260]	@ (8000730 <ScanColumns+0x1b0>)
 800062c:	f001 fe80 	bl	8002330 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <ScanColumns+0xba>
 8000636:	2335      	movs	r3, #53	@ 0x35
 8000638:	e075      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800063a:	2108      	movs	r1, #8
 800063c:	483c      	ldr	r0, [pc, #240]	@ (8000730 <ScanColumns+0x1b0>)
 800063e:	f001 fe77 	bl	8002330 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <ScanColumns+0xcc>
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	e06c      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800064c:	2110      	movs	r1, #16
 800064e:	4838      	ldr	r0, [pc, #224]	@ (8000730 <ScanColumns+0x1b0>)
 8000650:	f001 fe6e 	bl	8002330 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d15f      	bne.n	800071a <ScanColumns+0x19a>
 800065a:	2342      	movs	r3, #66	@ 0x42
 800065c:	e063      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 800065e:	2101      	movs	r1, #1
 8000660:	4833      	ldr	r0, [pc, #204]	@ (8000730 <ScanColumns+0x1b0>)
 8000662:	f001 fe65 	bl	8002330 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <ScanColumns+0xf0>
 800066c:	2345      	movs	r3, #69	@ 0x45
 800066e:	e05a      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 8000670:	2102      	movs	r1, #2
 8000672:	482f      	ldr	r0, [pc, #188]	@ (8000730 <ScanColumns+0x1b0>)
 8000674:	f001 fe5c 	bl	8002330 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <ScanColumns+0x102>
 800067e:	2339      	movs	r3, #57	@ 0x39
 8000680:	e051      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 8000682:	2104      	movs	r1, #4
 8000684:	482a      	ldr	r0, [pc, #168]	@ (8000730 <ScanColumns+0x1b0>)
 8000686:	f001 fe53 	bl	8002330 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <ScanColumns+0x114>
 8000690:	2336      	movs	r3, #54	@ 0x36
 8000692:	e048      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 8000694:	2108      	movs	r1, #8
 8000696:	4826      	ldr	r0, [pc, #152]	@ (8000730 <ScanColumns+0x1b0>)
 8000698:	f001 fe4a 	bl	8002330 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <ScanColumns+0x126>
 80006a2:	2333      	movs	r3, #51	@ 0x33
 80006a4:	e03f      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80006a6:	2110      	movs	r1, #16
 80006a8:	4821      	ldr	r0, [pc, #132]	@ (8000730 <ScanColumns+0x1b0>)
 80006aa:	f001 fe41 	bl	8002330 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d134      	bne.n	800071e <ScanColumns+0x19e>
 80006b4:	2344      	movs	r3, #68	@ 0x44
 80006b6:	e036      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 80006b8:	2101      	movs	r1, #1
 80006ba:	481d      	ldr	r0, [pc, #116]	@ (8000730 <ScanColumns+0x1b0>)
 80006bc:	f001 fe38 	bl	8002330 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <ScanColumns+0x14a>
 80006c6:	2354      	movs	r3, #84	@ 0x54
 80006c8:	e02d      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 80006ca:	2102      	movs	r1, #2
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <ScanColumns+0x1b0>)
 80006ce:	f001 fe2f 	bl	8002330 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <ScanColumns+0x15c>
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	e024      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 80006dc:	2104      	movs	r1, #4
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <ScanColumns+0x1b0>)
 80006e0:	f001 fe26 	bl	8002330 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <ScanColumns+0x16e>
 80006ea:	2324      	movs	r3, #36	@ 0x24
 80006ec:	e01b      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 80006ee:	2108      	movs	r1, #8
 80006f0:	480f      	ldr	r0, [pc, #60]	@ (8000730 <ScanColumns+0x1b0>)
 80006f2:	f001 fe1d 	bl	8002330 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <ScanColumns+0x180>
 80006fc:	234c      	movs	r3, #76	@ 0x4c
 80006fe:	e012      	b.n	8000726 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000700:	2110      	movs	r1, #16
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <ScanColumns+0x1b0>)
 8000704:	f001 fe14 	bl	8002330 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d109      	bne.n	8000722 <ScanColumns+0x1a2>
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	e009      	b.n	8000726 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000712:	23ff      	movs	r3, #255	@ 0xff
 8000714:	e007      	b.n	8000726 <ScanColumns+0x1a6>
            break;
 8000716:	bf00      	nop
 8000718:	e004      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071a:	bf00      	nop
 800071c:	e002      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <ScanColumns+0x1a4>
            break;
 8000722:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000724:	23ff      	movs	r3, #255	@ 0xff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020400 	.word	0x40020400

08000734 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	482c      	ldr	r0, [pc, #176]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000740:	f001 fe0e 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800074a:	4829      	ldr	r0, [pc, #164]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800074c:	f001 fe08 	bl	8002360 <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff15 	bl	8000580 <ScanColumns>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d001      	beq.n	8000764 <KeyPad_Scan+0x30>
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	e041      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <KeyPad_Scan+0xbc>)
 800076a:	f001 fdf9 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000774:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000776:	f001 fdf3 	bl	8002360 <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff00 	bl	8000580 <ScanColumns>
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	@ 0xff
 8000788:	d001      	beq.n	800078e <KeyPad_Scan+0x5a>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	e02c      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <KeyPad_Scan+0xbc>)
 8000796:	f001 fde3 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007a2:	f001 fddd 	bl	8002360 <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff feea 	bl	8000580 <ScanColumns>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2bff      	cmp	r3, #255	@ 0xff
 80007b4:	d001      	beq.n	80007ba <KeyPad_Scan+0x86>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	e016      	b.n	80007e8 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007c2:	f001 fdcd 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80007cc:	4808      	ldr	r0, [pc, #32]	@ (80007f0 <KeyPad_Scan+0xbc>)
 80007ce:	f001 fdc7 	bl	8002360 <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f7ff fed4 	bl	8000580 <ScanColumns>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2bff      	cmp	r3, #255	@ 0xff
 80007e0:	d001      	beq.n	80007e6 <KeyPad_Scan+0xb2>
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	e000      	b.n	80007e8 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 80007e6:	23ff      	movs	r3, #255	@ 0xff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020400 	.word	0x40020400

080007f4 <formatTotalLiters>:

// T + L pressed show total from beginning
void formatTotalLiters(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <formatTotalLiters+0x80>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d815      	bhi.n	8000834 <formatTotalLiters+0x40>

		* buffer1 = total / 1000000;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <formatTotalLiters+0x84>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	0c9a      	lsrs	r2, r3, #18
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <formatTotalLiters+0x84>)
 800081a:	fba3 1302 	umull	r1, r3, r3, r2
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	4916      	ldr	r1, [pc, #88]	@ (800087c <formatTotalLiters+0x88>)
 8000822:	fb01 f303 	mul.w	r3, r1, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <formatTotalLiters+0x8c>)
 800082e:	2203      	movs	r2, #3
 8000830:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = (total % 100000000 ) /100;
		LEDPointFlag = 1;
	}
}
 8000832:	e018      	b.n	8000866 <formatTotalLiters+0x72>
		* buffer1 = total / 100000000;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <formatTotalLiters+0x90>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0e5a      	lsrs	r2, r3, #25
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	601a      	str	r2, [r3, #0]
		* buffer2 = (total % 100000000 ) /100;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <formatTotalLiters+0x90>)
 8000846:	fba3 1302 	umull	r1, r3, r3, r2
 800084a:	0e5b      	lsrs	r3, r3, #25
 800084c:	490e      	ldr	r1, [pc, #56]	@ (8000888 <formatTotalLiters+0x94>)
 800084e:	fb01 f303 	mul.w	r3, r1, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <formatTotalLiters+0x98>)
 8000856:	fba2 2303 	umull	r2, r3, r2, r3
 800085a:	095a      	lsrs	r2, r3, #5
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 1;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <formatTotalLiters+0x8c>)
 8000862:	2201      	movs	r2, #1
 8000864:	601a      	str	r2, [r3, #0]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	05f5e0ff 	.word	0x05f5e0ff
 8000878:	431bde83 	.word	0x431bde83
 800087c:	000f4240 	.word	0x000f4240
 8000880:	20000048 	.word	0x20000048
 8000884:	55e63b89 	.word	0x55e63b89
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	51eb851f 	.word	0x51eb851f

08000890 <formatTotalLitersShift>:
// T + $ pressed show total per shift
void formatTotalLitersShift(long unsigned int total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	if (total < 1000000000) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <formatTotalLitersShift+0x60>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d815      	bhi.n	80008d0 <formatTotalLitersShift+0x40>

		* buffer1 = total / 1000000;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008a8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ac:	0c9a      	lsrs	r2, r3, #18
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <formatTotalLitersShift+0x64>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	490e      	ldr	r1, [pc, #56]	@ (80008f8 <formatTotalLitersShift+0x68>)
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 =0;
		* buffer2 = 0;
		LEDPointFlag = -1;
	}
}
 80008ce:	e009      	b.n	80008e4 <formatTotalLitersShift+0x54>
		* buffer1 =0;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
		LEDPointFlag = -1;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <formatTotalLitersShift+0x6c>)
 80008de:	f04f 32ff 	mov.w	r2, #4294967295
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	3b9ac9ff 	.word	0x3b9ac9ff
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	20000048 	.word	0x20000048

08000900 <KeyLogic>:


void KeyLogic() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 8000906:	f004 f913 	bl	8004b30 <xTaskGetTickCount>
 800090a:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 800090c:	f7ff ff12 	bl	8000734 <KeyPad_Scan>
 8000910:	4603      	mov	r3, r0
 8000912:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 8000914:	4bae      	ldr	r3, [pc, #696]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d85a      	bhi.n	80009d2 <KeyLogic+0xd2>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <KeyLogic+0x24>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	0800094f 	.word	0x0800094f
 800092c:	0800097b 	.word	0x0800097b
 8000930:	080009ab 	.word	0x080009ab
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d044      	beq.n	80009c4 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 800093a:	4aa6      	ldr	r2, [pc, #664]	@ (8000bd4 <KeyLogic+0x2d4>)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000940:	4aa5      	ldr	r2, [pc, #660]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8000946:	4ba2      	ldr	r3, [pc, #648]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800094c:	e03a      	b.n	80009c4 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800094e:	4ba2      	ldr	r3, [pc, #648]	@ (8000bd8 <KeyLogic+0x2d8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	2b31      	cmp	r3, #49	@ 0x31
 8000958:	d936      	bls.n	80009c8 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800095a:	4b9e      	ldr	r3, [pc, #632]	@ (8000bd4 <KeyLogic+0x2d4>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d106      	bne.n	8000972 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8000964:	4b9a      	ldr	r3, [pc, #616]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800096a:	4a9c      	ldr	r2, [pc, #624]	@ (8000bdc <KeyLogic+0x2dc>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8000970:	e02a      	b.n	80009c8 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8000972:	4b97      	ldr	r3, [pc, #604]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
            break;
 8000978:	e026      	b.n	80009c8 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800097a:	4b96      	ldr	r3, [pc, #600]	@ (8000bd4 <KeyLogic+0x2d4>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	429a      	cmp	r2, r3
 8000982:	d10a      	bne.n	800099a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8000984:	4b95      	ldr	r3, [pc, #596]	@ (8000bdc <KeyLogic+0x2dc>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000990:	d31c      	bcc.n	80009cc <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000992:	4b8f      	ldr	r3, [pc, #572]	@ (8000bd0 <KeyLogic+0x2d0>)
 8000994:	2203      	movs	r2, #3
 8000996:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000998:	e018      	b.n	80009cc <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800099a:	4b8e      	ldr	r3, [pc, #568]	@ (8000bd4 <KeyLogic+0x2d4>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b90      	ldr	r3, [pc, #576]	@ (8000be0 <KeyLogic+0x2e0>)
 80009a0:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009a2:	4b8b      	ldr	r3, [pc, #556]	@ (8000bd0 <KeyLogic+0x2d0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
            break;
 80009a8:	e010      	b.n	80009cc <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 80009aa:	4b8a      	ldr	r3, [pc, #552]	@ (8000bd4 <KeyLogic+0x2d4>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d00d      	beq.n	80009d0 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 80009b4:	4b87      	ldr	r3, [pc, #540]	@ (8000bd4 <KeyLogic+0x2d4>)
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b89      	ldr	r3, [pc, #548]	@ (8000be0 <KeyLogic+0x2e0>)
 80009ba:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 80009bc:	4b84      	ldr	r3, [pc, #528]	@ (8000bd0 <KeyLogic+0x2d0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80009c2:	e005      	b.n	80009d0 <KeyLogic+0xd0>
            break;
 80009c4:	bf00      	nop
 80009c6:	e004      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <KeyLogic+0xd2>
            break;
 80009d0:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 80009d2:	4b83      	ldr	r3, [pc, #524]	@ (8000be0 <KeyLogic+0x2e0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2bff      	cmp	r3, #255	@ 0xff
 80009d8:	f000 81f3 	beq.w	8000dc2 <KeyLogic+0x4c2>
		switch (keyPressed) {
 80009dc:	4b80      	ldr	r3, [pc, #512]	@ (8000be0 <KeyLogic+0x2e0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3b24      	subs	r3, #36	@ 0x24
 80009e2:	2b30      	cmp	r3, #48	@ 0x30
 80009e4:	f200 818f 	bhi.w	8000d06 <KeyLogic+0x406>
 80009e8:	a201      	add	r2, pc, #4	@ (adr r2, 80009f0 <KeyLogic+0xf0>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000c6b 	.word	0x08000c6b
 80009f4:	08000d07 	.word	0x08000d07
 80009f8:	08000d07 	.word	0x08000d07
 80009fc:	08000d07 	.word	0x08000d07
 8000a00:	08000d07 	.word	0x08000d07
 8000a04:	08000d07 	.word	0x08000d07
 8000a08:	08000d07 	.word	0x08000d07
 8000a0c:	08000d07 	.word	0x08000d07
 8000a10:	08000d07 	.word	0x08000d07
 8000a14:	08000d07 	.word	0x08000d07
 8000a18:	08000d07 	.word	0x08000d07
 8000a1c:	08000d07 	.word	0x08000d07
 8000a20:	08000d07 	.word	0x08000d07
 8000a24:	08000d07 	.word	0x08000d07
 8000a28:	08000d07 	.word	0x08000d07
 8000a2c:	08000d07 	.word	0x08000d07
 8000a30:	08000d07 	.word	0x08000d07
 8000a34:	08000d07 	.word	0x08000d07
 8000a38:	08000d07 	.word	0x08000d07
 8000a3c:	08000d07 	.word	0x08000d07
 8000a40:	08000d07 	.word	0x08000d07
 8000a44:	08000d07 	.word	0x08000d07
 8000a48:	08000d07 	.word	0x08000d07
 8000a4c:	08000d07 	.word	0x08000d07
 8000a50:	08000d07 	.word	0x08000d07
 8000a54:	08000d07 	.word	0x08000d07
 8000a58:	08000d07 	.word	0x08000d07
 8000a5c:	08000d07 	.word	0x08000d07
 8000a60:	08000d07 	.word	0x08000d07
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000add 	.word	0x08000add
 8000a6c:	08000b03 	.word	0x08000b03
 8000a70:	08000cb3 	.word	0x08000cb3
 8000a74:	08000b29 	.word	0x08000b29
 8000a78:	08000ce3 	.word	0x08000ce3
 8000a7c:	08000d07 	.word	0x08000d07
 8000a80:	08000d07 	.word	0x08000d07
 8000a84:	08000d07 	.word	0x08000d07
 8000a88:	08000d07 	.word	0x08000d07
 8000a8c:	08000d07 	.word	0x08000d07
 8000a90:	08000c8f 	.word	0x08000c8f
 8000a94:	08000d07 	.word	0x08000d07
 8000a98:	08000d07 	.word	0x08000d07
 8000a9c:	08000d07 	.word	0x08000d07
 8000aa0:	08000c23 	.word	0x08000c23
 8000aa4:	08000d07 	.word	0x08000d07
 8000aa8:	08000d07 	.word	0x08000d07
 8000aac:	08000d07 	.word	0x08000d07
 8000ab0:	08000c47 	.word	0x08000c47
/////////////////////////////////////////////////////KEY A/////////////////////////////////////////////////////////
			case 'A':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ab8:	2107      	movs	r1, #7
 8000aba:	484b      	ldr	r0, [pc, #300]	@ (8000be8 <KeyLogic+0x2e8>)
 8000abc:	f005 fbfc 	bl	80062b8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 10000);
 8000ac0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ac4:	4a47      	ldr	r2, [pc, #284]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	4848      	ldr	r0, [pc, #288]	@ (8000bec <KeyLogic+0x2ec>)
 8000aca:	f005 fbf5 	bl	80062b8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	4a44      	ldr	r2, [pc, #272]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ad2:	2107      	movs	r1, #7
 8000ad4:	4846      	ldr	r0, [pc, #280]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000ad6:	f005 fbef 	bl	80062b8 <sniprintf>
				break;
 8000ada:	e172      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY B/////////////////////////////////////////////////////////
			case 'B':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000adc:	2300      	movs	r3, #0
 8000ade:	4a41      	ldr	r2, [pc, #260]	@ (8000be4 <KeyLogic+0x2e4>)
 8000ae0:	2107      	movs	r1, #7
 8000ae2:	4841      	ldr	r0, [pc, #260]	@ (8000be8 <KeyLogic+0x2e8>)
 8000ae4:	f005 fbe8 	bl	80062b8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 100000);
 8000ae8:	4b42      	ldr	r3, [pc, #264]	@ (8000bf4 <KeyLogic+0x2f4>)
 8000aea:	4a3e      	ldr	r2, [pc, #248]	@ (8000be4 <KeyLogic+0x2e4>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	483f      	ldr	r0, [pc, #252]	@ (8000bec <KeyLogic+0x2ec>)
 8000af0:	f005 fbe2 	bl	80062b8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000af4:	2300      	movs	r3, #0
 8000af6:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <KeyLogic+0x2e4>)
 8000af8:	2107      	movs	r1, #7
 8000afa:	483d      	ldr	r0, [pc, #244]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000afc:	f005 fbdc 	bl	80062b8 <sniprintf>
				break;
 8000b00:	e15f      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY C/////////////////////////////////////////////////////////
			case 'C':
				snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000b02:	2300      	movs	r3, #0
 8000b04:	4a37      	ldr	r2, [pc, #220]	@ (8000be4 <KeyLogic+0x2e4>)
 8000b06:	2107      	movs	r1, #7
 8000b08:	4837      	ldr	r0, [pc, #220]	@ (8000be8 <KeyLogic+0x2e8>)
 8000b0a:	f005 fbd5 	bl	80062b8 <sniprintf>
				snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4a34      	ldr	r2, [pc, #208]	@ (8000be4 <KeyLogic+0x2e4>)
 8000b12:	2107      	movs	r1, #7
 8000b14:	4835      	ldr	r0, [pc, #212]	@ (8000bec <KeyLogic+0x2ec>)
 8000b16:	f005 fbcf 	bl	80062b8 <sniprintf>
				snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 1);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4a31      	ldr	r2, [pc, #196]	@ (8000be4 <KeyLogic+0x2e4>)
 8000b1e:	2107      	movs	r1, #7
 8000b20:	4833      	ldr	r0, [pc, #204]	@ (8000bf0 <KeyLogic+0x2f0>)
 8000b22:	f005 fbc9 	bl	80062b8 <sniprintf>
				break;
 8000b26:	e14c      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY E/////////////////////////////////////////////////////////
			case 'E':
				if(seqState == SEQ_IDLE){
 8000b28:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <KeyLogic+0x238>
					seqState = SEQ_DISP_PRICE;
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
				else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000b36:	e144      	b.n	8000dc2 <KeyLogic+0x4c2>
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000b38:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b06      	cmp	r3, #6
 8000b3e:	d10f      	bne.n	8000b60 <KeyLogic+0x260>
					accumulatedNumber==password) {
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <KeyLogic+0x300>)
 8000b46:	681b      	ldr	r3, [r3, #0]
				else if (seqState == SEQ_PRESSED_P_NUM&&
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d109      	bne.n	8000b60 <KeyLogic+0x260>
					seqState = SEQ_PRESSED_P_PSWRD_SETPRICE;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b4e:	2207      	movs	r2, #7
 8000b50:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <KeyLogic+0x304>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b58:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e05f      	b.n	8000c20 <KeyLogic+0x320>
				else if(seqState == SEQ_PRESSED_P_PSWRD_SETPRICE){
 8000b60:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d10d      	bne.n	8000b84 <KeyLogic+0x284>
					currPrice = accumulatedNumber;
 8000b68:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a26      	ldr	r2, [pc, #152]	@ (8000c08 <KeyLogic+0x308>)
 8000b6e:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <KeyLogic+0x304>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
				break;
 8000b82:	e11e      	b.n	8000dc2 <KeyLogic+0x4c2>
				else if(seqState == SEQ_ENTER_OLD_PASSWORD&&accumulatedNumber == password){
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d10f      	bne.n	8000bac <KeyLogic+0x2ac>
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <KeyLogic+0x2fc>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <KeyLogic+0x300>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d109      	bne.n	8000bac <KeyLogic+0x2ac>
					seqState = SEQ_ENTER_NEW_PASSWORD;
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <KeyLogic+0x304>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <KeyLogic+0x2fc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	e039      	b.n	8000c20 <KeyLogic+0x320>
				else if(seqState == SEQ_ENTER_NEW_PASSWORD){
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d12b      	bne.n	8000c0c <KeyLogic+0x30c>
					password = accumulatedNumber;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <KeyLogic+0x2fc>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a11      	ldr	r2, [pc, #68]	@ (8000c00 <KeyLogic+0x300>)
 8000bba:	6013      	str	r3, [r2, #0]
					seqState = SEQ_IDLE;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <KeyLogic+0x2f8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <KeyLogic+0x304>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <KeyLogic+0x2fc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
				break;
 8000bce:	e0f8      	b.n	8000dc2 <KeyLogic+0x4c2>
 8000bd0:	200000e0 	.word	0x200000e0
 8000bd4:	20000001 	.word	0x20000001
 8000bd8:	200000c8 	.word	0x200000c8
 8000bdc:	200000cc 	.word	0x200000cc
 8000be0:	20000000 	.word	0x20000000
 8000be4:	08006ce4 	.word	0x08006ce4
 8000be8:	20000020 	.word	0x20000020
 8000bec:	20000027 	.word	0x20000027
 8000bf0:	2000002e 	.word	0x2000002e
 8000bf4:	000186a0 	.word	0x000186a0
 8000bf8:	200000e1 	.word	0x200000e1
 8000bfc:	200000d0 	.word	0x200000d0
 8000c00:	20000038 	.word	0x20000038
 8000c04:	200000d4 	.word	0x200000d4
 8000c08:	20000044 	.word	0x20000044
					seqState = SEQ_IDLE;
 8000c0c:	4b70      	ldr	r3, [pc, #448]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c12:	4b70      	ldr	r3, [pc, #448]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c18:	4b6f      	ldr	r3, [pc, #444]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
				break;
 8000c1e:	e0d0      	b.n	8000dc2 <KeyLogic+0x4c2>
 8000c20:	e0cf      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY P/////////////////////////////////////////////////////////
			case 'P':
				if (seqState == SEQ_IDLE) {
 8000c22:	4b6b      	ldr	r3, [pc, #428]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <KeyLogic+0x332>
					seqState = SEQ_PRESSED_P;
 8000c2a:	4b69      	ldr	r3, [pc, #420]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c30:	e0c7      	b.n	8000dc2 <KeyLogic+0x4c2>
					seqState = SEQ_IDLE;
 8000c32:	4b67      	ldr	r3, [pc, #412]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c38:	4b66      	ldr	r3, [pc, #408]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c3e:	4b66      	ldr	r3, [pc, #408]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
				break;
 8000c44:	e0bd      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY T/////////////////////////////////////////////////////////
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000c46:	4b62      	ldr	r3, [pc, #392]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <KeyLogic+0x356>
					seqState = SEQ_PRESSED_T;
 8000c4e:	4b60      	ldr	r3, [pc, #384]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c54:	e0b5      	b.n	8000dc2 <KeyLogic+0x4c2>
					seqState = SEQ_IDLE;
 8000c56:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c62:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
				break;
 8000c68:	e0ab      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY $/////////////////////////////////////////////////////////
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 8000c6a:	4b59      	ldr	r3, [pc, #356]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d103      	bne.n	8000c7a <KeyLogic+0x37a>
					seqState = SEQ_PRESSED_T_$;
 8000c72:	4b57      	ldr	r3, [pc, #348]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c74:	220a      	movs	r2, #10
 8000c76:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c78:	e0a3      	b.n	8000dc2 <KeyLogic+0x4c2>
					seqState = SEQ_IDLE;
 8000c7a:	4b55      	ldr	r3, [pc, #340]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000c80:	4b54      	ldr	r3, [pc, #336]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000c86:	4b54      	ldr	r3, [pc, #336]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
				break;
 8000c8c:	e099      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY L/////////////////////////////////////////////////////////
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 8000c8e:	4b50      	ldr	r3, [pc, #320]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d103      	bne.n	8000c9e <KeyLogic+0x39e>
					seqState = SEQ_PRESSED_T_L;
 8000c96:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000c98:	2209      	movs	r2, #9
 8000c9a:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000c9c:	e091      	b.n	8000dc2 <KeyLogic+0x4c2>
					seqState = SEQ_IDLE;
 8000c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000caa:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
				break;
 8000cb0:	e087      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY D/////////////////////////////////////////////////////////
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 8000cb2:	4b47      	ldr	r3, [pc, #284]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d109      	bne.n	8000cce <KeyLogic+0x3ce>
					seqState = SEQ_ENTER_OLD_PASSWORD;
 8000cba:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cc0:	4b44      	ldr	r3, [pc, #272]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cc6:	4b44      	ldr	r3, [pc, #272]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000ccc:	e079      	b.n	8000dc2 <KeyLogic+0x4c2>
					seqState = SEQ_IDLE;
 8000cce:	4b40      	ldr	r3, [pc, #256]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cda:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
				break;
 8000ce0:	e06f      	b.n	8000dc2 <KeyLogic+0x4c2>
/////////////////////////////////////////////////////KEY F/////////////////////////////////////////////////////////
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d103      	bne.n	8000cf2 <KeyLogic+0x3f2>
					seqState = SEQ_PRESSED_T_F4;
 8000cea:	4b39      	ldr	r3, [pc, #228]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000cec:	220c      	movs	r2, #12
 8000cee:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
					numberOfDigits = 0;
					accumulatedNumber = 0;
				}
				break;
 8000cf0:	e067      	b.n	8000dc2 <KeyLogic+0x4c2>
					seqState = SEQ_IDLE;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000cf8:	4b36      	ldr	r3, [pc, #216]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000cfe:	4b36      	ldr	r3, [pc, #216]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
				break;
 8000d04:	e05d      	b.n	8000dc2 <KeyLogic+0x4c2>
			default:
/////////////////////////////////////////////////////KEY 0-9/////////////////////////////////////////////////////////
				if(keyPressed >= '0' && keyPressed <= '9') {
 8000d06:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <KeyLogic+0x4dc>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d0c:	d94e      	bls.n	8000dac <KeyLogic+0x4ac>
 8000d0e:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <KeyLogic+0x4dc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b39      	cmp	r3, #57	@ 0x39
 8000d14:	d84a      	bhi.n	8000dac <KeyLogic+0x4ac>
					if(seqState==SEQ_PRESSED_P){
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	d10c      	bne.n	8000d38 <KeyLogic+0x438>
						seqState=SEQ_PRESSED_P_NUM;
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d20:	2206      	movs	r2, #6
 8000d22:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000d24:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <KeyLogic+0x4dc>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	3b30      	subs	r3, #48	@ 0x30
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000d2e:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000d30:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000d36:	e043      	b.n	8000dc0 <KeyLogic+0x4c0>
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d00f      	beq.n	8000d60 <KeyLogic+0x460>
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
					}else if (seqState == SEQ_PRESSED_P_NUM ||
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d00b      	beq.n	8000d60 <KeyLogic+0x460>
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_PRESSED_P_PSWRD_SETPRICE||
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d007      	beq.n	8000d60 <KeyLogic+0x460>
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_OLD_PASSWORD ||
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d003      	beq.n	8000d60 <KeyLogic+0x460>
							seqState == SEQ_NUMBER
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
							seqState == SEQ_ENTER_NEW_PASSWORD ||
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d117      	bne.n	8000d90 <KeyLogic+0x490>
							) {
						if (numberOfDigits < 6) {
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d820      	bhi.n	8000daa <KeyLogic+0x4aa>
							accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <KeyLogic+0x4dc>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b30      	subs	r3, #48	@ 0x30
 8000d7e:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000d80:	6013      	str	r3, [r2, #0]
							numberOfDigits++;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000d8c:	701a      	strb	r2, [r3, #0]
						if (numberOfDigits < 6) {
 8000d8e:	e00c      	b.n	8000daa <KeyLogic+0x4aa>
						}

					}
					else{
						seqState = SEQ_NUMBER;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	701a      	strb	r2, [r3, #0]
						accumulatedNumber = keyPressed - '0';
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <KeyLogic+0x4dc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3b30      	subs	r3, #48	@ 0x30
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000da0:	601a      	str	r2, [r3, #0]
						numberOfDigits = 1;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
					if(seqState==SEQ_PRESSED_P){
 8000da8:	e00a      	b.n	8000dc0 <KeyLogic+0x4c0>
 8000daa:	e009      	b.n	8000dc0 <KeyLogic+0x4c0>
					}
				}else{
					seqState = SEQ_IDLE;
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <KeyLogic+0x4d0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
					numberOfDigits = 0;
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <KeyLogic+0x4d4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = 0;
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <KeyLogic+0x4d8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
				}
				break;
 8000dbe:	e7ff      	b.n	8000dc0 <KeyLogic+0x4c0>
 8000dc0:	bf00      	nop
		}
	}
	keyPressed = 0xFF;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <KeyLogic+0x4dc>)
 8000dc4:	22ff      	movs	r2, #255	@ 0xff
 8000dc6:	701a      	strb	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000e1 	.word	0x200000e1
 8000dd4:	200000d4 	.word	0x200000d4
 8000dd8:	200000d0 	.word	0x200000d0
 8000ddc:	20000000 	.word	0x20000000

08000de0 <KeyLogic_Action>:


void KeyLogic_Action() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	@ 0x30
 8000de4:	af00      	add	r7, sp, #0
    char buffer[7];
    switch (seqState) {
 8000de6:	4bab      	ldr	r3, [pc, #684]	@ (8001094 <KeyLogic_Action+0x2b4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b0c      	cmp	r3, #12
 8000dec:	f200 81e0 	bhi.w	80011b0 <KeyLogic_Action+0x3d0>
 8000df0:	a201      	add	r2, pc, #4	@ (adr r2, 8000df8 <KeyLogic_Action+0x18>)
 8000df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df6:	bf00      	nop
 8000df8:	08000e2d 	.word	0x08000e2d
 8000dfc:	08000e53 	.word	0x08000e53
 8000e00:	08000e79 	.word	0x08000e79
 8000e04:	08000eb7 	.word	0x08000eb7
 8000e08:	08001171 	.word	0x08001171
 8000e0c:	08000ef5 	.word	0x08000ef5
 8000e10:	08000f1b 	.word	0x08000f1b
 8000e14:	08000f41 	.word	0x08000f41
 8000e18:	08000f67 	.word	0x08000f67
 8000e1c:	0800102b 	.word	0x0800102b
 8000e20:	08000f8d 	.word	0x08000f8d
 8000e24:	08001125 	.word	0x08001125
 8000e28:	0800114b 	.word	0x0800114b
        case SEQ_IDLE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4a9a      	ldr	r2, [pc, #616]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000e30:	2107      	movs	r1, #7
 8000e32:	489a      	ldr	r0, [pc, #616]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000e34:	f005 fa40 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4a97      	ldr	r2, [pc, #604]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	4898      	ldr	r0, [pc, #608]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000e40:	f005 fa3a 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e44:	2300      	movs	r3, #0
 8000e46:	4a94      	ldr	r2, [pc, #592]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000e48:	2107      	movs	r1, #7
 8000e4a:	4896      	ldr	r0, [pc, #600]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000e4c:	f005 fa34 	bl	80062b8 <sniprintf>
            break;
 8000e50:	e1c1      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_DISP_PRICE:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "GIA   ");
 8000e52:	4a95      	ldr	r2, [pc, #596]	@ (80010a8 <KeyLogic_Action+0x2c8>)
 8000e54:	2107      	movs	r1, #7
 8000e56:	4891      	ldr	r0, [pc, #580]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000e58:	f005 fa2e 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", currPrice);
 8000e5c:	4b93      	ldr	r3, [pc, #588]	@ (80010ac <KeyLogic_Action+0x2cc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a93      	ldr	r2, [pc, #588]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	488e      	ldr	r0, [pc, #568]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000e66:	f005 fa27 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a8a      	ldr	r2, [pc, #552]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000e6e:	2107      	movs	r1, #7
 8000e70:	488c      	ldr	r0, [pc, #560]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000e72:	f005 fa21 	bl	80062b8 <sniprintf>
			break;
 8000e76:	e1ae      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_ENTER_OLD_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000e78:	4b8e      	ldr	r3, [pc, #568]	@ (80010b4 <KeyLogic_Action+0x2d4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f107 0020 	add.w	r0, r7, #32
 8000e80:	4a8b      	ldr	r2, [pc, #556]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000e82:	2107      	movs	r1, #7
 8000e84:	f005 fa18 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4a8a      	ldr	r2, [pc, #552]	@ (80010b8 <KeyLogic_Action+0x2d8>)
 8000e8e:	2107      	movs	r1, #7
 8000e90:	4882      	ldr	r0, [pc, #520]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000e92:	f005 fa11 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "0L0 ");
 8000e96:	4a89      	ldr	r2, [pc, #548]	@ (80010bc <KeyLogic_Action+0x2dc>)
 8000e98:	2107      	movs	r1, #7
 8000e9a:	4881      	ldr	r0, [pc, #516]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000e9c:	f005 fa0c 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4a7d      	ldr	r2, [pc, #500]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	487f      	ldr	r0, [pc, #508]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000ea8:	f005 fa06 	bl	80062b8 <sniprintf>
            LEDPointFlag = -1;
 8000eac:	4b84      	ldr	r3, [pc, #528]	@ (80010c0 <KeyLogic_Action+0x2e0>)
 8000eae:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb2:	601a      	str	r2, [r3, #0]
            break;
 8000eb4:	e18f      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_ENTER_NEW_PASSWORD:
            snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8000eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80010b4 <KeyLogic_Action+0x2d4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f107 0020 	add.w	r0, r7, #32
 8000ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	f005 f9f9 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	4a7b      	ldr	r2, [pc, #492]	@ (80010b8 <KeyLogic_Action+0x2d8>)
 8000ecc:	2107      	movs	r1, #7
 8000ece:	4873      	ldr	r0, [pc, #460]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000ed0:	f005 f9f2 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4a70      	ldr	r2, [pc, #448]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000ed8:	2107      	movs	r1, #7
 8000eda:	4871      	ldr	r0, [pc, #452]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000edc:	f005 f9ec 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), " NEUU ");
 8000ee0:	4a78      	ldr	r2, [pc, #480]	@ (80010c4 <KeyLogic_Action+0x2e4>)
 8000ee2:	2107      	movs	r1, #7
 8000ee4:	486f      	ldr	r0, [pc, #444]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000ee6:	f005 f9e7 	bl	80062b8 <sniprintf>
            LEDPointFlag = -1;
 8000eea:	4b75      	ldr	r3, [pc, #468]	@ (80010c0 <KeyLogic_Action+0x2e0>)
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	601a      	str	r2, [r3, #0]
            break;
 8000ef2:	e170      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P:
        	snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80010b4 <KeyLogic_Action+0x2d4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a6d      	ldr	r2, [pc, #436]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000efa:	2107      	movs	r1, #7
 8000efc:	4867      	ldr	r0, [pc, #412]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000efe:	f005 f9db 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f02:	2300      	movs	r3, #0
 8000f04:	4a64      	ldr	r2, [pc, #400]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000f06:	2107      	movs	r1, #7
 8000f08:	4865      	ldr	r0, [pc, #404]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000f0a:	f005 f9d5 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P     ");
 8000f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80010c8 <KeyLogic_Action+0x2e8>)
 8000f10:	2107      	movs	r1, #7
 8000f12:	4864      	ldr	r0, [pc, #400]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000f14:	f005 f9d0 	bl	80062b8 <sniprintf>
			break;
 8000f18:	e15d      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P_NUM:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000f1a:	4b66      	ldr	r3, [pc, #408]	@ (80010b4 <KeyLogic_Action+0x2d4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a64      	ldr	r2, [pc, #400]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000f20:	2107      	movs	r1, #7
 8000f22:	485e      	ldr	r0, [pc, #376]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000f24:	f005 f9c8 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	485c      	ldr	r0, [pc, #368]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000f30:	f005 f9c2 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "P88888");
 8000f34:	4a65      	ldr	r2, [pc, #404]	@ (80010cc <KeyLogic_Action+0x2ec>)
 8000f36:	2107      	movs	r1, #7
 8000f38:	485a      	ldr	r0, [pc, #360]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000f3a:	f005 f9bd 	bl	80062b8 <sniprintf>
            break;
 8000f3e:	e14a      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_P_PSWRD_SETPRICE:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06ld", accumulatedNumber);
 8000f40:	4b5c      	ldr	r3, [pc, #368]	@ (80010b4 <KeyLogic_Action+0x2d4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a5a      	ldr	r2, [pc, #360]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000f46:	2107      	movs	r1, #7
 8000f48:	4854      	ldr	r0, [pc, #336]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000f4a:	f005 f9b5 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	4a51      	ldr	r2, [pc, #324]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000f52:	2107      	movs	r1, #7
 8000f54:	4852      	ldr	r0, [pc, #328]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000f56:	f005 f9af 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "GIA   ");
 8000f5a:	4a53      	ldr	r2, [pc, #332]	@ (80010a8 <KeyLogic_Action+0x2c8>)
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	4851      	ldr	r0, [pc, #324]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000f60:	f005 f9aa 	bl	80062b8 <sniprintf>
            break;
 8000f64:	e137      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 8000f66:	2300      	movs	r3, #0
 8000f68:	4a4b      	ldr	r2, [pc, #300]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000f6a:	2107      	movs	r1, #7
 8000f6c:	484b      	ldr	r0, [pc, #300]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000f6e:	f005 f9a3 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8000f72:	2300      	movs	r3, #0
 8000f74:	4a48      	ldr	r2, [pc, #288]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000f76:	2107      	movs	r1, #7
 8000f78:	4849      	ldr	r0, [pc, #292]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 8000f7a:	f005 f99d 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 999999);
 8000f7e:	4b54      	ldr	r3, [pc, #336]	@ (80010d0 <KeyLogic_Action+0x2f0>)
 8000f80:	4a45      	ldr	r2, [pc, #276]	@ (8001098 <KeyLogic_Action+0x2b8>)
 8000f82:	2107      	movs	r1, #7
 8000f84:	4847      	ldr	r0, [pc, #284]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8000f86:	f005 f997 	bl	80062b8 <sniprintf>
            break;
 8000f8a:	e124      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_$:
        	 // Format the total liters into two parts
			formatTotalLitersShift(totalLitersShift, &row1, &row2);
 8000f8c:	4b51      	ldr	r3, [pc, #324]	@ (80010d4 <KeyLogic_Action+0x2f4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a51      	ldr	r2, [pc, #324]	@ (80010d8 <KeyLogic_Action+0x2f8>)
 8000f92:	4952      	ldr	r1, [pc, #328]	@ (80010dc <KeyLogic_Action+0x2fc>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fc7b 	bl	8000890 <formatTotalLitersShift>

			// Ensure the combined string fits into the buffer
			char row1StrShift[7]; // Buffer to hold formatted row1 string
			snprintf(row1StrShift, sizeof(row1StrShift), "%06ld", row1);
 8000f9a:	4b50      	ldr	r3, [pc, #320]	@ (80010dc <KeyLogic_Action+0x2fc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f107 0018 	add.w	r0, r7, #24
 8000fa2:	4a43      	ldr	r2, [pc, #268]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	f005 f987 	bl	80062b8 <sniprintf>

			// Combine "L.. " with the last two digits of row1
			char combinedStrShift[8]; // Buffer to hold combined string "L.. " and last two digits of row1
			snprintf(combinedStrShift, sizeof(combinedStrShift), "SH.%04ld", row1 % 10000); // Extract last two digits of row1
 8000faa:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <KeyLogic_Action+0x2fc>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b4c      	ldr	r3, [pc, #304]	@ (80010e0 <KeyLogic_Action+0x300>)
 8000fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb4:	0b5b      	lsrs	r3, r3, #13
 8000fb6:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f107 0010 	add.w	r0, r7, #16
 8000fc4:	4a47      	ldr	r2, [pc, #284]	@ (80010e4 <KeyLogic_Action+0x304>)
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	f005 f976 	bl	80062b8 <sniprintf>

			// Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
			for (int i = 0; i < 6; ++i) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fd0:	e01b      	b.n	800100a <KeyLogic_Action+0x22a>
				if (i < strlen(combinedStrShift)) {
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f902 	bl	80001e0 <strlen>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d90a      	bls.n	8000ffa <KeyLogic_Action+0x21a>
					SevenSegBuffer[0][i] = combinedStrShift[i];
 8000fe4:	f107 0210 	add.w	r2, r7, #16
 8000fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fea:	4413      	add	r3, r2
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	4a2b      	ldr	r2, [pc, #172]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff2:	4413      	add	r3, r2
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e004      	b.n	8001004 <KeyLogic_Action+0x224>
				} else {
					SevenSegBuffer[0][i] = ' '; // Pad with spaces
 8000ffa:	4a28      	ldr	r2, [pc, #160]	@ (800109c <KeyLogic_Action+0x2bc>)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	4413      	add	r3, r2
 8001000:	2220      	movs	r2, #32
 8001002:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 6; ++i) {
 8001004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001006:	3301      	adds	r3, #1
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800100a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800100c:	2b05      	cmp	r3, #5
 800100e:	dde0      	ble.n	8000fd2 <KeyLogic_Action+0x1f2>
				}
			}
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 8001010:	4b31      	ldr	r3, [pc, #196]	@ (80010d8 <KeyLogic_Action+0x2f8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a26      	ldr	r2, [pc, #152]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8001016:	2107      	movs	r1, #7
 8001018:	4821      	ldr	r0, [pc, #132]	@ (80010a0 <KeyLogic_Action+0x2c0>)
 800101a:	f005 f94d 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "SHIFT ");
 800101e:	4a32      	ldr	r2, [pc, #200]	@ (80010e8 <KeyLogic_Action+0x308>)
 8001020:	2107      	movs	r1, #7
 8001022:	4820      	ldr	r0, [pc, #128]	@ (80010a4 <KeyLogic_Action+0x2c4>)
 8001024:	f005 f948 	bl	80062b8 <sniprintf>

            break;
 8001028:	e0d5      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_L:
            // Format the total liters into two parts
            formatTotalLiters(totalLiters, &row1, &row2);
 800102a:	4b30      	ldr	r3, [pc, #192]	@ (80010ec <KeyLogic_Action+0x30c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2a      	ldr	r2, [pc, #168]	@ (80010d8 <KeyLogic_Action+0x2f8>)
 8001030:	492a      	ldr	r1, [pc, #168]	@ (80010dc <KeyLogic_Action+0x2fc>)
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fbde 	bl	80007f4 <formatTotalLiters>

            // Ensure the combined string fits into the buffer
            char row1Str[7]; // Buffer to hold formatted row1 string
            snprintf(row1Str, sizeof(row1Str), "%06ld", row1);
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <KeyLogic_Action+0x2fc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f107 0008 	add.w	r0, r7, #8
 8001040:	4a1b      	ldr	r2, [pc, #108]	@ (80010b0 <KeyLogic_Action+0x2d0>)
 8001042:	2107      	movs	r1, #7
 8001044:	f005 f938 	bl	80062b8 <sniprintf>

            // Combine "L.. " with the last two digits of row1
            char combinedStr[8]; // Buffer to hold combined string "L.. " and last two digits of row1
            snprintf(combinedStr, sizeof(combinedStr), "L.%04ld", row1 % 10000); // Extract last two digits of row1
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <KeyLogic_Action+0x2fc>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <KeyLogic_Action+0x300>)
 800104e:	fba3 1302 	umull	r1, r3, r3, r2
 8001052:	0b5b      	lsrs	r3, r3, #13
 8001054:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4638      	mov	r0, r7
 8001060:	4a23      	ldr	r2, [pc, #140]	@ (80010f0 <KeyLogic_Action+0x310>)
 8001062:	2108      	movs	r1, #8
 8001064:	f005 f928 	bl	80062b8 <sniprintf>

            // Fill SevenSegBuffer[0] with combinedStr and pad with spaces if necessary
            for (int i = 0; i < 6; ++i) {
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800106c:	e04a      	b.n	8001104 <KeyLogic_Action+0x324>
                if (i < strlen(combinedStr)) {
 800106e:	463b      	mov	r3, r7
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8b5 	bl	80001e0 <strlen>
 8001076:	4602      	mov	r2, r0
 8001078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107a:	429a      	cmp	r2, r3
 800107c:	d93a      	bls.n	80010f4 <KeyLogic_Action+0x314>
                    SevenSegBuffer[0][i] = combinedStr[i];
 800107e:	463a      	mov	r2, r7
 8001080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001082:	4413      	add	r3, r2
 8001084:	7819      	ldrb	r1, [r3, #0]
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <KeyLogic_Action+0x2bc>)
 8001088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108a:	4413      	add	r3, r2
 800108c:	460a      	mov	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e035      	b.n	80010fe <KeyLogic_Action+0x31e>
 8001092:	bf00      	nop
 8001094:	200000e1 	.word	0x200000e1
 8001098:	08006ce4 	.word	0x08006ce4
 800109c:	20000020 	.word	0x20000020
 80010a0:	20000027 	.word	0x20000027
 80010a4:	2000002e 	.word	0x2000002e
 80010a8:	08006cec 	.word	0x08006cec
 80010ac:	20000044 	.word	0x20000044
 80010b0:	08006cf4 	.word	0x08006cf4
 80010b4:	200000d0 	.word	0x200000d0
 80010b8:	08006cfc 	.word	0x08006cfc
 80010bc:	08006d00 	.word	0x08006d00
 80010c0:	20000048 	.word	0x20000048
 80010c4:	08006d08 	.word	0x08006d08
 80010c8:	08006d10 	.word	0x08006d10
 80010cc:	08006d18 	.word	0x08006d18
 80010d0:	000f423f 	.word	0x000f423f
 80010d4:	20000040 	.word	0x20000040
 80010d8:	200000dc 	.word	0x200000dc
 80010dc:	200000d8 	.word	0x200000d8
 80010e0:	d1b71759 	.word	0xd1b71759
 80010e4:	08006d20 	.word	0x08006d20
 80010e8:	08006d2c 	.word	0x08006d2c
 80010ec:	2000003c 	.word	0x2000003c
 80010f0:	08006d34 	.word	0x08006d34
                } else {
                    SevenSegBuffer[0][i] = ' '; // Pad with spaces
 80010f4:	4a3a      	ldr	r2, [pc, #232]	@ (80011e0 <KeyLogic_Action+0x400>)
 80010f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f8:	4413      	add	r3, r2
 80010fa:	2220      	movs	r2, #32
 80010fc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; ++i) {
 80010fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001100:	3301      	adds	r3, #1
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001106:	2b05      	cmp	r3, #5
 8001108:	ddb1      	ble.n	800106e <KeyLogic_Action+0x28e>
                }
            }


            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06ld", row2);
 800110a:	4b36      	ldr	r3, [pc, #216]	@ (80011e4 <KeyLogic_Action+0x404>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a36      	ldr	r2, [pc, #216]	@ (80011e8 <KeyLogic_Action+0x408>)
 8001110:	2107      	movs	r1, #7
 8001112:	4836      	ldr	r0, [pc, #216]	@ (80011ec <KeyLogic_Action+0x40c>)
 8001114:	f005 f8d0 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "TOTAL ");
 8001118:	4a35      	ldr	r2, [pc, #212]	@ (80011f0 <KeyLogic_Action+0x410>)
 800111a:	2107      	movs	r1, #7
 800111c:	4835      	ldr	r0, [pc, #212]	@ (80011f4 <KeyLogic_Action+0x414>)
 800111e:	f005 f8cb 	bl	80062b8 <sniprintf>



            break;
 8001122:	e058      	b.n	80011d6 <KeyLogic_Action+0x3f6>

        case SEQ_PRESSED_T_F3:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 333333);
 8001124:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <KeyLogic_Action+0x418>)
 8001126:	4a35      	ldr	r2, [pc, #212]	@ (80011fc <KeyLogic_Action+0x41c>)
 8001128:	2107      	movs	r1, #7
 800112a:	482d      	ldr	r0, [pc, #180]	@ (80011e0 <KeyLogic_Action+0x400>)
 800112c:	f005 f8c4 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001130:	2300      	movs	r3, #0
 8001132:	4a32      	ldr	r2, [pc, #200]	@ (80011fc <KeyLogic_Action+0x41c>)
 8001134:	2107      	movs	r1, #7
 8001136:	482d      	ldr	r0, [pc, #180]	@ (80011ec <KeyLogic_Action+0x40c>)
 8001138:	f005 f8be 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800113c:	2300      	movs	r3, #0
 800113e:	4a2f      	ldr	r2, [pc, #188]	@ (80011fc <KeyLogic_Action+0x41c>)
 8001140:	2107      	movs	r1, #7
 8001142:	482c      	ldr	r0, [pc, #176]	@ (80011f4 <KeyLogic_Action+0x414>)
 8001144:	f005 f8b8 	bl	80062b8 <sniprintf>
            break;
 8001148:	e045      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_PRESSED_T_F4:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 444444);
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <KeyLogic_Action+0x420>)
 800114c:	4a2b      	ldr	r2, [pc, #172]	@ (80011fc <KeyLogic_Action+0x41c>)
 800114e:	2107      	movs	r1, #7
 8001150:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <KeyLogic_Action+0x400>)
 8001152:	f005 f8b1 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 8001156:	2300      	movs	r3, #0
 8001158:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <KeyLogic_Action+0x41c>)
 800115a:	2107      	movs	r1, #7
 800115c:	4823      	ldr	r0, [pc, #140]	@ (80011ec <KeyLogic_Action+0x40c>)
 800115e:	f005 f8ab 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 8001162:	2300      	movs	r3, #0
 8001164:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <KeyLogic_Action+0x41c>)
 8001166:	2107      	movs	r1, #7
 8001168:	4822      	ldr	r0, [pc, #136]	@ (80011f4 <KeyLogic_Action+0x414>)
 800116a:	f005 f8a5 	bl	80062b8 <sniprintf>
            break;
 800116e:	e032      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        case SEQ_NUMBER:
			snprintf(buffer, sizeof(buffer), "%06ld", accumulatedNumber);
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <KeyLogic_Action+0x424>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f107 0020 	add.w	r0, r7, #32
 8001178:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <KeyLogic_Action+0x408>)
 800117a:	2107      	movs	r1, #7
 800117c:	f005 f89c 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%s", buffer);
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4a20      	ldr	r2, [pc, #128]	@ (8001208 <KeyLogic_Action+0x428>)
 8001186:	2107      	movs	r1, #7
 8001188:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <KeyLogic_Action+0x400>)
 800118a:	f005 f895 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 800118e:	2300      	movs	r3, #0
 8001190:	4a1a      	ldr	r2, [pc, #104]	@ (80011fc <KeyLogic_Action+0x41c>)
 8001192:	2107      	movs	r1, #7
 8001194:	4815      	ldr	r0, [pc, #84]	@ (80011ec <KeyLogic_Action+0x40c>)
 8001196:	f005 f88f 	bl	80062b8 <sniprintf>
			snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 800119a:	2300      	movs	r3, #0
 800119c:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <KeyLogic_Action+0x41c>)
 800119e:	2107      	movs	r1, #7
 80011a0:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <KeyLogic_Action+0x414>)
 80011a2:	f005 f889 	bl	80062b8 <sniprintf>
			LEDPointFlag = -1;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <KeyLogic_Action+0x42c>)
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	601a      	str	r2, [r3, #0]
			break;
 80011ae:	e012      	b.n	80011d6 <KeyLogic_Action+0x3f6>
        default:
            snprintf(SevenSegBuffer[0], sizeof(SevenSegBuffer[0]), "%06d", 0);
 80011b0:	2300      	movs	r3, #0
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <KeyLogic_Action+0x41c>)
 80011b4:	2107      	movs	r1, #7
 80011b6:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <KeyLogic_Action+0x400>)
 80011b8:	f005 f87e 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[1], sizeof(SevenSegBuffer[1]), "%06d", 0);
 80011bc:	2300      	movs	r3, #0
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <KeyLogic_Action+0x41c>)
 80011c0:	2107      	movs	r1, #7
 80011c2:	480a      	ldr	r0, [pc, #40]	@ (80011ec <KeyLogic_Action+0x40c>)
 80011c4:	f005 f878 	bl	80062b8 <sniprintf>
            snprintf(SevenSegBuffer[2], sizeof(SevenSegBuffer[2]), "%06d", 0);
 80011c8:	2300      	movs	r3, #0
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <KeyLogic_Action+0x41c>)
 80011cc:	2107      	movs	r1, #7
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <KeyLogic_Action+0x414>)
 80011d0:	f005 f872 	bl	80062b8 <sniprintf>
            break;
 80011d4:	bf00      	nop
    }
}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	@ 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000020 	.word	0x20000020
 80011e4:	200000dc 	.word	0x200000dc
 80011e8:	08006cf4 	.word	0x08006cf4
 80011ec:	20000027 	.word	0x20000027
 80011f0:	08006d3c 	.word	0x08006d3c
 80011f4:	2000002e 	.word	0x2000002e
 80011f8:	00051615 	.word	0x00051615
 80011fc:	08006ce4 	.word	0x08006ce4
 8001200:	0006c81c 	.word	0x0006c81c
 8001204:	200000d0 	.word	0x200000d0
 8001208:	08006cfc 	.word	0x08006cfc
 800120c:	20000048 	.word	0x20000048

08001210 <CharToSegment>:
char SevenSegBuffer[3][7] = {"123456", "654321", "987654"};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t CharToSegment(char c) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b2f      	cmp	r3, #47	@ 0x2f
 800121e:	d907      	bls.n	8001230 <CharToSegment+0x20>
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b39      	cmp	r3, #57	@ 0x39
 8001224:	d804      	bhi.n	8001230 <CharToSegment+0x20>
        return digitMapWithOutDP[c - '0'];
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3b30      	subs	r3, #48	@ 0x30
 800122a:	4a32      	ldr	r2, [pc, #200]	@ (80012f4 <CharToSegment+0xe4>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	e05a      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'L') {
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b4c      	cmp	r3, #76	@ 0x4c
 8001234:	d102      	bne.n	800123c <CharToSegment+0x2c>
        return specialCharMap[0];
 8001236:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <CharToSegment+0xe8>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	e054      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == '.') {
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001240:	d102      	bne.n	8001248 <CharToSegment+0x38>
        return specialCharMap[1];
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <CharToSegment+0xe8>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	e04e      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'T') {
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b54      	cmp	r3, #84	@ 0x54
 800124c:	d102      	bne.n	8001254 <CharToSegment+0x44>
        return specialCharMap[2];
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <CharToSegment+0xe8>)
 8001250:	789b      	ldrb	r3, [r3, #2]
 8001252:	e048      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'O') {
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b4f      	cmp	r3, #79	@ 0x4f
 8001258:	d102      	bne.n	8001260 <CharToSegment+0x50>
        return specialCharMap[3];
 800125a:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <CharToSegment+0xe8>)
 800125c:	78db      	ldrb	r3, [r3, #3]
 800125e:	e042      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'A') {
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b41      	cmp	r3, #65	@ 0x41
 8001264:	d102      	bne.n	800126c <CharToSegment+0x5c>
        return specialCharMap[4];
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <CharToSegment+0xe8>)
 8001268:	791b      	ldrb	r3, [r3, #4]
 800126a:	e03c      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'S') {
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b53      	cmp	r3, #83	@ 0x53
 8001270:	d102      	bne.n	8001278 <CharToSegment+0x68>
        return specialCharMap[5];
 8001272:	4b21      	ldr	r3, [pc, #132]	@ (80012f8 <CharToSegment+0xe8>)
 8001274:	795b      	ldrb	r3, [r3, #5]
 8001276:	e036      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'H') {
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b48      	cmp	r3, #72	@ 0x48
 800127c:	d102      	bne.n	8001284 <CharToSegment+0x74>
        return specialCharMap[6];
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <CharToSegment+0xe8>)
 8001280:	799b      	ldrb	r3, [r3, #6]
 8001282:	e030      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'I') {
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b49      	cmp	r3, #73	@ 0x49
 8001288:	d102      	bne.n	8001290 <CharToSegment+0x80>
        return specialCharMap[7];
 800128a:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <CharToSegment+0xe8>)
 800128c:	79db      	ldrb	r3, [r3, #7]
 800128e:	e02a      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'F') {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b46      	cmp	r3, #70	@ 0x46
 8001294:	d102      	bne.n	800129c <CharToSegment+0x8c>
        return specialCharMap[8];
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <CharToSegment+0xe8>)
 8001298:	7a1b      	ldrb	r3, [r3, #8]
 800129a:	e024      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'G') {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b47      	cmp	r3, #71	@ 0x47
 80012a0:	d102      	bne.n	80012a8 <CharToSegment+0x98>
        return specialCharMap[9];
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <CharToSegment+0xe8>)
 80012a4:	7a5b      	ldrb	r3, [r3, #9]
 80012a6:	e01e      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'P') {
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b50      	cmp	r3, #80	@ 0x50
 80012ac:	d102      	bne.n	80012b4 <CharToSegment+0xa4>
        return specialCharMap[10];
 80012ae:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <CharToSegment+0xe8>)
 80012b0:	7a9b      	ldrb	r3, [r3, #10]
 80012b2:	e018      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'C') {
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b43      	cmp	r3, #67	@ 0x43
 80012b8:	d102      	bne.n	80012c0 <CharToSegment+0xb0>
        return specialCharMap[11];
 80012ba:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <CharToSegment+0xe8>)
 80012bc:	7adb      	ldrb	r3, [r3, #11]
 80012be:	e012      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'E') {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b45      	cmp	r3, #69	@ 0x45
 80012c4:	d102      	bne.n	80012cc <CharToSegment+0xbc>
        return specialCharMap[12];
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <CharToSegment+0xe8>)
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
 80012ca:	e00c      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'U') {
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b55      	cmp	r3, #85	@ 0x55
 80012d0:	d102      	bne.n	80012d8 <CharToSegment+0xc8>
        return specialCharMap[13];
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <CharToSegment+0xe8>)
 80012d4:	7b5b      	ldrb	r3, [r3, #13]
 80012d6:	e006      	b.n	80012e6 <CharToSegment+0xd6>
    } else if (c == 'N') {
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b4e      	cmp	r3, #78	@ 0x4e
 80012dc:	d102      	bne.n	80012e4 <CharToSegment+0xd4>
        return specialCharMap[14];
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <CharToSegment+0xe8>)
 80012e0:	7b9b      	ldrb	r3, [r3, #14]
 80012e2:	e000      	b.n	80012e6 <CharToSegment+0xd6>
    } else {
        return 0b11111111; // Blank
 80012e4:	23ff      	movs	r3, #255	@ 0xff
    }
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000004 	.word	0x20000004
 80012f8:	20000010 	.word	0x20000010

080012fc <SevenSegLEDsHandler>:


uint8_t* SevenSegLEDsHandler(char buffer[3][7], uint8_t scan_state) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    for (int i = 0; i < 3; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e035      	b.n	800137a <SevenSegLEDsHandler+0x7e>
        int len = strlen(buffer[i]);
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff60 	bl	80001e0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	60bb      	str	r3, [r7, #8]
        if (scan_state < 6) {
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d81f      	bhi.n	800136a <SevenSegLEDsHandler+0x6e>
            if (scan_state < len) {
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	dd15      	ble.n	800135e <SevenSegLEDsHandler+0x62>
                output[i] = CharToSegment(buffer[i][len - 1 - scan_state]);
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4613      	mov	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	441a      	add	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1e59      	subs	r1, r3, #1
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	1acb      	subs	r3, r1, r3
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff61 	bl	8001210 <CharToSegment>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <SevenSegLEDsHandler+0x90>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	460a      	mov	r2, r1
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e00a      	b.n	8001374 <SevenSegLEDsHandler+0x78>
            } else {
                output[i] = 0b11111111; // Blank
 800135e:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <SevenSegLEDsHandler+0x90>)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	22ff      	movs	r2, #255	@ 0xff
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e004      	b.n	8001374 <SevenSegLEDsHandler+0x78>
            }
        } else {
            output[i] = 0b11111111; // Blank
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <SevenSegLEDsHandler+0x90>)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	22ff      	movs	r2, #255	@ 0xff
 8001372:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b02      	cmp	r3, #2
 800137e:	ddc6      	ble.n	800130e <SevenSegLEDsHandler+0x12>
        }
    }
    return output;
 8001380:	4b02      	ldr	r3, [pc, #8]	@ (800138c <SevenSegLEDsHandler+0x90>)
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000f0 	.word	0x200000f0

08001390 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(char buffer[3][7], uint8_t scan_state, uint8_t bufferIndex) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
 800139c:	4613      	mov	r3, r2
 800139e:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffa9 	bl	80012fc <SevenSegLEDsHandler>
 80013aa:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d820      	bhi.n	80013f4 <UpdateDisplayBuffer+0x64>
 80013b2:	a201      	add	r2, pc, #4	@ (adr r2, 80013b8 <UpdateDisplayBuffer+0x28>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013d7 	.word	0x080013d7
 80013c0:	080013dd 	.word	0x080013dd
 80013c4:	080013e3 	.word	0x080013e3
 80013c8:	080013e9 	.word	0x080013e9
 80013cc:	080013ef 	.word	0x080013ef
        case 0:
            curr_scan = 0b11111110;
 80013d0:	23fe      	movs	r3, #254	@ 0xfe
 80013d2:	73fb      	strb	r3, [r7, #15]
            break;
 80013d4:	e011      	b.n	80013fa <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 80013d6:	23fd      	movs	r3, #253	@ 0xfd
 80013d8:	73fb      	strb	r3, [r7, #15]
            break;
 80013da:	e00e      	b.n	80013fa <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 80013dc:	23fb      	movs	r3, #251	@ 0xfb
 80013de:	73fb      	strb	r3, [r7, #15]
            break;
 80013e0:	e00b      	b.n	80013fa <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 80013e2:	23f7      	movs	r3, #247	@ 0xf7
 80013e4:	73fb      	strb	r3, [r7, #15]
            break;
 80013e6:	e008      	b.n	80013fa <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 80013e8:	23ef      	movs	r3, #239	@ 0xef
 80013ea:	73fb      	strb	r3, [r7, #15]
            break;
 80013ec:	e005      	b.n	80013fa <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 80013ee:	23df      	movs	r3, #223	@ 0xdf
 80013f0:	73fb      	strb	r3, [r7, #15]
            break;
 80013f2:	e002      	b.n	80013fa <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 80013f4:	23ff      	movs	r3, #255	@ 0xff
 80013f6:	73fb      	strb	r3, [r7, #15]
            break;
 80013f8:	bf00      	nop
    }
    if (LEDPointFlag >= 0 && LEDPointFlag <= 5) {
 80013fa:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <UpdateDisplayBuffer+0x1c8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db72      	blt.n	80014e8 <UpdateDisplayBuffer+0x158>
 8001402:	4b55      	ldr	r3, [pc, #340]	@ (8001558 <UpdateDisplayBuffer+0x1c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b05      	cmp	r3, #5
 8001408:	dc6e      	bgt.n	80014e8 <UpdateDisplayBuffer+0x158>
        if (scan_state == LEDPointFlag) {
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <UpdateDisplayBuffer+0x1c8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d136      	bne.n	8001482 <UpdateDisplayBuffer+0xf2>
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001414:	78ba      	ldrb	r2, [r7, #2]
 8001416:	4951      	ldr	r1, [pc, #324]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	440b      	add	r3, r1
 8001420:	22ff      	movs	r2, #255	@ 0xff
 8001422:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001424:	78ba      	ldrb	r2, [r7, #2]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	7898      	ldrb	r0, [r3, #2]
 800142a:	494c      	ldr	r1, [pc, #304]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	440b      	add	r3, r1
 8001434:	3301      	adds	r3, #1
 8001436:	4602      	mov	r2, r0
 8001438:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 800143a:	78ba      	ldrb	r2, [r7, #2]
 800143c:	4947      	ldr	r1, [pc, #284]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	440b      	add	r3, r1
 8001446:	3302      	adds	r3, #2
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1] & 0b01111111; // Add DP
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	78ba      	ldrb	r2, [r7, #2]
 8001454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001458:	b2d8      	uxtb	r0, r3
 800145a:	4940      	ldr	r1, [pc, #256]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	440b      	add	r3, r1
 8001464:	3303      	adds	r3, #3
 8001466:	4602      	mov	r2, r0
 8001468:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 800146a:	78ba      	ldrb	r2, [r7, #2]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	7818      	ldrb	r0, [r3, #0]
 8001470:	493a      	ldr	r1, [pc, #232]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 8001480:	e065      	b.n	800154e <UpdateDisplayBuffer+0x1be>
        } else {
            displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 8001482:	78ba      	ldrb	r2, [r7, #2]
 8001484:	4935      	ldr	r1, [pc, #212]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	440b      	add	r3, r1
 800148e:	22ff      	movs	r2, #255	@ 0xff
 8001490:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][1] = curr_digit[2];
 8001492:	78ba      	ldrb	r2, [r7, #2]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	7898      	ldrb	r0, [r3, #2]
 8001498:	4930      	ldr	r1, [pc, #192]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	3301      	adds	r3, #1
 80014a4:	4602      	mov	r2, r0
 80014a6:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][2] = curr_scan;
 80014a8:	78ba      	ldrb	r2, [r7, #2]
 80014aa:	492c      	ldr	r1, [pc, #176]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	3302      	adds	r3, #2
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][3] = curr_digit[1];
 80014ba:	78ba      	ldrb	r2, [r7, #2]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	7858      	ldrb	r0, [r3, #1]
 80014c0:	4926      	ldr	r1, [pc, #152]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	3303      	adds	r3, #3
 80014cc:	4602      	mov	r2, r0
 80014ce:	701a      	strb	r2, [r3, #0]
            displayBuffer[bufferIndex][4] = curr_digit[0];
 80014d0:	78ba      	ldrb	r2, [r7, #2]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	7818      	ldrb	r0, [r3, #0]
 80014d6:	4921      	ldr	r1, [pc, #132]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	440b      	add	r3, r1
 80014e0:	3304      	adds	r3, #4
 80014e2:	4602      	mov	r2, r0
 80014e4:	701a      	strb	r2, [r3, #0]
        if (scan_state == LEDPointFlag) {
 80014e6:	e032      	b.n	800154e <UpdateDisplayBuffer+0x1be>
        }
    } else {
        displayBuffer[bufferIndex][0] = 0b11111111; // Skip bit
 80014e8:	78ba      	ldrb	r2, [r7, #2]
 80014ea:	491c      	ldr	r1, [pc, #112]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	22ff      	movs	r2, #255	@ 0xff
 80014f6:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][1] = curr_digit[2];
 80014f8:	78ba      	ldrb	r2, [r7, #2]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	7898      	ldrb	r0, [r3, #2]
 80014fe:	4917      	ldr	r1, [pc, #92]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	440b      	add	r3, r1
 8001508:	3301      	adds	r3, #1
 800150a:	4602      	mov	r2, r0
 800150c:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][2] = curr_scan;
 800150e:	78ba      	ldrb	r2, [r7, #2]
 8001510:	4912      	ldr	r1, [pc, #72]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	440b      	add	r3, r1
 800151a:	3302      	adds	r3, #2
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][3] = curr_digit[1];
 8001520:	78ba      	ldrb	r2, [r7, #2]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	7858      	ldrb	r0, [r3, #1]
 8001526:	490d      	ldr	r1, [pc, #52]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
 8001530:	3303      	adds	r3, #3
 8001532:	4602      	mov	r2, r0
 8001534:	701a      	strb	r2, [r3, #0]
        displayBuffer[bufferIndex][4] = curr_digit[0];
 8001536:	78ba      	ldrb	r2, [r7, #2]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	7818      	ldrb	r0, [r3, #0]
 800153c:	4907      	ldr	r1, [pc, #28]	@ (800155c <UpdateDisplayBuffer+0x1cc>)
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	440b      	add	r3, r1
 8001546:	3304      	adds	r3, #4
 8001548:	4602      	mov	r2, r0
 800154a:	701a      	strb	r2, [r3, #0]
    }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000048 	.word	0x20000048
 800155c:	200000e4 	.word	0x200000e4

08001560 <SevenSegLEDsScan>:


void SevenSegLEDsScan() {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <SevenSegLEDsScan+0x7c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	bfb8      	it	lt
 8001576:	425b      	neglt	r3, r3
 8001578:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <SevenSegLEDsScan+0x80>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	4619      	mov	r1, r3
 8001584:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <SevenSegLEDsScan+0x84>)
 8001586:	f7ff ff03 	bl	8001390 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158a:	b672      	cpsid	i
}
 800158c:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <SevenSegLEDsScan+0x7c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <SevenSegLEDsScan+0x88>)
 800159e:	4413      	add	r3, r2
 80015a0:	2105      	movs	r1, #5
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f824 	bl	80015f0 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 80015a8:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <SevenSegLEDsScan+0x7c>)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ae:	b662      	cpsie	i
}
 80015b0:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <SevenSegLEDsScan+0x80>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <SevenSegLEDsScan+0x8c>)
 80015bc:	fb83 3102 	smull	r3, r1, r3, r2
 80015c0:	17d3      	asrs	r3, r2, #31
 80015c2:	1ac9      	subs	r1, r1, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	1ad1      	subs	r1, r2, r3
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <SevenSegLEDsScan+0x80>)
 80015d2:	701a      	strb	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200000ee 	.word	0x200000ee
 80015e0:	200000e2 	.word	0x200000e2
 80015e4:	20000020 	.word	0x20000020
 80015e8:	200000e4 	.word	0x200000e4
 80015ec:	2aaaaaab 	.word	0x2aaaaaab

080015f0 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001600:	4823      	ldr	r0, [pc, #140]	@ (8001690 <ShiftOut_SPI+0xa0>)
 8001602:	f000 fead 	bl	8002360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8001606:	2201      	movs	r2, #1
 8001608:	2180      	movs	r1, #128	@ 0x80
 800160a:	4822      	ldr	r0, [pc, #136]	@ (8001694 <ShiftOut_SPI+0xa4>)
 800160c:	f000 fea8 	bl	8002360 <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e003      	b.n	800161e <ShiftOut_SPI+0x2e>
 8001616:	bf00      	nop
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001624:	dbf7      	blt.n	8001616 <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001626:	bf00      	nop
 8001628:	481b      	ldr	r0, [pc, #108]	@ (8001698 <ShiftOut_SPI+0xa8>)
 800162a:	f001 fcf5 	bl	8003018 <HAL_SPI_GetState>
 800162e:	4603      	mov	r3, r0
 8001630:	2b01      	cmp	r3, #1
 8001632:	d1f9      	bne.n	8001628 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b29a      	uxth	r2, r3
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4816      	ldr	r0, [pc, #88]	@ (8001698 <ShiftOut_SPI+0xa8>)
 8001640:	f001 fba7 	bl	8002d92 <HAL_SPI_Transmit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 800164a:	f000 f9e5 	bl	8001a18 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	e003      	b.n	800165c <ShiftOut_SPI+0x6c>
 8001654:	bf00      	nop
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001662:	dbf7      	blt.n	8001654 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001664:	bf00      	nop
 8001666:	480c      	ldr	r0, [pc, #48]	@ (8001698 <ShiftOut_SPI+0xa8>)
 8001668:	f001 fcd6 	bl	8003018 <HAL_SPI_GetState>
 800166c:	4603      	mov	r3, r0
 800166e:	2b01      	cmp	r3, #1
 8001670:	d1f9      	bne.n	8001666 <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001678:	4805      	ldr	r0, [pc, #20]	@ (8001690 <ShiftOut_SPI+0xa0>)
 800167a:	f000 fe71 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	4804      	ldr	r0, [pc, #16]	@ (8001694 <ShiftOut_SPI+0xa4>)
 8001684:	f000 fe6c 	bl	8002360 <HAL_GPIO_WritePin>

}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020400 	.word	0x40020400
 8001694:	40020800 	.word	0x40020800
 8001698:	200000f4 	.word	0x200000f4

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a0:	f000 fb9e 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a4:	f000 f828 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a8:	f000 f8fa 	bl	80018a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016ac:	f000 f88c 	bl	80017c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016b0:	f000 f8c0 	bl	8001834 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016b4:	f002 f852 	bl	800375c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80016b8:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <main+0x44>)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <main+0x48>)
 80016be:	f002 f897 	bl	80037f0 <osThreadNew>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <main+0x4c>)
 80016c6:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <main+0x50>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <main+0x54>)
 80016ce:	f002 f88f 	bl	80037f0 <osThreadNew>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a07      	ldr	r2, [pc, #28]	@ (80016f4 <main+0x58>)
 80016d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016d8:	f002 f864 	bl	80037a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <main+0x40>
 80016e0:	08006d80 	.word	0x08006d80
 80016e4:	080019a5 	.word	0x080019a5
 80016e8:	200001a4 	.word	0x200001a4
 80016ec:	08006da4 	.word	0x08006da4
 80016f0:	080019e1 	.word	0x080019e1
 80016f4:	200001a8 	.word	0x200001a8

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	@ 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2230      	movs	r2, #48	@ 0x30
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f004 fe0a 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <SystemClock_Config+0xc8>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <SystemClock_Config+0xc8>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	@ 0x40
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <SystemClock_Config+0xc8>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <SystemClock_Config+0xcc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <SystemClock_Config+0xcc>)
 8001742:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <SystemClock_Config+0xcc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175c:	2310      	movs	r3, #16
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001760:	2302      	movs	r3, #2
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800176c:	2364      	movs	r3, #100	@ 0x64
 800176e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001770:	2302      	movs	r3, #2
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001774:	2304      	movs	r3, #4
 8001776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fe09 	bl	8002394 <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001788:	f000 f946 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178c:	230f      	movs	r3, #15
 800178e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001790:	2302      	movs	r3, #2
 8001792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2103      	movs	r1, #3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 f86b 	bl	8002884 <HAL_RCC_ClockConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017b4:	f000 f930 	bl	8001a18 <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	@ 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000

080017c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <MX_SPI1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_SPI1_Init+0x64>)
 80017d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI1_Init+0x64>)
 80017fc:	2220      	movs	r2, #32
 80017fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI1_Init+0x64>)
 8001814:	220a      	movs	r2, #10
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_SPI1_Init+0x64>)
 800181a:	f001 fa31 	bl	8002c80 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001824:	f000 f8f8 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200000f4 	.word	0x200000f4
 8001830:	40013000 	.word	0x40013000

08001834 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_SPI2_Init+0x64>)
 800183a:	4a18      	ldr	r2, [pc, #96]	@ (800189c <MX_SPI2_Init+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_SPI2_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_SPI2_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001864:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_SPI2_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <MX_SPI2_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001880:	220a      	movs	r2, #10
 8001882:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_SPI2_Init+0x64>)
 8001886:	f001 f9fb 	bl	8002c80 <HAL_SPI_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001890:	f000 f8c2 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000014c 	.word	0x2000014c
 800189c:	40003800 	.word	0x40003800

080018a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a36      	ldr	r2, [pc, #216]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a2f      	ldr	r2, [pc, #188]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <MX_GPIO_Init+0xf8>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <MX_GPIO_Init+0xf8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <MX_GPIO_Init+0xf8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <MX_GPIO_Init+0xf8>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <MX_GPIO_Init+0xf8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001926:	2200      	movs	r2, #0
 8001928:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 800192c:	481b      	ldr	r0, [pc, #108]	@ (800199c <MX_GPIO_Init+0xfc>)
 800192e:	f000 fd17 	bl	8002360 <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	481a      	ldr	r0, [pc, #104]	@ (80019a0 <MX_GPIO_Init+0x100>)
 8001938:	f000 fd12 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800193c:	231f      	movs	r3, #31
 800193e:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4813      	ldr	r0, [pc, #76]	@ (800199c <MX_GPIO_Init+0xfc>)
 8001950:	f000 fb6a 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8001954:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8001958:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	480b      	ldr	r0, [pc, #44]	@ (800199c <MX_GPIO_Init+0xfc>)
 800196e:	f000 fb5b 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_GPIO_Init+0x100>)
 800198a:	f000 fb4d 	bl	8002028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	@ 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800

080019a4 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 80019ac:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <Led3x6Run+0x38>)
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b6:	6018      	str	r0, [r3, #0]
 80019b8:	3304      	adds	r3, #4
 80019ba:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 80019bc:	f7ff fdd0 	bl	8001560 <SevenSegLEDsScan>
	  osDelay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f001 ffa7 	bl	8003914 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2105      	movs	r1, #5
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe0f 	bl	80015f0 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f001 ff9e 	bl	8003914 <osDelay>
	  SevenSegLEDsScan();
 80019d8:	bf00      	nop
 80019da:	e7ef      	b.n	80019bc <Led3x6Run+0x18>
 80019dc:	08006d60 	.word	0x08006d60

080019e0 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 80019e8:	f7fe ff8a 	bl	8000900 <KeyLogic>
	 KeyLogic_Action();
 80019ec:	f7ff f9f8 	bl	8000de0 <KeyLogic_Action>
	 osDelay(1);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f001 ff8f 	bl	8003914 <osDelay>
	 KeyLogic();
 80019f6:	bf00      	nop
 80019f8:	e7f6      	b.n	80019e8 <KeyPad4x5Run+0x8>

080019fa <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a0a:	d101      	bne.n	8001a10 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a0c:	f000 fa0a 	bl	8001e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <Error_Handler+0x8>

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_MspInit+0x54>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <HAL_MspInit+0x54>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_MspInit+0x54>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <HAL_MspInit+0x54>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <HAL_MspInit+0x54>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_MspInit+0x54>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210f      	movs	r1, #15
 8001a66:	f06f 0001 	mvn.w	r0, #1
 8001a6a:	f000 fab3 	bl	8001fd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	@ 0x30
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a41      	ldr	r2, [pc, #260]	@ (8001ba0 <HAL_SPI_MspInit+0x124>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d12c      	bne.n	8001af8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a38      	ldr	r2, [pc, #224]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ad6:	23a0      	movs	r3, #160	@ 0xa0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	4619      	mov	r1, r3
 8001af0:	482d      	ldr	r0, [pc, #180]	@ (8001ba8 <HAL_SPI_MspInit+0x12c>)
 8001af2:	f000 fa99 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001af6:	e04f      	b.n	8001b98 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	@ (8001bac <HAL_SPI_MspInit+0x130>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d14a      	bne.n	8001b98 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a26      	ldr	r2, [pc, #152]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a18      	ldr	r2, [pc, #96]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <HAL_SPI_MspInit+0x128>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b56:	2308      	movs	r3, #8
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b66:	2305      	movs	r3, #5
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480f      	ldr	r0, [pc, #60]	@ (8001bb0 <HAL_SPI_MspInit+0x134>)
 8001b72:	f000 fa59 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4808      	ldr	r0, [pc, #32]	@ (8001bb4 <HAL_SPI_MspInit+0x138>)
 8001b94:	f000 fa48 	bl	8002028 <HAL_GPIO_Init>
}
 8001b98:	bf00      	nop
 8001b9a:	3730      	adds	r7, #48	@ 0x30
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40013000 	.word	0x40013000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40003800 	.word	0x40003800
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	@ 0x38
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <HAL_InitTick+0xe8>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	4a33      	ldr	r2, [pc, #204]	@ (8001ca0 <HAL_InitTick+0xe8>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd8:	4b31      	ldr	r3, [pc, #196]	@ (8001ca0 <HAL_InitTick+0xe8>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be4:	f107 0210 	add.w	r2, r7, #16
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 f814 	bl	8002c1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d103      	bne.n	8001c06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bfe:	f000 fff9 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8001c02:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c04:	e004      	b.n	8001c10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c06:	f000 fff5 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c12:	4a24      	ldr	r2, [pc, #144]	@ (8001ca4 <HAL_InitTick+0xec>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c32:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001c46:	4818      	ldr	r0, [pc, #96]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c48:	f001 fad0 	bl	80031ec <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c52:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d11b      	bne.n	8001c92 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001c5a:	4813      	ldr	r0, [pc, #76]	@ (8001ca8 <HAL_InitTick+0xf0>)
 8001c5c:	f001 fb20 	bl	80032a0 <HAL_TIM_Base_Start_IT>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c66:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d111      	bne.n	8001c92 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c6e:	201c      	movs	r0, #28
 8001c70:	f000 f9cc 	bl	800200c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	d808      	bhi.n	8001c8c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f000 f9a8 	bl	8001fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c84:	4a09      	ldr	r2, [pc, #36]	@ (8001cac <HAL_InitTick+0xf4>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e002      	b.n	8001c92 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3738      	adds	r7, #56	@ 0x38
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	200001ac 	.word	0x200001ac
 8001cac:	20000050 	.word	0x20000050

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <TIM2_IRQHandler+0x10>)
 8001cee:	f001 fb39 	bl	8003364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001ac 	.word	0x200001ac

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f004 fb56 	bl	80063dc <__errno>
 8001d30:	4603      	mov	r3, r0
 8001d32:	220c      	movs	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <_sbrk+0x64>)
 8001d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20020000 	.word	0x20020000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	200001f4 	.word	0x200001f4
 8001d64:	20004d30 	.word	0x20004d30

08001d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <SystemInit+0x20>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <SystemInit+0x20>)
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d90:	f7ff ffea 	bl	8001d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d96:	490d      	ldr	r1, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d98:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dac:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f004 fb15 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff fc6d 	bl	800169c <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001dd0:	08006e24 	.word	0x08006e24
  ldr r2, =_sbss
 8001dd4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001dd8:	20004d2c 	.word	0x20004d2c

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <HAL_Init+0x40>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <HAL_Init+0x40>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_Init+0x40>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f8d8 	bl	8001fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f7ff fed2 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fe06 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000054 	.word	0x20000054
 8001e48:	200001f8 	.word	0x200001f8

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200001f8 	.word	0x200001f8

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	@ (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff4c 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe6:	f7ff ff61 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8001fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	6978      	ldr	r0, [r7, #20]
 8001ff2:	f7ff ffb1 	bl	8001f58 <NVIC_EncodePriority>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff80 	bl	8001f04 <__NVIC_SetPriority>
}
 8002004:	bf00      	nop
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff54 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e159      	b.n	80022f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8148 	bne.w	80022f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	2b02      	cmp	r3, #2
 8002078:	d130      	bne.n	80020dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d017      	beq.n	8002118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a2 	beq.w	80022f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_GPIO_Init+0x2e8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4a56      	ldr	r2, [pc, #344]	@ (8002310 <HAL_GPIO_Init+0x2e8>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	4b54      	ldr	r3, [pc, #336]	@ (8002310 <HAL_GPIO_Init+0x2e8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ca:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_GPIO_Init+0x2ec>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a49      	ldr	r2, [pc, #292]	@ (8002318 <HAL_GPIO_Init+0x2f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x202>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a48      	ldr	r2, [pc, #288]	@ (800231c <HAL_GPIO_Init+0x2f4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x1fe>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a47      	ldr	r2, [pc, #284]	@ (8002320 <HAL_GPIO_Init+0x2f8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1fa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a46      	ldr	r2, [pc, #280]	@ (8002324 <HAL_GPIO_Init+0x2fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1f6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a45      	ldr	r2, [pc, #276]	@ (8002328 <HAL_GPIO_Init+0x300>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1f2>
 8002216:	2304      	movs	r3, #4
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221a:	2307      	movs	r3, #7
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x204>
 800222a:	2300      	movs	r3, #0
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4093      	lsls	r3, r2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223c:	4935      	ldr	r1, [pc, #212]	@ (8002314 <HAL_GPIO_Init+0x2ec>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224a:	4b38      	ldr	r3, [pc, #224]	@ (800232c <HAL_GPIO_Init+0x304>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226e:	4a2f      	ldr	r2, [pc, #188]	@ (800232c <HAL_GPIO_Init+0x304>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002274:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <HAL_GPIO_Init+0x304>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002298:	4a24      	ldr	r2, [pc, #144]	@ (800232c <HAL_GPIO_Init+0x304>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c2:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ec:	4a0f      	ldr	r2, [pc, #60]	@ (800232c <HAL_GPIO_Init+0x304>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	f67f aea2 	bls.w	8002044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3724      	adds	r7, #36	@ 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40013800 	.word	0x40013800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020400 	.word	0x40020400
 8002320:	40020800 	.word	0x40020800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021000 	.word	0x40021000
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e001      	b.n	8002352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e267      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d075      	beq.n	800249e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b2:	4b88      	ldr	r3, [pc, #544]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d00c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023be:	4b85      	ldr	r3, [pc, #532]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d112      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4b82      	ldr	r3, [pc, #520]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	4b7e      	ldr	r3, [pc, #504]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d05b      	beq.n	800249c <HAL_RCC_OscConfig+0x108>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d157      	bne.n	800249c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e242      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_OscConfig+0x74>
 80023fa:	4b76      	ldr	r3, [pc, #472]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a75      	ldr	r2, [pc, #468]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e01d      	b.n	8002444 <HAL_RCC_OscConfig+0xb0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x98>
 8002412:	4b70      	ldr	r3, [pc, #448]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6f      	ldr	r2, [pc, #444]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b6d      	ldr	r3, [pc, #436]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6c      	ldr	r2, [pc, #432]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0xb0>
 800242c:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a68      	ldr	r2, [pc, #416]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b66      	ldr	r3, [pc, #408]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a65      	ldr	r2, [pc, #404]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff fcfe 	bl	8001e4c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002454:	f7ff fcfa 	bl	8001e4c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	@ 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e207      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b5b      	ldr	r3, [pc, #364]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0xc0>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fcea 	bl	8001e4c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7ff fce6 	bl	8001e4c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	@ 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1f3      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	4b51      	ldr	r3, [pc, #324]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0xe8>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d063      	beq.n	8002572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024aa:	4b4a      	ldr	r3, [pc, #296]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b6:	4b47      	ldr	r3, [pc, #284]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d11c      	bne.n	80024fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d116      	bne.n	80024fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x152>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e1c7      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	e03a      	b.n	8002572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002504:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <HAL_RCC_OscConfig+0x244>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff fc9f 	bl	8001e4c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002512:	f7ff fc9b 	bl	8001e4c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e1a8      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b28      	ldr	r3, [pc, #160]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4925      	ldr	r1, [pc, #148]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]
 8002544:	e015      	b.n	8002572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCC_OscConfig+0x244>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff fc7e 	bl	8001e4c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002554:	f7ff fc7a 	bl	8001e4c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e187      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	4b1b      	ldr	r3, [pc, #108]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d036      	beq.n	80025ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_RCC_OscConfig+0x248>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7ff fc5e 	bl	8001e4c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff fc5a 	bl	8001e4c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e167      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x200>
 80025b2:	e01b      	b.n	80025ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b4:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_RCC_OscConfig+0x248>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7ff fc47 	bl	8001e4c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	e00e      	b.n	80025e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c2:	f7ff fc43 	bl	8001e4c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d907      	bls.n	80025e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e150      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
 80025d4:	40023800 	.word	0x40023800
 80025d8:	42470000 	.word	0x42470000
 80025dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b88      	ldr	r3, [pc, #544]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ea      	bne.n	80025c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8097 	beq.w	8002728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b81      	ldr	r3, [pc, #516]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b7d      	ldr	r3, [pc, #500]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a7c      	ldr	r2, [pc, #496]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b7a      	ldr	r3, [pc, #488]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b77      	ldr	r3, [pc, #476]	@ (8002808 <HAL_RCC_OscConfig+0x474>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d118      	bne.n	8002668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b74      	ldr	r3, [pc, #464]	@ (8002808 <HAL_RCC_OscConfig+0x474>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a73      	ldr	r2, [pc, #460]	@ (8002808 <HAL_RCC_OscConfig+0x474>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7ff fc03 	bl	8001e4c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7ff fbff 	bl	8001e4c <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e10c      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b6a      	ldr	r3, [pc, #424]	@ (8002808 <HAL_RCC_OscConfig+0x474>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x2ea>
 8002670:	4b64      	ldr	r3, [pc, #400]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	4a63      	ldr	r2, [pc, #396]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	@ 0x70
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0x324>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x30c>
 8002686:	4b5f      	ldr	r3, [pc, #380]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268a:	4a5e      	ldr	r2, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	@ 0x70
 8002692:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	4a5b      	ldr	r2, [pc, #364]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	@ 0x70
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0x324>
 80026a0:	4b58      	ldr	r3, [pc, #352]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a4:	4a57      	ldr	r2, [pc, #348]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ac:	4b55      	ldr	r3, [pc, #340]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b0:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f023 0304 	bic.w	r3, r3, #4
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff fbc4 	bl	8001e4c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7ff fbc0 	bl	8001e4c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0cb      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	4b49      	ldr	r3, [pc, #292]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ee      	beq.n	80026c8 <HAL_RCC_OscConfig+0x334>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff fbae 	bl	8001e4c <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7ff fbaa 	bl	8001e4c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0b5      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270a:	4b3e      	ldr	r3, [pc, #248]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ee      	bne.n	80026f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	4a38      	ldr	r2, [pc, #224]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80a1 	beq.w	8002874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002732:	4b34      	ldr	r3, [pc, #208]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b08      	cmp	r3, #8
 800273c:	d05c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d141      	bne.n	80027ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b31      	ldr	r3, [pc, #196]	@ (800280c <HAL_RCC_OscConfig+0x478>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fb7e 	bl	8001e4c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7ff fb7a 	bl	8001e4c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e087      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b27      	ldr	r3, [pc, #156]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	3b01      	subs	r3, #1
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	491b      	ldr	r1, [pc, #108]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x478>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7ff fb53 	bl	8001e4c <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7ff fb4f 	bl	8001e4c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e05c      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x416>
 80027c8:	e054      	b.n	8002874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_RCC_OscConfig+0x478>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7ff fb3c 	bl	8001e4c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d8:	f7ff fb38 	bl	8001e4c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e045      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_OscConfig+0x470>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x444>
 80027f6:	e03d      	b.n	8002874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e038      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000
 800280c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <HAL_RCC_OscConfig+0x4ec>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d028      	beq.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d121      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d11a      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002848:	4293      	cmp	r3, r2
 800284a:	d111      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	3b01      	subs	r3, #1
 800285a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800

08002884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0cc      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b68      	ldr	r3, [pc, #416]	@ (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d90c      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b65      	ldr	r3, [pc, #404]	@ (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b63      	ldr	r3, [pc, #396]	@ (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0b8      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d8:	4b59      	ldr	r3, [pc, #356]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a58      	ldr	r2, [pc, #352]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f0:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a52      	ldr	r2, [pc, #328]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fc:	4b50      	ldr	r3, [pc, #320]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	494d      	ldr	r1, [pc, #308]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d044      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d119      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e07f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d003      	beq.n	8002942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293e:	2b03      	cmp	r3, #3
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b3f      	ldr	r3, [pc, #252]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e06f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3b      	ldr	r3, [pc, #236]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e067      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b37      	ldr	r3, [pc, #220]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4934      	ldr	r1, [pc, #208]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff fa6a 	bl	8001e4c <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7ff fa66 	bl	8001e4c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e04f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b25      	ldr	r3, [pc, #148]	@ (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d20c      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e032      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4916      	ldr	r1, [pc, #88]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	490e      	ldr	r1, [pc, #56]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a0a:	f000 f821 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	490a      	ldr	r1, [pc, #40]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	5ccb      	ldrb	r3, [r1, r3]
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_RCC_ClockConfig+0x1c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f8c4 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023c00 	.word	0x40023c00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08006dc8 	.word	0x08006dc8
 8002a48:	2000004c 	.word	0x2000004c
 8002a4c:	20000050 	.word	0x20000050

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b090      	sub	sp, #64	@ 0x40
 8002a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a60:	2300      	movs	r3, #0
 8002a62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a68:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d00d      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x40>
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	f200 80a1 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x16c>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x34>
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a82:	e09b      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a86:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002a88:	e09b      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8a:	4b53      	ldr	r3, [pc, #332]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a8e:	e098      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a90:	4b4f      	ldr	r3, [pc, #316]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	2200      	movs	r2, #0
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002abc:	fb03 f201 	mul.w	r2, r3, r1
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a43      	ldr	r2, [pc, #268]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aca:	fba0 1202 	umull	r1, r2, r0, r2
 8002ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad6:	4413      	add	r3, r2
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002adc:	2200      	movs	r2, #0
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	61fa      	str	r2, [r7, #28]
 8002ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002aea:	f7fd fbd1 	bl	8000290 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4613      	mov	r3, r2
 8002af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af6:	e053      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af8:	4b35      	ldr	r3, [pc, #212]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	2200      	movs	r2, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	617a      	str	r2, [r7, #20]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b0a:	f04f 0b00 	mov.w	fp, #0
 8002b0e:	4652      	mov	r2, sl
 8002b10:	465b      	mov	r3, fp
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	ebb2 080a 	subs.w	r8, r2, sl
 8002b2a:	eb63 090b 	sbc.w	r9, r3, fp
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b42:	ebb2 0408 	subs.w	r4, r2, r8
 8002b46:	eb63 0509 	sbc.w	r5, r3, r9
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	00eb      	lsls	r3, r5, #3
 8002b54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b58:	00e2      	lsls	r2, r4, #3
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	eb14 030a 	adds.w	r3, r4, sl
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	eb45 030b 	adc.w	r3, r5, fp
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b76:	4629      	mov	r1, r5
 8002b78:	028b      	lsls	r3, r1, #10
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b80:	4621      	mov	r1, r4
 8002b82:	028a      	lsls	r2, r1, #10
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	60fa      	str	r2, [r7, #12]
 8002b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b94:	f7fd fb7c 	bl	8000290 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002bb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bba:	e002      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3740      	adds	r7, #64	@ 0x40
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	017d7840 	.word	0x017d7840

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000004c 	.word	0x2000004c

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08006dd8 	.word	0x08006dd8

08002c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	220f      	movs	r2, #15
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <HAL_RCC_GetClockConfig+0x60>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0207 	and.w	r2, r3, #7
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07b      	b.n	8002d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ca2:	d009      	beq.n	8002cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
 8002caa:	e005      	b.n	8002cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe fed2 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	f003 0104 	and.w	r1, r3, #4
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	f003 0210 	and.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b088      	sub	sp, #32
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_SPI_Transmit+0x22>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e12d      	b.n	8003010 <HAL_SPI_Transmit+0x27e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dbc:	f7ff f846 	bl	8001e4c <HAL_GetTick>
 8002dc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dd6:	e116      	b.n	8003006 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_SPI_Transmit+0x52>
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002de8:	e10d      	b.n	8003006 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e30:	d10f      	bne.n	8002e52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5c:	2b40      	cmp	r3, #64	@ 0x40
 8002e5e:	d007      	beq.n	8002e70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e78:	d14f      	bne.n	8002f1a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_SPI_Transmit+0xf6>
 8002e82:	8afb      	ldrh	r3, [r7, #22]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d142      	bne.n	8002f0e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	881a      	ldrh	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	1c9a      	adds	r2, r3, #2
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002eac:	e02f      	b.n	8002f0e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d112      	bne.n	8002ee2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	1c9a      	adds	r2, r3, #2
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ee0:	e015      	b.n	8002f0e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee2:	f7fe ffb3 	bl	8001e4c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d803      	bhi.n	8002efa <HAL_SPI_Transmit+0x168>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Transmit+0x16e>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002f0c:	e07b      	b.n	8003006 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ca      	bne.n	8002eae <HAL_SPI_Transmit+0x11c>
 8002f18:	e050      	b.n	8002fbc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_Transmit+0x196>
 8002f22:	8afb      	ldrh	r3, [r7, #22]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d144      	bne.n	8002fb2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f4e:	e030      	b.n	8002fb2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d113      	bne.n	8002f86 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f84:	e015      	b.n	8002fb2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f86:	f7fe ff61 	bl	8001e4c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d803      	bhi.n	8002f9e <HAL_SPI_Transmit+0x20c>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d102      	bne.n	8002fa4 <HAL_SPI_Transmit+0x212>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002fb0:	e029      	b.n	8003006 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1c9      	bne.n	8002f50 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f8bf 	bl	8003144 <SPI_EndRxTxTransaction>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e003      	b.n	8003006 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800300e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003026:	b2db      	uxtb	r3, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003044:	f7fe ff02 	bl	8001e4c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	4413      	add	r3, r2
 8003052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003054:	f7fe fefa 	bl	8001e4c <HAL_GetTick>
 8003058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800305a:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	015b      	lsls	r3, r3, #5
 8003060:	0d1b      	lsrs	r3, r3, #20
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800306a:	e054      	b.n	8003116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d050      	beq.n	8003116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003074:	f7fe feea 	bl	8001e4c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	d902      	bls.n	800308a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d13d      	bne.n	8003106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030a2:	d111      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ac:	d004      	beq.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b6:	d107      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d0:	d10f      	bne.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e017      	b.n	8003136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3b01      	subs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	429a      	cmp	r2, r3
 8003132:	d19b      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	2000004c 	.word	0x2000004c

08003144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2201      	movs	r2, #1
 8003158:	2102      	movs	r1, #2
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff ff6a 	bl	8003034 <SPI_WaitFlagStateUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e032      	b.n	80031dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003176:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <SPI_EndRxTxTransaction+0xa0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <SPI_EndRxTxTransaction+0xa4>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0d5b      	lsrs	r3, r3, #21
 8003182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003194:	d112      	bne.n	80031bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2200      	movs	r2, #0
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff ff47 	bl	8003034 <SPI_WaitFlagStateUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e00f      	b.n	80031dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	2b80      	cmp	r3, #128	@ 0x80
 80031d4:	d0f2      	beq.n	80031bc <SPI_EndRxTxTransaction+0x78>
 80031d6:	e000      	b.n	80031da <SPI_EndRxTxTransaction+0x96>
        break;
 80031d8:	bf00      	nop
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000004c 	.word	0x2000004c
 80031e8:	165e9f81 	.word	0x165e9f81

080031ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e041      	b.n	8003282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f839 	bl	800328a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 f9b2 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e044      	b.n	8003342 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_TIM_Base_Start_IT+0xb0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x6c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e2:	d013      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x6c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003354 <HAL_TIM_Base_Start_IT+0xb4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x6c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a19      	ldr	r2, [pc, #100]	@ (8003358 <HAL_TIM_Base_Start_IT+0xb8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x6c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a17      	ldr	r2, [pc, #92]	@ (800335c <HAL_TIM_Base_Start_IT+0xbc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x6c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a16      	ldr	r2, [pc, #88]	@ (8003360 <HAL_TIM_Base_Start_IT+0xc0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d111      	bne.n	8003330 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d010      	beq.n	8003340 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332e:	e007      	b.n	8003340 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800
 800335c:	40000c00 	.word	0x40000c00
 8003360:	40014000 	.word	0x40014000

08003364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d020      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8d2 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8c4 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f8d5 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01b      	beq.n	8003414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0204 	mvn.w	r2, #4
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8ac 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f89e 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8af 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f886 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f878 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f889 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0210 	mvn.w	r2, #16
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2208      	movs	r2, #8
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f860 	bl	8003558 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f852 	bl	8003544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f863 	bl	800356c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0201 	mvn.w	r2, #1
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe fa95 	bl	80019fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8e6 	bl	80036c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f834 	bl	8003580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0220 	mvn.w	r2, #32
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8b8 	bl	80036ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003690 <TIM_Base_SetConfig+0xfc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00f      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b2:	d00b      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a37      	ldr	r2, [pc, #220]	@ (8003694 <TIM_Base_SetConfig+0x100>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d007      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a36      	ldr	r2, [pc, #216]	@ (8003698 <TIM_Base_SetConfig+0x104>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d003      	beq.n	80035cc <TIM_Base_SetConfig+0x38>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a35      	ldr	r2, [pc, #212]	@ (800369c <TIM_Base_SetConfig+0x108>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d108      	bne.n	80035de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003690 <TIM_Base_SetConfig+0xfc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01b      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ec:	d017      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a28      	ldr	r2, [pc, #160]	@ (8003694 <TIM_Base_SetConfig+0x100>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <TIM_Base_SetConfig+0x104>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00f      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a26      	ldr	r2, [pc, #152]	@ (800369c <TIM_Base_SetConfig+0x108>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a25      	ldr	r2, [pc, #148]	@ (80036a0 <TIM_Base_SetConfig+0x10c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a24      	ldr	r2, [pc, #144]	@ (80036a4 <TIM_Base_SetConfig+0x110>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0x8a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a23      	ldr	r2, [pc, #140]	@ (80036a8 <TIM_Base_SetConfig+0x114>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <TIM_Base_SetConfig+0xfc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	611a      	str	r2, [r3, #16]
  }
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40010000 	.word	0x40010000
 8003694:	40000400 	.word	0x40000400
 8003698:	40000800 	.word	0x40000800
 800369c:	40000c00 	.word	0x40000c00
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <__NVIC_SetPriority>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db0a      	blt.n	80036fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	490c      	ldr	r1, [pc, #48]	@ (8003720 <__NVIC_SetPriority+0x4c>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	0112      	lsls	r2, r2, #4
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	440b      	add	r3, r1
 80036f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80036fc:	e00a      	b.n	8003714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4908      	ldr	r1, [pc, #32]	@ (8003724 <__NVIC_SetPriority+0x50>)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	3b04      	subs	r3, #4
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	440b      	add	r3, r1
 8003712:	761a      	strb	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800372c:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <SysTick_Handler+0x1c>)
 800372e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003730:	f001 fd46 	bl	80051c0 <xTaskGetSchedulerState>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800373a:	f002 fb3d 	bl	8005db8 <xPortSysTickHandler>
  }
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	e000e010 	.word	0xe000e010

08003748 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800374c:	2100      	movs	r1, #0
 800374e:	f06f 0004 	mvn.w	r0, #4
 8003752:	f7ff ffbf 	bl	80036d4 <__NVIC_SetPriority>
#endif
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003762:	f3ef 8305 	mrs	r3, IPSR
 8003766:	603b      	str	r3, [r7, #0]
  return(result);
 8003768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800376e:	f06f 0305 	mvn.w	r3, #5
 8003772:	607b      	str	r3, [r7, #4]
 8003774:	e00c      	b.n	8003790 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003776:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <osKernelInitialize+0x44>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800377e:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <osKernelInitialize+0x44>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003784:	2300      	movs	r3, #0
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	e002      	b.n	8003790 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003790:	687b      	ldr	r3, [r7, #4]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	200001fc 	.word	0x200001fc

080037a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037aa:	f3ef 8305 	mrs	r3, IPSR
 80037ae:	603b      	str	r3, [r7, #0]
  return(result);
 80037b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <osKernelStart+0x1a>
    stat = osErrorISR;
 80037b6:	f06f 0305 	mvn.w	r3, #5
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e010      	b.n	80037e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037be:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <osKernelStart+0x48>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d109      	bne.n	80037da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037c6:	f7ff ffbf 	bl	8003748 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ca:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <osKernelStart+0x48>)
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037d0:	f001 f892 	bl	80048f8 <vTaskStartScheduler>
      stat = osOK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	607b      	str	r3, [r7, #4]
 80037d8:	e002      	b.n	80037e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200001fc 	.word	0x200001fc

080037f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08e      	sub	sp, #56	@ 0x38
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003800:	f3ef 8305 	mrs	r3, IPSR
 8003804:	617b      	str	r3, [r7, #20]
  return(result);
 8003806:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003808:	2b00      	cmp	r3, #0
 800380a:	d17e      	bne.n	800390a <osThreadNew+0x11a>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07b      	beq.n	800390a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003812:	2380      	movs	r3, #128	@ 0x80
 8003814:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003816:	2318      	movs	r3, #24
 8003818:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d045      	beq.n	80038b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <osThreadNew+0x48>
        name = attr->name;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <osThreadNew+0x6e>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b38      	cmp	r3, #56	@ 0x38
 8003850:	d805      	bhi.n	800385e <osThreadNew+0x6e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <osThreadNew+0x72>
        return (NULL);
 800385e:	2300      	movs	r3, #0
 8003860:	e054      	b.n	800390c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <osThreadNew+0xa8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003880:	d90a      	bls.n	8003898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <osThreadNew+0xa8>
        mem = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e010      	b.n	80038ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <osThreadNew+0xca>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <osThreadNew+0xca>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <osThreadNew+0xca>
          mem = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e001      	b.n	80038ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d110      	bne.n	80038e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038c8:	9202      	str	r2, [sp, #8]
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fe1a 	bl	8004510 <xTaskCreateStatic>
 80038dc:	4603      	mov	r3, r0
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e013      	b.n	800390a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d110      	bne.n	800390a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fe68 	bl	80045d0 <xTaskCreate>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <osThreadNew+0x11a>
            hTask = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800390a:	693b      	ldr	r3, [r7, #16]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3728      	adds	r7, #40	@ 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800391c:	f3ef 8305 	mrs	r3, IPSR
 8003920:	60bb      	str	r3, [r7, #8]
  return(result);
 8003922:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <osDelay+0x1c>
    stat = osErrorISR;
 8003928:	f06f 0305 	mvn.w	r3, #5
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e007      	b.n	8003940 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <osDelay+0x2c>
      vTaskDelay(ticks);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 ffa6 	bl	800488c <vTaskDelay>
    }
  }

  return (stat);
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a07      	ldr	r2, [pc, #28]	@ (8003978 <vApplicationGetIdleTaskMemory+0x2c>)
 800395c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4a06      	ldr	r2, [pc, #24]	@ (800397c <vApplicationGetIdleTaskMemory+0x30>)
 8003962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	@ 0x80
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000200 	.word	0x20000200
 800397c:	200002a8 	.word	0x200002a8

08003980 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <vApplicationGetTimerTaskMemory+0x2c>)
 8003990:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <vApplicationGetTimerTaskMemory+0x30>)
 8003996:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	200004a8 	.word	0x200004a8
 80039b0:	20000550 	.word	0x20000550

080039b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f103 0208 	add.w	r2, r3, #8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f04f 32ff 	mov.w	r2, #4294967295
 80039cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 0208 	add.w	r2, r3, #8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0208 	add.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d103      	bne.n	8003a76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e00c      	b.n	8003a90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e002      	b.n	8003a84 <vListInsert+0x2e>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d2f6      	bcs.n	8003a7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6892      	ldr	r2, [r2, #8]
 8003ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6852      	ldr	r2, [r2, #4]
 8003ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d103      	bne.n	8003afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1e5a      	subs	r2, r3, #1
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b48:	f002 f8a6 	bl	8005c98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	441a      	add	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	22ff      	movs	r2, #255	@ 0xff
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	22ff      	movs	r2, #255	@ 0xff
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d114      	bne.n	8003bc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01a      	beq.n	8003bdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3310      	adds	r3, #16
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f942 	bl	8004e34 <xTaskRemoveFromEventList>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <xQueueGenericReset+0xd0>)
 8003bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	e009      	b.n	8003bdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3310      	adds	r3, #16
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fef1 	bl	80039b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3324      	adds	r3, #36	@ 0x24
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff feec 	bl	80039b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bdc:	f002 f88e 	bl	8005cfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08e      	sub	sp, #56	@ 0x38
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c16:	bf00      	nop
 8003c18:	bf00      	nop
 8003c1a:	e7fd      	b.n	8003c18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	e7fd      	b.n	8003c36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <xQueueGenericCreateStatic+0x56>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <xQueueGenericCreateStatic+0x5a>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <xQueueGenericCreateStatic+0x5c>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	623b      	str	r3, [r7, #32]
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <xQueueGenericCreateStatic+0x84>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <xQueueGenericCreateStatic+0x88>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <xQueueGenericCreateStatic+0x8a>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	61fb      	str	r3, [r7, #28]
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	e7fd      	b.n	8003c92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c96:	2350      	movs	r3, #80	@ 0x50
 8003c98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b50      	cmp	r3, #80	@ 0x50
 8003c9e:	d00b      	beq.n	8003cb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	61bb      	str	r3, [r7, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f805 	bl	8003cea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3730      	adds	r7, #48	@ 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d18:	2101      	movs	r1, #1
 8003d1a:	69b8      	ldr	r0, [r7, #24]
 8003d1c:	f7ff fefe 	bl	8003b1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	@ 0x38
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <xQueueGenericSend+0x34>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d103      	bne.n	8003d72 <xQueueGenericSend+0x42>
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <xQueueGenericSend+0x46>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <xQueueGenericSend+0x48>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <xQueueGenericSend+0x64>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d103      	bne.n	8003da2 <xQueueGenericSend+0x72>
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <xQueueGenericSend+0x76>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <xQueueGenericSend+0x78>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <xQueueGenericSend+0x94>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc4:	f001 f9fc 	bl	80051c0 <xTaskGetSchedulerState>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xQueueGenericSend+0xa4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueGenericSend+0xa8>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <xQueueGenericSend+0xaa>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <xQueueGenericSend+0xc6>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	61fb      	str	r3, [r7, #28]
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	e7fd      	b.n	8003df2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df6:	f001 ff4f 	bl	8005c98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <xQueueGenericSend+0xdc>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d129      	bne.n	8003e60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e12:	f000 fa0f 	bl	8004234 <prvCopyDataToQueue>
 8003e16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	3324      	adds	r3, #36	@ 0x24
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f805 	bl	8004e34 <xTaskRemoveFromEventList>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e30:	4b3f      	ldr	r3, [pc, #252]	@ (8003f30 <xQueueGenericSend+0x200>)
 8003e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	e00a      	b.n	8003e58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e48:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <xQueueGenericSend+0x200>)
 8003e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e58:	f001 ff50 	bl	8005cfc <vPortExitCritical>
				return pdPASS;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e063      	b.n	8003f28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e66:	f001 ff49 	bl	8005cfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e05c      	b.n	8003f28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 f83f 	bl	8004efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e82:	f001 ff3b 	bl	8005cfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e86:	f000 fda7 	bl	80049d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e8a:	f001 ff05 	bl	8005c98 <vPortEnterCritical>
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d103      	bne.n	8003ea4 <xQueueGenericSend+0x174>
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eaa:	b25b      	sxtb	r3, r3
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d103      	bne.n	8003eba <xQueueGenericSend+0x18a>
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eba:	f001 ff1f 	bl	8005cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ebe:	1d3a      	adds	r2, r7, #4
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 f82e 	bl	8004f28 <xTaskCheckForTimeOut>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d124      	bne.n	8003f1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ed2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ed4:	f000 faa6 	bl	8004424 <prvIsQueueFull>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d018      	beq.n	8003f10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	3310      	adds	r3, #16
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 ff52 	bl	8004d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eee:	f000 fa31 	bl	8004354 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ef2:	f000 fd7f 	bl	80049f4 <xTaskResumeAll>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f47f af7c 	bne.w	8003df6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003efe:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <xQueueGenericSend+0x200>)
 8003f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	e772      	b.n	8003df6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f12:	f000 fa1f 	bl	8004354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f16:	f000 fd6d 	bl	80049f4 <xTaskResumeAll>
 8003f1a:	e76c      	b.n	8003df6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f1e:	f000 fa19 	bl	8004354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f22:	f000 fd67 	bl	80049f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3738      	adds	r7, #56	@ 0x38
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b090      	sub	sp, #64	@ 0x40
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <xQueueGenericSendFromISR+0x3e>
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <xQueueGenericSendFromISR+0x42>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <xQueueGenericSendFromISR+0x44>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d103      	bne.n	8003fa2 <xQueueGenericSendFromISR+0x6e>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <xQueueGenericSendFromISR+0x72>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <xQueueGenericSendFromISR+0x74>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	623b      	str	r3, [r7, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fc4:	f001 ff48 	bl	8005e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fc8:	f3ef 8211 	mrs	r2, BASEPRI
 8003fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	61fa      	str	r2, [r7, #28]
 8003fde:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <xQueueGenericSendFromISR+0xc2>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d12f      	bne.n	8004056 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ffc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800400c:	f000 f912 	bl	8004234 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004010:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d112      	bne.n	8004040 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	3324      	adds	r3, #36	@ 0x24
 8004026:	4618      	mov	r0, r3
 8004028:	f000 ff04 	bl	8004e34 <xTaskRemoveFromEventList>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00e      	beq.n	8004050 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004040:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004044:	3301      	adds	r3, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	b25a      	sxtb	r2, r3
 800404a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004050:	2301      	movs	r3, #1
 8004052:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004054:	e001      	b.n	800405a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004056:	2300      	movs	r3, #0
 8004058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004064:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004068:	4618      	mov	r0, r3
 800406a:	3740      	adds	r7, #64	@ 0x40
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	@ 0x30
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800407c:	2300      	movs	r3, #0
 800407e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <xQueueReceive+0x32>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	623b      	str	r3, [r7, #32]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <xQueueReceive+0x40>
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <xQueueReceive+0x44>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <xQueueReceive+0x46>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <xQueueReceive+0x62>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	61fb      	str	r3, [r7, #28]
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	e7fd      	b.n	80040ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040d2:	f001 f875 	bl	80051c0 <xTaskGetSchedulerState>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <xQueueReceive+0x72>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <xQueueReceive+0x76>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <xQueueReceive+0x78>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <xQueueReceive+0x94>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	61bb      	str	r3, [r7, #24]
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004104:	f001 fdc8 	bl	8005c98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01f      	beq.n	8004154 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004118:	f000 f8f6 	bl	8004308 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	1e5a      	subs	r2, r3, #1
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00f      	beq.n	800414c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fe7f 	bl	8004e34 <xTaskRemoveFromEventList>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800413c:	4b3c      	ldr	r3, [pc, #240]	@ (8004230 <xQueueReceive+0x1c0>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800414c:	f001 fdd6 	bl	8005cfc <vPortExitCritical>
				return pdPASS;
 8004150:	2301      	movs	r3, #1
 8004152:	e069      	b.n	8004228 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800415a:	f001 fdcf 	bl	8005cfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800415e:	2300      	movs	r3, #0
 8004160:	e062      	b.n	8004228 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fec5 	bl	8004efc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004172:	2301      	movs	r3, #1
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004176:	f001 fdc1 	bl	8005cfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800417a:	f000 fc2d 	bl	80049d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800417e:	f001 fd8b 	bl	8005c98 <vPortEnterCritical>
 8004182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004184:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004188:	b25b      	sxtb	r3, r3
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d103      	bne.n	8004198 <xQueueReceive+0x128>
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800419e:	b25b      	sxtb	r3, r3
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d103      	bne.n	80041ae <xQueueReceive+0x13e>
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041ae:	f001 fda5 	bl	8005cfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041b2:	1d3a      	adds	r2, r7, #4
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 feb4 	bl	8004f28 <xTaskCheckForTimeOut>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d123      	bne.n	800420e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041c8:	f000 f916 	bl	80043f8 <prvIsQueueEmpty>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	3324      	adds	r3, #36	@ 0x24
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4611      	mov	r1, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fdd8 	bl	8004d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041e2:	f000 f8b7 	bl	8004354 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041e6:	f000 fc05 	bl	80049f4 <xTaskResumeAll>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d189      	bne.n	8004104 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80041f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <xQueueReceive+0x1c0>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	e780      	b.n	8004104 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004204:	f000 f8a6 	bl	8004354 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004208:	f000 fbf4 	bl	80049f4 <xTaskResumeAll>
 800420c:	e77a      	b.n	8004104 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800420e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004210:	f000 f8a0 	bl	8004354 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004214:	f000 fbee 	bl	80049f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800421a:	f000 f8ed 	bl	80043f8 <prvIsQueueEmpty>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	f43f af6f 	beq.w	8004104 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004226:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004228:	4618      	mov	r0, r3
 800422a:	3730      	adds	r7, #48	@ 0x30
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d14d      	bne.n	80042f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 ffcc 	bl	80051fc <xTaskPriorityDisinherit>
 8004264:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	e043      	b.n	80042f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d119      	bne.n	80042a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6858      	ldr	r0, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	461a      	mov	r2, r3
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	f002 f8d8 	bl	8006434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	441a      	add	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	429a      	cmp	r2, r3
 800429c:	d32b      	bcc.n	80042f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	e026      	b.n	80042f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68d8      	ldr	r0, [r3, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	461a      	mov	r2, r3
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	f002 f8be 	bl	8006434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	425b      	negs	r3, r3
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d207      	bcs.n	80042e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	425b      	negs	r3, r3
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d105      	bne.n	80042f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80042fe:	697b      	ldr	r3, [r7, #20]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d303      	bcc.n	800433c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68d9      	ldr	r1, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	461a      	mov	r2, r3
 8004346:	6838      	ldr	r0, [r7, #0]
 8004348:	f002 f874 	bl	8006434 <memcpy>
	}
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800435c:	f001 fc9c 	bl	8005c98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004366:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004368:	e011      	b.n	800438e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3324      	adds	r3, #36	@ 0x24
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fd5c 	bl	8004e34 <xTaskRemoveFromEventList>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004382:	f000 fe35 	bl	8004ff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	3b01      	subs	r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	dce9      	bgt.n	800436a <prvUnlockQueue+0x16>
 8004396:	e000      	b.n	800439a <prvUnlockQueue+0x46>
					break;
 8004398:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	22ff      	movs	r2, #255	@ 0xff
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043a2:	f001 fcab 	bl	8005cfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043a6:	f001 fc77 	bl	8005c98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043b2:	e011      	b.n	80043d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d012      	beq.n	80043e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3310      	adds	r3, #16
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fd37 	bl	8004e34 <xTaskRemoveFromEventList>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043cc:	f000 fe10 	bl	8004ff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043d0:	7bbb      	ldrb	r3, [r7, #14]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dce9      	bgt.n	80043b4 <prvUnlockQueue+0x60>
 80043e0:	e000      	b.n	80043e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	22ff      	movs	r2, #255	@ 0xff
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80043ec:	f001 fc86 	bl	8005cfc <vPortExitCritical>
}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004400:	f001 fc4a 	bl	8005c98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800440c:	2301      	movs	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e001      	b.n	8004416 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004416:	f001 fc71 	bl	8005cfc <vPortExitCritical>

	return xReturn;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800442c:	f001 fc34 	bl	8005c98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	429a      	cmp	r2, r3
 800443a:	d102      	bne.n	8004442 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800443c:	2301      	movs	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e001      	b.n	8004446 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004446:	f001 fc59 	bl	8005cfc <vPortExitCritical>

	return xReturn;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	e014      	b.n	800448e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004464:	4a0f      	ldr	r2, [pc, #60]	@ (80044a4 <vQueueAddToRegistry+0x50>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004470:	490c      	ldr	r1, [pc, #48]	@ (80044a4 <vQueueAddToRegistry+0x50>)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <vQueueAddToRegistry+0x50>)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004486:	e006      	b.n	8004496 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b07      	cmp	r3, #7
 8004492:	d9e7      	bls.n	8004464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000950 	.word	0x20000950

080044a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044b8:	f001 fbee 	bl	8005c98 <vPortEnterCritical>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d103      	bne.n	80044d2 <vQueueWaitForMessageRestricted+0x2a>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d103      	bne.n	80044e8 <vQueueWaitForMessageRestricted+0x40>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e8:	f001 fc08 	bl	8005cfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3324      	adds	r3, #36	@ 0x24
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fc6d 	bl	8004ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004502:	6978      	ldr	r0, [r7, #20]
 8004504:	f7ff ff26 	bl	8004354 <prvUnlockQueue>
	}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08e      	sub	sp, #56	@ 0x38
 8004514:	af04      	add	r7, sp, #16
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	623b      	str	r3, [r7, #32]
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	61fb      	str	r3, [r7, #28]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800455a:	23a8      	movs	r3, #168	@ 0xa8
 800455c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2ba8      	cmp	r3, #168	@ 0xa8
 8004562:	d00b      	beq.n	800457c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	61bb      	str	r3, [r7, #24]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800457c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01e      	beq.n	80045c2 <xTaskCreateStatic+0xb2>
 8004584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01b      	beq.n	80045c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800458a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	2202      	movs	r2, #2
 8004598:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800459c:	2300      	movs	r3, #0
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	9302      	str	r3, [sp, #8]
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f851 	bl	800465c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045bc:	f000 f8f6 	bl	80047ac <prvAddNewTaskToReadyList>
 80045c0:	e001      	b.n	80045c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045c6:	697b      	ldr	r3, [r7, #20]
	}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3728      	adds	r7, #40	@ 0x28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af04      	add	r7, sp, #16
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fc79 	bl	8005edc <pvPortMalloc>
 80045ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00e      	beq.n	8004610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045f2:	20a8      	movs	r0, #168	@ 0xa8
 80045f4:	f001 fc72 	bl	8005edc <pvPortMalloc>
 80045f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30
 8004606:	e005      	b.n	8004614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004608:	6978      	ldr	r0, [r7, #20]
 800460a:	f001 fd35 	bl	8006078 <vPortFree>
 800460e:	e001      	b.n	8004614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	2300      	movs	r3, #0
 8004626:	9303      	str	r3, [sp, #12]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	9302      	str	r3, [sp, #8]
 800462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f80f 	bl	800465c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800463e:	69f8      	ldr	r0, [r7, #28]
 8004640:	f000 f8b4 	bl	80047ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004644:	2301      	movs	r3, #1
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	e002      	b.n	8004650 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295
 800464e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004650:	69bb      	ldr	r3, [r7, #24]
	}
 8004652:	4618      	mov	r0, r3
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	461a      	mov	r2, r3
 8004674:	21a5      	movs	r1, #165	@ 0xa5
 8004676:	f001 fe53 	bl	8006320 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004684:	3b01      	subs	r3, #1
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f023 0307 	bic.w	r3, r3, #7
 8004692:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	617b      	str	r3, [r7, #20]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01f      	beq.n	80046fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e012      	b.n	80046e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	7819      	ldrb	r1, [r3, #0]
 80046ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	3334      	adds	r3, #52	@ 0x34
 80046d2:	460a      	mov	r2, r1
 80046d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3301      	adds	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d9e9      	bls.n	80046c2 <prvInitialiseNewTask+0x66>
 80046ee:	e000      	b.n	80046f2 <prvInitialiseNewTask+0x96>
			{
				break;
 80046f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046fa:	e003      	b.n	8004704 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	2b37      	cmp	r3, #55	@ 0x37
 8004708:	d901      	bls.n	800470e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800470a:	2337      	movs	r3, #55	@ 0x37
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004712:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004718:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	2200      	movs	r2, #0
 800471e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff f965 	bl	80039f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	3318      	adds	r3, #24
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff f960 	bl	80039f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004738:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004742:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004748:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	2200      	movs	r2, #0
 800474e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	2200      	movs	r2, #0
 8004756:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	3354      	adds	r3, #84	@ 0x54
 800475e:	224c      	movs	r2, #76	@ 0x4c
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f001 fddc 	bl	8006320 <memset>
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	4a0d      	ldr	r2, [pc, #52]	@ (80047a0 <prvInitialiseNewTask+0x144>)
 800476c:	659a      	str	r2, [r3, #88]	@ 0x58
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <prvInitialiseNewTask+0x148>)
 8004772:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	4a0c      	ldr	r2, [pc, #48]	@ (80047a8 <prvInitialiseNewTask+0x14c>)
 8004778:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	68f9      	ldr	r1, [r7, #12]
 800477e:	69b8      	ldr	r0, [r7, #24]
 8004780:	f001 f95a 	bl	8005a38 <pxPortInitialiseStack>
 8004784:	4602      	mov	r2, r0
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800478a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004796:	bf00      	nop
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20004be4 	.word	0x20004be4
 80047a4:	20004c4c 	.word	0x20004c4c
 80047a8:	20004cb4 	.word	0x20004cb4

080047ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047b4:	f001 fa70 	bl	8005c98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004870 <prvAddNewTaskToReadyList+0xc4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	4a2c      	ldr	r2, [pc, #176]	@ (8004870 <prvAddNewTaskToReadyList+0xc4>)
 80047c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004874 <prvAddNewTaskToReadyList+0xc8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004874 <prvAddNewTaskToReadyList+0xc8>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047d0:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <prvAddNewTaskToReadyList+0xc4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d110      	bne.n	80047fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047d8:	f000 fc2e 	bl	8005038 <prvInitialiseTaskLists>
 80047dc:	e00d      	b.n	80047fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047de:	4b26      	ldr	r3, [pc, #152]	@ (8004878 <prvAddNewTaskToReadyList+0xcc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047e6:	4b23      	ldr	r3, [pc, #140]	@ (8004874 <prvAddNewTaskToReadyList+0xc8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d802      	bhi.n	80047fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004874 <prvAddNewTaskToReadyList+0xc8>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047fa:	4b20      	ldr	r3, [pc, #128]	@ (800487c <prvAddNewTaskToReadyList+0xd0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3301      	adds	r3, #1
 8004800:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <prvAddNewTaskToReadyList+0xd0>)
 8004802:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004804:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <prvAddNewTaskToReadyList+0xd0>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <prvAddNewTaskToReadyList+0xd4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d903      	bls.n	8004820 <prvAddNewTaskToReadyList+0x74>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4a18      	ldr	r2, [pc, #96]	@ (8004880 <prvAddNewTaskToReadyList+0xd4>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <prvAddNewTaskToReadyList+0xd8>)
 800482e:	441a      	add	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7ff f8e9 	bl	8003a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800483c:	f001 fa5e 	bl	8005cfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004840:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <prvAddNewTaskToReadyList+0xcc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00e      	beq.n	8004866 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004848:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <prvAddNewTaskToReadyList+0xc8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d207      	bcs.n	8004866 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <prvAddNewTaskToReadyList+0xdc>)
 8004858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000e64 	.word	0x20000e64
 8004874:	20000990 	.word	0x20000990
 8004878:	20000e70 	.word	0x20000e70
 800487c:	20000e80 	.word	0x20000e80
 8004880:	20000e6c 	.word	0x20000e6c
 8004884:	20000994 	.word	0x20000994
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800489e:	4b14      	ldr	r3, [pc, #80]	@ (80048f0 <vTaskDelay+0x64>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <vTaskDelay+0x32>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	60bb      	str	r3, [r7, #8]
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048be:	f000 f88b 	bl	80049d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048c2:	2100      	movs	r1, #0
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fd09 	bl	80052dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048ca:	f000 f893 	bl	80049f4 <xTaskResumeAll>
 80048ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <vTaskDelay+0x68>)
 80048d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000e8c 	.word	0x20000e8c
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004906:	463a      	mov	r2, r7
 8004908:	1d39      	adds	r1, r7, #4
 800490a:	f107 0308 	add.w	r3, r7, #8
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff f81c 	bl	800394c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	9202      	str	r2, [sp, #8]
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	2300      	movs	r3, #0
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2300      	movs	r3, #0
 8004924:	460a      	mov	r2, r1
 8004926:	4924      	ldr	r1, [pc, #144]	@ (80049b8 <vTaskStartScheduler+0xc0>)
 8004928:	4824      	ldr	r0, [pc, #144]	@ (80049bc <vTaskStartScheduler+0xc4>)
 800492a:	f7ff fdf1 	bl	8004510 <xTaskCreateStatic>
 800492e:	4603      	mov	r3, r0
 8004930:	4a23      	ldr	r2, [pc, #140]	@ (80049c0 <vTaskStartScheduler+0xc8>)
 8004932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004934:	4b22      	ldr	r3, [pc, #136]	@ (80049c0 <vTaskStartScheduler+0xc8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e001      	b.n	8004946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d102      	bne.n	8004952 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800494c:	f000 fd1a 	bl	8005384 <xTimerCreateTimerTask>
 8004950:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d11b      	bne.n	8004990 <vTaskStartScheduler+0x98>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	613b      	str	r3, [r7, #16]
}
 800496a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800496c:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <vTaskStartScheduler+0xcc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3354      	adds	r3, #84	@ 0x54
 8004972:	4a15      	ldr	r2, [pc, #84]	@ (80049c8 <vTaskStartScheduler+0xd0>)
 8004974:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <vTaskStartScheduler+0xd4>)
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <vTaskStartScheduler+0xd8>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004984:	4b13      	ldr	r3, [pc, #76]	@ (80049d4 <vTaskStartScheduler+0xdc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800498a:	f001 f8e1 	bl	8005b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800498e:	e00f      	b.n	80049b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d10b      	bne.n	80049b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <vTaskStartScheduler+0xb4>
}
 80049b0:	bf00      	nop
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08006d68 	.word	0x08006d68
 80049bc:	08005009 	.word	0x08005009
 80049c0:	20000e88 	.word	0x20000e88
 80049c4:	20000990 	.word	0x20000990
 80049c8:	2000005c 	.word	0x2000005c
 80049cc:	20000e84 	.word	0x20000e84
 80049d0:	20000e70 	.word	0x20000e70
 80049d4:	20000e68 	.word	0x20000e68

080049d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <vTaskSuspendAll+0x18>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	4a03      	ldr	r2, [pc, #12]	@ (80049f0 <vTaskSuspendAll+0x18>)
 80049e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	20000e8c 	.word	0x20000e8c

080049f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a02:	4b42      	ldr	r3, [pc, #264]	@ (8004b0c <xTaskResumeAll+0x118>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	603b      	str	r3, [r7, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a22:	f001 f939 	bl	8005c98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a26:	4b39      	ldr	r3, [pc, #228]	@ (8004b0c <xTaskResumeAll+0x118>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4a37      	ldr	r2, [pc, #220]	@ (8004b0c <xTaskResumeAll+0x118>)
 8004a2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a30:	4b36      	ldr	r3, [pc, #216]	@ (8004b0c <xTaskResumeAll+0x118>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d162      	bne.n	8004afe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a38:	4b35      	ldr	r3, [pc, #212]	@ (8004b10 <xTaskResumeAll+0x11c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d05e      	beq.n	8004afe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a40:	e02f      	b.n	8004aa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a42:	4b34      	ldr	r3, [pc, #208]	@ (8004b14 <xTaskResumeAll+0x120>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3318      	adds	r3, #24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff f83a 	bl	8003ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff f835 	bl	8003ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a62:	4b2d      	ldr	r3, [pc, #180]	@ (8004b18 <xTaskResumeAll+0x124>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d903      	bls.n	8004a72 <xTaskResumeAll+0x7e>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b18 <xTaskResumeAll+0x124>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4a27      	ldr	r2, [pc, #156]	@ (8004b1c <xTaskResumeAll+0x128>)
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fe ffc0 	bl	8003a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a92:	4b23      	ldr	r3, [pc, #140]	@ (8004b20 <xTaskResumeAll+0x12c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004a9c:	4b21      	ldr	r3, [pc, #132]	@ (8004b24 <xTaskResumeAll+0x130>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b14 <xTaskResumeAll+0x120>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1cb      	bne.n	8004a42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ab0:	f000 fb66 	bl	8005180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b28 <xTaskResumeAll+0x134>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ac0:	f000 f846 	bl	8004b50 <xTaskIncrementTick>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004aca:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <xTaskResumeAll+0x130>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f1      	bne.n	8004ac0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <xTaskResumeAll+0x134>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <xTaskResumeAll+0x130>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <xTaskResumeAll+0x138>)
 8004af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004afe:	f001 f8fd 	bl	8005cfc <vPortExitCritical>

	return xAlreadyYielded;
 8004b02:	68bb      	ldr	r3, [r7, #8]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000e8c 	.word	0x20000e8c
 8004b10:	20000e64 	.word	0x20000e64
 8004b14:	20000e24 	.word	0x20000e24
 8004b18:	20000e6c 	.word	0x20000e6c
 8004b1c:	20000994 	.word	0x20000994
 8004b20:	20000990 	.word	0x20000990
 8004b24:	20000e78 	.word	0x20000e78
 8004b28:	20000e74 	.word	0x20000e74
 8004b2c:	e000ed04 	.word	0xe000ed04

08004b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b36:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <xTaskGetTickCount+0x1c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000e68 	.word	0x20000e68

08004b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c98 <xTaskIncrementTick+0x148>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 8090 	bne.w	8004c84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b64:	4b4d      	ldr	r3, [pc, #308]	@ (8004c9c <xTaskIncrementTick+0x14c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c9c <xTaskIncrementTick+0x14c>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d121      	bne.n	8004bbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b78:	4b49      	ldr	r3, [pc, #292]	@ (8004ca0 <xTaskIncrementTick+0x150>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	603b      	str	r3, [r7, #0]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <xTaskIncrementTick+0x46>
 8004b9a:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <xTaskIncrementTick+0x150>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	4b40      	ldr	r3, [pc, #256]	@ (8004ca4 <xTaskIncrementTick+0x154>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca0 <xTaskIncrementTick+0x150>)
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca4 <xTaskIncrementTick+0x154>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca8 <xTaskIncrementTick+0x158>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca8 <xTaskIncrementTick+0x158>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	f000 fae2 	bl	8005180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <xTaskIncrementTick+0x15c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d349      	bcc.n	8004c5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bc6:	4b36      	ldr	r3, [pc, #216]	@ (8004ca0 <xTaskIncrementTick+0x150>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd0:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <xTaskIncrementTick+0x15c>)
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	601a      	str	r2, [r3, #0]
					break;
 8004bd8:	e03f      	b.n	8004c5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bda:	4b31      	ldr	r3, [pc, #196]	@ (8004ca0 <xTaskIncrementTick+0x150>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d203      	bcs.n	8004bfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8004cac <xTaskIncrementTick+0x15c>)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004bf8:	e02f      	b.n	8004c5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe ff62 	bl	8003ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe ff59 	bl	8003ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1a:	4b25      	ldr	r3, [pc, #148]	@ (8004cb0 <xTaskIncrementTick+0x160>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d903      	bls.n	8004c2a <xTaskIncrementTick+0xda>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a22      	ldr	r2, [pc, #136]	@ (8004cb0 <xTaskIncrementTick+0x160>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb4 <xTaskIncrementTick+0x164>)
 8004c38:	441a      	add	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe fee4 	bl	8003a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <xTaskIncrementTick+0x168>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d3b8      	bcc.n	8004bc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c58:	e7b5      	b.n	8004bc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c5a:	4b17      	ldr	r3, [pc, #92]	@ (8004cb8 <xTaskIncrementTick+0x168>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c60:	4914      	ldr	r1, [pc, #80]	@ (8004cb4 <xTaskIncrementTick+0x164>)
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d901      	bls.n	8004c76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c76:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <xTaskIncrementTick+0x16c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e004      	b.n	8004c8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c84:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <xTaskIncrementTick+0x170>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc0 <xTaskIncrementTick+0x170>)
 8004c8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c8e:	697b      	ldr	r3, [r7, #20]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000e8c 	.word	0x20000e8c
 8004c9c:	20000e68 	.word	0x20000e68
 8004ca0:	20000e1c 	.word	0x20000e1c
 8004ca4:	20000e20 	.word	0x20000e20
 8004ca8:	20000e7c 	.word	0x20000e7c
 8004cac:	20000e84 	.word	0x20000e84
 8004cb0:	20000e6c 	.word	0x20000e6c
 8004cb4:	20000994 	.word	0x20000994
 8004cb8:	20000990 	.word	0x20000990
 8004cbc:	20000e78 	.word	0x20000e78
 8004cc0:	20000e74 	.word	0x20000e74

08004cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cca:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <vTaskSwitchContext+0xb4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d7c <vTaskSwitchContext+0xb8>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cd8:	e047      	b.n	8004d6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004cda:	4b28      	ldr	r3, [pc, #160]	@ (8004d7c <vTaskSwitchContext+0xb8>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ce0:	4b27      	ldr	r3, [pc, #156]	@ (8004d80 <vTaskSwitchContext+0xbc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e011      	b.n	8004d0c <vTaskSwitchContext+0x48>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <vTaskSwitchContext+0x42>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	e7fd      	b.n	8004d02 <vTaskSwitchContext+0x3e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	491d      	ldr	r1, [pc, #116]	@ (8004d84 <vTaskSwitchContext+0xc0>)
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0e3      	beq.n	8004ce8 <vTaskSwitchContext+0x24>
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4a16      	ldr	r2, [pc, #88]	@ (8004d84 <vTaskSwitchContext+0xc0>)
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3308      	adds	r3, #8
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d104      	bne.n	8004d50 <vTaskSwitchContext+0x8c>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	605a      	str	r2, [r3, #4]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	@ (8004d88 <vTaskSwitchContext+0xc4>)
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	@ (8004d80 <vTaskSwitchContext+0xbc>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d60:	4b09      	ldr	r3, [pc, #36]	@ (8004d88 <vTaskSwitchContext+0xc4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3354      	adds	r3, #84	@ 0x54
 8004d66:	4a09      	ldr	r2, [pc, #36]	@ (8004d8c <vTaskSwitchContext+0xc8>)
 8004d68:	6013      	str	r3, [r2, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000e8c 	.word	0x20000e8c
 8004d7c:	20000e78 	.word	0x20000e78
 8004d80:	20000e6c 	.word	0x20000e6c
 8004d84:	20000994 	.word	0x20000994
 8004d88:	20000990 	.word	0x20000990
 8004d8c:	2000005c 	.word	0x2000005c

08004d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004db8:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <vTaskPlaceOnEventList+0x48>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3318      	adds	r3, #24
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fe fe48 	bl	8003a56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	6838      	ldr	r0, [r7, #0]
 8004dca:	f000 fa87 	bl	80052dc <prvAddCurrentTaskToDelayedList>
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000990 	.word	0x20000990

08004ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	617b      	str	r3, [r7, #20]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e06:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7fe fdfd 	bl	8003a0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	68b8      	ldr	r0, [r7, #8]
 8004e24:	f000 fa5a 	bl	80052dc <prvAddCurrentTaskToDelayedList>
	}
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000990 	.word	0x20000990

08004e34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60fb      	str	r3, [r7, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3318      	adds	r3, #24
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fe2e 	bl	8003ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <xTaskRemoveFromEventList+0xb0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11d      	bne.n	8004eb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fe fe25 	bl	8003ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e82:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <xTaskRemoveFromEventList+0xb4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d903      	bls.n	8004e92 <xTaskRemoveFromEventList+0x5e>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <xTaskRemoveFromEventList+0xb4>)
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4a13      	ldr	r2, [pc, #76]	@ (8004eec <xTaskRemoveFromEventList+0xb8>)
 8004ea0:	441a      	add	r2, r3
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fe fdb0 	bl	8003a0e <vListInsertEnd>
 8004eae:	e005      	b.n	8004ebc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3318      	adds	r3, #24
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	480e      	ldr	r0, [pc, #56]	@ (8004ef0 <xTaskRemoveFromEventList+0xbc>)
 8004eb8:	f7fe fda9 	bl	8003a0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <xTaskRemoveFromEventList+0xc0>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d905      	bls.n	8004ed6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <xTaskRemoveFromEventList+0xc4>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e001      	b.n	8004eda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004eda:	697b      	ldr	r3, [r7, #20]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000e8c 	.word	0x20000e8c
 8004ee8:	20000e6c 	.word	0x20000e6c
 8004eec:	20000994 	.word	0x20000994
 8004ef0:	20000e24 	.word	0x20000e24
 8004ef4:	20000990 	.word	0x20000990
 8004ef8:	20000e78 	.word	0x20000e78

08004efc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <vTaskInternalSetTimeOutState+0x24>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <vTaskInternalSetTimeOutState+0x28>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	605a      	str	r2, [r3, #4]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	20000e7c 	.word	0x20000e7c
 8004f24:	20000e68 	.word	0x20000e68

08004f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	613b      	str	r3, [r7, #16]
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60fb      	str	r3, [r7, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004f6e:	f000 fe93 	bl	8005c98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f72:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <xTaskCheckForTimeOut+0xc0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d102      	bne.n	8004f92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e023      	b.n	8004fda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b15      	ldr	r3, [pc, #84]	@ (8004fec <xTaskCheckForTimeOut+0xc4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d007      	beq.n	8004fae <xTaskCheckForTimeOut+0x86>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	e015      	b.n	8004fda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d20b      	bcs.n	8004fd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff99 	bl	8004efc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e004      	b.n	8004fda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fda:	f000 fe8f 	bl	8005cfc <vPortExitCritical>

	return xReturn;
 8004fde:	69fb      	ldr	r3, [r7, #28]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000e68 	.word	0x20000e68
 8004fec:	20000e7c 	.word	0x20000e7c

08004ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	@ (8005004 <vTaskMissedYield+0x14>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	20000e78 	.word	0x20000e78

08005008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005010:	f000 f852 	bl	80050b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005014:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <prvIdleTask+0x28>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d9f9      	bls.n	8005010 <prvIdleTask+0x8>
			{
				taskYIELD();
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <prvIdleTask+0x2c>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800502c:	e7f0      	b.n	8005010 <prvIdleTask+0x8>
 800502e:	bf00      	nop
 8005030:	20000994 	.word	0x20000994
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
 8005042:	e00c      	b.n	800505e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4a12      	ldr	r2, [pc, #72]	@ (8005098 <prvInitialiseTaskLists+0x60>)
 8005050:	4413      	add	r3, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fcae 	bl	80039b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3301      	adds	r3, #1
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b37      	cmp	r3, #55	@ 0x37
 8005062:	d9ef      	bls.n	8005044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005064:	480d      	ldr	r0, [pc, #52]	@ (800509c <prvInitialiseTaskLists+0x64>)
 8005066:	f7fe fca5 	bl	80039b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800506a:	480d      	ldr	r0, [pc, #52]	@ (80050a0 <prvInitialiseTaskLists+0x68>)
 800506c:	f7fe fca2 	bl	80039b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005070:	480c      	ldr	r0, [pc, #48]	@ (80050a4 <prvInitialiseTaskLists+0x6c>)
 8005072:	f7fe fc9f 	bl	80039b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005076:	480c      	ldr	r0, [pc, #48]	@ (80050a8 <prvInitialiseTaskLists+0x70>)
 8005078:	f7fe fc9c 	bl	80039b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800507c:	480b      	ldr	r0, [pc, #44]	@ (80050ac <prvInitialiseTaskLists+0x74>)
 800507e:	f7fe fc99 	bl	80039b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <prvInitialiseTaskLists+0x78>)
 8005084:	4a05      	ldr	r2, [pc, #20]	@ (800509c <prvInitialiseTaskLists+0x64>)
 8005086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005088:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <prvInitialiseTaskLists+0x7c>)
 800508a:	4a05      	ldr	r2, [pc, #20]	@ (80050a0 <prvInitialiseTaskLists+0x68>)
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000994 	.word	0x20000994
 800509c:	20000df4 	.word	0x20000df4
 80050a0:	20000e08 	.word	0x20000e08
 80050a4:	20000e24 	.word	0x20000e24
 80050a8:	20000e38 	.word	0x20000e38
 80050ac:	20000e50 	.word	0x20000e50
 80050b0:	20000e1c 	.word	0x20000e1c
 80050b4:	20000e20 	.word	0x20000e20

080050b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050be:	e019      	b.n	80050f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050c0:	f000 fdea 	bl	8005c98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c4:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <prvCheckTasksWaitingTermination+0x50>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fcf9 	bl	8003ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050d6:	4b0d      	ldr	r3, [pc, #52]	@ (800510c <prvCheckTasksWaitingTermination+0x54>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	4a0b      	ldr	r2, [pc, #44]	@ (800510c <prvCheckTasksWaitingTermination+0x54>)
 80050de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <prvCheckTasksWaitingTermination+0x58>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <prvCheckTasksWaitingTermination+0x58>)
 80050e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050ea:	f000 fe07 	bl	8005cfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f810 	bl	8005114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f4:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <prvCheckTasksWaitingTermination+0x58>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e1      	bne.n	80050c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000e38 	.word	0x20000e38
 800510c:	20000e64 	.word	0x20000e64
 8005110:	20000e4c 	.word	0x20000e4c

08005114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3354      	adds	r3, #84	@ 0x54
 8005120:	4618      	mov	r0, r3
 8005122:	f001 f905 	bl	8006330 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800512c:	2b00      	cmp	r3, #0
 800512e:	d108      	bne.n	8005142 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005134:	4618      	mov	r0, r3
 8005136:	f000 ff9f 	bl	8006078 <vPortFree>
				vPortFree( pxTCB );
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 ff9c 	bl	8006078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005140:	e019      	b.n	8005176 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005148:	2b01      	cmp	r3, #1
 800514a:	d103      	bne.n	8005154 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 ff93 	bl	8006078 <vPortFree>
	}
 8005152:	e010      	b.n	8005176 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800515a:	2b02      	cmp	r3, #2
 800515c:	d00b      	beq.n	8005176 <prvDeleteTCB+0x62>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	60fb      	str	r3, [r7, #12]
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	e7fd      	b.n	8005172 <prvDeleteTCB+0x5e>
	}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <prvResetNextTaskUnblockTime+0x38>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005190:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <prvResetNextTaskUnblockTime+0x3c>)
 8005192:	f04f 32ff 	mov.w	r2, #4294967295
 8005196:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005198:	e008      	b.n	80051ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <prvResetNextTaskUnblockTime+0x38>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4a04      	ldr	r2, [pc, #16]	@ (80051bc <prvResetNextTaskUnblockTime+0x3c>)
 80051aa:	6013      	str	r3, [r2, #0]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	20000e1c 	.word	0x20000e1c
 80051bc:	20000e84 	.word	0x20000e84

080051c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051c6:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <xTaskGetSchedulerState+0x34>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051ce:	2301      	movs	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	e008      	b.n	80051e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d4:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <xTaskGetSchedulerState+0x38>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051dc:	2302      	movs	r3, #2
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	e001      	b.n	80051e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051e6:	687b      	ldr	r3, [r7, #4]
	}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	20000e70 	.word	0x20000e70
 80051f8:	20000e8c 	.word	0x20000e8c

080051fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d058      	beq.n	80052c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005212:	4b2f      	ldr	r3, [pc, #188]	@ (80052d0 <xTaskPriorityDisinherit+0xd4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	429a      	cmp	r2, r3
 800521a:	d00b      	beq.n	8005234 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60fb      	str	r3, [r7, #12]
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	e7fd      	b.n	8005230 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60bb      	str	r3, [r7, #8]
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005266:	429a      	cmp	r2, r3
 8005268:	d02c      	beq.n	80052c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d128      	bne.n	80052c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fc26 	bl	8003ac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005294:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <xTaskPriorityDisinherit+0xd8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d903      	bls.n	80052a4 <xTaskPriorityDisinherit+0xa8>
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a0:	4a0c      	ldr	r2, [pc, #48]	@ (80052d4 <xTaskPriorityDisinherit+0xd8>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a09      	ldr	r2, [pc, #36]	@ (80052d8 <xTaskPriorityDisinherit+0xdc>)
 80052b2:	441a      	add	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fe fba7 	bl	8003a0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052c4:	697b      	ldr	r3, [r7, #20]
	}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000990 	.word	0x20000990
 80052d4:	20000e6c 	.word	0x20000e6c
 80052d8:	20000994 	.word	0x20000994

080052dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052e6:	4b21      	ldr	r3, [pc, #132]	@ (800536c <prvAddCurrentTaskToDelayedList+0x90>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ec:	4b20      	ldr	r3, [pc, #128]	@ (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fbe8 	bl	8003ac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fe:	d10a      	bne.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005306:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4819      	ldr	r0, [pc, #100]	@ (8005374 <prvAddCurrentTaskToDelayedList+0x98>)
 8005310:	f7fe fb7d 	bl	8003a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005314:	e026      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800531e:	4b14      	ldr	r3, [pc, #80]	@ (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	429a      	cmp	r2, r3
 800532c:	d209      	bcs.n	8005342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532e:	4b12      	ldr	r3, [pc, #72]	@ (8005378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b0f      	ldr	r3, [pc, #60]	@ (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7fe fb8b 	bl	8003a56 <vListInsert>
}
 8005340:	e010      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe fb81 	bl	8003a56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005354:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d202      	bcs.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800535e:	4a08      	ldr	r2, [pc, #32]	@ (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6013      	str	r3, [r2, #0]
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000e68 	.word	0x20000e68
 8005370:	20000990 	.word	0x20000990
 8005374:	20000e50 	.word	0x20000e50
 8005378:	20000e20 	.word	0x20000e20
 800537c:	20000e1c 	.word	0x20000e1c
 8005380:	20000e84 	.word	0x20000e84

08005384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	@ 0x28
 8005388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800538e:	f000 fb13 	bl	80059b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005392:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <xTimerCreateTimerTask+0x84>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d021      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053a2:	1d3a      	adds	r2, r7, #4
 80053a4:	f107 0108 	add.w	r1, r7, #8
 80053a8:	f107 030c 	add.w	r3, r7, #12
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fae7 	bl	8003980 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	9202      	str	r2, [sp, #8]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2302      	movs	r3, #2
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	460a      	mov	r2, r1
 80053c4:	4911      	ldr	r1, [pc, #68]	@ (800540c <xTimerCreateTimerTask+0x88>)
 80053c6:	4812      	ldr	r0, [pc, #72]	@ (8005410 <xTimerCreateTimerTask+0x8c>)
 80053c8:	f7ff f8a2 	bl	8004510 <xTaskCreateStatic>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <xTimerCreateTimerTask+0x90>)
 80053d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053d2:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <xTimerCreateTimerTask+0x90>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053fc:	697b      	ldr	r3, [r7, #20]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000ec0 	.word	0x20000ec0
 800540c:	08006d70 	.word	0x08006d70
 8005410:	08005551 	.word	0x08005551
 8005414:	20000ec4 	.word	0x20000ec4

08005418 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <xTimerGenericCommand+0x30>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005448:	4b19      	ldr	r3, [pc, #100]	@ (80054b0 <xTimerGenericCommand+0x98>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02a      	beq.n	80054a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b05      	cmp	r3, #5
 8005460:	dc18      	bgt.n	8005494 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005462:	f7ff fead 	bl	80051c0 <xTaskGetSchedulerState>
 8005466:	4603      	mov	r3, r0
 8005468:	2b02      	cmp	r3, #2
 800546a:	d109      	bne.n	8005480 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800546c:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <xTimerGenericCommand+0x98>)
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	f107 0110 	add.w	r1, r7, #16
 8005474:	2300      	movs	r3, #0
 8005476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005478:	f7fe fc5a 	bl	8003d30 <xQueueGenericSend>
 800547c:	6278      	str	r0, [r7, #36]	@ 0x24
 800547e:	e012      	b.n	80054a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005480:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <xTimerGenericCommand+0x98>)
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	f107 0110 	add.w	r1, r7, #16
 8005488:	2300      	movs	r3, #0
 800548a:	2200      	movs	r2, #0
 800548c:	f7fe fc50 	bl	8003d30 <xQueueGenericSend>
 8005490:	6278      	str	r0, [r7, #36]	@ 0x24
 8005492:	e008      	b.n	80054a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005494:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <xTimerGenericCommand+0x98>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	f107 0110 	add.w	r1, r7, #16
 800549c:	2300      	movs	r3, #0
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	f7fe fd48 	bl	8003f34 <xQueueGenericSendFromISR>
 80054a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	@ 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000ec0 	.word	0x20000ec0

080054b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054be:	4b23      	ldr	r3, [pc, #140]	@ (800554c <prvProcessExpiredTimer+0x98>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe fafb 	bl	8003ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d023      	beq.n	8005528 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	18d1      	adds	r1, r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	6978      	ldr	r0, [r7, #20]
 80054ee:	f000 f8d5 	bl	800569c <prvInsertTimerInActiveList>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054f8:	2300      	movs	r3, #0
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2300      	movs	r3, #0
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	2100      	movs	r1, #0
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f7ff ff88 	bl	8005418 <xTimerGenericCommand>
 8005508:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d114      	bne.n	800553a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	60fb      	str	r3, [r7, #12]
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	b2da      	uxtb	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	4798      	blx	r3
}
 8005542:	bf00      	nop
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000eb8 	.word	0x20000eb8

08005550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f859 	bl	8005614 <prvGetNextExpireTime>
 8005562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f805 	bl	8005578 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800556e:	f000 f8d7 	bl	8005720 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005572:	bf00      	nop
 8005574:	e7f0      	b.n	8005558 <prvTimerTask+0x8>
	...

08005578 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005582:	f7ff fa29 	bl	80049d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f866 	bl	800565c <prvSampleTimeNow>
 8005590:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d130      	bne.n	80055fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <prvProcessTimerOrBlockTask+0x3c>
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d806      	bhi.n	80055b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055a6:	f7ff fa25 	bl	80049f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff81 	bl	80054b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055b2:	e024      	b.n	80055fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ba:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <prvProcessTimerOrBlockTask+0x90>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <prvProcessTimerOrBlockTask+0x50>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <prvProcessTimerOrBlockTask+0x52>
 80055c8:	2300      	movs	r3, #0
 80055ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055cc:	4b0f      	ldr	r3, [pc, #60]	@ (800560c <prvProcessTimerOrBlockTask+0x94>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	4619      	mov	r1, r3
 80055da:	f7fe ff65 	bl	80044a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055de:	f7ff fa09 	bl	80049f4 <xTaskResumeAll>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055e8:	4b09      	ldr	r3, [pc, #36]	@ (8005610 <prvProcessTimerOrBlockTask+0x98>)
 80055ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	f3bf 8f6f 	isb	sy
}
 80055f8:	e001      	b.n	80055fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055fa:	f7ff f9fb 	bl	80049f4 <xTaskResumeAll>
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000ebc 	.word	0x20000ebc
 800560c:	20000ec0 	.word	0x20000ec0
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800561c:	4b0e      	ldr	r3, [pc, #56]	@ (8005658 <prvGetNextExpireTime+0x44>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <prvGetNextExpireTime+0x16>
 8005626:	2201      	movs	r2, #1
 8005628:	e000      	b.n	800562c <prvGetNextExpireTime+0x18>
 800562a:	2200      	movs	r2, #0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d105      	bne.n	8005644 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005638:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <prvGetNextExpireTime+0x44>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e001      	b.n	8005648 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005648:	68fb      	ldr	r3, [r7, #12]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000eb8 	.word	0x20000eb8

0800565c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005664:	f7ff fa64 	bl	8004b30 <xTaskGetTickCount>
 8005668:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800566a:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <prvSampleTimeNow+0x3c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	429a      	cmp	r2, r3
 8005672:	d205      	bcs.n	8005680 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005674:	f000 f93a 	bl	80058ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005686:	4a04      	ldr	r2, [pc, #16]	@ (8005698 <prvSampleTimeNow+0x3c>)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000ec8 	.word	0x20000ec8

0800569c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d812      	bhi.n	80056e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	e01b      	b.n	800570e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056d6:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <prvInsertTimerInActiveList+0x7c>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3304      	adds	r3, #4
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f7fe f9b8 	bl	8003a56 <vListInsert>
 80056e6:	e012      	b.n	800570e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d206      	bcs.n	80056fe <prvInsertTimerInActiveList+0x62>
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e007      	b.n	800570e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056fe:	4b07      	ldr	r3, [pc, #28]	@ (800571c <prvInsertTimerInActiveList+0x80>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe f9a4 	bl	8003a56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800570e:	697b      	ldr	r3, [r7, #20]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000ebc 	.word	0x20000ebc
 800571c:	20000eb8 	.word	0x20000eb8

08005720 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	@ 0x38
 8005724:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005726:	e0ce      	b.n	80058c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da19      	bge.n	8005762 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	3304      	adds	r3, #4
 8005732:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	61fb      	str	r3, [r7, #28]
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005758:	6850      	ldr	r0, [r2, #4]
 800575a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575c:	6892      	ldr	r2, [r2, #8]
 800575e:	4611      	mov	r1, r2
 8005760:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f2c0 80ae 	blt.w	80058c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	3304      	adds	r3, #4
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe f9a4 	bl	8003ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005780:	463b      	mov	r3, r7
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ff6a 	bl	800565c <prvSampleTimeNow>
 8005788:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b09      	cmp	r3, #9
 800578e:	f200 8097 	bhi.w	80058c0 <prvProcessReceivedCommands+0x1a0>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <prvProcessReceivedCommands+0x78>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057c1 	.word	0x080057c1
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057c1 	.word	0x080057c1
 80057a4:	08005837 	.word	0x08005837
 80057a8:	0800584b 	.word	0x0800584b
 80057ac:	08005897 	.word	0x08005897
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	080057c1 	.word	0x080057c1
 80057b8:	08005837 	.word	0x08005837
 80057bc:	0800584b 	.word	0x0800584b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	18d1      	adds	r1, r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e0:	f7ff ff5c 	bl	800569c <prvInsertTimerInActiveList>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d06c      	beq.n	80058c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d061      	beq.n	80058c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	441a      	add	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2300      	movs	r3, #0
 800580e:	2100      	movs	r1, #0
 8005810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005812:	f7ff fe01 	bl	8005418 <xTimerGenericCommand>
 8005816:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d152      	bne.n	80058c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	61bb      	str	r3, [r7, #24]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005848:	e03d      	b.n	80058c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	b2da      	uxtb	r2, r3
 8005856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	617b      	str	r3, [r7, #20]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	18d1      	adds	r1, r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800588e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005890:	f7ff ff04 	bl	800569c <prvInsertTimerInActiveList>
					break;
 8005894:	e017      	b.n	80058c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80058a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058a6:	f000 fbe7 	bl	8006078 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058aa:	e00c      	b.n	80058c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058be:	e002      	b.n	80058c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80058c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058c6:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <prvProcessReceivedCommands+0x1c8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	1d39      	adds	r1, r7, #4
 80058cc:	2200      	movs	r2, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fbce 	bl	8004070 <xQueueReceive>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f47f af26 	bne.w	8005728 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3730      	adds	r7, #48	@ 0x30
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000ec0 	.word	0x20000ec0

080058ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058f2:	e049      	b.n	8005988 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f4:	4b2e      	ldr	r3, [pc, #184]	@ (80059b0 <prvSwitchTimerLists+0xc4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fe:	4b2c      	ldr	r3, [pc, #176]	@ (80059b0 <prvSwitchTimerLists+0xc4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3304      	adds	r3, #4
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe f8db 	bl	8003ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02f      	beq.n	8005988 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	429a      	cmp	r2, r3
 8005938:	d90e      	bls.n	8005958 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005946:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <prvSwitchTimerLists+0xc4>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3304      	adds	r3, #4
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f7fe f880 	bl	8003a56 <vListInsert>
 8005956:	e017      	b.n	8005988 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	2100      	movs	r1, #0
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff fd58 	bl	8005418 <xTimerGenericCommand>
 8005968:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	603b      	str	r3, [r7, #0]
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005988:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <prvSwitchTimerLists+0xc4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1b0      	bne.n	80058f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005992:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <prvSwitchTimerLists+0xc4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <prvSwitchTimerLists+0xc8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a04      	ldr	r2, [pc, #16]	@ (80059b0 <prvSwitchTimerLists+0xc4>)
 800599e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059a0:	4a04      	ldr	r2, [pc, #16]	@ (80059b4 <prvSwitchTimerLists+0xc8>)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	6013      	str	r3, [r2, #0]
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000eb8 	.word	0x20000eb8
 80059b4:	20000ebc 	.word	0x20000ebc

080059b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059be:	f000 f96b 	bl	8005c98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059c2:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <prvCheckForValidListAndQueue+0x60>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d120      	bne.n	8005a0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059ca:	4814      	ldr	r0, [pc, #80]	@ (8005a1c <prvCheckForValidListAndQueue+0x64>)
 80059cc:	f7fd fff2 	bl	80039b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059d0:	4813      	ldr	r0, [pc, #76]	@ (8005a20 <prvCheckForValidListAndQueue+0x68>)
 80059d2:	f7fd ffef 	bl	80039b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059d6:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <prvCheckForValidListAndQueue+0x6c>)
 80059d8:	4a10      	ldr	r2, [pc, #64]	@ (8005a1c <prvCheckForValidListAndQueue+0x64>)
 80059da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059dc:	4b12      	ldr	r3, [pc, #72]	@ (8005a28 <prvCheckForValidListAndQueue+0x70>)
 80059de:	4a10      	ldr	r2, [pc, #64]	@ (8005a20 <prvCheckForValidListAndQueue+0x68>)
 80059e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059e2:	2300      	movs	r3, #0
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4b11      	ldr	r3, [pc, #68]	@ (8005a2c <prvCheckForValidListAndQueue+0x74>)
 80059e8:	4a11      	ldr	r2, [pc, #68]	@ (8005a30 <prvCheckForValidListAndQueue+0x78>)
 80059ea:	2110      	movs	r1, #16
 80059ec:	200a      	movs	r0, #10
 80059ee:	f7fe f8ff 	bl	8003bf0 <xQueueGenericCreateStatic>
 80059f2:	4603      	mov	r3, r0
 80059f4:	4a08      	ldr	r2, [pc, #32]	@ (8005a18 <prvCheckForValidListAndQueue+0x60>)
 80059f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059f8:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <prvCheckForValidListAndQueue+0x60>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <prvCheckForValidListAndQueue+0x60>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	490b      	ldr	r1, [pc, #44]	@ (8005a34 <prvCheckForValidListAndQueue+0x7c>)
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fd24 	bl	8004454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a0c:	f000 f976 	bl	8005cfc <vPortExitCritical>
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000ec0 	.word	0x20000ec0
 8005a1c:	20000e90 	.word	0x20000e90
 8005a20:	20000ea4 	.word	0x20000ea4
 8005a24:	20000eb8 	.word	0x20000eb8
 8005a28:	20000ebc 	.word	0x20000ebc
 8005a2c:	20000f6c 	.word	0x20000f6c
 8005a30:	20000ecc 	.word	0x20000ecc
 8005a34:	08006d78 	.word	0x08006d78

08005a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3b04      	subs	r3, #4
 8005a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0201 	bic.w	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a68:	4a0c      	ldr	r2, [pc, #48]	@ (8005a9c <pxPortInitialiseStack+0x64>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b14      	subs	r3, #20
 8005a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b04      	subs	r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f06f 0202 	mvn.w	r2, #2
 8005a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b20      	subs	r3, #32
 8005a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	08005aa1 	.word	0x08005aa1

08005aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aaa:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <prvTaskExitError+0x58>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d00b      	beq.n	8005acc <prvTaskExitError+0x2c>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <prvTaskExitError+0x28>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60bb      	str	r3, [r7, #8]
}
 8005ade:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ae0:	bf00      	nop
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0fc      	beq.n	8005ae2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000058 	.word	0x20000058
 8005afc:	00000000 	.word	0x00000000

08005b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b00:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <pxCurrentTCBConst2>)
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	6808      	ldr	r0, [r1, #0]
 8005b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	f380 8809 	msr	PSP, r0
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8811 	msr	BASEPRI, r0
 8005b1a:	4770      	bx	lr
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst2>:
 8005b20:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b28:	4808      	ldr	r0, [pc, #32]	@ (8005b4c <prvPortStartFirstTask+0x24>)
 8005b2a:	6800      	ldr	r0, [r0, #0]
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	f380 8808 	msr	MSP, r0
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8814 	msr	CONTROL, r0
 8005b3a:	b662      	cpsie	i
 8005b3c:	b661      	cpsie	f
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	df00      	svc	0
 8005b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b4a:	bf00      	nop
 8005b4c:	e000ed08 	.word	0xe000ed08

08005b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b56:	4b47      	ldr	r3, [pc, #284]	@ (8005c74 <xPortStartScheduler+0x124>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a47      	ldr	r2, [pc, #284]	@ (8005c78 <xPortStartScheduler+0x128>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10b      	bne.n	8005b78 <xPortStartScheduler+0x28>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b78:	4b3e      	ldr	r3, [pc, #248]	@ (8005c74 <xPortStartScheduler+0x124>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c7c <xPortStartScheduler+0x12c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10b      	bne.n	8005b9a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	60fb      	str	r3, [r7, #12]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b9a:	4b39      	ldr	r3, [pc, #228]	@ (8005c80 <xPortStartScheduler+0x130>)
 8005b9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	22ff      	movs	r2, #255	@ 0xff
 8005baa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	4b31      	ldr	r3, [pc, #196]	@ (8005c84 <xPortStartScheduler+0x134>)
 8005bc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bc2:	4b31      	ldr	r3, [pc, #196]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005bc4:	2207      	movs	r2, #7
 8005bc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bc8:	e009      	b.n	8005bde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005bca:	4b2f      	ldr	r3, [pc, #188]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005bd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be6:	2b80      	cmp	r3, #128	@ 0x80
 8005be8:	d0ef      	beq.n	8005bca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bea:	4b27      	ldr	r3, [pc, #156]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f1c3 0307 	rsb	r3, r3, #7
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d00b      	beq.n	8005c0e <xPortStartScheduler+0xbe>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60bb      	str	r3, [r7, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	4a1c      	ldr	r2, [pc, #112]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005c16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c18:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c20:	4a19      	ldr	r2, [pc, #100]	@ (8005c88 <xPortStartScheduler+0x138>)
 8005c22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c2c:	4b17      	ldr	r3, [pc, #92]	@ (8005c8c <xPortStartScheduler+0x13c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a16      	ldr	r2, [pc, #88]	@ (8005c8c <xPortStartScheduler+0x13c>)
 8005c32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c38:	4b14      	ldr	r3, [pc, #80]	@ (8005c8c <xPortStartScheduler+0x13c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a13      	ldr	r2, [pc, #76]	@ (8005c8c <xPortStartScheduler+0x13c>)
 8005c3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c44:	f000 f8da 	bl	8005dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c48:	4b11      	ldr	r3, [pc, #68]	@ (8005c90 <xPortStartScheduler+0x140>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c4e:	f000 f8f9 	bl	8005e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c52:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <xPortStartScheduler+0x144>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a0f      	ldr	r2, [pc, #60]	@ (8005c94 <xPortStartScheduler+0x144>)
 8005c58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c5e:	f7ff ff63 	bl	8005b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c62:	f7ff f82f 	bl	8004cc4 <vTaskSwitchContext>
	prvTaskExitError();
 8005c66:	f7ff ff1b 	bl	8005aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	e000ed00 	.word	0xe000ed00
 8005c78:	410fc271 	.word	0x410fc271
 8005c7c:	410fc270 	.word	0x410fc270
 8005c80:	e000e400 	.word	0xe000e400
 8005c84:	20000fbc 	.word	0x20000fbc
 8005c88:	20000fc0 	.word	0x20000fc0
 8005c8c:	e000ed20 	.word	0xe000ed20
 8005c90:	20000058 	.word	0x20000058
 8005c94:	e000ef34 	.word	0xe000ef34

08005c98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	607b      	str	r3, [r7, #4]
}
 8005cb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cb2:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <vPortEnterCritical+0x5c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005cf4 <vPortEnterCritical+0x5c>)
 8005cba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <vPortEnterCritical+0x5c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d110      	bne.n	8005ce6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <vPortEnterCritical+0x60>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <vPortEnterCritical+0x4a>
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20000058 	.word	0x20000058
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d02:	4b12      	ldr	r3, [pc, #72]	@ (8005d4c <vPortExitCritical+0x50>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <vPortExitCritical+0x26>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	607b      	str	r3, [r7, #4]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d22:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <vPortExitCritical+0x50>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	4a08      	ldr	r2, [pc, #32]	@ (8005d4c <vPortExitCritical+0x50>)
 8005d2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d2c:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <vPortExitCritical+0x50>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d105      	bne.n	8005d40 <vPortExitCritical+0x44>
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f383 8811 	msr	BASEPRI, r3
}
 8005d3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000058 	.word	0x20000058

08005d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d50:	f3ef 8009 	mrs	r0, PSP
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4b15      	ldr	r3, [pc, #84]	@ (8005db0 <pxCurrentTCBConst>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	f01e 0f10 	tst.w	lr, #16
 8005d60:	bf08      	it	eq
 8005d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d74:	f380 8811 	msr	BASEPRI, r0
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f7fe ffa0 	bl	8004cc4 <vTaskSwitchContext>
 8005d84:	f04f 0000 	mov.w	r0, #0
 8005d88:	f380 8811 	msr	BASEPRI, r0
 8005d8c:	bc09      	pop	{r0, r3}
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	6808      	ldr	r0, [r1, #0]
 8005d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d96:	f01e 0f10 	tst.w	lr, #16
 8005d9a:	bf08      	it	eq
 8005d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005da0:	f380 8809 	msr	PSP, r0
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst>:
 8005db0:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
}
 8005dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dd2:	f7fe febd 	bl	8004b50 <xTaskIncrementTick>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	@ (8005df8 <xPortSysTickHandler+0x40>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f383 8811 	msr	BASEPRI, r3
}
 8005dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e00:	4b0b      	ldr	r3, [pc, #44]	@ (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e06:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <vPortSetupTimerInterrupt+0x38>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <vPortSetupTimerInterrupt+0x3c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <vPortSetupTimerInterrupt+0x40>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <vPortSetupTimerInterrupt+0x44>)
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e1e:	4b04      	ldr	r3, [pc, #16]	@ (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	e000e010 	.word	0xe000e010
 8005e34:	e000e018 	.word	0xe000e018
 8005e38:	2000004c 	.word	0x2000004c
 8005e3c:	10624dd3 	.word	0x10624dd3
 8005e40:	e000e014 	.word	0xe000e014

08005e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e54 <vPortEnableVFP+0x10>
 8005e48:	6801      	ldr	r1, [r0, #0]
 8005e4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e4e:	6001      	str	r1, [r0, #0]
 8005e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e52:	bf00      	nop
 8005e54:	e000ed88 	.word	0xe000ed88

08005e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e5e:	f3ef 8305 	mrs	r3, IPSR
 8005e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	d915      	bls.n	8005e96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e6a:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <vPortValidateInterruptPriority+0x74>)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e74:	4b16      	ldr	r3, [pc, #88]	@ (8005ed0 <vPortValidateInterruptPriority+0x78>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	7afa      	ldrb	r2, [r7, #11]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d20b      	bcs.n	8005e96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	607b      	str	r3, [r7, #4]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e96:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed4 <vPortValidateInterruptPriority+0x7c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <vPortValidateInterruptPriority+0x80>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d90b      	bls.n	8005ebe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	603b      	str	r3, [r7, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <vPortValidateInterruptPriority+0x62>
	}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	e000e3f0 	.word	0xe000e3f0
 8005ed0:	20000fbc 	.word	0x20000fbc
 8005ed4:	e000ed0c 	.word	0xe000ed0c
 8005ed8:	20000fc0 	.word	0x20000fc0

08005edc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08a      	sub	sp, #40	@ 0x28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ee8:	f7fe fd76 	bl	80049d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005eec:	4b5c      	ldr	r3, [pc, #368]	@ (8006060 <pvPortMalloc+0x184>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ef4:	f000 f924 	bl	8006140 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8006064 <pvPortMalloc+0x188>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8095 	bne.w	8006030 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01e      	beq.n	8005f4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d015      	beq.n	8005f4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f023 0307 	bic.w	r3, r3, #7
 8005f24:	3308      	adds	r3, #8
 8005f26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <pvPortMalloc+0x6e>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	617b      	str	r3, [r7, #20]
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	e7fd      	b.n	8005f46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d06f      	beq.n	8006030 <pvPortMalloc+0x154>
 8005f50:	4b45      	ldr	r3, [pc, #276]	@ (8006068 <pvPortMalloc+0x18c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d86a      	bhi.n	8006030 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f5a:	4b44      	ldr	r3, [pc, #272]	@ (800606c <pvPortMalloc+0x190>)
 8005f5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f5e:	4b43      	ldr	r3, [pc, #268]	@ (800606c <pvPortMalloc+0x190>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f64:	e004      	b.n	8005f70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d903      	bls.n	8005f82 <pvPortMalloc+0xa6>
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f1      	bne.n	8005f66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f82:	4b37      	ldr	r3, [pc, #220]	@ (8006060 <pvPortMalloc+0x184>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d051      	beq.n	8006030 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2208      	movs	r2, #8
 8005f92:	4413      	add	r3, r2
 8005f94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	1ad2      	subs	r2, r2, r3
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d920      	bls.n	8005ff0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <pvPortMalloc+0xfc>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	613b      	str	r3, [r7, #16]
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fea:	69b8      	ldr	r0, [r7, #24]
 8005fec:	f000 f90a 	bl	8006204 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <pvPortMalloc+0x18c>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8006068 <pvPortMalloc+0x18c>)
 8005ffc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <pvPortMalloc+0x18c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <pvPortMalloc+0x194>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d203      	bcs.n	8006012 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800600a:	4b17      	ldr	r3, [pc, #92]	@ (8006068 <pvPortMalloc+0x18c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a18      	ldr	r2, [pc, #96]	@ (8006070 <pvPortMalloc+0x194>)
 8006010:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4b13      	ldr	r3, [pc, #76]	@ (8006064 <pvPortMalloc+0x188>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	431a      	orrs	r2, r3
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006026:	4b13      	ldr	r3, [pc, #76]	@ (8006074 <pvPortMalloc+0x198>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a11      	ldr	r2, [pc, #68]	@ (8006074 <pvPortMalloc+0x198>)
 800602e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006030:	f7fe fce0 	bl	80049f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <pvPortMalloc+0x17a>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <pvPortMalloc+0x176>
	return pvReturn;
 8006056:	69fb      	ldr	r3, [r7, #28]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3728      	adds	r7, #40	@ 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20004bcc 	.word	0x20004bcc
 8006064:	20004be0 	.word	0x20004be0
 8006068:	20004bd0 	.word	0x20004bd0
 800606c:	20004bc4 	.word	0x20004bc4
 8006070:	20004bd4 	.word	0x20004bd4
 8006074:	20004bd8 	.word	0x20004bd8

08006078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d04f      	beq.n	800612a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800608a:	2308      	movs	r3, #8
 800608c:	425b      	negs	r3, r3
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4b25      	ldr	r3, [pc, #148]	@ (8006134 <vPortFree+0xbc>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <vPortFree+0x46>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60fb      	str	r3, [r7, #12]
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	e7fd      	b.n	80060ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <vPortFree+0x66>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60bb      	str	r3, [r7, #8]
}
 80060d8:	bf00      	nop
 80060da:	bf00      	nop
 80060dc:	e7fd      	b.n	80060da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	4b14      	ldr	r3, [pc, #80]	@ (8006134 <vPortFree+0xbc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01e      	beq.n	800612a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d11a      	bne.n	800612a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006134 <vPortFree+0xbc>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006104:	f7fe fc68 	bl	80049d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <vPortFree+0xc0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4413      	add	r3, r2
 8006112:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <vPortFree+0xc0>)
 8006114:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006116:	6938      	ldr	r0, [r7, #16]
 8006118:	f000 f874 	bl	8006204 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800611c:	4b07      	ldr	r3, [pc, #28]	@ (800613c <vPortFree+0xc4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a06      	ldr	r2, [pc, #24]	@ (800613c <vPortFree+0xc4>)
 8006124:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006126:	f7fe fc65 	bl	80049f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800612a:	bf00      	nop
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20004be0 	.word	0x20004be0
 8006138:	20004bd0 	.word	0x20004bd0
 800613c:	20004bdc 	.word	0x20004bdc

08006140 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006146:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800614a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800614c:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <prvHeapInit+0xac>)
 800614e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00c      	beq.n	8006174 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3307      	adds	r3, #7
 800615e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <prvHeapInit+0xac>)
 8006170:	4413      	add	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006178:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <prvHeapInit+0xb0>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800617e:	4b1c      	ldr	r3, [pc, #112]	@ (80061f0 <prvHeapInit+0xb0>)
 8006180:	2200      	movs	r2, #0
 8006182:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4413      	add	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800618c:	2208      	movs	r2, #8
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0307 	bic.w	r3, r3, #7
 800619a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <prvHeapInit+0xb4>)
 80061a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061a2:	4b14      	ldr	r3, [pc, #80]	@ (80061f4 <prvHeapInit+0xb4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2200      	movs	r2, #0
 80061a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061aa:	4b12      	ldr	r3, [pc, #72]	@ (80061f4 <prvHeapInit+0xb4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061c0:	4b0c      	ldr	r3, [pc, #48]	@ (80061f4 <prvHeapInit+0xb4>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a0a      	ldr	r2, [pc, #40]	@ (80061f8 <prvHeapInit+0xb8>)
 80061ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4a09      	ldr	r2, [pc, #36]	@ (80061fc <prvHeapInit+0xbc>)
 80061d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061d8:	4b09      	ldr	r3, [pc, #36]	@ (8006200 <prvHeapInit+0xc0>)
 80061da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061de:	601a      	str	r2, [r3, #0]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000fc4 	.word	0x20000fc4
 80061f0:	20004bc4 	.word	0x20004bc4
 80061f4:	20004bcc 	.word	0x20004bcc
 80061f8:	20004bd4 	.word	0x20004bd4
 80061fc:	20004bd0 	.word	0x20004bd0
 8006200:	20004be0 	.word	0x20004be0

08006204 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800620c:	4b28      	ldr	r3, [pc, #160]	@ (80062b0 <prvInsertBlockIntoFreeList+0xac>)
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e002      	b.n	8006218 <prvInsertBlockIntoFreeList+0x14>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	429a      	cmp	r2, r3
 8006220:	d8f7      	bhi.n	8006212 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d108      	bne.n	8006246 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	441a      	add	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d118      	bne.n	800628c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b15      	ldr	r3, [pc, #84]	@ (80062b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d00d      	beq.n	8006282 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	441a      	add	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e008      	b.n	8006294 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006282:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <prvInsertBlockIntoFreeList+0xb0>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e003      	b.n	8006294 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d002      	beq.n	80062a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	20004bc4 	.word	0x20004bc4
 80062b4:	20004bcc 	.word	0x20004bcc

080062b8 <sniprintf>:
 80062b8:	b40c      	push	{r2, r3}
 80062ba:	b530      	push	{r4, r5, lr}
 80062bc:	4b17      	ldr	r3, [pc, #92]	@ (800631c <sniprintf+0x64>)
 80062be:	1e0c      	subs	r4, r1, #0
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	b09d      	sub	sp, #116	@ 0x74
 80062c4:	da08      	bge.n	80062d8 <sniprintf+0x20>
 80062c6:	238b      	movs	r3, #139	@ 0x8b
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	b01d      	add	sp, #116	@ 0x74
 80062d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d4:	b002      	add	sp, #8
 80062d6:	4770      	bx	lr
 80062d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80062dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062e0:	bf14      	ite	ne
 80062e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062e6:	4623      	moveq	r3, r4
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062f0:	9002      	str	r0, [sp, #8]
 80062f2:	9006      	str	r0, [sp, #24]
 80062f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062fa:	ab21      	add	r3, sp, #132	@ 0x84
 80062fc:	a902      	add	r1, sp, #8
 80062fe:	4628      	mov	r0, r5
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	f000 f9f9 	bl	80066f8 <_svfiprintf_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	bfbc      	itt	lt
 800630a:	238b      	movlt	r3, #139	@ 0x8b
 800630c:	602b      	strlt	r3, [r5, #0]
 800630e:	2c00      	cmp	r4, #0
 8006310:	d0dd      	beq.n	80062ce <sniprintf+0x16>
 8006312:	9b02      	ldr	r3, [sp, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e7d9      	b.n	80062ce <sniprintf+0x16>
 800631a:	bf00      	nop
 800631c:	2000005c 	.word	0x2000005c

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <_reclaim_reent>:
 8006330:	4b29      	ldr	r3, [pc, #164]	@ (80063d8 <_reclaim_reent+0xa8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4283      	cmp	r3, r0
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	d04b      	beq.n	80063d4 <_reclaim_reent+0xa4>
 800633c:	69c3      	ldr	r3, [r0, #28]
 800633e:	b1ab      	cbz	r3, 800636c <_reclaim_reent+0x3c>
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	b16b      	cbz	r3, 8006360 <_reclaim_reent+0x30>
 8006344:	2500      	movs	r5, #0
 8006346:	69e3      	ldr	r3, [r4, #28]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	5959      	ldr	r1, [r3, r5]
 800634c:	2900      	cmp	r1, #0
 800634e:	d13b      	bne.n	80063c8 <_reclaim_reent+0x98>
 8006350:	3504      	adds	r5, #4
 8006352:	2d80      	cmp	r5, #128	@ 0x80
 8006354:	d1f7      	bne.n	8006346 <_reclaim_reent+0x16>
 8006356:	69e3      	ldr	r3, [r4, #28]
 8006358:	4620      	mov	r0, r4
 800635a:	68d9      	ldr	r1, [r3, #12]
 800635c:	f000 f878 	bl	8006450 <_free_r>
 8006360:	69e3      	ldr	r3, [r4, #28]
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	b111      	cbz	r1, 800636c <_reclaim_reent+0x3c>
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f872 	bl	8006450 <_free_r>
 800636c:	6961      	ldr	r1, [r4, #20]
 800636e:	b111      	cbz	r1, 8006376 <_reclaim_reent+0x46>
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f86d 	bl	8006450 <_free_r>
 8006376:	69e1      	ldr	r1, [r4, #28]
 8006378:	b111      	cbz	r1, 8006380 <_reclaim_reent+0x50>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f868 	bl	8006450 <_free_r>
 8006380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006382:	b111      	cbz	r1, 800638a <_reclaim_reent+0x5a>
 8006384:	4620      	mov	r0, r4
 8006386:	f000 f863 	bl	8006450 <_free_r>
 800638a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800638c:	b111      	cbz	r1, 8006394 <_reclaim_reent+0x64>
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f85e 	bl	8006450 <_free_r>
 8006394:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006396:	b111      	cbz	r1, 800639e <_reclaim_reent+0x6e>
 8006398:	4620      	mov	r0, r4
 800639a:	f000 f859 	bl	8006450 <_free_r>
 800639e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80063a0:	b111      	cbz	r1, 80063a8 <_reclaim_reent+0x78>
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f854 	bl	8006450 <_free_r>
 80063a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80063aa:	b111      	cbz	r1, 80063b2 <_reclaim_reent+0x82>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f84f 	bl	8006450 <_free_r>
 80063b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80063b4:	b111      	cbz	r1, 80063bc <_reclaim_reent+0x8c>
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f84a 	bl	8006450 <_free_r>
 80063bc:	6a23      	ldr	r3, [r4, #32]
 80063be:	b14b      	cbz	r3, 80063d4 <_reclaim_reent+0xa4>
 80063c0:	4620      	mov	r0, r4
 80063c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063c6:	4718      	bx	r3
 80063c8:	680e      	ldr	r6, [r1, #0]
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f840 	bl	8006450 <_free_r>
 80063d0:	4631      	mov	r1, r6
 80063d2:	e7bb      	b.n	800634c <_reclaim_reent+0x1c>
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	bf00      	nop
 80063d8:	2000005c 	.word	0x2000005c

080063dc <__errno>:
 80063dc:	4b01      	ldr	r3, [pc, #4]	@ (80063e4 <__errno+0x8>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000005c 	.word	0x2000005c

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006424 <__libc_init_array+0x3c>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2600      	movs	r6, #0
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	@ (800642c <__libc_init_array+0x44>)
 80063fc:	f000 fc66 	bl	8006ccc <_init>
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2600      	movs	r6, #0
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f855 3b04 	ldr.w	r3, [r5], #4
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	08006e1c 	.word	0x08006e1c
 8006424:	08006e1c 	.word	0x08006e1c
 8006428:	08006e1c 	.word	0x08006e1c
 800642c:	08006e20 	.word	0x08006e20

08006430 <__retarget_lock_acquire_recursive>:
 8006430:	4770      	bx	lr

08006432 <__retarget_lock_release_recursive>:
 8006432:	4770      	bx	lr

08006434 <memcpy>:
 8006434:	440a      	add	r2, r1
 8006436:	4291      	cmp	r1, r2
 8006438:	f100 33ff 	add.w	r3, r0, #4294967295
 800643c:	d100      	bne.n	8006440 <memcpy+0xc>
 800643e:	4770      	bx	lr
 8006440:	b510      	push	{r4, lr}
 8006442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800644a:	4291      	cmp	r1, r2
 800644c:	d1f9      	bne.n	8006442 <memcpy+0xe>
 800644e:	bd10      	pop	{r4, pc}

08006450 <_free_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4605      	mov	r5, r0
 8006454:	2900      	cmp	r1, #0
 8006456:	d041      	beq.n	80064dc <_free_r+0x8c>
 8006458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645c:	1f0c      	subs	r4, r1, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	18e4      	addlt	r4, r4, r3
 8006464:	f000 f8e0 	bl	8006628 <__malloc_lock>
 8006468:	4a1d      	ldr	r2, [pc, #116]	@ (80064e0 <_free_r+0x90>)
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	b933      	cbnz	r3, 800647c <_free_r+0x2c>
 800646e:	6063      	str	r3, [r4, #4]
 8006470:	6014      	str	r4, [r2, #0]
 8006472:	4628      	mov	r0, r5
 8006474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006478:	f000 b8dc 	b.w	8006634 <__malloc_unlock>
 800647c:	42a3      	cmp	r3, r4
 800647e:	d908      	bls.n	8006492 <_free_r+0x42>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	1821      	adds	r1, r4, r0
 8006484:	428b      	cmp	r3, r1
 8006486:	bf01      	itttt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	1809      	addeq	r1, r1, r0
 800648e:	6021      	streq	r1, [r4, #0]
 8006490:	e7ed      	b.n	800646e <_free_r+0x1e>
 8006492:	461a      	mov	r2, r3
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	b10b      	cbz	r3, 800649c <_free_r+0x4c>
 8006498:	42a3      	cmp	r3, r4
 800649a:	d9fa      	bls.n	8006492 <_free_r+0x42>
 800649c:	6811      	ldr	r1, [r2, #0]
 800649e:	1850      	adds	r0, r2, r1
 80064a0:	42a0      	cmp	r0, r4
 80064a2:	d10b      	bne.n	80064bc <_free_r+0x6c>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	4401      	add	r1, r0
 80064a8:	1850      	adds	r0, r2, r1
 80064aa:	4283      	cmp	r3, r0
 80064ac:	6011      	str	r1, [r2, #0]
 80064ae:	d1e0      	bne.n	8006472 <_free_r+0x22>
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	6053      	str	r3, [r2, #4]
 80064b6:	4408      	add	r0, r1
 80064b8:	6010      	str	r0, [r2, #0]
 80064ba:	e7da      	b.n	8006472 <_free_r+0x22>
 80064bc:	d902      	bls.n	80064c4 <_free_r+0x74>
 80064be:	230c      	movs	r3, #12
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	e7d6      	b.n	8006472 <_free_r+0x22>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428b      	cmp	r3, r1
 80064ca:	bf04      	itt	eq
 80064cc:	6819      	ldreq	r1, [r3, #0]
 80064ce:	685b      	ldreq	r3, [r3, #4]
 80064d0:	6063      	str	r3, [r4, #4]
 80064d2:	bf04      	itt	eq
 80064d4:	1809      	addeq	r1, r1, r0
 80064d6:	6021      	streq	r1, [r4, #0]
 80064d8:	6054      	str	r4, [r2, #4]
 80064da:	e7ca      	b.n	8006472 <_free_r+0x22>
 80064dc:	bd38      	pop	{r3, r4, r5, pc}
 80064de:	bf00      	nop
 80064e0:	20004d28 	.word	0x20004d28

080064e4 <sbrk_aligned>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006524 <sbrk_aligned+0x40>)
 80064e8:	460c      	mov	r4, r1
 80064ea:	6831      	ldr	r1, [r6, #0]
 80064ec:	4605      	mov	r5, r0
 80064ee:	b911      	cbnz	r1, 80064f6 <sbrk_aligned+0x12>
 80064f0:	f000 fba6 	bl	8006c40 <_sbrk_r>
 80064f4:	6030      	str	r0, [r6, #0]
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 fba1 	bl	8006c40 <_sbrk_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	d103      	bne.n	800650a <sbrk_aligned+0x26>
 8006502:	f04f 34ff 	mov.w	r4, #4294967295
 8006506:	4620      	mov	r0, r4
 8006508:	bd70      	pop	{r4, r5, r6, pc}
 800650a:	1cc4      	adds	r4, r0, #3
 800650c:	f024 0403 	bic.w	r4, r4, #3
 8006510:	42a0      	cmp	r0, r4
 8006512:	d0f8      	beq.n	8006506 <sbrk_aligned+0x22>
 8006514:	1a21      	subs	r1, r4, r0
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fb92 	bl	8006c40 <_sbrk_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d1f2      	bne.n	8006506 <sbrk_aligned+0x22>
 8006520:	e7ef      	b.n	8006502 <sbrk_aligned+0x1e>
 8006522:	bf00      	nop
 8006524:	20004d24 	.word	0x20004d24

08006528 <_malloc_r>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	1ccd      	adds	r5, r1, #3
 800652e:	f025 0503 	bic.w	r5, r5, #3
 8006532:	3508      	adds	r5, #8
 8006534:	2d0c      	cmp	r5, #12
 8006536:	bf38      	it	cc
 8006538:	250c      	movcc	r5, #12
 800653a:	2d00      	cmp	r5, #0
 800653c:	4606      	mov	r6, r0
 800653e:	db01      	blt.n	8006544 <_malloc_r+0x1c>
 8006540:	42a9      	cmp	r1, r5
 8006542:	d904      	bls.n	800654e <_malloc_r+0x26>
 8006544:	230c      	movs	r3, #12
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	2000      	movs	r0, #0
 800654a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800654e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006624 <_malloc_r+0xfc>
 8006552:	f000 f869 	bl	8006628 <__malloc_lock>
 8006556:	f8d8 3000 	ldr.w	r3, [r8]
 800655a:	461c      	mov	r4, r3
 800655c:	bb44      	cbnz	r4, 80065b0 <_malloc_r+0x88>
 800655e:	4629      	mov	r1, r5
 8006560:	4630      	mov	r0, r6
 8006562:	f7ff ffbf 	bl	80064e4 <sbrk_aligned>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	4604      	mov	r4, r0
 800656a:	d158      	bne.n	800661e <_malloc_r+0xf6>
 800656c:	f8d8 4000 	ldr.w	r4, [r8]
 8006570:	4627      	mov	r7, r4
 8006572:	2f00      	cmp	r7, #0
 8006574:	d143      	bne.n	80065fe <_malloc_r+0xd6>
 8006576:	2c00      	cmp	r4, #0
 8006578:	d04b      	beq.n	8006612 <_malloc_r+0xea>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	4639      	mov	r1, r7
 800657e:	4630      	mov	r0, r6
 8006580:	eb04 0903 	add.w	r9, r4, r3
 8006584:	f000 fb5c 	bl	8006c40 <_sbrk_r>
 8006588:	4581      	cmp	r9, r0
 800658a:	d142      	bne.n	8006612 <_malloc_r+0xea>
 800658c:	6821      	ldr	r1, [r4, #0]
 800658e:	1a6d      	subs	r5, r5, r1
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ffa6 	bl	80064e4 <sbrk_aligned>
 8006598:	3001      	adds	r0, #1
 800659a:	d03a      	beq.n	8006612 <_malloc_r+0xea>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	442b      	add	r3, r5
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	f8d8 3000 	ldr.w	r3, [r8]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	bb62      	cbnz	r2, 8006604 <_malloc_r+0xdc>
 80065aa:	f8c8 7000 	str.w	r7, [r8]
 80065ae:	e00f      	b.n	80065d0 <_malloc_r+0xa8>
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	1b52      	subs	r2, r2, r5
 80065b4:	d420      	bmi.n	80065f8 <_malloc_r+0xd0>
 80065b6:	2a0b      	cmp	r2, #11
 80065b8:	d917      	bls.n	80065ea <_malloc_r+0xc2>
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	42a3      	cmp	r3, r4
 80065be:	6025      	str	r5, [r4, #0]
 80065c0:	bf18      	it	ne
 80065c2:	6059      	strne	r1, [r3, #4]
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	bf08      	it	eq
 80065c8:	f8c8 1000 	streq.w	r1, [r8]
 80065cc:	5162      	str	r2, [r4, r5]
 80065ce:	604b      	str	r3, [r1, #4]
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 f82f 	bl	8006634 <__malloc_unlock>
 80065d6:	f104 000b 	add.w	r0, r4, #11
 80065da:	1d23      	adds	r3, r4, #4
 80065dc:	f020 0007 	bic.w	r0, r0, #7
 80065e0:	1ac2      	subs	r2, r0, r3
 80065e2:	bf1c      	itt	ne
 80065e4:	1a1b      	subne	r3, r3, r0
 80065e6:	50a3      	strne	r3, [r4, r2]
 80065e8:	e7af      	b.n	800654a <_malloc_r+0x22>
 80065ea:	6862      	ldr	r2, [r4, #4]
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	bf0c      	ite	eq
 80065f0:	f8c8 2000 	streq.w	r2, [r8]
 80065f4:	605a      	strne	r2, [r3, #4]
 80065f6:	e7eb      	b.n	80065d0 <_malloc_r+0xa8>
 80065f8:	4623      	mov	r3, r4
 80065fa:	6864      	ldr	r4, [r4, #4]
 80065fc:	e7ae      	b.n	800655c <_malloc_r+0x34>
 80065fe:	463c      	mov	r4, r7
 8006600:	687f      	ldr	r7, [r7, #4]
 8006602:	e7b6      	b.n	8006572 <_malloc_r+0x4a>
 8006604:	461a      	mov	r2, r3
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	42a3      	cmp	r3, r4
 800660a:	d1fb      	bne.n	8006604 <_malloc_r+0xdc>
 800660c:	2300      	movs	r3, #0
 800660e:	6053      	str	r3, [r2, #4]
 8006610:	e7de      	b.n	80065d0 <_malloc_r+0xa8>
 8006612:	230c      	movs	r3, #12
 8006614:	6033      	str	r3, [r6, #0]
 8006616:	4630      	mov	r0, r6
 8006618:	f000 f80c 	bl	8006634 <__malloc_unlock>
 800661c:	e794      	b.n	8006548 <_malloc_r+0x20>
 800661e:	6005      	str	r5, [r0, #0]
 8006620:	e7d6      	b.n	80065d0 <_malloc_r+0xa8>
 8006622:	bf00      	nop
 8006624:	20004d28 	.word	0x20004d28

08006628 <__malloc_lock>:
 8006628:	4801      	ldr	r0, [pc, #4]	@ (8006630 <__malloc_lock+0x8>)
 800662a:	f7ff bf01 	b.w	8006430 <__retarget_lock_acquire_recursive>
 800662e:	bf00      	nop
 8006630:	20004d20 	.word	0x20004d20

08006634 <__malloc_unlock>:
 8006634:	4801      	ldr	r0, [pc, #4]	@ (800663c <__malloc_unlock+0x8>)
 8006636:	f7ff befc 	b.w	8006432 <__retarget_lock_release_recursive>
 800663a:	bf00      	nop
 800663c:	20004d20 	.word	0x20004d20

08006640 <__ssputs_r>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	688e      	ldr	r6, [r1, #8]
 8006646:	461f      	mov	r7, r3
 8006648:	42be      	cmp	r6, r7
 800664a:	680b      	ldr	r3, [r1, #0]
 800664c:	4682      	mov	sl, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4690      	mov	r8, r2
 8006652:	d82d      	bhi.n	80066b0 <__ssputs_r+0x70>
 8006654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006658:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800665c:	d026      	beq.n	80066ac <__ssputs_r+0x6c>
 800665e:	6965      	ldr	r5, [r4, #20]
 8006660:	6909      	ldr	r1, [r1, #16]
 8006662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006666:	eba3 0901 	sub.w	r9, r3, r1
 800666a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800666e:	1c7b      	adds	r3, r7, #1
 8006670:	444b      	add	r3, r9
 8006672:	106d      	asrs	r5, r5, #1
 8006674:	429d      	cmp	r5, r3
 8006676:	bf38      	it	cc
 8006678:	461d      	movcc	r5, r3
 800667a:	0553      	lsls	r3, r2, #21
 800667c:	d527      	bpl.n	80066ce <__ssputs_r+0x8e>
 800667e:	4629      	mov	r1, r5
 8006680:	f7ff ff52 	bl	8006528 <_malloc_r>
 8006684:	4606      	mov	r6, r0
 8006686:	b360      	cbz	r0, 80066e2 <__ssputs_r+0xa2>
 8006688:	6921      	ldr	r1, [r4, #16]
 800668a:	464a      	mov	r2, r9
 800668c:	f7ff fed2 	bl	8006434 <memcpy>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	6126      	str	r6, [r4, #16]
 800669e:	6165      	str	r5, [r4, #20]
 80066a0:	444e      	add	r6, r9
 80066a2:	eba5 0509 	sub.w	r5, r5, r9
 80066a6:	6026      	str	r6, [r4, #0]
 80066a8:	60a5      	str	r5, [r4, #8]
 80066aa:	463e      	mov	r6, r7
 80066ac:	42be      	cmp	r6, r7
 80066ae:	d900      	bls.n	80066b2 <__ssputs_r+0x72>
 80066b0:	463e      	mov	r6, r7
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	4632      	mov	r2, r6
 80066b6:	4641      	mov	r1, r8
 80066b8:	f000 faa8 	bl	8006c0c <memmove>
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	1b9b      	subs	r3, r3, r6
 80066c0:	60a3      	str	r3, [r4, #8]
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	4433      	add	r3, r6
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	2000      	movs	r0, #0
 80066ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ce:	462a      	mov	r2, r5
 80066d0:	f000 fac6 	bl	8006c60 <_realloc_r>
 80066d4:	4606      	mov	r6, r0
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d1e0      	bne.n	800669c <__ssputs_r+0x5c>
 80066da:	6921      	ldr	r1, [r4, #16]
 80066dc:	4650      	mov	r0, sl
 80066de:	f7ff feb7 	bl	8006450 <_free_r>
 80066e2:	230c      	movs	r3, #12
 80066e4:	f8ca 3000 	str.w	r3, [sl]
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e7e9      	b.n	80066ca <__ssputs_r+0x8a>
	...

080066f8 <_svfiprintf_r>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	4698      	mov	r8, r3
 80066fe:	898b      	ldrh	r3, [r1, #12]
 8006700:	061b      	lsls	r3, r3, #24
 8006702:	b09d      	sub	sp, #116	@ 0x74
 8006704:	4607      	mov	r7, r0
 8006706:	460d      	mov	r5, r1
 8006708:	4614      	mov	r4, r2
 800670a:	d510      	bpl.n	800672e <_svfiprintf_r+0x36>
 800670c:	690b      	ldr	r3, [r1, #16]
 800670e:	b973      	cbnz	r3, 800672e <_svfiprintf_r+0x36>
 8006710:	2140      	movs	r1, #64	@ 0x40
 8006712:	f7ff ff09 	bl	8006528 <_malloc_r>
 8006716:	6028      	str	r0, [r5, #0]
 8006718:	6128      	str	r0, [r5, #16]
 800671a:	b930      	cbnz	r0, 800672a <_svfiprintf_r+0x32>
 800671c:	230c      	movs	r3, #12
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	f04f 30ff 	mov.w	r0, #4294967295
 8006724:	b01d      	add	sp, #116	@ 0x74
 8006726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672a:	2340      	movs	r3, #64	@ 0x40
 800672c:	616b      	str	r3, [r5, #20]
 800672e:	2300      	movs	r3, #0
 8006730:	9309      	str	r3, [sp, #36]	@ 0x24
 8006732:	2320      	movs	r3, #32
 8006734:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006738:	f8cd 800c 	str.w	r8, [sp, #12]
 800673c:	2330      	movs	r3, #48	@ 0x30
 800673e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80068dc <_svfiprintf_r+0x1e4>
 8006742:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006746:	f04f 0901 	mov.w	r9, #1
 800674a:	4623      	mov	r3, r4
 800674c:	469a      	mov	sl, r3
 800674e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006752:	b10a      	cbz	r2, 8006758 <_svfiprintf_r+0x60>
 8006754:	2a25      	cmp	r2, #37	@ 0x25
 8006756:	d1f9      	bne.n	800674c <_svfiprintf_r+0x54>
 8006758:	ebba 0b04 	subs.w	fp, sl, r4
 800675c:	d00b      	beq.n	8006776 <_svfiprintf_r+0x7e>
 800675e:	465b      	mov	r3, fp
 8006760:	4622      	mov	r2, r4
 8006762:	4629      	mov	r1, r5
 8006764:	4638      	mov	r0, r7
 8006766:	f7ff ff6b 	bl	8006640 <__ssputs_r>
 800676a:	3001      	adds	r0, #1
 800676c:	f000 80a7 	beq.w	80068be <_svfiprintf_r+0x1c6>
 8006770:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006772:	445a      	add	r2, fp
 8006774:	9209      	str	r2, [sp, #36]	@ 0x24
 8006776:	f89a 3000 	ldrb.w	r3, [sl]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 809f 	beq.w	80068be <_svfiprintf_r+0x1c6>
 8006780:	2300      	movs	r3, #0
 8006782:	f04f 32ff 	mov.w	r2, #4294967295
 8006786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800678a:	f10a 0a01 	add.w	sl, sl, #1
 800678e:	9304      	str	r3, [sp, #16]
 8006790:	9307      	str	r3, [sp, #28]
 8006792:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006796:	931a      	str	r3, [sp, #104]	@ 0x68
 8006798:	4654      	mov	r4, sl
 800679a:	2205      	movs	r2, #5
 800679c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a0:	484e      	ldr	r0, [pc, #312]	@ (80068dc <_svfiprintf_r+0x1e4>)
 80067a2:	f7f9 fd25 	bl	80001f0 <memchr>
 80067a6:	9a04      	ldr	r2, [sp, #16]
 80067a8:	b9d8      	cbnz	r0, 80067e2 <_svfiprintf_r+0xea>
 80067aa:	06d0      	lsls	r0, r2, #27
 80067ac:	bf44      	itt	mi
 80067ae:	2320      	movmi	r3, #32
 80067b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067b4:	0711      	lsls	r1, r2, #28
 80067b6:	bf44      	itt	mi
 80067b8:	232b      	movmi	r3, #43	@ 0x2b
 80067ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067be:	f89a 3000 	ldrb.w	r3, [sl]
 80067c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80067c4:	d015      	beq.n	80067f2 <_svfiprintf_r+0xfa>
 80067c6:	9a07      	ldr	r2, [sp, #28]
 80067c8:	4654      	mov	r4, sl
 80067ca:	2000      	movs	r0, #0
 80067cc:	f04f 0c0a 	mov.w	ip, #10
 80067d0:	4621      	mov	r1, r4
 80067d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067d6:	3b30      	subs	r3, #48	@ 0x30
 80067d8:	2b09      	cmp	r3, #9
 80067da:	d94b      	bls.n	8006874 <_svfiprintf_r+0x17c>
 80067dc:	b1b0      	cbz	r0, 800680c <_svfiprintf_r+0x114>
 80067de:	9207      	str	r2, [sp, #28]
 80067e0:	e014      	b.n	800680c <_svfiprintf_r+0x114>
 80067e2:	eba0 0308 	sub.w	r3, r0, r8
 80067e6:	fa09 f303 	lsl.w	r3, r9, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	46a2      	mov	sl, r4
 80067f0:	e7d2      	b.n	8006798 <_svfiprintf_r+0xa0>
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	1d19      	adds	r1, r3, #4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	9103      	str	r1, [sp, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bfbb      	ittet	lt
 80067fe:	425b      	neglt	r3, r3
 8006800:	f042 0202 	orrlt.w	r2, r2, #2
 8006804:	9307      	strge	r3, [sp, #28]
 8006806:	9307      	strlt	r3, [sp, #28]
 8006808:	bfb8      	it	lt
 800680a:	9204      	strlt	r2, [sp, #16]
 800680c:	7823      	ldrb	r3, [r4, #0]
 800680e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006810:	d10a      	bne.n	8006828 <_svfiprintf_r+0x130>
 8006812:	7863      	ldrb	r3, [r4, #1]
 8006814:	2b2a      	cmp	r3, #42	@ 0x2a
 8006816:	d132      	bne.n	800687e <_svfiprintf_r+0x186>
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	9203      	str	r2, [sp, #12]
 8006820:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006824:	3402      	adds	r4, #2
 8006826:	9305      	str	r3, [sp, #20]
 8006828:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80068ec <_svfiprintf_r+0x1f4>
 800682c:	7821      	ldrb	r1, [r4, #0]
 800682e:	2203      	movs	r2, #3
 8006830:	4650      	mov	r0, sl
 8006832:	f7f9 fcdd 	bl	80001f0 <memchr>
 8006836:	b138      	cbz	r0, 8006848 <_svfiprintf_r+0x150>
 8006838:	9b04      	ldr	r3, [sp, #16]
 800683a:	eba0 000a 	sub.w	r0, r0, sl
 800683e:	2240      	movs	r2, #64	@ 0x40
 8006840:	4082      	lsls	r2, r0
 8006842:	4313      	orrs	r3, r2
 8006844:	3401      	adds	r4, #1
 8006846:	9304      	str	r3, [sp, #16]
 8006848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684c:	4824      	ldr	r0, [pc, #144]	@ (80068e0 <_svfiprintf_r+0x1e8>)
 800684e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006852:	2206      	movs	r2, #6
 8006854:	f7f9 fccc 	bl	80001f0 <memchr>
 8006858:	2800      	cmp	r0, #0
 800685a:	d036      	beq.n	80068ca <_svfiprintf_r+0x1d2>
 800685c:	4b21      	ldr	r3, [pc, #132]	@ (80068e4 <_svfiprintf_r+0x1ec>)
 800685e:	bb1b      	cbnz	r3, 80068a8 <_svfiprintf_r+0x1b0>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	3307      	adds	r3, #7
 8006864:	f023 0307 	bic.w	r3, r3, #7
 8006868:	3308      	adds	r3, #8
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686e:	4433      	add	r3, r6
 8006870:	9309      	str	r3, [sp, #36]	@ 0x24
 8006872:	e76a      	b.n	800674a <_svfiprintf_r+0x52>
 8006874:	fb0c 3202 	mla	r2, ip, r2, r3
 8006878:	460c      	mov	r4, r1
 800687a:	2001      	movs	r0, #1
 800687c:	e7a8      	b.n	80067d0 <_svfiprintf_r+0xd8>
 800687e:	2300      	movs	r3, #0
 8006880:	3401      	adds	r4, #1
 8006882:	9305      	str	r3, [sp, #20]
 8006884:	4619      	mov	r1, r3
 8006886:	f04f 0c0a 	mov.w	ip, #10
 800688a:	4620      	mov	r0, r4
 800688c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006890:	3a30      	subs	r2, #48	@ 0x30
 8006892:	2a09      	cmp	r2, #9
 8006894:	d903      	bls.n	800689e <_svfiprintf_r+0x1a6>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0c6      	beq.n	8006828 <_svfiprintf_r+0x130>
 800689a:	9105      	str	r1, [sp, #20]
 800689c:	e7c4      	b.n	8006828 <_svfiprintf_r+0x130>
 800689e:	fb0c 2101 	mla	r1, ip, r1, r2
 80068a2:	4604      	mov	r4, r0
 80068a4:	2301      	movs	r3, #1
 80068a6:	e7f0      	b.n	800688a <_svfiprintf_r+0x192>
 80068a8:	ab03      	add	r3, sp, #12
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462a      	mov	r2, r5
 80068ae:	4b0e      	ldr	r3, [pc, #56]	@ (80068e8 <_svfiprintf_r+0x1f0>)
 80068b0:	a904      	add	r1, sp, #16
 80068b2:	4638      	mov	r0, r7
 80068b4:	f3af 8000 	nop.w
 80068b8:	1c42      	adds	r2, r0, #1
 80068ba:	4606      	mov	r6, r0
 80068bc:	d1d6      	bne.n	800686c <_svfiprintf_r+0x174>
 80068be:	89ab      	ldrh	r3, [r5, #12]
 80068c0:	065b      	lsls	r3, r3, #25
 80068c2:	f53f af2d 	bmi.w	8006720 <_svfiprintf_r+0x28>
 80068c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068c8:	e72c      	b.n	8006724 <_svfiprintf_r+0x2c>
 80068ca:	ab03      	add	r3, sp, #12
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	462a      	mov	r2, r5
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <_svfiprintf_r+0x1f0>)
 80068d2:	a904      	add	r1, sp, #16
 80068d4:	4638      	mov	r0, r7
 80068d6:	f000 f879 	bl	80069cc <_printf_i>
 80068da:	e7ed      	b.n	80068b8 <_svfiprintf_r+0x1c0>
 80068dc:	08006de0 	.word	0x08006de0
 80068e0:	08006dea 	.word	0x08006dea
 80068e4:	00000000 	.word	0x00000000
 80068e8:	08006641 	.word	0x08006641
 80068ec:	08006de6 	.word	0x08006de6

080068f0 <_printf_common>:
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	4616      	mov	r6, r2
 80068f6:	4698      	mov	r8, r3
 80068f8:	688a      	ldr	r2, [r1, #8]
 80068fa:	690b      	ldr	r3, [r1, #16]
 80068fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006900:	4293      	cmp	r3, r2
 8006902:	bfb8      	it	lt
 8006904:	4613      	movlt	r3, r2
 8006906:	6033      	str	r3, [r6, #0]
 8006908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800690c:	4607      	mov	r7, r0
 800690e:	460c      	mov	r4, r1
 8006910:	b10a      	cbz	r2, 8006916 <_printf_common+0x26>
 8006912:	3301      	adds	r3, #1
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	0699      	lsls	r1, r3, #26
 800691a:	bf42      	ittt	mi
 800691c:	6833      	ldrmi	r3, [r6, #0]
 800691e:	3302      	addmi	r3, #2
 8006920:	6033      	strmi	r3, [r6, #0]
 8006922:	6825      	ldr	r5, [r4, #0]
 8006924:	f015 0506 	ands.w	r5, r5, #6
 8006928:	d106      	bne.n	8006938 <_printf_common+0x48>
 800692a:	f104 0a19 	add.w	sl, r4, #25
 800692e:	68e3      	ldr	r3, [r4, #12]
 8006930:	6832      	ldr	r2, [r6, #0]
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	42ab      	cmp	r3, r5
 8006936:	dc26      	bgt.n	8006986 <_printf_common+0x96>
 8006938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	3b00      	subs	r3, #0
 8006940:	bf18      	it	ne
 8006942:	2301      	movne	r3, #1
 8006944:	0692      	lsls	r2, r2, #26
 8006946:	d42b      	bmi.n	80069a0 <_printf_common+0xb0>
 8006948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800694c:	4641      	mov	r1, r8
 800694e:	4638      	mov	r0, r7
 8006950:	47c8      	blx	r9
 8006952:	3001      	adds	r0, #1
 8006954:	d01e      	beq.n	8006994 <_printf_common+0xa4>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	6922      	ldr	r2, [r4, #16]
 800695a:	f003 0306 	and.w	r3, r3, #6
 800695e:	2b04      	cmp	r3, #4
 8006960:	bf02      	ittt	eq
 8006962:	68e5      	ldreq	r5, [r4, #12]
 8006964:	6833      	ldreq	r3, [r6, #0]
 8006966:	1aed      	subeq	r5, r5, r3
 8006968:	68a3      	ldr	r3, [r4, #8]
 800696a:	bf0c      	ite	eq
 800696c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006970:	2500      	movne	r5, #0
 8006972:	4293      	cmp	r3, r2
 8006974:	bfc4      	itt	gt
 8006976:	1a9b      	subgt	r3, r3, r2
 8006978:	18ed      	addgt	r5, r5, r3
 800697a:	2600      	movs	r6, #0
 800697c:	341a      	adds	r4, #26
 800697e:	42b5      	cmp	r5, r6
 8006980:	d11a      	bne.n	80069b8 <_printf_common+0xc8>
 8006982:	2000      	movs	r0, #0
 8006984:	e008      	b.n	8006998 <_printf_common+0xa8>
 8006986:	2301      	movs	r3, #1
 8006988:	4652      	mov	r2, sl
 800698a:	4641      	mov	r1, r8
 800698c:	4638      	mov	r0, r7
 800698e:	47c8      	blx	r9
 8006990:	3001      	adds	r0, #1
 8006992:	d103      	bne.n	800699c <_printf_common+0xac>
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699c:	3501      	adds	r5, #1
 800699e:	e7c6      	b.n	800692e <_printf_common+0x3e>
 80069a0:	18e1      	adds	r1, r4, r3
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	2030      	movs	r0, #48	@ 0x30
 80069a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069aa:	4422      	add	r2, r4
 80069ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069b4:	3302      	adds	r3, #2
 80069b6:	e7c7      	b.n	8006948 <_printf_common+0x58>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4622      	mov	r2, r4
 80069bc:	4641      	mov	r1, r8
 80069be:	4638      	mov	r0, r7
 80069c0:	47c8      	blx	r9
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0e6      	beq.n	8006994 <_printf_common+0xa4>
 80069c6:	3601      	adds	r6, #1
 80069c8:	e7d9      	b.n	800697e <_printf_common+0x8e>
	...

080069cc <_printf_i>:
 80069cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069d0:	7e0f      	ldrb	r7, [r1, #24]
 80069d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069d4:	2f78      	cmp	r7, #120	@ 0x78
 80069d6:	4691      	mov	r9, r2
 80069d8:	4680      	mov	r8, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	469a      	mov	sl, r3
 80069de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069e2:	d807      	bhi.n	80069f4 <_printf_i+0x28>
 80069e4:	2f62      	cmp	r7, #98	@ 0x62
 80069e6:	d80a      	bhi.n	80069fe <_printf_i+0x32>
 80069e8:	2f00      	cmp	r7, #0
 80069ea:	f000 80d2 	beq.w	8006b92 <_printf_i+0x1c6>
 80069ee:	2f58      	cmp	r7, #88	@ 0x58
 80069f0:	f000 80b9 	beq.w	8006b66 <_printf_i+0x19a>
 80069f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069fc:	e03a      	b.n	8006a74 <_printf_i+0xa8>
 80069fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a02:	2b15      	cmp	r3, #21
 8006a04:	d8f6      	bhi.n	80069f4 <_printf_i+0x28>
 8006a06:	a101      	add	r1, pc, #4	@ (adr r1, 8006a0c <_printf_i+0x40>)
 8006a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a0c:	08006a65 	.word	0x08006a65
 8006a10:	08006a79 	.word	0x08006a79
 8006a14:	080069f5 	.word	0x080069f5
 8006a18:	080069f5 	.word	0x080069f5
 8006a1c:	080069f5 	.word	0x080069f5
 8006a20:	080069f5 	.word	0x080069f5
 8006a24:	08006a79 	.word	0x08006a79
 8006a28:	080069f5 	.word	0x080069f5
 8006a2c:	080069f5 	.word	0x080069f5
 8006a30:	080069f5 	.word	0x080069f5
 8006a34:	080069f5 	.word	0x080069f5
 8006a38:	08006b79 	.word	0x08006b79
 8006a3c:	08006aa3 	.word	0x08006aa3
 8006a40:	08006b33 	.word	0x08006b33
 8006a44:	080069f5 	.word	0x080069f5
 8006a48:	080069f5 	.word	0x080069f5
 8006a4c:	08006b9b 	.word	0x08006b9b
 8006a50:	080069f5 	.word	0x080069f5
 8006a54:	08006aa3 	.word	0x08006aa3
 8006a58:	080069f5 	.word	0x080069f5
 8006a5c:	080069f5 	.word	0x080069f5
 8006a60:	08006b3b 	.word	0x08006b3b
 8006a64:	6833      	ldr	r3, [r6, #0]
 8006a66:	1d1a      	adds	r2, r3, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6032      	str	r2, [r6, #0]
 8006a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a74:	2301      	movs	r3, #1
 8006a76:	e09d      	b.n	8006bb4 <_printf_i+0x1e8>
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	6820      	ldr	r0, [r4, #0]
 8006a7c:	1d19      	adds	r1, r3, #4
 8006a7e:	6031      	str	r1, [r6, #0]
 8006a80:	0606      	lsls	r6, r0, #24
 8006a82:	d501      	bpl.n	8006a88 <_printf_i+0xbc>
 8006a84:	681d      	ldr	r5, [r3, #0]
 8006a86:	e003      	b.n	8006a90 <_printf_i+0xc4>
 8006a88:	0645      	lsls	r5, r0, #25
 8006a8a:	d5fb      	bpl.n	8006a84 <_printf_i+0xb8>
 8006a8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	da03      	bge.n	8006a9c <_printf_i+0xd0>
 8006a94:	232d      	movs	r3, #45	@ 0x2d
 8006a96:	426d      	negs	r5, r5
 8006a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a9c:	4859      	ldr	r0, [pc, #356]	@ (8006c04 <_printf_i+0x238>)
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	e011      	b.n	8006ac6 <_printf_i+0xfa>
 8006aa2:	6821      	ldr	r1, [r4, #0]
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	0608      	lsls	r0, r1, #24
 8006aa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006aac:	d402      	bmi.n	8006ab4 <_printf_i+0xe8>
 8006aae:	0649      	lsls	r1, r1, #25
 8006ab0:	bf48      	it	mi
 8006ab2:	b2ad      	uxthmi	r5, r5
 8006ab4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ab6:	4853      	ldr	r0, [pc, #332]	@ (8006c04 <_printf_i+0x238>)
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	bf14      	ite	ne
 8006abc:	230a      	movne	r3, #10
 8006abe:	2308      	moveq	r3, #8
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ac6:	6866      	ldr	r6, [r4, #4]
 8006ac8:	60a6      	str	r6, [r4, #8]
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	bfa2      	ittt	ge
 8006ace:	6821      	ldrge	r1, [r4, #0]
 8006ad0:	f021 0104 	bicge.w	r1, r1, #4
 8006ad4:	6021      	strge	r1, [r4, #0]
 8006ad6:	b90d      	cbnz	r5, 8006adc <_printf_i+0x110>
 8006ad8:	2e00      	cmp	r6, #0
 8006ada:	d04b      	beq.n	8006b74 <_printf_i+0x1a8>
 8006adc:	4616      	mov	r6, r2
 8006ade:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ae2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ae6:	5dc7      	ldrb	r7, [r0, r7]
 8006ae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aec:	462f      	mov	r7, r5
 8006aee:	42bb      	cmp	r3, r7
 8006af0:	460d      	mov	r5, r1
 8006af2:	d9f4      	bls.n	8006ade <_printf_i+0x112>
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d10b      	bne.n	8006b10 <_printf_i+0x144>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	07df      	lsls	r7, r3, #31
 8006afc:	d508      	bpl.n	8006b10 <_printf_i+0x144>
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	6861      	ldr	r1, [r4, #4]
 8006b02:	4299      	cmp	r1, r3
 8006b04:	bfde      	ittt	le
 8006b06:	2330      	movle	r3, #48	@ 0x30
 8006b08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b10:	1b92      	subs	r2, r2, r6
 8006b12:	6122      	str	r2, [r4, #16]
 8006b14:	f8cd a000 	str.w	sl, [sp]
 8006b18:	464b      	mov	r3, r9
 8006b1a:	aa03      	add	r2, sp, #12
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f7ff fee6 	bl	80068f0 <_printf_common>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d14a      	bne.n	8006bbe <_printf_i+0x1f2>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	b004      	add	sp, #16
 8006b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	4833      	ldr	r0, [pc, #204]	@ (8006c08 <_printf_i+0x23c>)
 8006b3c:	2778      	movs	r7, #120	@ 0x78
 8006b3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	6831      	ldr	r1, [r6, #0]
 8006b46:	061f      	lsls	r7, r3, #24
 8006b48:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b4c:	d402      	bmi.n	8006b54 <_printf_i+0x188>
 8006b4e:	065f      	lsls	r7, r3, #25
 8006b50:	bf48      	it	mi
 8006b52:	b2ad      	uxthmi	r5, r5
 8006b54:	6031      	str	r1, [r6, #0]
 8006b56:	07d9      	lsls	r1, r3, #31
 8006b58:	bf44      	itt	mi
 8006b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b5e:	6023      	strmi	r3, [r4, #0]
 8006b60:	b11d      	cbz	r5, 8006b6a <_printf_i+0x19e>
 8006b62:	2310      	movs	r3, #16
 8006b64:	e7ac      	b.n	8006ac0 <_printf_i+0xf4>
 8006b66:	4827      	ldr	r0, [pc, #156]	@ (8006c04 <_printf_i+0x238>)
 8006b68:	e7e9      	b.n	8006b3e <_printf_i+0x172>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	f023 0320 	bic.w	r3, r3, #32
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	e7f6      	b.n	8006b62 <_printf_i+0x196>
 8006b74:	4616      	mov	r6, r2
 8006b76:	e7bd      	b.n	8006af4 <_printf_i+0x128>
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	6825      	ldr	r5, [r4, #0]
 8006b7c:	6961      	ldr	r1, [r4, #20]
 8006b7e:	1d18      	adds	r0, r3, #4
 8006b80:	6030      	str	r0, [r6, #0]
 8006b82:	062e      	lsls	r6, r5, #24
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0x1c0>
 8006b88:	6019      	str	r1, [r3, #0]
 8006b8a:	e002      	b.n	8006b92 <_printf_i+0x1c6>
 8006b8c:	0668      	lsls	r0, r5, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0x1bc>
 8006b90:	8019      	strh	r1, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	4616      	mov	r6, r2
 8006b98:	e7bc      	b.n	8006b14 <_printf_i+0x148>
 8006b9a:	6833      	ldr	r3, [r6, #0]
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7f9 fb22 	bl	80001f0 <memchr>
 8006bac:	b108      	cbz	r0, 8006bb2 <_printf_i+0x1e6>
 8006bae:	1b80      	subs	r0, r0, r6
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	6123      	str	r3, [r4, #16]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bbc:	e7aa      	b.n	8006b14 <_printf_i+0x148>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	47d0      	blx	sl
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0ad      	beq.n	8006b28 <_printf_i+0x15c>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	079b      	lsls	r3, r3, #30
 8006bd0:	d413      	bmi.n	8006bfa <_printf_i+0x22e>
 8006bd2:	68e0      	ldr	r0, [r4, #12]
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	bfb8      	it	lt
 8006bda:	4618      	movlt	r0, r3
 8006bdc:	e7a6      	b.n	8006b2c <_printf_i+0x160>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4632      	mov	r2, r6
 8006be2:	4649      	mov	r1, r9
 8006be4:	4640      	mov	r0, r8
 8006be6:	47d0      	blx	sl
 8006be8:	3001      	adds	r0, #1
 8006bea:	d09d      	beq.n	8006b28 <_printf_i+0x15c>
 8006bec:	3501      	adds	r5, #1
 8006bee:	68e3      	ldr	r3, [r4, #12]
 8006bf0:	9903      	ldr	r1, [sp, #12]
 8006bf2:	1a5b      	subs	r3, r3, r1
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	dcf2      	bgt.n	8006bde <_printf_i+0x212>
 8006bf8:	e7eb      	b.n	8006bd2 <_printf_i+0x206>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	f104 0619 	add.w	r6, r4, #25
 8006c00:	e7f5      	b.n	8006bee <_printf_i+0x222>
 8006c02:	bf00      	nop
 8006c04:	08006df1 	.word	0x08006df1
 8006c08:	08006e02 	.word	0x08006e02

08006c0c <memmove>:
 8006c0c:	4288      	cmp	r0, r1
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	eb01 0402 	add.w	r4, r1, r2
 8006c14:	d902      	bls.n	8006c1c <memmove+0x10>
 8006c16:	4284      	cmp	r4, r0
 8006c18:	4623      	mov	r3, r4
 8006c1a:	d807      	bhi.n	8006c2c <memmove+0x20>
 8006c1c:	1e43      	subs	r3, r0, #1
 8006c1e:	42a1      	cmp	r1, r4
 8006c20:	d008      	beq.n	8006c34 <memmove+0x28>
 8006c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c2a:	e7f8      	b.n	8006c1e <memmove+0x12>
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4601      	mov	r1, r0
 8006c30:	428a      	cmp	r2, r1
 8006c32:	d100      	bne.n	8006c36 <memmove+0x2a>
 8006c34:	bd10      	pop	{r4, pc}
 8006c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c3e:	e7f7      	b.n	8006c30 <memmove+0x24>

08006c40 <_sbrk_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d06      	ldr	r5, [pc, #24]	@ (8006c5c <_sbrk_r+0x1c>)
 8006c44:	2300      	movs	r3, #0
 8006c46:	4604      	mov	r4, r0
 8006c48:	4608      	mov	r0, r1
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	f7fb f856 	bl	8001cfc <_sbrk>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_sbrk_r+0x1a>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_sbrk_r+0x1a>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20004d1c 	.word	0x20004d1c

08006c60 <_realloc_r>:
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	4680      	mov	r8, r0
 8006c66:	4615      	mov	r5, r2
 8006c68:	460c      	mov	r4, r1
 8006c6a:	b921      	cbnz	r1, 8006c76 <_realloc_r+0x16>
 8006c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c70:	4611      	mov	r1, r2
 8006c72:	f7ff bc59 	b.w	8006528 <_malloc_r>
 8006c76:	b92a      	cbnz	r2, 8006c84 <_realloc_r+0x24>
 8006c78:	f7ff fbea 	bl	8006450 <_free_r>
 8006c7c:	2400      	movs	r4, #0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c84:	f000 f81a 	bl	8006cbc <_malloc_usable_size_r>
 8006c88:	4285      	cmp	r5, r0
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	d802      	bhi.n	8006c94 <_realloc_r+0x34>
 8006c8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006c92:	d8f4      	bhi.n	8006c7e <_realloc_r+0x1e>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4640      	mov	r0, r8
 8006c98:	f7ff fc46 	bl	8006528 <_malloc_r>
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d0ec      	beq.n	8006c7c <_realloc_r+0x1c>
 8006ca2:	42b5      	cmp	r5, r6
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	bf28      	it	cs
 8006caa:	4632      	movcs	r2, r6
 8006cac:	f7ff fbc2 	bl	8006434 <memcpy>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f7ff fbcc 	bl	8006450 <_free_r>
 8006cb8:	463c      	mov	r4, r7
 8006cba:	e7e0      	b.n	8006c7e <_realloc_r+0x1e>

08006cbc <_malloc_usable_size_r>:
 8006cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc0:	1f18      	subs	r0, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bfbc      	itt	lt
 8006cc6:	580b      	ldrlt	r3, [r1, r0]
 8006cc8:	18c0      	addlt	r0, r0, r3
 8006cca:	4770      	bx	lr

08006ccc <_init>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr

08006cd8 <_fini>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr
