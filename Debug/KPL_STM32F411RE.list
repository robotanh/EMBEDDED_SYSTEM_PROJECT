
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006010  08006010  00007010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  00008090  2**0
                  CONTENTS
  4 .ARM          00000008  080060ac  080060ac  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b4  080060b4  00008090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060b8  080060b8  000070b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080060bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c74  20000090  0800614c  00008090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d04  0800614c  00008d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bcb  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003685  00000000  00000000  0001ec8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00022310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f6d  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fdb  00000000  00000000  00024685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c2d  00000000  00000000  0003d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982e2  00000000  00000000  0005428d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  000ec5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f1c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ff8 	.word	0x08005ff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08005ff8 	.word	0x08005ff8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ScanColumns>:
SequenceState seqState = SEQ_IDLE;

void KeyPad_Init(void) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
}
uint8_t ScanColumns(uint8_t row) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
    switch (row) {
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b03      	cmp	r3, #3
 80004de:	f200 80c0 	bhi.w	8000662 <ScanColumns+0x192>
 80004e2:	a201      	add	r2, pc, #4	@ (adr r2, 80004e8 <ScanColumns+0x18>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000555 	.word	0x08000555
 80004f0:	080005af 	.word	0x080005af
 80004f4:	08000609 	.word	0x08000609
        case 0:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[0][0];
 80004f8:	2101      	movs	r1, #1
 80004fa:	4861      	ldr	r0, [pc, #388]	@ (8000680 <ScanColumns+0x1b0>)
 80004fc:	f001 fcce 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d101      	bne.n	800050a <ScanColumns+0x3a>
 8000506:	2343      	movs	r3, #67	@ 0x43
 8000508:	e0b5      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[0][1];
 800050a:	2102      	movs	r1, #2
 800050c:	485c      	ldr	r0, [pc, #368]	@ (8000680 <ScanColumns+0x1b0>)
 800050e:	f001 fcc5 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d101      	bne.n	800051c <ScanColumns+0x4c>
 8000518:	2337      	movs	r3, #55	@ 0x37
 800051a:	e0ac      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[0][2];
 800051c:	2104      	movs	r1, #4
 800051e:	4858      	ldr	r0, [pc, #352]	@ (8000680 <ScanColumns+0x1b0>)
 8000520:	f001 fcbc 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d101      	bne.n	800052e <ScanColumns+0x5e>
 800052a:	2334      	movs	r3, #52	@ 0x34
 800052c:	e0a3      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[0][3];
 800052e:	2108      	movs	r1, #8
 8000530:	4853      	ldr	r0, [pc, #332]	@ (8000680 <ScanColumns+0x1b0>)
 8000532:	f001 fcb3 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <ScanColumns+0x70>
 800053c:	2331      	movs	r3, #49	@ 0x31
 800053e:	e09a      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[0][4];
 8000540:	2110      	movs	r1, #16
 8000542:	484f      	ldr	r0, [pc, #316]	@ (8000680 <ScanColumns+0x1b0>)
 8000544:	f001 fcaa 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	f040 808b 	bne.w	8000666 <ScanColumns+0x196>
 8000550:	2341      	movs	r3, #65	@ 0x41
 8000552:	e090      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        case 1:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[1][0];
 8000554:	2101      	movs	r1, #1
 8000556:	484a      	ldr	r0, [pc, #296]	@ (8000680 <ScanColumns+0x1b0>)
 8000558:	f001 fca0 	bl	8001e9c <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <ScanColumns+0x96>
 8000562:	2330      	movs	r3, #48	@ 0x30
 8000564:	e087      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[1][1];
 8000566:	2102      	movs	r1, #2
 8000568:	4845      	ldr	r0, [pc, #276]	@ (8000680 <ScanColumns+0x1b0>)
 800056a:	f001 fc97 	bl	8001e9c <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <ScanColumns+0xa8>
 8000574:	2338      	movs	r3, #56	@ 0x38
 8000576:	e07e      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[1][2];
 8000578:	2104      	movs	r1, #4
 800057a:	4841      	ldr	r0, [pc, #260]	@ (8000680 <ScanColumns+0x1b0>)
 800057c:	f001 fc8e 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <ScanColumns+0xba>
 8000586:	2335      	movs	r3, #53	@ 0x35
 8000588:	e075      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[1][3];
 800058a:	2108      	movs	r1, #8
 800058c:	483c      	ldr	r0, [pc, #240]	@ (8000680 <ScanColumns+0x1b0>)
 800058e:	f001 fc85 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d101      	bne.n	800059c <ScanColumns+0xcc>
 8000598:	2332      	movs	r3, #50	@ 0x32
 800059a:	e06c      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[1][4];
 800059c:	2110      	movs	r1, #16
 800059e:	4838      	ldr	r0, [pc, #224]	@ (8000680 <ScanColumns+0x1b0>)
 80005a0:	f001 fc7c 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d15f      	bne.n	800066a <ScanColumns+0x19a>
 80005aa:	2342      	movs	r3, #66	@ 0x42
 80005ac:	e063      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        case 2:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[2][0];
 80005ae:	2101      	movs	r1, #1
 80005b0:	4833      	ldr	r0, [pc, #204]	@ (8000680 <ScanColumns+0x1b0>)
 80005b2:	f001 fc73 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d101      	bne.n	80005c0 <ScanColumns+0xf0>
 80005bc:	2345      	movs	r3, #69	@ 0x45
 80005be:	e05a      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[2][1];
 80005c0:	2102      	movs	r1, #2
 80005c2:	482f      	ldr	r0, [pc, #188]	@ (8000680 <ScanColumns+0x1b0>)
 80005c4:	f001 fc6a 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <ScanColumns+0x102>
 80005ce:	2339      	movs	r3, #57	@ 0x39
 80005d0:	e051      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[2][2];
 80005d2:	2104      	movs	r1, #4
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <ScanColumns+0x1b0>)
 80005d6:	f001 fc61 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <ScanColumns+0x114>
 80005e0:	2336      	movs	r3, #54	@ 0x36
 80005e2:	e048      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[2][3];
 80005e4:	2108      	movs	r1, #8
 80005e6:	4826      	ldr	r0, [pc, #152]	@ (8000680 <ScanColumns+0x1b0>)
 80005e8:	f001 fc58 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <ScanColumns+0x126>
 80005f2:	2333      	movs	r3, #51	@ 0x33
 80005f4:	e03f      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[2][4];
 80005f6:	2110      	movs	r1, #16
 80005f8:	4821      	ldr	r0, [pc, #132]	@ (8000680 <ScanColumns+0x1b0>)
 80005fa:	f001 fc4f 	bl	8001e9c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d134      	bne.n	800066e <ScanColumns+0x19e>
 8000604:	2344      	movs	r3, #68	@ 0x44
 8000606:	e036      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        case 3:
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) return keyMap[3][0];
 8000608:	2101      	movs	r1, #1
 800060a:	481d      	ldr	r0, [pc, #116]	@ (8000680 <ScanColumns+0x1b0>)
 800060c:	f001 fc46 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <ScanColumns+0x14a>
 8000616:	2354      	movs	r3, #84	@ 0x54
 8000618:	e02d      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) return keyMap[3][1];
 800061a:	2102      	movs	r1, #2
 800061c:	4818      	ldr	r0, [pc, #96]	@ (8000680 <ScanColumns+0x1b0>)
 800061e:	f001 fc3d 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <ScanColumns+0x15c>
 8000628:	2350      	movs	r3, #80	@ 0x50
 800062a:	e024      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) return keyMap[3][2];
 800062c:	2104      	movs	r1, #4
 800062e:	4814      	ldr	r0, [pc, #80]	@ (8000680 <ScanColumns+0x1b0>)
 8000630:	f001 fc34 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <ScanColumns+0x16e>
 800063a:	2324      	movs	r3, #36	@ 0x24
 800063c:	e01b      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET) return keyMap[3][3];
 800063e:	2108      	movs	r1, #8
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <ScanColumns+0x1b0>)
 8000642:	f001 fc2b 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d101      	bne.n	8000650 <ScanColumns+0x180>
 800064c:	234c      	movs	r3, #76	@ 0x4c
 800064e:	e012      	b.n	8000676 <ScanColumns+0x1a6>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET) return keyMap[3][4];
 8000650:	2110      	movs	r1, #16
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <ScanColumns+0x1b0>)
 8000654:	f001 fc22 	bl	8001e9c <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d109      	bne.n	8000672 <ScanColumns+0x1a2>
 800065e:	2346      	movs	r3, #70	@ 0x46
 8000660:	e009      	b.n	8000676 <ScanColumns+0x1a6>
            break;
        default:
            return 0xFF;
 8000662:	23ff      	movs	r3, #255	@ 0xff
 8000664:	e007      	b.n	8000676 <ScanColumns+0x1a6>
            break;
 8000666:	bf00      	nop
 8000668:	e004      	b.n	8000674 <ScanColumns+0x1a4>
            break;
 800066a:	bf00      	nop
 800066c:	e002      	b.n	8000674 <ScanColumns+0x1a4>
            break;
 800066e:	bf00      	nop
 8000670:	e000      	b.n	8000674 <ScanColumns+0x1a4>
            break;
 8000672:	bf00      	nop
    }
    return 0xFF;  // No key pressed
 8000674:	23ff      	movs	r3, #255	@ 0xff
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400

08000684 <KeyPad_Scan>:



uint8_t KeyPad_Scan(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
    uint8_t key;

    // Scan row 1
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	@ 0x40
 800068e:	482c      	ldr	r0, [pc, #176]	@ (8000740 <KeyPad_Scan+0xbc>)
 8000690:	f001 fc1c 	bl	8001ecc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800069a:	4829      	ldr	r0, [pc, #164]	@ (8000740 <KeyPad_Scan+0xbc>)
 800069c:	f001 fc16 	bl	8001ecc <HAL_GPIO_WritePin>
    key = ScanColumns(0);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff15 	bl	80004d0 <ScanColumns>
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2bff      	cmp	r3, #255	@ 0xff
 80006ae:	d001      	beq.n	80006b4 <KeyPad_Scan+0x30>
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	e041      	b.n	8000738 <KeyPad_Scan+0xb4>

    // Scan row 2
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	@ 0x80
 80006b8:	4821      	ldr	r0, [pc, #132]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006ba:	f001 fc07 	bl	8001ecc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80006c4:	481e      	ldr	r0, [pc, #120]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006c6:	f001 fc01 	bl	8001ecc <HAL_GPIO_WritePin>
    key = ScanColumns(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ff00 	bl	80004d0 <ScanColumns>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2bff      	cmp	r3, #255	@ 0xff
 80006d8:	d001      	beq.n	80006de <KeyPad_Scan+0x5a>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	e02c      	b.n	8000738 <KeyPad_Scan+0xb4>

    // Scan row 3
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006e6:	f001 fbf1 	bl	8001ecc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 80006f0:	4813      	ldr	r0, [pc, #76]	@ (8000740 <KeyPad_Scan+0xbc>)
 80006f2:	f001 fbeb 	bl	8001ecc <HAL_GPIO_WritePin>
    key = ScanColumns(2);
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff feea 	bl	80004d0 <ScanColumns>
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2bff      	cmp	r3, #255	@ 0xff
 8000704:	d001      	beq.n	800070a <KeyPad_Scan+0x86>
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	e016      	b.n	8000738 <KeyPad_Scan+0xb4>

    // Scan row 4
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000710:	480b      	ldr	r0, [pc, #44]	@ (8000740 <KeyPad_Scan+0xbc>)
 8000712:	f001 fbdb 	bl	8001ecc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800071c:	4808      	ldr	r0, [pc, #32]	@ (8000740 <KeyPad_Scan+0xbc>)
 800071e:	f001 fbd5 	bl	8001ecc <HAL_GPIO_WritePin>
    key = ScanColumns(3);
 8000722:	2003      	movs	r0, #3
 8000724:	f7ff fed4 	bl	80004d0 <ScanColumns>
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
    if (key != 0xFF) return key;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2bff      	cmp	r3, #255	@ 0xff
 8000730:	d001      	beq.n	8000736 <KeyPad_Scan+0xb2>
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	e000      	b.n	8000738 <KeyPad_Scan+0xb4>

    return 0xFF;  // No key pressed
 8000736:	23ff      	movs	r3, #255	@ 0xff
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40020400 	.word	0x40020400

08000744 <formatTotalLiters>:

void formatTotalLiters(uint32_t total, uint32_t* buffer1, uint32_t* buffer2)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	if (total < 100000000) {
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4a16      	ldr	r2, [pc, #88]	@ (80007ac <formatTotalLiters+0x68>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d815      	bhi.n	8000784 <formatTotalLiters+0x40>
		* buffer1 = total / 1000000;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <formatTotalLiters+0x6c>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	0c9a      	lsrs	r2, r3, #18
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	601a      	str	r2, [r3, #0]
		* buffer2 = total % 1000000;
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <formatTotalLiters+0x6c>)
 800076a:	fba3 1302 	umull	r1, r3, r3, r2
 800076e:	0c9b      	lsrs	r3, r3, #18
 8000770:	4910      	ldr	r1, [pc, #64]	@ (80007b4 <formatTotalLiters+0x70>)
 8000772:	fb01 f303 	mul.w	r3, r1, r3
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	6013      	str	r3, [r2, #0]
		LEDPointFlag = 3;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <formatTotalLiters+0x74>)
 800077e:	2203      	movs	r2, #3
 8000780:	601a      	str	r2, [r3, #0]
	} else {
		* buffer1 = total / 100000000;
		* buffer2 = 0;
		LEDPointFlag = 2;
	}
}
 8000782:	e00c      	b.n	800079e <formatTotalLiters+0x5a>
		* buffer1 = total / 100000000;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <formatTotalLiters+0x78>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	0e5a      	lsrs	r2, r3, #25
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	601a      	str	r2, [r3, #0]
		* buffer2 = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
		LEDPointFlag = 2;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <formatTotalLiters+0x74>)
 800079a:	2202      	movs	r2, #2
 800079c:	601a      	str	r2, [r3, #0]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	05f5e0ff 	.word	0x05f5e0ff
 80007b0:	431bde83 	.word	0x431bde83
 80007b4:	000f4240 	.word	0x000f4240
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	55e63b89 	.word	0x55e63b89

080007c0 <KeyLogic>:


void KeyLogic() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
    TickType_t currentMillis = xTaskGetTickCount();
 80007c6:	f003 ff69 	bl	800469c <xTaskGetTickCount>
 80007ca:	6078      	str	r0, [r7, #4]
    uint8_t currentKey = KeyPad_Scan();
 80007cc:	f7ff ff5a 	bl	8000684 <KeyPad_Scan>
 80007d0:	4603      	mov	r3, r0
 80007d2:	70fb      	strb	r3, [r7, #3]

    switch (keyState) {
 80007d4:	4bab      	ldr	r3, [pc, #684]	@ (8000a84 <KeyLogic+0x2c4>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d85a      	bhi.n	8000892 <KeyLogic+0xd2>
 80007dc:	a201      	add	r2, pc, #4	@ (adr r2, 80007e4 <KeyLogic+0x24>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	080007f5 	.word	0x080007f5
 80007e8:	0800080f 	.word	0x0800080f
 80007ec:	0800083b 	.word	0x0800083b
 80007f0:	0800086b 	.word	0x0800086b
        case KEY_IDLE:
            if (currentKey != 0xFF) {
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d044      	beq.n	8000884 <KeyLogic+0xc4>
                lastKeyPressed = currentKey;
 80007fa:	4aa3      	ldr	r2, [pc, #652]	@ (8000a88 <KeyLogic+0x2c8>)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	7013      	strb	r3, [r2, #0]
                lastDebounceTime = currentMillis;
 8000800:	4aa2      	ldr	r2, [pc, #648]	@ (8000a8c <KeyLogic+0x2cc>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
                keyState = KEY_DEBOUNCING;
 8000806:	4b9f      	ldr	r3, [pc, #636]	@ (8000a84 <KeyLogic+0x2c4>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800080c:	e03a      	b.n	8000884 <KeyLogic+0xc4>

        case KEY_DEBOUNCING:
            if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
 800080e:	4b9f      	ldr	r3, [pc, #636]	@ (8000a8c <KeyLogic+0x2cc>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b31      	cmp	r3, #49	@ 0x31
 8000818:	d936      	bls.n	8000888 <KeyLogic+0xc8>
                if (currentKey == lastKeyPressed) {
 800081a:	4b9b      	ldr	r3, [pc, #620]	@ (8000a88 <KeyLogic+0x2c8>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	78fa      	ldrb	r2, [r7, #3]
 8000820:	429a      	cmp	r2, r3
 8000822:	d106      	bne.n	8000832 <KeyLogic+0x72>
                    keyState = KEY_PRESSED;
 8000824:	4b97      	ldr	r3, [pc, #604]	@ (8000a84 <KeyLogic+0x2c4>)
 8000826:	2202      	movs	r2, #2
 8000828:	701a      	strb	r2, [r3, #0]
                    lastKeyPressTime = currentMillis;
 800082a:	4a99      	ldr	r2, [pc, #612]	@ (8000a90 <KeyLogic+0x2d0>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6013      	str	r3, [r2, #0]
                } else {
                    keyState = KEY_IDLE;
                }
            }
            break;
 8000830:	e02a      	b.n	8000888 <KeyLogic+0xc8>
                    keyState = KEY_IDLE;
 8000832:	4b94      	ldr	r3, [pc, #592]	@ (8000a84 <KeyLogic+0x2c4>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
            break;
 8000838:	e026      	b.n	8000888 <KeyLogic+0xc8>

        case KEY_PRESSED:
            if (currentKey == lastKeyPressed) {
 800083a:	4b93      	ldr	r3, [pc, #588]	@ (8000a88 <KeyLogic+0x2c8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	78fa      	ldrb	r2, [r7, #3]
 8000840:	429a      	cmp	r2, r3
 8000842:	d10a      	bne.n	800085a <KeyLogic+0x9a>
                if (currentMillis - lastKeyPressTime >= HOLD_DELAY) {
 8000844:	4b92      	ldr	r3, [pc, #584]	@ (8000a90 <KeyLogic+0x2d0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000850:	d31c      	bcc.n	800088c <KeyLogic+0xcc>
                    keyState = KEY_HOLDING;
 8000852:	4b8c      	ldr	r3, [pc, #560]	@ (8000a84 <KeyLogic+0x2c4>)
 8000854:	2203      	movs	r2, #3
 8000856:	701a      	strb	r2, [r3, #0]
                }
            } else {
                keyPressed = lastKeyPressed;
                keyState = KEY_IDLE;
            }
            break;
 8000858:	e018      	b.n	800088c <KeyLogic+0xcc>
                keyPressed = lastKeyPressed;
 800085a:	4b8b      	ldr	r3, [pc, #556]	@ (8000a88 <KeyLogic+0x2c8>)
 800085c:	781a      	ldrb	r2, [r3, #0]
 800085e:	4b8d      	ldr	r3, [pc, #564]	@ (8000a94 <KeyLogic+0x2d4>)
 8000860:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 8000862:	4b88      	ldr	r3, [pc, #544]	@ (8000a84 <KeyLogic+0x2c4>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
            break;
 8000868:	e010      	b.n	800088c <KeyLogic+0xcc>

        case KEY_HOLDING:
            if (currentKey != lastKeyPressed) {
 800086a:	4b87      	ldr	r3, [pc, #540]	@ (8000a88 <KeyLogic+0x2c8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	78fa      	ldrb	r2, [r7, #3]
 8000870:	429a      	cmp	r2, r3
 8000872:	d00d      	beq.n	8000890 <KeyLogic+0xd0>
                keyPressed = lastKeyPressed;
 8000874:	4b84      	ldr	r3, [pc, #528]	@ (8000a88 <KeyLogic+0x2c8>)
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	4b86      	ldr	r3, [pc, #536]	@ (8000a94 <KeyLogic+0x2d4>)
 800087a:	701a      	strb	r2, [r3, #0]
                keyState = KEY_IDLE;
 800087c:	4b81      	ldr	r3, [pc, #516]	@ (8000a84 <KeyLogic+0x2c4>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000882:	e005      	b.n	8000890 <KeyLogic+0xd0>
            break;
 8000884:	bf00      	nop
 8000886:	e004      	b.n	8000892 <KeyLogic+0xd2>
            break;
 8000888:	bf00      	nop
 800088a:	e002      	b.n	8000892 <KeyLogic+0xd2>
            break;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <KeyLogic+0xd2>
            break;
 8000890:	bf00      	nop
    }

    if (keyPressed != 0xFF) {
 8000892:	4b80      	ldr	r3, [pc, #512]	@ (8000a94 <KeyLogic+0x2d4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2bff      	cmp	r3, #255	@ 0xff
 8000898:	f000 8130 	beq.w	8000afc <KeyLogic+0x33c>
		if (seqState == SEQ_NUMBER) {
 800089c:	4b7e      	ldr	r3, [pc, #504]	@ (8000a98 <KeyLogic+0x2d8>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b06      	cmp	r3, #6
 80008a2:	d12a      	bne.n	80008fa <KeyLogic+0x13a>
			if (keyPressed >= '0' && keyPressed <= '9') {
 80008a4:	4b7b      	ldr	r3, [pc, #492]	@ (8000a94 <KeyLogic+0x2d4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80008aa:	d91c      	bls.n	80008e6 <KeyLogic+0x126>
 80008ac:	4b79      	ldr	r3, [pc, #484]	@ (8000a94 <KeyLogic+0x2d4>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b39      	cmp	r3, #57	@ 0x39
 80008b2:	d818      	bhi.n	80008e6 <KeyLogic+0x126>
				if (numberOfDigits < 6) {
 80008b4:	4b79      	ldr	r3, [pc, #484]	@ (8000a9c <KeyLogic+0x2dc>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	f200 811c 	bhi.w	8000af6 <KeyLogic+0x336>
					accumulatedNumber = accumulatedNumber * 10 + (keyPressed - '0');
 80008be:	4b78      	ldr	r3, [pc, #480]	@ (8000aa0 <KeyLogic+0x2e0>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b71      	ldr	r3, [pc, #452]	@ (8000a94 <KeyLogic+0x2d4>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	3b30      	subs	r3, #48	@ 0x30
 80008d4:	4a72      	ldr	r2, [pc, #456]	@ (8000aa0 <KeyLogic+0x2e0>)
 80008d6:	6013      	str	r3, [r2, #0]
					numberOfDigits++;
 80008d8:	4b70      	ldr	r3, [pc, #448]	@ (8000a9c <KeyLogic+0x2dc>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b6e      	ldr	r3, [pc, #440]	@ (8000a9c <KeyLogic+0x2dc>)
 80008e2:	701a      	strb	r2, [r3, #0]
				if (numberOfDigits < 6) {
 80008e4:	e107      	b.n	8000af6 <KeyLogic+0x336>
				}
			} else {
				seqState = SEQ_IDLE;
 80008e6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a98 <KeyLogic+0x2d8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
				numberOfDigits = 0;
 80008ec:	4b6b      	ldr	r3, [pc, #428]	@ (8000a9c <KeyLogic+0x2dc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
				accumulatedNumber = 0;
 80008f2:	4b6b      	ldr	r3, [pc, #428]	@ (8000aa0 <KeyLogic+0x2e0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	e0fd      	b.n	8000af6 <KeyLogic+0x336>
			}
		} else {
		switch (keyPressed) {
 80008fa:	4b66      	ldr	r3, [pc, #408]	@ (8000a94 <KeyLogic+0x2d4>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3b24      	subs	r3, #36	@ 0x24
 8000900:	2b30      	cmp	r3, #48	@ 0x30
 8000902:	f200 80df 	bhi.w	8000ac4 <KeyLogic+0x304>
 8000906:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <KeyLogic+0x14c>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000a3b 	.word	0x08000a3b
 8000910:	08000ac5 	.word	0x08000ac5
 8000914:	08000ac5 	.word	0x08000ac5
 8000918:	08000ac5 	.word	0x08000ac5
 800091c:	08000ac5 	.word	0x08000ac5
 8000920:	08000ac5 	.word	0x08000ac5
 8000924:	08000ac5 	.word	0x08000ac5
 8000928:	08000ac5 	.word	0x08000ac5
 800092c:	08000ac5 	.word	0x08000ac5
 8000930:	08000ac5 	.word	0x08000ac5
 8000934:	08000ac5 	.word	0x08000ac5
 8000938:	08000ac5 	.word	0x08000ac5
 800093c:	08000ac5 	.word	0x08000ac5
 8000940:	08000ac5 	.word	0x08000ac5
 8000944:	08000ac5 	.word	0x08000ac5
 8000948:	08000ac5 	.word	0x08000ac5
 800094c:	08000ac5 	.word	0x08000ac5
 8000950:	08000ac5 	.word	0x08000ac5
 8000954:	08000ac5 	.word	0x08000ac5
 8000958:	08000ac5 	.word	0x08000ac5
 800095c:	08000ac5 	.word	0x08000ac5
 8000960:	08000ac5 	.word	0x08000ac5
 8000964:	08000ac5 	.word	0x08000ac5
 8000968:	08000ac5 	.word	0x08000ac5
 800096c:	08000ac5 	.word	0x08000ac5
 8000970:	08000ac5 	.word	0x08000ac5
 8000974:	08000ac5 	.word	0x08000ac5
 8000978:	08000ac5 	.word	0x08000ac5
 800097c:	08000ac5 	.word	0x08000ac5
 8000980:	080009d1 	.word	0x080009d1
 8000984:	080009e7 	.word	0x080009e7
 8000988:	080009fb 	.word	0x080009fb
 800098c:	08000a6b 	.word	0x08000a6b
 8000990:	08000a0f 	.word	0x08000a0f
 8000994:	08000aad 	.word	0x08000aad
 8000998:	08000ac5 	.word	0x08000ac5
 800099c:	08000ac5 	.word	0x08000ac5
 80009a0:	08000ac5 	.word	0x08000ac5
 80009a4:	08000ac5 	.word	0x08000ac5
 80009a8:	08000ac5 	.word	0x08000ac5
 80009ac:	08000a53 	.word	0x08000a53
 80009b0:	08000ac5 	.word	0x08000ac5
 80009b4:	08000ac5 	.word	0x08000ac5
 80009b8:	08000ac5 	.word	0x08000ac5
 80009bc:	08000ac5 	.word	0x08000ac5
 80009c0:	08000ac5 	.word	0x08000ac5
 80009c4:	08000ac5 	.word	0x08000ac5
 80009c8:	08000ac5 	.word	0x08000ac5
 80009cc:	08000a23 	.word	0x08000a23
			case 'A':
				SevenSegBuffer[0] = 0;
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 10000;
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009dc:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 0;
 80009de:	4b31      	ldr	r3, [pc, #196]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
				break;
 80009e4:	e087      	b.n	8000af6 <KeyLogic+0x336>
			case 'B':
				SevenSegBuffer[0] = 0;
 80009e6:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 100000;
 80009ec:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009ee:	4a2e      	ldr	r2, [pc, #184]	@ (8000aa8 <KeyLogic+0x2e8>)
 80009f0:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 0;
 80009f2:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
				break;
 80009f8:	e07d      	b.n	8000af6 <KeyLogic+0x336>
			case 'C':
				SevenSegBuffer[0] = 0;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <KeyLogic+0x2e4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 0;
 8000a00:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <KeyLogic+0x2e4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 1;
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <KeyLogic+0x2e4>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	609a      	str	r2, [r3, #8]
				break;
 8000a0c:	e073      	b.n	8000af6 <KeyLogic+0x336>
			case 'E':
				SevenSegBuffer[0] = 0;
 8000a0e:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <KeyLogic+0x2e4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
				SevenSegBuffer[1] = 0;
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <KeyLogic+0x2e4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
				SevenSegBuffer[2] = 100;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <KeyLogic+0x2e4>)
 8000a1c:	2264      	movs	r2, #100	@ 0x64
 8000a1e:	609a      	str	r2, [r3, #8]
				break;
 8000a20:	e069      	b.n	8000af6 <KeyLogic+0x336>
			case 'T':
				if (seqState == SEQ_IDLE) {
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <KeyLogic+0x272>
					seqState = SEQ_PRESSED_T;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000a30:	e061      	b.n	8000af6 <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
				break;
 8000a38:	e05d      	b.n	8000af6 <KeyLogic+0x336>
			case '$':
				if (seqState == SEQ_PRESSED_T) {
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d103      	bne.n	8000a4a <KeyLogic+0x28a>
					seqState = SEQ_PRESSED_T_$;
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a44:	2203      	movs	r2, #3
 8000a46:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000a48:	e055      	b.n	8000af6 <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
				break;
 8000a50:	e051      	b.n	8000af6 <KeyLogic+0x336>
			case 'L':
				if (seqState == SEQ_PRESSED_T) {
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d103      	bne.n	8000a62 <KeyLogic+0x2a2>
					seqState = SEQ_PRESSED_T_L;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000a60:	e049      	b.n	8000af6 <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
				break;
 8000a68:	e045      	b.n	8000af6 <KeyLogic+0x336>
			case 'D':
				if (seqState == SEQ_PRESSED_T) {
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <KeyLogic+0x2ba>
					seqState = SEQ_PRESSED_T_F3;
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a74:	2204      	movs	r2, #4
 8000a76:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000a78:	e03d      	b.n	8000af6 <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <KeyLogic+0x2d8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
				break;
 8000a80:	e039      	b.n	8000af6 <KeyLogic+0x336>
 8000a82:	bf00      	nop
 8000a84:	200000c4 	.word	0x200000c4
 8000a88:	20000001 	.word	0x20000001
 8000a8c:	200000ac 	.word	0x200000ac
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	20000000 	.word	0x20000000
 8000a98:	200000c5 	.word	0x200000c5
 8000a9c:	200000b8 	.word	0x200000b8
 8000aa0:	200000b4 	.word	0x200000b4
 8000aa4:	2000001c 	.word	0x2000001c
 8000aa8:	000186a0 	.word	0x000186a0
			case 'F':
				if (seqState == SEQ_PRESSED_T) {
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <KeyLogic+0x344>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d103      	bne.n	8000abc <KeyLogic+0x2fc>
					seqState = SEQ_PRESSED_T_F4;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <KeyLogic+0x344>)
 8000ab6:	2205      	movs	r2, #5
 8000ab8:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000aba:	e01c      	b.n	8000af6 <KeyLogic+0x336>
					seqState = SEQ_IDLE;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <KeyLogic+0x344>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
				break;
 8000ac2:	e018      	b.n	8000af6 <KeyLogic+0x336>
			default:
				if (keyPressed >= '0' && keyPressed <= '9') {
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <KeyLogic+0x348>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000aca:	d910      	bls.n	8000aee <KeyLogic+0x32e>
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <KeyLogic+0x348>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b39      	cmp	r3, #57	@ 0x39
 8000ad2:	d80c      	bhi.n	8000aee <KeyLogic+0x32e>
					seqState = SEQ_NUMBER;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <KeyLogic+0x344>)
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	701a      	strb	r2, [r3, #0]
					accumulatedNumber = keyPressed - '0';
 8000ada:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <KeyLogic+0x348>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3b30      	subs	r3, #48	@ 0x30
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <KeyLogic+0x34c>)
 8000ae4:	601a      	str	r2, [r3, #0]
					numberOfDigits = 1;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <KeyLogic+0x350>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
				} else {
					seqState = SEQ_IDLE;
				}
				break;
 8000aec:	e002      	b.n	8000af4 <KeyLogic+0x334>
					seqState = SEQ_IDLE;
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <KeyLogic+0x344>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
				break;
 8000af4:	bf00      	nop
			}
		}
	keyPressed = 0xFF;
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <KeyLogic+0x348>)
 8000af8:	22ff      	movs	r2, #255	@ 0xff
 8000afa:	701a      	strb	r2, [r3, #0]
    }
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000c5 	.word	0x200000c5
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	200000b4 	.word	0x200000b4
 8000b10:	200000b8 	.word	0x200000b8

08000b14 <KeyLogic_Action>:
void KeyLogic_Action() {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    switch (seqState) {
 8000b18:	4b3a      	ldr	r3, [pc, #232]	@ (8000c04 <KeyLogic_Action+0xf0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	d864      	bhi.n	8000bea <KeyLogic_Action+0xd6>
 8000b20:	a201      	add	r2, pc, #4	@ (adr r2, 8000b28 <KeyLogic_Action+0x14>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b45 	.word	0x08000b45
 8000b2c:	08000b59 	.word	0x08000b59
 8000b30:	08000b81 	.word	0x08000b81
 8000b34:	08000b6d 	.word	0x08000b6d
 8000b38:	08000ba7 	.word	0x08000ba7
 8000b3c:	08000bbb 	.word	0x08000bbb
 8000b40:	08000bcf 	.word	0x08000bcf
        case SEQ_IDLE:
            SevenSegBuffer[0] = 0;
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
            break;
 8000b56:	e052      	b.n	8000bfe <KeyLogic_Action+0xea>
        case SEQ_PRESSED_T:
            SevenSegBuffer[0] = 0;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 999999;
 8000b64:	4b28      	ldr	r3, [pc, #160]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b66:	4a29      	ldr	r2, [pc, #164]	@ (8000c0c <KeyLogic_Action+0xf8>)
 8000b68:	609a      	str	r2, [r3, #8]
            break;
 8000b6a:	e048      	b.n	8000bfe <KeyLogic_Action+0xea>
        case SEQ_PRESSED_T_$:
            SevenSegBuffer[0] = 0;
 8000b6c:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000b72:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 111111;
 8000b78:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b7a:	4a25      	ldr	r2, [pc, #148]	@ (8000c10 <KeyLogic_Action+0xfc>)
 8000b7c:	609a      	str	r2, [r3, #8]
            break;
 8000b7e:	e03e      	b.n	8000bfe <KeyLogic_Action+0xea>
        case SEQ_PRESSED_T_L:
        	formatTotalLiters(totalLiters, &row1, &row2);
 8000b80:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <KeyLogic_Action+0x100>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a24      	ldr	r2, [pc, #144]	@ (8000c18 <KeyLogic_Action+0x104>)
 8000b86:	4925      	ldr	r1, [pc, #148]	@ (8000c1c <KeyLogic_Action+0x108>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fddb 	bl	8000744 <formatTotalLiters>
            SevenSegBuffer[0] = row1;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <KeyLogic_Action+0x108>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b94:	6013      	str	r3, [r2, #0]
            SevenSegBuffer[1] = row2;
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <KeyLogic_Action+0x104>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000b9c:	6053      	str	r3, [r2, #4]
            SevenSegBuffer[2] = 0;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
            break;
 8000ba4:	e02b      	b.n	8000bfe <KeyLogic_Action+0xea>
        case SEQ_PRESSED_T_F3:
            SevenSegBuffer[0] = 333333;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c20 <KeyLogic_Action+0x10c>)
 8000baa:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
            break;
 8000bb8:	e021      	b.n	8000bfe <KeyLogic_Action+0xea>
        case SEQ_PRESSED_T_F4:
            SevenSegBuffer[0] = 444444;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bbc:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <KeyLogic_Action+0x110>)
 8000bbe:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
            break;
 8000bcc:	e017      	b.n	8000bfe <KeyLogic_Action+0xea>
        case SEQ_NUMBER:
			SevenSegBuffer[0] = accumulatedNumber;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <KeyLogic_Action+0x114>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bd4:	6013      	str	r3, [r2, #0]
			SevenSegBuffer[1] = 0;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
			SevenSegBuffer[2] = 0;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
        	LEDPointFlag = 6;
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <KeyLogic_Action+0x118>)
 8000be4:	2206      	movs	r2, #6
 8000be6:	601a      	str	r2, [r3, #0]
			break;
 8000be8:	e009      	b.n	8000bfe <KeyLogic_Action+0xea>
        default:
            SevenSegBuffer[0] = 0;
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
            SevenSegBuffer[1] = 0;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
            SevenSegBuffer[2] = 0;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <KeyLogic_Action+0xf4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
            break;
 8000bfc:	bf00      	nop
    }
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000c5 	.word	0x200000c5
 8000c08:	2000001c 	.word	0x2000001c
 8000c0c:	000f423f 	.word	0x000f423f
 8000c10:	0001b207 	.word	0x0001b207
 8000c14:	20000028 	.word	0x20000028
 8000c18:	200000c0 	.word	0x200000c0
 8000c1c:	200000bc 	.word	0x200000bc
 8000c20:	00051615 	.word	0x00051615
 8000c24:	0006c81c 	.word	0x0006c81c
 8000c28:	200000b4 	.word	0x200000b4
 8000c2c:	2000002c 	.word	0x2000002c

08000c30 <SevenSegLEDsHandler>:
uint32_t SevenSegBuffer[3] = {123456, 654321, 987654};
uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;


uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	2b05      	cmp	r3, #5
 8000c40:	f200 815d 	bhi.w	8000efe <SevenSegLEDsHandler+0x2ce>
 8000c44:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <SevenSegLEDsHandler+0x1c>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c65 	.word	0x08000c65
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000d31 	.word	0x08000d31
 8000c58:	08000da3 	.word	0x08000da3
 8000c5c:	08000e15 	.word	0x08000e15
 8000c60:	08000e87 	.word	0x08000e87
        case 0:
            output[0] = buffer[0] % 10;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6819      	ldr	r1, [r3, #0]
 8000c68:	4ba8      	ldr	r3, [pc, #672]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	1aca      	subs	r2, r1, r3
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	4ba4      	ldr	r3, [pc, #656]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000c7e:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3304      	adds	r3, #4
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	4ba1      	ldr	r3, [pc, #644]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000c88:	fba3 2301 	umull	r2, r3, r3, r1
 8000c8c:	08da      	lsrs	r2, r3, #3
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	1aca      	subs	r2, r1, r3
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	4b9d      	ldr	r3, [pc, #628]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000c9c:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3308      	adds	r3, #8
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	4b99      	ldr	r3, [pc, #612]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	1aca      	subs	r2, r1, r3
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	4b95      	ldr	r3, [pc, #596]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000cba:	709a      	strb	r2, [r3, #2]
            break;
 8000cbc:	e11f      	b.n	8000efe <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a92      	ldr	r2, [pc, #584]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	08d9      	lsrs	r1, r3, #3
 8000cca:	4b90      	ldr	r3, [pc, #576]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000ccc:	fba3 2301 	umull	r2, r3, r3, r1
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	1aca      	subs	r2, r1, r3
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	4b8c      	ldr	r3, [pc, #560]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000ce0:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a88      	ldr	r2, [pc, #544]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	08d9      	lsrs	r1, r3, #3
 8000cf0:	4b86      	ldr	r3, [pc, #536]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8000cf6:	08da      	lsrs	r2, r3, #3
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	1aca      	subs	r2, r1, r3
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	4b82      	ldr	r3, [pc, #520]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000d06:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a7f      	ldr	r2, [pc, #508]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	08d9      	lsrs	r1, r3, #3
 8000d16:	4b7d      	ldr	r3, [pc, #500]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000d18:	fba3 2301 	umull	r2, r3, r3, r1
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	1aca      	subs	r2, r1, r3
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	4b79      	ldr	r3, [pc, #484]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000d2c:	709a      	strb	r2, [r3, #2]
            break;
 8000d2e:	e0e6      	b.n	8000efe <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a77      	ldr	r2, [pc, #476]	@ (8000f14 <SevenSegLEDsHandler+0x2e4>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	0959      	lsrs	r1, r3, #5
 8000d3c:	4b73      	ldr	r3, [pc, #460]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	1aca      	subs	r2, r1, r3
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	4b6f      	ldr	r3, [pc, #444]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000d52:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8000f14 <SevenSegLEDsHandler+0x2e4>)
 8000d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d60:	0959      	lsrs	r1, r3, #5
 8000d62:	4b6a      	ldr	r3, [pc, #424]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000d64:	fba3 2301 	umull	r2, r3, r3, r1
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	1aca      	subs	r2, r1, r3
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	4b66      	ldr	r3, [pc, #408]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000d78:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a64      	ldr	r2, [pc, #400]	@ (8000f14 <SevenSegLEDsHandler+0x2e4>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	0959      	lsrs	r1, r3, #5
 8000d88:	4b60      	ldr	r3, [pc, #384]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	1aca      	subs	r2, r1, r3
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000d9e:	709a      	strb	r2, [r3, #2]
            break;
 8000da0:	e0ad      	b.n	8000efe <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f18 <SevenSegLEDsHandler+0x2e8>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0999      	lsrs	r1, r3, #6
 8000dae:	4b57      	ldr	r3, [pc, #348]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000db0:	fba3 2301 	umull	r2, r3, r3, r1
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	1aca      	subs	r2, r1, r3
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	4b53      	ldr	r3, [pc, #332]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000dc4:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a52      	ldr	r2, [pc, #328]	@ (8000f18 <SevenSegLEDsHandler+0x2e8>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0999      	lsrs	r1, r3, #6
 8000dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8000dda:	08da      	lsrs	r2, r3, #3
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	1aca      	subs	r2, r1, r3
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	4b49      	ldr	r3, [pc, #292]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000dea:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3308      	adds	r3, #8
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a49      	ldr	r2, [pc, #292]	@ (8000f18 <SevenSegLEDsHandler+0x2e8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0999      	lsrs	r1, r3, #6
 8000dfa:	4b44      	ldr	r3, [pc, #272]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000dfc:	fba3 2301 	umull	r2, r3, r3, r1
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	1aca      	subs	r2, r1, r3
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	4b40      	ldr	r3, [pc, #256]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000e10:	709a      	strb	r2, [r3, #2]
            break;
 8000e12:	e074      	b.n	8000efe <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a40      	ldr	r2, [pc, #256]	@ (8000f1c <SevenSegLEDsHandler+0x2ec>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	0b59      	lsrs	r1, r3, #13
 8000e20:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000e22:	fba3 2301 	umull	r2, r3, r3, r1
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1aca      	subs	r2, r1, r3
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000e36:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a37      	ldr	r2, [pc, #220]	@ (8000f1c <SevenSegLEDsHandler+0x2ec>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0b59      	lsrs	r1, r3, #13
 8000e46:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000e48:	fba3 2301 	umull	r2, r3, r3, r1
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1aca      	subs	r2, r1, r3
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000e5c:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3308      	adds	r3, #8
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a2d      	ldr	r2, [pc, #180]	@ (8000f1c <SevenSegLEDsHandler+0x2ec>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0b59      	lsrs	r1, r3, #13
 8000e6c:	4b27      	ldr	r3, [pc, #156]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	1aca      	subs	r2, r1, r3
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000e82:	709a      	strb	r2, [r3, #2]
            break;
 8000e84:	e03b      	b.n	8000efe <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	4a24      	ldr	r2, [pc, #144]	@ (8000f20 <SevenSegLEDsHandler+0x2f0>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	09d9      	lsrs	r1, r3, #7
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000e96:	fba3 2301 	umull	r2, r3, r3, r1
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	1aca      	subs	r2, r1, r3
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000eaa:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f20 <SevenSegLEDsHandler+0x2f0>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	09d9      	lsrs	r1, r3, #7
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1aca      	subs	r2, r1, r3
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000ed2:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <SevenSegLEDsHandler+0x2f0>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	09d9      	lsrs	r1, r3, #7
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <SevenSegLEDsHandler+0x2dc>)
 8000ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	1aca      	subs	r2, r1, r3
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
 8000efa:	709a      	strb	r2, [r3, #2]
            break;
 8000efc:	bf00      	nop
    }
    return output;
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SevenSegLEDsHandler+0x2e0>)
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	cccccccd 	.word	0xcccccccd
 8000f10:	200000d4 	.word	0x200000d4
 8000f14:	51eb851f 	.word	0x51eb851f
 8000f18:	10624dd3 	.word	0x10624dd3
 8000f1c:	d1b71759 	.word	0xd1b71759
 8000f20:	0a7c5ac5 	.word	0x0a7c5ac5

08000f24 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
 8000f30:	4613      	mov	r3, r2
 8000f32:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fe79 	bl	8000c30 <SevenSegLEDsHandler>
 8000f3e:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	d820      	bhi.n	8000f88 <UpdateDisplayBuffer+0x64>
 8000f46:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <UpdateDisplayBuffer+0x28>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000f65 	.word	0x08000f65
 8000f50:	08000f6b 	.word	0x08000f6b
 8000f54:	08000f71 	.word	0x08000f71
 8000f58:	08000f77 	.word	0x08000f77
 8000f5c:	08000f7d 	.word	0x08000f7d
 8000f60:	08000f83 	.word	0x08000f83
        case 0:
            curr_scan = 0b11111110;
 8000f64:	23fe      	movs	r3, #254	@ 0xfe
 8000f66:	73fb      	strb	r3, [r7, #15]
            break;
 8000f68:	e011      	b.n	8000f8e <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 8000f6a:	23fd      	movs	r3, #253	@ 0xfd
 8000f6c:	73fb      	strb	r3, [r7, #15]
            break;
 8000f6e:	e00e      	b.n	8000f8e <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 8000f70:	23fb      	movs	r3, #251	@ 0xfb
 8000f72:	73fb      	strb	r3, [r7, #15]
            break;
 8000f74:	e00b      	b.n	8000f8e <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 8000f76:	23f7      	movs	r3, #247	@ 0xf7
 8000f78:	73fb      	strb	r3, [r7, #15]
            break;
 8000f7a:	e008      	b.n	8000f8e <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000f7c:	23ef      	movs	r3, #239	@ 0xef
 8000f7e:	73fb      	strb	r3, [r7, #15]
            break;
 8000f80:	e005      	b.n	8000f8e <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 8000f82:	23df      	movs	r3, #223	@ 0xdf
 8000f84:	73fb      	strb	r3, [r7, #15]
            break;
 8000f86:	e002      	b.n	8000f8e <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	73fb      	strb	r3, [r7, #15]
            break;
 8000f8c:	bf00      	nop
    }
    if(LEDPointFlag >=0 && LEDPointFlag <=5){
 8000f8e:	4b66      	ldr	r3, [pc, #408]	@ (8001128 <UpdateDisplayBuffer+0x204>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f2c0 8086 	blt.w	80010a4 <UpdateDisplayBuffer+0x180>
 8000f98:	4b63      	ldr	r3, [pc, #396]	@ (8001128 <UpdateDisplayBuffer+0x204>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	f300 8081 	bgt.w	80010a4 <UpdateDisplayBuffer+0x180>
    	if (scan_state == LEDPointFlag){
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	4b60      	ldr	r3, [pc, #384]	@ (8001128 <UpdateDisplayBuffer+0x204>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d13d      	bne.n	8001028 <UpdateDisplayBuffer+0x104>
    		displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 8000fac:	78ba      	ldrb	r2, [r7, #2]
 8000fae:	495f      	ldr	r1, [pc, #380]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	22ff      	movs	r2, #255	@ 0xff
 8000fba:	701a      	strb	r2, [r3, #0]
			displayBuffer[bufferIndex][1] = digitMapWithOutDP[curr_digit[2]];
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	78ba      	ldrb	r2, [r7, #2]
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 8000fc8:	5c58      	ldrb	r0, [r3, r1]
 8000fca:	4958      	ldr	r1, [pc, #352]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	701a      	strb	r2, [r3, #0]
			displayBuffer[bufferIndex][2] = curr_scan;
 8000fda:	78ba      	ldrb	r2, [r7, #2]
 8000fdc:	4953      	ldr	r1, [pc, #332]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	701a      	strb	r2, [r3, #0]
			displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[1]]; //Add point to second row
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	78ba      	ldrb	r2, [r7, #2]
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8001134 <UpdateDisplayBuffer+0x210>)
 8000ff8:	5c58      	ldrb	r0, [r3, r1]
 8000ffa:	494c      	ldr	r1, [pc, #304]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	440b      	add	r3, r1
 8001004:	3303      	adds	r3, #3
 8001006:	4602      	mov	r2, r0
 8001008:	701a      	strb	r2, [r3, #0]
			displayBuffer[bufferIndex][4] = digitMapWithOutDP[curr_digit[0]];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	78ba      	ldrb	r2, [r7, #2]
 8001012:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 8001014:	5c58      	ldrb	r0, [r3, r1]
 8001016:	4945      	ldr	r1, [pc, #276]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	440b      	add	r3, r1
 8001020:	3304      	adds	r3, #4
 8001022:	4602      	mov	r2, r0
 8001024:	701a      	strb	r2, [r3, #0]
    	if (scan_state == LEDPointFlag){
 8001026:	e07b      	b.n	8001120 <UpdateDisplayBuffer+0x1fc>
    	}
    	else
    	{
    		displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 8001028:	78ba      	ldrb	r2, [r7, #2]
 800102a:	4940      	ldr	r1, [pc, #256]	@ (800112c <UpdateDisplayBuffer+0x208>)
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	440b      	add	r3, r1
 8001034:	22ff      	movs	r2, #255	@ 0xff
 8001036:	701a      	strb	r2, [r3, #0]
    		displayBuffer[bufferIndex][1] = digitMapWithOutDP[curr_digit[2]];
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3302      	adds	r3, #2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	78ba      	ldrb	r2, [r7, #2]
 8001042:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 8001044:	5c58      	ldrb	r0, [r3, r1]
 8001046:	4939      	ldr	r1, [pc, #228]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	440b      	add	r3, r1
 8001050:	3301      	adds	r3, #1
 8001052:	4602      	mov	r2, r0
 8001054:	701a      	strb	r2, [r3, #0]
    		displayBuffer[bufferIndex][2] = curr_scan;
 8001056:	78ba      	ldrb	r2, [r7, #2]
 8001058:	4934      	ldr	r1, [pc, #208]	@ (800112c <UpdateDisplayBuffer+0x208>)
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	440b      	add	r3, r1
 8001062:	3302      	adds	r3, #2
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	701a      	strb	r2, [r3, #0]
    		displayBuffer[bufferIndex][3] = digitMapWithOutDP[curr_digit[1]];
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3301      	adds	r3, #1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	78ba      	ldrb	r2, [r7, #2]
 8001072:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 8001074:	5c58      	ldrb	r0, [r3, r1]
 8001076:	492d      	ldr	r1, [pc, #180]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	440b      	add	r3, r1
 8001080:	3303      	adds	r3, #3
 8001082:	4602      	mov	r2, r0
 8001084:	701a      	strb	r2, [r3, #0]
    		displayBuffer[bufferIndex][4] = digitMapWithOutDP[curr_digit[0]];
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	78ba      	ldrb	r2, [r7, #2]
 800108e:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 8001090:	5c58      	ldrb	r0, [r3, r1]
 8001092:	4926      	ldr	r1, [pc, #152]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	440b      	add	r3, r1
 800109c:	3304      	adds	r3, #4
 800109e:	4602      	mov	r2, r0
 80010a0:	701a      	strb	r2, [r3, #0]
    	if (scan_state == LEDPointFlag){
 80010a2:	e03d      	b.n	8001120 <UpdateDisplayBuffer+0x1fc>
    	}
    }
    else
    {
		displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 80010a4:	78ba      	ldrb	r2, [r7, #2]
 80010a6:	4921      	ldr	r1, [pc, #132]	@ (800112c <UpdateDisplayBuffer+0x208>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	22ff      	movs	r2, #255	@ 0xff
 80010b2:	701a      	strb	r2, [r3, #0]
		displayBuffer[bufferIndex][1] = digitMapWithOutDP[curr_digit[2]];
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	3302      	adds	r3, #2
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	78ba      	ldrb	r2, [r7, #2]
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 80010c0:	5c58      	ldrb	r0, [r3, r1]
 80010c2:	491a      	ldr	r1, [pc, #104]	@ (800112c <UpdateDisplayBuffer+0x208>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	3301      	adds	r3, #1
 80010ce:	4602      	mov	r2, r0
 80010d0:	701a      	strb	r2, [r3, #0]
		displayBuffer[bufferIndex][2] = curr_scan;
 80010d2:	78ba      	ldrb	r2, [r7, #2]
 80010d4:	4915      	ldr	r1, [pc, #84]	@ (800112c <UpdateDisplayBuffer+0x208>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	440b      	add	r3, r1
 80010de:	3302      	adds	r3, #2
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	701a      	strb	r2, [r3, #0]
		displayBuffer[bufferIndex][3] = digitMapWithOutDP[curr_digit[1]];
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3301      	adds	r3, #1
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	78ba      	ldrb	r2, [r7, #2]
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 80010f0:	5c58      	ldrb	r0, [r3, r1]
 80010f2:	490e      	ldr	r1, [pc, #56]	@ (800112c <UpdateDisplayBuffer+0x208>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	3303      	adds	r3, #3
 80010fe:	4602      	mov	r2, r0
 8001100:	701a      	strb	r2, [r3, #0]
		displayBuffer[bufferIndex][4] = digitMapWithOutDP[curr_digit[0]];
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	78ba      	ldrb	r2, [r7, #2]
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <UpdateDisplayBuffer+0x20c>)
 800110c:	5c58      	ldrb	r0, [r3, r1]
 800110e:	4907      	ldr	r1, [pc, #28]	@ (800112c <UpdateDisplayBuffer+0x208>)
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	440b      	add	r3, r1
 8001118:	3304      	adds	r3, #4
 800111a:	4602      	mov	r2, r0
 800111c:	701a      	strb	r2, [r3, #0]
    }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000002c 	.word	0x2000002c
 800112c:	200000c8 	.word	0x200000c8
 8001130:	20000004 	.word	0x20000004
 8001134:	20000010 	.word	0x20000010

08001138 <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <SevenSegLEDsScan+0x7c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	bfb8      	it	lt
 800114e:	425b      	neglt	r3, r3
 8001150:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <SevenSegLEDsScan+0x80>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4619      	mov	r1, r3
 800115c:	4817      	ldr	r0, [pc, #92]	@ (80011bc <SevenSegLEDsScan+0x84>)
 800115e:	f7ff fee1 	bl	8000f24 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <SevenSegLEDsScan+0x7c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <SevenSegLEDsScan+0x88>)
 8001176:	4413      	add	r3, r2
 8001178:	2105      	movs	r1, #5
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f824 	bl	80011c8 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 8001180:	4a0c      	ldr	r2, [pc, #48]	@ (80011b4 <SevenSegLEDsScan+0x7c>)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001186:	b662      	cpsie	i
}
 8001188:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <SevenSegLEDsScan+0x80>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <SevenSegLEDsScan+0x8c>)
 8001194:	fb83 3102 	smull	r3, r1, r3, r2
 8001198:	17d3      	asrs	r3, r2, #31
 800119a:	1ac9      	subs	r1, r1, r3
 800119c:	460b      	mov	r3, r1
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	440b      	add	r3, r1
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1ad1      	subs	r1, r2, r3
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <SevenSegLEDsScan+0x80>)
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000d2 	.word	0x200000d2
 80011b8:	200000c6 	.word	0x200000c6
 80011bc:	2000001c 	.word	0x2000001c
 80011c0:	200000c8 	.word	0x200000c8
 80011c4:	2aaaaaab 	.word	0x2aaaaaab

080011c8 <ShiftOut_SPI>:
 */

#include "SPI_shift.h"
extern SPI_HandleTypeDef hspi1;
void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d8:	4823      	ldr	r0, [pc, #140]	@ (8001268 <ShiftOut_SPI+0xa0>)
 80011da:	f000 fe77 	bl	8001ecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	4822      	ldr	r0, [pc, #136]	@ (800126c <ShiftOut_SPI+0xa4>)
 80011e4:	f000 fe72 	bl	8001ecc <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e003      	b.n	80011f6 <ShiftOut_SPI+0x2e>
 80011ee:	bf00      	nop
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011fc:	dbf7      	blt.n	80011ee <ShiftOut_SPI+0x26>
//	osDelay(1);
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011fe:	bf00      	nop
 8001200:	481b      	ldr	r0, [pc, #108]	@ (8001270 <ShiftOut_SPI+0xa8>)
 8001202:	f001 fcbf 	bl	8002b84 <HAL_SPI_GetState>
 8001206:	4603      	mov	r3, r0
 8001208:	2b01      	cmp	r3, #1
 800120a:	d1f9      	bne.n	8001200 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4816      	ldr	r0, [pc, #88]	@ (8001270 <ShiftOut_SPI+0xa8>)
 8001218:	f001 fb71 	bl	80028fe <HAL_SPI_Transmit>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 8001222:	f000 f9e5 	bl	80015f0 <Error_Handler>
    }
//    osDelay(1);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e003      	b.n	8001234 <ShiftOut_SPI+0x6c>
 800122c:	bf00      	nop
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3301      	adds	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800123a:	dbf7      	blt.n	800122c <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800123c:	bf00      	nop
 800123e:	480c      	ldr	r0, [pc, #48]	@ (8001270 <ShiftOut_SPI+0xa8>)
 8001240:	f001 fca0 	bl	8002b84 <HAL_SPI_GetState>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d1f9      	bne.n	800123e <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <ShiftOut_SPI+0xa0>)
 8001252:	f000 fe3b 	bl	8001ecc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2180      	movs	r1, #128	@ 0x80
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <ShiftOut_SPI+0xa4>)
 800125c:	f000 fe36 	bl	8001ecc <HAL_GPIO_WritePin>

}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	200000d8 	.word	0x200000d8

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f000 fb68 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f828 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 f8fa 	bl	8001478 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001284:	f000 f88c 	bl	80013a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001288:	f000 f8c0 	bl	800140c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800128c:	f002 f81c 	bl	80032c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8001290:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <main+0x44>)
 8001292:	2100      	movs	r1, #0
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <main+0x48>)
 8001296:	f002 f861 	bl	800335c <osThreadNew>
 800129a:	4603      	mov	r3, r0
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <main+0x4c>)
 800129e:	6013      	str	r3, [r2, #0]

  /* creation of KeyPad4x5Task */
  KeyPad4x5TaskHandle = osThreadNew(KeyPad4x5Run, NULL, &KeyPad4x5Task_attributes);
 80012a0:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <main+0x50>)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4808      	ldr	r0, [pc, #32]	@ (80012c8 <main+0x54>)
 80012a6:	f002 f859 	bl	800335c <osThreadNew>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <main+0x58>)
 80012ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012b0:	f002 f82e 	bl	8003310 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <main+0x40>
 80012b8:	0800604c 	.word	0x0800604c
 80012bc:	0800157d 	.word	0x0800157d
 80012c0:	20000188 	.word	0x20000188
 80012c4:	08006070 	.word	0x08006070
 80012c8:	080015b9 	.word	0x080015b9
 80012cc:	2000018c 	.word	0x2000018c

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2230      	movs	r2, #48	@ 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 fda2 	bl	8005e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <SystemClock_Config+0xc8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <SystemClock_Config+0xc8>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <SystemClock_Config+0xc8>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <SystemClock_Config+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a20      	ldr	r2, [pc, #128]	@ (800139c <SystemClock_Config+0xcc>)
 800131a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <SystemClock_Config+0xcc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001334:	2310      	movs	r3, #16
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001340:	2308      	movs	r3, #8
 8001342:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001344:	2364      	movs	r3, #100	@ 0x64
 8001346:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800134c:	2304      	movs	r3, #4
 800134e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fdd3 	bl	8001f00 <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001360:	f000 f946 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2103      	movs	r1, #3
 8001380:	4618      	mov	r0, r3
 8001382:	f001 f835 	bl	80023f0 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800138c:	f000 f930 	bl	80015f0 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3750      	adds	r7, #80	@ 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013a6:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <MX_SPI1_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013d4:	2220      	movs	r2, #32
 80013d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013ec:	220a      	movs	r2, #10
 80013ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_SPI1_Init+0x64>)
 80013f2:	f001 f9fb 	bl	80027ec <HAL_SPI_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013fc:	f000 f8f8 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200000d8 	.word	0x200000d8
 8001408:	40013000 	.word	0x40013000

0800140c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <MX_SPI2_Init+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001418:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800141c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_SPI2_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_SPI2_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_SPI2_Init+0x64>)
 8001458:	220a      	movs	r2, #10
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_SPI2_Init+0x64>)
 800145e:	f001 f9c5 	bl	80027ec <HAL_SPI_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001468:	f000 f8c2 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000130 	.word	0x20000130
 8001474:	40003800 	.word	0x40003800

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <MX_GPIO_Init+0xf8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a36      	ldr	r2, [pc, #216]	@ (8001570 <MX_GPIO_Init+0xf8>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b34      	ldr	r3, [pc, #208]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a28      	ldr	r2, [pc, #160]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <MX_GPIO_Init+0xf8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 80014fe:	2200      	movs	r2, #0
 8001500:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8001504:	481b      	ldr	r0, [pc, #108]	@ (8001574 <MX_GPIO_Init+0xfc>)
 8001506:	f000 fce1 	bl	8001ecc <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	481a      	ldr	r0, [pc, #104]	@ (8001578 <MX_GPIO_Init+0x100>)
 8001510:	f000 fcdc 	bl	8001ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001514:	231f      	movs	r3, #31
 8001516:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4813      	ldr	r0, [pc, #76]	@ (8001574 <MX_GPIO_Init+0xfc>)
 8001528:	f000 fb34 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 800152c:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8001530:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	480b      	ldr	r0, [pc, #44]	@ (8001574 <MX_GPIO_Init+0xfc>)
 8001546:	f000 fb25 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_GPIO_Init+0x100>)
 8001562:	f000 fb17 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800

0800157c <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <Led3x6Run+0x38>)
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158e:	6018      	str	r0, [r3, #0]
 8001590:	3304      	adds	r3, #4
 8001592:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8001594:	f7ff fdd0 	bl	8001138 <SevenSegLEDsScan>
	  osDelay(1);
 8001598:	2001      	movs	r0, #1
 800159a:	f001 ff71 	bl	8003480 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2105      	movs	r1, #5
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fe0f 	bl	80011c8 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f001 ff68 	bl	8003480 <osDelay>
	  SevenSegLEDsScan();
 80015b0:	bf00      	nop
 80015b2:	e7ef      	b.n	8001594 <Led3x6Run+0x18>
 80015b4:	0800602c 	.word	0x0800602c

080015b8 <KeyPad4x5Run>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_KeyPad4x5Run */
void KeyPad4x5Run(void *argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN KeyPad4x5Run */
  /* Infinite loop */
  for(;;)
  {
	 KeyLogic();
 80015c0:	f7ff f8fe 	bl	80007c0 <KeyLogic>
	 KeyLogic_Action();
 80015c4:	f7ff faa6 	bl	8000b14 <KeyLogic_Action>
	 osDelay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f001 ff59 	bl	8003480 <osDelay>
	 KeyLogic();
 80015ce:	bf00      	nop
 80015d0:	e7f6      	b.n	80015c0 <KeyPad4x5Run+0x8>

080015d2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e2:	d101      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015e4:	f000 f9d4 	bl	8001990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <Error_Handler+0x8>

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_MspInit+0x54>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_MspInit+0x54>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_MspInit+0x54>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <HAL_MspInit+0x54>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_MspInit+0x54>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <HAL_MspInit+0x54>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	210f      	movs	r1, #15
 800163e:	f06f 0001 	mvn.w	r0, #1
 8001642:	f000 fa7d 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a41      	ldr	r2, [pc, #260]	@ (8001778 <HAL_SPI_MspInit+0x124>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12c      	bne.n	80016d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	4b40      	ldr	r3, [pc, #256]	@ (800177c <HAL_SPI_MspInit+0x128>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a3f      	ldr	r2, [pc, #252]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
 8001686:	4b3d      	ldr	r3, [pc, #244]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	4b39      	ldr	r3, [pc, #228]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a38      	ldr	r2, [pc, #224]	@ (800177c <HAL_SPI_MspInit+0x128>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b36      	ldr	r3, [pc, #216]	@ (800177c <HAL_SPI_MspInit+0x128>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016ae:	23a0      	movs	r3, #160	@ 0xa0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016be:	2305      	movs	r3, #5
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	482d      	ldr	r0, [pc, #180]	@ (8001780 <HAL_SPI_MspInit+0x12c>)
 80016ca:	f000 fa63 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016ce:	e04f      	b.n	8001770 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001784 <HAL_SPI_MspInit+0x130>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d14a      	bne.n	8001770 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b27      	ldr	r3, [pc, #156]	@ (800177c <HAL_SPI_MspInit+0x128>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a26      	ldr	r2, [pc, #152]	@ (800177c <HAL_SPI_MspInit+0x128>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b24      	ldr	r3, [pc, #144]	@ (800177c <HAL_SPI_MspInit+0x128>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <HAL_SPI_MspInit+0x128>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a18      	ldr	r2, [pc, #96]	@ (800177c <HAL_SPI_MspInit+0x128>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_SPI_MspInit+0x128>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172e:	2308      	movs	r3, #8
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800173e:	2305      	movs	r3, #5
 8001740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	480f      	ldr	r0, [pc, #60]	@ (8001788 <HAL_SPI_MspInit+0x134>)
 800174a:	f000 fa23 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001760:	2305      	movs	r3, #5
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4808      	ldr	r0, [pc, #32]	@ (800178c <HAL_SPI_MspInit+0x138>)
 800176c:	f000 fa12 	bl	8001b94 <HAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	@ 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40013000 	.word	0x40013000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000
 8001784:	40003800 	.word	0x40003800
 8001788:	40020800 	.word	0x40020800
 800178c:	40020400 	.word	0x40020400

08001790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	@ 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <HAL_InitTick+0xe8>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	4a33      	ldr	r2, [pc, #204]	@ (8001878 <HAL_InitTick+0xe8>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b0:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <HAL_InitTick+0xe8>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 ffde 	bl	8002788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d6:	f000 ffc3 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80017da:	6378      	str	r0, [r7, #52]	@ 0x34
 80017dc:	e004      	b.n	80017e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017de:	f000 ffbf 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80017e2:	4603      	mov	r3, r0
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ea:	4a24      	ldr	r2, [pc, #144]	@ (800187c <HAL_InitTick+0xec>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	3b01      	subs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_InitTick+0xf0>)
 80017f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_InitTick+0xf0>)
 8001800:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001804:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001806:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <HAL_InitTick+0xf0>)
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800180c:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <HAL_InitTick+0xf0>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <HAL_InitTick+0xf0>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_InitTick+0xf0>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800181e:	4818      	ldr	r0, [pc, #96]	@ (8001880 <HAL_InitTick+0xf0>)
 8001820:	f001 fa9a 	bl	8002d58 <HAL_TIM_Base_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800182a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800182e:	2b00      	cmp	r3, #0
 8001830:	d11b      	bne.n	800186a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001832:	4813      	ldr	r0, [pc, #76]	@ (8001880 <HAL_InitTick+0xf0>)
 8001834:	f001 faea 	bl	8002e0c <HAL_TIM_Base_Start_IT>
 8001838:	4603      	mov	r3, r0
 800183a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800183e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001842:	2b00      	cmp	r3, #0
 8001844:	d111      	bne.n	800186a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001846:	201c      	movs	r0, #28
 8001848:	f000 f996 	bl	8001b78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	d808      	bhi.n	8001864 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001852:	2200      	movs	r2, #0
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	201c      	movs	r0, #28
 8001858:	f000 f972 	bl	8001b40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185c:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_InitTick+0xf4>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e002      	b.n	800186a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800186a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800186e:	4618      	mov	r0, r3
 8001870:	3738      	adds	r7, #56	@ 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	431bde83 	.word	0x431bde83
 8001880:	20000190 	.word	0x20000190
 8001884:	20000034 	.word	0x20000034

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <TIM2_IRQHandler+0x10>)
 80018c6:	f001 fb03 	bl	8002ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000190 	.word	0x20000190

080018d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001930 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fc:	f7ff ffea 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	@ (8001944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f004 fadd 	bl	8005ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7ff fca3 	bl	8001274 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800193c:	080060bc 	.word	0x080060bc
  ldr r2, =_sbss
 8001940:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001944:	20004d04 	.word	0x20004d04

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001950:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <HAL_Init+0x40>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800195a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_Init+0x40>)
 8001962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_Init+0x40>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f8d8 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	200f      	movs	r0, #15
 800197c:	f7ff ff08 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fe3c 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000038 	.word	0x20000038
 80019b4:	200001d8 	.word	0x200001d8

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200001d8 	.word	0x200001d8

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff4c 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff61 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff54 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e159      	b.n	8001e64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8148 	bne.w	8001e5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a2 	beq.w	8001e5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b57      	ldr	r3, [pc, #348]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a56      	ldr	r2, [pc, #344]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b54      	ldr	r3, [pc, #336]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	@ (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x202>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a48      	ldr	r2, [pc, #288]	@ (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x1fe>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a47      	ldr	r2, [pc, #284]	@ (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x1fa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_GPIO_Init+0x2fc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x1f6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a45      	ldr	r2, [pc, #276]	@ (8001e94 <HAL_GPIO_Init+0x300>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x1f2>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	@ (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e58:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f aea2 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e001      	b.n	8001ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee8:	e003      	b.n	8001ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eea:	887b      	ldrh	r3, [r7, #2]
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e267      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d075      	beq.n	800200a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	4b88      	ldr	r3, [pc, #544]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4b85      	ldr	r3, [pc, #532]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b82      	ldr	r3, [pc, #520]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e242      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x74>
 8001f66:	4b76      	ldr	r3, [pc, #472]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b70      	ldr	r3, [pc, #448]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f98:	4b69      	ldr	r3, [pc, #420]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a68      	ldr	r2, [pc, #416]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a65      	ldr	r2, [pc, #404]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fcfe 	bl	80019b8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fcfa 	bl	80019b8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	@ 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e207      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fcea 	bl	80019b8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fce6 	bl	80019b8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1f3      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	4b4a      	ldr	r3, [pc, #296]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1c7      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_RCC_OscConfig+0x244>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fc9f 	bl	80019b8 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fc9b 	bl	80019b8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1a8      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_RCC_OscConfig+0x244>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fc7e 	bl	80019b8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fc7a 	bl	80019b8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e187      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_RCC_OscConfig+0x248>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fc5e 	bl	80019b8 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff fc5a 	bl	80019b8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e167      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_OscConfig+0x240>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x200>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_OscConfig+0x248>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fc47 	bl	80019b8 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff fc43 	bl	80019b8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e150      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b81      	ldr	r3, [pc, #516]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7d      	ldr	r3, [pc, #500]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a7c      	ldr	r2, [pc, #496]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b7a      	ldr	r3, [pc, #488]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b77      	ldr	r3, [pc, #476]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b74      	ldr	r3, [pc, #464]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a73      	ldr	r2, [pc, #460]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff fc03 	bl	80019b8 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff fbff 	bl	80019b8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e10c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x474>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x2ea>
 80021dc:	4b64      	ldr	r3, [pc, #400]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	4a63      	ldr	r2, [pc, #396]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x30c>
 80021f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002202:	4a5b      	ldr	r2, [pc, #364]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	@ 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x324>
 800220c:	4b58      	ldr	r3, [pc, #352]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	4a57      	ldr	r2, [pc, #348]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	@ 0x70
 8002218:	4b55      	ldr	r3, [pc, #340]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221c:	4a54      	ldr	r2, [pc, #336]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fbc4 	bl	80019b8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff fbc0 	bl	80019b8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0cb      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b49      	ldr	r3, [pc, #292]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x334>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fbae 	bl	80019b8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fbaa 	bl	80019b8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0b5      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b3e      	ldr	r3, [pc, #248]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	4a38      	ldr	r2, [pc, #224]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a1 	beq.w	80023e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b34      	ldr	r3, [pc, #208]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d05c      	beq.n	8002364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d141      	bne.n	8002336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_OscConfig+0x478>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fb7e 	bl	80019b8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff fb7a 	bl	80019b8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e087      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	491b      	ldr	r1, [pc, #108]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x478>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff fb53 	bl	80019b8 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff fb4f 	bl	80019b8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e05c      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x416>
 8002334:	e054      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <HAL_RCC_OscConfig+0x478>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7ff fb3c 	bl	80019b8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7ff fb38 	bl	80019b8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e045      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_RCC_OscConfig+0x470>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x444>
 8002362:	e03d      	b.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e038      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
 8002370:	40023800 	.word	0x40023800
 8002374:	40007000 	.word	0x40007000
 8002378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x4ec>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d028      	beq.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cc      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b68      	ldr	r3, [pc, #416]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d90c      	bls.n	800242c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b65      	ldr	r3, [pc, #404]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d044      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d119      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e067      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4934      	ldr	r1, [pc, #208]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7ff fa6a 	bl	80019b8 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7ff fa66 	bl	80019b8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e04f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2b      	ldr	r3, [pc, #172]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d20c      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b22      	ldr	r3, [pc, #136]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f8fa 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08006094 	.word	0x08006094
 80025b4:	20000030 	.word	0x20000030
 80025b8:	20000034 	.word	0x20000034

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b090      	sub	sp, #64	@ 0x40
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c8:	2300      	movs	r3, #0
 80025ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4b59      	ldr	r3, [pc, #356]	@ (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d00d      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	f200 80a1 	bhi.w	8002728 <HAL_RCC_GetSysClockFreq+0x16c>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ee:	e09b      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b53      	ldr	r3, [pc, #332]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x184>)
 80025f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80025f4:	e09b      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b53      	ldr	r3, [pc, #332]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025fa:	e098      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b4f      	ldr	r3, [pc, #316]	@ (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002604:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4b4d      	ldr	r3, [pc, #308]	@ (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d028      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b4a      	ldr	r3, [pc, #296]	@ (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	2200      	movs	r2, #0
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	627a      	str	r2, [r7, #36]	@ 0x24
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002624:	2100      	movs	r1, #0
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 8002628:	fb03 f201 	mul.w	r2, r3, r1
 800262c:	2300      	movs	r3, #0
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	4413      	add	r3, r2
 8002634:	4a43      	ldr	r2, [pc, #268]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x188>)
 8002636:	fba0 1202 	umull	r1, r2, r0, r2
 800263a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800263c:	460a      	mov	r2, r1
 800263e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002642:	4413      	add	r3, r2
 8002644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002648:	2200      	movs	r2, #0
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	61fa      	str	r2, [r7, #28]
 800264e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002656:	f7fd fdc3 	bl	80001e0 <__aeabi_uldivmod>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4613      	mov	r3, r2
 8002660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002662:	e053      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b35      	ldr	r3, [pc, #212]	@ (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	2200      	movs	r2, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	617a      	str	r2, [r7, #20]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002676:	f04f 0b00 	mov.w	fp, #0
 800267a:	4652      	mov	r2, sl
 800267c:	465b      	mov	r3, fp
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ebb2 080a 	subs.w	r8, r2, sl
 8002696:	eb63 090b 	sbc.w	r9, r3, fp
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ae:	ebb2 0408 	subs.w	r4, r2, r8
 80026b2:	eb63 0509 	sbc.w	r5, r3, r9
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	00eb      	lsls	r3, r5, #3
 80026c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026c4:	00e2      	lsls	r2, r4, #3
 80026c6:	4614      	mov	r4, r2
 80026c8:	461d      	mov	r5, r3
 80026ca:	eb14 030a 	adds.w	r3, r4, sl
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	eb45 030b 	adc.w	r3, r5, fp
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026e2:	4629      	mov	r1, r5
 80026e4:	028b      	lsls	r3, r1, #10
 80026e6:	4621      	mov	r1, r4
 80026e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ec:	4621      	mov	r1, r4
 80026ee:	028a      	lsls	r2, r1, #10
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f6:	2200      	movs	r2, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	60fa      	str	r2, [r7, #12]
 80026fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002700:	f7fd fd6e 	bl	80001e0 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4613      	mov	r3, r2
 800270a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800271c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002726:	e002      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x184>)
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800272c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002730:	4618      	mov	r0, r3
 8002732:	3740      	adds	r7, #64	@ 0x40
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	00f42400 	.word	0x00f42400
 8002744:	017d7840 	.word	0x017d7840

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000030 	.word	0x20000030

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	080060a4 	.word	0x080060a4

08002788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	220f      	movs	r2, #15
 8002796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_RCC_GetClockConfig+0x60>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07b      	b.n	80028f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800280e:	d009      	beq.n	8002824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
 8002816:	e005      	b.n	8002824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe ff08 	bl	8001654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800285a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	f003 0104 	and.w	r1, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f003 0210 	and.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_SPI_Transmit+0x22>
 800291c:	2302      	movs	r3, #2
 800291e:	e12d      	b.n	8002b7c <HAL_SPI_Transmit+0x27e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002928:	f7ff f846 	bl	80019b8 <HAL_GetTick>
 800292c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d002      	beq.n	8002944 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002942:	e116      	b.n	8002b72 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Transmit+0x52>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002954:	e10d      	b.n	8002b72 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299c:	d10f      	bne.n	80029be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d007      	beq.n	80029dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e4:	d14f      	bne.n	8002a86 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Transmit+0xf6>
 80029ee:	8afb      	ldrh	r3, [r7, #22]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d142      	bne.n	8002a7a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	1c9a      	adds	r2, r3, #2
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a18:	e02f      	b.n	8002a7a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d112      	bne.n	8002a4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a4c:	e015      	b.n	8002a7a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4e:	f7fe ffb3 	bl	80019b8 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d803      	bhi.n	8002a66 <HAL_SPI_Transmit+0x168>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_Transmit+0x16e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002a78:	e07b      	b.n	8002b72 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ca      	bne.n	8002a1a <HAL_SPI_Transmit+0x11c>
 8002a84:	e050      	b.n	8002b28 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_Transmit+0x196>
 8002a8e:	8afb      	ldrh	r3, [r7, #22]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d144      	bne.n	8002b1e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aba:	e030      	b.n	8002b1e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d113      	bne.n	8002af2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002af0:	e015      	b.n	8002b1e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af2:	f7fe ff61 	bl	80019b8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d803      	bhi.n	8002b0a <HAL_SPI_Transmit+0x20c>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d102      	bne.n	8002b10 <HAL_SPI_Transmit+0x212>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002b1c:	e029      	b.n	8002b72 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1c9      	bne.n	8002abc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	6839      	ldr	r1, [r7, #0]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8bf 	bl	8002cb0 <SPI_EndRxTxTransaction>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e003      	b.n	8002b72 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b92:	b2db      	uxtb	r3, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb0:	f7fe ff02 	bl	80019b8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc0:	f7fe fefa 	bl	80019b8 <HAL_GetTick>
 8002bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bc6:	4b39      	ldr	r3, [pc, #228]	@ (8002cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	015b      	lsls	r3, r3, #5
 8002bcc:	0d1b      	lsrs	r3, r3, #20
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd6:	e054      	b.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d050      	beq.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be0:	f7fe feea 	bl	80019b8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	69fa      	ldr	r2, [r7, #28]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d902      	bls.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13d      	bne.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0e:	d111      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c18:	d004      	beq.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c22:	d107      	bne.n	8002c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c3c:	d10f      	bne.n	8002c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e017      	b.n	8002ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d19b      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3720      	adds	r7, #32
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000030 	.word	0x20000030

08002cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff ff6a 	bl	8002ba0 <SPI_WaitFlagStateUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e032      	b.n	8002d48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <SPI_EndRxTxTransaction+0xa0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d54 <SPI_EndRxTxTransaction+0xa4>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0d5b      	lsrs	r3, r3, #21
 8002cee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d00:	d112      	bne.n	8002d28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	@ 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff47 	bl	8002ba0 <SPI_WaitFlagStateUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e00f      	b.n	8002d48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b80      	cmp	r3, #128	@ 0x80
 8002d40:	d0f2      	beq.n	8002d28 <SPI_EndRxTxTransaction+0x78>
 8002d42:	e000      	b.n	8002d46 <SPI_EndRxTxTransaction+0x96>
        break;
 8002d44:	bf00      	nop
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000030 	.word	0x20000030
 8002d54:	165e9f81 	.word	0x165e9f81

08002d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e041      	b.n	8002dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f839 	bl	8002df6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 f9b2 	bl	8003100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e044      	b.n	8002eae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1e      	ldr	r2, [pc, #120]	@ (8002ebc <HAL_TIM_Base_Start_IT+0xb0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d018      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x6c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4e:	d013      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x6c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00e      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x6c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a19      	ldr	r2, [pc, #100]	@ (8002ec4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x6c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x6c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_TIM_Base_Start_IT+0xc0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d111      	bne.n	8002e9c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d010      	beq.n	8002eac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9a:	e007      	b.n	8002eac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40000800 	.word	0x40000800
 8002ec8:	40000c00 	.word	0x40000c00
 8002ecc:	40014000 	.word	0x40014000

08002ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d020      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01b      	beq.n	8002f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0202 	mvn.w	r2, #2
 8002f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8d2 	bl	80030c4 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8c4 	bl	80030b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8d5 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d020      	beq.n	8002f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01b      	beq.n	8002f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0204 	mvn.w	r2, #4
 8002f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8ac 	bl	80030c4 <HAL_TIM_IC_CaptureCallback>
 8002f6c:	e005      	b.n	8002f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f89e 	bl	80030b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8af 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d020      	beq.n	8002fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f886 	bl	80030c4 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f878 	bl	80030b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f889 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2208      	movs	r2, #8
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f860 	bl	80030c4 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f852 	bl	80030b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f863 	bl	80030d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0201 	mvn.w	r2, #1
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe facb 	bl	80015d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8e6 	bl	800322c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f834 	bl	80030ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0220 	mvn.w	r2, #32
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8b8 	bl	8003218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3a      	ldr	r2, [pc, #232]	@ (80031fc <TIM_Base_SetConfig+0xfc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00f      	beq.n	8003138 <TIM_Base_SetConfig+0x38>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311e:	d00b      	beq.n	8003138 <TIM_Base_SetConfig+0x38>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a37      	ldr	r2, [pc, #220]	@ (8003200 <TIM_Base_SetConfig+0x100>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <TIM_Base_SetConfig+0x38>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a36      	ldr	r2, [pc, #216]	@ (8003204 <TIM_Base_SetConfig+0x104>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <TIM_Base_SetConfig+0x38>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a35      	ldr	r2, [pc, #212]	@ (8003208 <TIM_Base_SetConfig+0x108>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d108      	bne.n	800314a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2b      	ldr	r2, [pc, #172]	@ (80031fc <TIM_Base_SetConfig+0xfc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01b      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003158:	d017      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a28      	ldr	r2, [pc, #160]	@ (8003200 <TIM_Base_SetConfig+0x100>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a27      	ldr	r2, [pc, #156]	@ (8003204 <TIM_Base_SetConfig+0x104>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00f      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a26      	ldr	r2, [pc, #152]	@ (8003208 <TIM_Base_SetConfig+0x108>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a25      	ldr	r2, [pc, #148]	@ (800320c <TIM_Base_SetConfig+0x10c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a24      	ldr	r2, [pc, #144]	@ (8003210 <TIM_Base_SetConfig+0x110>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0x8a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <TIM_Base_SetConfig+0x114>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d108      	bne.n	800319c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0e      	ldr	r2, [pc, #56]	@ (80031fc <TIM_Base_SetConfig+0xfc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d103      	bne.n	80031d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d105      	bne.n	80031ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	611a      	str	r2, [r3, #16]
  }
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800

08003218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <__NVIC_SetPriority>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	@ (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <SysTick_Handler+0x1c>)
 800329a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800329c:	f001 fd46 	bl	8004d2c <xTaskGetSchedulerState>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032a6:	f002 fb3f 	bl	8005928 <xPortSysTickHandler>
  }
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032b8:	2100      	movs	r1, #0
 80032ba:	f06f 0004 	mvn.w	r0, #4
 80032be:	f7ff ffbf 	bl	8003240 <__NVIC_SetPriority>
#endif
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032ce:	f3ef 8305 	mrs	r3, IPSR
 80032d2:	603b      	str	r3, [r7, #0]
  return(result);
 80032d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032da:	f06f 0305 	mvn.w	r3, #5
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	e00c      	b.n	80032fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032e2:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <osKernelInitialize+0x44>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032ea:	4b08      	ldr	r3, [pc, #32]	@ (800330c <osKernelInitialize+0x44>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	607b      	str	r3, [r7, #4]
 80032f4:	e002      	b.n	80032fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032fc:	687b      	ldr	r3, [r7, #4]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	200001dc 	.word	0x200001dc

08003310 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003316:	f3ef 8305 	mrs	r3, IPSR
 800331a:	603b      	str	r3, [r7, #0]
  return(result);
 800331c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003322:	f06f 0305 	mvn.w	r3, #5
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	e010      	b.n	800334c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800332a:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <osKernelStart+0x48>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d109      	bne.n	8003346 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003332:	f7ff ffbf 	bl	80032b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003336:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <osKernelStart+0x48>)
 8003338:	2202      	movs	r2, #2
 800333a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800333c:	f001 f892 	bl	8004464 <vTaskStartScheduler>
      stat = osOK;
 8003340:	2300      	movs	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	e002      	b.n	800334c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
 800334a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800334c:	687b      	ldr	r3, [r7, #4]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200001dc 	.word	0x200001dc

0800335c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	@ 0x38
 8003360:	af04      	add	r7, sp, #16
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800336c:	f3ef 8305 	mrs	r3, IPSR
 8003370:	617b      	str	r3, [r7, #20]
  return(result);
 8003372:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003374:	2b00      	cmp	r3, #0
 8003376:	d17e      	bne.n	8003476 <osThreadNew+0x11a>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d07b      	beq.n	8003476 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003382:	2318      	movs	r3, #24
 8003384:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
 800338e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d045      	beq.n	8003422 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <osThreadNew+0x48>
        name = attr->name;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <osThreadNew+0x6e>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b38      	cmp	r3, #56	@ 0x38
 80033bc:	d805      	bhi.n	80033ca <osThreadNew+0x6e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <osThreadNew+0x72>
        return (NULL);
 80033ca:	2300      	movs	r3, #0
 80033cc:	e054      	b.n	8003478 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00e      	beq.n	8003404 <osThreadNew+0xa8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80033ec:	d90a      	bls.n	8003404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <osThreadNew+0xa8>
        mem = 1;
 80033fe:	2301      	movs	r3, #1
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e010      	b.n	8003426 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10c      	bne.n	8003426 <osThreadNew+0xca>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d108      	bne.n	8003426 <osThreadNew+0xca>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <osThreadNew+0xca>
          mem = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e001      	b.n	8003426 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d110      	bne.n	800344e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003434:	9202      	str	r2, [sp, #8]
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6a3a      	ldr	r2, [r7, #32]
 8003440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fe1a 	bl	800407c <xTaskCreateStatic>
 8003448:	4603      	mov	r3, r0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	e013      	b.n	8003476 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d110      	bne.n	8003476 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	b29a      	uxth	r2, r3
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fe68 	bl	800413c <xTaskCreate>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d001      	beq.n	8003476 <osThreadNew+0x11a>
            hTask = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003476:	693b      	ldr	r3, [r7, #16]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	@ 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003488:	f3ef 8305 	mrs	r3, IPSR
 800348c:	60bb      	str	r3, [r7, #8]
  return(result);
 800348e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <osDelay+0x1c>
    stat = osErrorISR;
 8003494:	f06f 0305 	mvn.w	r3, #5
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e007      	b.n	80034ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 ffa6 	bl	80043f8 <vTaskDelay>
    }
  }

  return (stat);
 80034ac:	68fb      	ldr	r3, [r7, #12]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80034c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4a06      	ldr	r2, [pc, #24]	@ (80034e8 <vApplicationGetIdleTaskMemory+0x30>)
 80034ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2280      	movs	r2, #128	@ 0x80
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	200001e0 	.word	0x200001e0
 80034e8:	20000288 	.word	0x20000288

080034ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a07      	ldr	r2, [pc, #28]	@ (8003518 <vApplicationGetTimerTaskMemory+0x2c>)
 80034fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4a06      	ldr	r2, [pc, #24]	@ (800351c <vApplicationGetTimerTaskMemory+0x30>)
 8003502:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	20000488 	.word	0x20000488
 800351c:	20000530 	.word	0x20000530

08003520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 0208 	add.w	r2, r3, #8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f103 0208 	add.w	r2, r3, #8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f103 0208 	add.w	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d103      	bne.n	80035e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e00c      	b.n	80035fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3308      	adds	r3, #8
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e002      	b.n	80035f0 <vListInsert+0x2e>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d2f6      	bcs.n	80035ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6892      	ldr	r2, [r2, #8]
 800364a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6852      	ldr	r2, [r2, #4]
 8003654:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d103      	bne.n	8003668 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1e5a      	subs	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036b4:	f002 f8a8 	bl	8005808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	3b01      	subs	r3, #1
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	441a      	add	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	22ff      	movs	r2, #255	@ 0xff
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	22ff      	movs	r2, #255	@ 0xff
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d114      	bne.n	8003734 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01a      	beq.n	8003748 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3310      	adds	r3, #16
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f942 	bl	80049a0 <xTaskRemoveFromEventList>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <xQueueGenericReset+0xd0>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	e009      	b.n	8003748 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3310      	adds	r3, #16
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fef1 	bl	8003520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3324      	adds	r3, #36	@ 0x24
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff feec 	bl	8003520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003748:	f002 f890 	bl	800586c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800374c:	2301      	movs	r3, #1
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08e      	sub	sp, #56	@ 0x38
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <xQueueGenericCreateStatic+0x56>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <xQueueGenericCreateStatic+0x5a>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xQueueGenericCreateStatic+0x5c>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	623b      	str	r3, [r7, #32]
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <xQueueGenericCreateStatic+0x84>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <xQueueGenericCreateStatic+0x88>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <xQueueGenericCreateStatic+0x8a>
 80037e4:	2300      	movs	r3, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	61fb      	str	r3, [r7, #28]
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	e7fd      	b.n	80037fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003802:	2350      	movs	r3, #80	@ 0x50
 8003804:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b50      	cmp	r3, #80	@ 0x50
 800380a:	d00b      	beq.n	8003824 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	61bb      	str	r3, [r7, #24]
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003824:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800382a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003838:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f805 	bl	8003856 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800384e:	4618      	mov	r0, r3
 8003850:	3730      	adds	r7, #48	@ 0x30
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e002      	b.n	8003878 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003884:	2101      	movs	r1, #1
 8003886:	69b8      	ldr	r0, [r7, #24]
 8003888:	f7ff fefe 	bl	8003688 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08e      	sub	sp, #56	@ 0x38
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038aa:	2300      	movs	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <xQueueGenericSend+0x34>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	e7fd      	b.n	80038cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <xQueueGenericSend+0x42>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <xQueueGenericSend+0x46>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueGenericSend+0x48>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <xQueueGenericSend+0x64>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d103      	bne.n	800390e <xQueueGenericSend+0x72>
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <xQueueGenericSend+0x76>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericSend+0x78>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericSend+0x94>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	623b      	str	r3, [r7, #32]
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003930:	f001 f9fc 	bl	8004d2c <xTaskGetSchedulerState>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <xQueueGenericSend+0xa4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <xQueueGenericSend+0xa8>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <xQueueGenericSend+0xaa>
 8003944:	2300      	movs	r3, #0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <xQueueGenericSend+0xc6>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	61fb      	str	r3, [r7, #28]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003962:	f001 ff51 	bl	8005808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <xQueueGenericSend+0xdc>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d129      	bne.n	80039cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800397e:	f000 fa0f 	bl	8003da0 <prvCopyDataToQueue>
 8003982:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	3324      	adds	r3, #36	@ 0x24
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f805 	bl	80049a0 <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800399c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a9c <xQueueGenericSend+0x200>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	e00a      	b.n	80039c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039b4:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <xQueueGenericSend+0x200>)
 80039b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039c4:	f001 ff52 	bl	800586c <vPortExitCritical>
				return pdPASS;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e063      	b.n	8003a94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039d2:	f001 ff4b 	bl	800586c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e05c      	b.n	8003a94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 f83f 	bl	8004a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ee:	f001 ff3d 	bl	800586c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039f2:	f000 fda7 	bl	8004544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039f6:	f001 ff07 	bl	8005808 <vPortEnterCritical>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d103      	bne.n	8003a10 <xQueueGenericSend+0x174>
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a16:	b25b      	sxtb	r3, r3
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x18a>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a26:	f001 ff21 	bl	800586c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a2a:	1d3a      	adds	r2, r7, #4
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 f82e 	bl	8004a94 <xTaskCheckForTimeOut>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d124      	bne.n	8003a88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a40:	f000 faa6 	bl	8003f90 <prvIsQueueFull>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	3310      	adds	r3, #16
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 ff52 	bl	80048fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a5a:	f000 fa31 	bl	8003ec0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a5e:	f000 fd7f 	bl	8004560 <xTaskResumeAll>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f af7c 	bne.w	8003962 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <xQueueGenericSend+0x200>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	e772      	b.n	8003962 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a7e:	f000 fa1f 	bl	8003ec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a82:	f000 fd6d 	bl	8004560 <xTaskResumeAll>
 8003a86:	e76c      	b.n	8003962 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a8a:	f000 fa19 	bl	8003ec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a8e:	f000 fd67 	bl	8004560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3738      	adds	r7, #56	@ 0x38
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b090      	sub	sp, #64	@ 0x40
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <xQueueGenericSendFromISR+0x3e>
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x42>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <xQueueGenericSendFromISR+0x44>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003afa:	bf00      	nop
 8003afc:	bf00      	nop
 8003afe:	e7fd      	b.n	8003afc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d103      	bne.n	8003b0e <xQueueGenericSendFromISR+0x6e>
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <xQueueGenericSendFromISR+0x72>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <xQueueGenericSendFromISR+0x74>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	623b      	str	r3, [r7, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b30:	f001 ff4a 	bl	80059c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b34:	f3ef 8211 	mrs	r2, BASEPRI
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	61fa      	str	r2, [r7, #28]
 8003b4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <xQueueGenericSendFromISR+0xc2>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d12f      	bne.n	8003bc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b78:	f000 f912 	bl	8003da0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d112      	bne.n	8003bac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	3324      	adds	r3, #36	@ 0x24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 ff04 	bl	80049a0 <xTaskRemoveFromEventList>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00e      	beq.n	8003bbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e007      	b.n	8003bbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	b25a      	sxtb	r2, r3
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003bc0:	e001      	b.n	8003bc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3740      	adds	r7, #64	@ 0x40
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	@ 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <xQueueReceive+0x32>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	623b      	str	r3, [r7, #32]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <xQueueReceive+0x40>
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <xQueueReceive+0x44>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <xQueueReceive+0x46>
 8003c20:	2300      	movs	r3, #0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <xQueueReceive+0x62>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	61fb      	str	r3, [r7, #28]
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	e7fd      	b.n	8003c3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c3e:	f001 f875 	bl	8004d2c <xTaskGetSchedulerState>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <xQueueReceive+0x72>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <xQueueReceive+0x76>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <xQueueReceive+0x78>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <xQueueReceive+0x94>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	61bb      	str	r3, [r7, #24]
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c70:	f001 fdca 	bl	8005808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01f      	beq.n	8003cc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c84:	f000 f8f6 	bl	8003e74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00f      	beq.n	8003cb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fe7f 	bl	80049a0 <xTaskRemoveFromEventList>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8003d9c <xQueueReceive+0x1c0>)
 8003caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cb8:	f001 fdd8 	bl	800586c <vPortExitCritical>
				return pdPASS;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e069      	b.n	8003d94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cc6:	f001 fdd1 	bl	800586c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e062      	b.n	8003d94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fec5 	bl	8004a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ce2:	f001 fdc3 	bl	800586c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ce6:	f000 fc2d 	bl	8004544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cea:	f001 fd8d 	bl	8005808 <vPortEnterCritical>
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d103      	bne.n	8003d04 <xQueueReceive+0x128>
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d0a:	b25b      	sxtb	r3, r3
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d103      	bne.n	8003d1a <xQueueReceive+0x13e>
 8003d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d1a:	f001 fda7 	bl	800586c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d1e:	1d3a      	adds	r2, r7, #4
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 feb4 	bl	8004a94 <xTaskCheckForTimeOut>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d123      	bne.n	8003d7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d34:	f000 f916 	bl	8003f64 <prvIsQueueEmpty>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	3324      	adds	r3, #36	@ 0x24
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fdd8 	bl	80048fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d4e:	f000 f8b7 	bl	8003ec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d52:	f000 fc05 	bl	8004560 <xTaskResumeAll>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d189      	bne.n	8003c70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <xQueueReceive+0x1c0>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	e780      	b.n	8003c70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d70:	f000 f8a6 	bl	8003ec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d74:	f000 fbf4 	bl	8004560 <xTaskResumeAll>
 8003d78:	e77a      	b.n	8003c70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d7c:	f000 f8a0 	bl	8003ec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d80:	f000 fbee 	bl	8004560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d86:	f000 f8ed 	bl	8003f64 <prvIsQueueEmpty>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f43f af6f 	beq.w	8003c70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3730      	adds	r7, #48	@ 0x30
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d14d      	bne.n	8003e62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 ffcc 	bl	8004d68 <xTaskPriorityDisinherit>
 8003dd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	e043      	b.n	8003e62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d119      	bne.n	8003e14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6858      	ldr	r0, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	461a      	mov	r2, r3
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	f002 f8a0 	bl	8005f30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d32b      	bcc.n	8003e62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	e026      	b.n	8003e62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68d8      	ldr	r0, [r3, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	f002 f886 	bl	8005f30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	425b      	negs	r3, r3
 8003e2e:	441a      	add	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d207      	bcs.n	8003e50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	425b      	negs	r3, r3
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d105      	bne.n	8003e62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e6a:	697b      	ldr	r3, [r7, #20]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d018      	beq.n	8003eb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	441a      	add	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d303      	bcc.n	8003ea8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68d9      	ldr	r1, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6838      	ldr	r0, [r7, #0]
 8003eb4:	f002 f83c 	bl	8005f30 <memcpy>
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ec8:	f001 fc9e 	bl	8005808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ed2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ed4:	e011      	b.n	8003efa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d012      	beq.n	8003f04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	@ 0x24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fd5c 	bl	80049a0 <xTaskRemoveFromEventList>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eee:	f000 fe35 	bl	8004b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dce9      	bgt.n	8003ed6 <prvUnlockQueue+0x16>
 8003f02:	e000      	b.n	8003f06 <prvUnlockQueue+0x46>
					break;
 8003f04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	22ff      	movs	r2, #255	@ 0xff
 8003f0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f0e:	f001 fcad 	bl	800586c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f12:	f001 fc79 	bl	8005808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f1e:	e011      	b.n	8003f44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d012      	beq.n	8003f4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3310      	adds	r3, #16
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fd37 	bl	80049a0 <xTaskRemoveFromEventList>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f38:	f000 fe10 	bl	8004b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f3c:	7bbb      	ldrb	r3, [r7, #14]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	dce9      	bgt.n	8003f20 <prvUnlockQueue+0x60>
 8003f4c:	e000      	b.n	8003f50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	22ff      	movs	r2, #255	@ 0xff
 8003f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f58:	f001 fc88 	bl	800586c <vPortExitCritical>
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f6c:	f001 fc4c 	bl	8005808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e001      	b.n	8003f82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f82:	f001 fc73 	bl	800586c <vPortExitCritical>

	return xReturn;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f98:	f001 fc36 	bl	8005808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d102      	bne.n	8003fae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e001      	b.n	8003fb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fb2:	f001 fc5b 	bl	800586c <vPortExitCritical>

	return xReturn;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e014      	b.n	8003ffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8004010 <vQueueAddToRegistry+0x50>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fdc:	490c      	ldr	r1, [pc, #48]	@ (8004010 <vQueueAddToRegistry+0x50>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8004010 <vQueueAddToRegistry+0x50>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ff2:	e006      	b.n	8004002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b07      	cmp	r3, #7
 8003ffe:	d9e7      	bls.n	8003fd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000930 	.word	0x20000930

08004014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004024:	f001 fbf0 	bl	8005808 <vPortEnterCritical>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800402e:	b25b      	sxtb	r3, r3
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d103      	bne.n	800403e <vQueueWaitForMessageRestricted+0x2a>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004044:	b25b      	sxtb	r3, r3
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d103      	bne.n	8004054 <vQueueWaitForMessageRestricted+0x40>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004054:	f001 fc0a 	bl	800586c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3324      	adds	r3, #36	@ 0x24
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fc6d 	bl	8004948 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff26 	bl	8003ec0 <prvUnlockQueue>
	}
 8004074:	bf00      	nop
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	@ 0x38
 8004080:	af04      	add	r7, sp, #16
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	623b      	str	r3, [r7, #32]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	61fb      	str	r3, [r7, #28]
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040c6:	23a8      	movs	r3, #168	@ 0xa8
 80040c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80040ce:	d00b      	beq.n	80040e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61bb      	str	r3, [r7, #24]
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01e      	beq.n	800412e <xTaskCreateStatic+0xb2>
 80040f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01b      	beq.n	800412e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	2202      	movs	r2, #2
 8004104:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004108:	2300      	movs	r3, #0
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f851 	bl	80041c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004128:	f000 f8f6 	bl	8004318 <prvAddNewTaskToReadyList>
 800412c:	e001      	b.n	8004132 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004132:	697b      	ldr	r3, [r7, #20]
	}
 8004134:	4618      	mov	r0, r3
 8004136:	3728      	adds	r7, #40	@ 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	@ 0x30
 8004140:	af04      	add	r7, sp, #16
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4618      	mov	r0, r3
 8004152:	f001 fc7b 	bl	8005a4c <pvPortMalloc>
 8004156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00e      	beq.n	800417c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800415e:	20a8      	movs	r0, #168	@ 0xa8
 8004160:	f001 fc74 	bl	8005a4c <pvPortMalloc>
 8004164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30
 8004172:	e005      	b.n	8004180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f001 fd37 	bl	8005be8 <vPortFree>
 800417a:	e001      	b.n	8004180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d017      	beq.n	80041b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	2300      	movs	r3, #0
 8004192:	9303      	str	r3, [sp, #12]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f80f 	bl	80041c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041aa:	69f8      	ldr	r0, [r7, #28]
 80041ac:	f000 f8b4 	bl	8004318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	e002      	b.n	80041bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041bc:	69bb      	ldr	r3, [r7, #24]
	}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	461a      	mov	r2, r3
 80041e0:	21a5      	movs	r1, #165	@ 0xa5
 80041e2:	f001 fe21 	bl	8005e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041f0:	3b01      	subs	r3, #1
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f023 0307 	bic.w	r3, r3, #7
 80041fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	617b      	str	r3, [r7, #20]
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01f      	beq.n	8004268 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	e012      	b.n	8004254 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	7819      	ldrb	r1, [r3, #0]
 8004236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	3334      	adds	r3, #52	@ 0x34
 800423e:	460a      	mov	r2, r1
 8004240:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d006      	beq.n	800425c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3301      	adds	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b0f      	cmp	r3, #15
 8004258:	d9e9      	bls.n	800422e <prvInitialiseNewTask+0x66>
 800425a:	e000      	b.n	800425e <prvInitialiseNewTask+0x96>
			{
				break;
 800425c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004266:	e003      	b.n	8004270 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	2b37      	cmp	r3, #55	@ 0x37
 8004274:	d901      	bls.n	800427a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004276:	2337      	movs	r3, #55	@ 0x37
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004284:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	2200      	movs	r2, #0
 800428a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	3304      	adds	r3, #4
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff f965 	bl	8003560 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	3318      	adds	r3, #24
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f960 	bl	8003560 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	3354      	adds	r3, #84	@ 0x54
 80042ca:	224c      	movs	r2, #76	@ 0x4c
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 fdaa 	bl	8005e28 <memset>
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <prvInitialiseNewTask+0x144>)
 80042d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004310 <prvInitialiseNewTask+0x148>)
 80042de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <prvInitialiseNewTask+0x14c>)
 80042e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	69b8      	ldr	r0, [r7, #24]
 80042ec:	f001 f95a 	bl	80055a4 <pxPortInitialiseStack>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20004bc4 	.word	0x20004bc4
 8004310:	20004c2c 	.word	0x20004c2c
 8004314:	20004c94 	.word	0x20004c94

08004318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004320:	f001 fa72 	bl	8005808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004324:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <prvAddNewTaskToReadyList+0xc4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	4a2c      	ldr	r2, [pc, #176]	@ (80043dc <prvAddNewTaskToReadyList+0xc4>)
 800432c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004336:	4a2a      	ldr	r2, [pc, #168]	@ (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800433c:	4b27      	ldr	r3, [pc, #156]	@ (80043dc <prvAddNewTaskToReadyList+0xc4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d110      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004344:	f000 fc2e 	bl	8004ba4 <prvInitialiseTaskLists>
 8004348:	e00d      	b.n	8004366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800434a:	4b26      	ldr	r3, [pc, #152]	@ (80043e4 <prvAddNewTaskToReadyList+0xcc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004352:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	d802      	bhi.n	8004366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004360:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004366:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <prvAddNewTaskToReadyList+0xd0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a1e      	ldr	r2, [pc, #120]	@ (80043e8 <prvAddNewTaskToReadyList+0xd0>)
 800436e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004370:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <prvAddNewTaskToReadyList+0xd0>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <prvAddNewTaskToReadyList+0xd4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d903      	bls.n	800438c <prvAddNewTaskToReadyList+0x74>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	4a18      	ldr	r2, [pc, #96]	@ (80043ec <prvAddNewTaskToReadyList+0xd4>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4a15      	ldr	r2, [pc, #84]	@ (80043f0 <prvAddNewTaskToReadyList+0xd8>)
 800439a:	441a      	add	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7ff f8e9 	bl	800357a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043a8:	f001 fa60 	bl	800586c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043ac:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <prvAddNewTaskToReadyList+0xcc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00e      	beq.n	80043d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	429a      	cmp	r2, r3
 80043c0:	d207      	bcs.n	80043d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043c2:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <prvAddNewTaskToReadyList+0xdc>)
 80043c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000e44 	.word	0x20000e44
 80043e0:	20000970 	.word	0x20000970
 80043e4:	20000e50 	.word	0x20000e50
 80043e8:	20000e60 	.word	0x20000e60
 80043ec:	20000e4c 	.word	0x20000e4c
 80043f0:	20000974 	.word	0x20000974
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d018      	beq.n	800443c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800440a:	4b14      	ldr	r3, [pc, #80]	@ (800445c <vTaskDelay+0x64>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <vTaskDelay+0x32>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60bb      	str	r3, [r7, #8]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800442a:	f000 f88b 	bl	8004544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800442e:	2100      	movs	r1, #0
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fd09 	bl	8004e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004436:	f000 f893 	bl	8004560 <xTaskResumeAll>
 800443a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d107      	bne.n	8004452 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004442:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <vTaskDelay+0x68>)
 8004444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000e6c 	.word	0x20000e6c
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004472:	463a      	mov	r2, r7
 8004474:	1d39      	adds	r1, r7, #4
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff f81c 	bl	80034b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	9202      	str	r2, [sp, #8]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	460a      	mov	r2, r1
 8004492:	4924      	ldr	r1, [pc, #144]	@ (8004524 <vTaskStartScheduler+0xc0>)
 8004494:	4824      	ldr	r0, [pc, #144]	@ (8004528 <vTaskStartScheduler+0xc4>)
 8004496:	f7ff fdf1 	bl	800407c <xTaskCreateStatic>
 800449a:	4603      	mov	r3, r0
 800449c:	4a23      	ldr	r2, [pc, #140]	@ (800452c <vTaskStartScheduler+0xc8>)
 800449e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044a0:	4b22      	ldr	r3, [pc, #136]	@ (800452c <vTaskStartScheduler+0xc8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044a8:	2301      	movs	r3, #1
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e001      	b.n	80044b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d102      	bne.n	80044be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044b8:	f000 fd1a 	bl	8004ef0 <xTimerCreateTimerTask>
 80044bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d11b      	bne.n	80044fc <vTaskStartScheduler+0x98>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
}
 80044d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044d8:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <vTaskStartScheduler+0xcc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3354      	adds	r3, #84	@ 0x54
 80044de:	4a15      	ldr	r2, [pc, #84]	@ (8004534 <vTaskStartScheduler+0xd0>)
 80044e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <vTaskStartScheduler+0xd4>)
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044ea:	4b14      	ldr	r3, [pc, #80]	@ (800453c <vTaskStartScheduler+0xd8>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <vTaskStartScheduler+0xdc>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044f6:	f001 f8e3 	bl	80056c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044fa:	e00f      	b.n	800451c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d10b      	bne.n	800451c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60fb      	str	r3, [r7, #12]
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <vTaskStartScheduler+0xb4>
}
 800451c:	bf00      	nop
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	08006034 	.word	0x08006034
 8004528:	08004b75 	.word	0x08004b75
 800452c:	20000e68 	.word	0x20000e68
 8004530:	20000970 	.word	0x20000970
 8004534:	20000040 	.word	0x20000040
 8004538:	20000e64 	.word	0x20000e64
 800453c:	20000e50 	.word	0x20000e50
 8004540:	20000e48 	.word	0x20000e48

08004544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004548:	4b04      	ldr	r3, [pc, #16]	@ (800455c <vTaskSuspendAll+0x18>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a03      	ldr	r2, [pc, #12]	@ (800455c <vTaskSuspendAll+0x18>)
 8004550:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	20000e6c 	.word	0x20000e6c

08004560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800456e:	4b42      	ldr	r3, [pc, #264]	@ (8004678 <xTaskResumeAll+0x118>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <xTaskResumeAll+0x2e>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	603b      	str	r3, [r7, #0]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800458e:	f001 f93b 	bl	8005808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004592:	4b39      	ldr	r3, [pc, #228]	@ (8004678 <xTaskResumeAll+0x118>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3b01      	subs	r3, #1
 8004598:	4a37      	ldr	r2, [pc, #220]	@ (8004678 <xTaskResumeAll+0x118>)
 800459a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800459c:	4b36      	ldr	r3, [pc, #216]	@ (8004678 <xTaskResumeAll+0x118>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d162      	bne.n	800466a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045a4:	4b35      	ldr	r3, [pc, #212]	@ (800467c <xTaskResumeAll+0x11c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05e      	beq.n	800466a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ac:	e02f      	b.n	800460e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ae:	4b34      	ldr	r3, [pc, #208]	@ (8004680 <xTaskResumeAll+0x120>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3318      	adds	r3, #24
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff f83a 	bl	8003634 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff f835 	bl	8003634 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004684 <xTaskResumeAll+0x124>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d903      	bls.n	80045de <xTaskResumeAll+0x7e>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	4a2a      	ldr	r2, [pc, #168]	@ (8004684 <xTaskResumeAll+0x124>)
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4a27      	ldr	r2, [pc, #156]	@ (8004688 <xTaskResumeAll+0x128>)
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f7fe ffc0 	bl	800357a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fe:	4b23      	ldr	r3, [pc, #140]	@ (800468c <xTaskResumeAll+0x12c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004608:	4b21      	ldr	r3, [pc, #132]	@ (8004690 <xTaskResumeAll+0x130>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800460e:	4b1c      	ldr	r3, [pc, #112]	@ (8004680 <xTaskResumeAll+0x120>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1cb      	bne.n	80045ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800461c:	f000 fb66 	bl	8004cec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004620:	4b1c      	ldr	r3, [pc, #112]	@ (8004694 <xTaskResumeAll+0x134>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800462c:	f000 f846 	bl	80046bc <xTaskIncrementTick>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004636:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <xTaskResumeAll+0x130>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f1      	bne.n	800462c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004648:	4b12      	ldr	r3, [pc, #72]	@ (8004694 <xTaskResumeAll+0x134>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800464e:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <xTaskResumeAll+0x130>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800465a:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <xTaskResumeAll+0x138>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800466a:	f001 f8ff 	bl	800586c <vPortExitCritical>

	return xAlreadyYielded;
 800466e:	68bb      	ldr	r3, [r7, #8]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000e6c 	.word	0x20000e6c
 800467c:	20000e44 	.word	0x20000e44
 8004680:	20000e04 	.word	0x20000e04
 8004684:	20000e4c 	.word	0x20000e4c
 8004688:	20000974 	.word	0x20000974
 800468c:	20000970 	.word	0x20000970
 8004690:	20000e58 	.word	0x20000e58
 8004694:	20000e54 	.word	0x20000e54
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046a2:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <xTaskGetTickCount+0x1c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046a8:	687b      	ldr	r3, [r7, #4]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000e48 	.word	0x20000e48

080046bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004804 <xTaskIncrementTick+0x148>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 8090 	bne.w	80047f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004808 <xTaskIncrementTick+0x14c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004808 <xTaskIncrementTick+0x14c>)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d121      	bne.n	8004728 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046e4:	4b49      	ldr	r3, [pc, #292]	@ (800480c <xTaskIncrementTick+0x150>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <xTaskIncrementTick+0x4a>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	603b      	str	r3, [r7, #0]
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop
 8004704:	e7fd      	b.n	8004702 <xTaskIncrementTick+0x46>
 8004706:	4b41      	ldr	r3, [pc, #260]	@ (800480c <xTaskIncrementTick+0x150>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	4b40      	ldr	r3, [pc, #256]	@ (8004810 <xTaskIncrementTick+0x154>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3e      	ldr	r2, [pc, #248]	@ (800480c <xTaskIncrementTick+0x150>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4a3e      	ldr	r2, [pc, #248]	@ (8004810 <xTaskIncrementTick+0x154>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b3e      	ldr	r3, [pc, #248]	@ (8004814 <xTaskIncrementTick+0x158>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4a3c      	ldr	r2, [pc, #240]	@ (8004814 <xTaskIncrementTick+0x158>)
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	f000 fae2 	bl	8004cec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004728:	4b3b      	ldr	r3, [pc, #236]	@ (8004818 <xTaskIncrementTick+0x15c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	429a      	cmp	r2, r3
 8004730:	d349      	bcc.n	80047c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004732:	4b36      	ldr	r3, [pc, #216]	@ (800480c <xTaskIncrementTick+0x150>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473c:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <xTaskIncrementTick+0x15c>)
 800473e:	f04f 32ff 	mov.w	r2, #4294967295
 8004742:	601a      	str	r2, [r3, #0]
					break;
 8004744:	e03f      	b.n	80047c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004746:	4b31      	ldr	r3, [pc, #196]	@ (800480c <xTaskIncrementTick+0x150>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d203      	bcs.n	8004766 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800475e:	4a2e      	ldr	r2, [pc, #184]	@ (8004818 <xTaskIncrementTick+0x15c>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004764:	e02f      	b.n	80047c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3304      	adds	r3, #4
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ff62 	bl	8003634 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	3318      	adds	r3, #24
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ff59 	bl	8003634 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004786:	4b25      	ldr	r3, [pc, #148]	@ (800481c <xTaskIncrementTick+0x160>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d903      	bls.n	8004796 <xTaskIncrementTick+0xda>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a22      	ldr	r2, [pc, #136]	@ (800481c <xTaskIncrementTick+0x160>)
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004820 <xTaskIncrementTick+0x164>)
 80047a4:	441a      	add	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fe fee4 	bl	800357a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <xTaskIncrementTick+0x168>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	429a      	cmp	r2, r3
 80047be:	d3b8      	bcc.n	8004732 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c4:	e7b5      	b.n	8004732 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047c6:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <xTaskIncrementTick+0x168>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047cc:	4914      	ldr	r1, [pc, #80]	@ (8004820 <xTaskIncrementTick+0x164>)
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d901      	bls.n	80047e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047e2:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <xTaskIncrementTick+0x16c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	e004      	b.n	80047fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047f0:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <xTaskIncrementTick+0x170>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a0d      	ldr	r2, [pc, #52]	@ (800482c <xTaskIncrementTick+0x170>)
 80047f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047fa:	697b      	ldr	r3, [r7, #20]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000e6c 	.word	0x20000e6c
 8004808:	20000e48 	.word	0x20000e48
 800480c:	20000dfc 	.word	0x20000dfc
 8004810:	20000e00 	.word	0x20000e00
 8004814:	20000e5c 	.word	0x20000e5c
 8004818:	20000e64 	.word	0x20000e64
 800481c:	20000e4c 	.word	0x20000e4c
 8004820:	20000974 	.word	0x20000974
 8004824:	20000970 	.word	0x20000970
 8004828:	20000e58 	.word	0x20000e58
 800482c:	20000e54 	.word	0x20000e54

08004830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004836:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <vTaskSwitchContext+0xb4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800483e:	4b2a      	ldr	r3, [pc, #168]	@ (80048e8 <vTaskSwitchContext+0xb8>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004844:	e047      	b.n	80048d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004846:	4b28      	ldr	r3, [pc, #160]	@ (80048e8 <vTaskSwitchContext+0xb8>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484c:	4b27      	ldr	r3, [pc, #156]	@ (80048ec <vTaskSwitchContext+0xbc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e011      	b.n	8004878 <vTaskSwitchContext+0x48>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <vTaskSwitchContext+0x42>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	e7fd      	b.n	800486e <vTaskSwitchContext+0x3e>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3b01      	subs	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	491d      	ldr	r1, [pc, #116]	@ (80048f0 <vTaskSwitchContext+0xc0>)
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0e3      	beq.n	8004854 <vTaskSwitchContext+0x24>
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <vTaskSwitchContext+0xc0>)
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	3308      	adds	r3, #8
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d104      	bne.n	80048bc <vTaskSwitchContext+0x8c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	4a0c      	ldr	r2, [pc, #48]	@ (80048f4 <vTaskSwitchContext+0xc4>)
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <vTaskSwitchContext+0xbc>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048cc:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <vTaskSwitchContext+0xc4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3354      	adds	r3, #84	@ 0x54
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <vTaskSwitchContext+0xc8>)
 80048d4:	6013      	str	r3, [r2, #0]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000e6c 	.word	0x20000e6c
 80048e8:	20000e58 	.word	0x20000e58
 80048ec:	20000e4c 	.word	0x20000e4c
 80048f0:	20000974 	.word	0x20000974
 80048f4:	20000970 	.word	0x20000970
 80048f8:	20000040 	.word	0x20000040

080048fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10b      	bne.n	8004924 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	e7fd      	b.n	8004920 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004924:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <vTaskPlaceOnEventList+0x48>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3318      	adds	r3, #24
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fe fe48 	bl	80035c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004932:	2101      	movs	r1, #1
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f000 fa87 	bl	8004e48 <prvAddCurrentTaskToDelayedList>
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000970 	.word	0x20000970

08004948 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	617b      	str	r3, [r7, #20]
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004972:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <vTaskPlaceOnEventListRestricted+0x54>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3318      	adds	r3, #24
 8004978:	4619      	mov	r1, r3
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7fe fdfd 	bl	800357a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f000 fa5a 	bl	8004e48 <prvAddCurrentTaskToDelayedList>
	}
 8004994:	bf00      	nop
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000970 	.word	0x20000970

080049a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60fb      	str	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3318      	adds	r3, #24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fe2e 	bl	8003634 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <xTaskRemoveFromEventList+0xb0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11d      	bne.n	8004a1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fe25 	bl	8003634 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	4b19      	ldr	r3, [pc, #100]	@ (8004a54 <xTaskRemoveFromEventList+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <xTaskRemoveFromEventList+0x5e>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <xTaskRemoveFromEventList+0xb4>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4a13      	ldr	r2, [pc, #76]	@ (8004a58 <xTaskRemoveFromEventList+0xb8>)
 8004a0c:	441a      	add	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7fe fdb0 	bl	800357a <vListInsertEnd>
 8004a1a:	e005      	b.n	8004a28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3318      	adds	r3, #24
 8004a20:	4619      	mov	r1, r3
 8004a22:	480e      	ldr	r0, [pc, #56]	@ (8004a5c <xTaskRemoveFromEventList+0xbc>)
 8004a24:	f7fe fda9 	bl	800357a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a60 <xTaskRemoveFromEventList+0xc0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d905      	bls.n	8004a42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <xTaskRemoveFromEventList+0xc4>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e001      	b.n	8004a46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a46:	697b      	ldr	r3, [r7, #20]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000e6c 	.word	0x20000e6c
 8004a54:	20000e4c 	.word	0x20000e4c
 8004a58:	20000974 	.word	0x20000974
 8004a5c:	20000e04 	.word	0x20000e04
 8004a60:	20000970 	.word	0x20000970
 8004a64:	20000e58 	.word	0x20000e58

08004a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <vTaskInternalSetTimeOutState+0x24>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a78:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <vTaskInternalSetTimeOutState+0x28>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	605a      	str	r2, [r3, #4]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	20000e5c 	.word	0x20000e5c
 8004a90:	20000e48 	.word	0x20000e48

08004a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	613b      	str	r3, [r7, #16]
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60fb      	str	r3, [r7, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004ada:	f000 fe95 	bl	8005808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <xTaskCheckForTimeOut+0xc0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d102      	bne.n	8004afe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e023      	b.n	8004b46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b15      	ldr	r3, [pc, #84]	@ (8004b58 <xTaskCheckForTimeOut+0xc4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d007      	beq.n	8004b1a <xTaskCheckForTimeOut+0x86>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d302      	bcc.n	8004b1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e015      	b.n	8004b46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d20b      	bcs.n	8004b3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff99 	bl	8004a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e004      	b.n	8004b46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b46:	f000 fe91 	bl	800586c <vPortExitCritical>

	return xReturn;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000e48 	.word	0x20000e48
 8004b58:	20000e5c 	.word	0x20000e5c

08004b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b60:	4b03      	ldr	r3, [pc, #12]	@ (8004b70 <vTaskMissedYield+0x14>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20000e58 	.word	0x20000e58

08004b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b7c:	f000 f852 	bl	8004c24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <prvIdleTask+0x28>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d9f9      	bls.n	8004b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <prvIdleTask+0x2c>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b98:	e7f0      	b.n	8004b7c <prvIdleTask+0x8>
 8004b9a:	bf00      	nop
 8004b9c:	20000974 	.word	0x20000974
 8004ba0:	e000ed04 	.word	0xe000ed04

08004ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	e00c      	b.n	8004bca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <prvInitialiseTaskLists+0x60>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fcae 	bl	8003520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b37      	cmp	r3, #55	@ 0x37
 8004bce:	d9ef      	bls.n	8004bb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bd0:	480d      	ldr	r0, [pc, #52]	@ (8004c08 <prvInitialiseTaskLists+0x64>)
 8004bd2:	f7fe fca5 	bl	8003520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bd6:	480d      	ldr	r0, [pc, #52]	@ (8004c0c <prvInitialiseTaskLists+0x68>)
 8004bd8:	f7fe fca2 	bl	8003520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bdc:	480c      	ldr	r0, [pc, #48]	@ (8004c10 <prvInitialiseTaskLists+0x6c>)
 8004bde:	f7fe fc9f 	bl	8003520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004be2:	480c      	ldr	r0, [pc, #48]	@ (8004c14 <prvInitialiseTaskLists+0x70>)
 8004be4:	f7fe fc9c 	bl	8003520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004be8:	480b      	ldr	r0, [pc, #44]	@ (8004c18 <prvInitialiseTaskLists+0x74>)
 8004bea:	f7fe fc99 	bl	8003520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <prvInitialiseTaskLists+0x78>)
 8004bf0:	4a05      	ldr	r2, [pc, #20]	@ (8004c08 <prvInitialiseTaskLists+0x64>)
 8004bf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <prvInitialiseTaskLists+0x7c>)
 8004bf6:	4a05      	ldr	r2, [pc, #20]	@ (8004c0c <prvInitialiseTaskLists+0x68>)
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000974 	.word	0x20000974
 8004c08:	20000dd4 	.word	0x20000dd4
 8004c0c:	20000de8 	.word	0x20000de8
 8004c10:	20000e04 	.word	0x20000e04
 8004c14:	20000e18 	.word	0x20000e18
 8004c18:	20000e30 	.word	0x20000e30
 8004c1c:	20000dfc 	.word	0x20000dfc
 8004c20:	20000e00 	.word	0x20000e00

08004c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c2a:	e019      	b.n	8004c60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c2c:	f000 fdec 	bl	8005808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c30:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <prvCheckTasksWaitingTermination+0x50>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe fcf9 	bl	8003634 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <prvCheckTasksWaitingTermination+0x54>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4a0b      	ldr	r2, [pc, #44]	@ (8004c78 <prvCheckTasksWaitingTermination+0x54>)
 8004c4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c56:	f000 fe09 	bl	800586c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f810 	bl	8004c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <prvCheckTasksWaitingTermination+0x58>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e1      	bne.n	8004c2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000e18 	.word	0x20000e18
 8004c78:	20000e44 	.word	0x20000e44
 8004c7c:	20000e2c 	.word	0x20000e2c

08004c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3354      	adds	r3, #84	@ 0x54
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 f8d3 	bl	8005e38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d108      	bne.n	8004cae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 ffa1 	bl	8005be8 <vPortFree>
				vPortFree( pxTCB );
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 ff9e 	bl	8005be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cac:	e019      	b.n	8004ce2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d103      	bne.n	8004cc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 ff95 	bl	8005be8 <vPortFree>
	}
 8004cbe:	e010      	b.n	8004ce2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d00b      	beq.n	8004ce2 <prvDeleteTCB+0x62>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60fb      	str	r3, [r7, #12]
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	e7fd      	b.n	8004cde <prvDeleteTCB+0x5e>
	}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d24 <prvResetNextTaskUnblockTime+0x38>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <prvResetNextTaskUnblockTime+0x3c>)
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004d02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d04:	e008      	b.n	8004d18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d06:	4b07      	ldr	r3, [pc, #28]	@ (8004d24 <prvResetNextTaskUnblockTime+0x38>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a04      	ldr	r2, [pc, #16]	@ (8004d28 <prvResetNextTaskUnblockTime+0x3c>)
 8004d16:	6013      	str	r3, [r2, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	20000dfc 	.word	0x20000dfc
 8004d28:	20000e64 	.word	0x20000e64

08004d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <xTaskGetSchedulerState+0x34>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e008      	b.n	8004d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d40:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <xTaskGetSchedulerState+0x38>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	e001      	b.n	8004d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d52:	687b      	ldr	r3, [r7, #4]
	}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000e50 	.word	0x20000e50
 8004d64:	20000e6c 	.word	0x20000e6c

08004d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d058      	beq.n	8004e30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e3c <xTaskPriorityDisinherit+0xd4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d00b      	beq.n	8004da0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	60fb      	str	r3, [r7, #12]
}
 8004d9a:	bf00      	nop
 8004d9c:	bf00      	nop
 8004d9e:	e7fd      	b.n	8004d9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	60bb      	str	r3, [r7, #8]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d02c      	beq.n	8004e30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d128      	bne.n	8004e30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fc26 	bl	8003634 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e00:	4b0f      	ldr	r3, [pc, #60]	@ (8004e40 <xTaskPriorityDisinherit+0xd8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d903      	bls.n	8004e10 <xTaskPriorityDisinherit+0xa8>
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <xTaskPriorityDisinherit+0xd8>)
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4a09      	ldr	r2, [pc, #36]	@ (8004e44 <xTaskPriorityDisinherit+0xdc>)
 8004e1e:	441a      	add	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fe fba7 	bl	800357a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e30:	697b      	ldr	r3, [r7, #20]
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000970 	.word	0x20000970
 8004e40:	20000e4c 	.word	0x20000e4c
 8004e44:	20000974 	.word	0x20000974

08004e48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e52:	4b21      	ldr	r3, [pc, #132]	@ (8004ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e58:	4b20      	ldr	r3, [pc, #128]	@ (8004edc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fbe8 	bl	8003634 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d10a      	bne.n	8004e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d007      	beq.n	8004e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e72:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3304      	adds	r3, #4
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4819      	ldr	r0, [pc, #100]	@ (8004ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e7c:	f7fe fb7d 	bl	800357a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e80:	e026      	b.n	8004ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e8a:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <prvAddCurrentTaskToDelayedList+0x94>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d209      	bcs.n	8004eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f7fe fb8b 	bl	80035c2 <vListInsert>
}
 8004eac:	e010      	b.n	8004ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <prvAddCurrentTaskToDelayedList+0x94>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fe fb81 	bl	80035c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d202      	bcs.n	8004ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004eca:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6013      	str	r3, [r2, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000e48 	.word	0x20000e48
 8004edc:	20000970 	.word	0x20000970
 8004ee0:	20000e30 	.word	0x20000e30
 8004ee4:	20000e00 	.word	0x20000e00
 8004ee8:	20000dfc 	.word	0x20000dfc
 8004eec:	20000e64 	.word	0x20000e64

08004ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004efa:	f000 fb13 	bl	8005524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004efe:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <xTimerCreateTimerTask+0x84>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d021      	beq.n	8004f4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f0e:	1d3a      	adds	r2, r7, #4
 8004f10:	f107 0108 	add.w	r1, r7, #8
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fe fae7 	bl	80034ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	9202      	str	r2, [sp, #8]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	2302      	movs	r3, #2
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	460a      	mov	r2, r1
 8004f30:	4911      	ldr	r1, [pc, #68]	@ (8004f78 <xTimerCreateTimerTask+0x88>)
 8004f32:	4812      	ldr	r0, [pc, #72]	@ (8004f7c <xTimerCreateTimerTask+0x8c>)
 8004f34:	f7ff f8a2 	bl	800407c <xTaskCreateStatic>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4a11      	ldr	r2, [pc, #68]	@ (8004f80 <xTimerCreateTimerTask+0x90>)
 8004f3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f3e:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <xTimerCreateTimerTask+0x90>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f46:	2301      	movs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f68:	697b      	ldr	r3, [r7, #20]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000ea0 	.word	0x20000ea0
 8004f78:	0800603c 	.word	0x0800603c
 8004f7c:	080050bd 	.word	0x080050bd
 8004f80:	20000ea4 	.word	0x20000ea4

08004f84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	@ 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	623b      	str	r3, [r7, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <xTimerGenericCommand+0x98>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d02a      	beq.n	8005012 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	dc18      	bgt.n	8005000 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fce:	f7ff fead 	bl	8004d2c <xTaskGetSchedulerState>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d109      	bne.n	8004fec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fd8:	4b10      	ldr	r3, [pc, #64]	@ (800501c <xTimerGenericCommand+0x98>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	f107 0110 	add.w	r1, r7, #16
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe4:	f7fe fc5a 	bl	800389c <xQueueGenericSend>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fea:	e012      	b.n	8005012 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fec:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <xTimerGenericCommand+0x98>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	f107 0110 	add.w	r1, r7, #16
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f7fe fc50 	bl	800389c <xQueueGenericSend>
 8004ffc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ffe:	e008      	b.n	8005012 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <xTimerGenericCommand+0x98>)
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	f107 0110 	add.w	r1, r7, #16
 8005008:	2300      	movs	r3, #0
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	f7fe fd48 	bl	8003aa0 <xQueueGenericSendFromISR>
 8005010:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005014:	4618      	mov	r0, r3
 8005016:	3728      	adds	r7, #40	@ 0x28
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000ea0 	.word	0x20000ea0

08005020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800502a:	4b23      	ldr	r3, [pc, #140]	@ (80050b8 <prvProcessExpiredTimer+0x98>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3304      	adds	r3, #4
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fafb 	bl	8003634 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d023      	beq.n	8005094 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	18d1      	adds	r1, r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	f000 f8d5 	bl	8005208 <prvInsertTimerInActiveList>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	2100      	movs	r1, #0
 800506e:	6978      	ldr	r0, [r7, #20]
 8005070:	f7ff ff88 	bl	8004f84 <xTimerGenericCommand>
 8005074:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d114      	bne.n	80050a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60fb      	str	r3, [r7, #12]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	6978      	ldr	r0, [r7, #20]
 80050ac:	4798      	blx	r3
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000e98 	.word	0x20000e98

080050bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f859 	bl	8005180 <prvGetNextExpireTime>
 80050ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4619      	mov	r1, r3
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f805 	bl	80050e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050da:	f000 f8d7 	bl	800528c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050de:	bf00      	nop
 80050e0:	e7f0      	b.n	80050c4 <prvTimerTask+0x8>
	...

080050e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050ee:	f7ff fa29 	bl	8004544 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050f2:	f107 0308 	add.w	r3, r7, #8
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f866 	bl	80051c8 <prvSampleTimeNow>
 80050fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d130      	bne.n	8005166 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <prvProcessTimerOrBlockTask+0x3c>
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	429a      	cmp	r2, r3
 8005110:	d806      	bhi.n	8005120 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005112:	f7ff fa25 	bl	8004560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff81 	bl	8005020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800511e:	e024      	b.n	800516a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005126:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <prvProcessTimerOrBlockTask+0x90>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <prvProcessTimerOrBlockTask+0x50>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <prvProcessTimerOrBlockTask+0x52>
 8005134:	2300      	movs	r3, #0
 8005136:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <prvProcessTimerOrBlockTask+0x94>)
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	f7fe ff65 	bl	8004014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800514a:	f7ff fa09 	bl	8004560 <xTaskResumeAll>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005154:	4b09      	ldr	r3, [pc, #36]	@ (800517c <prvProcessTimerOrBlockTask+0x98>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
}
 8005164:	e001      	b.n	800516a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005166:	f7ff f9fb 	bl	8004560 <xTaskResumeAll>
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000e9c 	.word	0x20000e9c
 8005178:	20000ea0 	.word	0x20000ea0
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005188:	4b0e      	ldr	r3, [pc, #56]	@ (80051c4 <prvGetNextExpireTime+0x44>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <prvGetNextExpireTime+0x16>
 8005192:	2201      	movs	r2, #1
 8005194:	e000      	b.n	8005198 <prvGetNextExpireTime+0x18>
 8005196:	2200      	movs	r2, #0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051a4:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <prvGetNextExpireTime+0x44>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e001      	b.n	80051b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051b4:	68fb      	ldr	r3, [r7, #12]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000e98 	.word	0x20000e98

080051c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051d0:	f7ff fa64 	bl	800469c <xTaskGetTickCount>
 80051d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <prvSampleTimeNow+0x3c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d205      	bcs.n	80051ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051e0:	f000 f93a 	bl	8005458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051f2:	4a04      	ldr	r2, [pc, #16]	@ (8005204 <prvSampleTimeNow+0x3c>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000ea8 	.word	0x20000ea8

08005208 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	d812      	bhi.n	8005254 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e01b      	b.n	800527a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005242:	4b10      	ldr	r3, [pc, #64]	@ (8005284 <prvInsertTimerInActiveList+0x7c>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3304      	adds	r3, #4
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7fe f9b8 	bl	80035c2 <vListInsert>
 8005252:	e012      	b.n	800527a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d206      	bcs.n	800526a <prvInsertTimerInActiveList+0x62>
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005264:	2301      	movs	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e007      	b.n	800527a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800526a:	4b07      	ldr	r3, [pc, #28]	@ (8005288 <prvInsertTimerInActiveList+0x80>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3304      	adds	r3, #4
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f7fe f9a4 	bl	80035c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800527a:	697b      	ldr	r3, [r7, #20]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000e9c 	.word	0x20000e9c
 8005288:	20000e98 	.word	0x20000e98

0800528c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08e      	sub	sp, #56	@ 0x38
 8005290:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005292:	e0ce      	b.n	8005432 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	da19      	bge.n	80052ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	3304      	adds	r3, #4
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	61fb      	str	r3, [r7, #28]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c4:	6850      	ldr	r0, [r2, #4]
 80052c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c8:	6892      	ldr	r2, [r2, #8]
 80052ca:	4611      	mov	r1, r2
 80052cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f2c0 80ae 	blt.w	8005432 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe f9a4 	bl	8003634 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052ec:	463b      	mov	r3, r7
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff6a 	bl	80051c8 <prvSampleTimeNow>
 80052f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b09      	cmp	r3, #9
 80052fa:	f200 8097 	bhi.w	800542c <prvProcessReceivedCommands+0x1a0>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <prvProcessReceivedCommands+0x78>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	0800532d 	.word	0x0800532d
 8005308:	0800532d 	.word	0x0800532d
 800530c:	0800532d 	.word	0x0800532d
 8005310:	080053a3 	.word	0x080053a3
 8005314:	080053b7 	.word	0x080053b7
 8005318:	08005403 	.word	0x08005403
 800531c:	0800532d 	.word	0x0800532d
 8005320:	0800532d 	.word	0x0800532d
 8005324:	080053a3 	.word	0x080053a3
 8005328:	080053b7 	.word	0x080053b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	18d1      	adds	r1, r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800534c:	f7ff ff5c 	bl	8005208 <prvInsertTimerInActiveList>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d06c      	beq.n	8005430 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d061      	beq.n	8005430 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	441a      	add	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	2100      	movs	r1, #0
 800537c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800537e:	f7ff fe01 	bl	8004f84 <xTimerGenericCommand>
 8005382:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d152      	bne.n	8005430 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	61bb      	str	r3, [r7, #24]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053b4:	e03d      	b.n	8005432 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	617b      	str	r3, [r7, #20]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	18d1      	adds	r1, r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053fc:	f7ff ff04 	bl	8005208 <prvInsertTimerInActiveList>
					break;
 8005400:	e017      	b.n	8005432 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005412:	f000 fbe9 	bl	8005be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005416:	e00c      	b.n	8005432 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800542a:	e002      	b.n	8005432 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800542c:	bf00      	nop
 800542e:	e000      	b.n	8005432 <prvProcessReceivedCommands+0x1a6>
					break;
 8005430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <prvProcessReceivedCommands+0x1c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1d39      	adds	r1, r7, #4
 8005438:	2200      	movs	r2, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f7fe fbce 	bl	8003bdc <xQueueReceive>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	f47f af26 	bne.w	8005294 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	3730      	adds	r7, #48	@ 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000ea0 	.word	0x20000ea0

08005458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800545e:	e049      	b.n	80054f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005460:	4b2e      	ldr	r3, [pc, #184]	@ (800551c <prvSwitchTimerLists+0xc4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800546a:	4b2c      	ldr	r3, [pc, #176]	@ (800551c <prvSwitchTimerLists+0xc4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3304      	adds	r3, #4
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe f8db 	bl	8003634 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02f      	beq.n	80054f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d90e      	bls.n	80054c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054b2:	4b1a      	ldr	r3, [pc, #104]	@ (800551c <prvSwitchTimerLists+0xc4>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fe f880 	bl	80035c2 <vListInsert>
 80054c2:	e017      	b.n	80054f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054c4:	2300      	movs	r3, #0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	2100      	movs	r1, #0
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff fd58 	bl	8004f84 <xTimerGenericCommand>
 80054d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	603b      	str	r3, [r7, #0]
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054f4:	4b09      	ldr	r3, [pc, #36]	@ (800551c <prvSwitchTimerLists+0xc4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1b0      	bne.n	8005460 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054fe:	4b07      	ldr	r3, [pc, #28]	@ (800551c <prvSwitchTimerLists+0xc4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <prvSwitchTimerLists+0xc8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a04      	ldr	r2, [pc, #16]	@ (800551c <prvSwitchTimerLists+0xc4>)
 800550a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800550c:	4a04      	ldr	r2, [pc, #16]	@ (8005520 <prvSwitchTimerLists+0xc8>)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6013      	str	r3, [r2, #0]
}
 8005512:	bf00      	nop
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000e98 	.word	0x20000e98
 8005520:	20000e9c 	.word	0x20000e9c

08005524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800552a:	f000 f96d 	bl	8005808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <prvCheckForValidListAndQueue+0x60>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d120      	bne.n	8005578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005536:	4814      	ldr	r0, [pc, #80]	@ (8005588 <prvCheckForValidListAndQueue+0x64>)
 8005538:	f7fd fff2 	bl	8003520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800553c:	4813      	ldr	r0, [pc, #76]	@ (800558c <prvCheckForValidListAndQueue+0x68>)
 800553e:	f7fd ffef 	bl	8003520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005542:	4b13      	ldr	r3, [pc, #76]	@ (8005590 <prvCheckForValidListAndQueue+0x6c>)
 8005544:	4a10      	ldr	r2, [pc, #64]	@ (8005588 <prvCheckForValidListAndQueue+0x64>)
 8005546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005548:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <prvCheckForValidListAndQueue+0x70>)
 800554a:	4a10      	ldr	r2, [pc, #64]	@ (800558c <prvCheckForValidListAndQueue+0x68>)
 800554c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800554e:	2300      	movs	r3, #0
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <prvCheckForValidListAndQueue+0x74>)
 8005554:	4a11      	ldr	r2, [pc, #68]	@ (800559c <prvCheckForValidListAndQueue+0x78>)
 8005556:	2110      	movs	r1, #16
 8005558:	200a      	movs	r0, #10
 800555a:	f7fe f8ff 	bl	800375c <xQueueGenericCreateStatic>
 800555e:	4603      	mov	r3, r0
 8005560:	4a08      	ldr	r2, [pc, #32]	@ (8005584 <prvCheckForValidListAndQueue+0x60>)
 8005562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005564:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <prvCheckForValidListAndQueue+0x60>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800556c:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <prvCheckForValidListAndQueue+0x60>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	490b      	ldr	r1, [pc, #44]	@ (80055a0 <prvCheckForValidListAndQueue+0x7c>)
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fd24 	bl	8003fc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005578:	f000 f978 	bl	800586c <vPortExitCritical>
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000ea0 	.word	0x20000ea0
 8005588:	20000e70 	.word	0x20000e70
 800558c:	20000e84 	.word	0x20000e84
 8005590:	20000e98 	.word	0x20000e98
 8005594:	20000e9c 	.word	0x20000e9c
 8005598:	20000f4c 	.word	0x20000f4c
 800559c:	20000eac 	.word	0x20000eac
 80055a0:	08006044 	.word	0x08006044

080055a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b04      	subs	r3, #4
 80055b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f023 0201 	bic.w	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3b04      	subs	r3, #4
 80055d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005608 <pxPortInitialiseStack+0x64>)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3b14      	subs	r3, #20
 80055de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f06f 0202 	mvn.w	r2, #2
 80055f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3b20      	subs	r3, #32
 80055f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055fa:	68fb      	ldr	r3, [r7, #12]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	0800560d 	.word	0x0800560d

0800560c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005616:	4b13      	ldr	r3, [pc, #76]	@ (8005664 <prvTaskExitError+0x58>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561e:	d00b      	beq.n	8005638 <prvTaskExitError+0x2c>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <prvTaskExitError+0x28>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	60bb      	str	r3, [r7, #8]
}
 800564a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800564c:	bf00      	nop
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0fc      	beq.n	800564e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000003c 	.word	0x2000003c
	...

08005670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005670:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <pxCurrentTCBConst2>)
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	f380 8809 	msr	PSP, r0
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f380 8811 	msr	BASEPRI, r0
 800568a:	4770      	bx	lr
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst2>:
 8005690:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005698:	4808      	ldr	r0, [pc, #32]	@ (80056bc <prvPortStartFirstTask+0x24>)
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	f380 8808 	msr	MSP, r0
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8814 	msr	CONTROL, r0
 80056aa:	b662      	cpsie	i
 80056ac:	b661      	cpsie	f
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	df00      	svc	0
 80056b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ba:	bf00      	nop
 80056bc:	e000ed08 	.word	0xe000ed08

080056c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056c6:	4b47      	ldr	r3, [pc, #284]	@ (80057e4 <xPortStartScheduler+0x124>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a47      	ldr	r2, [pc, #284]	@ (80057e8 <xPortStartScheduler+0x128>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10b      	bne.n	80056e8 <xPortStartScheduler+0x28>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056e8:	4b3e      	ldr	r3, [pc, #248]	@ (80057e4 <xPortStartScheduler+0x124>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a3f      	ldr	r2, [pc, #252]	@ (80057ec <xPortStartScheduler+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10b      	bne.n	800570a <xPortStartScheduler+0x4a>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800570a:	4b39      	ldr	r3, [pc, #228]	@ (80057f0 <xPortStartScheduler+0x130>)
 800570c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	22ff      	movs	r2, #255	@ 0xff
 800571a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4b31      	ldr	r3, [pc, #196]	@ (80057f4 <xPortStartScheduler+0x134>)
 8005730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005732:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <xPortStartScheduler+0x138>)
 8005734:	2207      	movs	r2, #7
 8005736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005738:	e009      	b.n	800574e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800573a:	4b2f      	ldr	r3, [pc, #188]	@ (80057f8 <xPortStartScheduler+0x138>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	4a2d      	ldr	r2, [pc, #180]	@ (80057f8 <xPortStartScheduler+0x138>)
 8005742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005756:	2b80      	cmp	r3, #128	@ 0x80
 8005758:	d0ef      	beq.n	800573a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800575a:	4b27      	ldr	r3, [pc, #156]	@ (80057f8 <xPortStartScheduler+0x138>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1c3 0307 	rsb	r3, r3, #7
 8005762:	2b04      	cmp	r3, #4
 8005764:	d00b      	beq.n	800577e <xPortStartScheduler+0xbe>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60bb      	str	r3, [r7, #8]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800577e:	4b1e      	ldr	r3, [pc, #120]	@ (80057f8 <xPortStartScheduler+0x138>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <xPortStartScheduler+0x138>)
 8005786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005788:	4b1b      	ldr	r3, [pc, #108]	@ (80057f8 <xPortStartScheduler+0x138>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005790:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <xPortStartScheduler+0x138>)
 8005792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800579c:	4b17      	ldr	r3, [pc, #92]	@ (80057fc <xPortStartScheduler+0x13c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <xPortStartScheduler+0x13c>)
 80057a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057a8:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <xPortStartScheduler+0x13c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a13      	ldr	r2, [pc, #76]	@ (80057fc <xPortStartScheduler+0x13c>)
 80057ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80057b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057b4:	f000 f8da 	bl	800596c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057b8:	4b11      	ldr	r3, [pc, #68]	@ (8005800 <xPortStartScheduler+0x140>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057be:	f000 f8f9 	bl	80059b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057c2:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <xPortStartScheduler+0x144>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005804 <xPortStartScheduler+0x144>)
 80057c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80057cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057ce:	f7ff ff63 	bl	8005698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057d2:	f7ff f82d 	bl	8004830 <vTaskSwitchContext>
	prvTaskExitError();
 80057d6:	f7ff ff19 	bl	800560c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	e000ed00 	.word	0xe000ed00
 80057e8:	410fc271 	.word	0x410fc271
 80057ec:	410fc270 	.word	0x410fc270
 80057f0:	e000e400 	.word	0xe000e400
 80057f4:	20000f9c 	.word	0x20000f9c
 80057f8:	20000fa0 	.word	0x20000fa0
 80057fc:	e000ed20 	.word	0xe000ed20
 8005800:	2000003c 	.word	0x2000003c
 8005804:	e000ef34 	.word	0xe000ef34

08005808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005822:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <vPortEnterCritical+0x5c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	4a0e      	ldr	r2, [pc, #56]	@ (8005864 <vPortEnterCritical+0x5c>)
 800582a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800582c:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <vPortEnterCritical+0x5c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d110      	bne.n	8005856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005834:	4b0c      	ldr	r3, [pc, #48]	@ (8005868 <vPortEnterCritical+0x60>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <vPortEnterCritical+0x4e>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	603b      	str	r3, [r7, #0]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <vPortEnterCritical+0x4a>
	}
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000003c 	.word	0x2000003c
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005872:	4b12      	ldr	r3, [pc, #72]	@ (80058bc <vPortExitCritical+0x50>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <vPortExitCritical+0x26>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	607b      	str	r3, [r7, #4]
}
 800588c:	bf00      	nop
 800588e:	bf00      	nop
 8005890:	e7fd      	b.n	800588e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005892:	4b0a      	ldr	r3, [pc, #40]	@ (80058bc <vPortExitCritical+0x50>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3b01      	subs	r3, #1
 8005898:	4a08      	ldr	r2, [pc, #32]	@ (80058bc <vPortExitCritical+0x50>)
 800589a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800589c:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <vPortExitCritical+0x50>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <vPortExitCritical+0x44>
 80058a4:	2300      	movs	r3, #0
 80058a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f383 8811 	msr	BASEPRI, r3
}
 80058ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	2000003c 	.word	0x2000003c

080058c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058c0:	f3ef 8009 	mrs	r0, PSP
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4b15      	ldr	r3, [pc, #84]	@ (8005920 <pxCurrentTCBConst>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	f01e 0f10 	tst.w	lr, #16
 80058d0:	bf08      	it	eq
 80058d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	6010      	str	r0, [r2, #0]
 80058dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80058e4:	f380 8811 	msr	BASEPRI, r0
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f7fe ff9e 	bl	8004830 <vTaskSwitchContext>
 80058f4:	f04f 0000 	mov.w	r0, #0
 80058f8:	f380 8811 	msr	BASEPRI, r0
 80058fc:	bc09      	pop	{r0, r3}
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	6808      	ldr	r0, [r1, #0]
 8005902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005906:	f01e 0f10 	tst.w	lr, #16
 800590a:	bf08      	it	eq
 800590c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005910:	f380 8809 	msr	PSP, r0
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w

08005920 <pxCurrentTCBConst>:
 8005920:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
}
 8005940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005942:	f7fe febb 	bl	80046bc <xTaskIncrementTick>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800594c:	4b06      	ldr	r3, [pc, #24]	@ (8005968 <xPortSysTickHandler+0x40>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
}
 800595e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <vPortSetupTimerInterrupt+0x34>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <vPortSetupTimerInterrupt+0x38>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <vPortSetupTimerInterrupt+0x3c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0a      	ldr	r2, [pc, #40]	@ (80059ac <vPortSetupTimerInterrupt+0x40>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	4a09      	ldr	r2, [pc, #36]	@ (80059b0 <vPortSetupTimerInterrupt+0x44>)
 800598a:	3b01      	subs	r3, #1
 800598c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800598e:	4b04      	ldr	r3, [pc, #16]	@ (80059a0 <vPortSetupTimerInterrupt+0x34>)
 8005990:	2207      	movs	r2, #7
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	e000e010 	.word	0xe000e010
 80059a4:	e000e018 	.word	0xe000e018
 80059a8:	20000030 	.word	0x20000030
 80059ac:	10624dd3 	.word	0x10624dd3
 80059b0:	e000e014 	.word	0xe000e014

080059b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80059c4 <vPortEnableVFP+0x10>
 80059b8:	6801      	ldr	r1, [r0, #0]
 80059ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80059be:	6001      	str	r1, [r0, #0]
 80059c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059c2:	bf00      	nop
 80059c4:	e000ed88 	.word	0xe000ed88

080059c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ce:	f3ef 8305 	mrs	r3, IPSR
 80059d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	d915      	bls.n	8005a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059da:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <vPortValidateInterruptPriority+0x74>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059e4:	4b16      	ldr	r3, [pc, #88]	@ (8005a40 <vPortValidateInterruptPriority+0x78>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	7afa      	ldrb	r2, [r7, #11]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d20b      	bcs.n	8005a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a06:	4b0f      	ldr	r3, [pc, #60]	@ (8005a44 <vPortValidateInterruptPriority+0x7c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a48 <vPortValidateInterruptPriority+0x80>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d90b      	bls.n	8005a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	603b      	str	r3, [r7, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <vPortValidateInterruptPriority+0x62>
	}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000e3f0 	.word	0xe000e3f0
 8005a40:	20000f9c 	.word	0x20000f9c
 8005a44:	e000ed0c 	.word	0xe000ed0c
 8005a48:	20000fa0 	.word	0x20000fa0

08005a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a58:	f7fe fd74 	bl	8004544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bd0 <pvPortMalloc+0x184>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a64:	f000 f924 	bl	8005cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a68:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd4 <pvPortMalloc+0x188>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f040 8095 	bne.w	8005ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01e      	beq.n	8005aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d015      	beq.n	8005aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f023 0307 	bic.w	r3, r3, #7
 8005a94:	3308      	adds	r3, #8
 8005a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <pvPortMalloc+0x6e>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	617b      	str	r3, [r7, #20]
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	e7fd      	b.n	8005ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d06f      	beq.n	8005ba0 <pvPortMalloc+0x154>
 8005ac0:	4b45      	ldr	r3, [pc, #276]	@ (8005bd8 <pvPortMalloc+0x18c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d86a      	bhi.n	8005ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aca:	4b44      	ldr	r3, [pc, #272]	@ (8005bdc <pvPortMalloc+0x190>)
 8005acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ace:	4b43      	ldr	r3, [pc, #268]	@ (8005bdc <pvPortMalloc+0x190>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad4:	e004      	b.n	8005ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d903      	bls.n	8005af2 <pvPortMalloc+0xa6>
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f1      	bne.n	8005ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005af2:	4b37      	ldr	r3, [pc, #220]	@ (8005bd0 <pvPortMalloc+0x184>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d051      	beq.n	8005ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	4413      	add	r3, r2
 8005b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	2308      	movs	r3, #8
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d920      	bls.n	8005b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <pvPortMalloc+0xfc>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b5a:	69b8      	ldr	r0, [r7, #24]
 8005b5c:	f000 f90a 	bl	8005d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b60:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd8 <pvPortMalloc+0x18c>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd8 <pvPortMalloc+0x18c>)
 8005b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd8 <pvPortMalloc+0x18c>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <pvPortMalloc+0x194>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d203      	bcs.n	8005b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b7a:	4b17      	ldr	r3, [pc, #92]	@ (8005bd8 <pvPortMalloc+0x18c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a18      	ldr	r2, [pc, #96]	@ (8005be0 <pvPortMalloc+0x194>)
 8005b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4b13      	ldr	r3, [pc, #76]	@ (8005bd4 <pvPortMalloc+0x188>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b96:	4b13      	ldr	r3, [pc, #76]	@ (8005be4 <pvPortMalloc+0x198>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a11      	ldr	r2, [pc, #68]	@ (8005be4 <pvPortMalloc+0x198>)
 8005b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ba0:	f7fe fcde 	bl	8004560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3728      	adds	r7, #40	@ 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20004bac 	.word	0x20004bac
 8005bd4:	20004bc0 	.word	0x20004bc0
 8005bd8:	20004bb0 	.word	0x20004bb0
 8005bdc:	20004ba4 	.word	0x20004ba4
 8005be0:	20004bb4 	.word	0x20004bb4
 8005be4:	20004bb8 	.word	0x20004bb8

08005be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04f      	beq.n	8005c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ca4 <vPortFree+0xbc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <vPortFree+0x46>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <vPortFree+0x66>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60bb      	str	r3, [r7, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	e7fd      	b.n	8005c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <vPortFree+0xbc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01e      	beq.n	8005c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11a      	bne.n	8005c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca4 <vPortFree+0xbc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	401a      	ands	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c74:	f7fe fc66 	bl	8004544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <vPortFree+0xc0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4413      	add	r3, r2
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <vPortFree+0xc0>)
 8005c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c86:	6938      	ldr	r0, [r7, #16]
 8005c88:	f000 f874 	bl	8005d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c8c:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <vPortFree+0xc4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3301      	adds	r3, #1
 8005c92:	4a06      	ldr	r2, [pc, #24]	@ (8005cac <vPortFree+0xc4>)
 8005c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c96:	f7fe fc63 	bl	8004560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c9a:	bf00      	nop
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20004bc0 	.word	0x20004bc0
 8005ca8:	20004bb0 	.word	0x20004bb0
 8005cac:	20004bbc 	.word	0x20004bbc

08005cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cbc:	4b27      	ldr	r3, [pc, #156]	@ (8005d5c <prvHeapInit+0xac>)
 8005cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3307      	adds	r3, #7
 8005cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0307 	bic.w	r3, r3, #7
 8005cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <prvHeapInit+0xac>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <prvHeapInit+0xb0>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cee:	4b1c      	ldr	r3, [pc, #112]	@ (8005d60 <prvHeapInit+0xb0>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0307 	bic.w	r3, r3, #7
 8005d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <prvHeapInit+0xb4>)
 8005d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d12:	4b14      	ldr	r3, [pc, #80]	@ (8005d64 <prvHeapInit+0xb4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d1a:	4b12      	ldr	r3, [pc, #72]	@ (8005d64 <prvHeapInit+0xb4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d30:	4b0c      	ldr	r3, [pc, #48]	@ (8005d64 <prvHeapInit+0xb4>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <prvHeapInit+0xb8>)
 8005d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	4a09      	ldr	r2, [pc, #36]	@ (8005d6c <prvHeapInit+0xbc>)
 8005d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d48:	4b09      	ldr	r3, [pc, #36]	@ (8005d70 <prvHeapInit+0xc0>)
 8005d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d4e:	601a      	str	r2, [r3, #0]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	20000fa4 	.word	0x20000fa4
 8005d60:	20004ba4 	.word	0x20004ba4
 8005d64:	20004bac 	.word	0x20004bac
 8005d68:	20004bb4 	.word	0x20004bb4
 8005d6c:	20004bb0 	.word	0x20004bb0
 8005d70:	20004bc0 	.word	0x20004bc0

08005d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d7c:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <prvInsertBlockIntoFreeList+0xac>)
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e002      	b.n	8005d88 <prvInsertBlockIntoFreeList+0x14>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d8f7      	bhi.n	8005d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d108      	bne.n	8005db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	441a      	add	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d118      	bne.n	8005dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d00d      	beq.n	8005df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	441a      	add	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e008      	b.n	8005e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005df2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <prvInsertBlockIntoFreeList+0xb0>)
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e003      	b.n	8005e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d002      	beq.n	8005e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20004ba4 	.word	0x20004ba4
 8005e24:	20004bac 	.word	0x20004bac

08005e28 <memset>:
 8005e28:	4402      	add	r2, r0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memset+0xa>
 8005e30:	4770      	bx	lr
 8005e32:	f803 1b01 	strb.w	r1, [r3], #1
 8005e36:	e7f9      	b.n	8005e2c <memset+0x4>

08005e38 <_reclaim_reent>:
 8005e38:	4b29      	ldr	r3, [pc, #164]	@ (8005ee0 <_reclaim_reent+0xa8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4283      	cmp	r3, r0
 8005e3e:	b570      	push	{r4, r5, r6, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	d04b      	beq.n	8005edc <_reclaim_reent+0xa4>
 8005e44:	69c3      	ldr	r3, [r0, #28]
 8005e46:	b1ab      	cbz	r3, 8005e74 <_reclaim_reent+0x3c>
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	b16b      	cbz	r3, 8005e68 <_reclaim_reent+0x30>
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	69e3      	ldr	r3, [r4, #28]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	5959      	ldr	r1, [r3, r5]
 8005e54:	2900      	cmp	r1, #0
 8005e56:	d13b      	bne.n	8005ed0 <_reclaim_reent+0x98>
 8005e58:	3504      	adds	r5, #4
 8005e5a:	2d80      	cmp	r5, #128	@ 0x80
 8005e5c:	d1f7      	bne.n	8005e4e <_reclaim_reent+0x16>
 8005e5e:	69e3      	ldr	r3, [r4, #28]
 8005e60:	4620      	mov	r0, r4
 8005e62:	68d9      	ldr	r1, [r3, #12]
 8005e64:	f000 f872 	bl	8005f4c <_free_r>
 8005e68:	69e3      	ldr	r3, [r4, #28]
 8005e6a:	6819      	ldr	r1, [r3, #0]
 8005e6c:	b111      	cbz	r1, 8005e74 <_reclaim_reent+0x3c>
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f86c 	bl	8005f4c <_free_r>
 8005e74:	6961      	ldr	r1, [r4, #20]
 8005e76:	b111      	cbz	r1, 8005e7e <_reclaim_reent+0x46>
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 f867 	bl	8005f4c <_free_r>
 8005e7e:	69e1      	ldr	r1, [r4, #28]
 8005e80:	b111      	cbz	r1, 8005e88 <_reclaim_reent+0x50>
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 f862 	bl	8005f4c <_free_r>
 8005e88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e8a:	b111      	cbz	r1, 8005e92 <_reclaim_reent+0x5a>
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 f85d 	bl	8005f4c <_free_r>
 8005e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e94:	b111      	cbz	r1, 8005e9c <_reclaim_reent+0x64>
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f858 	bl	8005f4c <_free_r>
 8005e9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e9e:	b111      	cbz	r1, 8005ea6 <_reclaim_reent+0x6e>
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f853 	bl	8005f4c <_free_r>
 8005ea6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ea8:	b111      	cbz	r1, 8005eb0 <_reclaim_reent+0x78>
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 f84e 	bl	8005f4c <_free_r>
 8005eb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005eb2:	b111      	cbz	r1, 8005eba <_reclaim_reent+0x82>
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 f849 	bl	8005f4c <_free_r>
 8005eba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ebc:	b111      	cbz	r1, 8005ec4 <_reclaim_reent+0x8c>
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 f844 	bl	8005f4c <_free_r>
 8005ec4:	6a23      	ldr	r3, [r4, #32]
 8005ec6:	b14b      	cbz	r3, 8005edc <_reclaim_reent+0xa4>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ece:	4718      	bx	r3
 8005ed0:	680e      	ldr	r6, [r1, #0]
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 f83a 	bl	8005f4c <_free_r>
 8005ed8:	4631      	mov	r1, r6
 8005eda:	e7bb      	b.n	8005e54 <_reclaim_reent+0x1c>
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000040 	.word	0x20000040

08005ee4 <__libc_init_array>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8005f1c <__libc_init_array+0x38>)
 8005ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8005f20 <__libc_init_array+0x3c>)
 8005eea:	1b64      	subs	r4, r4, r5
 8005eec:	10a4      	asrs	r4, r4, #2
 8005eee:	2600      	movs	r6, #0
 8005ef0:	42a6      	cmp	r6, r4
 8005ef2:	d109      	bne.n	8005f08 <__libc_init_array+0x24>
 8005ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8005f24 <__libc_init_array+0x40>)
 8005ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8005f28 <__libc_init_array+0x44>)
 8005ef8:	f000 f87e 	bl	8005ff8 <_init>
 8005efc:	1b64      	subs	r4, r4, r5
 8005efe:	10a4      	asrs	r4, r4, #2
 8005f00:	2600      	movs	r6, #0
 8005f02:	42a6      	cmp	r6, r4
 8005f04:	d105      	bne.n	8005f12 <__libc_init_array+0x2e>
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0c:	4798      	blx	r3
 8005f0e:	3601      	adds	r6, #1
 8005f10:	e7ee      	b.n	8005ef0 <__libc_init_array+0xc>
 8005f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f16:	4798      	blx	r3
 8005f18:	3601      	adds	r6, #1
 8005f1a:	e7f2      	b.n	8005f02 <__libc_init_array+0x1e>
 8005f1c:	080060b4 	.word	0x080060b4
 8005f20:	080060b4 	.word	0x080060b4
 8005f24:	080060b4 	.word	0x080060b4
 8005f28:	080060b8 	.word	0x080060b8

08005f2c <__retarget_lock_acquire_recursive>:
 8005f2c:	4770      	bx	lr

08005f2e <__retarget_lock_release_recursive>:
 8005f2e:	4770      	bx	lr

08005f30 <memcpy>:
 8005f30:	440a      	add	r2, r1
 8005f32:	4291      	cmp	r1, r2
 8005f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f38:	d100      	bne.n	8005f3c <memcpy+0xc>
 8005f3a:	4770      	bx	lr
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f46:	4291      	cmp	r1, r2
 8005f48:	d1f9      	bne.n	8005f3e <memcpy+0xe>
 8005f4a:	bd10      	pop	{r4, pc}

08005f4c <_free_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4605      	mov	r5, r0
 8005f50:	2900      	cmp	r1, #0
 8005f52:	d041      	beq.n	8005fd8 <_free_r+0x8c>
 8005f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f58:	1f0c      	subs	r4, r1, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bfb8      	it	lt
 8005f5e:	18e4      	addlt	r4, r4, r3
 8005f60:	f000 f83e 	bl	8005fe0 <__malloc_lock>
 8005f64:	4a1d      	ldr	r2, [pc, #116]	@ (8005fdc <_free_r+0x90>)
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	b933      	cbnz	r3, 8005f78 <_free_r+0x2c>
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	6014      	str	r4, [r2, #0]
 8005f6e:	4628      	mov	r0, r5
 8005f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f74:	f000 b83a 	b.w	8005fec <__malloc_unlock>
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d908      	bls.n	8005f8e <_free_r+0x42>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	1821      	adds	r1, r4, r0
 8005f80:	428b      	cmp	r3, r1
 8005f82:	bf01      	itttt	eq
 8005f84:	6819      	ldreq	r1, [r3, #0]
 8005f86:	685b      	ldreq	r3, [r3, #4]
 8005f88:	1809      	addeq	r1, r1, r0
 8005f8a:	6021      	streq	r1, [r4, #0]
 8005f8c:	e7ed      	b.n	8005f6a <_free_r+0x1e>
 8005f8e:	461a      	mov	r2, r3
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	b10b      	cbz	r3, 8005f98 <_free_r+0x4c>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d9fa      	bls.n	8005f8e <_free_r+0x42>
 8005f98:	6811      	ldr	r1, [r2, #0]
 8005f9a:	1850      	adds	r0, r2, r1
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d10b      	bne.n	8005fb8 <_free_r+0x6c>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	4401      	add	r1, r0
 8005fa4:	1850      	adds	r0, r2, r1
 8005fa6:	4283      	cmp	r3, r0
 8005fa8:	6011      	str	r1, [r2, #0]
 8005faa:	d1e0      	bne.n	8005f6e <_free_r+0x22>
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	6053      	str	r3, [r2, #4]
 8005fb2:	4408      	add	r0, r1
 8005fb4:	6010      	str	r0, [r2, #0]
 8005fb6:	e7da      	b.n	8005f6e <_free_r+0x22>
 8005fb8:	d902      	bls.n	8005fc0 <_free_r+0x74>
 8005fba:	230c      	movs	r3, #12
 8005fbc:	602b      	str	r3, [r5, #0]
 8005fbe:	e7d6      	b.n	8005f6e <_free_r+0x22>
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	1821      	adds	r1, r4, r0
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf04      	itt	eq
 8005fc8:	6819      	ldreq	r1, [r3, #0]
 8005fca:	685b      	ldreq	r3, [r3, #4]
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	bf04      	itt	eq
 8005fd0:	1809      	addeq	r1, r1, r0
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	6054      	str	r4, [r2, #4]
 8005fd6:	e7ca      	b.n	8005f6e <_free_r+0x22>
 8005fd8:	bd38      	pop	{r3, r4, r5, pc}
 8005fda:	bf00      	nop
 8005fdc:	20004d00 	.word	0x20004d00

08005fe0 <__malloc_lock>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	@ (8005fe8 <__malloc_lock+0x8>)
 8005fe2:	f7ff bfa3 	b.w	8005f2c <__retarget_lock_acquire_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	20004cfc 	.word	0x20004cfc

08005fec <__malloc_unlock>:
 8005fec:	4801      	ldr	r0, [pc, #4]	@ (8005ff4 <__malloc_unlock+0x8>)
 8005fee:	f7ff bf9e 	b.w	8005f2e <__retarget_lock_release_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20004cfc 	.word	0x20004cfc

08005ff8 <_init>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr

08006004 <_fini>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr
